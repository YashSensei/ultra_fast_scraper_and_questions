{
  "problem_code": "problems",
  "title": "Good Celebration",
  "tags": [],
  "text": "The ACM-ICPC World Finals are over! Which team came out on top? Why, only our favourite team - everyone's favourite team - the most deserving, lovable, courteous, powerful, flawless, successful team that has ever existed. Who else?It's time to celebrate, and what better way is there to celebrate than by eating cake? The contest organizers have bought $N$ ($1 \\leq N \\leq 200$) cakes (conveniently numbered $1..N$) - however, ever generous, The Team will only eat cake 1, leaving the rest for the other, inferior teams. Theywillneed their cake to be as tasty as possible, though. To help with this, $M$ ($0 \\leq M \\leq 200$) globs of icing are available, which will be distributed among the cakes. Icing is always used in whole globs.The cakes are arranged in a somewhat strange way - piled on top of one another. Cake 1 is directly on top of a table, while every other cake $i$ (for $i=2..N$) is directly on top of cake $c_i$. $c_1$ is considered to have a value of 0. Note that there may be multiple cakes on top of a single cake, and that the entire structure obeys the laws of physics (no cake is on top of itself, and no cakes are floating).Now, the tastiness of any cake $i$ is determined by the formula $b_i + m_i(x_i + y_i)$. $b_i$ ($0 \\leq b_i \\leq 100$) and $m_i$ ($0 \\leq m_i \\leq 100$) are simply properties of cake $i$, which depend on its size, shape, weight, temperature, fluffiness, and so on. $x_i$ is the number of globs of icing that are chosen to be applied to cake $i$. If there are no cakes on top of cake $i$, $y_i=0$ - otherwise, $y_i$ is the minimal tastiness of any cake directly on top of cake $i$. No cake will ever be capable of achieving a tastiness value larger than $2^{60}$, no matter how the icing is distributed.The members of The Team have already, of course, determined how the available icing could be optimally applied to the mountain of cakes to maximize the tastiness of their cake (cake 1). However, the contest organizers are the ones who will actually be distributing the icing, and they had better hope they get it right! Can you help them determine how tasty cake 1 should be? You don't want to know what The Team will do if their celebration isn't perfect...InputFirst line: 2 integers, $N$ and $M$Next $N$ lines: 3 integers, $c_i$, $b_i$, and $m_i$, for $i=1..N$Output1 integer, the maximal tastiness of cake 1, after all of the icing has been usedExampleInput:3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6Output:12Explanation of Sample:The optimal icing distribution is 1 glob each on cakes 2 and 3. This gives cake 2 a tastiness of $3+4(1+0)=7$, and cake 3 a tastiness of $2+6(1+0)=8$. Since both of these cakes are on top of cake 1, it then has a tastiness of $5+1(0+min\\{7,8\\})=12$. No other icing distribution yields a higher tastiness for cake 1.",
  "sample_input": "Input:3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6Output:12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOODH",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6",
      "expected_output": "12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 2\n2 6 7\n9 3 5\n8 4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\n6 10 7\n3 1 9\n2 5 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 7\n7 8 8\n4 5 5\n10 9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 93\n41 75 34\n41 16 77\n88 29 59",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 62\n94 85 91\n61 95 61\n13 71 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "57 98\n57 50 96\n94 2 69\n13 98 38",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "94 7\n44 28 23\n16 78 19\n65 55 83",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 34\n83 76 52\n98 2 77\n28 3 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "271 167\n328 199 327\n295 127 163\n430 241 426",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "494 407\n170 96 135\n321 466 237\n249 428 295",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "122 322\n480 273 226\n84 146 405\n290 430 87",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "210 296\n271 279 159\n295 377 165\n413 332 193",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "109 282\n451 456 310\n480 162 216\n127 316 417",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "198 185\n456 481 426\n192 104 221\n65 157 65",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "306 273\n155 467 321\n319 65 293\n129 480 326",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n1000 999 1000\n2 1 2\n1 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999\n2 2 999\n999 999 1\n1 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}