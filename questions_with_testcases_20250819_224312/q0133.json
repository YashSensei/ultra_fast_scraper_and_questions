{
  "problem_code": "problems",
  "title": "Grid Tiling",
  "tags": [],
  "text": "Vikas is the chief interior designer in charge of the Taj Palace, Mumbai. He wants to make an impressive and colourful pattern in the courtyard. Importing exotic tiles has become very difficult after the Mumbai terror attacks, and therefore Vikas has only 4 kinds of tiles to choose from:A     B     C    D\r\n==    ==    ==   ==\r\nXX    X     X    X\r\nXX    X     XXAny rotation of above tiles is also permitted.Each tile is available in 'k' different colors, and there's an infinite supply of all tiles. The courtyard has dimensions 2 × 'n'. Vikas wants to tile the courtyard in such a way that no two adjacent tiles have the same color. Two tiles are considered adjacent if they share a common side. Two tilings are considered different if:The arrangement of tiles is different.There is at least 1 position (1*1 square) which has different colors in the two arrangements.Can you help Vikas find the number of different ways in which he can tile the courtyard, subject to the above conditions?InputThe first line of input contains a single integer 't', denoting the number of test cases.Each of the next 't' lines contains 2 space separated integers 'n' and 'k'.OutputFor each test case output one integer, denoting the number of different ways in which the courtyard can be tiled.Two tiles are considered adjacent if they share an edge. Two tiles which just share a common point are not considered adjacent.Since the answers can be large, print all the quantities modulo 1000000007.Constraints:t ≤ 10001 ≤ n ≤ 1091 ≤ k ≤ 1000ExampleInput:2\r\n1 1\r\n1 2Output:1\r\n4Explanation:Test case 1: There is only 1 way to tile the courtyard, by using a 2×1 tile.Test case 2: Let '1' and '2' be the available colors. The grid can be tiled in 4 ways:place one 2×1 tile of color '1',place one 2×1 tile of color '2',place two 1×1 tiles (color '1' above and color '2' below),place two 1×1 tiles (color '2' above and color '1' below)",
  "sample_input": "A     B     C    D\r\n==    ==    ==   ==\r\nXX    X     X    X\r\nXX    X     XX",
  "sample_output": "Input:2\r\n1 1\r\n1 2Output:1\r\n4",
  "link": "https://www.spoj.com/problems/BTCODE_J",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "A     B     C    D\r\n==    ==    ==   ==\r\nXX    X     X    X\r\nXX    X     XX",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\n1 1\r\n1 2",
      "expected_output": "1\r\n4",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "aose gfokj wn nhuco\ncntve jnx ke h\nsdjr ncwmx pfsqg l\nhjz knh u",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "z mv pkrfm sd\ngm grze y ztdwa\nf t owkx pffc\nhkk vrl szhgy",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "k q n z\nap bh lxe obv\nyyx h cq ns\nhcw mqxqn cnlih",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "inu g tnppo ehvyv\nixen p l hnrc\nhwtj i exrx a\nwb td w",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "br l kpb sn\nc oghyt j vvr\ncaad qsal i gq\nmxkf m hxd",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "lt rpaus b u\nguqss j tqkxe p\nbjgop txj xzczy m\nq er f",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "al zv gtgm anaz\nntna wx rve pg\nvl j jqmh gxlxo\nauj zcxyi zva",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ekq q kqlpz okyo\nglzxd tnaa n zf\nyums kkkp ti vtb\naphi fh wdq",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "k ary qbsxv ae\nfrwk sn d uguht\neekyu klv qotvs bzgw\nf yu pe",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "pek jep rhqm tscba\nfg ujpmc fbft z\net xasu mp ncr\nbflwm vpd qf",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "nbla yijc tj gzebl\njunx k fevzo lyok\np hiofe k cqiri\nr calcr qpao",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "ormp zsl zgu zjyql\naes ojlv j eite\nh tveg rhwpr jhg\nj x cv",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "iwvq dcoxn h bmrx\nsjmm bysko jmw ug\nvlj g fphm p\ntdcf k mn",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "hthl dryuy eh x\nvy hwqvm azc uro\nalr zp piqhw xeck\nvkch a o",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "wcfz jidg fwg e\nty slu gyly b\njbm yop jmzng ysz\ngihxg aen w",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "qxaa w eicv mmqm\nhlf briqr niku kefl\nb wcfoq ju bdt\nmbpc hb ii",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "a jlnh nnadp a\ndiuz klhys w vcodl\nnnh hncpb b jiayu\npku du qu",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "qxo hgmk w dzrti\nzfqt emvg ey s\nsy no tiogs dunlb\nl bolj uvzw",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}