{
  "problem_code": "problems",
  "title": "Ghost Town",
  "tags": [],
  "text": "You are givennnumbers initially. You have to maintain amultisetfor thosennumbers. Then you are givenqqueries. Queries will be one of the following types:1 x: Letabe the count of elements smaller than or equal tox. Addx+ainto the multiset.2 y: report the number of numbers in the multiset that are smaller than or equal toy.3 z: report thezth smallest number of the multiset. Note that if any numberdappears more than once, it is to be counted as many times it appears! Also, if z exceeds the number of elements in themultiset, that is answer for this query doesn't exist, print \"invalid\". Look at the sample input for clarification.NoteSince it is amultiset, it will also store duplicates. Also, lets say our multiset has elements 1, 2, 2, 3, 3, 3. then for z=3, answer would be2.Constraints1 ≤ n ≤ 1000001 ≤ q ≤ 1000001 ≤ x ≤ (109- 2 × 105)1 ≤ y, z ≤ 1091 ≤ Initial elements of the multiset ≤ (109- 2 × 105)InputThe first line will contain two integers, n and q, denoting the number of initial members of the multiset and the number of queries.Next q lines will be of he form:Type D :That is, the queries will be of the one of given 3 types and accordingly, you will be given an integer D.OutputYou have to print the output for query numbers2and3.ExampleInput:10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26Output:11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
  "sample_input": "Input:10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26Output:11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COUNT1IT",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26",
      "expected_output": "11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5\n10 4 2 5 3 2 2 4 5 7\n1 3\n3 10\n2 6\n2 8\n10 5\n2 6\n7 2\n2 5\n9 10\n7 5\n4 1\n6 6\n5 7\n2 4\n10 5\n4 7\n10 1\n3 7\n8 3\n7 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1\n10 10 8 4 1 8 1 5 5 5\n4 2\n1 8\n3 9\n5 6\n8 9\n2 1\n2 2\n6 7\n8 5\n9 5\n6 8\n1 3\n5 10\n8 1\n8 10\n10 6\n10 2\n3 9\n9 3\n9 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n9 2 10 2 9 4 2 3 4 10\n6 8\n8 7\n7 9\n2 5\n8 8\n3 5\n2 1\n3 3\n8 6\n7 9\n3 10\n5 3\n4 3\n5 7\n2 4\n9 3\n9 1\n6 5\n10 6\n7 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "90 59\n95 13 13 46 98 13 47 18 33 97\n75 57\n47 90\n55 2\n44 97\n24 88\n24 76\n5 70\n83 86\n55 91\n47 70\n72 41\n34 73\n74 9\n84 63\n47 16\n25 82\n61 38\n94 7\n5 4\n72 73",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "44 31\n33 62 86 22 54 3 96 59 59 70\n71 18\n87 6\n42 69\n55 3\n98 49\n96 90\n27 91\n57 4\n49 90\n89 71\n20 62\n53 6\n43 55\n100 18\n58 10\n38 38\n5 90\n35 66\n73 95\n29 89",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "54 41\n2 70 43 36 68 62 74 81 35 98\n21 78\n85 37\n60 71\n70 70\n8 93\n87 81\n50 6\n69 38\n54 96\n91 41\n81 98\n48 44\n81 45\n23 23\n25 26\n45 26\n20 38\n19 52\n57 4\n38 76",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 67\n12 32 5 10 79 51 1 14 61 74\n13 55\n15 27\n6 99\n56 15\n9 78\n13 37\n61 84\n86 4\n64 6\n46 1\n38 42\n37 36\n83 65\n45 31\n6 85\n91 73\n8 85\n50 46\n49 64\n56 7",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 100\n49 83 15 37 66 55 17 40 86 62\n1 16\n45 52\n11 53\n74 63\n74 52\n88 32\n75 25\n33 20\n70 4\n71 54\n90 21\n35 88\n16 1\n12 50\n33 50\n54 80\n31 60\n84 42\n21 100\n17 72",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "261301 291229\n258151 70273 422108 369580 350427 468542 278537 379390 190015 457105\n341111 267229\n270167 384389\n482181 331303\n113616 353085\n430893 73476\n245055 204355\n126815 188785\n53636 379065\n421030 473262\n339560 470833\n347300 326461\n423496 330637\n414457 254380\n195481 209838\n366991 146482\n326437 327102\n145150 169921\n341477 454419\n336417 114797\n274333 392508",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "405196 158751\n384091 342875 163536 168855 332595 267707 467734 310903 447640 368268\n142240 167537\n219766 196306\n63046 238390\n335126 423139\n400237 68057\n496438 78405\n279967 162978\n112435 381316\n214412 198709\n190525 178169\n370233 255120\n98631 136486\n388016 194724\n387069 454396\n354039 497946\n197055 375145\n487757 57097\n375794 312994\n188066 212002\n408682 487128",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "115533 458720\n89644 285306 262800 121462 77585 306199 347466 243442 203435 396897\n70042 345081\n367700 246656\n197030 346326\n421261 117442\n74571 484507\n192781 310965\n359802 71999\n114258 448855\n480679 296152\n461000 359574\n451638 55545\n270132 388218\n204738 470187\n214473 345414\n80152 105431\n62858 377560\n141718 161915\n411608 90686\n312696 52521\n74150 164312",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "477713 215347\n370837 450034 302909 474788 328446 380758 247518 360933 263487 452991\n178887 354518\n339960 468492\n384984 151310\n444601 256618\n422726 221025\n368750 497377\n129723 408899\n170760 153827\n293461 194381\n269537 372995\n171523 457986\n247428 75776\n488234 433328\n148635 291786\n487608 137194\n124020 285853\n119541 480920\n250695 472065\n124217 278042\n400263 136957",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "122224 447054\n96039 78512 146078 421301 253956 93329 71130 212396 295060 438137\n291382 157965\n148369 219989\n219255 55702\n167786 349175\n396885 377038\n83076 375442\n138811 461275\n245726 475262\n434963 242505\n460131 370754\n376251 392357\n332489 300772\n151989 223461\n174967 440990\n243319 171134\n95304 221888\n169805 386433\n159341 338583\n231448 172959\n192020 81211",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "348146 478983\n185857 425763 389171 408496 194436 462724 67623 362683 111688 463075\n183931 423154\n130030 305476\n81359 221370\n375510 130064\n447974 441374\n420577 277526\n144489 462446\n421235 301816\n181736 448828\n311360 352514\n494488 304172\n417247 248835\n126884 353976\n176561 54308\n206970 458456\n314252 237868\n386208 468556\n349085 279363\n243452 167424\n127617 215931",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "109699 289793\n59942 422225 335030 331931 144917 164985 393134 179045 454766 244365\n341551 224695\n479611 436707\n269588 180339\n292918 455009\n64765 201147\n258930 51652\n338362 462871\n70286 243827\n95147 446279\n269781 312038\n477677 415474\n172870 244871\n441737 289570\n227081 99930\n193098 383091\n240274 374877\n381515 347177\n472143 248552\n305304 134587\n432200 341018",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999999 1000000\n1000000 1 1000000 2 1 1000000 1 999999 1 999999\n1000000 2\n1 1\n1000000 2\n999999 999999\n1000000 2\n1000000 1\n999999 1\n999999 1000000\n1 1\n2 1\n999999 1\n1 999999\n2 2\n999999 999999\n2 1\n1000000 2\n2 1000000\n2 1000000\n1 2\n1 999999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999999\n999999 2 1 1 2 1 1 999999 2 2\n2 1\n1 1000000\n1 2\n999999 1000000\n1000000 2\n999999 2\n999999 2\n999999 2\n2 1000000\n1000000 1\n1 999999\n999999 999999\n2 2\n1000000 1\n1 1\n999999 1000000\n1000000 2\n999999 2\n1000000 1000000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}