{
  "problem_code": "problems",
  "title": "Building Ports",
  "tags": [],
  "text": "N ports are to be constructed on the bytelandian river. Since trade occurs only along a Y miles stretch of the river, the distance between the start point and the last port must be Y. (Consider start point has the 0th port.)To optimize the ship movement between important ports, the distance between any two consecutive ports has been fixed to be within a range of possible distances. Also, distance between two consecutive ports can only be an integer number of miles.As a programmer you have been assigned the job of evaluating the number of different possible arrangements of ports modulo 1000000007.InputFirst line of input contains t. The number of test cases (t < 100).First line of each test case contains two integers: N, the number of ports to be built (N ≤ 20) and Y, the distance between the start point and the last port. (Y < 100000)Next N lines of the test case contains the range of distances between consecutive ports, with ith line giving two integers, the minimum and maximum gap between (i-1)th and ith port.OutputPrint one of output for each test case which is the number of possible arrangements modulo 1000000007.ExampleInput:1\r\n2 4\r\n0 3\r\n0 3Output:3",
  "sample_input": "Input:1\r\n2 4\r\n0 3\r\n0 3Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BPORT",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "1\r\n2 4\r\n0 3\r\n0 3",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n7\n2\n6\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n4\n3\n2\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "18\n91916280\n99630486\n32001076\n4890613\n74478735\n81967711\n43923249\n2340052\n43788066\n93448319\n58418139\n98791842\n73287997\n71856860\n70172898\n37595612\n71054156\n65468419",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n10024639\n85247899\n8106748\n46181059\n51738368\n99049792\n57660608\n88204974\n50790420\n96761626\n28849244\n2189652\n45238127\n60851809\n6445681\n21150457\n94307567\n1583406\n16123644",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n70993154\n90908235\n19640059\n55056765\n92240405\n30475862",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n10534511\n24504026\n48185984\n20280399\n61071969\n84504571\n71031901\n83858546\n2248404",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n62909688\n78947562\n70720004\n35516116\n64752348\n34973103",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n15628\n14625\n63787\n81630\n52663\n99798\n97290\n53498\n30361\n82929\n23274\n36113\n54316\n55538\n77239\n91267\n80196\n57151\n19342\n25786",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n79179\n40741\n66634\n26443\n21004\n73679\n19846\n80208\n22649\n73428\n55542\n13070\n32810\n66585\n52098\n97371\n42447\n68270\n87287\n58185",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n77183\n64272\n80517\n71288\n4811\n2300\n58678\n31519\n8923\n32060\n16668\n79698\n3269\n82831\n19563\n97024\n46124\n79940\n23312\n3092",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n19356\n92486\n64344\n86841\n92727\n30849\n99898\n99994\n73868\n61927\n4014\n43849\n14823\n510\n9351\n14154\n47486\n10158\n28850\n71474",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n43988\n22488\n41145\n75466\n24043\n61321\n68894\n1264\n44496\n25925\n3701\n89681\n58533\n73783\n49466\n99101\n74726\n36990\n41731\n57894",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n53126\n64816\n2484\n75157\n73045\n9855\n7400\n96235\n79098\n84720\n84616\n49642\n84409\n93225\n83178\n11434\n9990\n54210\n77071\n21391",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n95782\n80359\n61455\n68035\n37307\n71656\n44135\n70236\n53863\n75596\n77331\n85880\n43997\n10187\n18439\n79859\n35432\n59749\n29902\n28759",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n81468898\n26892145\n7572541\n52115290\n26789960\n24388405\n66508384\n18869989\n68228924\n69964208\n70575006\n58586434\n27408893\n42273195\n53107515\n58704518\n71737626\n75186934\n32705094\n91172738",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n14060003\n21955090\n60110968\n40982460\n55503906\n21270240\n41821763\n11418441\n40679107\n12533505\n95714035\n6823857\n59282416\n21310130\n29950719\n1992595\n52278522\n30031314\n36173057\n33780867",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n100000000\n69374402\n1\n42311900\n1\n97233329\n1\n1\n57033355\n1\n100000000\n100000000\n100000000\n100000000\n6071364\n79906648\n100000000\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 20)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}