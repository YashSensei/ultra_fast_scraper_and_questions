{
  "problem_code": "problems",
  "title": "Mountain Walking",
  "tags": [],
  "text": "In this problem your task is to program a robot that will output some data about a terrain after traversing it. Input will be in the form a 2D picture containing only 4 types of characters:'/' :  Forward slash, indicating ascent.'\\' :  Backward slash, indicating descent.'_' :  Underscore, denoting horizontal plane.Additionally there will be only SPACE (Ascii value = 32) characters. (Refer to the below figure).The robot starts its journey at bottom left corner of the terrain and after traversing stops at the bottom right corner. Also note that the robot will always start and end at the SAME LEVEL.Given the picture as input you will have to output 2 things. The \"Total Walk Distance\" i.e, the total length of the path and the type of steps taken to complete the Journey. For the sake of simplification we will assume that each character ('/' , '\\' and '_') has length = 1.Now Consider the following example:_\r\n      / \\/\\\r\n     /     \\\r\n    /       \\The robot starts at the bottom left corner and takes the following path:Ascends 3 stepsMoves forward by 1 stepDescends 1 stepAscends 1 stepDescends 3 stepsand robot ends it journey at bottom right corner (At the same level). The Total Walk Distance = 9.InputFirst line of input will be an integer N (N < 20). The next line will be an empty. Then exactly N lines follow describing the terrain.You can assume the following for the input (terrain).Input will contain only four types of characters (\" \", \"_\", \"/\", \"\\\").The terrain will start and end at the same level.Each line is guaranteed to have at least one non white space character.Maximum width of any line won't be larger than 200.There will be no trailing white spaces.OutputFirst line of output should be the Total Walk Distance followed by the description of the terrain. Each line must be ONE of the followingUp xx stepsDown xx stepsWalk xx stepsWhere xx is an integer. Refer to the examples for exact specification.ExampleInput:3\r\n\r\n  /\\\r\n /  \\\r\n/    \\Output:Total Walk Distance = 6\r\nUp 3 steps\r\nDown 3 stepsInput:2\r\n _____  ___\r\n/     \\/   \\Output:Total Walk Distance = 12\r\nUp 1 steps\r\nWalk 5 steps\r\nDown 1 steps\r\nUp 1 steps\r\nWalk 3 steps\r\nDown 1 stepsInput:5\r\n\r\n        _\r\n   /\\__/ \\\r\n  /       \\\r\n /         \\/\\_\r\n/              \\Output:Total Walk Distance = 16\r\nUp 4 steps\r\nDown 1 steps\r\nWalk 2 steps\r\nUp 1 steps\r\nWalk 1 steps\r\nDown 3 steps\r\nUp 1 steps\r\nDown 1 steps\r\nWalk 1 steps\r\nDown 1 steps",
  "sample_input": "_\r\n      / \\/\\\r\n     /     \\\r\n    /       \\",
  "sample_output": "Input:3\r\n\r\n  /\\\r\n /  \\\r\n/    \\Output:Total Walk Distance = 6\r\nUp 3 steps\r\nDown 3 steps",
  "link": "https://www.spoj.com/problems/QCJ1",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "_\r\n      / \\/\\\r\n     /     \\\r\n    /       \\",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n\r\n  /\\\r\n /  \\\r\n/    \\",
      "expected_output": "Total Walk Distance = 6\r\nUp 3 steps\r\nDown 3 steps",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "yl\nx ssn\na utcn\ns iw",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "gb\ntg ckdy\nbi ue\ne o",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "nc\nrlzu nzu\nv w\niko owdj",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "rb\ndhxr bypsi\nzjq d\nsz kpjnk",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "v\nla npz\ntqpva lqqco\nj u",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "ib\nqtqgu fkzf\na oev\ntei ydk",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "v\nwoae w\nollwg fm\ng pq",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "c\nft b\nmeb hvg\nwnofp qbrn",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "j\nttiz zkbc\nlbnc sk\nrj b",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "c\nhlaum ky\nnedy i\nrbzj xqc",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "u\nmqzfc enj\nh wmv\nzqo mj",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "y\nn yqnvo\nmk pasd\namjpv grqx",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "ja\ncx idkm\ne mc\nv x",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "xo\njpuj ziufh\nhq ntof\nayj vxsss",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "n\nj p\nvrcx pis\npe l",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "dr\nfiv t\ndyri f\nwdlgo gu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "u\nhxugu benfr\np dncka\nstkj gn",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "el\nsztu ztm\nkax kk\nepfc zygdx",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}