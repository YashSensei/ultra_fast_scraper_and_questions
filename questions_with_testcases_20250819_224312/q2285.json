{
  "problem_code": "problems",
  "title": "Roti Prata",
  "tags": [],
  "text": "IEEE is having its AGM next week and the president wants to serve cheese prata after the meeting. The subcommittee members are asked to go to food connection and get P (P ≤ 1000) pratas packed for the function. The stall has L cooks (L ≤ 50) and each cook has a rank R (1 ≤ R ≤ 8). A cook with a rank R can cook 1 prata in the first R minutes 1 more prata in the next 2R minutes, 1 more prata in 3R minutes and so on (he can only cook a complete prata) (For example if a cook is ranked 2, he will cook one prata in 2 minutes one more prata in the next 4 mins an one more in the next 6 minutes hence in total 12 minutes he cooks 3 pratas in 13 minutes also he can cook only 3 pratas as he does not have enough time for the 4th prata). The webmaster wants to know the minimum time to get the order done. Please write a program to help him out.InputThe first line tells the number of test cases. Each test case consist of 2 lines. In the first line of the test case we have P the number of prata ordered. In the next line the first integer denotes the number of cooks L and L integers follow in the same line each denoting the rank of a cook.OutputPrint an integer which tells the number of minutes needed to get the order done.ExampleInput:3104 1 2 3 481 188 1 1 1 1 1 1 1 1Output:12361",
  "sample_input": "Input:3104 1 2 3 481 188 1 1 1 1 1 1 1 1Output:12361",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRATA",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "3104 1 2 3 481 188 1 1 1 1 1 1 1 1",
      "expected_output": "12361",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 4 1 6 1 2 8 8 4 7 6 4 1 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 8 3 9 8 2 8 3 9 2 10 4 1 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6 5 8 2 5 7 2 8 3 10 10 7 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "73 72 40 84 42 16 51 38 11 88 42 35 8 36",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 17 68 60 32 39 88 5 35 17 70 64 31 10",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "11 17 37 47 90 32 89 25 8 32 27 53 96 35",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "42 39 1 59 62 77 78 95 15 87 50 7 1 99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 92 96 91 48 53 45 40 32 7 93 80 80 55",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "218 299 169 363 273 51 184 298 230 460 463 294 111 198",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "389 382 116 313 140 311 280 180 320 95 205 332 111 100",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "121 260 147 441 208 285 181 426 365 128 239 162 369 202",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "440 434 76 390 67 184 69 83 156 396 245 401 241 426",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "318 413 419 124 60 447 358 113 477 175 348 154 137 371",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "124 58 116 175 85 345 464 291 238 57 447 293 223 159",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "383 382 148 229 264 373 138 343 189 142 108 476 153 483",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 1000 2 1000 1 1 2 2 2 1 999 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 1 1 1 999 999 2 2 1 2 1000 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}