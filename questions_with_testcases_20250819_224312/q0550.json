{
  "problem_code": "problems",
  "title": "George",
  "tags": [],
  "text": "Last week Mister George visited Croatia. Since Mister George is a very important person, while he was in a street, the policedisallowed entryto that street, but vehicles that entered the street before Mister George could continue driving.While Mister George was visiting, Luka drove his truck around town. But because of some of the streets being closed off, he couldn't make his delivery in time and almost lost his job. Although it is late now, he is wondering how he could have planned his delivery better i.e. what would have been the least time needed to make his delivery while Mister George was visiting. He knows the route mister George took.The city is modeled with intersections and two-way streets connecting them. For each street, Luka knows how much time he needs to traverse it (mister George needs he same amount of time).For example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it, this street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during minutes 9 and earlier, or 15 and later.Write a program that calculates the least amount of time Luka needs to make his delivery, if he starts driving K minutes after the arrival of Mister George.InputThe first line contains two integers N and M (2 ≤ N ≤ 1000, 2 ≤ M ≤ 10 000), the number of intersections and the number of streets. The intersections are numbered 1 to N.\r\nThe second line contains four integers A, B, K and G (1 ≤ A, B ≤ N, 0 ≤ K ≤ 1000, 0 ≤ G ≤ 1000).\r\nThese are, in order:The intersection where Luka starts;The intersection Luka must get to;The difference in starting times between mister George and Luka (Luka starts at intersection A exactly K minutes after mister George starts his route);The number of intersections on Mister George's route.The third line contains G integers, the labels of intersections mister George will visit. Every pair of adjacent integers denotes a street he will traverse. That street will exist and Mister George will traverse every street at most once.\r\nEach of the following M lines contains three integers A, B and L, meaning that there is a street between intersection A and B, and it takes L minutes to traverse. L will be between 1 and 1000.OutputOutput the least amount of time (in minutes) Luka needs to make his delivery.ExampleInput:6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15Output:21Input:8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23Output:40Croatian Open Competition in Informatics (COCI) - 2007/2008 Contest #6",
  "sample_input": "Input:6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15Output:21",
  "sample_output": "Input:8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23Output:40",
  "link": "https://www.spoj.com/problems/GEORGE",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15",
      "expected_output": "21",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23",
      "expected_output": "40",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "10 6\n2 8 4 9\n2 7 2 10\n3 9 3\n9 8 4\n7 2 3\n7 10 7\n9 4 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 10\n8 5 6 5\n8 7 9 6\n7 1 2\n7 1 1\n6 10 10\n9 4 2\n8 9 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n6 3 9 2\n10 7 8 8\n3 10 9\n5 9 9\n2 5 1\n7 4 3\n1 1 7",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "18 14\n42 19 5 17\n33 7 76 19\n97 22 24\n51 75 88\n17 37 27\n91 61 16\n59 1 34",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "36 100\n63 34 31 65\n68 100 22 27\n77 99 78\n94 64 36\n77 47 92\n91 61 85\n37 21 28",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 64\n55 76 90 8\n86 38 40 14\n15 17 81\n86 92 50\n96 7 57\n77 6 76\n96 20 80",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 83\n9 62 81 18\n31 38 94 47\n24 34 87\n72 68 76\n77 9 61\n33 67 98\n48 14 27",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "84 38\n29 37 85 35\n93 46 100 55\n74 10 47\n52 66 38\n58 17 31\n41 31 59\n60 80 91",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "484 388\n246 201 325 489\n416 124 272 382\n108 359 280\n341 156 425\n100 296 95\n387 239 246\n395 314 183",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "86 72\n339 231 112 418\n115 465 79 101\n114 394 241\n122 388 242\n281 236 396\n102 415 334\n236 90 446",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "134 76\n148 89 243 163\n372 121 187 367\n151 193 262\n435 320 76\n341 301 213\n77 305 165\n137 484 484",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "87 86\n93 355 128 131\n276 404 330 101\n281 186 398\n331 399 271\n276 391 367\n65 413 228\n241 307 108",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "472 332\n112 216 124 70\n64 90 429 339\n459 83 138\n281 265 201\n462 326 225\n69 257 151\n270 169 431",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "298 343\n339 85 219 152\n233 169 122 258\n289 387 157\n357 399 313\n107 468 160\n113 240 377\n287 448 118",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "120 207\n121 134 118 424\n441 250 209 436\n199 319 116\n101 56 497\n408 286 283\n294 256 384\n496 144 109",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n1 999 2 1000\n1000 999 2 1000\n2 2 1000\n2 1000 1000\n999 2 1000\n1 999 1\n999 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}