{
  "problem_code": "problems",
  "title": "Set Cover",
  "tags": [],
  "text": "In the set cover problem there is a collectionC =\r\n{S1... Sm}of subsets of the universe [n] ={0 ... n-1},\r\nand one must\r\nfind a minimum-sized subcollection ofCthat still covers\r\n[n] (it may be the case thatSiandSjcontain the exact same\r\nelements for somei≠j).  Apath of length ris a graph onr+1verticesv0... vrwherevihas an undirected edge\r\ntovi+1fori = 0 ... r-1(these are the only edges).\r\nA set cover instanceIis\r\nsaid to bepath-realizableif there exists a mapping fromIto a\r\npath of lengthmwhere theSiare mapped to edges in the path\r\nand eachiin [n] is mapped to a pair of (not-necessarily distinct)\r\nverticessi,tion the path such that the edges lying betweensiandticorrespond exactly to the sets ofCthat\r\ncontaini.  Two setsSi,Sjmust be mapped to different edges on\r\nthe path ifi≠j.  You will be given a set cover instance that is\r\nguaranteed to be path-realizable and should output the size of a\r\nminimum-sized subcollection ofCstill covering [n].InputThe first line of the input is \"N M\" (1≤ N, M ≤ 300),\r\nwhereNis the size of the universe andMis the number of setsSiin the collection of subsets of{0 ... N - 1}.  What follows\r\nareMgroups of lines.  Theith group starts with one line\r\ncontaining |Si|, the size of theith subset.  If |Si| =0, the\r\ncurrent group of lines ends.  Otherwise the next line is a\r\nspace-separated list of the elements contained inSi.OutputIf [n] cannot be covered by a subcollection ofCthen\r\nyou should output-1, followed by a newline.  Otherwise, your output\r\nshould consist of two lines.  The first line is the size\r\nof a minimum-sized set cover.  The second line is a space-separated\r\nlist of the 0-based indices of the sets in an optimal set cover.ExampleInput:3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0Output:2\r\n1 2",
  "sample_input": "Input:3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0Output:2\r\n1 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SETCOV",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0",
      "expected_output": "2\r\n1 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 7\n3\n4\n6 8\n5\n9 6\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n10\n8\n6 7\n9\n3 9\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 9\n2\n5\n2 6\n10\n9 7\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 95\n92\n18\n69 79\n25\n74 94\n68",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 1\n24\n84\n80 26\n53\n72 67\n97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 64\n32\n80\n4 53\n89\n38 17\n25",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 28\n78\n8\n95 56\n66\n19 83\n69",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 30\n26\n29\n16 39\n45\n69 57\n33",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "371 220\n280\n329\n79 59\n425\n486 124\n357",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "304 235\n262\n258\n397 267\n383\n200 413\n480",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "323 250\n315\n101\n494 117\n178\n451 192\n61",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "423 487\n194\n297\n469 296\n410\n177 318\n224",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "265 250\n152\n296\n60 307\n456\n168 190\n498",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "273 252\n374\n54\n196 230\n422\n158 300\n349",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "116 138\n461\n396\n393 247\n217\n258 139\n224",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000 1000\n1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000 1000\n1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999\n2\n2\n1 2\n999\n1000 1\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999\n1000\n1\n2 1\n999\n1 1\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}