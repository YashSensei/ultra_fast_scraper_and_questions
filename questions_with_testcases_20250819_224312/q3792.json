{
  "problem_code": "problems",
  "title": "Dortmund Dilemma",
  "tags": [],
  "text": "Borussia Dortmund is a famous football (soccer) club from Germany.  Apart from their fast style of playing, the thing that makes them unique  is the hard to pronounce names of their players (Błaszczykowski,  Papastathopoulos, Großkreutz etc.).The team's coach is your  friend. He is in a dilemma as he can't decide how to make it easier to  call the players by name, during practice sessions. So, you advised him  to assign easy names to his players. A name is easy to him ifIt consists of only lowercase English letters.Its length is exactlyN.It containsexactlyKdifferent letters from the26letters of English alphabet.At least one of itsproperprefixes matches with itspropersuffix of same length.Given,NandKyou have to tell him the number of easy names he can choose from modulo(10^9+9).Note :A prefixPof a nameWis proper if,P≠W. Similarly, a suffixSof a nameWis proper if,S≠W.InputThe first line of the input will containT( the number of testcases ).Each of the nextTlines will contain two space separated integersNandK.OutputFor each testcase, output the number of ways the coach can assign names to his players modulo(10^9+9).Constraints1 ≤ T ≤ 1051 ≤ N ≤ 1051 ≤ K ≤ 26ExampleInput:81 12 14 22 25 13 26 21 3Output:0262600026650136500",
  "sample_input": "Input:81 12 14 22 25 13 26 21 3Output:0262600026650136500",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DORTMUND",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "81 12 14 22 25 13 26 21 3",
      "expected_output": "0262600026650136500",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 9 10 7 2 3 1 3 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 2 7 2 7 7 2 5 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 8 9 10 8 4 9 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 21 31 8 11 99 42 15 66",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 11 24 68 87 32 58 74 79",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 45 7 86 89 1 29 81 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 55 79 49 85 49 38 53 51",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 42 56 73 44 39 91 16 45",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "491 318 503 115 463 305 301 495 478",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "182 139 192 459 99 83 138 171 110",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "485 336 490 182 435 338 66 164 316",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "473 127 95 212 413 64 372 71 196",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "221 77 159 95 316 205 118 396 180",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "473 69 349 385 334 108 150 297 327",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "457 312 346 285 172 191 261 423 66",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1051 1051 1051 1051 1051 1051 1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1051 1051 1051 1051 1051 1051 1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1051 2 1050 2 1051 1051 2 1 1051",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1051 1050 1050 1051 1051 1 2 1050",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}