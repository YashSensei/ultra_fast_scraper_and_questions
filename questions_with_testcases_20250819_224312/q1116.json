{
  "problem_code": "problems",
  "title": "Whac",
  "tags": [],
  "text": "While visiting a traveling fun fair you\r\nsuddenly have an urge to break the high\r\nscore in the Whac-a-Mole game. The goal\r\nof the Whac-a-Mole game is to... well...\r\nwhack moles. With a hammer. To make\r\nthe job easier you have ﬁrst consulted\r\nthe fortune teller and now you know the\r\nexact appearance patterns of the moles.\r\n    The moles appear out of holes occupying the n2integer points (x, y)\r\nsatisfying 0 ≤ x, y < n in a\r\ntwo-dimensional coordinate system.\r\nAt each time step, some moles will\r\nappear and then disappear again before\r\nthe next time step. After the moles appear\r\nbut before they disappear, you are able\r\n to move your hammer in a straight line\r\nto any position (x2, y2) that is at distance\r\nat most d from your current position (x1, y1). For simplicity, we assume that you\r\ncan only move your hammer to a point having integer coordinates. A mole is whacked\r\nif the center of the hole it appears out of is located on the line between (x1, y1) an\r\n(x2, y2) (including the two endpoints). Every mole whacked earns you a point. When\r\nthe game starts, before the ﬁrst time step, you are able to place your hammer anywhere\r\nyou see ﬁt.InputThe input consists of several test cases. Each test case starts with a line containing three\r\nintegers n, d and m, where n and d are as described above, and m is the total number\r\nof moles that will appear\r\n(1 ≤ n ≤ 20, 1 ≤ d ≤ 5, and 1 ≤ m ≤ 1000). Then follow\r\nm lines, each containing three integers x, y and t giving the position and time of the\r\nappearance of a mole (0 ≤ x, y < n and 1 ≤ t ≤ 10). No two moles will appear at the\r\nsame place at the same time.\r\n    The input is ended with a test case where n = d = m = 0. This case should not be\r\nprocessed.OutputFor each test case output a single line containing a single integer, the maximum\r\npossible score achievable.ExampleInput:4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0Output:4\r\n2",
  "sample_input": "Input:4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0Output:4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MOLE",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0",
      "expected_output": "4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3 2\n7 6 4\n5 8 1\n5 9 4\n2 5 8\n2 10 1\n10 1 1\n4 6 9\n10 6 5\n10 7 1\n1 4 2\n8 3 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10 4\n1 9 5\n8 3 1\n4 1 4\n8 5 9\n4 7 2\n1 9 7\n6 1 10\n7 3 3\n9 9 1\n2 3 1\n4 5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 5 2\n6 2 1\n8 1 8\n4 9 4\n1 4 1\n1 5 7\n5 8 10\n4 6 3\n4 9 9\n2 7 2\n10 5 10\n7 6 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 14\n3 3 11\n15 10 8\n20 6 1\n17 6 9\n20 15 16\n12 19 18\n3 20 5\n6 1 15\n12 11 5\n8 1 11\n4 16 18",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 19 11\n12 10 8\n12 3 12\n8 1 9\n12 16 6\n17 4 15\n20 1 16\n13 14 10\n6 13 18\n12 1 4\n14 5 20\n1 11 20",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 3 15\n8 14 4\n2 9 18\n17 17 1\n2 4 4\n16 8 11\n15 13 13\n2 17 14\n2 19 13\n1 13 13\n2 6 20\n2 3 12",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "5 4 18\n12 13 16\n4 18 6\n5 4 18\n12 18 15\n18 12 4\n16 4 5\n6 19 20\n4 13 4\n18 3 10\n6 4 3\n15 15 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 3 11\n7 8 17\n4 12 2\n15 6 15\n10 10 8\n5 8 4\n8 19 19\n20 4 2\n1 1 12\n7 3 11\n9 11 3\n14 12 7",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 10 8\n2 1 8\n1 9 1\n5 8 3\n3 4 9\n8 2 7\n10 10 8\n6 8 9\n1 1 4\n5 1 9\n4 8 9\n4 4 2",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 10\n3 10 9\n6 3 6\n10 6 4\n8 1 3\n3 3 4\n3 6 10\n3 6 4\n6 9 1\n7 2 8\n10 8 2\n3 9 5",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 4\n9 7 9\n3 5 8\n10 3 5\n2 3 8\n7 2 5\n3 6 2\n1 10 1\n9 7 8\n4 2 10\n3 1 10\n2 1 10",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 3 1\n7 5 10\n8 4 10\n2 7 2\n10 7 5\n10 2 5\n4 6 10\n6 7 9\n2 8 5\n5 5 3\n5 2 6\n8 3 9",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5 4 7\n8 7 10\n5 5 6\n4 6 5\n5 9 6\n8 6 10\n9 3 7\n5 3 10\n4 4 3\n7 6 5\n4 4 1\n10 1 10",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 2 8\n8 8 7\n3 4 3\n4 4 10\n9 3 10\n7 7 7\n5 6 4\n1 4 8\n1 6 5\n4 1 5\n6 8 5\n2 2 6",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "8 4 7\n8 7 8\n8 7 2\n10 2 10\n9 6 9\n5 5 2\n8 8 7\n4 9 6\n4 7 9\n2 6 2\n2 5 10\n8 2 7",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 20 1\n19 1 19\n1 19 1\n2 19 2\n20 2 1\n2 19 19\n1 2 1\n20 1 1\n2 1 1\n1 1 19\n19 2 20\n2 20 20",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 2\n20 1 20\n20 1 19\n19 20 1\n19 1 20\n19 2 1\n19 2 20\n19 2 1\n1 19 19\n20 20 2\n2 20 20\n2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}