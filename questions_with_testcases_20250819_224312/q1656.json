{
  "problem_code": "problems",
  "title": "Not So Flat After All",
  "tags": [],
  "text": "Any positive integer v can be written as p1a1× p2a2×... × pnanwhere piis a prime number and ai ≥ 0. For example: 24 = 23× 31.Pick any two prime numbers p1and p2where p1!= p2. Imagine a two dimensional plane where the powers of p1are plotted on the x-axis and the powers of p2on the y-axis. Now any number that can be written as p1a1× p2a2can be plotted on this plane at location (x, y) = (a1, a2). The figure shows a few examples where p1= 3 and p2= 2.This idea can be extended for any N-dimensional space where each of the N axes is assigned a unique prime number. Each N-dimensional space has a unique set of primes. We call such set the Space Identification Set or S for short. |S| (the ordinal of S) is N.Any number that can be expressed as a multiplication of pi∈ S (each raised to a power (ai ≥ 0) can be plotted in this |S|-Dimensional space. The figure at the bottom illustrates this idea for N = 3 and S = {2, 3, 7}. Needless to say, any number that can be plotted on space A can also be plotted on space B as long as SA⊂ SB.We define the distance between any two points in a given N-dimensional space to be the sum of units traveled to get from one point to the other while following the grid lines (i.e. movement is always parallel to one of the axes.) For example, in the figure below, the distance between 168 and 882 is 4.Given two positive integers, write a program that determines the minimum ordinal of a space where both numbers can be plotted in. The program also determines the distance between these two integers in that space.InputYour program will be tested on one or more test cases. Each test case is specified on a line with two positive integers (0 < A, B < 1,000,000) where A × B > 1.The last line is made of two zeros.OutputFor each test case, print the following line:k. X:DWhere k is the test case number (starting at one,) X is the minimum ordinal needed in a space that both A and B can be plotted in. D is the distance between these two points.ExampleInput:168 882\r\n770 792\r\n0 0Output:1. 3:4\r\n2. 5:6",
  "sample_input": "Input:168 882\r\n770 792\r\n0 0Output:1. 3:4\r\n2. 5:6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ANARC09C",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "168 882\r\n770 792\r\n0 0",
      "expected_output": "1. 3:4\r\n2. 5:6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1\n1 3\n2 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n3 1\n2 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n1 3\n3 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n1 2\n3 2",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 3\n2 2\n1 1",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 3\n1 3\n1 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1\n2 1\n1 3",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 1\n1 1\n1 2",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1 1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "3 3\n3 3\n3 3",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "3 3\n3 3\n3 3",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n1 2\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 3\n2 3\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}