{
  "problem_code": "problems",
  "title": "Equalize the Sectors",
  "tags": [],
  "text": "Digo has a cylindrical box which is vertically partitioned intoNcontiguous sectors which are open from the top. Each Sectorial Compartment initially contains a fixed number of coins. Now Digo wants to fill each Sectorial Compartment with equal number of coins. But the problem is that, at a time he is only allowed to increment any two adjacent sectors with one coin each. Given an initial arrangement, you need to tell whether such equalization is possible or not.Every sectori(for all (0 <i<N)) is adjacent to sector (i + 1) and sectorNis adjacent to sector1.InputIn first line, the number of test casesT.Each test case consists of a numberN,followed by a line containingNspace separated integers whereithinteger (Mi) denotes the number of coins inithsectorial compartment of the box (initially), in clockwise order.OutputFor every test case output “YES” for possible and “NO” for which equalization is not possible (Without quotes).Constraints1 ≤T≤ 10003 ≤N≤ 100 (Number of Sectorial Compartments)1 ≤Mi≤ 109(Number of coins in each Sectorial Compartment)ExampleInput:2\r\n3\r\n1 2 3\r\n4\r\n1 2 1 2Output:YES\r\nNO",
  "sample_input": "Input:2\r\n3\r\n1 2 3\r\n4\r\n1 2 1 2Output:YES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SECTORS",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "2\r\n3\r\n1 2 3\r\n4\r\n1 2 1 2",
      "expected_output": "YES\r\nNO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n4\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n7\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n90934417\n92495696\n84887181\n33500320\n54219316\n95404096\n67853155\n63759888\n64489166\n95213525\n40019896\n168028\n30422139\n34071939\n43809622\n79397764\n80266657\n4786633\n18891007\n63759835",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n41471755\n20505647\n60360023\n14667134\n8974346\n25333225\n48826774\n76315108\n93832956\n43287723\n48093200\n28950201\n6322851\n25497283",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n15585577\n10971383\n8163157\n17896876\n26668907\n63155189\n63104866\n74934457",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n72104549\n16860018\n19984403\n78494691\n68680096",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n64964210\n66555884\n4724141\n30623651\n77523494\n10383104\n38186727\n32612987\n30592938\n22043261",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "35\n22693\n10551\n62910\n98308\n2129\n32830\n22289\n83523\n35397\n65903\n77875\n83149\n86336\n90073\n5334\n29500\n64635\n39513\n26465\n24640\n97709\n22326\n11226\n82258\n72116\n62493\n70499\n73951\n46619\n31739\n91034\n9820\n77297\n18607\n22744",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n83605\n22704\n6590\n35571\n54807\n38953\n24715\n9620\n65015\n50222\n48314\n99434\n94186\n11186\n70127\n58007\n33583\n57438\n92110\n56289\n10101\n45580\n3991\n84487\n80863\n9595\n32340\n1730\n88897\n68128\n17893\n13433\n19102\n39881\n15608\n75884\n38718\n68535\n18556\n32491\n60555\n65495\n33070\n94696\n55059\n16292\n43934\n16633\n46217\n66202\n22164\n91866\n32817\n99578\n518\n69912\n85296\n66823\n42724\n71606",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n62419\n48743\n18586\n32442\n69149\n59317\n42028\n84338\n4875\n43632\n93906\n33784\n57182\n23946\n56741\n65338\n42564\n32190\n18889\n24138\n26008\n14273\n42522\n54852\n42329\n62514\n50614\n71416\n54102\n77752\n27543\n31319",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n22272\n81764\n87216\n1598\n12161\n48162\n44184\n82230\n29948\n29426\n94410\n92456\n13107\n71308\n67069\n70150\n74229\n20022\n63583\n35926\n50066\n79431\n44175\n94276\n33212\n84029\n79295\n42223\n83433\n16762\n42684\n43393\n35159\n87690\n30739\n23157\n167\n67793\n36389\n59253\n70299\n56215\n12798\n91718\n27944\n12431\n55094\n17561\n49245\n46061\n9319\n58398\n31547\n97335\n45807\n30872\n25374\n34331\n36486\n89899\n81153\n57106",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n63087\n23951\n41692\n33299\n90863\n60424\n41585\n74225\n66338\n38902\n94363\n86981\n51576\n46257\n29921\n72915\n42933\n4033\n49412\n54388\n65077\n61171\n32040",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "65\n3114\n25850\n26717\n66544\n11449\n40889\n26957\n32078\n8034\n48242\n28497\n13575\n3396\n96364\n87187\n91389\n80329\n10117\n15181\n34937\n67706\n12616\n36032\n94647\n80715\n9809\n64975\n22985\n14472\n35472\n10971\n11301\n47141\n32204\n47276\n86973\n93081\n97738\n31507\n92497\n18200\n10653\n9219\n6302\n85181\n28855\n29404\n36173\n25374\n2197\n75853\n62440\n23452\n25258\n29139\n72089\n59905\n13730\n25256\n53054\n83952\n72138\n29046\n55851\n34889",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n75819\n55780\n85557\n20913\n13050\n64798\n12744\n38676\n72216\n67705\n80573\n27939\n57809\n68566\n283\n62384\n43124\n47597\n70686\n34633\n40959\n50855\n31683\n65898\n67850\n97758\n54434\n14290\n42161\n94638\n44037\n30925\n66687\n69034\n378\n16810\n57582",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n49232636\n12279851\n84498429\n93181349\n85672158\n89752060\n89350480\n65564731\n95358262\n4995365\n33707159\n16772888\n96276812\n45502154\n91587923\n6430951\n38667552\n34059953\n15866408\n54087353\n97843599\n61981789\n19437829\n72221723\n68209621\n38282974\n60654270\n3287246\n25012850\n83013183\n80191010\n35305979\n67969662\n51361800\n37388930\n62732535\n93061504\n22364675\n66004554\n4751331\n19121016\n71259078\n79834158\n58530509\n3138312\n39709589\n94150842\n27638298\n37375650\n6473598\n96484478\n26366475\n45857762\n45119341\n70133019\n86557326\n19227511\n85982390\n22860176\n25004597\n26332785\n63502416\n43890228\n1344607\n16143684\n24232181\n47061387\n83799204\n87894325\n66867628\n68266748\n10816511\n2239527\n39994372\n56153784\n26809651\n24748053\n86179585\n16391112\n70449785\n53187385\n57032477\n44170677\n98210583\n22324707\n48729053\n59005505\n61270420\n64908599\n47520506\n38327656\n13340522\n37389133\n94344632\n35363829\n71141757\n75018798\n52134931\n94001838\n18379112",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n50595462\n27390659\n73129804\n75612257\n44052949\n88407158\n74715744\n85413185\n53157360\n26356730\n86534812\n84600039\n24592886\n82405587\n91766329\n56255386\n14358848\n52011706\n83094179\n95831405\n5574421\n86299445\n1663250\n8721548\n62498855\n40739043\n19057749\n88575186\n83198756\n34892065\n37097590\n29412942\n32163682\n79119207\n69884516\n81706931\n57834694\n61473050\n29762282\n49726469\n5435183\n43997789\n87801270\n43121308\n90558839\n44285215\n82936909\n61961129\n67878652\n88602795\n32444512\n83193603\n88942617\n6040195\n65443957\n7496546\n23102519\n40826864\n10909092\n92444440\n21260344\n52215352\n30306921\n55976818\n38316602\n57831154\n55286508\n77991247\n74219595\n1423001\n94940775\n80336824\n91986941\n14440002\n35929959\n14286465\n68365546\n53512772\n78184339\n62885034\n81745797\n39206141\n10108068\n51984051\n89776152\n83511113\n34998580\n41392053\n1999930\n95230639\n18388631\n78895845\n74928298\n27531505\n86112608\n11059338\n72867014\n76038794\n21881812\n84998079",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n60221925\n100000000\n100000000\n16484173\n1\n1\n23240378\n2438049\n100000000\n91802655\n1\n100000000\n31701423\n1\n100000000\n100000000\n62646864\n64031352\n35739699\n1\n1\n1\n1\n1\n90050457\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n1\n100000000\n1\n1\n100000000\n97876302\n50769283\n1\n100000000\n100000000\n1\n100000000\n100000000\n73208177\n1\n13133947\n100000000\n1\n34101370\n100000000\n100000000\n100000000\n100000000\n100000000\n100000000\n92600694\n100000000\n1\n6957139\n61451342\n1\n1\n1\n100000000\n89062639\n1\n1\n25370804\n1\n1\n1\n21672856\n1\n1\n100000000\n1\n100000000\n1\n1\n1\n100000000\n100000000\n100000000\n83994666\n67252592\n73899666\n100000000\n100000000\n100000000\n1\n1\n6324235\n64574830\n86000885\n1\n100000000\n100000000\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "1\n60827102",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}