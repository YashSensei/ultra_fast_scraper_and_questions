{
  "problem_code": "problems",
  "title": "Prime Pesticide",
  "tags": [],
  "text": "NSlovakistan farmers own neighbouring fields alongside a river, forming a straight line. Each field is infested with (possibly zero) pests.Thanks to ingenious Slovakistan science, each species of pest can be assigned a prime number. Each field can then be assigned a positive number, representative of the pests that are infesting it - the prime factorization of this number indicates which pests are present, with the powers of each prime number representing how strongly the field is infested with that pest. The resulting number indicates how much damage is done to the crops on that field.To help the farmers, the government is planning to spray pesticide on some contiguous segment of fields. Due to environmental concerns, the pesticide can only be effective against a single species of pest. However, what segment of fields to spray and with what pesticide has given rise to a huge debate in the parliament - there simply isn't enough data to decide. GivenQproposalsL R p, meaning that pesticide against the pest assigned prime numberpcould be sprayed on fieldsLthroughR, find out how much damage to crops it would prevent.InputThe first line of input contains two integersNandQ(1 ≤ N,Q ≤ 500,000): the number of fields and the number of proposals.The second line containsNnumbersf1, ... , fN-the numbers assigned to the fields. They will be positive and not greater than106.Qlines follow, each containing three numbersL R p(1  ≤ L ≤ R ≤ N, 1 ≤ p≤ 106,pis a prime number), meaning that the government proposes to spray pesticide against pestpon fields [L,R]OutputFor each proposalL R p, output how much crop damage is mitigated; that is, output  (fL+ ... + fR-f'L- ... - f'R), wheref'iisfiafter all factors ofphave been removed from it.ExampleInput:5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2Output:5\r\n128\r\n0\r\n20\r\n65In the fourth proposal, the result is (20 + 30 + 40 - 20 - 10 - 40) = 20.",
  "sample_input": "Input:5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2Output:5\r\n128\r\n0\r\n20\r\n65",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRIMEP",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2",
      "expected_output": "5\r\n128\r\n0\r\n20\r\n65",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8\n10 3 4 2 4\n4 6 8\n4 5 8\n7 10 2\n2 10 1\n4 8 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n10 7 2 4 3\n1 9 1\n8 2 1\n2 4 6\n7 3 2\n3 2 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 3\n5 1 9 2 7\n10 8 5\n8 6 9\n4 8 2\n1 1 2\n8 1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "97 31\n20 41 25 69 5\n2 56 95\n17 64 80\n70 99 25\n39 67 89\n80 3 26",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "65 100\n70 44 64 47 46\n95 42 37\n40 15 16\n23 71 91\n59 7 55\n91 54 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "97 43\n65 92 55 58 68\n24 41 100\n52 58 27\n35 6 91\n74 8 41\n74 78 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 24\n31 44 18 76 27\n66 51 91\n43 25 94\n85 18 37\n74 48 14\n99 38 78",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 40\n15 64 22 36 94\n1 6 73\n60 87 38\n2 19 70\n86 86 18\n46 31 85",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "430 198\n446 480 434 392 155\n139 468 309\n422 478 403\n272 174 423\n99 269 499\n113 322 245",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "339 57\n198 464 196 85 260\n339 126 176\n394 148 479\n475 406 418\n167 472 447\n258 275 279",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "54 283\n344 274 366 195 388\n241 175 462\n116 422 228\n95 87 461\n319 302 469\n492 464 103",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "482 434\n161 431 419 199 430\n237 167 245\n408 53 370\n246 119 203\n415 79 368\n141 186 150",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "370 241\n264 74 242 308 313\n297 480 251\n191 323 160\n199 333 103\n90 184 387\n138 85 176",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "163 133\n366 496 110 132 277\n149 314 389\n428 53 482\n316 400 75\n137 137 126\n462 302 399",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "191 207\n196 463 138 74 99\n240 252 216\n118 381 243\n348 478 122\n364 377 343\n390 237 275",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999\n1000 1000 999 999 999\n999 1000 999\n2 2 1\n2 1000 2\n999 1000 999\n2 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n2 1 2 1000 1000\n1 1 2\n1000 999 1000\n999 999 999\n1 1 2\n2 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}