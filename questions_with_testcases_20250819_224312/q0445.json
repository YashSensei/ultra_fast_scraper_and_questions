{
  "problem_code": "problems",
  "title": "Ambitious XOXO",
  "tags": [],
  "text": "Life is a growth.If we stop growing,Technically and spiritually,We are as good as DEAD- Morihei UeshibaOur heroXOXO_Bunnyfaceis a programmer. He loves to append his name just after the precious word, “Competitive”. He is not much intelligent, nor much logical. But he loves to learn new algorithms and he loves to practice.The world he is currently living hasNalgorithms. You will be given anarray of efficiencyof sizeN, where if the ithelement is x, that means the initial efficiency of XOXO on that algorithm isx.XOXO will doMtasks in this month in order. The tasks will be of two types.1 K XThat means, the efficiency of XOXO on thekthalgorithm will be changed toX. It’s not guaranteed that the new value ofkthindex will be greater than the initial value. The efficiency might also decrease. XOXO is a human being after all.2 A BThere will be a contest arranged on which the efficiency of XOXO will be tested on the algorithms in the range betweenAandBinclusive. In that case, you have to tell the performance of XOXO on that contest which will be the sum of efficiencies inside that range.InputThe first input line has two integersNandM: the number of values and tasks. The second line hasNintegers e1, e2 ... eN: the values of the array of efficiency. Finally, there areMlines describing the tasks list. Each line has three integers: either \"1 K X\" or \"2 A B\"OutputPrint the result of each query of type 2.Constraints1 ≤ N, M ≤ 2×1051 ≤ ei, X ≤ 1091 ≤ k ≤ N1 ≤ A, B ≤ NSamplesInput:5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4Output:15\r\n8\r\n10\r\n8",
  "sample_input": "Input:5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4Output:15\r\n8\r\n10\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DEV_CP",
  "scraped_at": "2025-08-17 00:33:12",
  "test_cases": [
    {
      "input": "5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4",
      "expected_output": "15\r\n8\r\n10\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6\n5 6 3 2 3\n1 10 5\n10 8 1\n10 8 8\n2 3 5\n7 9 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 9\n10 6 7 2 5\n9 10 6\n8 10 3\n4 4 9\n5 10 6\n10 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\n8 9 4 4 1\n1 9 3\n6 2 7\n5 2 2\n1 2 6\n10 3 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 13\n1 41 64 34 13\n100 92 90\n75 55 9\n94 56 93\n11 79 58\n78 83 24",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "77 66\n52 62 7 31 74\n34 56 30\n96 51 1\n93 85 68\n77 40 16\n58 39 27",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 54\n74 9 23 99 99\n12 62 33\n59 96 66\n75 3 12\n25 59 37\n95 85 96",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "97 41\n88 69 53 27 69\n22 76 36\n30 72 58\n47 16 25\n35 51 66\n34 24 86",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 78\n21 29 7 81 24\n7 89 96\n60 94 35\n58 75 30\n32 49 19\n56 49 19",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "366 437\n138 490 159 152 194\n435 74 376\n419 284 267\n116 215 102\n154 221 239\n279 252 386",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "497 208\n131 188 492 455 353\n436 261 219\n207 343 460\n82 250 134\n229 476 276\n278 375 356",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "136 287\n362 295 430 140 383\n294 135 345\n190 455 137\n347 177 479\n131 131 234\n272 67 133",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "213 474\n440 343 73 448 472\n195 67 110\n249 306 112\n133 239 444\n454 483 404\n59 444 196",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "370 89\n218 488 258 168 132\n309 60 92\n85 391 181\n139 327 397\n367 344 312\n482 271 441",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "249 77\n496 250 341 190 233\n137 459 310\n175 148 249\n282 51 145\n369 357 379\n61 215 396",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "187 160\n219 277 446 150 305\n133 387 122\n255 245 233\n324 160 179\n290 229 223\n113 412 139",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n999 999 2 2 1000\n1 999 1\n2 1000 1\n999 1 1000\n2 2 1\n1000 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000\n2 1000 1000 1 1000\n999 1000 1000\n1000 999 1\n2 1000 1\n1000 1000 2\n1 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}