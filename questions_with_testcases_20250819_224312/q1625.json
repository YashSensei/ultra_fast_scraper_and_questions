{
  "problem_code": "problems",
  "title": "Get",
  "tags": [],
  "text": "Peter has recently decided to hold a party at Stockholm, where the ACM/ICPC\r\n2009 World Final will be held. Unfortunately, despite Peter’s affluence, he is not able\r\nto invite all of his friends due to the astronomical price of the air ticket to Stockholm.\r\nHe has devised the following rule to determine which subset of his friends will be\r\ninvited:Any invited person must have at least A acquaintances at the party. This is to\r\nensure everyone at the party will not feel alien.Any invited person must be unfamiliar with at least B people. Otherwise some\r\npeople may not have the chance to communicate with a stranger.Given the relationships between Peter’s friends, you are to figure out whom Peter\r\nshould invite to the party so as to maximize its size.InputThere are multiple test cases in the input file.Each test case starts with four integers, N, M, A, and B (1 ≤ N ≤ 100, 0 ≤ M ≤ N × (N - 1) / 2, 0 ≤ A, B ≤ N - 1).\r\nEach of the following M lines contains\r\ntwo integers, X and Y, (0 ≤ X, Y ≤ N - 1, X ≠ Y), indicating that friend X and friend Y are acquaintances.Two successive test cases are separated by a blank line. A case with N = 0, M = 0,\r\nA = 0 and B = 0 indicates the end of the input file, and should not be processed by your program.OutputFor each test case, please print a single integer, the maximum number of friends\r\nPeter will be able to invite.ExampleInput:3 2 1 1\r\n0 1\r\n1 2\r\n\r\n4 4 2 1\r\n0 1\r\n1 2\r\n2 3\r\n0 3\r\n\r\n0 0 0 0Output:Case #1: 0\r\nCase #2: 4",
  "sample_input": "Input:3 2 1 1\r\n0 1\r\n1 2\r\n\r\n4 4 2 1\r\n0 1\r\n1 2\r\n2 3\r\n0 3\r\n\r\n0 0 0 0Output:Case #1: 0\r\nCase #2: 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STCKHOLM",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "3 2 1 1\r\n0 1\r\n1 2\r\n\r\n4 4 2 1\r\n0 1\r\n1 2\r\n2 3\r\n0 3\r\n\r\n0 0 0 0",
      "expected_output": "Case #1: 0\r\nCase #2: 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9 5 5\n6 10\n10 8\n5 2 1 10\n8 4\n4 6\n8 2\n1 2\n3 7 10 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 6 10 5\n9 3\n4 1\n1 6 3 8\n5 9\n2 5\n8 6\n10 1\n6 4 5 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 6 3\n9 10\n8 6\n1 8 1 9\n5 6\n8 6\n8 9\n3 1\n1 10 2 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "77 83 57 94\n93 11\n11 91\n61 47 94 63\n72 77\n1 75\n57 81\n45 77\n20 5 48 60",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "64 13 46 78\n84 1\n62 14\n4 94 98 98\n8 35\n87 100\n48 18\n82 39\n37 50 63 35",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 31 28 39\n65 7\n42 76\n57 66 71 85\n45 43\n78 91\n59 79\n68 16\n51 65 36 54",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "4 82 74 80\n69 36\n2 77\n17 32 100 18\n83 37\n81 1\n86 43\n98 55\n78 1 57 80",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 34 51 36\n2 84\n25 53\n43 17 45 49\n80 28\n30 57\n30 35\n100 22\n32 41 50 96",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 40 44 23\n37 17\n37 16\n29 14 27 7\n29 45\n5 18\n36 22\n49 13\n42 40 14 23",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "49 5 35 50\n8 42\n46 33\n18 9 17 37\n8 49\n13 49\n46 28\n6 18\n39 49 26 32",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7 40 8 10\n23 36\n40 14\n45 17 14 38\n10 44\n29 42\n18 17\n50 47\n15 22 13 32",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "8 17 23 29\n21 23\n38 44\n24 25 26 21\n23 20\n25 12\n17 47\n10 46\n28 28 18 40",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "49 50 25 34\n12 41\n23 36\n27 39 41 8\n37 12\n17 21\n32 43\n35 50\n45 13 48 11",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28 38 26 50\n33 33\n37 14\n34 36 35 6\n33 28\n28 45\n35 38\n10 37\n26 44 20 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "17 41 22 10\n44 30\n25 50\n47 7 40 12\n24 18\n35 23\n45 49\n30 44\n22 45 8 19",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100 100\n100 100\n100 100\n100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100 100\n100 100\n100 100\n100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 2 99 2\n1 1\n99 2\n99 2 1 2\n99 100\n100 2\n2 2\n99 99\n99 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 2 99 100\n2 1\n99 100\n2 2 2 100\n99 2\n2 1\n100 2\n2 1\n99 2 99 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}