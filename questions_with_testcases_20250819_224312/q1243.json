{
  "problem_code": "problems",
  "title": "Operators (new ver)",
  "tags": [],
  "text": "Given a sequence a1, a2 ... an and a integer S, your task is find a way to insert an operator ‘+’ , ‘-‘, ‘.‘, ‘~‘ \r\nto every neighbor pair of A, that the result of the expression after insert equal to S.Note that :a . b = a + 2 * ba ~ b = a - 2 * bInputFirst line : N and S (2 ≤ N ≤ 22, |S| ≤ 5 * 1016)Second line : N integers, a1, a2 ... an  (|ai| ≤ 1015)OutputIf there are way(s) to insert, output any of them, otherwise output “Impossible” (without quotes).ExampleInput:9 5\r\n1 2 3 4 5 6 7 8 9Output:-~~~++++Input:3 -1\r\n-2 5 7Output:ImpossibleDetails:In first test case : 1 - 2 - 2 * 3 - 2 * 4 - 2 * 5 + 6 + 7 + 8 + 9 = 5You may want to try another versionhere.",
  "sample_input": "Input:9 5\r\n1 2 3 4 5 6 7 8 9Output:-~~~++++",
  "sample_output": "Input:3 -1\r\n-2 5 7Output:Impossible",
  "link": "https://www.spoj.com/problems/BLOPER2",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "9 5\r\n1 2 3 4 5 6 7 8 9",
      "expected_output": "-~~~++++",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 -1\r\n-2 5 7",
      "expected_output": "Impossible",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 6\n1 2 1 8 6 4 4 8 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n5 1 10 6 5 5 1 6 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 10\n3 4 6 8 7 4 2 7 9",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "22 4\n7 5 16 4 7 20 13 2 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 13\n15 5 5 10 19 11 2 13 21",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "9 2\n12 14 20 6 13 21 11 16 14",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 14\n22 3 13 10 14 2 1 7 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 1\n4 15 12 2 5 3 19 5 7",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "9 8\n5 5 1 6 9 8 8 4 6",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8 4\n1 10 1 11 11 10 8 11 2",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 9\n3 6 4 3 10 2 9 1 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 4\n8 2 4 3 3 4 8 4 2",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n2 11 4 4 7 7 2 5 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10 3\n8 5 10 8 6 10 6 10 1",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "8 5\n6 1 11 2 6 11 4 3 1",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "22 22\n22 22 22 22 22 22 22 22 22",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "22 22\n22 22 22 22 22 22 22 22 22",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 2 2 1 21 21 21 21 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}