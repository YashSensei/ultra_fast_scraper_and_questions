{
  "problem_code": "problems",
  "title": "Grocery store",
  "tags": [],
  "text": "A cashier in a grocery store seems to have difficulty in\r\ndistinguishing the multiplication symbol and the addition symbol. \r\nTo make things easier for him, you want to buy goods in such a\r\nway that the product of their prices is the same as the sum of\r\ntheir prices.Of course, if you buy only one item, this is always true. With two\r\nitems and three items, it still seems quite a boring task to you,\r\nso now you are interested in finding possible prices of four items\r\nsuch that the sum of the four prices is equal to the product of the\r\nfour prices. You should consider the prices are in € with two\r\ndigits after the decimal point. Obviously, each product costs at\r\nleast one cent.InputThis problem has no input.OutputPrint all solutions which have a sum of the four items of at most€20.00. For each solution, print one line with\r\nthe prices of the four items in non-decreasing order, with one space\r\ncharacter between them. You may print the solutions in any order,\r\nbut make sure to print each solution only once.Sample Output0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
  "sample_input": "0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GROCERY",
  "scraped_at": "2025-08-17 00:33:39",
  "test_cases": [
    {
      "input": "0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10 1 1\n4 3 2 4\n4 5 9 9\nky",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2 1 1\n4 5 6 5\n7 3 7 10\nvv",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 8 2\n8 7 3 3\n10 8 7 8\nnwnje",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "66 14 7 35\n90 70 18 10\n30 71 20 16\nqher",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "70 47 76 68\n22 80 45 25\n16 13 24 25\nckvl",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "38 39 83 91\n34 37 24 22\n13 3 51 73\nk",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "49 61 25 56\n15 42 75 97\n39 51 47 28\nacobdt",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "20 59 86 53\n77 64 38 90\n32 23 60 53\nb",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "460 77 125 260\n114 367 368 297\n222 255 356 407\ndc",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "301 350 144 410\n353 139 112 217\n497 73 445 333\ncuxfar",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "334 96 51 379\n208 228 233 416\n342 368 438 208\ncjdrb",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "328 79 138 211\n467 67 337 121\n366 247 127 113\nsv",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "108 379 428 235\n187 391 398 288\n397 255 277 298\ncmhbrs",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "426 69 401 68\n328 123 385 287\n164 68 485 176\nn",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "309 474 486 171\n318 367 365 63\n287 126 180 200\ntibmny",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\ng",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\ng",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 1000 1000\n1000 1000 1000 1\n1000 1000 2 2\nmolob",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 1 2\n1000 2 1000 1000\n1000 1000 2 1\nhr",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}