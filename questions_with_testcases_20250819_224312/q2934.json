{
  "problem_code": "problems",
  "title": "Grand Reward",
  "tags": [],
  "text": "Grand is one of the best companies every month, The manager chooses the best employee and rewards him. This month there are 4 employees do the same effort Sameh, Ameen, Shafeek and Atef but the manager will give reward to one only, He got a good ideaLet's say that the 4 employees will stand in someway like that every employee in one of the four sides east (Sameh), north (Ameen), west( Shafik) and south (Atef) then, there's a square matrix of  width and height N×N among them first element in matrix will start with 1 then next element increase by 1 from left to right and from top to down until N×N like this:Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         AtefThen let's rotate the matrix T turns 90 degrees clockwise per turn and the winner is the person who the sum of his side is the greatest.For example let's say that T=4 and N=3,first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      AtefAtef wins because the sum of his side is 7 + 8 + 9 = 24 and it's the greatest.It's your job now create a program that do this job.InputTwo integers the size of the matrix N (3 ≤ N ≤ 25), and the number of turns (1 ≤ T ≤ 109).OutputThe final result of the matrix and the employee who will get the reward (Sameh, Ameen, Shafeek, Atef).ExampleInput:3 4Output:Atef\r\n1 2 3\r\n4 5 6\r\n7 8 9Input:4 3Output:Shafeek\r\n4 8 12 16\r\n3 7 11 15\r\n2 6 10 14\r\n1 5 9 13",
  "sample_input": "Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         Atef",
  "sample_output": "first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      Atef",
  "link": "https://www.spoj.com/problems/GR",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         Atef",
      "expected_output": "first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      Atef",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "wzecbtb\n8 4 8\n9 6 2\nomud 9 4 5 sdtn\n6 2 7\nkmindjkc",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "evihzu\n7 9 4\n8 3 6\nmsrg 7 10 9 kgi\n8 9 2\nfv",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "ffzd\n3 5 3\n4 5 5\nl 8 7 7 eov\n4 7 6\nnnflq",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "unghssgv\n14 15 5\n24 15 24\njvx 23 18 2 umhdu\n23 15 18\nrhjnceu",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "pst\n12 25 13\n5 7 22\ncsj 10 10 1 anq\n23 1 1\nbzsnvais",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "miqqewbh\n2 21 10\n21 1 16\njr 13 25 9 erytlf\n20 12 11\nbcqyhwoa",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "oapgwwx\n10 25 17\n9 13 23\npa 19 16 1 mmjylt\n19 9 15\nsb",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "v\n6 16 24\n1 18 4\nrzcs 4 24 12 bj\n1 15 9\nsjukct",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "o\n6 5 1\n11 2 2\nbs 11 5 5 mvbrjv\n11 3 9\nqefssgqy",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "gnbsho\n10 7 1\n8 3 11\nznyyf 8 6 4 xh\n7 10 6\nmu",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "e\n1 1 3\n10 6 7\nqljzp 12 2 6 pabr\n5 10 2\naahpoqc",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "rnctlspin\n11 8 5\n10 9 3\norm 10 9 11 cnrzji\n1 7 7\nwlnhgky",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "gd\n4 9 7\n3 11 7\nelwj 8 3 1 vslkuw\n11 2 2\nrvxdkgk",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "nccxjq\n3 1 3\n6 8 7\nov 1 9 12 beee\n8 1 7\njzw",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "ovgw\n4 8 3\n4 9 3\nzavur 11 1 9 glhypzw\n2 1 9\nzkpv",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "yxugl\n25 25 25\n25 25 25\nr 25 25 25 ppoie\n25 25 25\ngxxjs",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "gmhqrnpqai\n25 25 25\n25 25 25\ny 25 25 25 et\n25 25 25\npy",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "vopbunkmf\n24 25 24\n25 24 25\nyjjuu 2 24 2 bb\n1 24 24\npxf",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "ftuevg\n2 2 1\n2 1 25\nr 1 1 2 aqffnz\n24 1 24\ngllyn",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}