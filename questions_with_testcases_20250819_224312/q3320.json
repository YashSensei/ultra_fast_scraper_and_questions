{
  "problem_code": "problems",
  "title": "Help the soldier",
  "tags": [],
  "text": "Igor, a famous Russian soldier, must go to war in Afghanistan (we are in late 80â€™s). His superiors allowed him to buy himself his equipment. So, he must buy 6 items: helmet, bulletproof vest, trousers, boots,  tunic and a firearm. This items are represented with numbers from 1 to 6. There are N (6 < N < 101) items of these 6 types. Each item is characterized by its price p[i] (in rublas) and is quality q[i]. Igor has T (0 < T < 1001) rublas and he wants to maximize the total quality of his equipment. The total quality is the quality of the item with the lowest quality. Help him.InputOn the first line there are two integers N and T. On the lines 2 ... N+1 there are 3 integers, type[i] (from 1 to 6) p[i] and q[i]. (0 < p[i], q[i] < T )OutputOutput the total quality.ExampleInput:7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5Output:1NoteIf there is no answer, output 0.There can be less than 6 types of items.[ Edited by EB ]Warning:Some input files are incomplete and broken.",
  "sample_input": "Input:7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SOLDIER",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 5\n10 4 3\n10 9 3\n10 7 5\n1 1 7\n4 9 4\n3 9 8\n2 10 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n9 5 1\n4 5 1\n2 5 5\n6 7 5\n7 2 9\n4 8 5\n6 2 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n5 10 6\n6 8 9\n4 10 6\n3 2 4\n3 7 3\n2 6 9\n1 1 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 20\n2 49 61\n27 24 50\n66 99 36\n5 68 13\n55 26 95\n26 51 45\n46 93 65",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "75 71\n25 77 65\n38 49 42\n91 9 70\n18 53 36\n39 57 9\n97 70 42\n64 14 59",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 78\n40 80 47\n86 91 89\n29 32 61\n19 5 39\n92 94 30\n17 6 69\n60 61 2",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 22\n20 62 46\n8 17 99\n55 78 74\n69 30 22\n47 62 57\n34 15 54\n90 20 90",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 63\n45 39 56\n17 86 37\n86 30 52\n23 93 62\n24 74 31\n26 28 68\n32 78 22",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "9 19\n8 22 25\n32 33 46\n41 28 14\n40 31 50\n14 29 12\n34 47 27\n48 32 44",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "50 24\n45 27 16\n48 25 33\n25 19 22\n8 43 31\n28 41 47\n38 30 45\n27 43 23",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 6\n27 49 41\n27 29 15\n48 16 32\n32 37 29\n21 28 27\n9 20 47\n34 27 11",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 21\n21 50 13\n35 13 29\n38 36 29\n35 19 23\n15 21 37\n27 17 31\n33 11 49",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "44 48\n49 35 46\n39 24 42\n29 25 27\n26 13 38\n33 42 32\n40 37 5\n12 17 34",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38 17\n25 7 26\n50 17 31\n40 30 14\n9 35 31\n43 7 47\n8 12 41\n41 6 32",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 10\n24 26 26\n43 19 46\n8 19 18\n43 34 30\n22 34 43\n12 6 13\n13 45 45",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n1 2 101\n100 1 1\n101 101 2\n2 101 2\n2 101 100\n1 100 1\n101 100 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 101\n1 100 2\n100 101 2\n100 2 2\n101 1 2\n2 2 1\n2 1 1\n101 101 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}