{
  "problem_code": "problems",
  "title": "Basic Grapes Instinct",
  "tags": [],
  "text": "Dickie is cropping grapes for Christmas! He’s very excited about the traditional grape eating race on December 31th, so he picked every possible raceme of grape in his farm and collect them in a big bucket. Nevertheless, he’s having a serious problems ordering the racemes because there are so many of them!In order to organize in a efficient way the humongous amount of grape racemes, he decided to build a stemplot out of them. A stemplot goes as follows:The input values for a stemplot are a sequence of numbers and a stem unit.Data is classified based on the stem value, i.e., if a number in the sequence is 403 and the stem unit is 100, then this number is classified in the category 4.For each category, a list of leaf values are render in a single line, sorted in increasing order.Stem values and leaves are separated by a | (pipe character). All | should be vertically aligned.Stem values are sorted in increasing order, omitting empty stems.Given the sequence s = { 44 46 47 49 63 64 66 68 68 72 72 75 76 81 84 88 106 }, the stemplot generated with a stem unit of 10 is rendered as follow:4 | 4 6 7 9\r\n       6 | 3 4 6 8 8\r\n       7 | 2 2 5 6\r\n       8 | 1 4 8\r\n      10 | 6Dickie is having big trouble rendering these stemplots of grape racemes, can you do the job for him and save the traditional grape race of December 31th?InputThe first line contains an integer T, which specifies the number of test cases. Then, will follow the descriptions of T test cases.The first line of each case will contain 2 integers N and U, indicating the size of the sequence and the stem unit. Next N lines will contain a single element of the sequence si.OutputFor each case you should print the string \"Scenario #i:\" where i is the test case you are evaluating (starting from 1), a new line, and then the corresponding stemplot following the rules stated above. Print a blank line after each stemplot.SampleInput2\r\n17 10\r\n44\r\n46\r\n47\r\n49\r\n63\r\n64\r\n66\r\n68\r\n68\r\n72\r\n72\r\n75\r\n76\r\n81\r\n84\r\n88\r\n106\r\n5 23\r\n1\r\n9\r\n127\r\n23\r\n73OutputScenario #1:\r\n 4 | 4 6 7 9\r\n 6 | 3 4 6 8 8\r\n 7 | 2 2 5 6\r\n 8 | 1 4 8\r\n10 | 6\r\n\r\nScenario #2:\r\n0 | 1 9\r\n1 | 0\r\n3 | 4\r\n5 | 12Subtask 1 - 30%1 ≤ T ≤ 1001 ≤ N ≤ 1001 ≤ U ≤ 1001 ≤ si ≤ 1,000Subtask 2 - 70%1 ≤ T ≤ 1001 ≤ N ≤ 10,0001 ≤ U ≤ 1,0001 ≤ si ≤ 1,000",
  "sample_input": "4 | 4 6 7 9\r\n       6 | 3 4 6 8 8\r\n       7 | 2 2 5 6\r\n       8 | 1 4 8\r\n      10 | 6",
  "sample_output": "Input2\r\n17 10\r\n44\r\n46\r\n47\r\n49\r\n63\r\n64\r\n66\r\n68\r\n68\r\n72\r\n72\r\n75\r\n76\r\n81\r\n84\r\n88\r\n106\r\n5 23\r\n1\r\n9\r\n127\r\n23\r\n73OutputScenario #1:\r\n 4 | 4 6 7 9\r\n 6 | 3 4 6 8 8\r\n 7 | 2 2 5 6\r\n 8 | 1 4 8\r\n10 | 6\r\n\r\nScenario #2:\r\n0 | 1 9\r\n1 | 0\r\n3 | 4\r\n5 | 12",
  "link": "https://www.spoj.com/problems/VPL0_B",
  "scraped_at": "2025-08-17 00:34:08",
  "test_cases": [
    {
      "input": "4 | 4 6 7 9\r\n       6 | 3 4 6 8 8\r\n       7 | 2 2 5 6\r\n       8 | 1 4 8\r\n      10 | 6",
      "expected_output": "Input2\r\n17 10\r\n44\r\n46\r\n47\r\n49\r\n63\r\n64\r\n66\r\n68\r\n68\r\n72\r\n72\r\n75\r\n76\r\n81\r\n84\r\n88\r\n106\r\n5 23\r\n1\r\n9\r\n127\r\n23\r\n73OutputScenario #1:\r\n 4 | 4 6 7 9\r\n 6 | 3 4 6 8 8\r\n 7 | 2 2 5 6\r\n 8 | 1 4 8\r\n10 | 6\r\n\r\nScenario #2:\r\n0 | 1 9\r\n1 | 0\r\n3 | 4\r\n5 | 12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 2 4 8 3\n9 ndw 9 2 1 2\n6 8 1 10 1 2\n7 jyk 9 2 7 2 8\n9 2 10 5 6\n7 bolla 8 8 10 4\n9 1 1 6\n1 gf 10 1 7\n8 9\n10 llw 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 10 7 9\n3 a 10 10 8 3\n6 10 9 5 9 7\n6 aal 8 3 7 7 8\n1 10 2 3 2\n9 fq 7 2 5 10\n6 1 6 4\n8 lq 9 8 4\n7 3\n5 yzeb 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 1 7 7\n7 kooz 7 5 4 8\n3 8 9 10 10 9\n10 mv 10 9 4 3 8\n2 5 2 3 4\n9 zl 2 8 9 8\n5 9 4 2\n5 xcfr 4 4 9\n4 4\n9 bukg 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 8 3 9 3\n9 vai 8 7 9 5\n2 6 8 5 4 10\n7 hlwi 3 3 5 10 2\n9 7 10 7 4\n3 fcr 3 6 10 9\n2 3 9 3\n1 wshy 8 7 1\n10 10\n3 gcvr 5",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 4 5 9 1\n4 xhog 7 2 8 4\n9 3 8 1 6 5\n8 yd 6 7 8 8 4\n6 3 10 4 8\n7 p 5 7 4 7\n4 5 3 1\n5 p 1 7 8\n10 9\n6 cri 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 7 2 8 1\n9 clq 7 1 7 9\n3 1 10 4 7 9\n3 pgsjb 5 7 1 10 3\n7 4 6 9 4\n4 klz 10 4 4 4\n1 6 1 10\n9 pn 4 10 4\n9 7\n2 g 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "7 9 9 6 5\n10 xpec 4 1 5 10\n7 6 10 7 8 2\n4 mwk 6 8 6 10 10\n4 6 2 2 5\n9 lllxm 4 3 1 2\n4 10 9 2\n7 vbtub 4 7 3\n2 4\n4 yjl 5",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "7 6 7 6 4\n9 qcwg 4 2 10 10\n5 7 3 8 2 6\n10 mhjz 3 5 1 7 6\n3 5 5 4 8\n2 wtupe 6 8 10 2\n7 4 6 8\n5 ep 1 5 6\n3 7\n2 bevt 2",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "4 4 3 1 5\n1 nvoio 1 5 4 5\n5 3 3 3 2 3\n3 qh 3 4 2 1 5\n5 2 5 3 4\n5 hus 3 1 2 2\n1 5 4 5\n3 patu 4 5 5\n3 2\n1 kisa 1",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 3 2 5\n2 rdwt 4 5 3 1\n2 5 3 2 1 5\n1 ukc 3 1 1 2 1\n3 4 4 3 5\n3 wu 1 1 4 5\n1 5 2 3\n5 jgrji 1 3 2\n3 1\n3 fme 2",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4 2 3 4 3\n5 xwrlz 1 2 3 4\n5 1 3 5 5 3\n4 vmc 2 5 2 4 5\n2 4 3 2 1\n2 jyvk 1 3 5 4\n5 4 2 2\n3 dfrd 2 3 2\n1 4\n5 tsa 4",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4 2 1 3 5\n5 yv 1 3 1 3\n3 2 1 3 3 5\n3 l 3 1 5 5 4\n3 5 5 4 4\n1 ksyor 4 4 5 2\n3 4 1 4\n3 rnoz 3 1 2\n3 4\n5 pec 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 4 2 3 3\n1 ggtd 4 3 3 2\n3 2 5 2 5 1\n2 f 4 1 5 5 2\n3 4 5 5 2\n4 zil 5 4 2 2\n4 5 2 2\n5 ergit 1 5 3\n3 2\n1 o 2",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 2 5 5 1\n1 zia 5 3 4 2\n2 2 1 1 4 5\n3 xzve 2 3 1 5 2\n4 3 1 3 1\n5 qr 5 4 4 1\n3 3 1 3\n5 p 3 5 5\n1 5\n1 flv 4",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 1 1 2 4\n2 la 2 4 4 1\n3 1 1 3 5 5\n4 q 1 4 4 2 2\n3 1 1 4 4\n2 mvoj 1 4 1 1\n2 1 5 3\n2 gjj 1 2 4\n1 4\n2 xeykh 4",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10 10 10\n10 edond 10 10 10 10\n10 10 10 10 10 10\n10 ozc 10 10 10 10 10\n10 10 10 10 10\n10 zv 10 10 10 10\n10 10 10 10\n10 hkw 10 10 10\n10 10\n10 dyer 10",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10 10 10\n10 bu 10 10 10 10\n10 10 10 10 10 10\n10 hxswy 10 10 10 10 10\n10 10 10 10 10\n10 wuns 10 10 10 10\n10 10 10 10\n10 tpjd 10 10 10\n10 10\n10 h 10",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "9 2 2 10 1\n9 m 9 2 10 1\n2 9 1 2 10 1\n9 gkl 9 10 10 10 2\n2 10 9 1 9\n9 khr 1 10 2 10\n2 10 1 1\n9 rnwal 9 10 10\n9 2\n10 cwg 9",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 2 9 1\n9 yhws 9 10 2 9\n9 10 10 2 2 9\n2 dte 9 2 2 10 2\n1 1 2 1 10\n10 s 10 1 10 1\n10 10 10 1\n10 hicgb 2 10 2\n10 2\n9 f 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}