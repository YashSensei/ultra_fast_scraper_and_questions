{
  "problem_code": "problems",
  "title": "Knights of the Round Table",
  "tags": [],
  "text": "Being a knight is a very attractive career: searching for the Holy Grail, saving damsels in distress, and drinking with the other knights are fun things to do. Therefore, it is not very surprising that in recent years the kingdom of King Arthur has experienced an unprecedented increase in the number of knights. There are so many knights now, that it is very rare that every Knight of the Round Table can come at the same time to Camelot and sit around the round table; usually only a small group of the knights is there, while the rest are busy doing heroic deeds around the country.Knights can easily get over-excited during discussions-especially after a couple of drinks. After some unfortunate accidents, King Arthur asked the famous wizard Merlin to make sure that in the future no fights break out between the knights. After studying the problem carefully, Merlin realized that the fights can only be prevented if the knights are seated according to the following two rules:The knights should be seated such that two knights who hate each other should not be neighbors at the table. (Merlin has a list that says who hates whom.) The knights are sitting around a round table, thus every knight has exactly two neighbors.An odd number of knights should sit around the table. This ensures that if the knights cannot agree on something, then they can settle the issue by voting. (If the number of knights is even, then it can happen that \"yes\" and \"no\" have the same number of votes, and the argument goes on.)Merlin will let the knights sit down only if these two rules are satisfied, otherwise he cancels the meeting. (If only one knight shows up, then the meeting is canceled as well, as one person cannot sit around a table.) Merlin realized that this means that there can be knights who cannot be part of any seating arrangements that respect these rules, and these knights will never be able to sit at the Round Table (one such case is if a knight hates every other knight, but there are many other possible reasons). If a knight cannot sit at the Round Table, then he cannot be a member of the Knights of the Round Table and must be expelled from the order. These knights have to be transferred to a less-prestigious order, such as the Knights of the Square Table, the Knights of the Octagonal Table, or the Knights of the Banana-Shaped Table. To help Merlin, you have to write a program that will determine the number of knights that must be expelled.InputThe input contains several blocks of test cases. Each case begins with a line containing two integers 1 ≤n≤ 1000 and 1 ≤m≤ 1000000. The numbernis the number of knights. The nextmlines describe which knight hates which knight. Each of thesemlines contains two integersk1andk2, which means that knight numberk1and knight numberk2hate each other (the numbersk1andk2are between 1 andn).The input is terminated by a block with n = m = 0.OutputFor each test case you have to output a single integer on a separate line: the number of knights that have to be expelled.ExampleInput:5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0Output:2Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KNIGHTS",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 3\n1 2\n9 2\n2 10\n1 6\n5 9\n10 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 3\n4 1\n3 7\n4 2\n6 8\n7 9\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5\n6 10\n1 5\n3 4\n3 1\n9 1\n5 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "61 90\n85 52\n89 61\n80 85\n20 58\n2 32\n41 17",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 56\n8 13\n64 30\n24 1\n40 15\n1 14\n41 35",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 34\n60 15\n94 99\n32 22\n25 28\n38 77\n86 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 1\n88 69\n67 59\n67 64\n31 97\n74 8\n3 74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 53\n33 51\n75 60\n92 62\n99 24\n13 12\n71 90",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "278 166\n411 97\n285 153\n266 57\n273 193\n308 381\n414 120",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "118 178\n205 401\n321 235\n121 498\n75 115\n129 104\n116 112",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "215 493\n379 474\n151 131\n52 127\n445 135\n485 115\n111 409",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "244 87\n416 312\n429 93\n480 268\n340 204\n218 317\n313 356",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "173 367\n269 221\n178 258\n370 292\n133 75\n303 86\n76 253",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "66 466\n251 338\n95 401\n391 437\n57 241\n140 431\n221 332",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "96 254\n114 498\n456 139\n149 327\n113 443\n413 198\n421 386",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 1\n1 1\n999 999\n999 1000\n999 999\n999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1\n2 1000\n1000 2\n1000 1\n1000 2\n1000 2\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}