{
  "problem_code": "problems",
  "title": "Foxlings",
  "tags": [],
  "text": "It’s Christmas time in the forest, and both the Fox and the Wolf families are celebrating. The rather large Fox family consists of two parents as well as $N$ ($1 \\leq N \\leq 10^9$) little Foxlings. The parents have decided to give their children a special treat this year – crackers! After all, it’s a well-known fact that Foxen love crackers.With such a big family, the parents can’t afford that many crackers. As such, they wish to minimize how many they give out, but still insure that each Foxling gets at least a bit. The parents can only give out entire crackers, which can then be divided and passed around.With this many children, not all of them know one another all that well. The Foxlings have names, of course, but their parents are computer scientists, so they have also conveniently numbered them from $1$ to $N$. There are $M$ ($1 \\leq M \\leq 10^5$) unique two-way friendships among the Foxlings, where relationship $i$ is described by the distinct integers $A_i$ and $B_i$ ($1 \\leq A_i,B_i \\leq N$), indicating that Foxling $A_i$ is friends with Foxling $B_i$, and vice versa. When a Foxling is given a cracker, he can use his tail to precisely split it into as many pieces as he wants (the tails of Foxen have many fascinating uses). He can then pass these pieces around to his friends, who can repeat this process themselves.InputLine $1$: 2 integers, $N$ and $M$Next $M$ lines: 2 integers, $A_i$ and $B_i$, for $i=1..M$OutputA single integer – the minimum number crackers must be given out, such that each Foxling ends up with at least a small part of a cracker.ExampleInput:9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9Output:4Explanation of Sample:The parents can give one cracker to Foxling 6, who will then split it into three and give pieces to his friends (Foxlings 1 and 7). Foxling 7 can then give half of his piece to his other friend, Foxling 2.They can give another cracker to Foxling 8, who will split it with Foxling 9.This leaves Foxlings 4 and 5, who have no friends (don’t worry, Foxen have long since outgrown the need for friends), and who must be given one cracker each. This brings the total up to 4 crackers.",
  "sample_input": "Input:9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FOXLINGS",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 2\n5 4\n2 3\n3 5\n4 2\n6 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n4 9\n3 7\n2 3\n9 10\n4 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n8 5\n8 9\n6 3\n7 6\n4 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 41\n61 58\n70 9\n13 72\n4 75\n75 18",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 7\n63 97\n30 19\n42 16\n58 32\n18 15",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "11 77\n7 22\n84 84\n72 66\n100 38\n100 10",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 15\n8 26\n42 18\n82 69\n10 14\n68 74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 83\n79 81\n13 25\n37 4\n80 33\n36 41",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "469 437\n495 107\n61 121\n370 296\n207 499\n499 290",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "146 317\n106 448\n178 162\n135 200\n244 229\n226 443",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "161 320\n373 403\n107 338\n130 236\n88 335\n338 287",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "229 103\n340 374\n220 317\n161 200\n65 68\n403 484",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "294 498\n168 119\n100 428\n59 351\n497 251\n381 71",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "435 369\n184 103\n368 119\n294 461\n87 224\n98 98",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "173 83\n265 183\n480 355\n304 462\n160 439\n176 362",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n1000 1000\n1 2\n1 1000\n1000 1000\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n2 1000\n1 999\n2 1\n2 2\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}