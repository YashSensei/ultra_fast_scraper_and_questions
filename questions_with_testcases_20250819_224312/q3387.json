{
  "problem_code": "problems",
  "title": "Greedy Hydra II",
  "tags": [],
  "text": "The problem description is the same as the problemDRAGON.InputThe first line contains 3 integers N (1 ≤ N ≤ 3000), M (2 ≤ M ≤ N), K (1 ≤ K ≤ N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i, j, k separated by spaces denoted that there is a branch between fruit i (1 ≤ i ≤ N) and fruit j (1 ≤ j ≤ N) and the weight of illness of this branch is k (0 ≤ k ≤ 100000).OutputOutput one line contains a single integer denoted the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output \"-1\" (without quotes).ExampleInput:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5Output:4Some new test cases were added.",
  "sample_input": "Input:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DRAGON2",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 9 10\n4 6 6\n10 10 2\n7 1 10\n5 7 8\n10 7 6\n5 7 7\n2 8 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 10\n4 8 7\n8 4 7\n5 5 6\n7 9 1\n3 2 7\n6 5 9\n4 1 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 1\n3 8 5\n4 7 9\n3 3 3\n8 1 3\n9 10 2\n10 5 2\n10 2 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "91 92 9\n8 73 32\n24 49 36\n54 26 69\n62 87 14\n87 68 97\n8 60 20\n98 88 53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 29 82\n38 42 58\n21 37 65\n77 30 87\n71 49 65\n66 93 57\n11 96 91\n56 31 24",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 42 71\n2 35 13\n11 89 54\n52 69 49\n67 9 29\n99 43 84\n78 41 11\n73 57 32",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "11 46 18\n93 86 78\n55 65 22\n8 72 17\n94 14 25\n11 10 77\n86 61 91\n48 24 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "50 43 75\n84 43 17\n94 89 7\n80 50 88\n78 1 84\n100 32 39\n63 56 52\n55 91 87",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1010 909 302\n873 988 321\n521 1377 699\n850 1480 1238\n1023 665 1132\n186 1030 255\n877 380 759\n649 1381 979",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "851 854 1012\n1300 697 898\n908 1219 332\n344 645 1437\n1020 440 390\n1198 919 563\n699 1343 781\n1200 408 1045",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "419 1352 269\n849 1331 1157\n1476 988 1100\n797 874 210\n1137 295 1208\n1122 833 194\n562 234 1014\n1087 1151 613",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "946 1122 1031\n1181 971 723\n1352 466 465\n1053 968 612\n161 817 852\n1090 720 1048\n1232 1274 1253\n1077 970 405",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1372 1342 1406\n615 532 1123\n975 1441 735\n1260 854 843\n924 392 568\n428 743 882\n1453 258 1059\n630 1348 587",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "730 581 1213\n1396 1461 294\n1145 429 711\n662 1110 1440\n1343 206 296\n940 545 707\n383 1162 529\n1325 425 1394",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "418 502 700\n230 1118 339\n209 733 467\n1093 884 1440\n344 693 846\n1221 1362 1225\n1119 604 1241\n902 928 339",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2\n2999 1 2\n2999 3000 2\n2 2999 1\n2999 2 2\n2 3000 2999\n2999 2999 3000\n2 2999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "3000 2 1\n3000 2999 3000\n3000 2 1\n3000 2 2\n2 2999 3000\n2 2 2999\n2999 1 2\n2999 2 2999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}