{
  "problem_code": "problems",
  "title": "Coding",
  "tags": [],
  "text": "A binary code for an alphabet of 2Nsymbols is a bijection between the 2Nsymbols and 2Nbinary codewords. For example, in the table below 3 different binary codes are presented for a 4-symbol alphabet (a,b,c,d).SymbolCode 1Code 2Code 3a0001b011010c10110100d111111000A code is said to be prefix-free if none of the codewords is a prefix of another codeword. For example, in the table above, codes 1 and 2 are prefix-free. However, code 3 is not prefix-free. Prefix-free codes are widely used, as encoding and decoding becomes very simple.For this problem, givenNand a message containingMalphabet symbols, the task is to find a prefix-free code for the entire alphabet (including symbols possibly not present in the message) that minimizes the number of necessary bits to represent the message. For example, letN=2, with symbols (a, b, c, d), and the message \"a a a a b b b b a a a a c c d d\"The message encoded with codes 1 and 2 above becomes, respectively:00 00 00 00 01 01 01 01 00 00 00 00 10 10 11 11, for a total of 32 bits.0 0 0 0 10 10 10 10 0 0 0 0 110 110 111 111, for a total of 28 bits.It is possible to show that no prefix-free code can encode the message above in less than 28 bits.InputThe input contains several test cases. Each test case has two lines. The first line of a test case contains two integersN,Mseparated by a single space (1 ≤N≤ 15, 1 ≤M≤ 106,D≤ 15).On the second line areMintegersXi, 0 ≤Xi≤ 2N– 1, representing the message to be encoded. The end of the input is marked by a case withN=M=0. This case must not be processed.OutputFor each test case, print a single line with one integer, the minimum number of bits necessary to encode the message using a prefix-free code.ExampleInput:2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0Output:28",
  "sample_input": "Input:2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0Output:28",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CODING2",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0",
      "expected_output": "28",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6 9 10 2 7 10 5 2 10 7 1 4 10 4 3 8 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 3 10 5 4 5 10 8 8 7 8 1 2 5 2 5 1 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9 5 7 6 4 10 6 1 9 2 5 9 8 6 2 9 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 11 5 5 2 3 12 14 9 3 3 12 9 13 4 6 6 8",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 4 11 1 2 12 14 11 10 14 8 5 12 8 6 6 2 7",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 14 3 2 9 9 6 15 3 2 7 6 3 7 6 6 4 8",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 13 1 4 5 1 7 2 7 11 15 5 13 1 13 5 15 8",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "15 5 4 12 14 7 1 3 12 8 12 11 11 15 4 12 8 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "7 3 5 2 1 4 5 5 3 6 7 1 1 2 7 2 4 4",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 7 1 6 7 6 4 7 1 7 5 7 7 4 7 1 4",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2 3 5 4 7 6 6 7 7 5 7 4 3 5 1 3 2 7",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1 2 5 4 3 7 4 3 5 1 4 1 6 5 7 1 1 3",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 6 1 4 7 7 1 4 2 3 3 5 7 4 6 5 2 2",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "4 5 3 4 7 3 3 4 4 7 1 4 7 7 1 7 6 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 6 4 3 2 7 4 3 3 1 5 2 1 4 6 3 5 6",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 14 1 14 1 2 2 1 15 1 2 15 15 2 15 15 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "15 14 15 2 2 1 15 14 15 15 15 2 2 14 2 15 15 15",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}