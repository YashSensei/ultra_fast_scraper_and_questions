{
  "problem_code": "problems",
  "title": "Exchanges",
  "tags": [],
  "text": "Given n integer registers r1, r2... rnwe \r\n\tdefine a Compare-Exchange Instruction CE(a, b), where a, b are register indices \r\n\t(1 <= a < b <= n):CE(a, b):: \r\n  if content(ra) >  content(rb) then \r\n     exchange the contents of registers raand rb;A Compare-Exchange program (shortly CE-program) is any finite sequence of \r\n\tCompare-Exchange instructions. A CE-program is called a Minimum-Finding program \r\n\tif after its execution the register r1always contains the smallest \r\n\tvalue among all values in the registers. Such a program is called reliable if \r\n\tit remains a Minimum-Finding program after removing any single Compare-Exchange \r\n\tinstruction. Given a CE-program P, what is the smallest number of instructions \r\n\tthat should be added at the end of program P in order to get a reliable \r\n\tMinimum-Finding program?For instance, consider the following CE-program for 3 registers: CE(1, 2), \r\n\tCE(2, 3), CE(1, 2). In order to make this program a reliable Minimum-Finding \r\n\tprogram it is sufficient to add only two instructions: CE(1, 3) and CE(1, 2).TaskWrite a program that:reads the description of a CE-program,computes the smallest number of CE-instructions that should be added to make \r\n\t\tthis program a reliable Minimum-Finding program,writes the result.InputThe first line of the input contains exactly one positive integer d equal to \r\n\tthe number of data sets, 1 <= d <= 10. The data sets follow.Each data set consists of exactly two consecutive lines. The first of those \r\n\tlines contains exactly two integers n and m separated by a single space, 2 \r\n\t<= n <= 10000, 0 <= m <= 25000. Integer n is the number of \r\n\tregisters and integer m is the number of program instructions.The second of those lines contains exactly 2m integers separated by single \r\n\tspaces - the program itself. Integers aj, bjon positions \r\n\t2j-1 and 2j, 1 <= j < = m, 1 < = aj< bj<= \r\n\tn, are parameters of the j-th instruction in the program.OutputThe output should consist of exactly d lines, one line for each data set. Line \r\n\ti, 1 <= i <= d, should contain only one integer - the smallest number of \r\n\tinstructions that should be added at the end of the i-th input program in order \r\n\tto make this program a reliable Minimum-Finding program.ExampleInput:1 \r\n3 3 \r\n1 2 2 3 1 2Output:2",
  "sample_input": "CE(a, b):: \r\n  if content(ra) >  content(rb) then \r\n     exchange the contents of registers raand rb;",
  "sample_output": "Input:1 \r\n3 3 \r\n1 2 2 3 1 2Output:2",
  "link": "https://www.spoj.com/problems/EXCHNG",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "CE(a, b):: \r\n  if content(ra) >  content(rb) then \r\n     exchange the contents of registers raand rb;",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 \r\n3 3 \r\n1 2 2 3 1 2",
      "expected_output": "2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "knnak spjo\nnhpk tbw rdmoz cx wf\noapcb yny rmdzbjil ms ipfut dikg lksva",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "v bv\nh awuqlidslzx orr ggs hrkav\nkvxedpg lpf ckkolwx o rotim bdqjy mfop",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "b km\nppu m xr hpfnatcgzao ionh\ncpdtz rpnzv eevqhgzj tuvm byazzvmdv u tfepp",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "tp n\nxn jpsyvmyz rlkwg ofaer k\nvmik m lcixyke sbcck ozgwgv kza wvbtv",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "qh jmkpq\nnlbm kkhh aokj rypvy x\nqrhv rb i nfmi q xvv vvowe",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "q nvund\nkv orzxgmbi nfol qa l\nrsyts azhxq c t giswo jtuma jigi",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "aolss wa\ngl prywc wx fsi ahx\ny rbpt amkbck v kjomp frzz fnma",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ig grm\nvx imtqv bvn jpumshwdbts y\nu zpsgi fgvfle fgcn bp emr pqc",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "jogy kei\nucgw hyucencmtt d bspq z\nr suu opfjl bw vceeumb zysa s",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "u q\nwl lo uq kpjdxq kvtvy\nnrakvbf ssrlc ynqi grct c wr pucay",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "djm qtdu\nvu gdwxz lwiq msauvulnsq rojr\ngbde zmxr hkxbmuh i cjaxicivy scxs zsvzc",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "nnjnh yefom\nmd lgjqrilpnv ut wgrnpuy v\nxxye qnhnz avoft bspy juls z yuk",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "ec yp\nmjpq wnp yggvt xtefdwt f\nxrhn anpf oih gs cmzvm scssw fm",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "trk v\nxv hmt nw oubhtni t\nnsjwnl bh ma yp gjfkvsn q dmp",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "iyqmc uselg\ntkq bpzvfmr mqk tzgmn j\nrrddv dzx nmizphu l ogm vtyq rf",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "zam dlmhd\nisbpu etkckrtdci ki wdk tiyvs\nskiowlfe nbeyn bk oqo seropi tjykr cmfav",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "rcs vvsx\nixogu muepqskqu toz v kkm\nqru b ac g o pzdpu h",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "fj pajxs\noqmj bfmg x xvcyybcb nnxg\nfmjrh cjvnf iqssb yn lpoprnmjo xam tcgm",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}