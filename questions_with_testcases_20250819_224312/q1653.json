{
  "problem_code": "problems",
  "title": "Fishing Net",
  "tags": [],
  "text": "In a highly modernized fishing village, inhabitants there make a living on fishery. Their major tools, fishing nets, are produced and fixed by computer. After catching fishes each time, together with plenty of fishes, they will bring back the shabby fishing nets, which might be full of leaks. Then they have to inspect those nets. If there exist large leaks, they have to repair them before launching out again.Obviously, the smaller the leaks in the fishing nets are, the more fishes they will catch. So after coming back, those fishermen will input the information of the fishing nets into the computer to check whether the nets have leaks. The checking principle is very simple: The computer regards each fishing net as a simple graph constructed by nodes and edges. In the graph, if any circle whose length (the number of edges) is larger than 3 must has at least one chord, the computer will output \"Perfect\" indicating that the net has no leaks. Otherwise, \"Imperfect\" will be displayed and the computer will try to repair the net.Note: A circle is a closed loop, which starts from one node, passes through other distinct nodes and back to the starting node. A chord is an edge, which connects two different nodes on the circle, but it does not belong to the set of edges on the circle.InputThe input file contains several test cases representing different fishing nets. The last test case in the input file is followed by a line containing0 0.The first line of each test case contains two integers,nandm, indicating the number of nodes and edges on the net respectively, 1 ≤n≤ 1000. It is followed bymlines accounting for the details of the edges. Each line consists of two integersxiandyi, indicating there is an edge between nodexiand nodeyi.OutputFor each test case, display its checking results. The word \"Imperfect\" suggests that the corresponding fishing net is leaking, while the word \"Perfect\" stands for a fishing net in good condition.Follow the output for each net with a blank line.ExampleInput:4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0Output:Imperfect\r\n\r\nPerfect",
  "sample_input": "Input:4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0Output:Imperfect\r\n\r\nPerfect",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FISHNET",
  "scraped_at": "2025-08-17 00:33:28",
  "test_cases": [
    {
      "input": "4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0",
      "expected_output": "Imperfect\r\n\r\nPerfect",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1\n2 6\n2 1\n10 6\n9 2\n9 3\n6 3\n10 10\n10 9\n2 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n3 4\n1 5\n9 2\n2 10\n5 7\n10 1\n8 2\n2 2\n8 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n2 1\n3 2\n9 8\n8 3\n2 2\n10 2\n8 1\n9 6\n3 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 83\n27 42\n6 67\n5 24\n97 65\n2 41\n35 90\n87 79\n3 58\n100 24",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 17\n49 57\n21 4\n60 5\n38 5\n60 60\n1 45\n62 88\n29 56\n75 19",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 3\n86 57\n48 17\n6 36\n73 100\n16 98\n54 52\n99 58\n50 32\n59 93",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 88\n96 47\n2 99\n4 58\n10 35\n91 28\n55 33\n74 42\n4 54\n81 80",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "86 58\n38 15\n49 11\n47 19\n91 53\n40 100\n48 24\n99 10\n61 50\n93 50",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "434 235\n373 224\n107 318\n452 470\n219 451\n297 385\n135 431\n308 283\n454 404\n327 87",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "429 117\n387 283\n402 374\n372 348\n264 164\n82 150\n411 417\n367 408\n53 103\n429 198",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "114 160\n411 161\n455 226\n155 84\n55 173\n498 478\n149 158\n481 154\n361 433\n445 295",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "268 60\n375 323\n464 497\n141 385\n423 181\n404 102\n192 54\n210 465\n158 97\n376 50",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "456 125\n137 277\n286 426\n293 463\n423 397\n101 343\n338 69\n171 196\n375 376\n336 490",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "319 191\n50 63\n306 385\n417 374\n152 253\n273 388\n300 293\n95 218\n265 305\n142 222",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "339 337\n198 408\n202 293\n60 429\n84 363\n384 294\n53 231\n69 500\n187 178\n280 50",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n2 1\n2 1000\n999 999\n1000 2\n2 1000\n2 2\n1000 2\n1000 1\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n999 1\n999 1000\n1 1\n2 2\n999 999\n2 999\n1000 1000\n1 1000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}