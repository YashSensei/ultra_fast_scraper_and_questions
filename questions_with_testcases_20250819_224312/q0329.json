{
  "problem_code": "problems",
  "title": "Choosing a Palindromic Sequence",
  "tags": [],
  "text": "Given two sequences of words: X = (x1... xn) and Y = (y1... yn), determine how many binary sequences P = (p1... pn) exist, such \r\nthat the word concatenation z1z2...zn, where zi= xiiff pi= 1 and zi= yiiff pi= 0,\r\nis a palindrome (a word which is the same when read from left to right and from \r\nright to left).InputThe input begins with the integer t, the number of test cases. Then t test \r\ncases follow.For each test case the first line contains the positive integer n - the number \r\nof words in a sequence (1 ≤ n ≤ 30). The following n lines contain \r\nconsecutive words of the sequence X, one word per line. The next n lines \r\ncontain consecutive words of the sequence Y, one word per line. Words consist \r\nof lower case letters of the alphabet ('a' to 'z'), are non-empty, and not \r\nlonger than 400 characters.OutputFor each test case output one line containing a single integer - the number of \r\ndifferent possible sequences P.ExampleSample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
  "sample_input": "Sample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PALSEC",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "Sample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n2\n8\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n10\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "17\n88498277\n71931731\n41361803\n57953128\n36681560\n11879049\n47652795\n50669254\n16125399\n99900230\n89249232\n12013119\n73710855\n22714755\n18149572\n24177812\n74108775",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n97324236\n50852538\n64048053\n43228881\n11285062\n80528583\n45705252\n75792001\n32043494\n25039188\n18908867\n54866939\n36179261\n72652553\n3156489\n43087121",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n88128267\n50490921\n86192850\n49916063\n19746944\n47180238\n68736562\n18675225\n85336314\n80119488\n83043740\n41684581\n25124362\n82111506\n78089598",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n5353723\n79835992\n81168152\n85554108\n53146251\n27157472\n55671885",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n7915011\n50659132\n74481790\n36409819\n42593516\n3937204\n62666506\n52927411\n96023256\n70541393\n81599874\n9144733\n98295011\n94335984\n15329352\n42122995\n5282052\n45691031\n70766613\n2970232",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "23\n60546\n58776\n2599\n18865\n92612\n90468\n39866\n60788\n66560\n42852\n15319\n7793\n2744\n20719\n51719\n3230\n53172\n65162\n79014\n52553\n49888\n70237\n55024",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n23255\n53411\n84842\n98655\n25762\n78298\n7126\n68862\n21416\n63089\n89554\n72039\n77238\n92623\n59845\n82144\n19712\n9440\n63547\n21768\n50627\n89064\n84499\n12745\n77077",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n56479\n18147\n27888\n52174\n4184\n55105\n29186\n85943\n90060\n14885\n7631\n74516\n51489\n36808\n74772\n75147\n33686\n33271\n82805\n76744\n18148\n1796\n8939\n55849\n98081\n72913\n42825\n82010\n57392",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n57128\n73088\n44384\n41580\n32156\n83195\n37165\n13014\n34590\n94326\n82099\n18956\n77205\n45760\n80633\n7348\n72679\n23462\n97829\n13539\n7604\n45456\n7470\n51852\n94319\n8473\n67152\n5427\n45040\n80409",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n55618\n46192\n53250\n67961\n77757\n88562\n79802\n63323\n19912\n42907\n28355\n71594\n11270\n78444\n40681\n3219\n30239\n96199\n64332\n42011\n86719\n85816\n92587\n98783\n1080\n76998\n61606\n93926\n48055\n31364",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n89974\n53689\n39793\n39009\n67956\n99148\n41749\n45883\n21675\n27619\n73339\n85079\n66559\n62084\n81828\n77285\n93721\n94999\n3445\n80250\n75619\n86009\n2608",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n7842\n65822\n36965\n22270\n72365\n3801\n55179\n7656\n82798\n98305\n529\n81678\n89923\n38629\n90148\n81479\n11381\n79320\n22291\n95757\n20196\n56203\n42896\n97820\n8894",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n45032640\n73980474\n64181710\n21577221\n48004443\n3480360\n41248295\n36769920\n96278615\n10576233\n82540074\n56238535\n27843643\n8903137\n81864519\n35636366\n36212973\n24071293\n35473797\n99500320\n58817433\n19870381\n60295156\n3131439\n89731818\n22026465\n74299973\n18891549\n12168838\n85321030",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n42886670\n7384016\n77630272\n76625107\n63329153\n7923719\n80333732\n97851415\n56010565\n52401141\n46491542\n68364610\n49062989\n65409225\n23690429\n47862751\n99070674\n90891617\n28032957\n88486137\n6750153\n17961218\n96588762\n72760852\n72189854\n42642220\n43651502\n21231930\n30650412\n4457114",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "2\n91239262\n78252102",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "30\n1\n100000000\n1\n100000000\n100000000\n100000000\n1\n52098301\n100000000\n58853134\n1\n76732372\n100000000\n100000000\n1\n43508143\n100000000\n1\n82395377\n100000000\n100000000\n100000000\n100000000\n1\n1\n1\n61710356\n1\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 30)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}