{
  "problem_code": "problems",
  "title": "Ouroboros Snake",
  "tags": [],
  "text": "Ouroboros is a mythical snake from ancient Egypt. It has its tail in its mouth and continuously devours itself.The Ouroboros numbers are binary numbers of 2nbits that have the property of \"generating\" the whole set of numbers from 0 to 2n- 1. The generation works as follows: given an Ouroboros number, we place its 2nbits wrapped in a circle. Then, we can take 2ngroups of n bits starting each time with the next bit in the circle. Such circles are called Ouroboros circles for the number n. We will work only with the smallest Ouroboros number for each n.Example: for n = 2, there are only four Ouroboros numbers. These are 0011; 0110; 1100; and 1001. In this case, the smallest one is 0011. Here is the Ouroboros circle for 0011:The table describes the function o(n;k) which calculates the k-th number in the Ouroboros circle of the smallest Ouroboros number of size n. This function is what your program should compute.InputThe input consists of several test cases. For each test case, there will be a line containing two integers n and k (1 ≤ n ≤ 15; 0 ≤ k < 2n). The end of the input file is indicated by a line containing two zeros. Don't process that line.OutputFor each test case, output o(n;k) on a line by itself.ExampleInput:2 0\r\n2 1\r\n2 2\r\n2 3\r\n0 0Output:0\r\n1\r\n3\r\n2",
  "sample_input": "Input:2 0\r\n2 1\r\n2 2\r\n2 3\r\n0 0Output:0\r\n1\r\n3\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/OROSNAKE",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "2 0\r\n2 1\r\n2 2\r\n2 3\r\n0 0",
      "expected_output": "0\r\n1\r\n3\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 9\n8 3\n2 10\n8 3\n1 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n5 10\n4 9\n7 10\n3 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n3 8\n10 4\n5 9\n7 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n10 7\n5 4\n1 7\n3 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 3\n8 14\n3 12\n10 14\n2 4",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 13\n4 9\n14 1\n12 11\n10 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "13 6\n6 1\n15 10\n15 9\n10 12",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 5\n3 8\n14 15\n10 5\n15 8",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "5 3\n6 7\n3 1\n7 4\n2 1",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "6 2\n4 2\n3 2\n1 1\n2 6",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4 4\n1 7\n1 6\n1 2\n5 5",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 1\n7 5\n4 5\n3 4\n5 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 2\n2 2\n5 2\n4 3\n6 1",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5 2\n7 7\n7 3\n4 2\n7 2",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "3 7\n4 2\n3 6\n7 2\n6 7",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "15 15\n15 15\n15 15\n15 15\n15 15",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "15 15\n15 15\n15 15\n15 15\n15 15",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "15 1\n2 14\n2 15\n15 2\n2 15",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "14 1\n1 15\n2 14\n15 2\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}