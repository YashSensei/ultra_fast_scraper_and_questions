{
  "problem_code": "problems",
  "title": "Blockade",
  "tags": [],
  "text": "There are exactly N towns in Byteotia. Some towns are connected by bidirectional roads. There are no crossroads outside towns, though there may be bridges, tunnels and flyovers. Each pair of towns may be connected by at most one direct road. One can get from any town to any other-directly or indirectly.Each town has exactly one citizen. For that reason the citizens suffer from loneliness. It turns out that each citizen would like to pay a visit to every other citizen (in his host's hometown), and do it exactly once. So exactly N*(N-1) visits should take place. That's right,should. Unfortunately, a general strike of programmers, who demand an emergency purchase of software, is under way. As an act of protest, the programmers plan to block one town of Byteotia, preventing entering it, leaving it, and even passing through. As we speak, they are debating which town to choose so that the consequences are most severe.TaskWrite a programme that:reads the Byteotian road system's description from the standard input,for each town determines, how many visits could take place if this town were not blocked by programmers,writes out the outcome to the standard output.InputIn the first line of the standard input there are two positive integers: N and N (1 ≤ N ≤ 100000, 1 ≤ M ≤ 500000) denoting the number of towns and roads, respectively. The towns are numbered from 1 to N. The following M lines contain descriptions of the roads. Each line contains two integers Xiand Yi(1 ≤ Xi, Yi≤ N) and denotes a direct road between towns numbered Xiand Yi.OutputYour programme should write out exactly N integers to the standard output, one number per line. The i-th line should contain the number of visits that could not take place if the programmers blocked the town no. i.ExampleInput:5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5Output:8\r\n8\r\n16\r\n14\r\n8",
  "sample_input": "Input:5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5Output:8\r\n8\r\n16\r\n14\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STC10",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5",
      "expected_output": "8\r\n8\r\n16\r\n14\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 5\n2 3\n5 9\n1 7\n7 7\n3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\n9 5\n8 4\n3 8\n2 7\n1 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n4 3\n4 3\n4 6\n2 4\n3 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 32\n61 60\n6 93\n20 9\n37 25\n96 4",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "78 93\n90 37\n34 95\n70 46\n61 66\n50 21",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "80 11\n91 79\n29 6\n46 75\n52 38\n65 32",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 25\n18 17\n48 88\n56 72\n76 54\n11 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 42\n43 78\n79 84\n90 40\n58 66\n24 49",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48694 46994\n27304 17165\n9319 14076\n12959 20666\n45398 39341\n36697 32360",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "36189 14946\n29142 42989\n24999 8592\n7470 48573\n35152 11030\n10325 24186",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "16527 39770\n18750 25462\n26713 31106\n27598 13734\n42120 46494\n23050 21505",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "27602 18528\n22866 10197\n43111 5802\n30475 21109\n14725 43724\n30481 29365",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47016 17349\n21596 42314\n13751 28809\n5756 47728\n11825 25474\n24236 48043",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5627 43902\n8690 18079\n49254 9761\n14066 34558\n32298 24275\n44266 23822",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "42987 47373\n29646 48692\n12793 7615\n33195 36323\n30458 29331\n36572 18875",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 1\n2 1\n1 1\n1 99999\n99999 2\n99999 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 2\n1 99999\n2 99999\n99999 99999\n2 2\n99999 100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}