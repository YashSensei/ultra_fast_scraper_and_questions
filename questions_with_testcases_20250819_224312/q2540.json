{
  "problem_code": "problems",
  "title": "MAXOR",
  "tags": [],
  "text": "You are given a sequence A[1], A[2] ... A[N]. (0 ≤ A[i] < 231, 1 ≤ N ≤ 12000).A query is defined as follows:Query(x, y) = Max { a[i] xor a[i+1] xor ... xor a[j] ; l ≤ i ≤ j ≤ r }.l = min ( ((x+lastans) mod N)+1, ((y+lastans) mod N)+1 ).r = max ( ((x+lastans) mod N)+1, ((y+lastans) mod N)+1 ).lastans[1] = 0 , lastans[i] = Query[i-1].Given M queries, your program must output the results of these queries. (0 ≤ M ≤ 6000).InputThe first line of the input file contains 2 numbers : N M.In the second line, N numbers follow.M lines follow, where line i contains 2 numbers xi and yi.OutputYour program should output the results of the M queries, one query per line.ExampleInput:3 3\r\n1 4 3\r\n0 1\r\n0 1\r\n4 3Output:5\r\n7\r\n7",
  "sample_input": "Input:3 3\r\n1 4 3\r\n0 1\r\n0 1\r\n4 3Output:5\r\n7\r\n7",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MAXOR",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "3 3\r\n1 4 3\r\n0 1\r\n0 1\r\n4 3",
      "expected_output": "5\r\n7\r\n7",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 7\n3 1 7\n4 9\n5 1\n6 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n5 2 9\n5 2\n8 6\n6 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6\n4 2 4\n6 10\n7 3\n3 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "31 9\n92 50 34\n56 18\n62 75\n44 62",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "58 92\n62 82 45\n35 77\n33 40\n36 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 77\n31 68 44\n18 23\n83 82\n70 88",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "91 73\n51 76 28\n1 57\n75 43\n22 5",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 58\n65 7 67\n41 52\n79 11\n42 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "3896 5630\n2638 3773 941\n3087 5054\n4353 4887\n2816 3832",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1006 5881\n3102 2499 4524\n3281 2697\n5658 1839\n908 4387",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "979 2280\n3387 2111 3305\n2431 629\n5012 1161\n4189 1805",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5334 2688\n1291 5390 3405\n1774 4994\n1203 3793\n5473 4755",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "3953 3631\n4554 1395 5306\n2321 862\n5014 4349\n5557 2419",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3091 4254\n1292 4247 870\n1978 5035\n5836 5911\n3823 2118",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2908 2500\n3821 2211 1558\n4076 1350\n2429 5196\n4187 4849",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "12000 12000\n12000 12000 12000\n12000 12000\n12000 12000\n12000 12000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "12000 12000\n12000 12000 12000\n12000 12000\n12000 12000\n12000 12000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 12000 11999\n12000 11999\n2 2\n12000 11999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "11999 11999\n1 11999 1\n12000 2\n1 11999\n12000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}