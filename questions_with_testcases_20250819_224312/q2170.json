{
  "problem_code": "problems",
  "title": "To Poland",
  "tags": [],
  "text": "Little Russell and Mr. Fredricksen are embarking in a new journey  with their balloon house. After visiting South America and helping  Kevin, the Snipe, they decided to travel to Warsaw, Poland where new  specimens of birds might be found.Their trip is divided into  several parts. Due to pressure levels and wind speed, each part of their  journey requires that their house is equipped with a minimum number of  balloons. As a good boy scout, Russell has already figured out how many  balloons are necessary to go through each of the parts. The problem is  that atmosphere conditions change and Russel is having trouble  determining how many balloons the house should be equipped with to go  through continuous parts of the journey, so they don't have to fill up  more balloons than necessary.To help out Russell, you are to develop a program that must deal with the following queries:Russell has added or removed balloons from the houseThe minimum number of balloons at certain part has changedHow  many balloons should be added or removed so that the house goes through  continuous parts of the journey with the minimum necessary number of  balloons?InputThe first line contains a numberT(T≤ 100), the number of testcases.Each testcase starts with numbersN(1 ≤ N ≤ 105) andM(0 ≤ M ≤ 103) whereNis the number of parts in the journey andMis the initial number of balloons in the house. ThenNnumbers follow, one per line, where each numberNi(0 ≤Ni≤ 109, 0 ≤i<N) represents the initial number of balloons necessary to go through parti.On the next line there is a numberQ(1 ≤ Q ≤ 105), the number of queries that you should answer. Each of the nextQlines contains a query in one of the following formats:\"A K\" -  whereAis the actual character 'A' (quotes for clarity) andK(-103≤K≤ 103)  is the number of balloons that have been added or removed from the  house.  It is assured that the total number of balloons in the house is  never negative;\"BJK\" - whereBis the actual character 'B' (quotes for clarity),J(0 ≤J<N) is the number of the part of the journey (0-indexed) andK(0 ≤K≤ 109) is the new minimum number of balloons required to go through partJ;\"C I J\"- whereCis the actual character 'C' (quotes for clarity), and[I, J], 0 ≤I≤J< N$ is the range that Russell would like to query. For each query of this type, print the difference between the number of balloons currently in the house and theminimumnecessary to go through all the parts betweenIandJinclusive. Note that this query doesn't change the number of balloons in the house.OutputFor each testcase print one line with \"Testcase X:\" (quotes for clarity) whereXis the number of the testcase (0-indexed). For each query of the type \"C I J\"  print one line with the difference between the number of balloons  currently in the house and the minimum necessary to go through all the  parts betweenIandJinclusive.Print one blank line after each testcase.ExampleInput:23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1Output:Testcase 0:6Testcase 1:687",
  "sample_input": "Input:23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1Output:Testcase 0:6Testcase 1:687",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TOPOLAND",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1",
      "expected_output": "Testcase 0:6Testcase 1:687",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 4 1 1 2 7 7 4 7 7 9 1 8 1 8 6 4 1\n10 5 5 jw 3 2 5 2 f 9 s bb 4 bqj 8 gom 9 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 3 9 3 1 10 3 1 3 8 4 9 4 1 8 6 6 7\n5 1 7 qi 7 7 5 1 dg 9 x ryxmz 8 p 4 lqaw 8 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 1 3 4 3 7 9 10 10 8 9 8 8 1 3 10 10\n3 4 7 wbkri 1 5 6 4 yytzh 2 w jhgx 2 dd 5 peohw 9 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "33 39 42 30 95 78 8 25 63 13 25 21 6 67 50 22 83 20\n29 40 67 evfd 92 39 73 85 b 28 p pzbta 64 zw 72 mq 67 79",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 18 75 92 35 6 51 38 74 30 5 77 48 12 88 27 38 30\n61 14 47 e 41 78 64 49 qxkg 10 ehur kc 37 upfk 71 s 41 35",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 60 92 71 1 73 95 35 54 88 60 4 66 37 56 14 28 16\n20 85 99 x 64 26 25 35 okeg 70 mg kc 68 ialn 22 cnrt 14 40",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 56 3 16 27 97 63 29 30 54 42 15 72 2 100 6 50 85\n5 20 2 dp 2 22 62 34 ezhk 27 oyzfu bixef 43 h 45 jwex 38 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1 21 17 92 99 42 47 19 59 50 87 14 48 51 82 84 100\n5 86 21 jxo 71 46 48 26 aqo 6 r aq 32 mlw 10 fdkq 33 20",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32 8 49 35 31 52 25 15 48 47 20 48 44 19 25 26 52 40\n6 7 13 e 37 5 47 40 ghn 16 fwcjg ofi 21 j 37 agjg 16 40",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "28 10 48 32 17 26 19 37 27 43 6 48 13 50 5 52 17 48\n13 13 14 z 25 52 38 7 qzd 11 g lav 17 dl 6 ft 20 19",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15 5 36 35 25 7 44 28 10 26 11 37 51 30 48 50 45 6\n44 19 46 kt 23 22 51 24 v 16 i xaqkk 24 lh 41 n 10 10",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "11 5 47 30 31 35 48 29 13 32 7 51 9 11 16 33 33 38\n22 24 25 luhx 22 13 9 51 j 39 yxbu qiak 37 hgkvt 23 bbgzd 34 11",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "11 51 42 6 39 38 7 12 23 47 38 11 8 46 7 6 50 47\n22 14 14 ab 46 41 10 23 wejf 39 djmtz ql 42 qu 12 ua 16 51",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38 21 14 25 24 11 36 27 43 41 14 32 20 13 33 25 23 33\n20 33 49 wvsv 47 34 39 16 ab 45 cvjv xrwb 33 wrspk 34 nnp 33 50",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 42 29 22 49 9 11 13 29 39 33 8 19 43 18 26 26 5\n31 26 26 ua 26 18 49 27 jd 30 lm ns 45 i 15 akb 25 45",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\n105 105 105 daa 105 105 105 105 s 105 ryuuz iiwkj 105 ja 105 t 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\n105 105 105 q 105 105 105 105 yz 105 bdtt s 105 yg 105 xhptf 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 105 104 104 1 2 104 1 105 105 2 2 105 1 2 105 105\n105 2 1 j 105 2 105 105 dxye 1 y tbnus 2 uq 1 goai 2 104",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 1 1 105 104 104 105 105 2 2 2 105 104 104 1 105 105 104\n104 105 2 yivu 105 105 2 105 ywtwl 105 l saq 104 reaf 2 an 105 104",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}