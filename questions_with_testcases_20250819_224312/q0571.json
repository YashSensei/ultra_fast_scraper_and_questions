{
  "problem_code": "problems",
  "title": "Coins Game",
  "tags": [],
  "text": "EnglishVietnameseAsen and Boyan are playing the following game. They choose two different positive integers K and L, and start the game with a tower of N coins. Asen always plays first, Boyan – second, after that – Asen again, then Boyan, and so on. The boy in turn can take 1, K or L coins from the tower. The winner is the boy, who  takes  the  last  coin  (or  coins). After  a  long,  long playing, Asen  realizes  that  there  are cases in which he could win, no matter how Boyan plays. And in all other cases Boyan being careful can win, no matter how Asen plays.So, before the start of the game Asen is eager to know what game case  they have. Write a program coins which help Asen  to predict  the game  result  for given K, L and N.INPUTThe input describes m games.The first line of the standard input contains the integers K, L and m, 1 < K < L < 10, 3 < m < 50. The second  line contains m integers N1, N2 … Nm, 1 ≤ Ni ≤ 1 000 000,  i = 1, 2 … m, representing  the number of coins in each of the m towersSAMPLE INPUT2 3 53 12 113 25714 88888OUTPUTThe  standard output contains a  string of  length m composed of letters A and B.  If Asen wins  the  ith game (no matter how the opponent plays), the ith letter of the string has to be A. When Boyan wins the ith game (no matter how Asen plays), the ith letter of the string has to be B.SAMPLE OUTPUTABAABProblem for kid - Please, think like kid.",
  "sample_input": "SAMPLE INPUT2 3 53 12 113 25714 88888",
  "sample_output": "SAMPLE OUTPUTABAAB",
  "link": "https://www.spoj.com/problems/MCOINS",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "SAMPLE INPUT2 3 53 12 113 25714 88888",
      "expected_output": "SAMPLE OUTPUTABAAB",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2 3 1 3 9 3\ncf nigg 8 7 8 6 5 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 4 1 2 8 8\nydrtr nruvcp 4 7 5 2 4 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 7 9 6 3 2 8\npsqvp fut 3 1 5 9 10 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 66 2 77 63 18 14\nenxns g 23 8 35 5 46 34",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 54 80 81 11 8 91\ngdihvf t 97 85 23 99 73 41",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 94 2 64 27 2 54\nqbi ejwr 10 38 11 48 79 97",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "77 63 80 88 29 15 76\njxlfpq wntvm 73 51 93 32 18 96",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 16 5 64 91 34 34\nccfl mlqs 74 48 85 65 18 31",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "148 241 432 230 241 471 419\nzzk lqg 81 73 224 394 327 80",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "425 440 137 421 400 318 106\ndpv eva 433 450 352 226 496 182",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "161 157 348 221 141 365 385\nftyda enwop 380 247 408 373 204 99",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "216 272 273 279 112 125 230\nzo hs 226 157 340 232 241 104",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "141 331 226 332 312 132 96\nvvntg uomei 346 231 268 360 386 435",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "455 492 449 306 448 106 107\nxcpra asmdwm 438 86 306 467 358 255",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "472 409 101 254 226 170 230\nusfgv zorqyr 458 111 221 328 339 144",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\npad zmh 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\npxtadi pmodi 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 999 1 1000 2 1000\nqj oo 1 999 1 1000 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 2 999 999 1000 1\nr keod 999 2 1 2 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}