{
  "problem_code": "problems",
  "title": "NEKAMELEONI",
  "tags": [],
  "text": "\"Hey! I have an awesome task with chameleons, 5thtask for Saturday’s competition.\"\"Go ahead...\"(...)“That’s too difficult, I have an easier one, they won’t even solve that one.”“You are given an array of N integers from the interval [1, K]. You need to process M queries. The first\r\ntype of query requires you to change a number in the array to a different value, and the second type of\r\nquery requires you to determine the length of the shortest contiguous subarray of the current array that\r\ncontains all numbers from 1 to K.”“Hm, I can do it in O(N6). What’s the limit for N?”InputThe first line of input contains the integers N, K and M (1 <= N, M <= 100 000, 1 <= K <= 50). The\r\nsecond line of input contains N integers separated by space, the integers from the array. After that,\r\nM queries follow, each in one of the following two forms:“1 p v” - change the value of the pthnumber into v (1 <= p <= N, 1 <= v <= K)“2” - what is the length of the shortest contiguous subarray of the array containing all the integers from 1 to KOutputThe output must consist of the answers to the queries of the second type, each in its own line.If the required subarray doesn’t exist, output −1.ExampleInput:4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2Output:3\r\n-1\r\n4",
  "sample_input": "Input:4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2Output:3\r\n-1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NEKAMELEONI",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2",
      "expected_output": "3\r\n-1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 7\n10 8 9 7\n10\n6 3 1\n4\n10 3 5\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 4 10\n1 6 5 4\n5\n3 7 9\n1\n6 3 2\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 9 8\n1 1 1 10\n1\n5 2 1\n3\n2 1 3\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "57 40 93\n17 69 74 71\n47\n62 41 24\n78\n19 76 67\n7",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 57 20\n37 88 53 72\n56\n60 45 100\n33\n5 39 43\n55",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "67 57 44\n58 11 91 78\n22\n60 96 26\n88\n47 25 47\n56",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "67 70 33\n11 86 72 92\n9\n19 18 37\n97\n71 71 22\n99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 33 80\n34 50 60 27\n70\n95 73 30\n45\n46 2 56\n99",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "72 56 300\n353 492 195 499\n371\n246 181 138\n349\n204 290 145\n57",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "258 157 463\n389 111 434 479\n295\n236 360 119\n251\n453 172 124\n161",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "133 110 427\n99 312 425 56\n440\n92 370 394\n100\n387 487 413\n185",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "55 73 345\n84 89 324 349\n477\n244 379 344\n295\n244 106 231\n477",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "377 318 121\n309 230 447 105\n54\n327 171 229\n342\n471 373 256\n217",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "350 175 497\n164 465 440 326\n99\n264 281 163\n227\n233 122 305\n424",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "321 155 196\n183 309 153 197\n411\n296 132 321\n133\n374 96 351\n345",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 1\n999 1 2 1\n2\n1000 1000 1000\n999\n2 1000 2\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 999\n1 2 999 2\n1\n1 1000 1\n1000\n999 1 999\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}