{
  "problem_code": "problems",
  "title": "Shortest Paths",
  "tags": [],
  "text": "Nikola lives in Bittown and he is in love with his girlfriend Anita from a town called Hextown. Nikola\r\nknows the country map very well, and he found the shortest path between these two towns. He calls\r\nthis path lucky path. The map of the country can be described as a collection of towns connected\r\nwith bidirectional roads.One day the president of this country decided that there are going to be some works on the roads. In\r\norder to uphold the traffic in the country, only one road is going to be closed per day.For each road on the lucky path, Nikola wants to know the length of the shortest path between Anita\r\nand him if that road is closed.InputThe first line of input contains four integers: n - the number of cities, m - the number of roads\r\nbetween these towns, a - index of town Bittown where Nikola lives, b - the index of town\r\nHextown where Anita lives. Towns are indexed with numbers 1, 2 ... n. Next m lines specify roads:\r\neach line contains three integers: u, v and w - there exist road between towns u and v with length w.Last line of the input contains number k followed by k numbers a = v1, v2... vk= b - the lucky path\r\nthat Nikola uses.OutputFor every integer t = 1 ... k - 1, in separate line, print the length of the shortest path between cities a\r\nand b, if the road (vt, vt + 1) is closed. If there is no such path, output “-1” without quotes.ExampleInput:5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5Output:-1\r\n101\r\n10Constraints-1 ≤ n ≤ 2000, 1 ≤ m ≤ 100,0001 ≤ a, b ≤ n1 ≤ w ≤ 100,000There is at most one road between each pair of cities.You may assume that the given path is one of the shortest paths that connects given two cities a and b.",
  "sample_input": "Input:5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5Output:-1\r\n101\r\n10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SPATHS",
  "scraped_at": "2025-08-17 00:34:35",
  "test_cases": [
    {
      "input": "5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5",
      "expected_output": "-1\r\n101\r\n10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10 3 9\n2 3 7\n2 5 10\n9 4 8\n2 4 6\n5 7 8\n8 6 8\n5 4 7 9 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 9 4\n2 5 1\n1 4 6\n6 7 4\n3 9 1\n10 8 8\n7 7 9\n10 9 10 2 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 2 10 4\n10 7 5\n4 2 7\n6 1 3\n2 3 7\n7 3 8\n10 4 7\n9 1 9 1 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 92 23 72\n18 98 3\n7 13 30\n18 49 25\n93 14 70\n75 26 2\n100 23 48\n56 56 64 7 92",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 65 62 93\n66 88 65\n9 98 71\n46 1 65\n26 6 30\n19 100 83\n58 47 68\n100 91 34 17 14",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 13 98 66\n5 1 71\n45 87 70\n25 60 27\n53 78 70\n11 48 69\n94 16 74\n55 24 66 100 88",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 99 93 78\n24 7 58\n17 10 40\n47 96 24\n80 91 85\n86 53 33\n38 15 18\n2 73 33 64 87",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "37 19 91 51\n85 83 88\n66 26 25\n48 44 79\n80 18 82\n61 45 5\n55 55 77\n9 17 15 2 88",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "153 991 450 617\n559 873 500\n175 708 831\n307 733 208\n253 395 439\n193 759 523\n139 800 475\n185 503 709 363 417",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "561 601 987 403\n824 569 928\n279 216 401\n489 687 244\n830 356 755\n163 798 722\n332 869 749\n406 982 445 319 901",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "328 860 295 499\n345 455 766\n508 439 148\n608 941 603\n759 499 376\n981 600 561\n269 555 903\n432 911 646 754 867",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "566 572 379 174\n373 450 945\n904 778 920\n135 865 113\n545 605 443\n371 991 553\n400 909 239\n159 286 512 967 748",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "445 372 209 776\n850 495 539\n895 925 627\n303 198 114\n969 267 933\n660 294 187\n734 761 152\n397 447 851 554 194",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "759 251 624 272\n302 525 682\n183 824 166\n692 481 785\n828 192 844\n771 104 901\n945 403 622\n612 841 509 477 817",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "562 701 183 660\n108 567 506\n446 575 691\n770 266 153\n114 166 205\n945 542 342\n407 594 951\n785 743 414 300 930",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "2000 2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000 2000 2000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000 2000 2000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1999 2000 1999 2\n1999 1999 2\n2 2 2\n2000 1 2000\n2000 2 2000\n2000 2000 2000\n2000 2000 1999\n1999 1 2000 2000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2000 1 1\n1999 2 2000\n2000 2 2\n2 2 1999\n1 1 2\n1 2 2\n2000 2000 2\n1 2000 2000 1999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}