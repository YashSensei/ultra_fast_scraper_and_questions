{
  "problem_code": "problems",
  "title": "Big Pyramid",
  "tags": [],
  "text": "Archeologists have discovered an ancient manuscript describing a big  pyramid. \t\tThe pyramid is built of cubical stone blocks as shown in the picture.  There areNhorizontal levels in the pyramid. \t\tThe topmost level consists of a single block, and the base level is a  square of2*N-1×2*N-1blocks. \t\tThe archeologists  learned from the manuscript the size of a stone  block and the orientation the pyramid. \t\tHowever, they do not know the size and the exact location of the  pyramid.There are many hills in the land where the pyramid is believed to be  located. The archeologists think that one of the hills is actually \t\tthe pyramid covered with sand. To check that hypothesis, they produced  an elevation map of the land. \t\tThe land was divided into a grid ofH×Wcells. The size of a  cell is the same as the size of a stone block face. \t\tFor each cell they measured its height and calculated how many stone  blocks can be underneath the surface of the cell.Now the archeologists  give you the elevation map and ask to compute  the largest possible pyramid size, assuming that the pyramid base sides  are parallel to the grid lines.InputThe first line of the input contains two integersHandW(0 < H, W ≤ 200).\r\n Each of the subsequentHlines containsWintegers. Each  integer is non-negative and less than 201.OutputOne integer - the number of levels in the largest possible pyramid.ExampleInput:5 60 0 0 0 0 00 1 0 0 0 00 0 1 1 1 10 0 1 1 2 10 0 1 1 1 1Output:2",
  "sample_input": "5 60 0 0 0 0 00 1 0 0 0 00 0 1 1 1 10 0 1 1 2 10 0 1 1 1 1",
  "sample_output": "2",
  "link": "https://www.spoj.com/problems/EMILABC",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "5 60 0 0 0 0 00 1 0 0 0 00 0 1 1 1 10 0 1 1 2 10 0 1 1 1 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 5 5 2 4 7 3 5 5 3 10 5 10 2 2 2 2 8 4 9 3 7 5 4 3 9 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 6 7 3 7 2 2 7 9 10 1 2 7 5 9 9 8 5 9 5 2 5 9 7 4 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 2 7 3 4 4 7 1 9 5 5 1 5 3 10 7 3 8 10 8 3 2 9 10 4 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "75 1 84 50 92 38 27 27 34 75 28 53 99 67 61 30 58 58 93 49 95 67 62 47 96 5 66",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 20 12 50 20 39 90 11 15 57 67 1 85 45 85 72 44 94 48 95 29 2 57 71 98 81 87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 32 77 90 79 84 13 73 7 99 36 28 88 38 41 15 82 16 100 50 36 24 27 85 39 70 82",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "54 49 43 25 62 5 41 77 11 16 34 76 93 40 77 57 99 49 74 29 61 15 8 66 72 21 30",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 23 96 74 87 94 66 92 81 17 77 63 33 16 3 37 8 33 2 6 33 96 9 52 32 44 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "275 276 395 440 354 439 496 278 150 88 272 216 141 205 312 59 235 424 52 231 262 476 233 475 119 230 218",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "96 317 327 393 167 483 404 311 425 498 331 257 110 186 464 345 235 414 414 65 397 392 386 442 405 445 471",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "283 368 76 132 467 130 255 327 492 438 259 443 403 354 140 449 399 295 244 54 79 370 489 72 418 360 428",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "435 230 394 314 426 393 252 343 179 278 374 176 179 220 117 351 275 466 105 316 330 419 433 409 332 387 247",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "291 317 232 241 96 431 314 227 270 254 263 358 115 352 359 493 291 344 125 65 495 230 112 343 84 265 343",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "198 108 286 434 208 337 72 303 325 432 418 356 404 87 457 414 65 248 384 184 238 110 306 425 340 413 205",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "97 226 241 56 225 495 413 190 336 320 63 428 112 343 140 444 116 422 387 474 305 426 141 303 210 272 74",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 999 1 1 1 2 1000 1000 1 2 1 2 2 999 1000 2 1000 2 999 1000 2 999 1 2 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1 999 1000 2 1000 1 999 999 999 2 999 1 1000 1000 1000 999 999 1000 1 1000 999 1 1 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}