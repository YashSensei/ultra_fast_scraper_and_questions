{
  "problem_code": "problems",
  "title": "Stacks of Zippy",
  "tags": [],
  "text": "RecentlyZippyreceived four stacks, named A B C D respectively. Firstly, there are n elements in stack A (the element sequence is a permutation of 1..n), and stack B C D are empty. He can do four types of operations:operation a: push the top element of stack A to stack B (if stack A is not empty, this operation can be done.)operation b: push the top element of stack B to stack D (if stack B is not empty, this operation can be done.)operation c: push the top element of stack A to stack C (if stack A is not empty, this operation can be done.)operation d: push the top element of stack C to stack D (if stack C is not empty, this operation can be done.)He can do 2*n operations in total. Obviously, there are n elements in stack D after he did the 2*n operations. Then he take out the top element in stack D one by one. If the first element he takes out is n, the second is n-1, ... the last is 1, he will be very happy. Also, he wants to make the operation sequence he did lexicographic smallest.InputFirst line is a number t, which is the number of test cases.Then following t test cases. For each test case, the first line contains a number n, which denotes the number of the elements in stack A. The second line contains n numbers, separated by a space, which are the elements in stack A, from top to the bottom.You can be sure that the sum of all n does not exceed 200000, and each n is not bigger than 100000.OutputFor each case, output a line. If there exists an answer, output the lexicographic smallest one (the operations Zippy does, separated by a space). If not, output 0.ExampleInput:241 3 4 242 3 4 1Output:a b a c a b b d0",
  "sample_input": "Input:241 3 4 242 3 4 1Output:a b a c a b b d0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JZPSTA",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "241 3 4 242 3 4 1",
      "expected_output": "a b a c a b b d0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 9 9 5 7 7 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 3 5 3 9 9 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 8 3 2 6 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 79 94 12 24 88 7",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 8 54 66 33 66 84",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 78 94 39 27 56 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "89 17 15 32 98 73 95",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "96 6 74 2 5 22 23",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "290 194 462 258 405 58 146",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "134 66 138 257 55 365 115",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "133 428 343 384 51 235 272",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "85 302 192 425 144 65 80",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "76 443 164 282 233 57 185",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "315 474 485 461 207 468 410",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "55 443 449 391 107 189 348",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 1 1000 999 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 2 2 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}