{
  "problem_code": "problems",
  "title": "Modular Tetration",
  "tags": [],
  "text": "The ordinary arithmetical operations of addition, multiplication and exponentiation are naturally extended into a sequence ofhyperoperationsas follows.3×7  = 3 + 3 + 3 + 3 + 3 + 3 + 3 ; there are 7 copies of \"3\"\r\n3^7  = 3 × 3 × 3 × 3 × 3 × 3 × 3 ; there are 7 copies of \"3\"\r\n3^^7 = (3^(3^(3^(3^(3^(3^3)))))) ; there are 7 copies of \"3\"To extend the sequence of operations beyond exponentiation, Knuth defined a “double arrow” operator to denote iterated exponentiation(tetration)^^ in ASCII notation.\r\n\r\nThis gives us some very big numbers, your task will be to compute modular tetration.X^0=1for allX, as an empty product.X^^0=1for allX, for similar reason.InputThe first line of input contains an integerT, the number of test cases.\r\nOn each of the nextTlines, your are given\r\nthree integersX,N, andM.OutputFor each test case, you have to printX^^N modulo M.ExampleInput:3\r\n3 2 20\r\n3 3 345\r\n993306745 75707320 1000000000Output:7\r\n312\r\n884765625Constraints0 < T <= 10^4\r\nX, N, M unsigned 32bit integers\r\n1 < MExplanations3^^2 = 3^3 = 27 = 7 [mod 20]\r\n3^^3 = 3^(3^3) = 3^27 = 7625597484987 = 312 [mod 345]Problem designed to be solvable using some 'slow' languages like Python, under half the time limit. (2017-02-11 : TL updated ; compiler changes)\r\nIt is recommended to solve firstPower Tower City.\r\n;-) Have fun.",
  "sample_input": "3×7  = 3 + 3 + 3 + 3 + 3 + 3 + 3 ; there are 7 copies of \"3\"\r\n3^7  = 3 × 3 × 3 × 3 × 3 × 3 × 3 ; there are 7 copies of \"3\"\r\n3^^7 = (3^(3^(3^(3^(3^(3^3)))))) ; there are 7 copies of \"3\"",
  "sample_output": "Input:3\r\n3 2 20\r\n3 3 345\r\n993306745 75707320 1000000000Output:7\r\n312\r\n884765625",
  "link": "https://www.spoj.com/problems/MTETRA",
  "scraped_at": "2025-08-17 00:33:30",
  "test_cases": [
    {
      "input": "3×7  = 3 + 3 + 3 + 3 + 3 + 3 + 3 ; there are 7 copies of \"3\"\r\n3^7  = 3 × 3 × 3 × 3 × 3 × 3 × 3 ; there are 7 copies of \"3\"\r\n3^^7 = (3^(3^(3^(3^(3^(3^3)))))) ; there are 7 copies of \"3\"",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n3 2 20\r\n3 3 345\r\n993306745 75707320 1000000000",
      "expected_output": "7\r\n312\r\n884765625",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 8 1 10 3 2 7 1 8 10 10\nrj sqji 10 k 6 lwn 9 okj 3 utn 5 umln 3 yotte 2 fa vas ipu 1 jnjob mm rxyg\n7 8 5 4 9 6 7 3 4 3 8\ne sz 3 r 6 gjkd 4 zq 4 sb 3 ttaez 4 yltm 10 ji qiwxi aieeg 7 qwhua mvwv h\n4 9 10 3 5 10 10 2 9 7 7\nx hqcgw viwbreebwvaamnupihoursa wqhl dtl l 4 dwncgt t i",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7 1 2 5 10 9 10 10 2 6\nk xngzb 8 ye 1 lwyoc 6 p 7 uopu 2 eoxs 6 tlm 10 cq oyll x 9 oxrjo dmnp z\n7 8 2 6 2 4 9 8 8 7 3\nbefx yoggm 4 w 2 brilb 5 e 4 lieq 4 b 10 vnla 9 pnkdf fn tmnd 8 k gebgt pjcj\n2 6 1 3 1 7 4 4 7 3 9\np wzsw risfohugb sjmyd wb edgg 2 hn xuww zef",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 7 2 7 1 9 2 1 4 2 4\nk hdoot 7 k 3 dyz 5 mes 5 en 7 yjtg 3 zfxsq 1 vvxnz hbnmo hi 8 w v bsjgw\n3 10 8 1 6 4 1 4 3 3 1\nuqn d 5 e 10 f 5 ohi 5 er 3 ckuo 6 jlb 5 dnwg k gpli 8 fft uqjr aykw\n8 3 4 6 2 7 1 7 1 9 5\njgk frlw vmcbmbvabcrjkpp cz rkyar eoym 4 matn y jchq",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "63 57 96 93 45 14 29 29 54 72 74\np y 80 yu 89 c 46 u 46 fuwwc 51 f 52 c 48 cofjj tpb nxf 58 zlsm s gyovu\n95 25 30 28 35 77 37 86 81 29 74\ngyrul st 78 vlxxl 21 hhq 51 khg 93 dias 45 tpbt 26 nqfx 63 tyx mivfo uukeq 54 jkiry zvdhh eajzu\n76 25 80 32 89 34 1 81 10 76 15\nzgypa zq eoxhqbctwnfsxftqf hyxyg imthd dtdm 32 vcgp ls ho",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 67 81 91 50 94 35 55 43 65 40\nlrm cniiy 93 ip 83 c 24 ziinl 83 gn 5 riaho 32 q 25 e rmh i 45 w a ui\n40 8 72 11 16 11 35 42 24 57 21\ncbzp r 67 z 98 m 77 bca 60 kl 75 ciiah 63 gi 72 hpz nfekz yrgh 54 mxh mkuj m\n59 16 28 81 56 19 43 90 49 19 82\ntf lamz ajpmaghpvptuyqv cbiqn g yunxe 93 xgfe gyo qo",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "30 7 84 24 2 77 18 44 95 42 17\nc rwm 75 lx 85 vqi 55 b 42 xz 24 ci 32 ae 67 f wuzje p 57 ftjgn e nu\n76 18 21 91 34 8 68 98 66 64 72\nrcls ncqb 38 zpiq 89 pcgy 81 obmp 28 gkjv 3 amngz 74 pyp 99 qi fvmo mks 61 bsyk elbb lynsf\n79 47 94 84 76 90 67 74 96 69 87\ncb xp onwukgmjkrchkccwuzr qub u zrmjw 16 fggkt nehou hd",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "33 52 10 18 36 12 79 80 91 1 58\nwgfxu xd 36 f 28 pgkgo 15 sesld 26 hp 6 vrnw 77 j 16 fywaz nnc q 60 twhlxl dl k\n1 46 93 65 99 98 32 34 99 19 1\nfz o 14 xo 3 kqdt 15 mduex 28 hlu 58 hgl 60 prnwd 66 cws bsth hb 72 r erh a\n2 95 90 77 100 37 76 73 100 54 100\njm didd dilqffcjaxc ghcap wdjc z 99 nsaefq p gxyfg",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "71 89 67 76 67 93 31 83 71 3 19\ns yw 85 kxcpk 74 vxm 50 a 22 w 17 yfh 90 sz 33 cnqyz s yf 59 h i lp\n83 2 91 27 64 28 30 91 61 87 22\nc e 88 cv 55 c 63 oe 41 jv 78 eh 49 rwafy 78 vni tu xnrq 56 ldiat jpylo znf\n57 93 32 91 76 61 24 26 44 3 79\nck txtpt wswirqoathlyciy yn cy fcqjl 37 yysr nlat mi",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "83 492 460 54 342 62 140 371 355 400 495\nhiq znn 204 alkd 452 iirie 416 afdy 64 eaxdv 318 k 62 v 124 sftw zhp xf 321 vdhn hpiw wfr\n379 304 186 149 474 408 99 238 295 109 61\nhdwr g 140 g 117 j 57 pvdma 280 y 213 bxd 438 hs 488 xevs xd i 61 qpex xqhn xaobj\n466 465 159 225 418 105 395 144 161 79 64\ngk aqzld c wcsbc zkws am 196 xlukr btfv lby",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "105 221 86 120 164 195 186 369 77 284 449\ntr gyhmx 224 fu 440 lwtq 223 fa 361 xcw 357 lnnwx 91 iiby 457 ehqp mrgb cfdfv 421 tq psw itp\n474 454 408 419 253 240 262 68 440 399 294\nhi leicl 425 oui 192 c 399 p 195 dv 488 qb 305 g 295 ythe ka zvmp 454 idww qol byxw\n191 498 183 86 101 262 237 171 434 391 232\naa yiboa tewatfbgykvaxkhwto kpipv wsd nrthx 362 dp zmpju i",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "116 382 412 165 173 394 314 156 166 457 91\ng dgakv 202 r 294 iip 381 fpao 56 piuw 306 m 249 d 218 wmoc exi beiw 243 nivc i yde\n452 214 123 337 423 104 61 354 299 162 472\nwmcw sxod 344 elx 60 tpl 59 vncj 106 m 288 wn 445 j 80 kzxki kaxr w 458 nonwv qam rhof\n480 332 379 244 169 440 256 108 306 180 51\nmomoy iu hvoxdolgqchkzmviejsuvney bcsj daj gigb 329 te itis ssfpi",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "62 129 126 392 162 462 72 363 326 435 235\nmy mxm 412 ti 139 ajly 233 qb 486 ggs 372 eylq 316 djina 67 bn cy xcxjo 464 ppag w fzvfe\n391 336 345 338 391 191 237 377 234 87 185\nxdxop mazy 284 guus 497 rr 427 wby 413 kxd 124 ieu 223 a 189 dnnu rtqy vh 57 ohbdby khd hvj\n344 453 130 434 283 376 263 205 203 115 217\ncrph q gvkrfdriejsxq yg kbl huefe 265 dcah pqqg nsb",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "468 72 104 318 313 393 298 109 157 496 309\nmt u 331 po 452 y 349 cbung 428 ykf 194 lb 106 o 81 pqphs kou uxk 85 kcai twou qz\n166 453 370 306 51 294 355 292 151 319 393\nta pa 348 lnix 461 xgkzk 161 omjz 226 utx 482 d 261 gn 158 r jhxi ex 489 uxn oexnc p\n142 158 149 144 335 303 134 457 152 282 57\ndgoze mpv ywquxu tcvqa otzsh kne 471 c wngkj sbx",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "497 326 158 392 234 76 173 50 252 158 95\nj gdv 322 quc 166 tyd 455 aicoh 395 my 179 kq 254 vna 269 iwrn z gczi 467 hvcju pdq kfb\n56 441 167 84 156 459 344 69 171 184 231\nbdfob ahkz 254 sir 194 ziizn 497 gnbxd 497 eft 487 u 322 wgq 336 kjima aeaf ufn 378 krky bwh byg\n371 249 294 169 337 84 198 180 213 476 166\nv bol osh vbngw ijpz o 104 jlszt q n",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "285 165 309 324 289 90 397 150 275 92 401\nclu pgxx 466 ljys 420 sbw 402 almby 171 zqkp 288 mzwu 453 ewdp 209 yptzu nac u 416 pzph lcg jrj\n464 445 397 162 360 305 92 393 407 196 184\naibhl iuzbe 98 cew 260 ugs 494 dogwn 496 th 449 hhizt 238 uvbpc 269 aqcr pz umlfx 339 uhlq x hdp\n429 377 187 202 232 313 269 392 56 429 499\nvl cvb yzgzyzhfmjfcgxkzzo y fj q 439 whmw iil eo",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nntu lpngp 1000 lcfki 1000 q 1000 gpr 1000 yr 1000 bi 1000 gun 1000 zbxve udguo bmp 1000 i m xdz\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nnw qhn 1000 jzm 1000 r 1000 jjl 1000 z 1000 fje 1000 ezj 1000 cwvwv qrjs mhrzq 1000 dkc rf sufwv\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\np cu apevcfoihfzohhelwwhv ptk xd r 1000 ufnkuv jsnl nrks",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nlnt mnvrj 1000 st 1000 gusyb 1000 zg 1000 mp 1000 vygn 1000 kond 1000 fy tkooj qz 1000 rywg bx max\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nsqlh weyo 1000 wgy 1000 r 1000 ix 1000 tzgc 1000 uaij 1000 eu 1000 x rs oflr 1000 wtudl unp mdc\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nuhfv cikqd vjzofqnbqonipsjkvax yj f fv 1000 qackgb gfx ym",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 2 1000 999 1000 1 2 2 1000 1\nwzit zci 1000 yu 1 u 1 ychh 1000 rjh 1 hgfou 2 ch 999 geb zyvx oy 2 ozrthr oba kpci\n1 1 999 1000 999 1000 1 2 2 1 1\nyb fuer 2 gd 2 rvgf 2 u 1000 hkepr 2 dyo 999 cvi 1000 cjs ksr dn 1 iiw tile ksw\n1000 999 999 1 1 999 2 999 1 1 1\nv zt qutddebtblghahfkpc cmtge yvx m 1000 u kmfy beq",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}