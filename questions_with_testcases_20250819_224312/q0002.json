{
  "problem_code": "problems",
  "title": "Pairs of Integers",
  "tags": [],
  "text": "You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.InputThe first line of the input file is the integer number t (1 ≤ t ≤ 20), the number of test cases. Then t lines follow, each test case in one line; the line consists of a single integer N (10 ≤ N ≤ 109).OutputFor each test case:On the first line write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following formatX + Y = NHere X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of '+' and '=' characters.ExampleInput:2\r\n302\r\n11Output:5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302\r\n1\r\n10 + 1 = 11",
  "sample_input": "Input:2\r\n302\r\n11Output:5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302\r\n1\r\n10 + 1 = 11",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PAIRINT",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "2\r\n302\r\n11",
      "expected_output": "5\r\n251 + 51 = 302\r\n275 + 27 = 302\r\n276 + 26 = 302\r\n281 + 21 = 302\r\n301 + 01 = 302\r\n1\r\n10 + 1 = 11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n2\n8\n5\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n7\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n1\n7\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "12\n30470349\n16388727\n29333420\n32583296\n49432516\n22377223\n21246667\n77497044\n32620449\n81715993\n10635254\n55474057",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n73934752\n29758646\n97388555\n15764029\n99738579\n53275012\n72201501\n62572313\n93263770\n72519728\n92843852\n34339758\n40350380\n17328508",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n89238174\n75195765\n3350244\n10203434\n91601494\n90736748",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n40470010\n76734180\n48794462\n17501636\n68738884\n98502879\n75627554",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n62472253\n44983098\n85527917\n77336761\n93338569\n55082433\n65094308\n714564\n71560125\n82347300\n30626986\n98576625\n84490176\n45290484\n4720218\n78416093",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "26\n37940\n77074\n90837\n93430\n37162\n83957\n34682\n88525\n992\n9678\n54551\n80028\n37100\n825\n73017\n8769\n8397\n59794\n39174\n64519\n75493\n48526\n57179\n18952\n33464\n34928",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "101\n67018\n58224\n64906\n41192\n64304\n45738\n66025\n79877\n98218\n72480\n9055\n55458\n42138\n20475\n32389\n5228\n73873\n29468\n1981\n15291\n66139\n6645\n74903\n41443\n28727\n82374\n18623\n53649\n46258\n45368\n65651\n84961\n56494\n35919\n32018\n62180\n80616\n48863\n82026\n49018\n99180\n99276\n40291\n30038\n20696\n96643\n52994\n70000\n47413\n51497\n20271\n88652\n86512\n60553\n40409\n54207\n67945\n40476\n35083\n99808\n64406\n27907\n58405\n13976\n65432\n33440\n44179\n97119\n57914\n90294\n87759\n83474\n74232\n61268\n40397\n68010\n98742\n47694\n59362\n90364\n16647\n16029\n58346\n36676\n86928\n28341\n20730\n93037\n32313\n13530\n48740\n73777\n54226\n94948\n42792\n97104\n75266\n91803\n63141\n54545\n59797",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n85543\n42247\n76989\n81572\n530\n85304\n39098\n21663\n11107\n37584\n90418\n77751\n317\n11298\n21234\n56363\n40609\n33354\n59680\n40883\n38217\n87270\n85555\n63205\n88754\n2763\n7749\n87220\n20453\n7795\n58435\n92551\n95254\n52508\n13225",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n86543\n8454\n34750\n39722\n53667\n48451\n72836\n28502\n16508\n87352\n25347\n63109\n22885\n18002\n64904\n50785\n66308\n79677\n31709\n47313\n66619\n70412\n38248\n14868\n55700\n74071\n51811\n19210\n1817\n76986\n96512\n65207\n66635\n71991\n55828\n43055\n81507\n99751\n3735\n41239\n53523\n18196\n73768\n11006\n34757\n56430\n64578\n1984\n14114\n96343\n38561\n90424\n85809\n31678\n48285\n24033\n67705\n89604\n49304\n12618\n29805\n65389\n89368\n39887\n55712\n21688\n85533\n88587\n85049\n13030\n47785\n88629\n42758\n17744\n50159\n41804\n78820\n42365\n72516\n74534\n71512\n41372\n88322\n871\n96918\n54201\n15574\n73989\n14985\n63060",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "59\n30559\n5619\n81723\n42633\n59503\n33444\n19338\n75109\n95750\n30847\n79575\n71410\n75509\n39323\n38637\n71687\n29220\n6064\n18098\n80077\n27276\n37569\n98383\n6333\n5294\n85612\n14039\n35813\n36053\n49256\n57402\n56310\n18280\n68515\n20920\n88338\n70072\n66197\n50327\n56171\n53111\n18598\n50042\n29867\n38470\n31809\n54266\n90738\n44401\n34762\n14647\n83104\n32910\n994\n94093\n99565\n75625\n70387\n81058",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n94762\n44441\n54480\n21268\n30847\n12490\n27229\n20515\n72261\n11662\n836\n8506\n60755\n22318\n30690\n96474\n54012\n6213\n60543\n78708\n61382\n55997\n97739\n86009\n40010\n65430\n60255\n92825\n68599\n69248",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "108\n99958\n25821\n73316\n66392\n23963\n70428\n18688\n84188\n8612\n75061\n38118\n35355\n89431\n72732\n45533\n20200\n70032\n51831\n29951\n38908\n32114\n44023\n35170\n95352\n57408\n52296\n78342\n35914\n68249\n2064\n61034\n34091\n36725\n2365\n3459\n98126\n38832\n5802\n17743\n72662\n54668\n69230\n65477\n74741\n26572\n26980\n5118\n15404\n1405\n14507\n90300\n78762\n20841\n47771\n77573\n1113\n97759\n48022\n78957\n24872\n81560\n80157\n50828\n14306\n83531\n57117\n64946\n77137\n89918\n86387\n73033\n47333\n97905\n99606\n84877\n43346\n98543\n47186\n56841\n3231\n14189\n24163\n2046\n2916\n75476\n72825\n38425\n26459\n83169\n32967\n13106\n6715\n1014\n22387\n23643\n21738\n72171\n49409\n75595\n3186\n40385\n57863\n58161\n32339\n57808\n91910\n92742\n51863",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "109\n52280197\n32171082\n91711190\n12692851\n17431908\n91865568\n41844474\n60273117\n70683377\n64329218\n55634766\n29887435\n70734505\n29977075\n10774611\n71197087\n20205234\n6485892\n37625009\n66232530\n32923405\n90058603\n3022593\n57095870\n83257098\n97773707\n6888556\n10629526\n74407518\n84547251\n62780395\n9339616\n41546004\n6481178\n54687460\n61974882\n76714617\n32079266\n91934582\n8216100\n47295957\n19660628\n37089462\n22834957\n19441261\n83572698\n60110882\n71835328\n3880698\n67987208\n322236\n98726179\n27985870\n85791523\n75597442\n26393402\n6516040\n41591743\n21157313\n11495449\n37602181\n18061619\n43919335\n61109520\n11537506\n12799828\n38607219\n19987957\n63905451\n81107576\n17598246\n6896921\n32667491\n90317126\n29396169\n91507146\n48806086\n26791100\n18810994\n33995781\n14576641\n13551677\n4063866\n77316910\n63183364\n94790300\n37855007\n58985138\n90295052\n14347203\n55846421\n70948710\n56351678\n75597486\n14124689\n98053757\n62723061\n38794599\n25596666\n66156070\n47823303\n91435236\n25206266\n55060524\n60439757\n89018181\n70053421\n30141068\n75475507",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n93110163\n95712817\n18560431\n30426910\n5796176\n21591466\n95565440\n79897198\n21983342\n24597117\n95116706\n17477888\n72021072\n89014963\n78446703\n59392717\n94654370\n94716694\n17572858\n3115561\n13176228\n29289838\n49240756\n87909067\n4930680\n5997133\n89563744\n37087440\n10351530\n20553641\n38456439\n80042483\n67956152\n39782242\n75959108\n98277072\n19035326\n52592127\n69409325\n25647295\n86003259\n11298421\n57116186\n75210192\n48877616\n12630567\n59583771\n48443390\n47571697\n16233078\n2757113\n96280722\n6429378\n95006558\n98982379\n36355182\n25652223\n57633568\n71894951\n34502266\n44373536\n67723857\n84372037\n29738192\n66893341\n67570197\n96822754\n43602649\n56706641\n32713380\n39727326\n99632612\n92499713\n16648886\n57181083\n20942670\n93251636\n84721569\n6497083\n42542703\n45741988\n8115249\n83349621\n49619076\n84339740\n79285708\n14207203\n2644772\n61957473\n24919774\n53228645\n26583259\n10351123\n96057193\n97894198\n27022895\n82727738\n70111538\n8022190\n61814863\n7395763\n11917243\n60210895\n59235568\n58418378\n98357810\n51322769\n31115494\n33125383",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "2\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "109\n1\n25930962\n100000000\n65841067\n42213301\n1\n93633932\n100000000\n1\n100000000\n1\n1\n1\n100000000\n1\n100000000\n100000000\n100000000\n38726831\n1\n100000000\n100000000\n100000000\n100000000\n23090080\n1\n24670163\n100000000\n1\n90551729\n1\n93158823\n100000000\n100000000\n100000000\n100000000\n20046804\n1\n79704547\n1\n100000000\n1\n1\n100000000\n1\n100000000\n100000000\n100000000\n1\n7728926\n1\n1\n19983529\n65454614\n29299519\n29590660\n100000000\n59428465\n1\n1\n1\n100000000\n1\n100000000\n100000000\n100000000\n97556389\n1\n99397429\n34348401\n1\n100000000\n83089514\n1\n1\n1\n1\n100000000\n1\n100000000\n100000000\n30883198\n68421358\n100000000\n100000000\n38976675\n55029722\n39785278\n1\n16916177\n100000000\n43203954\n1\n1\n100000000\n1\n1\n37745635\n33801166\n35054710\n100000000\n100000000\n68144627\n48749473\n63481991\n100000000\n17654393\n65165956\n44878968",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 109)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}