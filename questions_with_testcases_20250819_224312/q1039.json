{
  "problem_code": "problems",
  "title": "Hexagram",
  "tags": [],
  "text": "A Hexagram is a 6-pointed star, sometimes called the Star of David. Given these numbers:3 17 15 18 11 22 12 23 21 7 9 13There are four unique ways of assigning the numbers to vertices of the hexagram such that all of the sets of four numbers along the lines have the same sum (57 in this case). All other ways may be obtained from these by rotation and/or reflection.Given 12 distinct numbers, in how many ways, disregarding rotations and reflections, can you assign the numbers to the vertices such that the sum of the numbers along each of 6 straight lines passing through 4 vertices is the same?InputThere will be several test cases in the input. Each test case will consist of twelve unique positive integers on a single line, with single spaces separating them. All of the numbers will be less than 1,000,000. The input will end with a line with twelve 0s.OutputFor each test case, output the number of ways the numbers can be assigned to vertices such that the sum along each line of the hexagram is the same. Put each answer on its own line. Output no extra spaces, and do not separate answers with blank lines.ExampleInput:3 17 15 18 11 22 12 23 21 7 9 131 2 3 4 5 6 7 8 9 10 11 130 0 0 0 0 0 0 0 0 0 0 0Output:40",
  "sample_input": "Input:3 17 15 18 11 22 12 23 21 7 9 131 2 3 4 5 6 7 8 9 10 11 130 0 0 0 0 0 0 0 0 0 0 0Output:40",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HEXGRAM",
  "scraped_at": "2025-08-17 00:33:38",
  "test_cases": [
    {
      "input": "3 17 15 18 11 22 12 23 21 7 9 131 2 3 4 5 6 7 8 9 10 11 130 0 0 0 0 0 0 0 0 0 0 0",
      "expected_output": "40",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 5 1 9 4 7 5 2 3 6 2 7 3 8 3 8 6 1 9 3 10 10 10 3 3 1 2 7 6 4 2 8 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 4 5 3 6 6 10 3 7 8 8 2 1 2 2 5 4 2 3 6 10 1 10 2 5 3 4 6 1 9 7 2 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 8 4 2 6 9 1 10 8 7 3 3 10 6 9 1 3 4 9 2 10 7 10 10 6 7 8 7 7 2 6 8 7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "26 39 56 81 56 41 20 32 59 48 13 85 46 67 67 12 27 88 97 18 63 72 42 76 17 4 93 98 12 9 33 35 92 51",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 92 36 82 79 41 52 21 31 83 18 47 12 37 87 30 64 48 78 5 98 77 23 18 59 25 99 65 3 12 46 58 57 29",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 71 97 1 79 75 76 93 91 96 56 90 12 39 11 77 82 1 76 78 66 20 60 15 13 99 10 78 34 29 56 40 98 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 94 15 13 11 1 83 57 79 28 65 76 28 3 72 77 73 15 31 95 20 82 51 13 40 90 92 70 72 16 89 40 29 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "63 10 93 74 82 65 46 54 98 71 79 79 32 76 95 27 62 70 57 46 94 95 85 77 99 80 37 42 92 86 96 9 5 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "235 272 331 53 190 411 289 267 257 440 299 340 57 139 73 118 149 85 220 307 444 112 305 473 328 356 102 268 443 358 217 359 499 202",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "253 92 77 134 104 358 366 166 153 289 301 250 398 306 453 154 444 396 141 418 227 299 320 437 331 381 65 360 351 228 473 57 258 414",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "66 422 427 167 350 489 278 387 108 384 338 119 173 354 415 95 228 473 426 427 191 182 435 334 71 370 454 241 282 388 467 60 329 350",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "227 469 457 470 127 262 174 297 142 495 86 464 455 368 221 207 193 326 359 210 91 180 397 184 205 217 459 315 186 251 74 390 399 55",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "416 259 472 124 258 437 82 88 468 187 111 179 483 156 99 215 279 468 179 500 66 242 397 221 107 281 372 278 388 62 239 238 418 300",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "315 375 249 457 99 385 203 431 227 123 316 155 124 116 473 458 105 419 72 325 77 225 326 500 251 215 457 429 488 300 383 316 272 259",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "71 160 466 196 90 133 214 198 63 180 369 59 496 484 394 239 111 394 420 347 73 470 271 480 390 399 57 83 140 327 295 353 102 272",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 1 2 2 999 2 2 1000 999 1000 999 999 1 1 999 1000 999 1 1000 1 2 999 2 2 1000 1000 1000 999 2 999 1 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000 1000 1000 1 999 2 1 999 999 2 2 1 2 1000 2 2 2 2 999 999 2 1 1 1 2 1000 1 1 1 1000 1 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}