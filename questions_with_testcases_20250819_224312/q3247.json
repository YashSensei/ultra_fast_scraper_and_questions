{
  "problem_code": "problems",
  "title": "Fences",
  "tags": [],
  "text": "One morning, fruit farmer Fred visits his apple trees and notices that one of them was cut overnight. This means a loss of 111e – the money he can make from the apples of a tree on average. In order to prevent further losses, he decides to erect a fence on his plantation. The fence consists of posts connected by wire.The fence posts can only be placed at a given set of pre-drilled holes. While Fred can get wire for free, he needs to buy the fence posts for 20e each. So it might not always be worth or even possible to fence in all of his trees.The plantation is square and 1 000 × 1 000 m2large. In bird’s eye view, the lower left corner has coordinates (0, 0), the upper right (1 000, 1 000). In this example there are four pre-drilled holes (circles) and three trees (squares). It is optimal to buy three fence posts and put them into selected holes (filled circles), to connect them by wire (lines), and to leave the upper left hole empty. The cost of erecting the fence is 3 × 20e + 1 × 111e = 171e since three posts were bought and one tree could not be fenced in (which means a loss of that tree’s harvest).Write a program that reads the positions of the pre-drilled holes and the trees on Fred’s plantation and outputs the minimum cost of erecting a fence or erecting no fence at all. You can neglect the actual shape of the trees and calculate with their positions only.InputThe first line contains two integers N and M (3 ≤ N ≤ 100, 1 ≤ M ≤ 100). N is the number of pre-drilled holes, and M is the number of trees. This line is followed by N lines that describe the positions of the holes, and then by M lines that describe the positions of the trees. All positions are given as pairs of integers x y on one line (0 ≤ x, y ≤ 1 000). You can expect that no two positions (of holes and trees) coincide and that no three positions are colinear.OutputOutput a single line containing one integer: Fred’s minimum cost. In case Fred buys P posts and fails to fence in T trees, his cost are 20 × P + 111 × T.ExampleInput:4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900Output:171This example corresponds to the picture above.(Official Test Data)",
  "sample_input": "Input:4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900Output:171",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CEOI08A",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900",
      "expected_output": "171",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10\n7 2\n6 1\n10 6\n8 8\n4 5\n4 3\n6 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 10\n1 7\n2 10\n8 6\n4 2\n7 1\n1 2\n5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 1\n9 2\n1 2\n5 5\n5 8\n6 9\n6 8\n5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "51 11\n54 96\n92 98\n43 90\n94 44\n17 11\n12 24\n82 37",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 42\n39 51\n4 56\n57 72\n12 62\n92 46\n26 52\n94 35",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "43 28\n56 93\n11 82\n41 76\n99 6\n91 33\n40 23\n75 70",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "33 91\n33 33\n38 75\n81 44\n81 18\n25 15\n92 9\n28 15",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "86 98\n1 35\n35 3\n8 65\n77 58\n14 60\n20 8\n57 35",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "11 35\n17 41\n39 33\n11 50\n23 5\n9 44\n15 34\n38 20",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "7 9\n25 28\n42 40\n35 49\n22 23\n22 14\n5 14\n38 22",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "34 16\n46 38\n5 29\n31 42\n6 26\n29 34\n21 10\n9 15",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "36 44\n44 19\n46 47\n28 46\n17 20\n22 27\n27 34\n12 35",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "24 26\n48 16\n27 49\n47 44\n8 46\n8 29\n40 40\n18 16",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42 9\n10 9\n30 20\n37 16\n43 20\n8 26\n19 6\n23 43",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "12 13\n40 25\n16 48\n34 50\n49 31\n29 42\n32 16\n6 8",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 100\n99 1\n99 99\n2 1\n1 1\n1 2\n99 100\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n2 2\n100 1\n99 99\n2 99\n100 100\n1 100\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}