{
  "problem_code": "problems",
  "title": "The Bottom of a Graph",
  "tags": [],
  "text": "We will use the following (standard) definitions from graph theory.\r\nLet $V$ be a nonempty and finite set, its elements being called vertices (or nodes).\r\nLet $E$ be a subset of the Cartesian product $V \\times V$, its elements being called edges.\r\nThen $G = (V, E)$ is called a directed graph.Let $n$ be a positive integer, and let $p = (e_1, \\ldots, e_n)$ be a sequence of length $n$ of edges $e_i \\in E$ such that $e_i = (v_i, v_{i+1})$ for a sequence of vertices ($v_1, \\ldots, v_{n+1}$).\r\nThen $p$ is called a path from vertex $v_1$ to vertex $v_{n+1}$ in $G$ and we say that $v_{n+1}$ is reachable from $v_1$, writing $(v_1 \\to v_{n+1})$.Here are some new definitions.\r\nA node $v$ in a graph $G = (V, E)$ is called a sink, if for every node $w$ in $G$ that is reachable from $v$, $v$ is also reachable from $w$.\r\nThe bottom of a graph is the subset of all nodes that are sinks, i.e., \r\n$\\mathrm{bottom}(G) = \\{v \\in V \\mid \\forall w \\in V : (v \\to w) \\Rightarrow (w \\to v) \\}$.\r\nYou have to calculate the bottom of certain graphs.Input SpecificationThe input contains several test cases, each of which corresponds to a directed graph $G$.\r\nEach test case starts with an integer number $v$, denoting the number of vertices of $G = (V, E)$, where the vertices will be identified by the integer numbers in the set $V = \\{1, \\ldots, v\\}$.\r\nYou may assume that $1 \\le v \\le 5000$.\r\nThat is followed by a non-negative integer $e$ and, thereafter, $e$ pairs of vertex identifiers $v_1, w_1, \\ldots, v_e, w_e$ with the meaning that $(v_i, w_i) \\in E$.\r\nThere are no edges other than specified by these pairs. The last test case is followed by a zero.Output SpecificationFor each test case output the bottom of the specified graph on a single line.\r\nTo this end, print the numbers of all nodes that are sinks in sorted order separated by a single space character.\r\nIf the bottom is empty, print an empty line.Sample Input3 3\r\n1 3 2 3 3 1\r\n2 1\r\n1 2\r\n0Sample Output1 3\r\n2",
  "sample_input": "3 3\r\n1 3 2 3 3 1\r\n2 1\r\n1 2\r\n0",
  "sample_output": "1 3\r\n2",
  "link": "https://www.spoj.com/problems/BOTTOM",
  "scraped_at": "2025-08-17 00:34:28",
  "test_cases": [
    {
      "input": "3 3\r\n1 3 2 3 3 1\r\n2 1\r\n1 2\r\n0",
      "expected_output": "1 3\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 9\n9 4 8 9 9 5\n1 4\n3 4\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n1 8 2 10 1 4\n6 6\n2 5\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5\n5 1 7 4 6 6\n2 7\n6 9\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "89 57\n65 80 67 13 18 7\n99 40\n10 18\n10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "5 75\n26 41 96 90 62 98\n17 71\n70 42\n54",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "51 19\n40 17 84 17 16 90\n78 88\n88 90\n68",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 21\n93 10 33 65 58 66\n65 89\n91 29\n8",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 51\n61 48 13 70 44 67\n31 70\n69 40\n27",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "216 445\n173 403 253 75 215 57\n341 232\n107 351\n259",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "483 477\n267 226 424 475 326 62\n79 385\n109 66\n113",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "407 478\n319 400 164 178 157 79\n248 274\n459 66\n236",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "385 153\n396 283 153 58 366 337\n166 490\n337 87\n279",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "272 363\n144 348 482 493 325 439\n323 428\n450 57\n191",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "485 313\n149 291 466 55 341 95\n126 55\n499 298\n85",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "300 414\n387 250 100 181 204 333\n419 407\n426 324\n407",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n999 1 1000 2 999 999\n999 2\n2 2\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n1 1 2 2 1 999\n999 999\n2 999\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}