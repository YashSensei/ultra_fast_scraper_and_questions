{
  "problem_code": "problems",
  "title": "Noel and His Reindeer",
  "tags": [],
  "text": "The big Noel is a guy full of habits. This year he put all of his reindeer in a row and decided to select the most of them, following a few rules.Reindeer can not be changed in order, i.e. a reindeer that is in positioniin the original row should appear before the reindeerjin the chosen list, wherei<j.Reindeer of two adjacent positions in the final sequence must differ exactly by 1 (right-left=1) unit in their heights.If that was not enough, Noel realized that this sequence had few reindeer. So she decided to include a new reindeer in the original row. Taking into account that this new reindeer can be inserted in any position and he will always choose a reindeer with the best possible height.After making the task a little difficult, Noel ended up getting confused and is asking for your help to find out how many reindeer can be selected taking into account the rules imposed.InputThe first line of the entry contains an integerN(1 ≤N≤ 105) corresponding to the number of reindeer. In the second line containsNintegersXi(1 ≤Xi≤ 106) which represents the height of theith reindeer.OutputPrint as many reindeer as Noel can select.ExampleInput:4\r\n1 1 2 2Output:3",
  "sample_input": "Input:4\r\n1 1 2 2Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DABRI001",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "4\r\n1 1 2 2",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n5\n1\n9\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n2\n9\n8\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n81607246\n34652826\n10272273\n61560547\n56522468\n76319698\n84832533\n62941289\n4583985\n81786780\n63212445",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n18779434\n61395534\n25666512\n14608717\n81130208\n56696142\n8036324\n48384066\n16164757\n68108990\n86493935\n38423145\n61244936\n69412858\n31086026\n62065775\n33429920",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n87872162\n45843916\n60424799\n21596163\n82467214\n64502346\n53217017\n79773608\n20663017\n63291191\n57003398\n90942378\n41248835\n38368980\n75280591",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n80502592\n78550324\n6805820\n37911943\n77926476\n92391425\n49730336\n87951698\n46208841\n29181507\n15399647\n78451309\n55311839\n58670870\n62051859\n27086221\n65468877\n21859323\n12644888",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n95982055\n90756826\n63761374\n67786552\n74585007\n53946455\n62383700\n81652535\n10417553\n5571324\n14940059\n17795247\n33841861\n79507135\n93770781\n98576882\n75307964",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "77\n72232\n93629\n60738\n49564\n39737\n19363\n46308\n75012\n42687\n55448\n85556\n58074\n48803\n2570\n98856\n16323\n99687\n3489\n58176\n87233\n81984\n15427\n48509\n48779\n32664\n76658\n74369\n34738\n89038\n7771\n44474\n22748\n46340\n80975\n65931\n21839\n43471\n12998\n16133\n22790\n24694\n64178\n50533\n97280\n90104\n81952\n27693\n53898\n47644\n99081\n82456\n5504\n80420\n88533\n65653\n64763\n72259\n8940\n99594\n30614\n24953\n17331\n92952\n60078\n20419\n89242\n87036\n53882\n9122\n62261\n83844\n98278\n49052\n91455\n78372\n39204\n99706",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n16348\n82994\n87228\n41818\n36301\n50473\n38438\n55869\n56166\n53376\n5047\n85753\n90651\n90781\n79942\n15788\n5819\n89802\n38476\n79567\n19438\n16354\n86073\n38625\n16440\n84913\n32968\n7548\n98159\n47164\n60491\n74119\n56600",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "85\n46676\n60544\n80244\n75691\n64759\n34382\n37936\n96051\n53624\n32303\n69974\n2690\n39820\n4166\n98274\n28596\n82025\n97687\n46368\n52227\n98721\n26414\n23519\n96264\n70725\n68558\n74980\n85436\n29217\n78049\n84505\n3235\n92252\n4917\n54739\n25331\n8303\n63217\n98761\n19475\n88375\n60871\n9798\n97541\n27905\n1578\n5719\n15898\n43164\n57808\n46934\n60408\n61066\n81617\n86441\n41287\n97024\n69804\n36488\n44269\n99780\n11739\n6437\n74801\n20105\n50274\n32586\n1161\n21956\n783\n90154\n71244\n10462\n35076\n94035\n44780\n39543\n90579\n44202\n82488\n61980\n60221\n50761\n85055\n86541",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "97\n50531\n73946\n69070\n46294\n4634\n69332\n76099\n96228\n63666\n65702\n1062\n5637\n20457\n93880\n57972\n75684\n28656\n27238\n90838\n56851\n69122\n27574\n51837\n86050\n52000\n55585\n30766\n9891\n46680\n64080\n39028\n93302\n73517\n8629\n93005\n83463\n83869\n45226\n99288\n60125\n15753\n78017\n9947\n36226\n85828\n45748\n7110\n31127\n57397\n25953\n2209\n51492\n25978\n28238\n91668\n99427\n39719\n11716\n41940\n47402\n20137\n93832\n4184\n15345\n17010\n76640\n62118\n30020\n27226\n25199\n8686\n60034\n85218\n54137\n69293\n902\n78708\n27117\n34883\n8551\n12306\n51215\n603\n92924\n24198\n85001\n23235\n66334\n97201\n8758\n39486\n91644\n38523\n15549\n84533\n90983\n1174",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "63\n14886\n57289\n9901\n62912\n78209\n52626\n13554\n87941\n36807\n8092\n23342\n66364\n54407\n18350\n45031\n85727\n21578\n46647\n32375\n81762\n28898\n27658\n52044\n97430\n17031\n91508\n94583\n94861\n64012\n91321\n46339\n34835\n20834\n43920\n29568\n94669\n86568\n39420\n11228\n23848\n35961\n55227\n61915\n14603\n45258\n6281\n67775\n61288\n95881\n54260\n78656\n6978\n29661\n46682\n56378\n31009\n29647\n75699\n47970\n11849\n82698\n97661\n54497",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "68\n13360\n3910\n64948\n23130\n87698\n52988\n14865\n69239\n39263\n74707\n31881\n91633\n85726\n65274\n22101\n74702\n15849\n98041\n30929\n2917\n3480\n68671\n76338\n69546\n2197\n31691\n11043\n27873\n98305\n11543\n89551\n77535\n20945\n56199\n73148\n93696\n73144\n34812\n3007\n75359\n44459\n80235\n50670\n55555\n24028\n92803\n71305\n87800\n25174\n51928\n86378\n18914\n91601\n28783\n11239\n70725\n86341\n47767\n32138\n39450\n93854\n91244\n21409\n41387\n63175\n47720\n71999\n97838",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n47125\n27303\n49774\n15679\n52591\n86086\n34198\n2487\n16581\n23584\n57512\n82715\n5365\n43365\n8090\n98360\n28403\n28232\n89049\n2116\n91058\n75573\n933\n17939\n1024\n98880\n73880\n86347\n42815\n4842\n11611\n47480\n26967\n59262\n74694\n15501\n23041\n59826\n32078\n28608\n80480",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n96284898\n35042616\n62810844\n27760690\n26698858\n9507786\n87780115\n10185215\n10169476\n81272664\n39094374\n86357828\n94494356\n94316483\n60524918\n92420424\n41875615\n96386745\n11992597\n79088599\n23151838\n70840419\n58642911\n87917091\n93042037\n50820341\n90422024\n29577508\n28484786\n22178402\n65760367\n15633893\n79109996\n43453802\n55387730\n5684994\n89007074\n24547493\n51900290\n16060743\n31862651\n74211432\n43278331\n95601569\n74633664\n16897184\n6101498\n1081128\n95747456\n28349545\n54699132\n81345904\n15722075\n42320424\n63982158\n47442133\n79903633\n94751182\n26493030\n90259234\n19639502\n4570794\n97089469\n47292954\n78772504\n81302102\n31855641\n68240799\n28639984\n88761166\n51451817\n48721924\n43795279\n27434912\n51560608\n66447829\n15301717\n4394815\n69400537\n25599147\n54695090\n5710836\n22951267\n13104880\n2310836\n935815\n51538827\n89541949\n10160737\n54397559\n45457463\n34526008\n15976268\n6140146\n68963075\n5417256\n66556558\n18103662\n37823671\n98893929\n68121037\n59965803\n90682205\n26884807\n41544814",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n32085768\n2935800\n98634970\n11808335\n79483022\n12512764\n17730433\n58264731\n48725556\n96216991\n15709877\n35292256\n23943195\n59800082\n99691986\n46009972\n30496642\n49310042\n53499125\n94656184\n56559358\n85795012\n4581297\n321737\n97554069\n56239972\n27156820\n18084619\n72604377\n58133535\n92860628\n43871606\n22857632\n83534213\n12564028\n91235671\n7122400\n10576030\n5327617\n52660715\n57012317\n75606978\n19513112\n58622395\n39017368\n77884488\n24286618\n34842467\n95793363\n99809636\n69228403\n78139327\n13796254\n32622630\n19221746\n8695576\n1123143\n84992118\n97293489\n48912293\n63446238\n40663113\n68697454\n79417602\n71372611\n96537792\n769087\n77208627\n4128623\n10927320\n73318243\n91691802\n49116940\n58987197\n69094724\n76755250\n74346831\n77528709\n24373443\n61983944\n4489028\n64169466\n60598728\n5759904\n24648869\n11308836\n29524509\n80664407\n6493705\n43345500\n847456\n47747218\n59754619\n63895084\n19130559\n77676030\n85653553\n39353101\n63180200\n13937012\n83354199\n20155996\n79362375\n28194742\n96639913",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n1\n45149437",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}