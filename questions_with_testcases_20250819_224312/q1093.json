{
  "problem_code": "problems",
  "title": "The Secret of an Aerolite",
  "tags": [],
  "text": "A huge aerolite had fallen in Antarctica!!!Many disasters happened and lots of people lost their lives, homes or even everything. Blue Mary, the well-known scientist, is to work out the secret of this aerolite for further study.Blue Mary has found out that their are some numbers on this aerolite, 5 per line:1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845With her genius, Blue Mary knows that the 5th number is the key to solve the problem, but in some lines the 5th numbers were destroyed and we cannot know what they are instantly.After some days, she finds out the way to calculate the 5th number finally, which is:A Regular Expression(RE) is a string which only contains characters '{', '[', '(', ')', ']', '}' and satisfies the rules below.An empty string is an RE.If there's no character '[', ']', '{', '}' in RE A, then (A) is an RE.If there's no character '{', '}' in RE A, then [A] is an RE.If A is an RE, {A} is an RE.If both A and B are REs, AB is an RE.For example \"()(())[]\", \"{()[()]}\", \"{{[[(())]]}}\"(all without quotes) are REs and \"()([])()\", \"[()\" are not REs.The deep of an RE A, D(A), is defined as below:If A is an empty string, D(A) = 0;If A can be written as BC, D(A) = max(D(B), D(C));If A can be written as (B) or [B] or {B}, D(A) = D(B)+1.Such as D(\"(){()}[]\") = 2.Suppose the first 4 numbers in current line are L1, L2, L3 and D, then the 5th number in current line is the number of REs modulo 11380. Each of the REs must have a depth of D and is made of L1 {}, L2 [] and L3 ().Now Mary needs your help to work out the 5th number.InputInput contains exactly 10 test cases. Each test case contains one line, which contains 4 numbers L1, L2, L3, D (0 ≤ L1, L2, L3 ≤ 10, 0 ≤ D ≤ 30), separated by single spaces.OutputTen lines, each contains a single integer denoted the 5th number.ExampleInput:1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]Output:6\r\n57\r\n8\r\n[and 7 test cases more]",
  "sample_input": "1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845",
  "sample_output": "Input:1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]Output:6\r\n57\r\n8\r\n[and 7 test cases more]",
  "link": "https://www.spoj.com/problems/AEROLITE",
  "scraped_at": "2025-08-17 00:33:29",
  "test_cases": [
    {
      "input": "1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]",
      "expected_output": "6\r\n57\r\n8\r\n[and 7 test cases more]",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "6 8 4 7 7\n9 1 1 5 2\n10 1 3 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 5 8 3\n8 1 10 10 3\n6 6 10 5 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 7 9 5\n10 6 8 2 10\n2 7 2 2 9",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "77 95 88 27 51\n94 15 55 24 46\n30 65 32 65 56",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 63 52 1 91\n73 24 23 88 45\n25 77 68 44 62",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 62 89 86 14\n25 97 89 3 37\n66 65 16 39 20",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "74 67 90 81 28\n81 48 17 20 42\n78 100 91 39 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 5 35 37 94\n98 11 55 85 31\n35 21 30 34 60",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "467 487 352 172 409\n234 100 415 198 308\n137 212 384 496 171",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "415 265 467 230 488\n476 59 413 68 439\n363 103 410 190 298",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "265 232 347 51 474\n345 456 179 134 234\n255 239 134 103 198",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "467 345 295 156 458\n493 341 488 113 213\n472 115 117 124 127",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "367 131 180 485 214\n498 318 154 311 72\n91 256 302 132 332",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "465 446 429 161 324\n115 177 349 443 360\n101 372 354 95 100",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "71 78 326 462 396\n223 355 273 428 258\n256 324 350 128 251",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 2 1 1\n1 1 2 1000 999\n2 2 2 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}