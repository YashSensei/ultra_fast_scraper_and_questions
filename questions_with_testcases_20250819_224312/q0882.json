{
  "problem_code": "problems",
  "title": "Sequence Function",
  "tags": [],
  "text": "We define a sequence {x}: {x} = {x0, x1... xn-1} where xiis an integer.We have a function f: {x} → {x’} where {x} is a finite sequence.After we have a finite sequence {x}, we can get f({x}) follow these rules :Remove all 0 in x : a 0 b 0 c d 0 e f 0 g → a b c d e f gTurn 1 into 100 and -1 into -100 : a 1 b 1 -1 c d e f g → a 100 b 100 -100 c d e f gAdd all 2k(k>1) at the end of the sequence : a 2 b 8 c d e 1024 f g → a 2 b 8 c d e 1024 f g 2 8 1024Add any positive odd prime x at the end of the sequence x-1 times: a 3 b c 7 d e f 5 g → a 3 b c 7 d e f 5 g 3 3 7 7 7 7 7 7 5 5 5 5For any positive composite number (not 2k, k>1), we just keep it once: a 6 b 6 c d 6 e 4 4 f g → a 6 b c d e 4 4 f gKeep any t (t < -1) in the sequence.For example:{x} = {-5 1 0 2 9 16 7 5 3 2 9 9 -1}f({x}) = {-5 100 2 9 16 7 5 3 2 -100 2 2 16 7 7 7 7 7 7 5 5 5 5 3 3}We define g({x}) is the sum of all the element in sequence x.We define h({x}) = g(f({x})) - g({x}).A consecutive sequence of x is a sequence {xi, xi+1, xi+2... xj} where 0 ≤ i ≤ j < n.Now I will give you a sequence {x}.I want to ask you the maximal h({y}) where {y} is a consecutive sequence of {x}.InputOne line consists one integer N, the length of {x}. (N ≤ 105, |xi| ≤ 10000)Next N lines, each line consists one integer.OutputThe maximal h({y}) where {y} is a consecutive sequence of {x}. (|h({y})| ≤ 263-1)ExampleInput:5\r\n1\r\n2\r\n6\r\n6\r\n3Output:101",
  "sample_input": "Input:5\r\n1\r\n2\r\n6\r\n6\r\n3Output:101",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SEQFUN",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "5\r\n1\r\n2\r\n6\r\n6\r\n3",
      "expected_output": "101",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n6\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n9\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n2\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n27586523\n94085518\n91281559\n44590678\n29905747\n24026064\n54760909\n5299557\n8106817\n27583655\n50562148",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n55130833\n82254610\n87807031\n54952115\n90939414\n46725969\n21551726\n99739146\n8465765\n42020744\n55376183\n55235679\n18993364\n58011572\n41675723\n33366922",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n84296973\n93265068\n35543453\n2776671\n12148984\n83101969\n96142968\n56265673\n25381784\n58850508\n86085722\n62718851",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n21314769\n85587410\n69284536\n18625800\n68526956\n41178597\n45161461",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n29834777\n55690163\n2368171\n36601468\n98852392\n98989286\n82490929\n23213771\n89403605\n18061845\n47454985\n70949198\n48320830\n93192617\n66090311\n67531838",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "96\n58888\n90516\n28173\n33242\n8567\n30679\n99521\n60609\n7161\n54617\n73507\n62458\n46356\n54317\n70242\n25021\n63175\n70385\n82001\n74223\n65537\n643\n59114\n34641\n1102\n34315\n46757\n44541\n2825\n21780\n24170\n52099\n39473\n47118\n43672\n76647\n75448\n97127\n16902\n65861\n3146\n71742\n89510\n72108\n25267\n93815\n9782\n6831\n55219\n69387\n40749\n31190\n71122\n94350\n80752\n99762\n18690\n6554\n64219\n35711\n47867\n73630\n33079\n57185\n13764\n877\n72269\n77527\n95545\n95972\n22804\n96796\n3013\n64564\n35665\n20367\n82286\n5250\n77580\n61816\n48838\n17749\n60592\n1650\n94977\n79066\n15823\n38897\n65004\n64826\n28582\n58044\n72000\n85868\n16788\n79102",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n38298\n36435\n31690\n96223\n7693\n82903\n59963\n49727\n51815\n23810\n22362\n51523\n69295\n60560\n98948\n65868\n74040\n88045\n92919\n92753\n12648\n19437\n14094\n96851\n10291\n46699\n8858\n46083\n12561\n17746\n47638\n2932\n46657\n38819",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "78\n94014\n65516\n4135\n24924\n3307\n26308\n81625\n73640\n70322\n19347\n6087\n69929\n56413\n34304\n32839\n87812\n80641\n64817\n85315\n84398\n4919\n87110\n785\n87941\n82767\n52914\n78730\n29363\n78584\n55954\n27901\n11064\n86630\n96960\n78472\n48527\n78625\n51786\n11420\n26464\n48121\n35498\n76107\n62350\n36446\n17308\n79144\n75518\n84839\n96199\n84080\n17154\n34315\n19729\n30875\n76843\n9720\n98741\n1012\n5817\n65805\n3036\n27378\n75068\n96822\n21544\n37479\n77290\n84829\n78576\n54961\n38417\n71516\n71777\n55111\n4511\n14967\n78945",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n49170\n1581\n17741\n28221\n47490\n39016\n59577\n27665\n39530\n64517\n82490\n5655\n84703\n1215\n57404\n6186\n94394\n47343\n37290\n47858\n19519\n32829\n83147\n77348\n25194\n69980\n85358\n47891\n63266\n894\n51606\n68552\n29284\n48797\n94008\n40396\n25303\n65403\n39639\n99956\n69765\n83638\n42210\n60944\n58088\n64535\n47504\n32562\n1059\n66556\n16137\n28562\n35822\n11706\n28765\n29124\n27645\n3216\n59403\n39338\n10335\n70608\n6114\n13517\n92389\n25454\n23751\n99268\n96480\n10705\n65987\n23841\n69358\n24737\n66799\n99603\n78528\n12664\n44914\n92218\n8285\n83049\n29949\n25687\n40811\n80738\n99575\n68954\n15324\n62926\n12682\n74682\n4196\n91775",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "86\n69281\n99816\n90526\n7604\n11954\n62572\n41886\n79163\n66521\n46948\n66645\n67925\n50713\n16356\n36854\n44912\n54907\n48354\n21503\n36235\n66946\n93565\n68753\n91130\n24033\n33256\n44699\n98038\n95367\n759\n46008\n76305\n60982\n90393\n62821\n6486\n59635\n61399\n20343\n65410\n68723\n9753\n15189\n66465\n12986\n81585\n74562\n74834\n57186\n69740\n32077\n27619\n51357\n60457\n98555\n34040\n82983\n82882\n86482\n47724\n98512\n80148\n4678\n19867\n85635\n95043\n62515\n11275\n28033\n24292\n36517\n17854\n28062\n45389\n63602\n54748\n28167\n16631\n17843\n99131\n48036\n7352\n72902\n66694\n14452\n25198",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "42\n82593\n42928\n79091\n62955\n33930\n72289\n62169\n42116\n59477\n9814\n70714\n84933\n94663\n46958\n97758\n43697\n16420\n10834\n82906\n30507\n15390\n21162\n9583\n72779\n38135\n77431\n35646\n13067\n32034\n72368\n85741\n75373\n83147\n74941\n66629\n42011\n39856\n51807\n30865\n3816\n39461\n31573",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n99891\n82913\n30828\n22329\n74880\n70525\n23490\n33911\n88007\n11719\n19259\n56772\n64551\n74673\n34983\n15903\n99087\n62229\n7430\n15274\n26379\n86425\n50623\n1339\n34613",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n71692996\n80466712\n32100534\n44734133\n11064154\n47240018\n83262862\n81257413\n10034178\n85151446\n46615749\n74248770\n51263324\n17600722\n57896753\n71412434\n41693969\n11598763\n84233841\n51801479\n10291203\n9419278\n46590942\n34124135\n80886408\n49431079\n26069997\n20166917\n73654904\n23962376\n44687981\n63745738\n6718359\n49865273\n23426922\n59111615\n17458621\n85731805\n6677082\n61178916\n50247105\n83986326\n35215138\n14563371\n175734\n77634085\n39817730\n87872910\n27666870\n61397657\n96915055\n64696334\n95456977\n8880711\n25789887\n41590291\n57357914\n91355079\n77960709\n51499926\n8689527\n61657550\n88965539\n17883248\n89851993\n96506508\n49206382\n10194741\n15803509\n69962118\n55604434\n43295278\n92615740\n74445606\n2744888\n90336195\n29593422\n76054618\n86541507\n94181090\n30483426\n54608633\n59344722\n21478909\n7162411\n89671793\n37073046\n98766398\n64827832\n3009995\n42065350\n93497915\n75003036\n3587079\n14915101\n4629003\n30519444\n91627289\n10845870\n69279669\n53398631\n61833845\n8341553\n37215179\n25255213",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n47005564\n45370651\n84066484\n20843188\n47482949\n55734977\n6047902\n52616959\n42785039\n25715204\n87181078\n59686208\n63342019\n13378759\n81773681\n96985321\n44002734\n81602523\n13265812\n82933082\n55676502\n47937592\n9654725\n88201306\n33059583\n67939358\n80113631\n94647437\n7605113\n41648104\n75991812\n77993098\n87239049\n50695218\n56335030\n83383445\n20823046\n23933868\n12591889\n82416435\n17115470\n13726517\n24409770\n81373078\n67514497\n28984397\n66757060\n92909672\n46024676\n54190272\n79665450\n47804141\n62752429\n9064021\n70422813\n98120681\n12651016\n78512660\n21067184\n26894089\n72187292\n39510060\n80775226\n72705921\n53746234\n74312639\n56874077\n86661941\n26089513\n12611156\n73640259\n51747662\n20054144\n42468389\n53895714\n25722534\n76184330\n27312350\n32106369\n13652310\n87421318\n37044069\n84793841\n5441650\n2942650\n81386824\n66208606\n88824058\n69516131\n91608151\n29385559\n10644471\n9378359\n44234091\n20235475\n86651106\n48427947\n21658992\n87592482\n51683962\n65495031\n6037772\n68033673\n6327963\n23033006",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n1\n71107361",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "105\n1\n1\n1\n35771618\n69078845\n100000000\n100000000\n45081571\n30798562\n1\n81697877\n100000000\n8396973\n31120716\n100000000\n66513526\n100000000\n100000000\n100000000\n100000000\n1\n100000000\n97044481\n19475958\n1\n100000000\n1\n100000000\n1\n1\n61972780\n24984295\n1\n46475605\n1\n1\n1\n1\n100000000\n100000000\n1\n1\n100000000\n1\n1\n36578196\n20049439\n100000000\n1\n23365118\n1\n1\n1\n98340666\n1\n93738634\n100000000\n38936460\n23378777\n100000000\n86793181\n1\n19381114\n51636615\n1\n100000000\n1\n100000000\n1\n100000000\n1276294\n1\n51109446\n1\n50803391\n76372300\n100000000\n36721601\n100000000\n40030669\n34759811\n1\n13065077\n1\n1\n100000000\n7899563\n1\n23607304\n100000000\n1\n1\n74596361\n100000000\n100000000\n1\n1\n1\n1\n38225492\n1\n100000000\n1\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 105)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}