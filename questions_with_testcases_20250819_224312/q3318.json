{
  "problem_code": "problems",
  "title": "Castle Wall",
  "tags": [],
  "text": "A new lord assumed the position by the death of the previous lord in a Far Eastern province.The new greedy lord hates concave polygons, because he believes they need much wasted area to be drawn on\r\npaper. He always wants to modify them to convex ones.His castle is currently surrounded by a wall forming a concave polygon, when seen from the above. Of course\r\nhe hates it. He believes more area could be obtained with a wall of a convex polygon. Thus he has ordered his\r\nvassals to have new walls built so they form a convex polygon.Unfortunately, there is a limit in the budget. So it might be infeasible to have the new walls built completely. The\r\nvassals has found out that only up tormeters of walls in total can be built within the budget. In addition, the new\r\nwalls must be built in such a way they connect the polygonal vertices of the present castle wall. It is impossible\r\nto build both of intersecting walls.After long persuasion of the vassals, the new lord has reluctantly accepted that the new walls might not be built\r\ncompletely. However, the vassals still want to maximize the area enclosed with the present and new castle walls,\r\nso they can satisfy the lord as much as possible.Your job is to write a program to calculate, for a given integerr, the maximum possible area of the castle with\r\nthe new walls.InputThe input file contains several test cases.Each case begins with a line containing two positive integersnandr.nis the number of vertices of the concave\r\npolygon that describes the present castle wall, satisfying 5 ≤n≤ 64.ris the maximum total length of new castle\r\nwalls feasible within the budget, satisfying 0 ≤r≤ 400.The subsequentnlines are thex- andy-coordinates of thenvertices. The line segments (xi,yi)–(xi+1,yi+1)\r\n(1 ≤i≤n- 1) and (xn,yn)–(x1,y1) form the present castle wall of the concave polygon. Those coordinates are\r\ngiven in meters and in the counterclockwise order of the vertices.All coordinate values are integers between 0 and 100, inclusive. You can assume that the concave polygon is\r\nsimple, that is, the present castle wall never crosses or touches itself.The last test case is followed by a line containing two zeros.OutputFor each test case in the input, print the case number (beginning with 1) and the maximum possible area enclosed\r\nwith the present and new castle walls. The area should be printed with exactly one fractional digit.ExampleInput:5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0Output:Case 1: 16.0\r\nCase 2: 3375.0",
  "sample_input": "Input:5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0Output:Case 1: 16.0\r\nCase 2: 3375.0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WALL",
  "scraped_at": "2025-08-17 00:34:22",
  "test_cases": [
    {
      "input": "5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0",
      "expected_output": "Case 1: 16.0\r\nCase 2: 3375.0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3\n8 4\n5 2\n9 8\n7 10\n7 9\n3 5\n3 5\n8 4\n7 9\n1 7\n7 5\n2 6\n10 7\n3 6\n4 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 8\n7 4\n4 1\n4 8\n9 5\n8 7\n7 10\n1 4\n1 5\n1 1\n2 7\n5 10\n7 3\n7 10\n9 7\n2 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 8\n7 8\n9 7\n1 4\n8 5\n1 3\n2 2\n2 4\n2 8\n1 3\n10 6\n9 5\n9 9\n9 7\n4 7\n10 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 36\n2 36\n36 13\n16 44\n20 15\n61 31\n57 54\n40 3\n44 31\n19 50\n37 47\n46 22\n33 38\n45 8\n41 46\n41 64",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 4\n48 23\n32 30\n46 25\n21 28\n21 22\n11 40\n22 54\n54 11\n35 8\n62 5\n19 33\n6 57\n29 17\n22 22\n45 21",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 24\n4 50\n20 41\n29 55\n57 34\n46 5\n4 32\n60 30\n35 11\n10 58\n4 34\n33 55\n9 33\n9 35\n51 36\n32 44",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "49 2\n45 55\n7 10\n27 10\n15 64\n9 22\n31 60\n8 24\n6 20\n19 9\n13 53\n52 25\n25 6\n56 10\n32 39\n16 64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "33 56\n39 58\n50 23\n41 46\n23 22\n53 17\n4 17\n19 63\n48 27\n8 30\n60 38\n42 6\n48 5\n58 37\n61 4\n60 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "31 13\n28 9\n11 10\n7 27\n9 4\n32 6\n3 11\n32 28\n13 23\n24 25\n20 15\n32 28\n12 16\n19 27\n16 4\n10 5",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "26 31\n22 17\n24 25\n4 23\n13 14\n23 20\n19 3\n7 21\n17 7\n14 32\n17 7\n26 17\n15 14\n29 23\n22 6\n30 30",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8 16\n18 8\n16 21\n32 3\n12 29\n3 4\n28 16\n29 3\n3 32\n19 25\n9 26\n23 12\n16 26\n17 10\n27 31\n3 23",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17 11\n22 15\n4 13\n19 20\n30 7\n10 4\n31 6\n9 18\n7 16\n17 24\n10 14\n24 31\n21 5\n23 30\n22 4\n30 21",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "9 24\n22 10\n27 12\n29 14\n21 22\n3 5\n13 14\n16 29\n31 11\n5 20\n6 25\n24 21\n31 29\n20 10\n28 4\n13 23",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28 31\n14 12\n15 6\n31 10\n25 12\n29 19\n14 5\n28 7\n16 24\n10 29\n28 11\n30 9\n18 26\n27 10\n5 30\n17 14",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "21 29\n31 17\n15 5\n18 25\n15 31\n15 3\n21 5\n12 11\n31 11\n14 24\n28 17\n13 18\n19 5\n15 28\n16 29\n16 5",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "63 63\n64 64\n64 2\n2 2\n2 64\n2 63\n2 2\n64 1\n63 2\n1 64\n63 64\n63 2\n64 63\n64 64\n64 1\n1 63",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n2 64\n63 63\n2 64\n2 1\n63 1\n64 64\n1 64\n2 1\n1 63\n1 63\n1 1\n64 1\n64 2\n1 64\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}