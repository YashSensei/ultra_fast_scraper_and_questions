{
  "problem_code": "problems",
  "title": "Number Game",
  "tags": [],
  "text": "Arya and Bran are playing a game. Initially, two positive integersAandBare written on a blackboard. The players take turns, starting with Arya. On his or her turn, a player can replaceAwithA-k*Bfor any positive integerk, or replaceBwithB-k*Afor any positive integerk. The first person to make one of the numbers drop to zero or below loses.For example, if the numbers are initially (12, 51), the game might progress as follows:Arya replaces 51 with 51 - 3*12 = 15, leaving (12, 15) on the blackboard.Bran replaces 15 with 15 - 1*12 = 3, leaving (12, 3) on the blackboard.Arya replaces 12 with 12 - 3*3 = 3, leaving (3, 3) on the blackboard.Bran replaces one 3 with 3 - 1*3 = 0, and loses.We will say (A,B) is awinningposition if Arya can always win a game that starts with (A,B) on the blackboard, no matter what Bran does.Given four integersA1,A2,B1,B2, count how many winning positions (A,B) there are withA1≤A≤A2andB1≤B≤B2.InputThe first line of the input gives the number of test cases,T.Ttest cases follow, one per line. Each line contains the four integersA1,A2,B1,B2, separated by spaces.1 ≤T≤ 250.1 ≤A1≤A2≤ 1,000,000.1 ≤B1≤B2≤ 1,000,000.A2-A1≤ 999,999.B2-B1≤ 999,999.OutputFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1), and y is the number of winning positions (A,B) withA1≤A≤A2andB1≤B≤B2.ExampleInput:35 5 8 811 11 2 21 6 1 6Output:Case #1: 0Case #2: 1Case #3: 20",
  "sample_input": "Input:35 5 8 811 11 2 21 6 1 6Output:Case #1: 0Case #2: 1Case #3: 20",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NUMGAME",
  "scraped_at": "2025-08-17 00:33:18",
  "test_cases": [
    {
      "input": "35 5 8 811 11 2 21 6 1 6",
      "expected_output": "Case #1: 0Case #2: 1Case #3: 20",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10 8 8 1 7 9 1 5 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9 6 3 9 9 3 9 10 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9 4 2 9 8 5 1 4 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 88 35 16 86 24 78 4 47 65",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "71 82 42 66 84 5 94 56 39 13",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 84 18 89 59 86 82 57 82 84",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 92 18 56 8 86 45 58 98 31",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 88 9 54 79 74 98 64 18 54",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "60 121 348 103 112 222 324 320 499 332",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "470 404 376 360 446 400 156 224 128 333",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "415 118 113 295 410 87 123 449 383 126",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "275 496 254 286 267 170 238 478 52 341",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "145 446 389 376 261 276 253 170 184 377",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "205 397 206 400 413 82 197 82 143 365",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "86 213 429 169 158 213 430 457 180 165",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 2 1 1000 2 1 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 1000 2 999 1000 1000 1 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}