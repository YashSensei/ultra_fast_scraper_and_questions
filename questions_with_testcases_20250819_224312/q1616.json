{
  "problem_code": "problems",
  "title": "Wine trading in Gergovia",
  "tags": [],
  "text": "Gergovia consists of one street, and every inhabitant of the city is a wine salesman. Everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each inhabitant gets what he wants.There is one problem, however: Transporting wine from one house to another results in work. Since all wines are equally good, the inhabitants of Gergovia don't care which persons they are doing trade with, they are only interested in selling or buying a specific amount of wine.In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity we will assume that the houses are built along a straight line with equal distance between adjacent houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work.InputThe input consists of several test cases.Each test case starts with the number of inhabitants N (2 ≤ N ≤ 100000).The following line contains n integers ai(-1000 ≤ ai≤ 1000).If ai≥ 0, it means that the inhabitant living in the ithhouse wants to buy aibottles of wine. If ai< 0, he wants to sell -aibottles of wine.You may assume that the numbers aisum up to 0.The last test case is followed by a line containing 0.OutputFor each test case print the minimum amount of work units needed so that every inhabitant has his demand fulfilled.ExampleInput:55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000Output:99000",
  "sample_input": "Input:55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000Output:99000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GERGOVIA",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000",
      "expected_output": "99000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 5 6 8 2 1 3 5 10 10 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 10 6 10 3 2 10 1 5 8 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 10 5 3 4 7 5 9 9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 90 69 33 19 9 90 6 74 25 28",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "28 55 63 65 10 28 39 38 51 77 44",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 85 6 47 12 6 68 46 1 22 19",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "28 84 8 72 16 41 75 15 20 76 57",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 56 79 67 91 28 10 27 15 25 72",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "33032 22828 26574 37295 45272 35835 43682 22047 42300 42714 46059",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "42442 11770 17534 46163 36635 36176 47501 35553 43830 49671 37951",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "46415 35599 21305 29179 31022 7988 15010 7090 15552 13520 20876",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "32913 42887 48055 13964 10703 8859 5275 30022 33031 10418 22648",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "31007 14540 42226 20680 26214 27959 43662 34721 45477 19287 29668",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28867 16161 42112 12568 17750 37121 6402 11220 25753 10678 47856",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "39901 23695 46146 24239 5286 14940 40297 10075 14894 43981 46038",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2 2 99999 100000 1 99999 1 100000 99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 99999 100000 100000 99999 100000 99999 99999 100000 100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}