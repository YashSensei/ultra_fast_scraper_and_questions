{
  "problem_code": "problems",
  "title": "Super Dice Game",
  "tags": [],
  "text": "Alice and Bob are playing a game.  The game consists of a circular track of M (2 ≤ M ≤ 1,000,000,000) cells labeled 0 through M - 1.  Initially both players start at cell 0.  The game progresses by having each player take turns rolling one of N (1 ≤ N ≤ 10,000) 'super-dice' labeled 0 through N - 1.  The actual mechanics of the 'super-dice' is not very well understood; however, it is known that they will only ever turn up a number between 0 and 1,000,000,000 inclusive after a roll.  After rolling the super-dice the number of spaces a player moves is determined by the product of a contiguous subsequence of the values shown on the dice (There are special rules for determining the range that vary each move that will not be  discussed).To make matters more complicated, after any turn if Alice and Bob land on the same cell the value shown on all dice is multiplied by the label of the cell they are on.  Note in this way it is possible for some dice to show numbers greater than 1,000,000,000.  This multiplier does not apply to future rolls.After playing this game for a while, Alice and Bob have grown frustrated because the calculations became too difficult.  Given the series of R (1 ≤ R ≤ 100,000) dice rolls and ranges, help Alice and Bob determine their position after each move.  Assume that all dice start out showing 1.InputThe first line contains R, N, and M each separated by a space.  R lines follow.  Each line will contain d v a b separated by a space.  d indicates the label of the dice rolled.  v indicates the value shown on the dice.  a and b indicate the range of dice used to determine the move distance.OutputR lines containing the position of the player that just rolled after their roll.ExampleInput:6 4 20\r\n1 5 1 1\r\n3 10 2 3\r\n2 3 0 3\r\n1 2 0 3\r\n1 5 1 2\r\n0 7 0 1Output:5\r\n10\r\n15\r\n10\r\n10\r\n0Output ExplanationFor your assistance, here is the state of the dice after each turn:[1, 5, 1, 1][1, 5, 1, 10][1, 5, 3, 10][1, 2, 3, 10][10, 50, 30, 100][7, 50, 30, 100]Warning: large Input/Output data, be careful with certain languages",
  "sample_input": "Input:6 4 20\r\n1 5 1 1\r\n3 10 2 3\r\n2 3 0 3\r\n1 2 0 3\r\n1 5 1 2\r\n0 7 0 1Output:5\r\n10\r\n15\r\n10\r\n10\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SDGAME",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "6 4 20\r\n1 5 1 1\r\n3 10 2 3\r\n2 3 0 3\r\n1 2 0 3\r\n1 5 1 2\r\n0 7 0 1",
      "expected_output": "5\r\n10\r\n15\r\n10\r\n10\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8 8\n10 7 1 1\n3 8 1 1\n8 3 8 4\n10 8 3 5\n8 1 5 2\n6 1 5 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 9\n8 4 10 9\n6 3 3 3\n3 2 3 6\n4 5 10 5\n6 6 1 4\n10 5 7 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 4\n2 4 4 4\n3 7 2 1\n2 3 9 10\n4 7 9 8\n6 5 8 2\n2 7 3 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 3\n4 7 2 3\n5 8 4 10\n8 7 9 5\n2 4 6 2\n10 9 3 8\n4 2 9 1",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 8 3\n8 4 4 4\n7 1 1 3\n1 8 6 1\n2 8 4 9\n7 1 5 9\n1 4 7 1",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 4 10\n1 4 2 3\n10 6 9 2\n2 5 5 2\n7 10 3 3\n7 10 8 7\n8 2 1 9",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 4 8\n10 5 10 7\n8 10 10 8\n1 2 8 8\n3 4 6 6\n1 7 9 8\n6 6 7 6",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "4 6 7\n10 5 4 8\n3 8 8 4\n2 3 1 7\n6 10 2 3\n9 5 8 9\n5 4 7 6",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 2 1\n3 3 2 1\n2 2 4 3\n3 5 3 1\n4 3 4 5\n2 2 1 3\n3 4 3 2",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4 3 5\n1 1 1 3\n3 5 5 1\n2 2 1 2\n3 4 5 5\n3 4 4 2\n2 3 3 4",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4 5 3\n2 5 2 2\n3 5 3 4\n1 4 2 4\n2 1 4 3\n3 2 4 2\n3 3 5 4",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 4\n2 3 3 2\n1 2 4 3\n2 4 1 2\n5 3 3 5\n2 1 1 1\n5 1 4 2",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5 3 2\n2 2 3 3\n3 3 2 5\n1 4 5 4\n4 1 2 1\n3 1 2 2\n4 3 5 1",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "4 4 1\n5 5 1 1\n5 1 2 4\n3 3 4 3\n2 4 3 5\n3 1 1 2\n2 3 1 1",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 2\n4 5 3 2\n4 1 5 4\n2 1 4 5\n3 4 3 3\n1 3 5 1\n2 2 4 5",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 9 10\n10 10 2 1\n9 9 1 1\n1 2 2 9\n10 1 1 10\n1 1 1 10\n9 2 2 9",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 1\n9 9 2 9\n9 1 2 1\n9 2 1 1\n1 10 2 1\n1 1 1 9\n10 1 2 10",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}