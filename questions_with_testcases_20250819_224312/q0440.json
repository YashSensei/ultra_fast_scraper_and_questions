{
  "problem_code": "problems",
  "title": "A Simple Sieve",
  "tags": [],
  "text": "You are given a commutative associative unitary function \\(x(i,j)\\) defined over all \\(0\\le i,j,x(i,j)\\lt 4\\). In other words, this function satisfies, for all \\(0\\le i, j, k \\lt 4\\):\\(x(i,j)=x(j,i)\\)\\(x(x(i, j), k)=x(i, x(j, k))\\)\\(x(0, i)=i\\)Define a function \\(f(n)\\) for all positive integers \\(n\\) such that:\\(f(p^k)=(pk)\\bmod 4\\), that is, the remainder when \\(pk\\) is divided by 4If \\(\\gcd(a, b)=1\\), then \\(f(ab)=x(f(a),f (b))\\)Define:$$g(n,k,r)=\\sum_{i=1}^ni^k[f(i)=r]$$where \\([f(i)=r]\\) is theIverson bracket.Given the function \\(x\\) and two integers \\(m\\), \\(k\\), for all integers \\(1\\le i\\le\\lfloor\\sqrt n\\rfloor\\), calculate \\(g(\\lfloor\\frac ni\\rfloor, k, 0...3)\\) modulo \\(998\\ 244\\ 353\\).InputThe first line contains two integers \\(m\\) and \\(k\\). (\\(1\\le m\\le 10^{10}\\), \\(0 \\le k \\le 1000\\))The following 4 lines contains 4 integers each. The i-th row j-th integer contains \\(x(i-1,j-1)\\).OutputOutput \\(\\lfloor\\sqrt n\\rfloor\\) lines containing 4 integers each. The i-th row j-th integer contains \\(g(\\lfloor\\frac ni\\rfloor, k, j-1)\\) modulo \\(998244353\\).ExampleInput:10 0\r\n0 1 2 3\r\n1 2 3 0\r\n2 3 0 1\r\n3 0 1 2Output:2 2 3 3\r\n2 1 1 1\r\n1 0 1 1Input:100 100\r\n0 1 2 3\r\n1 0 3 2\r\n2 3 0 1\r\n3 2 1 0Output:457599333 476580683 403589597 762762658\r\n361221912 612412943 661908092 483645330\r\n242804711 682542199 535167020 465246643\r\n913280460 516845083 917292729 390364642\r\n39265044 919790719 181416471 421087779\r\n530140662 31014314 181416471 226287885\r\n982924733 31014314 851084249 226287885\r\n982924733 938693280 851084249 226287885\r\n982924733 938693280 851084249 435036575\r\n982924733 938693280 851084249 138976409",
  "sample_input": "Input:10 0\r\n0 1 2 3\r\n1 2 3 0\r\n2 3 0 1\r\n3 0 1 2Output:2 2 3 3\r\n2 1 1 1\r\n1 0 1 1",
  "sample_output": "Input:100 100\r\n0 1 2 3\r\n1 0 3 2\r\n2 3 0 1\r\n3 2 1 0Output:457599333 476580683 403589597 762762658\r\n361221912 612412943 661908092 483645330\r\n242804711 682542199 535167020 465246643\r\n913280460 516845083 917292729 390364642\r\n39265044 919790719 181416471 421087779\r\n530140662 31014314 181416471 226287885\r\n982924733 31014314 851084249 226287885\r\n982924733 938693280 851084249 226287885\r\n982924733 938693280 851084249 435036575\r\n982924733 938693280 851084249 138976409",
  "link": "https://www.spoj.com/problems/ASSIEVE",
  "scraped_at": "2025-08-17 00:33:41",
  "test_cases": [
    {
      "input": "10 0\r\n0 1 2 3\r\n1 2 3 0\r\n2 3 0 1\r\n3 0 1 2",
      "expected_output": "2 2 3 3\r\n2 1 1 1\r\n1 0 1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "100 100\r\n0 1 2 3\r\n1 0 3 2\r\n2 3 0 1\r\n3 2 1 0",
      "expected_output": "457599333 476580683 403589597 762762658\r\n361221912 612412943 661908092 483645330\r\n242804711 682542199 535167020 465246643\r\n913280460 516845083 917292729 390364642\r\n39265044 919790719 181416471 421087779\r\n530140662 31014314 181416471 226287885\r\n982924733 31014314 851084249 226287885\r\n982924733 938693280 851084249 226287885\r\n982924733 938693280 851084249 435036575\r\n982924733 938693280 851084249 138976409",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "9 4\n6 1 3 1\n8 1 8 5\n7 9 1 1\n1 7 3 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n8 7 10 9\n3 8 9 2\n1 2 8 6\n2 7 5 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\n7 5 9 3\n8 5 5 1\n2 4 1 2\n7 6 6 5",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "92 18\n60 63 91 16\n27 94 43 67\n28 45 92 55\n7 55 99 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "71 24\n71 68 73 89\n4 95 100 71\n21 45 91 80\n32 66 33 82",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 42\n37 93 53 24\n56 98 38 84\n67 33 47 63\n57 48 44 18",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 37\n44 88 87 86\n57 86 28 48\n89 97 11 49\n22 16 38 4",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "17 72\n62 59 5 71\n10 27 3 66\n96 53 67 28\n86 98 51 14",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "299 473\n244 103 418 173\n200 172 73 190\n194 98 322 136\n214 322 353 191",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "306 96\n428 214 405 67\n246 437 146 481\n257 313 82 442\n157 316 219 50",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "297 236\n86 359 482 365\n111 96 141 152\n130 266 67 194\n116 224 172 202",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "210 430\n67 183 487 238\n350 77 143 340\n223 475 331 198\n85 244 227 327",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "65 479\n236 109 340 474\n303 247 431 344\n426 134 171 150\n124 390 445 307",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "433 268\n159 208 276 497\n135 384 293 108\n465 478 442 412\n138 123 196 111",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "370 112\n142 260 364 85\n458 81 292 235\n262 157 313 357\n223 400 145 417",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n1000 1000 999 999\n2 999 2 999\n1 2 2 2\n1 2 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}