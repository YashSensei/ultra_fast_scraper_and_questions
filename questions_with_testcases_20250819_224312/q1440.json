{
  "problem_code": "problems",
  "title": "NERED",
  "tags": [],
  "text": "EnglishVietnameseIn the nearby kindergarten they recently made up an attractive game  of strength and agility that kids love. The surface for the game is a large flat area divided into N×N squares. The children lay large spongy cues onto the surface. The sides of the cubes are the same length as the sides of the squares. When a cube is put on  the surface, its sides are aligned with some square. A cube may be put  on another cube too. Kids enjoy building forts and hiding them, but they  always leave behind a huge mess. Because of this, prior to closing the  kindergarten, the teachers rearrange all the cubes so that they occupy  a rectangle on the surface, with exactly one cube on every square in the rectangle. In one moving, a cube is taken off the top of a square to the top of any other square.Write a program that, given the state of the surface, calculates the  smallest number of moves needed to arrange all cubes into a rectangle.InputThe first line contains the integers N and M (1 ≤ N ≤ 100, 1 ≤ M ≤ N2),  the dimensions of the surface and the number of cubes currently on the  surface.Each of the following M lines contains two integers R and C (1 ≤ R, C ≤ N), the coordinates of the square that contains the cube.OutputOutput the smallest number of moves. A solution will always exist.SampleInput:4 3\r\n2 2\r\n4 4\r\n1 1Output:2Input:5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3Output:3In the second example, a cube is moved from (2, 3) to (3, 3), from (4, 2)\r\nto (2, 5) and from (4, 4) to (3, 5).",
  "sample_input": "Input:4 3\r\n2 2\r\n4 4\r\n1 1Output:2",
  "sample_output": "Input:5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3Output:3",
  "link": "https://www.spoj.com/problems/MNERED",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "4 3\r\n2 2\r\n4 4\r\n1 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3",
      "expected_output": "3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "4 10\n10 7\n5 3\n1 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 10\n5 6\n10 4\n6 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n5 1\n7 6\n2 6",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "14 50\n97 47\n63 67\n7 64",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 94\n69 91\n66 58\n17 63",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 77\n47 83\n3 78\n46 66",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 66\n50 81\n11 21\n48 89",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "57 91\n69 21\n43 49\n74 90",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "44 12\n12 32\n32 23\n27 32",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "23 5\n31 28\n47 35\n18 14",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "13 26\n27 29\n50 14\n25 18",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "38 6\n25 36\n32 43\n10 42",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "22 30\n23 20\n8 18\n24 36",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "40 44\n19 20\n25 49\n47 50",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "43 45\n12 50\n12 48\n17 35",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 100\n1 2\n1 1\n99 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}