{
  "problem_code": "problems",
  "title": "Conga line",
  "tags": [],
  "text": "Conga is a traditional dance in which people make a line, grab each other by the waist and start dancing around.You are at a party and your favourite Conga song starts playing. Since you want to make the most of it, you'd like to organize everybody and start dancing as soon as possible.The dance floor is modelled as an infinite straight line with people standing on positive integer coordinates. There is at most one person at each point. Every second, a person can move one unit to the left or one unit to the right, as long as no one else is standing there. However, since it's a crazy party and people are already drunk, at most one person can move every second (in other words, no two people can move simultaneously).Nobody will start dancing until everybody is organized in a perfect line. You want to find the minimum amount of time it takes to start dancing, i.e. the time it takes to make people stand in such a way that there are no empty spaces between them.For example, imagine there are 4 people at the party, standing at positions 2, 4, 5 and 8:In this case, it takes at least 3 seconds to form the Conga line:On second 1, the person standing at position 2 moves to position 3.On second 2, the person standing at position 8 moves to position 7.On second 3, the person standing at position 7 moves to position 6.After three seconds, people are standing on positions 3, 4, 5, and 6 and they can start dancing!InputThe input contains several test cases.The first line of each case contains a single integer numbern, the number of people in the party (1 ≤n≤ 106). The next line containsndistinct integers xiseparated by single spaces sorted in ascending order — the coordinates where people are initially standing (1 ≤xi≤ 109).The last line of the input contains a single0and should not be processed.OutputFor each test case, output one integer number on a single line — the minimum time it takes to start dancing.ExampleInput:42 4 5 8110420 24 25 2621 221 10000000000Output:3030999999998",
  "sample_input": "Input:42 4 5 8110420 24 25 2621 221 10000000000Output:3030999999998",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CONGA",
  "scraped_at": "2025-08-17 00:33:45",
  "test_cases": [
    {
      "input": "42 4 5 8110420 24 25 2621 221 10000000000",
      "expected_output": "3030999999998",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 1 5 5 10 1 1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 9 5 4 8 3 2 5 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 6 7 9 8 9 10 8 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 17 84 22 71 31 89 85 13",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 61 17 46 70 99 25 11 85",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 53 21 49 57 31 59 77 31",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "22 17 63 43 16 34 89 88 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 11 90 25 50 78 90 98 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 7 9 24 49 13 32 8 52",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "36 41 11 34 9 19 39 7 20",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "35 5 30 19 46 17 11 36 39",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "47 51 37 34 37 8 52 45 53",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "14 50 44 18 23 16 8 30 6",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "25 37 26 35 20 13 14 30 19",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "16 43 33 21 16 51 12 34 11",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106 106 106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106 106 106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 1 106 105 2 2 2 105 105",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 105 105 105 105 106 106 106 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}