{
  "problem_code": "problems",
  "title": "COSTLY CHESS",
  "tags": [],
  "text": "In the country of Rome, Chess is a royal game. For every move the players had to give some bucks to the Emperor Jurg. The LGMs or Little Green Men, are very good player of chess. But as chess is an expensive game, that's why it is royal, they asked you to help them find the minimum bucks which they had to pay for moving their knight from one position to another. Any number of steps can be used to reach the destination.ConstraintsThe chess has a dimension of 8×8, and the index of left bottom cell (0, 0).Knight move only in a standard way, i.e. 2 row and 1 column or 1 row and 2 column.If in a step knight move from (a, b) to (c, d), then LGM had to pay a×c + b×d bucks to Emperor Jurg.0 ≤ a, b, c, d ≤ 7InputThere are 100-150 test cases. Each test case is composed of four space separated integers. The first two numbers, a, b, are the starting position of the knight and the next two, c, d, are the destination of the knight. Read up to End Of File.OutputFor each test case, print the minimum amount of bucks they had to pay in separate line. If it's impossible to reach the destination then print -1.ExampleInput:2 5 5 2\r\n4 7 3 2\r\n1 2 3 4Output:42\r\n78\r\n18Explanation for Test Case 1For moving knight from (2, 5) to (5, 2) in minimum cost, one of the path is (2, 5) → (3, 3) → (5, 2)Bucks paid:(2, 5) → (3, 3) = (2 × 3 + 5 × 3) = 21(3, 3) → (5, 2) = (3 × 5 + 3 × 2) = 21Total cost = 42To infinity and beyond...",
  "sample_input": "Input:2 5 5 2\r\n4 7 3 2\r\n1 2 3 4Output:42\r\n78\r\n18",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CCHESS",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "2 5 5 2\r\n4 7 3 2\r\n1 2 3 4",
      "expected_output": "42\r\n78\r\n18",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 1 9 4\n1 4 3 10\n1 2 7 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 3 2 1\n4 3 6 10\n5 5 5 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 6 3\n2 10 8 6\n4 9 9 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 91 60 78\n81 70 44 63\n56 75 10 58",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "43 76 26 7\n86 7 51 80\n100 87 89 52",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 37 22 90\n6 76 7 80\n83 57 70 48",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "70 69 33 77\n99 93 99 95\n75 48 22 27",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 26 43 83\n27 44 79 74\n24 72 89 89",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "467 306 286 110\n451 106 293 361\n220 465 268 70",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "435 353 316 204\n148 360 392 149\n343 101 137 448",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "342 260 442 76\n195 302 91 107\n147 336 479 135",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "328 128 468 373\n432 415 58 70\n328 96 103 377",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "428 418 484 293\n472 226 393 119\n180 384 422 436",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "453 266 373 114\n430 190 239 395\n400 143 432 185",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "473 231 429 151\n126 312 366 214\n308 398 403 148",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 1 1\n1000 1000 1000 999\n1 1 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 999 2\n2 1 1000 1000\n1000 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}