{
  "problem_code": "problems",
  "title": "Seating Arrangement",
  "tags": [],
  "text": "In DA-IICT, the end sems are just around the corner and it seems like all the students are working very hard. But it's not just students, the professors are hard at work too. In particular, the Dean (Students) is very busy working out the exam seating arrangements for all the students.Now normally, as we all know, the benches in each of the exam halls can seat exactly 2 students. Also, it is ensured that every bench contains exactly 2 students from different batches (so that there is no copying). But in spite of this, the Dean has noticed that even if the 2 students are from totally different batches, if they are friends, then they tend to help each other (or at least try to, depending on how much they both know). The Dean wants to prevent this, so the seating arrangement is such that no two friends sit side by side during any exam, so that the students prepare well for the exams. But he is falling short of ideas to work this out.Please help him out. You are given a list of pairs of IDs (A, B), such that the student with ID A is friends with the student with ID B. For every query (C, D) please print out whether or not these 2 students are friends (meaning they cannot be seated with each other).Note: In this case, please assume friendship to be bothsymmetricandtransitive. That is, if A is friends with B, B is also friends with A. Moreover, if A and B are friends and B and C are friends, this implies that A and C are also friends.InputThe input comprises of several lines. The first line contains 2 integers - n and m, where n is the number of students who will be writing the exam (2 ≤ n ≤ 100000) and m is the number of pairs of student IDs in the input. (0 ≤ m ≤ 100000. Also m ≤ n*(n+1) / 2).This is followed by m lines of the form : A BThis indicates that the student with ID A is friends with the student with ID B. (0 ≤ A,B < n).This is followed by a line containing a single integer q (1 ≤ q ≤ 100000) indicating the number of queries you have to answer. q lines of queries follow. Each query consists of a single line containing 2 space separated integers C and D. (0 ≤ C,D < n). These are the 2 student IDs for which you have to state whether or not they are friends.Note: All student IDs are unique, and range from 0 to n-1.OutputFor each query, output a single line with \"YES\" if the 2 students are friends, and \"NO\" otherwise. Please note that the quotes are just for clarity, and that the output is case-sensitive.ExampleInput:7 41 22 31 34 541 34 65 15 4Output:YESNONOYES",
  "sample_input": "Input:7 41 22 31 34 541 34 65 15 4Output:YESNONOYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/QN02",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "7 41 22 31 34 541 34 65 15 4",
      "expected_output": "YESNONOYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10 2 6 10 1 5 8 10 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 1 7 10 9 9 1 2 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 6 8 8 7 3 4 2 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 6 30 68 80 88 21 51 12 58",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 27 18 27 89 59 60 95 13 1",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 16 95 6 49 72 66 7 6 73",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "28 89 2 92 41 58 32 12 50 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 3 32 68 18 51 63 64 94 95",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "29344 12921 33732 14638 36850 14380 42583 29991 38009 48693",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "42950 49696 32565 11351 46481 25974 49627 20019 31491 39370",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "28275 10227 15264 5882 34349 38047 45293 36000 22623 28990",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "47600 39490 24168 22802 33738 25086 6097 14554 36544 46295",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "21138 25232 14596 46056 27704 12027 11982 19725 28366 9614",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "29665 9129 32682 16419 42018 11553 45970 27554 7356 39041",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "33505 24815 9987 14894 16053 26646 6588 26229 38491 27290",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 99999 1 1 2 2 99999 99999 2 99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 2 100000 1 100000 1 100000 100000 99999 99999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}