{
  "problem_code": "problems",
  "title": "Manipulate Dwarfs",
  "tags": [],
  "text": "In a small village beyond seven hills and seven seas, Snow White lives together with N dwarves who spend all their time eating and playing League of Legends. Snow White wants to put an end to this, so she has organized gym classes for them.At the beginning of each class, the dwarves must stand in line, ordered by their height. For the purposes of this task, assume that the dwarves have heights 1, 2, ... N (each exactly once) and initially all are standing in sorted order with height from 1 to N. Now Snow White play on them by issuing commands of the form:1 X Y -- dwarves with height X and Y in the line must switch places. She also checks their ordering by issuing queries of the form:2 A B -- do dwarves with heights A, A+1, ... B (not necessarily in that order) occupy a contiguous subsequence of the current line? Help the doofus dwarves follow Snow White's instructions and respond to her queries.InputThe first line of input contains the two positive integers N and M, the number of dwarves and the number of Snow White's requests, respectively (2 ≤ N ≤ 200 000, 2 ≤ M ≤ 200 000). Each of the following M lines contains a single Snow White's request, of the form \"1 X Y\" (1 ≤ X, Y ≤ N, X ≠ Y) or “2 A B” (1 ≤ A ≤ B ≤ N), as described in the problem statement.OutputThe output must contain one line for each request of type 2, containing the reply to the query, either “YES” or “NO”.ExampleInput:4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3Output:YES\r\nYES\r\nNO",
  "sample_input": "Input:4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3Output:YES\r\nYES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DWARFLOG",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3",
      "expected_output": "YES\r\nYES\r\nNO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 5\n7 3 2\n4 1 7\n9 7 6\n5 7 6\n1 8 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n7 5 2\n8 7 8\n4 6 10\n5 3 9\n2 2 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n6 1 9\n6 10 10\n9 9 5\n3 4 5\n7 2 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "90 23\n98 86 57\n53 73 25\n6 70 35\n64 14 99\n52 83 19",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 90\n60 29 97\n86 100 22\n40 83 20\n74 82 65\n41 100 82",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 3\n8 10 87\n71 56 60\n62 86 53\n61 25 96\n24 51 95",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 72\n95 63 89\n75 92 78\n82 39 71\n5 17 92\n35 28 84",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 80\n51 56 42\n70 1 94\n63 94 91\n12 98 48\n72 69 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "13160 12797\n38579 93144 34221\n38872 69271 64697\n48235 62627 48460\n19164 85211 50305\n15495 72274 67002",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "83884 42342\n33037 25855 34350\n15405 71539 35490\n85661 18833 31099\n85745 48386 69602\n14243 79070 11474",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "95580 33934\n66618 75044 22842\n95668 75988 91370\n16178 79734 29654\n78669 92290 39936\n77387 79151 13026",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "60047 80631\n55216 31929 46492\n53776 59532 38925\n30804 63189 95693\n96988 79291 16360\n32481 38965 16356",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "32273 83863\n41149 44679 74826\n33547 93367 33836\n75246 67278 38691\n80550 84318 85652\n73068 38270 89027",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "32022 53393\n89231 49662 65896\n21274 19647 26128\n38402 39565 26840\n67505 35520 78489\n92990 82636 87512",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26769 51130\n46004 81002 86092\n76413 50088 70687\n58608 37960 76342\n99113 57890 14966\n20898 57575 35825",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000\n1 1 1\n200000 1 200000\n1 200000 2\n1 2 199999\n2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n199999 200000 2\n200000 1 200000\n199999 200000 200000\n200000 2 1\n2 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}