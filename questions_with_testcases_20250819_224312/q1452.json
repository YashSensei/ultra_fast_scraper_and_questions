{
  "problem_code": "problems",
  "title": "Tele Broadcast",
  "tags": [],
  "text": "EnglishVietnameseA TV-network plans to broadcast an important football match. Their\nnetwork of transmitters and users can be represented as a  tree. The\nroot of the tree is a transmitter that emits the football match, the \nleaves of the tree are the potential users and other vertices \nin the tree are relays (transmitters). \nThe price of transmission of a signal from one transmitter \nto another or to the user is given. A price of \nthe entire \nbroadcast is the sum of prices of all individual signal transmissions. \nEvery user is ready to pay a certain amount of money to watch the \nmatch and the TV-network then decides whether or not to provide the\nuser with the signal. \nWrite a program that will find the maximal number of users able \nto watch the match so that the TV-network’s doesn’t lose money from \nbroadcasting the match.InputThe first line of the input file contains two integers N and M, 2 ≤ N ≤ 3000,\n1 ≤ M ≤ N-1, the number of vertices in the tree and the number of \npotential users. \nThe root of the tree is marked with the number 1, while other transmitters\nare numbered 2 to N-M and potential users are numbered N-M+1 to N. \nThe following N-M lines contain data about the transmitters \nin the following form: \nK A1 C1 A2 C2 ... AK CK \nMeans that a transmitter transmits the signal to K transmitters or \nusers, every one of them described by the pair of numbers A and C, the \ntransmitter or user’s number and the cost of transmitting the signal to \nthem. \nThe last line contains the data about users, containing M integers \nrepresenting respectively the price every one of them is willing to \npay to watch the match.OutputThe first and the only line of the output file should contain the \nmaximal number of users described in the above text.SampleInput:5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2Output:2Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2Output:3Input:9 6\n3 2 2 3 2 9 3\n2 4 2 5 2\n3 6 2 7 2 8 2\n4 3 3 3 1 1Output:5",
  "sample_input": "Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2Output:2",
  "sample_output": "Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2Output:3",
  "link": "https://www.spoj.com/problems/MTELE",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2",
      "expected_output": "3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 10\n8 10 10 3 1\n2 5 1 8 8\n1 4 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 2\n3 2 6 3 10\n6 7 5 1 1\n4 6 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n1 8 8 9 9\n9 6 7 8 7\n7 7 2",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "79 15\n79 70 85 12 38\n70 83 95 92 65\n58 82 23",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 95\n68 42 13 82 76\n23 93 17 67 5\n4 5 2",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "46 47\n44 94 100 84 65\n90 55 90 64 32\n83 22 61",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "84 82\n12 52 13 71 22\n4 37 22 92 71\n6 85 35",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32 61\n58 40 47 7 96\n70 20 48 52 65\n3 92 16",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "200 994\n179 299 407 1439 534\n864 951 264 603 665\n775 450 224",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1329 465\n1114 1403 786 564 440\n1464 1365 518 1166 814\n945 1443 830",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "950 613\n1299 1413 183 737 530\n663 1148 336 1435 733\n216 566 359",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "814 1207\n1034 971 671 1091 450\n739 202 1404 294 946\n845 488 483",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "985 343\n781 235 1191 1480 205\n457 301 1014 298 267\n446 1120 1065",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1395 1416\n554 1381 1387 407 314\n802 1079 301 817 259\n798 1230 1059",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "226 946\n563 1154 474 618 870\n1136 215 389 1257 1480\n755 1059 531",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "3000 2999\n2 1 1 2 1\n2 3000 1 1 1\n2999 2999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}