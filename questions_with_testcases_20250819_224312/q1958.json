{
  "problem_code": "problems",
  "title": "Dark roads",
  "tags": [],
  "text": "Economic times these days are tough, even in Byteland. To reduce the operating costs, the government of Byteland has decided to optimize the road lighting. Till now every road was illuminated all night long, which costs 1 Bytelandian Dollar per meter and day. To save money, they decided to no longer illuminate every road, but to switch off the road lighting of some streets. To make sure that the inhabitants of Byteland still feel safe, they want to optimize the lighting in such a way, that after darkening some streets at night, there will still be at least one illuminated path from every junction in Byteland to every other junction.What is the maximum daily amount of money the government of Byteland can save, without making their inhabitants feel unsafe?InputThe input file contains several test cases. Each test case starts with two numbersmandn, the number of junctions in Byteland and the number of roads in Byteland, respectively. Input is terminated bym = n = 0. Otherwise,1 ≤ m ≤ 200000andm-1 ≤ n ≤ 200000. Then followninteger triplesx, y, zspecifying that there will be a bidirectional road betweenxandywith lengthzmeters (0 ≤ x, y < mandx ≠ y). The graph specified by each test case is connected. The total length of all roads in each test case is less than 231.OutputFor each test case print one line containing the maximum daily amount the government can save.SampleInput:7 11\r\n0 1 7\r\n0 3 5\r\n1 2 8\r\n1 3 9\r\n1 4 7\r\n2 4 5\r\n3 4 15\r\n3 5 6\r\n4 5 8\r\n4 6 9\r\n5 6 11\r\n0 0Output:51",
  "sample_input": "Input:7 11\r\n0 1 7\r\n0 3 5\r\n1 2 8\r\n1 3 9\r\n1 4 7\r\n2 4 5\r\n3 4 15\r\n3 5 6\r\n4 5 8\r\n4 6 9\r\n5 6 11\r\n0 0Output:51",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ULM09",
  "scraped_at": "2025-08-17 00:33:57",
  "test_cases": [
    {
      "input": "7 11\r\n0 1 7\r\n0 3 5\r\n1 2 8\r\n1 3 9\r\n1 4 7\r\n2 4 5\r\n3 4 15\r\n3 5 6\r\n4 5 8\r\n4 6 9\r\n5 6 11\r\n0 0",
      "expected_output": "51",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10\n5 8 7\n10 6 10\n3 6 6\n8 2 4\n2 3 3\n1 10 2\n6 10 6\n9 5 1\n10 10 8\n5 8 6\n6 9 1\n10 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 5\n6 1 3\n6 3 4\n4 5 5\n2 9 3\n7 3 1\n10 8 5\n3 8 3\n4 9 2\n3 4 6\n9 3 6\n3 2 10\n3 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n4 2 5\n2 6 7\n3 10 2\n8 5 8\n7 10 10\n3 2 4\n1 6 9\n3 6 10\n4 7 2\n4 7 7\n6 8 6\n3 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 36\n45 39 16\n39 5 60\n64 83 32\n7 31 92\n15 62 97\n6 87 36\n49 84 2\n41 59 95\n83 22 2\n3 74 41\n44 73 22\n37 47",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "55 44\n93 9 31\n70 73 84\n58 50 14\n33 22 48\n40 46 6\n74 21 69\n59 81 77\n11 11 30\n43 12 17\n38 11 96\n89 23 22\n99 33",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "95 90\n57 45 68\n58 17 86\n27 85 45\n5 55 3\n6 12 28\n61 47 28\n47 24 97\n21 62 19\n23 100 43\n23 37 33\n11 48 57\n92 69",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "51 82\n36 41 7\n86 59 27\n73 71 32\n4 57 10\n12 2 1\n95 30 59\n71 76 52\n38 47 78\n10 5 56\n39 84 28\n77 53 70\n72 78",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 6\n66 17 59\n71 58 18\n40 90 95\n55 78 75\n5 61 59\n76 89 91\n84 77 91\n73 74 17\n62 77 62\n62 67 19\n41 18 90\n18 72",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "60440 51190\n62124 64985 16324\n64045 32919 45632\n76065 33588 29573\n60355 63787 14793\n49056 79499 38410\n97041 51793 69263\n41536 31858 38765\n60168 73333 75233\n28885 19613 59078\n86493 19073 67139\n52483 61848 41896\n74000 48667",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "27999 78683\n50945 91626 79357\n64429 60508 70959\n29045 62456 25446\n88649 78605 47333\n44434 30051 27860\n25845 90553 26698\n54839 49560 89397\n82613 39681 54205\n98841 98610 38015\n14867 16563 10210\n94552 92838 76582\n90052 81637",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "94100 53979\n41317 78895 55403\n98174 34344 45578\n13177 17350 13441\n52463 63870 96469\n98238 50877 14747\n90308 40625 43069\n30109 29684 61427\n21595 45257 89784\n40571 73341 81075\n24493 38977 17542\n70875 62121 76300\n27816 89630",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "34496 61197\n34083 58931 31285\n43371 13504 68213\n60419 90406 76504\n31736 19415 32934\n46099 58292 35321\n26970 41122 77822\n41126 80309 68707\n43024 82268 53433\n13441 38266 10407\n80210 33888 79177\n93965 25048 14723\n80816 35875",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "87926 62574\n22092 27035 65894\n25823 37458 55783\n58046 64332 15642\n20788 73677 17607\n17718 77311 66912\n57984 65721 33381\n78723 32829 77926\n16705 81097 33775\n74668 65355 49149\n58672 56765 56257\n58209 46497 99738\n49558 91317",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42708 51264\n26007 17542 88835\n22290 64517 18519\n68483 22301 96197\n60983 13369 61334\n70935 43157 87302\n76735 54265 96441\n33302 26015 35894\n55977 39033 75740\n18130 89676 51441\n59011 99510 60542\n87000 25732 99088\n72080 62345",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "40744 83864\n79523 12593 59642\n76318 84982 69967\n52014 94076 28012\n41090 89219 17341\n40955 65218 51925\n73248 71265 38513\n43272 75156 21233\n66163 92504 47827\n26498 38973 49136\n73290 29403 26853\n10159 74321 86885\n73682 63293",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 200000\n2 2 200000\n1 200000 2\n200000 2 200000\n200000 200000 2\n200000 1 199999\n200000 200000 199999\n1 2 1\n200000 200000 1\n2 2 1\n200000 199999 200000\n1 199999 2\n199999 200000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "199999 2\n200000 199999 1\n200000 2 1\n199999 2 1\n199999 199999 1\n2 199999 199999\n2 199999 1\n1 200000 200000\n2 2 2\n2 1 200000\n200000 200000 1\n199999 200000 1\n200000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}