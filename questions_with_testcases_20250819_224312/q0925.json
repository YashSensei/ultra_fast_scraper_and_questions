{
  "problem_code": "problems",
  "title": "Police Business",
  "tags": [],
  "text": "Cops are one of the most fascinating types of people. In the movies they are usually shown as fat and lazy, but they are so much more! Our today's specimen, officer Acab is, for example, very much into philosophy. All the criminals are afraid of Acab so when he appears in a city no criminals can come there. He's often engaged in car chases, so he usually asks himself the following questions: If I know a criminal has to travel from city a to city b, how many cities are there (other than a and b) such that there are no other cops there, and if I come to that city the criminal won't be able to accomplish his trip? If I sort those cities by distance from a, which one will be the k-th in the sorted list? How many roads are there such that there are no other cops on them, and if I'm present on that road the criminal won't be able to travel from a to b? Which is the k-th such road if I sort the available roads by their distance from a?Given a list of bidirectional roads that connect the cities write a program that will answer Acab's questions. In the beginning we know that there are no other cops in any of the cities. There will be one or more paths between each pair of cities.Sometimes Acab's cop-friends contact him to tell him they have entered a city or road. There is never more than one cop present in a city or on a road. Thus, when a road or city is reported for the second time, we assume the cop has left there. This only means that after each even report of the same city or a road there are no cops there, and for odd reports there is a cop there.Note:we define the distance of a road from a city as the minimum of the distances of its endpoints from that city. Even though Acab is a good cop, he doesn't have any special powers such as multilocation, so he can only be present in one city at a time. If you, for some reason, find two cities or roads equidistant from the city a, output the one with the smaller index.Also, the other cops aren't as good as Acab, so they only block Acab from visiting a city, and not the criminals.InputThe first line of input contains two integers N and M (1 ≤ N ≤ M ≤ 100000).The next M lines contain a pair of integers a and b (1 ≤ a, b ≤ N).All the cities are numbered from 1 to N.The next line contains a single integer Q (1 ≤ Q ≤ 200000).The next Q lines contain queries. There are six possible types of queries:1 n   -  a cop has contacted Acab to let him know he's in city n2 e   -  a cop has contacted Acab to let him know he's on the road e3 a b  -  tell Acab how many cities he can block the criminal with4 a b  -  tell Acab how many roads he can block the criminal with5 a b k  -  tell Acab which is the k-th city he can block the criminal with6 a b k  -  tell Acab which is the k-th road he can block the criminal withOutputFor each query of type 3, 4, 5 or 6 output a single line containing the answer. If for a query of type 5 or 6 k is greater than the actual number of possible cities, output -1. Also, in queries 2 and 6 the number of the road is assumed to be its index from the input.ExampleInput:9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2Output:5421122Explanation:In the first query, there are 5 blockable cities: 4, 2, 1, 3, 8.In the second query there are 4 blockable roads: 6, 1, 2, 10.In the third query the second city is 2 (4, 2, 1, 3, 8).In the fourth query the second road is 1 (6, 1, 2, 10).In the fifth query we've been reported there's a cop in city 2.In the sixth query the second blockable city is 1 (city 2 already contains a cop).In the seventh query we've been reported there's a cop on road 1.In the eighth query the second blockable road is 2 (road 1 already contains a cop).In the ninth query we've been reported the cop from city 2 has left.In the tenth query the second city is 2 again.",
  "sample_input": "Input:9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2Output:5421122",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ACAB",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2",
      "expected_output": "5421122",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 8 1 7 5 3 10 2 2 2 5 7 5 4 9 7 3 8 5 7 9 1 6 4 10 6 9 7 3 7 5 1 5 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 10 5 9 1 2 1 9 2 3 1 1 6 1 10 2 9 1 5 6 3 5 10 6 1 2 5 5 6 6 4 1 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 6 2 5 8 4 9 6 5 6 4 2 1 2 7 10 2 10 4 9 10 7 10 5 3 4 5 8 3 2 8 8 1 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "19 96 88 53 77 39 40 6 87 97 79 57 85 75 16 72 1 64 70 38 24 96 24 63 12 49 85 36 65 23 97 43 78 91",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "41 37 59 7 71 57 62 18 37 45 4 61 71 3 51 55 10 27 54 39 19 98 48 46 17 52 77 88 87 96 3 19 85 83",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 7 85 60 58 86 10 17 28 64 3 99 30 91 40 75 21 61 79 74 45 66 83 71 97 59 33 91 64 45 87 49 18 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "3 85 30 43 22 41 7 12 21 89 87 33 99 22 67 65 91 26 21 21 31 12 70 4 95 50 26 28 86 66 76 28 97 76",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "80 3 97 74 71 3 53 92 78 98 81 8 75 70 39 48 31 57 20 67 87 69 35 33 71 29 67 92 31 50 93 88 39 25",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "471 122 318 362 90 114 80 113 442 219 172 153 327 285 317 192 446 465 444 337 162 326 366 97 348 167 347 221 480 263 341 390 336 133",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "391 163 222 200 171 446 415 60 291 54 258 457 473 474 266 497 57 326 373 206 194 345 262 54 115 407 356 150 481 113 191 358 311 79",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "203 461 125 281 178 134 244 487 90 307 474 62 392 179 251 260 474 198 372 436 101 460 451 106 385 493 130 108 234 97 179 282 451 496",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "290 477 93 424 371 94 487 156 430 392 486 395 342 498 479 301 203 92 99 208 344 181 417 253 316 176 486 353 306 458 417 427 439 298",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "388 413 377 439 318 369 331 206 94 173 298 373 356 461 432 324 386 236 476 200 354 306 493 218 228 297 465 231 224 459 94 296 151 289",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "407 385 313 416 164 327 235 367 469 196 310 463 328 117 118 159 104 178 418 307 259 403 209 362 342 62 225 152 157 78 427 94 386 478",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "327 334 348 296 131 103 279 334 343 360 95 213 162 298 336 347 117 385 319 175 412 165 188 341 102 323 140 304 171 442 64 172 376 417",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 2 999 1 999 999 1 1000 1000 1000 2 999 999 999 1000 999 1000 2 999 1 999 1000 1 1 999 1 2 2 2 2 1000 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 1000 1 999 1 999 1 2 1000 1 1000 2 1000 2 1 999 1000 1000 1 1000 1000 1 2 2 2 999 1 1000 2 999 1000 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}