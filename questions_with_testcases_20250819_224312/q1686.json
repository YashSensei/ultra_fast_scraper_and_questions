{
  "problem_code": "problems",
  "title": "The Triangle Game",
  "tags": [],
  "text": "In the triangle game you start off with six triangles numbered on each edge, as in the example above. You can slide and rotate the triangles so they form a hexagon, but the hexagon is only legal if edges common to two triangles have the same number on them. You may not flip any triangle over. Two legal hexagons formed from the six triangles are illustrated below.The score for a legal hexagon is the sum of the numbers on the outside six edges.Your problem is to find the highest score that can be achieved with any six particular triangles.The input file will contain one or more data sets. Each data set is a sequence of six lines with three integers from 1 to 100 separated by blanks on each line. Each line contains the numbers on the triangles in clockwise order. Data sets are separated by a line containing only an asterisk. The last data set is followed by a line containing only a dollar sign.For each input data set, the output is a line containing only the word \"none\" if there are no legal hexagons or the highest score if there is a legal hexagon.ExampleInput:1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$Output:152\r\n21\r\nnone",
  "sample_input": "Input:1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$Output:152\r\n21\r\nnone",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MCU20A",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$",
      "expected_output": "152\r\n21\r\nnone",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1 8\n4 10 10\n8 5 3\n3 10 9\n4 3 8\n2 4 8\nyn\n7 8 5\n8 6 10\n8 7 9\n9 6 7\n1 5 7\n10 2 9\nur\n6 5 6\n4 9 5\n6 8 6\n1 5 1\n9 1 2\n3 9 7\nlc",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 6\n3 3 10\n10 7 8\n1 8 5\n1 9 10\n8 5 7\nyv\n1 6 6\n1 10 10\n3 1 10\n10 5 5\n1 9 1\n8 9 10\nq\n8 2 1\n4 8 5\n8 9 6\n10 7 1\n3 7 2\n7 8 3\ncf",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 9\n9 10 7\n7 7 2\n7 2 8\n3 8 8\n1 7 4\nfw\n9 4 5\n6 9 5\n3 5 1\n2 4 8\n1 6 6\n5 2 8\nz\n1 5 8\n1 6 10\n10 6 5\n1 2 10\n2 2 7\n5 1 2\np",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "87 85 81\n12 46 71\n9 80 6\n21 90 68\n37 19 24\n69 27 36\nv\n29 17 53\n4 6 67\n16 29 31\n37 31 5\n95 13 30\n8 49 98\nen\n13 84 55\n72 95 76\n58 4 53\n47 4 5\n35 96 48\n6 39 6\nq",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "32 14 33\n93 5 69\n31 95 6\n41 90 35\n94 70 24\n41 10 7\ni\n10 42 13\n66 2 96\n87 77 2\n21 56 68\n27 3 69\n86 96 79\nu\n74 76 36\n28 9 8\n16 24 2\n73 2 73\n61 36 97\n80 52 24\nh",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 91 21\n17 87 75\n38 75 30\n61 71 16\n59 24 95\n66 74 61\ng\n11 69 58\n88 43 2\n52 22 23\n86 4 88\n3 84 43\n95 77 67\nyi\n78 63 6\n29 5 28\n39 10 36\n90 2 39\n21 94 49\n46 17 95\nm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 98 55\n6 55 55\n39 34 7\n85 99 42\n78 42 51\n8 94 6\neu\n26 62 75\n58 50 41\n24 31 82\n42 48 34\n98 68 43\n54 48 87\nze\n56 4 88\n62 79 42\n35 99 36\n75 51 58\n2 4 18\n40 54 71\nz",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "4 9 46\n57 65 55\n52 34 44\n98 10 87\n83 79 89\n21 86 76\nzn\n53 84 92\n37 11 76\n1 55 88\n92 91 98\n3 83 87\n22 99 34\nop\n32 44 9\n39 44 29\n85 67 73\n84 78 96\n75 9 80\n42 70 65\ni",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "405 133 253\n475 182 382\n204 136 88\n406 380 214\n64 438 439\n91 114 250\nxu\n240 327 197\n139 371 218\n106 394 483\n268 101 275\n276 364 403\n465 411 311\ncd\n411 269 344\n349 422 398\n264 74 167\n343 176 136\n283 455 488\n141 237 118\naa",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "471 494 143\n213 460 260\n252 365 496\n257 216 385\n262 171 302\n96 237 60\nce\n119 247 455\n164 432 158\n412 450 259\n128 180 399\n112 439 107\n447 425 77\nc\n203 56 75\n305 446 417\n161 73 275\n153 392 373\n464 326 201\n80 236 322\nf",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "410 167 147\n148 130 61\n460 437 151\n304 489 246\n386 182 128\n449 249 382\npy\n450 195 371\n52 120 80\n389 386 87\n334 192 346\n292 396 180\n212 413 290\nct\n246 189 186\n272 261 475\n80 197 82\n414 437 450\n191 284 322\n230 94 53\nux",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "418 231 486\n283 168 300\n292 295 128\n373 167 399\n137 130 356\n486 165 394\nze\n338 386 244\n213 404 465\n314 227 90\n278 172 166\n379 257 358\n426 455 365\nho\n476 319 434\n168 454 371\n247 269 203\n303 433 82\n214 433 120\n493 221 242\nl",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "281 158 366\n188 283 310\n69 290 450\n89 458 159\n295 383 291\n409 466 333\nw\n201 394 309\n87 350 78\n101 73 210\n113 301 356\n98 101 169\n253 500 414\nem\n331 261 58\n169 105 71\n425 153 360\n424 300 307\n179 315 61\n388 113 441\nk",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "473 67 250\n140 489 475\n306 332 103\n397 189 76\n164 459 409\n323 462 277\nlj\n68 259 272\n304 155 187\n356 316 337\n204 322 449\n259 413 294\n383 307 441\ne\n146 220 64\n490 350 162\n165 262 232\n455 326 497\n406 462 207\n301 236 397\nhl",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "146 391 494\n100 476 386\n146 455 454\n448 246 311\n381 82 353\n403 455 259\nl\n366 64 143\n84 272 238\n55 336 487\n121 379 291\n478 169 396\n379 292 409\nz\n154 341 482\n211 220 107\n358 363 419\n142 78 384\n500 349 394\n449 434 487\nje",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\ng\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nw\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nou",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nc\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\no\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 1\n1 1 1\n1 1 1\n1 1000 2\n999 1000 1\n1000 999 1\ndb\n999 1000 2\n1000 1 1\n999 999 1\n999 2 1\n1000 1 999\n999 2 999\nqo\n2 1 1000\n999 2 1\n1 2 1\n999 999 999\n1000 1 1\n1 2 999\nn",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 2\n1000 1000 1000\n1000 999 1000\n2 2 2\n999 1000 1\n2 1000 2\nqe\n999 2 1000\n2 1 1\n1 1 1\n1000 1 999\n1 1 999\n2 1 1000\nzc\n1000 2 2\n2 2 1\n1000 999 1\n1 999 1\n2 1000 1\n2 1000 1\nug",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}