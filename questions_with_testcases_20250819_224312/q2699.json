{
  "problem_code": "problems",
  "title": "love and traffic",
  "tags": [],
  "text": "Arjun is very smart, hence hasQvalentines.He lives in the stateAwhich is a matrix of sizeN x M, where each cell(i, j)represents a city. He lives in the city(S1, S2). HisQvalentines live in different cities. He is supposed to attend all his valentines but he can't do so due to constraints of time. So he decides to celebrate this festival of love with the valentine who lives closest to his city.In a single step, he can move from any cell(i, j)to the4neighboring cells i.e.(i+1, j), (i-1, j), (i, j+1)and(i, j-1).But some cities have serious traffic problem. It is impossible to penetrate the traffic in those cities. So Arjun will avoid passing through them while going to his destination. These cities have value*. All other cities have value1.He wants to find out the number of steps required to reach his closest valentine.Since he is more of a philosopher, he struggles with the math. So it's your job now to help him find out.InputThe first line of input contains3space separated integersN,MandQwhereNandMdenotes the dimensions of the matrixA, andQdenotes the number of valentines.Each of the nextNlines contain a string of lengthM, where each character is either1or*as described above.The next line contains2space separated integersS1andS2denoting coordinates of city Arjun lives in.thenQlines follow, each line containing2space separated integersDiandDjdenoting the coordinates of city of that particular valentine.OutputPrint a single integerZdenoting number of steps to reach nearest valentine. If there is no path possible between(S1, S2)and any of(Di, Dj), print-1.ExampleInput:5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1Output:2ExplanationTo reach the nearest city, he takes the following path:(2, 3) → (3, 3) → (3, 4).",
  "sample_input": "Input:5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LTRAFFIC",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 1 2\n5 9\nbzp\n4\nu\n5\nkphobys\n3\n10\nkfmgfcq\n1 10\n5 8\n3 10\n8 3\n4 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9 6\n2 10\nvbelxhzc\n7\nw\n9\nc\n10\n2\nnfsgebkh\n1 9\n9 4\n6 10\n1 9\n9 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 2\n4 4\nyxdrg\n3\nsgvesmb\n4\nldc\n3\n6\nd\n4 3\n9 4\n7 1\n1 6\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 31 19\n83 12\nnxowobuu\n30\ngo\n48\nuczbegjc\n19\n84\nlq\n65 46\n93 85\n34 22\n24 22\n13 33",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "77 91 49\n15 70\njysay\n7\nhxvjkz\n3\nos\n63\n50\nosbjojoi\n49 59\n37 1\n44 13\n53 36\n54 54",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 33 66\n79 74\nugpk\n56\ndu\n39\nqoo\n48\n8\nzdtldb\n24 100\n84 94\n83 57\n43 62\n53 51",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "81 32 85\n16 48\njtbnto\n34\ndw\n1\nnbshs\n69\n1\nqd\n88 44\n100 38\n27 4\n4 70\n94 31",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 6 97\n82 95\nnloqs\n8\ntwyhe\n71\nd\n77\n77\nye\n69 62\n83 56\n73 17\n63 75\n93 27",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "359 72 344\n267 98\nyebv\n431\noitsx\n67\nantga\n194\n349\ngzmpxopo\n492 480\n421 147\n351 435\n168 222\n471 279",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "256 96 355\n444 321\njgzvyk\n265\ntfztv\n188\njj\n452\n253\nl\n171 309\n233 368\n99 90\n116 474\n242 304",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "151 143 231\n452 420\nvfbdsqgf\n79\ntcjihwld\n255\nstq\n391\n235\nppoenmi\n334 321\n391 129\n356 242\n330 256\n429 361",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "313 402 318\n249 145\niq\n120\njbwse\n104\nkk\n213\n116\ntare\n320 379\n143 60\n218 167\n205 425\n134 410",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "340 485 193\n121 305\ncom\n451\ndbvatzw\n460\nu\n461\n236\ntls\n474 284\n446 274\n88 255\n374 483\n91 113",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "456 107 139\n345 126\np\n455\nc\n422\npmgno\n283\n381\npfdlz\n340 343\n76 256\n443 269\n179 434\n282 385",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "311 68 323\n173 100\nfisej\n377\nuc\n300\natjayxto\n151\n495\ntfr\n469 282\n265 279\n315 341\n85 95\n258 304",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\nlleers\n1000\nlcuh\n1000\nji\n1000\n1000\nbjaqj\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\nf\n1000\nb\n1000\ntorc\n1000\n1000\nbo\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 999\n1 999\nvoyjyyk\n2\nd\n2\nitpdf\n1\n1000\nnn\n2 999\n999 1000\n2 999\n999 1000\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 2\n999 999\nkdtxswqs\n2\nww\n2\ntlnnc\n2\n999\nzttyuybx\n1 2\n999 2\n2 999\n999 1000\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}