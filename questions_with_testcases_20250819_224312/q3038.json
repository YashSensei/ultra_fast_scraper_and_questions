{
  "problem_code": "problems",
  "title": "Ada and Subsequence",
  "tags": [],
  "text": "Ada the Ladybug has two string which she wants to give to her friends. As she doesn't want to distinguish between them, she wants to use only some common subsequence. Firstly she wanted to simply use the longest common subsequence but then she realized it wouldn't bekosher.She assigned a positive value to each letter. Now she wants to find the most expensive subsequence.InputThe first line of each test-case will contain two integers1 ≤ N, M ≤     2000, the length of each subsequence.The next line will contain26integers (1 ≤ Pi≤     105), the price of each letter.The next line will contain string of lengthNconsisting of lowercase English alphabet.The next line will contain string of lengthMconsisting of lowercase English alphabet.OutputFor each test-case, print the cost of the most expensive common subsequence.Example Input4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbcaExample Output2Example Input3 3\r\n1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nbaa\r\naabExample Output7Example Input4 5\r\n1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6\r\nzbbz\r\nbbzbbExample Output14Example Input3 3\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabc\r\ndefExample Output0",
  "sample_input": "4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbca",
  "sample_output": "2",
  "link": "https://www.spoj.com/problems/ADASEQEN",
  "scraped_at": "2025-08-17 00:34:34",
  "test_cases": [
    {
      "input": "4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbca",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 8\n5 3 8 1 10 2 2 4 9 8 1 7 4 8 3 9 10 5 5 6 7 3 1 5 1 6\nsisocft\nlipd",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n4 4 4 5 4 1 2 9 10 8 8 10 7 10 5 10 5 1 8 10 3 8 2 7 9 9\nxy\ne",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 1\n6 3 4 10 1 2 7 1 7 10 9 4 10 5 7 2 9 5 7 5 10 1 9 4 2 1\nq\ndwxk",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 92\n7 38 60 10 53 98 97 80 36 56 9 5 37 84 86 81 99 12 100 92 51 93 73 71 28 35\nw\no",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "62 39\n74 91 32 88 46 1 20 61 69 44 28 71 73 23 80 37 30 99 66 61 86 18 96 62 79 40\nvcxl\nit",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 82\n89 86 38 66 16 86 98 22 4 75 73 95 7 24 42 23 86 77 41 31 20 48 21 95 70 88\nvizg\nm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 29\n5 37 69 1 68 10 13 85 96 97 15 90 34 62 62 34 52 82 67 18 57 15 29 6 48 100\nzpg\nl",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 64\n69 68 44 33 34 76 83 48 44 75 46 78 10 11 46 7 56 61 62 19 61 6 87 48 60 19\ndw\nzneksfz",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "312 330\n458 460 169 141 51 126 229 114 142 313 232 190 495 131 141 251 324 499 106 255 161 271 71 265 487 347\nhtzcjg\nr",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "445 475\n284 195 313 238 364 104 57 458 251 363 351 388 262 164 216 113 475 177 163 246 148 370 92 371 265 460\nqk\nz",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "232 406\n486 442 308 282 311 65 103 346 193 381 77 59 336 446 140 63 327 204 353 85 248 495 143 168 56 396\njs\nkgnycja",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "194 77\n309 317 366 496 363 414 293 438 92 345 487 197 245 110 228 168 383 71 479 186 188 488 415 311 309 404\nmzkekj\noeqmsod",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "367 452\n464 259 195 496 379 131 493 362 317 303 390 418 177 434 411 453 344 199 191 195 495 84 106 259 268 254\nxokd\nrmfql",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "77 61\n455 195 349 404 103 319 102 426 344 469 328 491 457 134 100 333 152 256 99 274 57 283 297 75 259 95\nfczdiwu\noloden",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "465 282\n374 476 427 237 422 203 403 212 436 181 97 239 75 309 441 342 256 278 231 247 210 76 186 188 240 196\ndiesex\nmoxx",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nrkhtnt\nc",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\njtcvh\nzcdw",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 2 1000 999 1 1 999 2 1000 999 1000 1 999 999 999 1000 1 999 1 1 999 1 2 2 999 1000\nxzxl\ntpt",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n999 1 2 1000 2 1 1000 2 1000 1000 999 999 999 999 999 1 999 1 1000 1 1000 2 1 1000 1 2\neck\nc",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}