{
  "problem_code": "problems",
  "title": "MMM",
  "tags": [],
  "text": "Everyone knows how to find mean, median and mode of an array of numbers. For people who don’t know this, here is the description:Mean is the arithmetic average of a set of values.Median of a finite list of numbers can be found by arranging all the observations from lowest value to highest value and picking the middle one. If there is an even number of observations, then there is no single middle value; the median is then usually defined to be the mean of the two middle values.The mode is the value that appears most often in a set of data. If more than one number is applicable to be the mode, select the highest value number amongst them as the mode.The problem is just to find these 3 values. Given an array of numbers and two indices i and j, find the mean, median and mode of elements in the interval i to j including numbers at indices i and j. Note that i and j are 0 index based.Constraints2 ≤ N ≤ 100001 ≤ Q ≤ 100000 ≤ A[i] ≤ 1080 ≤ i ≤ j < NInputFirst line contains N which is the total number of numbers in the array. The next line contains N numbers A[i] which are the elements of the array. Next line contains a number Q which defines the total number of queries we are making for the interval i to j. It is followed by Q lines each containing 2 numbers i and j which denotes the indices to be queried for.OutputPrint Q lines each containing 3 numbers Mean, Median and Mode respectively. If the answer for any case comes to be a floating point, then take the integer part of the number as the answer. For example: if mean, median and mode comes up to be 6.44 7.8 9 then the final answer is 6 7 9.ExampleInput:56 5 3 7 721 20 4Output:4 4 55 6 7",
  "sample_input": "Input:56 5 3 7 721 20 4Output:4 4 55 6 7",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPCA09",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "56 5 3 7 721 20 4",
      "expected_output": "4 4 55 6 7",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6 2 3 3 3 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 7 9 8 10 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7 6 7 9 3 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 55 24 75 40 33 81",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "7 57 58 71 57 56 84",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 36 14 51 79 14 100",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "15 93 89 8 93 69 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 100 31 78 85 12 32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "27965 21009 45962 36841 26031 16386 31439",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "47678 25077 20318 5437 38730 5460 37391",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "23636 30464 12389 19137 23216 8445 43778",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "20368 5493 6568 28705 23608 10060 49884",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6985 16348 42600 26979 41891 32070 32505",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "25691 42853 6993 38125 37604 40176 49034",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "27229 15913 14300 8735 42869 30710 25849",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100001 100001 100001 100001 100001 100001 100001",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100001 100001 100001 100001 100001 100001 100001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 100000 100000 100000 100000 100001",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 2 100000 100000 100000 100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}