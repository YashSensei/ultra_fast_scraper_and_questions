{
  "problem_code": "problems",
  "title": "Very Friends",
  "tags": [],
  "text": "NOTICE: The test cases for this problem are not as hard as intended. If you've solved this problem, and think your solution is up for it, tryVFRIEND2!You are creating a new soical network for dogs. Wow. The dogs don't have many possibilities for interacting with your website, but they can bark how many friends they want. E.g. if a dog wants to have much 8 friends it will bark 8 times, and if it doesn't want any friends, it'll just stay quiet.After spending a good year of your life collecting these barks, you are finally ready to assign a friend list for each dog. The only problem is: You are not sure whether it is actually possible. Thus before you proceed you would like to write a program, that given a list ofNwisheswi, outputsHAPPYif it is possible to make a friend list for each dogiof lengthwi, orSADif some dog will have to get more or fewer friends than it wished for.Notice: Being friends is considered an irreflexive, symetric relation.Update: If you manage to solve this problem much efficiently, have a look at VFRIEND2, which is a so harder version of this problem.InputThe first line will contain a single integerT- the number of test cases to process.Each following lines will start with an integer0 ≤ N ≤ 105followed by an ordered list ofNwishes0 ≤ wi≤ 105.OutputWrite the answer -HAPPYorSAD- for each test case on a separate line.ExampleInput:33 0 1 15 0 1 2 3 46 1 1 2 2 3 3Output:HAPPYSADHAPPYExplanationIn the first case we can make dog 2 and 3 be friends.In the second case no assignment that works, since dog 5 would have to be friends with everyone, but dog 1 doesn't want that.",
  "sample_input": "Input:33 0 1 15 0 1 2 3 46 1 1 2 2 3 3Output:HAPPYSADHAPPY",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VFRIENDS",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "33 0 1 15 0 1 2 3 46 1 1 2 2 3 3",
      "expected_output": "HAPPYSADHAPPY",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 3 5 10 9 2 2 9 10 8 5 2 2 3 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 1 7 10 1 2 1 3 1 10 8 7 5 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 9 10 6 7 2 5 3 4 8 1 7 5 8 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "97 84 70 57 48 90 95 21 88 30 48 65 23 96 76",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "71 84 37 68 89 23 2 67 59 22 80 24 65 26 74",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 64 22 25 53 30 18 41 86 20 98 9 99 28 47",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 35 39 24 58 97 16 66 54 87 13 64 40 19 70",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 82 75 42 85 64 58 1 62 60 67 51 35 66 10",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 52 18 31 38 30 43 19 49 33 50 9 15 26 46",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "21 9 17 17 5 50 19 23 44 5 27 37 47 48 20",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15 50 7 12 33 7 45 35 27 6 7 33 11 33 13",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "48 39 40 27 24 22 23 30 40 8 32 50 29 34 27",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "32 48 40 48 8 35 44 36 46 36 30 9 38 20 22",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "35 29 29 15 27 33 47 36 18 45 16 8 13 5 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "48 48 20 17 22 42 5 9 13 10 46 39 38 46 39",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "104 1 104 105 104 104 105 2 104 1 2 2 104 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 105 105 104 105 104 104 1 2 105 104 1 2 1 105",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}