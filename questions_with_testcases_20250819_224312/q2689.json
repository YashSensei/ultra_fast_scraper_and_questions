{
  "problem_code": "problems",
  "title": "Earth Sled Tour",
  "tags": [],
  "text": "So it's Christmas! And Santa Claus needs to perform a series of deliveries of gifts in different locations around the world.For those who do not know, the reindeers are sick and he will need to use the gas-powered thunder to deliver the presents.A curious fact is that the roads between cities are perfectly straight and there is a gas station in each city. Santa Claus is a very smart guy and, to avoid problems, he fills the tank with a specific value X is the value of the largest road between the cities that Santa is traveling, so he knows that he will never run out of gas between the two cities and the gifts will not be stolen. In addition, it always selects the path where the largest road is as minimum as possible.Can you help the Santa Claus determine what X value of gas he should use?InputThe first line is composed of two integers N (1 ≤ N ≤ 105) and M (N−1 ≤ M ≤ min(2×105, N×(N−1)/2)) is the number of cities and the number of roads. Next come M lines with three integers u, v, w (u ≠ v) (0 ≤ u, v < N) (1 ≤ w ≤ 106), that there is a road connecting it with weight (you can use the road in any direction). After M lines, has an integer Q\r\n(1 ≤ Q ≤ 105) is the number of queries that Santa Claus will perform. Each of Q lines is composed of two integers x and y (0 ≤ x, y < N) corresponds to the query: how much X gasoline that Santa Claus will need to supply in every city between the cities x and y.OutputPrint Q lines each with an integer X is the answer of the dilemma what Santa Claus is passed.ExampleInput:7 11\r\n0 1 15\r\n0 2 53\r\n1 2 40\r\n1 3 46\r\n2 4 31\r\n2 5 29\r\n3 4 3\r\n4 5 29\r\n3 6 11\r\n4 6 8\r\n5 6 40\r\n7\r\n0 1\r\n0 3\r\n0 6\r\n2 4\r\n4 6\r\n5 1\r\n1 1Output:15\r\n40\r\n40\r\n29\r\n8\r\n40\r\n0",
  "sample_input": "Input:7 11\r\n0 1 15\r\n0 2 53\r\n1 2 40\r\n1 3 46\r\n2 4 31\r\n2 5 29\r\n3 4 3\r\n4 5 29\r\n3 6 11\r\n4 6 8\r\n5 6 40\r\n7\r\n0 1\r\n0 3\r\n0 6\r\n2 4\r\n4 6\r\n5 1\r\n1 1Output:15\r\n40\r\n40\r\n29\r\n8\r\n40\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CNURI18H",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "7 11\r\n0 1 15\r\n0 2 53\r\n1 2 40\r\n1 3 46\r\n2 4 31\r\n2 5 29\r\n3 4 3\r\n4 5 29\r\n3 6 11\r\n4 6 8\r\n5 6 40\r\n7\r\n0 1\r\n0 3\r\n0 6\r\n2 4\r\n4 6\r\n5 1\r\n1 1",
      "expected_output": "15\r\n40\r\n40\r\n29\r\n8\r\n40\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1\n2 2 4\n6 9 7\n10 2 9\n2 2 2\n2 4 6\n4 4 2\n2 9 10\n2 5 2\n4 2 1\n6 4 4\n9 8 7\n9\n10 3\n9 8\n4 8\n2 3\n2 7\n6 6\n5 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\n4 6 6\n4 5 3\n10 7 4\n6 10 8\n3 8 9\n7 1 8\n1 7 10\n7 6 7\n9 6 5\n7 10 2\n3 6 1\n6\n3 4\n1 10\n5 9\n1 10\n10 4\n4 5\n3 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n1 10 7\n6 6 7\n9 6 10\n5 10 2\n1 9 8\n6 4 9\n7 5 7\n4 1 6\n1 1 7\n7 4 10\n1 4 5\n1\n3 7\n1 1\n9 7\n7 10\n2 3\n3 7\n4 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 13\n62 42 44\n39 92 22\n57 3 73\n47 63 63\n20 74 92\n14 27 32\n95 84 96\n32 58 78\n41 77 63\n4 90 3\n81 48 6\n61\n96 79\n93 2\n52 23\n82 15\n61 91\n85 7\n18 4",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 90\n97 77 98\n24 21 38\n25 31 98\n86 69 34\n65 3 86\n4 89 18\n43 57 9\n52 92 94\n26 68 43\n29 63 70\n2 25 76\n38\n52 53\n31 26\n87 11\n7 3\n51 70\n45 39\n94 87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "18 85\n2 87 65\n13 48 14\n11 3 34\n11 27 17\n6 36 77\n42 42 77\n42 22 82\n100 35 72\n27 43 90\n75 72 33\n52 60 51\n95\n55 93\n49 27\n40 53\n79 92\n94 91\n56 53\n81 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "92 50\n56 81 90\n67 41 52\n9 8 20\n22 55 96\n69 37 25\n2 64 45\n93 25 58\n23 90 2\n78 82 54\n9 67 30\n51 26 13\n5\n8 58\n94 56\n54 24\n44 56\n6 83\n44 81\n14 31",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 80\n72 82 29\n74 11 29\n63 68 8\n48 65 1\n87 7 85\n70 17 57\n38 55 31\n9 37 20\n13 43 90\n53 41 60\n100 25 85\n41\n81 97\n59 88\n93 18\n29 59\n67 82\n74 10\n18 67",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "6 13\n14 30 8\n23 30 31\n26 8 24\n33 28 46\n20 11 7\n49 23 42\n32 34 27\n14 15 37\n17 41 45\n32 16 11\n15 29 17\n5\n8 7\n43 28\n44 37\n19 45\n31 17\n11 12\n24 19",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "38 25\n24 25 37\n28 16 17\n39 20 52\n27 18 8\n39 11 27\n17 37 47\n26 30 48\n24 50 34\n20 39 45\n27 25 19\n21 18 22\n51\n51 22\n35 24\n52 32\n29 13\n22 48\n30 6\n10 49",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "40 14\n23 52 48\n15 12 33\n13 21 20\n6 51 48\n38 28 31\n39 34 50\n45 10 34\n27 50 46\n13 18 12\n42 12 40\n46 23 36\n10\n11 39\n41 12\n8 40\n23 7\n14 49\n20 16\n32 9",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "36 13\n13 9 50\n26 15 28\n13 19 28\n46 25 28\n7 14 29\n21 12 32\n5 28 31\n28 28 35\n8 8 12\n13 25 34\n16 41 23\n27\n34 22\n8 22\n14 44\n6 48\n17 52\n34 42\n47 48",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "45 20\n24 43 40\n8 8 20\n27 35 10\n20 45 51\n31 37 31\n13 6 6\n26 11 26\n7 30 41\n44 49 48\n48 50 19\n46 26 34\n36\n5 42\n45 28\n32 38\n38 40\n9 27\n7 20\n50 24",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "12 40\n27 31 26\n10 39 44\n39 28 44\n6 45 20\n50 33 32\n29 46 44\n38 51 47\n15 28 10\n24 39 34\n37 26 31\n49 37 51\n32\n9 14\n10 39\n34 36\n18 22\n40 28\n17 43\n52 32",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "9 38\n32 10 49\n14 43 15\n30 5 13\n22 46 45\n32 5 27\n23 27 6\n41 26 15\n5 17 32\n9 5 37\n36 50 26\n50 52 6\n46\n18 18\n37 37\n31 5\n50 35\n30 36\n20 35\n51 45",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 2\n105 1 105\n2 1 104\n2 105 2\n2 105 104\n104 1 2\n2 104 104\n1 104 1\n104 1 2\n1 104 2\n1 105 104\n1 1 2\n105\n104 104\n1 105\n105 2\n104 2\n105 2\n104 2\n104 104",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 1\n1 1 2\n2 2 105\n1 1 105\n1 105 104\n105 105 104\n105 105 104\n1 2 104\n105 1 105\n104 2 2\n2 104 1\n2 104 104\n105\n1 1\n1 105\n105 105\n1 2\n2 2\n1 104\n105 105",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}