{
  "problem_code": "problems",
  "title": "New Year Train",
  "tags": [],
  "text": "On the New Year Eve, a government of one country decided to send a train with gifts to each of its towns. For each\r\nof the N towns exactly one wagon with gifts was sent. The route was organized in such way\r\nthat at each place the last wagon would be detached and train would continue on its way, until all gifts were delivered.\r\nJust before the departure it turned out that the loading workers did not pay attention to numeration of\r\nthe wagons and loaded the gifts in random order. It was impossible to detach a wagon\r\nfrom the middle of the train and there was no time to rearrange gifts.\r\nLuckily, there was a depot with parallel tracks. At the entrance of the depot each wagon could be directed\r\nto any of the tracks and wagons could leave the depot from the other side in the right sequences 1, 2, 3,\r\n4, and so on. Note that we will then be leaving presents in towns in the reversed order (..., 4, 3, 2, 1).For example, let's say we have a train with wagons in the following order: 2, 5, 1, 4, 6, 3. Wagons 2, 5, 6 could be directed to the first track; wagons 1, 4 to the second\r\none and wagon 3 to the third. In this case wagons could leave the depot\r\nin the right order.\r\nFortunately, there were enough tracks in the depot to rearrange the train.InputFirst line of the input contains two integers N and M: the number of wagons in the train and the\r\n\r\nnumber of tracks in the depot respectively (1 ≤ N ≤ 800 000, 1 ≤ M ≤ 100 000, M ≤ N). Second\r\nline contains N integers: sequence of wagons before the entrance to the depot.\r\nIt's guaranteed that solution always exists.OutputFirst line of the output must contain N integers: number of track that should be chosen for each wagon from\r\n\r\ninput sequence (tracts are numbered from 1 to M). On the second line print the number of tracks in order the wagons should leave\r\nthe depot to result in the sequence 1, 2, 3, and so on. If multiple solutions exists, print the one that results in lexicographically smallest sequence in the first line of the output.ExampleInput6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_input": "Input6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IZHONYT",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "Input6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 1\nygnusa 10\n6 7 4 5 9 1 2 2 9 6 8 3\n8 10 6 3 8 k 2 3 9 6 6\n3 1 7 5 3 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\nomxa 6\n9 1 4 4 2 4 3 9 5 3 9 2\n5 5 7 10 8 vr 9 9 6 7 8\n10 6 10 6 2 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 1\ncawxeg 10\n5 5 8 3 1 7 5 6 8 9 2 6\n4 7 8 1 5 ummqiuq 5 9 8 7 2\n4 10 2 1 2 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "57 91\nc 50\n77 68 34 96 95 59 25 55 22 92 78 25\n56 38 22 28 67 m 65 17 100 74 22\n30 49 79 47 14 28",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 95\ngrjgwn 61\n65 15 28 100 62 61 65 38 31 20 23 68\n74 91 88 51 54 ifeqwaxz 16 84 24 20 81\n7 60 22 33 38 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 17\nyx 93\n37 57 22 64 9 58 35 55 2 52 30 57\n84 44 17 62 2 wyhtv 91 65 63 45 14\n36 72 94 87 73 18",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 47\nqgkhlc 75\n94 84 71 67 60 19 47 50 37 76 63 83\n97 23 71 75 70 pfjrt 99 85 55 33 30\n99 69 66 72 31 49",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "35 59\npvyjt 99\n64 31 93 97 80 80 17 92 24 26 63 36\n18 94 51 31 7 c 78 62 88 81 80\n43 26 34 3 14 45",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "114500 258366\ntx 271632\n247373 276380 299261 133012 124809 223547 314690 233123 281819 181675 118943 357355\n74593 177993 196340 131166 246632 xhql 390928 161197 143570 278308 275317\n86842 205372 251301 71183 147750 345656",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "287178 282627\nviuwt 204799\n234580 297442 125970 396403 101526 62475 214643 127591 144082 225268 98880 176452\n179331 365156 228400 96856 181829 jyas 199543 199464 289880 93852 388636\n48904 80183 144325 262900 286267 67021",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "282251 218105\nht 76619\n242385 267335 61672 265710 339901 156813 107227 309934 307254 284755 94964 221297\n106266 281957 378894 149687 219865 z 101686 105094 226431 303333 380265\n280685 301215 173593 218650 49200 109589",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "381332 254482\nif 303247\n113150 104499 171585 185552 238293 183536 379235 378891 112847 379810 339087 159198\n286342 290570 154654 296035 226076 cbznnpf 118104 182255 314950 263425 207758\n104910 67012 358209 234816 392548 251362",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "307871 44560\njvjb 250607\n222915 42826 293143 368267 220681 333649 82192 151480 194929 334763 320327 314418\n396707 146448 110679 244631 233148 am 388523 196969 296401 166208 105178\n245147 296862 81634 59588 288389 175934",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "391547 99459\nxtg 252633\n372126 65081 314708 354185 160303 297220 357545 308335 376463 68858 359084 381745\n135003 138494 242985 217186 377423 lpljpbf 348889 221498 319945 113930 78477\n167632 356483 348066 315371 308152 116034",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "101753 364885\nmbksct 172530\n291197 180291 200727 383150 300706 157977 185675 311820 377844 311243 217475 144122\n346196 53467 220379 153198 208475 uammn 275614 357127 138065 346674 392375\n323851 117621 333055 213773 263728 346663",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "800000 800000\nuh 800000\n800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 kvubvspg 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 800000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "800000 800000\nlwpj 800000\n800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 suptf 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 800000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\nl 2\n2 800000 800000 1 2 800000 2 799999 799999 799999 799999 799999\n799999 799999 1 800000 800000 tzesifjf 2 2 2 1 2\n800000 2 800000 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\no 1\n800000 799999 2 2 1 799999 800000 1 1 799999 800000 1\n799999 800000 1 2 799999 faialqol 799999 799999 1 2 1\n1 799999 1 2 799999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}