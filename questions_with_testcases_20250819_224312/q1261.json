{
  "problem_code": "problems",
  "title": "Symmetric matrix",
  "tags": [],
  "text": "[NOTE: A harder version of this problem isSymmetric Matrix 2; you may want to try it once you solve this one.]You are given anNxNmatrixmijsuch thatmij== mjifori, j = 1, ..., N. We would like to compute the value ofNote that in the above expression we are going overKindicesi1, ..., iKthat run over the values1, ..., N, while summing over the product of all theK*(K-1)/2possible matrix elements that we can form with these indices.InputThe first line of the input contains two integersNandK(2 ≤ N ≤ 100and2 ≤ K ≤ 5), representing the number of rows and columns of the matrixmijand the number of sums in the formula above, respectively. The followingNlines containNintegers each, being thej-th number in thei-th line the value ofmij(-10  ≤ mij≤ 10andmij== mjifori, j = 1, ..., N).OutputPrint a single line with the result of the calculation. Because this number can be very big, output its remainder modulo division by1000000007(== 109+7).ExampleInput:4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0Output:308822466",
  "sample_input": "Input:4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0Output:308822466",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MATPROD",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0",
      "expected_output": "308822466",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 10 7\n8 3 6 4\n7 5 5 5\n5 2 4 2\n2 3 1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 4\n8 7 8 5\n1 2 1 2\n9 1 9 9\n8 8 5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 6\n3 9 5 1\n6 7 4 7\n2 10 7 9\n8 3 4 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "29 69 57\n1 81 74 73\n24 31 90 3\n60 17 18 58\n100 62 94 50",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 69 56\n51 33 63 5\n28 68 68 54\n86 65 10 94\n82 80 59 92",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "72 30 90\n17 62 30 64\n85 87 29 89\n69 37 61 23\n48 83 90 21",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 12 79\n51 51 44 62\n72 68 80 4\n27 28 95 47\n27 7 77 57",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 94 40\n41 81 63 78\n98 26 63 28\n80 38 7 78\n97 59 64 76",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "36 11 34\n48 17 12 23\n45 26 9 7\n7 36 28 16\n22 15 48 24",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "50 46 10\n22 23 11 11\n28 5 37 31\n12 14 23 9\n49 49 43 50",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "39 11 32\n49 10 31 15\n44 28 29 28\n14 44 8 23\n5 32 13 35",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "12 50 30\n47 35 50 48\n42 45 16 7\n16 36 38 30\n33 17 11 18",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "50 17 36\n12 32 42 33\n38 40 44 21\n33 48 23 17\n8 17 30 6",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "45 42 13\n44 14 29 43\n17 23 21 19\n23 18 17 20\n26 7 34 47",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 26 48\n35 10 27 37\n21 40 18 31\n21 5 37 37\n15 11 42 23",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 100\n2 2 100 1\n1 99 99 100\n99 1 1 1\n2 100 100 100",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 100 2\n2 99 1 1\n2 99 99 2\n1 2 1 2\n100 100 99 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}