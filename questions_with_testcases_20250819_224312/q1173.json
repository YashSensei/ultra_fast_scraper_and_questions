{
  "problem_code": "problems",
  "title": "Very Friends 2",
  "tags": [],
  "text": "You are creating a new social network for dogs. Wow. The dogs don't have many possibilities for interacting with your website, but they can bark how many friends they want. E.g. if a dog wants to have much 8 friends it will bark 8 times, and if it doesn't want any friends, it'll just stay quiet.After spending a good year of your life collecting these barks, you are finally ready to assign a friend list for each dog. The only problem is: You are not sure whether it is actually possible. Thus before you proceed you would like to write a program, that given a list ofNwisheswi, outputsHAPPYif it is possible to make a friend list for each dogiof lengthwi, orSADif some dog will have to get more or fewer friends than it wished for.Notice: Being friends is considered a reflexive relation.InputThe first line will contain a single integerT- the number of test cases to process.Because of I/O constraints, the sequence of wishes is not given explicitly. Each of theTlines will consist of 5 integersN,a,b,c,min the range[0, 107](exceptmwhich is in[1, 107]). These integers describe the sequencex0= 0xi+1= (a*xi+ b) % mThe sequence of wishes iswi=xi+c.OutputWrite the answer -HAPPYorSAD- for each test case on a separate line.ExampleInput:3\r\n3 2 1 0 2\r\n5 1 1 0 5\r\n6 1 1 1 3Output:HAPPYSADHAPPYExplanationIn the first case we get the wishes \"0 1 1\", and we Â can make dog 2 and 3 be friends.In the second case we get the wishes \"0 1 2 3 4\". No assignment that works, since dog 5 would have to be friends with everyone, but dog 1 doesn't want that.In the third case we get the wishes \"1 2 3 1 2 3\".",
  "sample_input": "x0= 0xi+1= (a*xi+ b) % m",
  "sample_output": "Input:3\r\n3 2 1 0 2\r\n5 1 1 0 5\r\n6 1 1 1 3Output:HAPPYSADHAPPY",
  "link": "https://www.spoj.com/problems/VFRIEND2",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "x0= 0xi+1= (a*xi+ b) % m",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n3 2 1 0 2\r\n5 1 1 0 5\r\n6 1 1 1 3",
      "expected_output": "HAPPYSADHAPPY",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "10 10 10\nwk nhfi epfgkz hmu cd sp",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 8\ncho xbfuo qhhp eqip pnr rlurn",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 7\nsz xyt xzxum vxbv n bgytb",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "83 35 22\nnblnm piyizw wmh rqacb tphy hsins",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "44 57 13\nlj d doim twht ck ev",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 16 72\nf eg pv jhtm e zkb",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "85 61 27\nqn twifgn vv fassw q bzgnd",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "17 1 92\ncy izv p zcb atvpv svkom",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "439 265 120\nx dnvmgw hncqw aabwt o xdlec",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "448 446 426\nseu yjg esj ro so zh",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "169 167 192\nphx am rxcmjx ukiyo mka rd",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "352 314 128\neha ecdzcs aml fvmm bzh vrsy",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "423 246 261\nj uhkj aplobm sagl w uzs",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "322 487 477\nlwjo ogepva ku hzz qet b",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "420 427 228\nuj hxcj c kxbw yycd re",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nwfbz ourqcb xov n ftpzw mntg",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nlyls s xorvdh ubjq sbgbp e",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1000\nu ybhdl pid lbit pu wa",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}