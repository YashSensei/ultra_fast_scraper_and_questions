{
  "problem_code": "problems",
  "title": "Delicious Pancakes",
  "tags": [],
  "text": "Just as promised, PolyProg will invite you to a bounteous pancake buffet right after this contest. Can you already feel the seductive odours dazing your senses? Well, before your mouth starts watering, you should solve this last problem.As you might know, the basic ingredients to pancakes are flour, milk and eggs. These may be completed by a passel of additional toppings such as sugar, jam, berries, cheese, ham, mushrooms etc. As the chef of the evening was yet uncertain about the recipe he’d whip up tonight, he asked his assistant simply to buy random quantities of each ingredient.With these quantities he could makeN1pancakes according to recipe 1,N2if he decides to follow recipe 2,N3for recipe 3 and so on and so forth. As the end of the competition is close, the chef will not have enough time to combine several recipes: All pancakes tonight will be of the same taste (too bad :( ). The repertoire of recipes is huge, and as we imagine you to have a ravenous appetite, you are to select the recipe that yields the largest number of pancakes.InputThe input consists of several test-cases separated by an empty line. The first line of each test-case holds the number of ingredientsN (1 ≤ N ≤ 50)the assistant bought followed by the number of recipesR (1 ≤ R ≤ 100)in the chef’s repertoire. Each of the next lines contains exactlyNnon-negative integers (no larger than 106) informing about the ingredients. The first of these lines lists the quantities the assistant bought of each ingredient. The remainingRlines list the quantities (in the same order as the previous line) necessary to make ten pancakes according to the recipe ri(from 1 toR). The input ends on a test-case having bothNandRzero, which must not be processed.OutputYour program should produce one line per test-case containing the recipe that yields the largest number of pancakes followed by the number of entire pancakes that can be made then. If there is a tie, prefer the recipe that appears first in the input.ExampleInput:3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0Output:2 66\r\n1 100",
  "sample_input": "Input:3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0Output:2 66\r\n1 100",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PANCAKES",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0",
      "expected_output": "2 66\r\n1 100",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3\n5 4 9\n10 6 4\n8 4 3\n7 7\n2 2 3 9 4 5\n1 10 4 6 9 1\n6 2 10 4 3 1\n6 2 8 10 7 3\n4 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n7 8 1\n10 2 2\n2 2 1\n1 1\n1 7 2 3 1 5\n2 1 10 10 10 2\n1 10 6 7 7 3\n3 7 6 2 4 3\n3 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n10 7 6\n2 3 3\n7 9 6\n6 2\n8 2 4 3 4 9\n8 5 5 7 1 3\n4 6 9 7 10 5\n4 6 3 7 3 9\n5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "47 43\n45 50 5\n14 14 49\n49 33 3\n2 33\n16 27 50 14 24 3\n21 38 27 19 5 48\n25 42 18 22 16 28\n25 13 48 41 9 29\n40 8",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "34 5\n20 9 36\n25 36 29\n38 41 19\n47 28\n49 2 47 37 6 5\n37 37 8 40 10 15\n21 2 35 35 10 33\n20 42 3 31 29 31\n17 46",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 14\n50 18 22\n33 9 23\n33 27 38\n33 10\n24 49 22 46 32 38\n34 28 11 35 22 6\n20 31 48 43 19 15\n23 26 11 18 24 45\n40 33",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 5\n29 47 12\n23 40 7\n47 35 13\n38 7\n18 20 17 10 33 43\n34 18 2 29 45 6\n45 3 13 34 17 15\n32 43 23 4 5 35\n42 49",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 26\n14 17 1\n37 20 36\n4 12 42\n31 35\n24 3 44 19 21 30\n9 23 27 1 46 47\n1 19 13 39 43 1\n21 17 31 19 22 13\n21 32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16 23\n5 7 7\n7 3 24\n9 9 17\n15 21\n12 4 3 21 4 22\n17 5 24 16 18 23\n5 14 13 19 23 9\n22 24 24 13 8 5\n15 5",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "23 20\n10 20 7\n23 14 12\n24 21 14\n4 23\n10 7 24 18 6 9\n11 12 19 11 17 14\n25 21 20 19 20 2\n18 18 6 21 9 20\n19 3",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "22 22\n8 13 4\n6 16 19\n13 3 24\n3 4\n6 7 8 10 9 18\n17 5 2 12 5 15\n18 18 3 6 19 24\n11 16 20 25 21 22\n9 10",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "19 22\n17 18 17\n10 6 24\n4 6 14\n3 21\n14 15 14 21 15 20\n14 19 14 15 14 3\n23 13 2 22 24 11\n25 12 22 3 18 25\n14 7",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23 7\n7 2 12\n22 9 18\n23 19 16\n16 22\n9 3 20 22 23 15\n6 13 10 13 12 15\n16 23 2 13 18 6\n21 8 24 21 24 24\n15 4",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5 15\n10 8 5\n24 14 6\n2 14 8\n23 20\n24 21 11 6 9 5\n16 21 25 13 17 19\n9 12 4 13 4 6\n6 22 8 11 16 9\n23 21",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "9 12\n20 11 21\n9 11 3\n17 17 4\n9 8\n17 7 9 20 11 3\n17 23 8 5 20 11\n2 15 8 7 25 11\n20 22 4 24 13 7\n3 14",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 50\n2 2 50\n1 50 1\n1 49 50\n50 1\n50 49 2 49 2 1\n2 1 1 49 50 50\n2 50 49 49 2 50\n2 1 50 1 50 49\n50 50",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 49\n2 50 50\n50 1 50\n49 50 1\n49 49\n49 2 49 1 1 49\n2 1 50 49 49 2\n1 49 50 1 50 50\n49 2 2 2 49 2\n50 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}