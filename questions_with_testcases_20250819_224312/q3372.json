{
  "problem_code": "problems",
  "title": "Sequence Partitioning II",
  "tags": [],
  "text": "Given a sequence ofNordered pairs of positive integers (Ai,Bi), you have to \r\n\r\npartition it into several contiguous parts. Letpbe the number of these parts, whose boundaries are \r\n\r\n(l1,r1), (l2,r2), ... ,(lp,rp), which satisfyli=ri-1+ 1,li<=ri,l1= 1,rp=n. The parts themselves \r\n\r\nalso satisfy the following restrictions:For any two pairs (Ap,Bp), \r\n\r\n(Aq,Bq), where (Ap,Bp) is belongs to theTpth part and (Aq,Bq) theTqth part. IfTp<Tq, thenBp>Aq.LetMibe the maximumA-component of elements in theith part, sayMi= max\r\n\r\n{Ali,Ali+1...Ari}, 1 <=i<=pit is provided thatwhere Limit is a given integer.LetSibe the sum ofB-components of elements \r\n\r\nin theith part.Now I want to minimize the valuemax{Si:1 <=i<= \r\n\r\np}Could you tell me the minimum?InputThe input contains exactly one test case. The first line of input contains two positive integers N (N <= 50000), Limit \r\n\r\n(Limit <= 231-1). Then follow N lines each contains a positive integers pair (A,B). It's always \r\n\r\nguaranteed thatmax{A1,A2...An} <= LimitOutputOutput the minimum target value.ExampleInput:4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4Output:9ExplanationAn available assignment is the first two pairs are assigned into the first part and the last two pairs are assigned into \r\n\r\nthe second part. ThenB1>A3,B1>A4,B2>A3,B2>A4, max{A1,A2}+max{A3,A4} <= 6, and minimum max\r\n\r\n{B1+B2,B3+B4}=9.",
  "sample_input": "Input:4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4Output:9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SEQPAR2",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4",
      "expected_output": "9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\n4 3\n1 10\n5 9\n4 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7\n2 2\n10 1\n9 1\n3 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n1 3\n5 1\n8 7\n4 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 19\n24 29\n70 70\n12 61\n73 29",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 49\n95 82\n99 65\n6 76\n70 30",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 31\n51 81\n62 18\n83 96\n9 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 86\n61 70\n76 51\n9 53\n25 77",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "83 89\n38 91\n31 49\n54 8\n70 90",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "360 227\n436 115\n475 51\n134 101\n264 63",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "417 253\n269 292\n221 424\n122 137\n147 483",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "272 449\n349 425\n468 90\n282 155\n216 291",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "408 491\n254 492\n396 307\n192 453\n251 159",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "149 104\n181 426\n67 403\n366 225\n236 100",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "104 200\n369 211\n443 127\n237 400\n297 413",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "188 476\n466 476\n118 474\n257 119\n425 428",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000\n1000 2\n1 1\n1 1000\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\n999 2\n999 2\n1 1000\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}