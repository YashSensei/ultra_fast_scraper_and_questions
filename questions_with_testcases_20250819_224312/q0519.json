{
  "problem_code": "problems",
  "title": "Disjoint Paths",
  "tags": [],
  "text": "One of your classes has K students in it who really don't like each other.  In fact, they dislike each other so much that they want to find routes to class that don't cross at any intersection so that they won't ever see each other outside of class.  Can you find such routes?InputThe input file will contain multiple cases. The first line of each\r\ncase is K N, where K is the number of routes you need\r\nto find and N is the number of intersections in MIT's floor plan.\r\nThe intersections are numbered 1 ... N. This is followed\r\nby N lines, one for each intersection, containing the indices of\r\nthe adjacent intersections, separated by spaces.  (This means that\r\nif the line for intersection 2 contains a 3, then the line for\r\nintersection 3 will contain a 2.)  Every intersection is adjacent\r\nto at least one other intersection.\r\n\r\nEach case is followed immediately by the next case. The end of the\r\ninput is indicated by a line containing only \"0 0\".\r\n\r\nYou may assume that 1 ≤ K ≤ 100 and 2 ≤ N ≤ 5000.\r\n\r\nThe students all start at intersection 1 and their class is at intersection 2.OutputFor each case, output the case number, in the format \"Case #:\", followed by a newline.\r\n\r\nIf there are K non-intersecting routes from the start (1) to the end (2),\r\nthen this must be followed K lines, each one giving a list of corners,\r\nin order, on one such route from 1 to 2.  If not, then output one line\r\nwith the word \"Impossible\".\r\n\r\nOutput a blank line after each test case.ExampleInput:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_input": "Input:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DISJPATH",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0",
      "expected_output": "Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 1\n9 2 10\n9 3 3\n3 9\n1 2\n6 6\n8 4\n6 9 10\n8 3 5\n2 7\n2 6\n9 6\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n8 4 9\n1 8 5\n2 10\n2 6\n7 6\n8 4\n2 2 7\n6 10 9\n2 2\n8 10\n9 1\n9 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n8 1 4\n9 10 7\n4 8\n6 3\n4 6\n7 8\n5 5 5\n2 10 3\n2 8\n6 8\n10 2\n2 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "29 72\n86 73 11\n87 44 32\n75 79\n35 94\n86 1\n79 66\n100 2 27\n1 1 87\n5 28\n42 70\n37 60\n37 30",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "41 94\n93 54 5\n11 96 61\n89 12\n100 17\n35 89\n57 88\n42 52 39\n78 85 64\n88 52\n12 74\n51 10\n13 17",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "95 33\n34 86 6\n91 47 52\n80 65\n20 19\n100 90\n32 77\n72 5 59\n81 35 69\n49 82\n53 5\n76 73\n48 60",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 82\n13 14 33\n49 83 43\n88 67\n15 83\n24 49\n80 48\n36 49 47\n41 9 71\n60 71\n20 9\n83 49\n92 3",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 65\n82 79 50\n12 61 93\n14 30\n80 16\n7 97\n58 64\n3 59 30\n91 95 20\n29 57\n25 37\n19 4\n38 38",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1371 1555\n409 2442 1908\n1302 1944 332\n2305 334\n1311 1541\n698 1988\n809 2114\n1220 1764 1921\n2436 1036 1766\n456 785\n972 843\n2257 1471\n1466 2028",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1143 731\n1264 2110 436\n1964 1809 2128\n2356 2077\n1248 1098\n1437 1931\n2279 2167\n2250 1081 1289\n328 374 2226\n901 1730\n1254 1614\n578 816\n2091 1023",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "617 1912\n1372 1588 1074\n2223 517 2384\n1950 1331\n619 906\n1716 1499\n1008 2488\n2298 1379 1156\n944 2438 2218\n1596 1357\n2236 1532\n263 723\n1983 2230",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "613 2120\n561 2271 1378\n831 927 2044\n2239 1008\n997 1918\n2199 714\n1713 677\n1435 1320 433\n2372 2454 1781\n595 1369\n840 636\n1764 1957\n1242 545",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2309 262\n923 980 1205\n651 1088 761\n2282 697\n1176 624\n1307 2477\n2145 1551\n1494 294 957\n491 2334 1574\n1880 756\n546 1712\n573 752\n1792 2349",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2237 1253\n996 1125 1927\n391 436 891\n1797 2308\n1147 352\n672 867\n1338 553\n2175 253 2419\n2452 1076 479\n526 1222\n1563 757\n1239 2136\n2162 919",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "456 1357\n583 1135 1803\n1808 377 2233\n1696 1704\n320 1625\n2343 1741\n1120 863\n1850 858 2142\n2143 2128 1706\n1444 427\n276 1814\n2158 1612\n2000 2292",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 4999\n2 1 5000\n1 1 1\n4999 2\n4999 4999\n4999 2\n5000 5000\n5000 2 1\n4999 5000 4999\n4999 1\n1 4999\n5000 4999\n5000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 4999\n2 4999 1\n1 1 1\n5000 4999\n4999 4999\n2 5000\n2 2\n2 5000 4999\n4999 1 4999\n1 2\n4999 4999\n1 2\n5000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}