{
  "problem_code": "problems",
  "title": "Ada and Taxes",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She grows\r\nvegetables in a long furrow. All of the vegetables have some height. Local\r\npoliticians tax small vegetables, but as the furrow is very long, they always\r\ntax just a part of it.The taxes always have some limit on height. They are calculated very\r\nsimply: Tax collectors multiply the heights of all vegetables, which are\r\nlesser or equal to limit and are on desired segment.The taxes might be very high so tax collectors just round their income and\r\ntake only1000000007(109+7) banknotes. They are very kind, so they always leave\r\nthe rest to Ada. She is interested in how much they will leave her.NOTE:If none of the vegetable is lesser/equal to given limit, Ada is\r\nleft with symbolical 1 \"money\".InputThe first line contains an integer1 ≤ N, Q ≤ 3×105,\r\nthe number of vegetables Ada grows and the number of times the tax collectors\r\ncome.The second line containsNintegers1 ≤ Ai≤\r\n    3×105, the heights of vegetables.The nextQlines contains three integers0 ≤ L ≤ R < N,\r\nthe left and right vegetables of segment and1 ≤ H ≤\r\n3×105, the limit.OutputPrint a single line for each query with the number of money Ada will be left with\r\nafter each tax collecting.Example Input10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3Example Output1\r\n6\r\n362880\r\n280\r\n60\r\n3",
  "sample_input": "10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3",
  "sample_output": "1\r\n6\r\n362880\r\n280\r\n60\r\n3",
  "link": "https://www.spoj.com/problems/ADATAXES",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3",
      "expected_output": "1\r\n6\r\n362880\r\n280\r\n60\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10\n9 6 9 5 4 1 6 2 9 4\n5 6 6\n5 6 7\n7 1 1\n8 9 7\n9 4 5\n2 2 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 9\n1 7 9 8 8 6 9 3 10 1\n9 2 3\n9 8 2\n10 7 5\n7 2 7\n10 4 3\n1 6 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\n8 7 10 8 9 6 5 7 3 6\n7 1 9\n8 8 7\n6 6 1\n4 3 5\n1 10 4\n4 8 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "60 94\n83 53 9 55 7 23 67 63 60 89\n88 23 53\n73 51 96\n56 26 94\n11 72 63\n19 70 100\n15 59 27",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 69\n73 74 33 29 19 82 32 100 15 10\n76 85 86\n25 23 21\n85 20 90\n11 65 82\n50 97 78\n63 73 38",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "11 4\n99 32 41 29 60 31 25 42 78 32\n79 78 97\n27 34 5\n66 76 3\n93 96 88\n55 33 19\n80 79 18",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "85 43\n42 26 64 45 34 82 36 78 57 86\n9 69 25\n92 44 48\n55 4 54\n69 30 85\n46 8 52\n69 14 66",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "56 51\n25 40 50 69 57 78 70 86 4 95\n100 98 9\n11 82 85\n76 32 75\n80 29 98\n93 28 74\n58 48 30",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "456 451\n195 421 267 203 443 51 365 54 58 224\n103 170 264\n200 55 137\n55 277 206\n196 500 435\n236 195 200\n388 171 435",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "402 385\n139 153 445 372 147 174 105 361 115 140\n183 478 384\n427 299 108\n130 57 306\n181 127 398\n414 179 230\n481 464 163",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "441 54\n382 387 399 360 208 131 368 77 383 363\n393 213 71\n360 72 342\n118 475 249\n78 489 305\n59 360 494\n355 422 436",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "253 51\n238 182 451 218 170 428 132 430 160 284\n311 102 191\n474 424 229\n420 184 496\n52 128 329\n299 220 209\n473 463 124",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "160 148\n340 492 264 321 194 334 446 197 414 143\n182 125 176\n140 320 84\n210 368 51\n220 390 141\n322 203 220\n83 237 236",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "418 75\n324 121 97 81 497 89 247 238 437 500\n475 380 318\n471 274 69\n165 191 64\n491 233 70\n135 432 316\n191 167 61",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "305 223\n74 129 138 424 487 132 314 318 75 177\n311 459 443\n449 314 498\n496 197 77\n458 230 375\n420 351 65\n415 476 57",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1000 1 1000 999 1 1000 999 1000 2 1\n2 999 999\n2 1 1000\n2 2 1\n1 1 1\n1 1000 999\n1000 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1000 1 2 999 999 1 999 1 1 1000\n999 2 1000\n2 2 1000\n999 1 1000\n1 2 1\n999 999 999\n2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}