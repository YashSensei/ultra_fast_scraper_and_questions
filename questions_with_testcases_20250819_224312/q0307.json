{
  "problem_code": "problems",
  "title": "Voracious Steve",
  "tags": [],
  "text": "Steve and Digit bought a box containing a number of donuts. In order to divide \r\n\tthem between themselves they play a special game that they created. The players \r\n\talternately take a certain, positive number of donuts from the box, but no more \r\n\tthan some fixed integer. Each player's donuts are gathered on the player's \r\n\tside. The player that empties the box eats his donuts while the other one puts \r\n\this donuts back into the box and the game continues with the \"loser\" player \r\n\tstarting. The game goes on until all the donuts are eaten. The goal of the game \r\n\tis to eat the most donuts. How many donuts can Steve, who starts the game, \r\n\tcount on, assuming the best strategy for both players?TaskWrite a program that:reads the parameters of the game from the standard input,computes the number of donuts Steve can count on,writes the result to the standard output.InputThe input begins with the integer t, the number of test cases. Then t test \r\n\tcases follow.For each test case the first and only line of the input contains exactly two \r\n\tintegers n and m separated by a single space, 1 ≤ m ≤ n ≤ 100 - the \r\n\tparameters of the game, where n is the number of donuts in the box at the \r\n\tbeginning of the game and m is the upper limit on the number of donuts to be \r\n\ttaken by one player in one move.OutputFor each test case the output contains exactly one integer equal to the number \r\n\tof donuts Steve can count on.ExampleInput:1\r\n5 2Output:3",
  "sample_input": "Input:1\r\n5 2Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STEVE",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "1\r\n5 2",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n10\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n2\n5\n1\n10\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "6\n94981779\n40332829\n29750814\n11091145\n9250074\n83857110",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n24784033\n76627689\n89622492\n47353445\n51023676\n79923768\n53589093\n95231553\n78503517\n97839764\n14248798\n19365921\n94830874\n79606837\n11419384",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n24060292\n71337513\n80179916\n38545362\n75880068\n43087537\n70586918\n30680376\n2327826\n95785431\n87515556\n61844466\n78869533\n58404867\n87798299\n50227480\n17671643\n90381120\n28320310\n12756712",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n60848449\n33100989\n76528797\n34049249\n68136941\n9512551\n2560100\n57094392\n93030707\n74473686\n82510973\n97003164\n85857847\n32737886\n73566305\n12679808\n58773832\n35249325",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n85497875\n10803897\n91011321\n63179660\n16598933\n59038141\n98028312\n27220685\n73801382\n6672882\n87940110\n28102741",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "51\n6763\n82210\n89489\n35220\n4845\n75450\n54224\n27022\n76054\n83570\n76223\n84672\n28428\n76643\n34995\n23739\n93814\n93944\n81311\n71346\n69348\n72500\n51625\n38010\n66639\n73977\n1768\n84091\n54442\n82907\n65960\n31899\n35970\n80660\n51938\n59975\n52505\n80645\n5717\n63256\n60586\n81642\n64992\n23057\n60031\n18015\n75239\n47417\n22323\n42608\n34709",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n25944\n21560\n48997\n22713\n88847\n80956\n85899\n59281\n14098\n66471\n34553\n96481\n95888\n59813\n32423\n79130\n13678\n82700\n48575\n13019\n36446\n32715\n24966\n16860\n50644\n85203\n33275\n65469\n33885\n11667\n15270\n11319\n923\n50518\n20930\n50366\n12628\n62404\n26640\n1415\n27625\n17442\n91089",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n78376\n83436\n45675\n58435\n84666\n99320\n93551\n95375\n66738\n89934\n36936\n18053\n42245\n36165\n14032\n89977\n39730\n43654\n48238\n46470\n86127\n68766\n62173",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "42\n51337\n5941\n94628\n88609\n57768\n36118\n89392\n14019\n69151\n19328\n32636\n44561\n90943\n22917\n30281\n27277\n45871\n13083\n96261\n44915\n41715\n4172\n37104\n18491\n24747\n42981\n44529\n81232\n7587\n82447\n51087\n77482\n33581\n69261\n4483\n5747\n14010\n45787\n60804\n57834\n23560\n66147",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "66\n17169\n14652\n8412\n85718\n23635\n6061\n64464\n95220\n19254\n65470\n200\n85761\n9775\n20642\n40558\n89143\n43975\n6570\n65216\n76035\n50288\n94586\n9868\n85174\n98841\n37280\n12073\n9175\n15250\n4557\n64738\n92882\n40946\n61531\n47451\n24063\n39570\n72349\n12917\n98829\n883\n30604\n32537\n25482\n36668\n53759\n10089\n74746\n69254\n88519\n20998\n36843\n36081\n80298\n32010\n17322\n70683\n55624\n92617\n66005\n33046\n48989\n24905\n80830\n72084\n69663",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "74\n64278\n40365\n27836\n86752\n89017\n98823\n8558\n12095\n48362\n18962\n72824\n29679\n65205\n32896\n60214\n81830\n90795\n95413\n80155\n86196\n11660\n39613\n81221\n13245\n83499\n3684\n75533\n61205\n58134\n63256\n98182\n31091\n2726\n62236\n32115\n62460\n33679\n46308\n84314\n93040\n94049\n35412\n9850\n35768\n83900\n45138\n57164\n87334\n8692\n8302\n93241\n26378\n87383\n90479\n54065\n67511\n44129\n83050\n51611\n98505\n82048\n3809\n13683\n70550\n48357\n98328\n82183\n40216\n92546\n85316\n76639\n95591\n43988\n24363",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "81\n96138\n5712\n92943\n62261\n70748\n73701\n88882\n85495\n19334\n90292\n15031\n99046\n35667\n24855\n52884\n64740\n53162\n48724\n66390\n2874\n59579\n2306\n73313\n17033\n23468\n57344\n27977\n37259\n18424\n54778\n39592\n19706\n5842\n82143\n84349\n88004\n45989\n64530\n18064\n21690\n31370\n99574\n96150\n54093\n46302\n78606\n45981\n80183\n49563\n33021\n60078\n30570\n85345\n29580\n28221\n10048\n49435\n33327\n90931\n14261\n99866\n57465\n63175\n57686\n58394\n83192\n67726\n79530\n91419\n60401\n15630\n50134\n28985\n90894\n33242\n33852\n56108\n97742\n3878\n56361\n33792",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n84041313\n88576936\n73468047\n57752590\n70107434\n16760836\n87686851\n28084763\n69892595\n78118775\n73473883\n10022611\n23737158\n29464374\n51538251\n52081348\n39597431\n50607666\n44253607\n27541172\n50631677\n29059721\n25941247\n69175814\n12813560\n26876261\n38356497\n56911414\n60224155\n33080949\n18256226\n35068207\n68253958\n69755407\n93667937\n6636848\n32487689\n26887108\n56210924\n30130785\n14011043\n91356578\n57112383\n43414872\n58151044\n21980479\n55783749\n93619857\n13121513\n36653771\n24001977\n49006813\n99811344\n69969469\n369755\n50309126\n86925602\n27705271\n58218781\n47538255\n4684391\n43555865\n14156022\n32619887\n10538285\n12614887\n32852338\n34630847\n21840140\n57772375\n27537605\n68546712\n17374604\n90450273\n49658252\n90457978\n26676253\n37507485\n41202333\n97516143\n4954183\n88574870\n56593014\n13293748\n77871246\n87836934\n92291367\n42188652\n58743896\n20171407\n75915641\n90843423\n93508728\n86165204\n35819387\n4086823\n9785395\n52288337\n81244279\n27846613",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n17342626\n43782404\n78172103\n20469214\n40573289\n51863401\n3214256\n90836867\n43455677\n28560888\n53584879\n16320059\n79584396\n31426202\n79888568\n99853330\n15496562\n26835270\n13345597\n34167694\n51394018\n39146039\n89230678\n74609748\n85965363\n40816036\n27212541\n20219531\n83447048\n58179994\n5042351\n71943764\n83516954\n7560121\n36068048\n10815258\n21732429\n44526604\n73411244\n1372242\n41213249\n69942265\n21894080\n23612396\n62545015\n44126935\n24989070\n92048632\n3193715\n46034512\n94886617\n96670518\n52249326\n73184051\n78860632\n22579584\n67117253\n41703712\n5582825\n99487740\n7645530\n18386543\n45723922\n16963655\n85437138\n19598234\n97888725\n71462392\n55481977\n99430872\n62936123\n2333213\n22561626\n75283280\n36809611\n7275347\n75877261\n35035546\n63094234\n18008612\n74030995\n24050430\n80667700\n25237872\n90951789\n35817461\n97252870\n56913536\n53670046\n18616514\n78049561\n62232100\n58222320\n51256307\n23453639\n62598209\n65707675\n56004942\n13172727\n14739072",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "2\n62120343\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "100\n85329709\n100000000\n1\n100000000\n100000000\n68570242\n574785\n72399894\n42134650\n1\n45404337\n100000000\n100000000\n100000000\n11843517\n100000000\n100000000\n100000000\n100000000\n100000000\n45332214\n58885128\n100000000\n100000000\n38635015\n100000000\n15389808\n1\n100000000\n1\n1\n87759630\n1\n99971476\n44647799\n1\n1\n100000000\n100000000\n1\n91080778\n82393417\n100000000\n6634784\n1\n100000000\n1\n100000000\n100000000\n1\n49233477\n1\n1\n1\n100000000\n1\n1\n79133970\n100000000\n75156220\n1\n1\n100000000\n1\n100000000\n1\n75574062\n80410172\n100000000\n100000000\n100000000\n17498328\n100000000\n100000000\n1\n1\n1\n1\n1\n61790381\n80591016\n100000000\n1\n100000000\n100000000\n100000000\n100000000\n52727612\n1\n1\n1\n100000000\n32929928\n1\n1\n16671931\n71089230\n96933409\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 100)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}