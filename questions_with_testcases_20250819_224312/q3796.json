{
  "problem_code": "problems",
  "title": "Count The Indexes",
  "tags": [],
  "text": "Let's deal with an array, the most important data structure of computer science. You will be given some operations to do. There will be three types of operations:Type 1: Insert a number at the end of the array.Type 2: Delete the last number of the array, where the last number means the latest number which has been inserted.Type 3: You will get a number and two indices i and j where i ≤ j. Now you will have to answer how many time the number appears in the array starting from i to j.You may assume that initially the array is empty.InputEach file contains one test case. The first line is an integer Q (1 ≤ Q ≤ 200000), the number of operations. Each of the next Q lines contains an operation. The operations will appear as the formats below:1 x, where 1 ≤ x ≤ 200000, which means you have to insert number x at the end of the array.0, For this operation, you have to delete the last number of the array2 x i j, Here, you have to find how many times x appears in the array from i to j. Here x will always be present in the array and 1 ≤ i ≤ j ≤ length the array.OutputFor deletion, if the array is already empty, then output a string \"invalid\" (without quote),otherwise you don't need to print anything for deleting numbers. For the operation type of 2, you have to output an integer, how many times x appears in the array from i to j inclusive.ExampleInput:71 101 202 20 1 202 10 1 100Output:11invalid",
  "sample_input": "Input:71 101 202 20 1 202 10 1 100Output:11invalid",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CNTINDX",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "71 101 202 20 1 202 10 1 100",
      "expected_output": "11invalid",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1 4 8 9 10 9 8 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 3 3 2 9 3 9 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 3 10 5 10 7 4 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 94 31 96 28 32 23 67 55",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 23 76 85 78 36 15 47 76",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "85 92 58 5 87 3 44 19 28",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "8 39 32 79 22 94 30 73 14",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 37 5 96 93 81 99 81 16",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "434 377 387 200 58 53 287 424 192",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "50 462 72 140 136 469 234 442 241",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "314 409 226 112 126 209 112 286 314",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "392 477 407 136 410 390 304 305 196",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "81 180 51 266 75 361 220 218 118",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "367 271 389 265 464 70 499 212 167",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "263 251 437 431 190 331 65 88 249",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1000 1 2 1 1 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 1 1 1 1 1 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}