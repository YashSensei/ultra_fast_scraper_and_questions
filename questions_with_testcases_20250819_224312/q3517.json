{
  "problem_code": "problems",
  "title": "Decorating the Palace",
  "tags": [],
  "text": "The King of DragonLand likes decorating towers. So one day he decided to decorate a tower with flowers.The highest floor of a tower contains only one room and floor just below every floor except the base floor will have two of its child buildings on which it is built.Note that its structure is like a binary tree.for height = 3*\r\n           *     *\r\n          * *   * *You are given the task of decorating it, but there is a constraint in decorating it: sum of child floors of a floor will have be equal to number of flowers in parent building and your child floors will have a small a difference between number of flowers in them as possible to make your tower look beautiful.Given that top building contains N flowers and height of tower is H, find out number of ways of decorating it, As this value may be large, output it modulo 109+ 7.Two decorations are considered different if any floor in them contains different number of flowersInputT: number of test cases (≤ 10), then next T lines contain H, N.OutputOutput the number of different decorations % (109+ 7)Constraints1 ≤ H ≤ 501 ≤ N ≤ 50000ExampleInput2\r\n1 1\r\n2 1Output1\r\n2Explanationfor 1 1, it is obvious.for 2 1,There can be two ways:1\r\n1     0\r\n\r\nOR\r\n\r\n   1\r\n0     1",
  "sample_input": "*\r\n           *     *\r\n          * *   * *",
  "sample_output": "Input2\r\n1 1\r\n2 1Output1\r\n2",
  "link": "https://www.spoj.com/problems/DEC123",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "*\r\n           *     *\r\n          * *   * *",
      "expected_output": "Input2\r\n1 1\r\n2 1Output1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "qc\ndzqfc topy\nxazdx wb qojxz lxe",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "m\nh y\nwy pnxs ny xfu",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "e\nlskdo ju\njy ojikc qvl hqcp",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "yx\nb lrk\nmv by zjv yvp",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "s\nw wypkj\ne vhp ak gu",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "fo\naz xw\nkb gknjt zf syvid",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "m\noqkbe nu\nr wh imrdr ugx",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "s\nin uzokw\ndg aivd j efi",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "m\nv s\nk scc lozaw fpa",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "u\nos zgle\nzlm vgn qafk ghgbp",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "md\nocae g\nhmelk g vpry ye",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "ix\nrehlr m\nttviw th lal t",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "rn\naejbt pcgn\ny dbc tqa mbv",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "l\nloign eicnm\naqi av hgine l",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "hg\ndz yr\nqklj wj knhoh w",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "ez\njh prxyx\nl xibv dpa cayu",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "b\nfx fi\nsabx kbbrc bx paqfu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ac\ntq wkcm\nfwtpy jb fv f",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "mv\npzkbt lli\niann uzzck aivae fnp",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}