{
  "problem_code": "problems",
  "title": "To Add or to Multiply",
  "tags": [],
  "text": "The Industrial Computer Processor Company offers very fast, special purpose processing units tailored to customer needs. Processors of the a-C-m family (such as the 1-C-2 and the 5-C-3) have an instruction set with only two different operations:A add aM multiply by mThe processor receives an integer, executes a sequence of A and M operations (the program) that modiﬁes the input, and outputs the result. For example, the 1-C-2 processor executing the programAAAMwith the input 2 yields the output 10 (the computation is 2 → 3 → 4 → 5 → 10), while the 5-C-3 processor yields 51 with the same program and input (2→ 7 → 12 → 17 → 51).You are ana-C-mprogrammer assigned to a top secret project. This means that you have not been told the precise computation your program should perform. But you are given particular valuesp,q,r, andsand the following conditions:1. The input is guaranteed to be a number betweenpandq.2. The output must be some number betweenrands.Given ana-C-mprocessor and the numbersp,q,r, ands, your job is to construct the shortesta-C-mprogram which, for every inputxsuch thatp≤x≤q, yields some outputysuch thatr≤y≤s. If there is more than one program of minimum length, choose the one that come ﬁrst lexicographically, treating each program as a string ofAsandMs.InputThe input contains several test cases. Each test case is given by a line with the six integersa,m,p,q,r, andsas described above (1 ≤a, m, p, q, r, s≤ 109,p≤qandr≤s).The last test case is followed by a line with six zeros.OutputFor each test case, display its case number followed by the best program as described above. Display the word “empty” if the best program uses no operations. Display the word “impossible” if there is no program meeting the speciﬁcations.Display the program as a sequence of space-separated strings, alternating between strings of the form “nA” and strings of the form “nM”, wheren> 0. Strings of the former type indicatenconsecutiveAoperations, and strings of the latter type indicatenconsecutiveMoperations.Follow the format of the sample output.ExampleInput:1 2 2 3 10 201 3 2 3 22 333 2 2 3 4 55 3 2 3 2 30 0 0 0 0 0Output:Case 1: 1A 2MCase 2: 1M 2A 1MCase 3: impossibleCase 4: empty",
  "sample_input": "Input:1 2 2 3 10 201 3 2 3 22 333 2 2 3 4 55 3 2 3 2 30 0 0 0 0 0Output:Case 1: 1A 2MCase 2: 1M 2A 1MCase 3: impossibleCase 4: empty",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ADDMUL",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "1 2 2 3 10 201 3 2 3 22 333 2 2 3 4 55 3 2 3 2 30 0 0 0 0 0",
      "expected_output": "Case 1: 1A 2MCase 2: 1M 2A 1MCase 3: impossibleCase 4: empty",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 10 5 8 4 10 10 10 5 2 7 3 4 2 1 2 9 1 9 4 4 10 8 9 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 7 1 8 8 7 7 2 5 10 6 6 2 3 2 5 1 7 4 1 8 2 6 8 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 7 10 5 3 10 8 10 1 4 9 9 7 10 5 6 1 7 3 1 5 1 2 2 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 14 87 30 9 13 96 95 74 65 13 46 64 21 72 59 48 85 27 15 32 21 72 99 13 60",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "44 27 86 57 83 11 27 68 86 68 54 63 17 13 100 43 60 33 25 84 66 10 54 19 42 40",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "86 56 99 37 99 27 100 89 22 67 93 96 84 69 28 45 40 82 83 15 50 83 48 58 33 96",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 3 37 100 62 85 95 2 78 87 54 61 98 94 51 43 11 20 12 35 87 53 53 20 44 32",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 94 75 88 71 39 59 2 46 14 51 12 90 25 37 43 44 31 80 88 2 22 51 54 9 52",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "159 327 349 288 234 315 490 185 317 289 86 126 435 200 146 301 429 500 76 143 243 193 338 498 426 456",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "275 429 290 147 309 323 303 215 276 327 239 53 457 52 473 387 185 377 351 347 357 380 446 416 51 373",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "494 371 280 75 174 419 274 404 304 409 447 50 395 77 287 226 376 448 185 391 481 206 62 285 158 432",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "487 244 415 203 485 448 95 343 464 432 455 458 479 81 439 293 138 451 124 124 255 207 178 285 416 227",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "283 308 117 354 377 219 255 489 375 193 174 296 275 99 145 401 196 319 386 500 296 169 452 202 269 108",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "437 418 113 302 210 80 124 69 90 464 52 157 89 160 130 226 190 255 215 150 167 131 417 337 378 337",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "384 308 203 270 292 470 259 118 138 190 85 465 327 250 376 469 134 98 473 483 265 232 236 457 145 410",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 1 1000 2 2 999 1 999 1000 999 1 999 1000 2 1 1000 1000 1 999 999 1000 2 999 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 999 999 2 1 999 2 999 999 2 1 999 2 1000 999 1000 1 1 1 2 2 999 1000 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}