{
  "problem_code": "problems",
  "title": "Ada and Rain",
  "tags": [],
  "text": "Ada the Ladybug is currently growing plants. She has a very long furrow, in\r\nwhich she does so. It is so long, that most of water falling from rains drops\r\njust onto a part (segment) of the furrow. Ada doesn't want the plants to\r\nwither, so she records all rains to know, how much water every particular plant\r\ngot. Sadly, there are so many rains that she couldn't handle\r\nthis alone!At first, you will be givenNqueries with[L, R]segments\r\ntelling you, where all of theNrains fallen. AfterwardMqueries\r\nfollows, with numberi- the i-th plant for which you want to know, the\r\nnumber of rains, which has fallen onto it.InputThe first line will contain0 < N, M ≤ 105,0 < W ≤ 106, number of\r\nrains, number of questions and size of furrow respectively.ThenNlines follow, each containing two integers0 ≤ L ≤ R < W, symbolizing left and right plant in segment on which\r\ni-th rain has fallen.AfterwardMlines follow, each containing a number0 ≤ a < W, asking for number of rains which has fallen on plant numbera.OutputPrintMlines (for each query of second type), with integer indicating\r\nnumber of rains, which has fallen on the plant in query.Example Input6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7Example Output2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
  "sample_input": "6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7",
  "sample_output": "2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
  "link": "https://www.spoj.com/problems/ADARAIN",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7",
      "expected_output": "2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3 7\n8 10\n3 5\n3 3\n1 8\n5 5\n8 6\n3\n10\n2\n10\n10\n4\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 7 3\n1 9\n4 3\n2 1\n9 1\n2 8\n10 1\n6\n3\n7\n7\n7\n7\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 10\n5 10\n1 9\n5 2\n8 8\n6 6\n3 2\n6\n9\n5\n10\n6\n2\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "99 71 8\n94 51\n27 70\n83 67\n62 97\n83 24\n73 30\n42\n4\n11\n80\n7\n93\n52",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 86 54\n34 96\n50 99\n41 73\n14 4\n30 39\n63 39\n89\n37\n1\n38\n56\n70\n45",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "57 93 5\n98 3\n99 84\n37 79\n11 7\n82 92\n65 90\n59\n82\n82\n91\n7\n48\n46",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 62 69\n79 70\n88 89\n12 49\n68 82\n64 18\n71 76\n13\n73\n27\n6\n68\n70\n28",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "56 13 39\n7 5\n8 67\n78 37\n42 59\n29 77\n25 14\n31\n80\n86\n70\n68\n51\n24",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "355 167 310\n212 481\n249 354\n311 221\n362 488\n341 406\n244 432\n140\n179\n104\n154\n149\n133\n93",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "133 217 456\n61 356\n376 307\n399 410\n113 440\n488 177\n178 79\n405\n309\n322\n265\n242\n284\n63",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "291 171 235\n444 106\n269 473\n467 254\n444 410\n309 76\n234 257\n417\n478\n446\n82\n370\n297\n496",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "357 405 384\n87 201\n500 344\n438 145\n293 183\n133 451\n298 206\n320\n432\n451\n469\n395\n381\n171",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "430 263 481\n371 357\n361 114\n159 122\n357 74\n438 68\n338 59\n437\n80\n461\n266\n422\n202\n206",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "129 74 270\n156 406\n114 474\n189 306\n152 292\n468 54\n312 254\n470\n126\n222\n287\n77\n330\n163",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "296 198 158\n131 132\n286 120\n278 288\n114 192\n460 317\n285 499\n377\n109\n385\n479\n491\n410\n357",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 999\n1000 2\n1 2\n2 1000\n1 999\n2 2\n1 1\n2\n1\n2\n2\n999\n1000\n999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 1\n1 1000\n999 1\n2 1000\n999 1000\n999 1000\n999 1000\n1\n1000\n999\n2\n1\n1\n999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}