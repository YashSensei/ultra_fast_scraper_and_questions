{
  "problem_code": "problems",
  "title": "GENIJALAC",
  "tags": [],
  "text": "Mirko is a genius. But the purpose of his inventions is not always obvious. His latest invention, the Shuffle-o-matic 3175, is one of those. The Shuffle-o-matic is used in a very special way. First Mirko places N paper cards, with numbers 1 to N printed on them, on the Shuffle-o-matic working surface. Then he inputs the shuffle sequence in the special input console and hits the go button. The machine than reads the paper cards and outputs the read sequence of numbers on its output tape. It than shuffles the cards according to the shuffle sequence. After that it reads the newly obtained sequence and writes it onto a new line on its output tape. Then it proceeds to shuffle the cards again according to the same shuffle sequence, scans and writes the output to the tape. The machine does this until it runs out of tape.After experimenting with the machine Mirko decided to rest a bit on the floor. There he noticed a piece of output tape. The piece is neatly cut just before the A-th output row and just after the B-th output row. It is also missing the first C number and the last D numbers in all rows.He now wonders how many rows on that piece of paper have the property that all numbers in the row, that are still on the paper, are in the exact same spot they were before all the shuffling began.InputThe first line of input contains integers N, A, B, C and D in that order(1 ≤ N ≤ 500 000, A ≤ B ≤ 1012, 0 ≤ C, D ≤ N, C + D < N).The second line contains the shuffle sequence. The sequence is given as a permutation of numbers 1 to N. If the k-th number in the shuffle sequence is x, after each shuffle the k-th element in the resulting sequence is the x-th element in the previous sequence.OutputIn the first and only line of input print the number of rows that have the property Mirko is looking for.ExampleInput:4 1 5 0 1\r\n1 3 4 2Output:2",
  "sample_input": "Input:4 1 5 0 1\r\n1 3 4 2Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IWGBST",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 1 5 0 1\r\n1 3 4 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 5 9 10 6\n5 3 7 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 10 1 1\n6 2 9 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 2 3 1\n5 5 7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 23 29 100 27\n21 9 65 5",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 27 58 99 94\n68 25 63 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "96 18 3 100 62\n47 47 28 24",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 30 3 95 100\n62 7 26 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 61 87 5 35\n45 1 80 44",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "75319 63202 177438 49911 103351\n127570 202456 249984 227423",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "193510 123927 219306 201957 131434\n218101 179400 93563 45799",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "231773 152950 88520 180748 143578\n80474 65709 47230 27628",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "168819 65438 54651 166758 244612\n234878 225789 104015 143894",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "66265 116919 199605 60581 185328\n134551 43311 69084 236971",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "158872 124871 117655 114786 39139\n115161 114567 165136 89541",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "188998 130390 27036 208623 232959\n158917 130557 176928 120655",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500000 500000 500000 500000 500000\n500000 500000 500000 500000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500000 500000 500000 500000 500000\n500000 500000 500000 500000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 500000 1 1 1\n499999 2 1 499999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1 500000 1\n1 500000 499999 499999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}