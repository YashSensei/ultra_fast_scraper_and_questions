{
  "problem_code": "problems",
  "title": "Con Voi",
  "tags": [],
  "text": "EnglishVietnameseAn  elephant  lives by  a  lake with N plants on  the  surface. The  lake can be modeled by  a  coordinate plane, with plants at points with integer coordinates. Every morning  after waking  up,  the  elephant  performs  his morning  exercise,  happily  jumping  from plant  to plant. For  reasons best  left undiscussed,  the elephant can always jump only  to another plant with both coordinates larger than the coordinates of the plant it is currently on. In other words, from plant (x1, y1) the elephant can jump to plant (x2, y2) only if x2 > x1 and y2 > y1. The elephant can start his exercise at any plant on the lake.  Write a program that, given the coordinates of all plants, calculates the length of the longest sequence of  plants  the  elephant  can  visit.  Additionally,  calculate  the  number  of  different  such  longest sequences. Because this second number can be large, calculate it modulo 1 000 000 007.InputThe first line contains the integer N (1 ≤ N ≤ 300 000), the number of plants. Each of the following N  lines contains the coordinates of one plant, two  integers between 0 and 109. No two plants will have the same pair of coordinates.OutputOn the first line output the length of the longest sequence of plants the elephant can jump on. On the second line output the number of such sequences of maximum length, modulo 1 000 000  007.Sampleinput118 67 45 45 15 66 23 24 34 53 52 4output43input61 32 23 15 34 43 5output27",
  "sample_input": "input118 67 45 45 15 66 23 24 34 53 52 4output43",
  "sample_output": "input61 32 23 15 34 43 5output27",
  "link": "https://www.spoj.com/problems/MCONVOI",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "input118 67 45 45 15 66 23 24 34 53 52 4output43",
      "expected_output": "input61 32 23 15 34 43 5output27",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 10 10 10 6 9 2 9 9 4 9 9 3\nsddtwz 9 10 4 6 5 1 7 4 1 7 jsugq",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 4 1 6 8 7 6 10 4 7 1 3 2\nuvbswj 8 1 1 5 1 2 5 5 6 10 rrnsg",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 1 2 9 6 6 5 6 4 3 4 8\nqexbrik 6 6 5 4 8 5 5 6 2 8 ykmnbwcp",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "89 61 83 99 50 71 58 95 82 26 11 46 23\nduxu 38 96 89 6 63 48 84 9 32 17 hcplit",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "79 15 56 32 72 12 86 87 34 65 85 45 99\nrru 8 36 72 5 19 98 6 7 99 77 lq",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 14 79 23 7 68 62 40 69 58 46 26 1\nfxfu 88 28 52 18 17 16 68 71 53 45 mpifxqz",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 31 39 29 99 94 67 72 67 56 45 99 35\niqere 81 51 97 1 76 12 59 12 88 74 qyxukniow",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 22 11 79 51 73 22 33 40 30 40 64 37\nlkkkye 91 84 84 73 74 12 74 13 24 56 uruwjzgv",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "97365 24046 101369 106076 38019 105725 116207 134411 92581 78623 64160 37305 26495\nklatbqyr 70115 84991 142056 44988 83428 133047 90548 66047 94244 60642 fok",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "83517 123816 147024 22792 49619 53844 110195 76370 149493 123465 27038 129062 126867\ntztseuos 32456 135420 67593 63157 51225 103386 115120 21261 109916 135623 ywwxohbk",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "46791 104938 45258 55224 63578 77251 112026 111107 73113 48572 112824 131553 79494\nuk 51140 133427 64774 96426 85766 39650 37332 119022 117098 78812 cldrdhla",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "94339 57022 60875 135517 94841 102840 113827 84600 20028 132567 120856 117990 70481\nqmk 35597 140886 48946 68659 149012 83989 144892 20914 98463 71436 bszsl",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "98194 40885 100631 126208 32160 142070 42103 65624 50085 32509 146152 120475 67313\ndmqnc 26734 72040 54528 114290 28541 111040 62809 139989 57603 61789 madvxvgds",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34049 61776 32353 146476 131280 61074 125358 124853 22267 148402 24268 109129 53980\nkjm 31009 29343 130280 128418 118897 105374 93889 51376 147725 96875 go",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "95619 61852 78619 21814 72128 53054 80292 138168 74061 21414 42807 136597 89364\nr 45436 42472 32386 84055 129281 126224 25030 63380 36920 70185 aaefgnz",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000\nsiyi 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 zwyt",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000\nsghsleq 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 simbhu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "300000 299999 300000 300000 300000 1 2 1 1 299999 299999 2 1\njzsqbnh 2 300000 299999 2 299999 299999 2 1 299999 300000 ioi",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "300000 300000 1 299999 1 300000 300000 2 1 300000 2 299999 1\nwxnoldvc 1 1 299999 299999 299999 299999 2 300000 1 2 swqc",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}