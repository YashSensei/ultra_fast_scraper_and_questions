{
  "problem_code": "problems",
  "title": "abdou set",
  "tags": [],
  "text": "Abdouhas a set of unique positive integers. He wants to add several (possibly none) new positive integers to this set, such that when the set is sorted, for every two consecutive numbers X, Y abs(X % M - Y % M) = 1 . Your task is to calculate the smallest possible count of new numbers, with which he can achieve that.InputThe first line contains T, the number of test cases. It is followed by 2*T lines, two lines per test case. The first line contains two positive integers M and N. The second line contains N integers.1 ≤ T ≤ 5000.1 ≤ M ≤ 105.2 ≤ N ≤ 50.1 ≤ every integer in the set ≤ 106.OutputFor test case print a single integer in a separate line: the smallest possible count of new numbers, with which he can complete the set or -1 if no solution exists.ExampleInput:5\r\n2 3 \r\n2 10 20\r\n10 2\r\n10 20\r\n10 6\r\n11 19 5 30 40 100\r\n1 2 \r\n1 9999\r\n15 3\r\n4218 15210 1426Output:2\r\n1\r\n-1\r\n-1\r\n3ExplanationIn the first test case we can add 3 and 13 to the given set to achieve Abdou's goal.",
  "sample_input": "Input:5\r\n2 3 \r\n2 10 20\r\n10 2\r\n10 20\r\n10 6\r\n11 19 5 30 40 100\r\n1 2 \r\n1 9999\r\n15 3\r\n4218 15210 1426Output:2\r\n1\r\n-1\r\n-1\r\n3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KIMO1",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "5\r\n2 3 \r\n2 10 20\r\n10 2\r\n10 20\r\n10 6\r\n11 19 5 30 40 100\r\n1 2 \r\n1 9999\r\n15 3\r\n4218 15210 1426",
      "expected_output": "2\r\n1\r\n-1\r\n-1\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n2\n1\n8\n3\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n9\n4\n9\n4\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "13\n79441730\n9016309\n83388009\n85976599\n37239663\n84124030\n69003952\n1826367\n34078576\n78017251\n10948138\n54077021\n27293886",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n38629252\n40546459\n3980571\n40641666\n50708779\n83668766\n29782875\n56155272\n1323603\n77994684\n89592116\n51311050\n35058800\n54925651\n47849462",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n9576262\n55694346\n11785457\n31940931\n76466743\n56809302\n32583369\n69180551\n14254588\n26469242\n74955024\n32064319\n72604424\n7988644\n41863159\n52140889",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n53099999\n65567415\n965869\n24018466\n54608719\n76985937\n90859038\n85815088\n88021329\n93271339\n71924573\n50279407\n47486862\n34581530",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n1416044\n16504434\n42615129\n14882954\n17301981\n52912453\n82598626\n85881504\n29740101\n31089219\n92834346\n65031597\n48723824",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "46\n48313\n90508\n69395\n75370\n28355\n57480\n25664\n84785\n65648\n56307\n46183\n15201\n36534\n64238\n43318\n10887\n2689\n56574\n88154\n15688\n86208\n35865\n64221\n525\n26607\n27822\n24982\n90054\n4873\n73484\n25298\n2601\n54404\n30577\n50118\n78407\n75081\n94419\n56663\n10425\n52066\n45277\n72768\n65661\n3640\n26867",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n54998\n23594\n2516\n6159\n44578\n99534\n1522\n80328\n47129\n11920\n28675\n88364\n18163\n46258\n811\n79435\n30412\n22442\n55562\n10040\n40175\n69317\n84317\n52877\n64627\n992\n95484\n47444\n17839\n30452\n95312\n30239",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n29744\n29419\n85295\n15575\n82711\n48363\n7163\n93980\n56213\n67428\n32445\n57299\n80542\n94515\n14062\n90528\n20831\n3946\n15711\n96853\n46631\n28491\n79371\n83087\n55857\n59811\n22828\n95988\n38444\n3319\n22940",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n40101\n10188\n13980\n31078\n88347\n98370\n74897\n71334\n31977\n14937\n79574\n58835\n19328\n49101\n37120\n10306\n36207\n86685\n25467\n78830\n13916\n88273\n86299\n27063\n74523",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n21563\n22978\n4070\n7948\n73300\n13278\n83524\n15754\n74887\n16075\n46199\n1990\n30526\n43822\n27024\n17997\n95551\n58233\n14019\n6629",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n60201\n85681\n87894\n38166\n64975\n15022\n70072\n81145\n6052\n74379\n71200\n57226\n58217\n60244\n39167\n32788\n5005\n38728\n6073\n99315\n7887\n6468\n64368\n8482\n49062\n20756\n40959\n82912\n54524\n24017\n40019\n3394\n36051\n85976\n66534\n71171\n8200\n38312\n29039\n25895\n89110\n88518\n62748\n79751\n94492\n59880\n33660\n74109\n88339\n75874",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n46044\n6561\n31641\n86421\n9060\n14864\n10669\n20110\n35867\n66897\n21842\n30890\n54341\n88573\n60845\n8162\n97731\n94664\n12205\n31272\n48633\n67779\n15329\n28802\n88834\n72316\n50206\n3228\n13552\n15461\n4550\n54966\n61604\n76404\n98264\n90262\n8930\n28230\n78558\n61524\n63041\n17795\n9113\n23299\n28119",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n91491565\n96232904\n75587637\n76164774\n28089545\n94619918\n30983509\n73573628\n78433280\n55020213\n16239008\n74771275\n11476935\n55754036\n27666636\n44347145\n16885462\n61803586\n91889617\n86101182\n39974088\n3959143\n25104912\n80055766\n21252896\n15373048\n34394122\n95800203\n42952957\n29685953\n11435714\n69786458\n70738170\n8321771\n59427739\n20062899\n58779197\n28664090\n57093681\n58566349\n37946878\n20816766\n16645853\n60654531\n80918393\n72829655\n78480930\n71792296\n10372034\n72605294",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n68826316\n77603053\n99714629\n92544951\n83482211\n89861608\n2249153\n6613792\n99609073\n19977308\n85784674\n4664791\n87839267\n56579214\n71554703\n6223013\n11759011\n95702562\n75986501\n71727889\n90722275\n99045178\n27248289\n86005879\n77660239\n53264893\n86595446\n97905543\n324496\n57776268\n73744580\n41730235\n55493436\n8610592\n85269133\n9135185\n77349281\n9050801\n59118614\n40485828\n52756688\n19766647\n95193474\n85709282\n17427374\n79210722\n26155358\n46177336\n69004513\n96693453",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n100000000\n1\n100000000\n26373275\n100000000\n51989319\n1\n1\n100000000\n100000000\n1\n2889374\n36613215\n100000000\n1\n1\n24493275\n8869413\n78506137\n1\n47916386\n1\n74353243\n100000000\n22649812\n1\n9089594\n21967215\n65955433\n1\n1\n100000000\n100000000\n31740709\n1\n1\n1\n81414950\n7171432\n100000000\n53156606\n1\n100000000\n1\n1\n35599615\n1\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 50)"
    },
    {
      "input": "50\n100000000\n1\n70654791\n55476653\n1\n68343665\n68802391\n100000000\n100000000\n1\n100000000\n1\n100000000\n93036846\n1\n100000000\n56179370\n1\n1\n1\n100000000\n31685778\n1\n1\n12192135\n100000000\n100000000\n1\n32354323\n1\n1\n1\n100000000\n100000000\n100000000\n85628477\n100000000\n40648967\n95212286\n22889768\n63109760\n1\n100000000\n100000000\n100000000\n69386888\n1\n1\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 50)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}