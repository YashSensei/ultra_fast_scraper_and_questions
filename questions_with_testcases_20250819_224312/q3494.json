{
  "problem_code": "problems",
  "title": "Eko",
  "tags": [],
  "text": "Lumberjack Mirko needs to chop downMmetres of wood. It is an easy job for him since he has a nifty new woodcutting machine that can take down forests like wildfire. However, Mirko is only allowed to cut a single row of trees.Mirko‟s machine works as follows: Mirko sets a height parameterH(in metres), and the machine raises a giant sawblade to that height and cuts off all tree parts higher thanH(of course, trees not higher thanHmeters remain intact). Mirko then takes the parts that were cut off. For example, if the tree row contains trees with heights of 20, 15, 10, and 17 metres, and Mirko raises his sawblade to 15 metres, the remaining tree heights after cutting will be 15, 15, 10, and 15 metres, respectively, while Mirko will take 5 metres off the first tree and 2 metres off the fourth tree (7 metres of wood in total).Mirko isecologicallyminded, so he doesn‟t want to cut off more wood than necessary. That‟s why he wants to set his sawblade as high as possible. Help Mirko find themaximum integer heightof the sawblade that still allows him to cut offat least Mmetres of wood.InputThe first line of input contains two space-separated positive integers,N(the number of trees, 1 ≤N≤ 1 000 000) andM(Mirko‟s required wood amount, 1 ≤M≤ 2 000 000 000).The second line of input containsNspace-separated positive integers less than 1 000 000 000, the heights of each tree (in metres). The sum of all heights will exceedM, thus Mirko will always be able to obtain the required amount of wood.OutputThe first and only line of output must contain the required height setting.ExampleInput:4 7\r\n20 15 10 17Output:15Input:5 20\r\n4 42 40 26 46Output:36",
  "sample_input": "Input:4 7\r\n20 15 10 17Output:15",
  "sample_output": "Input:5 20\r\n4 42 40 26 46Output:36",
  "link": "https://www.spoj.com/problems/EKO",
  "scraped_at": "2025-08-17 00:34:21",
  "test_cases": [
    {
      "input": "4 7\r\n20 15 10 17",
      "expected_output": "15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 20\r\n4 42 40 26 46",
      "expected_output": "36",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 8\n10 1 5 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n8 2 4 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 6\n10 4 7 5",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "30 32\n93 25 80 80",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "66 53\n82 95 12 67",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "63 80\n2 17 98 61",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 58\n36 76 21 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "36 46\n24 10 27 67",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "284602 364183\n77610 279925 186132 174276",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "468803 356423\n68915 70255 259476 68663",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "63877 200400\n497042 257604 128249 431969",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "218023 336881\n488228 370779 163461 422314",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "490074 66595\n455403 231440 289859 310936",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "320024 356443\n141735 397394 196716 421166",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "129913 313142\n302194 63287 210503 311940",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "999999 2\n999999 1000000 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}