{
  "problem_code": "problems",
  "title": "Slink",
  "tags": [],
  "text": "Slitherlink is a puzzle published by Nikoli, the Japanese company that\r\n   popularized Sudoku. Slitherlink puzzles are gaining momentum, and books of\r\n   Slitherlink puzzles have started showing up around the world. The puzzles\r\n   are simple to understand, but can be challenging to solve. The puzzle is\r\n   simply a rectangular grid of dots that forms a collection of cells, every\r\n   cell being either blank or containing an integer from zero to three. The\r\n   challenge is to connect the dots with line segments to form a cycle (a\r\n   connected path such that every vertex has precisely two incident edges), in\r\n   such a way that every cell with a value has exactly the number of incident\r\n   edges as the digit it contains. Cells with no value may have any number of\r\n   incident edges. A valid Slitherlink puzzle always contains sufficient\r\n   non-empty cells to guarantee a unique solution. Below is an example from the\r\n   Nikoli web site of a Slitherlink puzzle and its solution.It was shown by Takayuki Yato at the University of Tokyo that the general\r\n   Slitherlink problem is NP-complete. (If you are not familiar with this\r\n   concept, informally it means there is no \"efficient\" algorithm to solve the\r\n   problem.) With a slight modification and some simple heuristics, however,\r\n   programmatic solutions are possible. Our new puzzle, which we will term\r\n   Slink, differs from Slitherlink only in that the puzzle may not have empty\r\n   cells. That is, every cell must specify the number of incident edges. Below\r\n   is the Slitherlink puzzle above converted to Slink (the added numbers are\r\n   shown in gray). Note that the solution does not change, only the information\r\n   given in the puzzle itself.The heuristics for solving Slink arise from the nature of the puzzle\r\n   itself. For example, consider a cell containing a zero. There must be no\r\n   incident edges, therefore all edges incident to all zeros can be immediately\r\n   removed from consideration as part of the solution path. Consider a three\r\n   next to a zero. Because all the edges incident to the zero will be\r\n   eliminated, the common edge shared with the three is also eliminated. But\r\n   that leaves only three edges around the three, and therefore those three\r\n   edges must be part of the solution path. The following table specifies the\r\n   heuristic rules that must be properly applied to solve a Slink puzzle. The\r\n   \"x\" characters between vertices mark edges that are not part of the solution\r\n   path, while line segments between vertices mark edges that form part of the\r\n   solution. Grey elements are the pattern the rule is based on, black elements\r\n   indicate the additional edges that should be included or excluded if the\r\n   rule is matched. Note that the pictured examples are for demonstration\r\n   purposes only and donotillustrate every possible arrangement of the\r\n   stated rule!ExamplesRule SpecificationThe easiest and most obvious of all the rules. Cells containing a\r\n         zero have no incident edges, so all the edges around a zero should be\r\n         removed from consideration as part of the solution path.If a cell contains the valuenand onlynincident\r\n         edges remain (i.e. have not been eliminated), then thenremaining edges must be part of the solution path. Two examples of\r\n         this occurring are shown here.If a cell contains the valuenandnincident edges\r\n         have already been included in the path, the remaining edges can be\r\n         eliminated. Two examples of this occurring are shown here.If two 3's are adjacent to one another, the common edge between\r\n         the cells as well as the outer edges of both cells are part of the\r\n         solution path. One example of this arrangement occurring is shown\r\n         here.If two 3's occur diagonally adjacent, the opposing corners as\r\n         shown here must be part of the solution path. One example of such an\r\n         arrangement is shown here.If an edge enters a vertex for which only a single exit remains,\r\n         that exit must be part of the solution path. One such example is shown\r\n         here.If a vertex has two incident edges, the other edges can be\r\n         eliminated from consideration as part of the solution path. One such\r\n         example is shown here.If any vertex has three incident edges excluded, the fourth\r\n         incident edge can be excluded as well. One possible arrangement of\r\n         this occurring is shown here.A 3 for which two of the exits are blocked as shown, such as in a\r\n         corner of the puzzle, must include the two edges incident to the\r\n         blocked vertex.If the exits at one corner of a 2 are blocked, and one exit at an\r\n         adjacent vertex around the 2 is also blocked, then the unblocked exit\r\n         at that adjacent vertex must be part of the solution path. One example\r\n         of this arrangement is shown here.A 1 for which the exit paths at one of its incident vertices are\r\n         both blocked as shown, such as might occur in the corner of the\r\n         puzzle, must also eliminate the other two edges incident to that\r\n         vertex as shown.If the solution path enters the corner of a 3, and the exit that\r\n         goes away from the 3 at that same corner is blocked, then the two\r\n         edges around the three incident to the opposite corner must be part of\r\n         the solution path.If a 3 and 1 are diagonally adjacent, and the corner of the 3\r\n         furthest from the 1 has the exit segments blocked as shown, then the\r\n         edges incident to the far corner of the 1 becomes blocked. The\r\n         opposite is also true; if the far corner of the 1 had been blocked,\r\n         then the exit segments at the far corner of the 3 would become blocked\r\n         in the same manner.If the solution path enters the corner of 2 and the path leading\r\n         away from the 2 at the same corner is blocked, then if one of the\r\n         paths leading away from the 2 at the diagonally opposite corner is\r\n         also blocked, the other edge leading away from the 2 at that same\r\n         corner must be part of the solution path. One example of this\r\n         arrangement occurring is shown here.If the solution path enters the corner of a 1, and the exit that\r\n         goes away from the 1 at that same corner is blocked, then the two\r\n         edges around the three incident to the opposite corner must be\r\n         eliminated from the solution path.InputThe input for this problem is a set of Slink puzzles to be\r\n   solved. The first line of a Slink problem's input contains two integers,randc, separated by a space, the number of rows and the\r\n   number of columns in the puzzle. The nextrrows of the input containcintegers, space delimited, valued from 0 to 3, which specify the\r\n   content of the puzzle. The minimum dimension of a puzzle is 2 by 2 cells,\r\n   and the maximum dimension is 20 by 20 cells. It is guaranteed that a unique\r\n   solution to every input puzzle exists and can be determined with the above\r\n   rules if a rule is always applied when it can be applied. A line with values\r\n   of zero forrandcmarks the end of the input.OutputThe output for this problem is a graphical representation\r\n   of the Slink puzzle solution. The first data set is 1, the second data set\r\n   is 2, etc. On a line by itself display the data set number, followed by the\r\n   solution in exactly the format demonstrated below. Vertical edges are output\r\n   as the vertical bar '|' character, horizontal edges are output as dash '-'\r\n   characters, vertices where the path changes direction are output as plus\r\n   signs '+', and cell numbers are always displayed with a blank to the left\r\n   and to the right. Further, surround the entire output with a border made up\r\n   of hash marks '#' such that the number in the upper left cell of the puzzle\r\n   always occurs four positions to the right of the border and three position\r\n   below the border, and the number in the lower right cell always occurs four\r\n   positions to the left of the border and three positions above the\r\n   border.ExampleInput:8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0Output:1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
  "sample_input": "Input:8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0Output:1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SLINK",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0",
      "expected_output": "1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 4\n3 5 2 6 2 9 3 1\n5 5 2 4 2 6 9 9\n7 3 7 6 5 1 5 10\n8 2 2 9 8 1 5 6\n6 9 4 1 2 10 4 8\n10 1 7 9 1 1 2 8\n7 6 9 1 4 3 4 2\n6 5 8 4 5 3 7 8\n9 10\n9 6 9 8 2 9\n2 10 6 9 9 8\n2 8 10 4 10 10\n2 10 3 2 9 6\n3 8 7 3 7 3\n8 10 1 9 5 1\n6 9\n4 6\n1 8\n9 1\n3 9 5 4 10\n4 3 1 8 1\n10 4 3 3 1\n2 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 10\n5 7 4 9 4 7 4 2\n9 1 10 1 4 9 4 9\n3 4 10 9 2 10 10 10\n3 4 1 8 1 6 10 9\n7 7 10 5 5 9 3 4\n3 7 2 9 7 1 8 3\n1 6 7 10 7 10 4 7\n10 10 4 8 2 7 3 4\n2 1\n7 4 3 2 9 4\n6 6 5 7 2 5\n6 2 6 7 7 6\n5 4 5 2 8 1\n9 8 6 9 3 9\n6 3 8 8 6 3\n1 9\n8 8\n10 1\n1 1\n4 5 7 8 2\n7 8 5 1 5\n2 4 7 10 1\n6 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n3 2 2 1 10 2 2 4\n8 1 9 5 8 2 10 7\n10 2 1 7 6 9 3 10\n7 6 7 6 4 3 10 2\n1 10 5 1 6 10 9 5\n5 9 10 9 1 4 4 1\n3 3 8 6 9 4 5 1\n4 2 2 5 5 8 8 8\n5 3\n4 10 7 3 4 8\n4 5 3 9 1 9\n9 3 1 8 10 9\n8 1 8 4 7 7\n9 4 8 1 7 5\n10 1 3 5 4 9\n10 3\n7 10\n4 10\n2 6\n7 5 7 7 4\n5 3 8 5 8\n4 2 6 3 8\n3 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "61 66\n20 79 39 52 90 59 67 65\n79 40 18 20 81 90 34 71\n38 15 24 15 53 2 10 8\n60 15 65 8 54 66 78 95\n18 42 8 31 11 97 100 31\n98 74 53 35 61 89 90 87\n30 92 82 70 8 15 49 91\n70 74 66 47 47 94 97 45\n5 24\n74 76 32 78 88 13\n71 36 94 87 78 7\n4 70 15 13 48 11\n79 68 93 7 80 13\n84 9 63 92 51 13\n18 19 78 17 92 12\n61 73\n32 63\n24 68\n53 59\n90 20 12 31 57\n6 45 29 45 92\n88 85 99 12 55\n51 77",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 37\n83 59 57 8 32 46 13 28\n48 47 52 31 10 95 5 91\n53 27 7 43 50 73 62 67\n36 95 94 49 65 57 38 17\n90 39 52 63 22 15 51 88\n7 41 65 99 42 61 87 47\n79 57 73 45 39 69 27 94\n51 23 6 68 2 28 52 35\n44 57\n51 76 4 50 3 43\n87 93 16 33 41 10\n6 53 32 81 73 57\n59 32 28 36 83 75\n84 73 70 93 22 24\n29 20 18 93 97 7\n35 29\n77 24\n7 88\n41 83\n37 87 11 59 65\n29 34 45 59 99\n99 46 63 16 85\n71 25",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "21 83\n2 46 57 50 52 77 28 95\n18 39 56 45 49 64 26 17\n33 81 1 50 4 13 3 91\n52 13 73 100 91 42 76 31\n15 100 29 20 98 93 11 37\n73 48 93 26 57 43 22 7\n88 51 8 31 1 74 27 99\n14 11 60 98 9 28 55 14\n31 93\n10 65 58 93 32 20\n88 43 20 94 66 41\n83 16 82 20 36 58\n49 2 95 76 4 38\n88 55 61 42 65 19\n39 38 46 53 50 20\n33 60\n61 59\n92 37\n18 12\n49 87 55 1 49\n6 72 35 31 82\n51 55 69 10 17\n50 50",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "85 1\n48 61 55 71 61 2 49 73\n62 96 89 2 32 1 50 24\n37 47 12 32 76 71 90 17\n81 40 73 84 2 6 33 62\n73 33 39 48 37 60 25 62\n95 95 30 84 21 38 18 93\n26 76 12 95 34 59 64 91\n3 82 93 95 67 48 1 19\n45 10\n94 12 62 31 38 92\n21 99 8 16 27 7\n68 93 48 65 66 67\n77 50 69 79 14 57\n81 67 45 27 26 25\n94 42 84 70 12 55\n18 46\n34 83\n38 88\n74 49\n34 70 8 59 58\n59 56 23 54 12\n41 68 49 94 93\n68 38",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "22 57\n96 77 6 91 69 26 67 14\n78 58 95 69 15 21 11 72\n5 40 35 5 65 26 94 44\n89 38 45 9 65 20 99 27\n21 31 66 67 77 66 50 100\n7 87 99 95 17 28 19 47\n35 83 93 85 76 38 17 97\n89 8 32 28 69 96 56 49\n39 32\n87 95 88 76 38 72\n58 79 67 90 10 74\n10 17 100 98 12 66\n98 54 95 67 28 56\n2 90 82 1 2 53\n16 55 34 67 74 74\n23 90\n19 45\n20 61\n2 90\n45 10 29 55 81\n18 19 31 14 94\n71 60 98 98 76\n46 34",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "50 312\n134 120 345 213 98 436 170 298\n78 193 317 216 230 92 411 274\n446 363 164 356 249 372 175 351\n153 315 90 430 352 131 310 481\n69 470 458 87 441 480 151 252\n115 79 196 144 122 366 159 453\n357 165 206 470 316 355 119 260\n292 268 494 265 368 98 246 245\n253 258\n187 127 343 419 191 134\n322 323 490 267 84 132\n59 62 300 331 484 396\n424 98 106 150 115 245\n230 175 79 342 181 154\n228 91 120 481 323 329\n53 380\n474 354\n190 192\n100 179\n183 232 101 330 117\n164 451 443 377 425\n52 200 423 71 211\n206 446",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "279 485\n190 130 128 230 468 204 182 288\n194 204 293 67 326 393 423 243\n263 419 247 361 303 87 179 212\n349 200 233 203 459 380 278 120\n62 291 346 198 191 193 259 229\n217 421 455 409 309 113 491 92\n374 436 50 296 354 440 273 105\n335 226 452 484 463 206 126 310\n158 82\n95 381 287 400 216 461\n427 370 221 332 313 323\n196 201 381 312 80 302\n137 259 57 130 359 318\n56 313 253 70 423 279\n310 410 209 59 190 148\n467 51\n91 373\n222 153\n483 491\n304 411 59 258 157\n136 70 293 437 127\n376 149 406 209 189\n347 149",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "112 365\n114 151 144 458 435 410 66 491\n174 263 453 455 183 89 93 231\n193 152 403 438 465 59 219 227\n85 123 185 225 354 185 84 86\n186 141 407 226 469 225 86 312\n372 418 390 321 300 65 386 190\n412 170 178 329 190 73 309 233\n243 155 272 247 272 115 206 274\n295 177\n200 402 114 124 92 479\n238 264 87 366 499 390\n375 338 80 276 276 339\n182 133 422 80 129 282\n163 169 447 180 172 448\n423 276 168 82 428 350\n431 446\n332 209\n267 57\n428 302\n480 50 359 307 397\n436 207 473 452 213\n394 417 425 232 227\n462 225",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "442 306\n93 406 70 362 351 454 453 434\n400 194 461 382 255 268 434 352\n351 450 491 162 345 286 459 193\n470 448 141 338 103 258 481 197\n142 237 180 167 133 150 54 136\n89 406 179 276 210 483 362 375\n317 332 481 306 292 86 325 174\n130 378 320 346 355 347 337 54\n356 160\n434 78 266 379 180 396\n358 223 222 213 412 234\n356 439 109 304 332 121\n52 96 290 224 194 451\n468 133 223 414 414 199\n192 383 95 320 277 74\n114 292\n415 431\n110 377\n221 471\n339 341 93 455 159\n134 317 284 96 261\n283 270 454 447 312\n226 134",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "146 263\n331 298 413 184 267 191 421 342\n395 223 212 393 66 153 75 251\n491 297 476 326 284 172 443 152\n467 84 353 373 400 104 264 234\n465 287 426 315 329 363 112 75\n164 295 205 64 149 105 414 283\n159 248 173 412 430 458 63 254\n451 211 77 203 71 406 279 145\n168 129\n397 224 155 249 119 447\n149 113 61 83 213 211\n60 361 159 322 495 476\n322 62 161 86 496 496\n62 344 297 318 150 135\n441 357 335 117 381 127\n189 126\n130 232\n119 248\n232 183\n212 299 76 85 160\n141 434 366 482 202\n258 334 498 130 311\n449 477",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "268 191\n240 224 398 170 56 171 482 479\n495 51 187 138 460 86 303 304\n333 349 482 155 123 208 487 470\n221 92 334 338 412 478 382 91\n272 134 271 472 491 335 296 152\n330 400 450 475 368 477 408 262\n365 177 424 133 131 394 200 438\n484 184 51 93 460 124 143 376\n454 276\n344 194 434 102 183 63\n104 320 254 62 339 161\n406 341 144 408 277 321\n428 183 271 433 155 433\n325 273 137 224 285 286\n215 191 496 111 373 479\n126 343\n421 248\n206 177\n190 77\n247 296 424 149 378\n466 168 460 452 280\n177 141 177 127 196\n289 256",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "272 104\n140 313 434 136 321 348 170 343\n105 337 168 433 231 464 180 148\n128 286 154 362 235 174 403 336\n145 219 127 347 352 242 490 122\n467 304 234 182 223 113 62 297\n238 117 357 294 142 385 120 295\n293 234 279 371 369 124 124 390\n98 53 411 306 203 193 336 276\n190 128\n213 446 299 388 416 92\n468 299 375 494 267 72\n221 199 229 366 144 167\n409 325 193 268 320 67\n476 400 441 455 64 83\n480 417 386 459 228 480\n306 450\n355 332\n152 290\n81 356\n65 340 321 355 319\n483 113 480 345 483\n159 244 168 52 195\n397 357",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1\n2 1 999 999 2 2 2 1000\n999 999 1000 1 999 999 999 2\n1000 1000 2 999 1 1 999 2\n1 2 1 1000 999 2 1000 1\n999 999 999 2 2 999 1 2\n999 2 1000 1000 2 2 999 999\n2 1 999 1 2 1000 1000 1\n999 1000 2 1 999 999 1 2\n1000 1\n1000 999 999 1 999 2\n1000 1 1 2 999 999\n1 999 1000 1000 999 1\n1 1 1 999 1 1000\n2 1000 1000 1000 1000 1000\n1000 999 999 2 999 1000\n1000 2\n1 999\n999 2\n1 1000\n999 2 1000 1000 1\n1 1000 1000 1000 999\n999 1000 1000 1 999\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n999 2 1000 1 1000 2 2 999\n1000 1 1 1000 999 999 1 2\n2 1000 999 1000 1 999 1 1\n999 999 1000 999 999 2 999 2\n2 999 1000 2 2 999 2 2\n1000 1 2 2 999 999 2 2\n2 2 1000 1000 1000 1 1 999\n2 1000 1000 999 2 1 2 2\n2 999\n999 999 999 999 2 1\n999 2 999 999 1 1000\n2 1 999 1 2 1000\n2 2 999 2 1 999\n1 2 1000 1 2 999\n1000 1 1000 999 2 1000\n1000 1000\n1000 2\n1000 2\n1 1000\n999 1 999 999 1000\n1 2 1000 1 2\n2 1000 999 999 1\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}