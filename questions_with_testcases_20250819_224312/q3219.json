{
  "problem_code": "problems",
  "title": "Age of Empires",
  "tags": [],
  "text": "This is the hard version of problemSC1.\"Age of Empires\" is a famous real-time strategy game. Resource is one of the most important consideration when playing this game. In this game, there are four different types of resources: food, wood, stone and gold.The Villager is a common civilian unit for almost every game. They are the backbone of all civilizations. The Villagers are arguably the most important units in the game because they are able to collect all the resources. Each villager could gather A1 units of food, or B1 units of wood, or C1 units of stone, or D1 units of gold. Note that the villager can not split one second into smaller pieces to gather different types of resource. For example, a single villager can not gather A1/2 units of food and B1/2 units of wood for a single second. Moreover, all kinds of recourse are gathered exactly the end of that second. Nevertheless, different villagers could gather different types of resources at a time.You can also train more villagers to speed up the process of gathering. To train a villager, you must spend X units of food at the beginning of a second, and a new villager will able to work after T seconds. Please note that at the beginning of the second you start to train a villager, you must have not less than X units of food. All villagers are trained at the Town Center but unfortunately there is only one Town Center, so your can only train one villager at a time.You have N villagers at the beginning of the game with initially no food, wood, stone or gold at all. You are interested in the fastest way to gather enough resources, more precisely, at least A2 units of food and B2 units of wood and C2 units of stone and D2 units of gold.InputEach test case consists of three lines. The first line contains four integers A1, B1, C1 and D1 (1 <= A1, B1, C1, D1 <= 10^18), indicating the amount of resource a villager can gather for each type in a second. The second line also contains four integers A2, B2, C2 and D2 (0 <= A2, B2, C2, D2 <= 10^18), indicating the amount of resource required. The third line contains three integers N, X and T (1 <= N,X,T <= 10^5), indicating that you have N villager at the beginning of the game, and it will spend X units of food and T seconds to train each new villager.All integers are sepearted by single spaces.Process until EOF is reached.OutputFor each test case, output a integer - the minimum time to gain enough resources. See the example for more format details.ExampleInput:1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25Output:Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
  "sample_input": "Input:1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25Output:Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AGE2",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25",
      "expected_output": "Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3 3 5\n4 1 2 7\n9 8 5\n8 5 10 6\n5 4 7 3\n2 8 2\n8 2 10 1\n5 10 2 3\n8 3 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9 9 1\n1 1 7 2\n7 2 9\n4 7 2 4\n8 9 6 7\n5 1 2\n9 3 7 6\n9 4 5 10\n3 2 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 7 4\n7 10 1 6\n4 8 10\n8 2 2 6\n3 2 7 5\n8 3 4\n7 4 4 4\n2 5 3 5\n9 7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "40 37 21 76\n38 35 41 24\n25 35 14\n21 21 16 67\n60 31 76 3\n44 29 12\n43 71 48 50\n82 76 69 4\n90 18 47",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 35 96 68\n31 1 40 45\n97 34 5\n41 74 11 4\n79 95 4 100\n74 29 72\n3 97 8 16\n68 40 6 86\n5 19 63",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 52 49 56\n76 53 3 7\n30 23 51\n24 72 27 69\n38 15 50 3\n14 90 70\n74 29 78 85\n99 55 79 1\n9 76 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 99 85 23\n19 72 23 7\n74 51 37\n91 4 9 80\n46 6 61 43\n43 71 4\n59 89 59 100\n29 59 64 39\n1 86 43",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 5 89 43\n77 89 34 67\n75 21 75\n47 92 76 37\n73 47 21 17\n94 70 90\n43 100 26 79\n60 13 68 33\n71 56 78",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "483 328 443 438\n196 251 71 263\n67 54 140\n463 354 83 151\n401 267 153 263\n491 281 189\n344 64 321 110\n338 219 230 303\n157 415 280",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "478 99 237 262\n175 117 428 434\n403 258 211\n199 303 145 362\n251 162 76 484\n377 317 172\n89 244 446 225\n174 332 463 409\n203 439 103",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "233 92 324 147\n365 81 296 396\n140 305 347\n225 343 357 431\n349 265 95 106\n329 433 235\n459 380 313 66\n193 410 95 280\n85 375 327",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "172 311 304 302\n199 411 406 428\n307 221 177\n276 255 422 223\n489 386 169 202\n246 373 252\n215 144 430 111\n134 444 303 170\n284 83 101",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "429 380 369 486\n76 329 418 301\n230 306 159\n351 163 463 184\n493 328 478 191\n82 92 452\n419 391 408 454\n435 100 199 290\n377 139 108",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "147 73 184 95\n449 279 326 346\n96 166 275\n384 364 446 349\n483 304 284 272\n95 161 255\n270 315 466 192\n336 247 336 325\n127 463 490",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "493 117 390 414\n497 275 257 68\n60 104 366\n256 364 294 204\n126 237 268 254\n367 150 92\n241 357 273 426\n181 168 111 411\n138 83 207",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 999 999\n2 1 1 2\n1 999 2\n999 999 1000 1000\n999 1 1000 1\n999 1 2\n1000 999 999 2\n999 999 999 999\n2 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 2 999\n1 2 1000 2\n1 1000 999\n1000 1000 2 1\n1 1000 2 999\n1000 999 1000\n1000 2 1 999\n1000 1 1000 1\n1000 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}