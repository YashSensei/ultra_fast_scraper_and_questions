{
  "problem_code": "problems",
  "title": "LCM GCD Love",
  "tags": [],
  "text": "Bob fell in love with LCM and GCD. So much that he started seeing LCMs and GCDs everywhere. Betty, his girlfriend was jealous and she gave Bob an array A[ ] of integers, which had nothing to do with LCMs or GCDs.Quickly, naughty Bob evaluated a new array B[ ] containing n integers, such that B[i] is LCM(1, 2, 3 ... A[i]), A[i]>0. When A[i] is 0, B[i] is also 0.Angry Betty decided to give m queries to Bob, each being one of the following type:\"0 i j p\", meaning add 'p' to each element in A[i...j]. -300000 ≤ p ≤ 300000, 0 ≤ i ≤ j < n\"1 i j\", meaning print the LCM of all elements in B[i...j]. 0 ≤ i ≤ j < n\"2 i j\", meaning print the GCD of all elements in B[i...j]. 0 ≤ i ≤ j < nInputFirst line contains n (n ≤ 100000) and m (m ≤ 35000).Second line contains n integers in the original array A[ ].Next m lines contain one of the above said queries.It is guaranteed that A[i] after any number of updates will satisfy 0 ≤ A[i] ≤ 300000.OutputOutput one line for each query of type 1 or 2, modulo 1000000007.ExampleInput:5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4Output:60\r\n1\r\n60\r\n2",
  "sample_input": "Input:5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4Output:60\r\n1\r\n60\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LGLOVE",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4",
      "expected_output": "60\r\n1\r\n60\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8\n7 4 4 6 5\n4 8 5\n9 7 4\n6 2 7 6\n3 2 8\n2 2 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 9\n4 5 1 2 9\n5 9 1\n2 9 7\n4 1 4 1\n3 4 3\n10 2 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n10 4 8 10 7\n5 6 9\n6 5 2\n10 7 1 2\n9 1 6\n5 10 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "33 24\n7 46 44 27 76\n39 57 56\n44 67 10\n78 91 75 2\n95 34 73\n32 87 77",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 32\n96 6 44 30 27\n39 16 44\n69 78 96\n11 81 60 99\n41 45 26\n11 93 70",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 84\n40 88 43 40 85\n2 65 16\n40 9 55\n5 10 13 26\n15 39 30\n3 68 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "63 34\n57 27 88 6 81\n19 43 74\n97 2 74\n74 90 2 63\n63 6 88\n42 49 10",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 8\n51 38 48 35 73\n49 53 69\n20 25 29\n31 46 86 88\n17 74 9\n55 28 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "36068 25106\n41225 27503 23870 8549 24940\n35598 24584 30784\n26312 33230 20386\n29636 20388 35962 28012\n31232 5808 45965\n31498 32590 32183",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "8014 29708\n19118 23413 23761 47520 28202\n7190 38540 19597\n17824 36897 26475\n44549 46411 5648 17625\n36324 29944 8243\n43608 46345 40323",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "37866 44444\n22162 31815 34059 42709 17584\n42413 16155 22545\n42609 15866 44285\n44482 18477 25178 44681\n16001 6134 42556\n17450 31881 14069",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "39209 34650\n36925 24950 7540 20414 37103\n14002 18548 32800\n6040 19380 22351\n13527 14869 26146 22792\n24587 12699 27339\n42139 43470 46937",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "28612 37745\n24077 9140 26234 18132 46725\n27356 11849 27970\n39978 9958 33490\n8384 21900 10565 24514\n45199 45974 37681\n46144 18819 27497",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43863 14064\n5753 31733 15740 39602 14601\n48547 10459 41026\n11170 44023 24512\n44990 38657 8257 21159\n17957 28683 26284\n31774 40226 25110",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "22526 22027\n29855 22599 28827 13480 45293\n14464 34756 39426\n12374 44019 30525\n32395 42528 6683 43629\n9533 31452 38215\n48084 16106 25346",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n2 100000 99999 99999 2\n1 99999 99999\n100000 2 1\n2 100000 1 2\n2 99999 2\n1 99999 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 2 100000 1 1\n99999 99999 1\n100000 99999 1\n2 99999 100000 2\n2 100000 2\n99999 100000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}