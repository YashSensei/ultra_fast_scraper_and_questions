{
  "problem_code": "problems",
  "title": "Simple Numbers with Fractions Conversion",
  "tags": [],
  "text": "Every integer numbernis represented in positional number system of baserby a sequence of digits 0 <=di<r, decimal point ',' and fractional part, so the value is equal to:n=d0+r*d1+r2*d2+r3*d3+ ... +r-1*d-1+r-2*d-2+r-3*d-3+ ...Your task is to convert a given number inr-base representation intos-base representation withldigits after decimal point (no rounding - use floor), for example: decimal 231, 5 into binary 11100111, 1 with one digit after decimal point. Assume thatr<= 36 and the digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z.InputN[the number of series <= 1000]n r s l[n< 361000+ 1,r,s<= 36, l <= 1000 ]Outputn[s-base representation of numbern]Text grouped in [ ] does not appear in the input and output file.ExampleInput:10500,1 6 31 33866,DJ 22 27 1EH75,L3 24 4 3A73C,10B 13 27 26C6J,E483 22 6 2JA,L 30 5 46,5A 20 31 21,C5 14 7 1HD,6K 26 9 21001,011 2 10 3Output:5P,5551M8H,H301223231,32014MB,251255211,354310,32226,8G1,6555,239,375",
  "sample_input": "Input:10500,1 6 31 33866,DJ 22 27 1EH75,L3 24 4 3A73C,10B 13 27 26C6J,E483 22 6 2JA,L 30 5 46,5A 20 31 21,C5 14 7 1HD,6K 26 9 21001,011 2 10 3Output:5P,5551M8H,H301223231,32014MB,251255211,354310,32226,8G1,6555,239,375",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TCNUMFL",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "10500,1 6 31 33866,DJ 22 27 1EH75,L3 24 4 3A73C,10B 13 27 26C6J,E483 22 6 2JA,L 30 5 46,5A 20 31 21,C5 14 7 1HD,6K 26 9 21001,011 2 10 3",
      "expected_output": "5P,5551M8H,H301223231,32014MB,251255211,354310,32226,8G1,6555,239,375",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5 2 10 1 10 7 7 9 6 1 8 1 5 3 7 8 2 4 1 1 2 1 8 4 9 5 6 1 8 10 4 5 1 2 1 2 3 10 6 3 9\nycqub 3 2 ug 1 10 zxzexr 6 1 iauyqfga 7 3 aufvr 9 4 fzxj 5 9 o 8 4 r 2 9 nqzd 8 3 kzvzjmn 8 7 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 9 7 2 6 1 4 8 7 9 10 7 6 4 2 4 4 10 9 9 10 3 10 4 10 4 5 8 10 8 5 5 1 5 8 5 10 4 6 1 7\ndazhl 1 4 binoucg 3 9 fw 4 5 pmcs 7 9 yrcgf 3 1 x 2 8 utdb 4 9 frrsd 4 6 fuk 5 10 qbdtkfhvg 7 6 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 3 2 9 7 2 5 3 10 8 6 1 4 1 3 7 6 2 7 2 10 3 10 6 9 3 9 8 3 5 10 4 1 8 4 1 7 1 4 8 1 9\nkkzog 7 2 p 2 7 naeq 4 2 wvqpvvcb 8 3 jladkz 2 1 d 5 2 x 9 7 cwvlt 7 5 zfl 9 10 oqpyril 10 10 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "17 15 56 22 88 44 15 98 23 15 17 95 23 61 10 98 33 38 61 49 93 42 38 73 11 4 62 14 64 16 28 32 8 32 25 6 14 66 69 86 78 7\nfzsdwfp 40 41 lvmtnrmw 16 77 ceug 95 88 dyuvfut 71 32 qrefrgmh 54 100 chap 68 31 gt 87 100 t 65 40 rj 97 9 ubkygj 67 40 32",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 51 4 55 76 18 11 97 100 51 67 2 21 84 37 25 20 91 18 33 71 90 61 87 99 100 10 10 84 59 67 85 43 6 9 16 4 87 71 88 91 32\njfzigt 83 56 lfw 40 50 xlliemg 28 52 cbml 77 63 iy 12 6 do 70 61 ufa 11 34 yyfkg 14 32 tunf 51 82 gulm 44 24 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "85 37 78 62 33 18 96 56 90 33 63 95 50 52 54 11 86 20 89 75 7 96 96 88 61 16 84 13 60 55 21 81 65 88 24 64 83 14 16 94 90 21\nkwjoym 6 12 mtakbfh 72 54 qcc 94 79 kjr 74 31 poxhsiif 32 68 xgqgb 66 88 h 54 78 gzv 72 78 plhnh 22 68 yuyifxxr 49 15 72",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 65 1 20 74 38 24 14 87 86 37 99 98 32 86 24 29 22 90 82 40 54 4 81 57 46 76 81 1 3 16 60 40 7 91 28 70 81 5 93 13 63\ndfygrfn 11 63 arsxiekg 3 12 aacy 81 77 adsszgrem 39 23 fnyr 91 43 omry 92 13 nfg 60 44 up 15 88 tjesi 30 20 tklrxx 98 73 83",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 83 79 31 95 54 23 56 35 31 35 6 49 31 56 14 23 92 5 73 9 66 95 79 69 88 3 62 60 54 100 81 56 41 76 9 90 68 62 26 48 97\nid 13 46 o 40 59 awpbfksv 80 30 imiwedn 29 60 tcb 2 83 hxcc 72 41 ea 49 47 wzndy 10 44 qc 36 27 cjlna 92 28 97",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49191 151719 180352 68797 49034 62896 143834 73975 74978 141426 101525 29512 45433 121585 29639 94790 72674 124139 128882 139237 90020 44578 164982 157499 104822 64020 62266 114129 143902 55207 23327 99176 36859 89465 178965 144336 145292 140160 134985 45112 177586 76883\nelepz 36514 180109 pbdjn 23892 145938 fmy 57769 99019 lycbifmmb 130348 23934 owesfj 174669 64221 fbk 83389 86074 nz 42196 53916 v 95773 150355 adbhgk 89066 53376 btzano 105391 149079 91798",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "72484 50648 107457 117608 125106 28430 114950 170238 146149 127096 21952 37968 103499 91180 156644 176247 177895 123300 164317 106742 156763 44306 157895 48962 120756 133468 160266 28942 148260 170482 63150 169066 152023 93987 72984 137537 142959 25969 90832 149292 35394 139860\nlrmyzar 75018 76497 afhsz 84716 68602 okubnl 46047 165242 szrwocx 71952 62354 jimbu 154601 82855 scok 65751 21518 yor 155830 27518 wjti 50088 118439 cqt 74289 18585 rlzlj 25280 71876 86542",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "153344 100995 59771 81576 177559 21178 91353 95133 175837 131990 57292 37993 33914 81912 98575 114994 121250 114997 49505 26816 117434 51842 19194 139434 37754 72010 102507 75778 144937 81015 157628 160962 86728 73916 53214 114783 135243 130363 126940 112366 159982 22992\nsjz 179075 161793 hl 158355 79844 wrssal 101198 120267 syrzpgiv 20592 161503 vefsh 163290 23691 fnxif 107454 49353 fzmnk 168767 148359 ndai 85204 169730 juuh 48029 113848 tgzzafg 130165 67008 78165",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "55667 42310 106707 98596 41550 57889 112587 127093 140195 145782 27006 54289 123772 51270 48945 137390 134507 89153 162806 27807 36138 87084 149967 103240 78975 63800 80402 170902 40467 91577 149010 130689 32787 112177 165841 153409 99631 92225 71003 52483 54666 146406\na 140722 168434 nxiv 156006 84466 qmyouewq 129836 54098 mmbz 168695 61238 zu 46457 102341 y 165335 45610 a 74332 22173 dvj 173692 133785 fcvqgd 113020 31834 hpxtj 91511 74760 97415",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "89843 44884 173859 121739 29422 165310 25034 160900 38002 65815 173246 80261 99693 35577 40626 74072 155140 146753 176103 78176 51916 96684 158420 146771 141966 149150 83366 106548 67823 66717 108283 132267 43940 136605 80396 163700 168348 150085 163066 90957 136236 21253\nqvm 42776 112830 sl 126249 98949 gfusa 140130 77672 p 43898 141528 tkwutaqu 40473 138385 r 81898 121095 zt 91257 60363 mp 84938 153504 y 174097 70429 skllqa 157910 71187 125622",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "122961 47439 160289 135284 84279 149639 139265 158212 163329 122018 96937 51767 95798 87844 82472 98871 98998 157943 170518 46238 65025 24474 68187 129434 71356 91337 44779 158315 32712 41034 160707 135477 18467 101805 77932 20108 65726 128674 58392 179352 123282 28962\nkrctwl 75917 172268 yobetsu 66116 88186 azj 179160 39419 q 95622 117867 uxaixvct 66643 123702 hy 46865 36185 emprh 144217 99707 rmgul 20312 52122 qsni 23417 162275 y 41997 95458 165131",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "71563 165310 154369 140184 50605 51746 154091 80511 86443 91788 84493 105354 19645 109743 105500 58695 173541 99569 33556 107045 47384 126097 162479 125530 26455 135549 103772 135120 21472 84362 34716 156594 139195 115531 103854 45994 120266 98782 26191 133067 170564 179328\nnosqidq 129007 98519 mwfbom 97263 174532 pgtmq 85701 26726 fp 35904 176964 xilhrnnjcr 56679 65497 ghy 77114 63820 n 93427 50551 fu 89771 168326 lf 153102 179035 wovl 55306 114407 114887",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000\nnaop 361000 361000 agwcnl 361000 361000 pso 361000 361000 jtcubbd 361000 361000 fzprxqa 361000 361000 yguxr 361000 361000 zjotz 361000 361000 zhvc 361000 361000 wshak 361000 361000 ow 361000 361000 361000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000 361000\nqoame 361000 361000 e 361000 361000 yo 361000 361000 m 361000 361000 jz 361000 361000 fzetm 361000 361000 flhy 361000 361000 z 361000 361000 calzno 361000 361000 wkgvl 361000 361000 361000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "361000 361000 361000 1 360999 361000 2 1 1 2 1 1 2 2 360999 361000 1 361000 361000 360999 2 1 360999 1 361000 361000 2 1 2 361000 2 360999 360999 1 361000 2 360999 361000 2 2 361000 1\nxcom 1 361000 zlncz 1 361000 etd 360999 360999 wlzldjcr 361000 2 lj 1 2 v 1 2 lfk 360999 1 ojpye 361000 2 la 361000 360999 iymuhcwz 361000 361000 361000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "361000 360999 1 2 1 1 1 1 360999 361000 2 361000 361000 360999 361000 2 361000 2 2 360999 361000 360999 1 360999 1 361000 1 360999 2 361000 360999 360999 360999 361000 1 360999 360999 1 361000 360999 2 361000\nzqlht 361000 1 i 2 2 juh 360999 360999 wltojemwp 1 361000 lvip 361000 1 jx 2 2 um 360999 360999 xjiy 361000 1 qjlkwo 360999 360999 zpun 360999 361000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}