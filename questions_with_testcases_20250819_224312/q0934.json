{
  "problem_code": "problems",
  "title": "Advanced Edit Distance",
  "tags": [],
  "text": "The edit distance of two strings S and T is the minimum number of edit operations that need to be done to transform S into T . The valid edit operations are:Insert a single character at any position.Modify an existing character.Remove an existing character.For example, the edit distance of “pantera” and “aorta” is 5, because the following chain of edits is valid (and there is no shorter chain):“pantera” → “antera” → “aotera” → “aoera” → “aora” → “aorta”.We define the advanced edit distance in a similar way, but adding the swap of two adjacent characters as an extra valid operation. With this setting, the advanced edit distance of “pantera” and “aorta” is 4:“pantera” → “antera” → “antra” → “aotra” → “aorta”.You need to write a program that calculates the advanced edit distance of two given words.InputThe input contains several test cases. Each test case is described in a single line that contains two non-empty words, each of them of at most 1000 lowercase letters, separated by a single space. The last line of the input contains two asterisks separated by a single space and should not be processed as a test case.OutputFor each test case output a single line with an integer representing the advanced edit distance of the two input words.ExampleInput:pantera aorta\r\nzero zero\r\n* *Output:4\r\n0",
  "sample_input": "Input:pantera aorta\r\nzero zero\r\n* *Output:4\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ADVEDIST",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "pantera aorta\r\nzero zero\r\n* *",
      "expected_output": "4\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "wqh qcas\ntibpj ci\nfoo piclg",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "kywzqgj qssj\nkil vkhsq\nrovx mv",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "izow aoax\nt ugxa\nuqaqk ccgl",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "fiv w\ntbe tc\nkos ows",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "y fhrq\nxxxdw w\ndx wxq",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "pwqnz x\nsqifn x\nc mg",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "s ow\nyugix oowjg\nphgi zs",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "zgl hq\nee ssxw\ncrhl mh",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "xiqedkt ynr\nn k\ntruvu o",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "m hdzlx\nsk qjhq\nsvhz vw",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "dwh yypc\ngikjm oelk\nl wrr",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "l yk\nuc ryayk\nvjqn qv",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "dv t\nqco ekpse\nvdlx armu",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "aw u\nxad dui\nciw y",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "sycr ry\nvlsm yeh\nxl ay",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "fpfulf pqu\ny yzjll\nbob oilug",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "q a\nte vd\nzg bmey",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "m q\ntntxh ipnw\nkblwy ut",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "i mdzc\ngae wrf\nxh wds",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}