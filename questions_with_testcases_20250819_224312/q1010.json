{
  "problem_code": "problems",
  "title": "Petya Brother and Repairment of Roads",
  "tags": [],
  "text": "Petya lives in a city named Mayapur. As in the morning, everybody likes to drink hot tea in bed. So the citizens of Mayapur need milk to produce tea. For this purpose, they want to be able to go to a milkman using the bi-directional roads. There are m roads in the city. Every year these roads become unfit for transportation, hence they have to be repaired each year.Last year Petya repaired those roads. As Petya was short of money last year, he repaired them such that with minimum budget everyone could get milk from someone. Since then he received some complaints that some people had to walk for a long distance to get milk. So this year Petya want to repair the roads such that everyone can go to their nearest milkmen to get milk. So he has to select some roads to repair such that every citizen is connected to at least one milkman and that milkman is the nearest one for that citizen. For repairing each road he needs to pay the necessary cost. As he does not want to spend a lot of money in it, He wants to minimize the cost needed in this project. Note that a milkman does not need to go to some other milkman for milk as he can take milk from his own home. But Petya was a little bit bored to plan this time so he asked his brother to help him.Now it is your job to help Petya's Brother in finding the minimum cost needed to repair the roads in the above given way. If it is not possible for a citizen to connect to any of the milkmen, output \"impossible\" (without quotes).PS: Note that you should print the minimum cost needed such that everyone can go to their nearest milkman.InputFirst line contains two space separated numbers n and m: n is the number of citizens in Mayapur and m is the number of unrepaired roads.Next line contains n space separated integers either 0 or 1 which indicates that citizen is milkman or not [1 means he is a milkman].Then each of the next m lines contain three space separated integers u, v and c, denoting that there exists an unrepaired road between u and v such that the cost of repairing the road is c.1 ≤ n ≤ 1051 ≤ m ≤ min(n × (n - 1) / 2, 2 × 105)1 ≤ u, v ≤ n and u ≠ v1 ≤ c ≤ 109OutputPrint the cost, or if not possible print \"impossible\".ExampleInput:5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5Output:5PS: for python users please make your submission using fastio or you can submit the solution into pypy.",
  "sample_input": "Input:5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5Output:5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PETYABRO",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\n4 1 1 8 9\n4 3 4\n6 8 9\n4 7 10\n10 3 7\n2 7 2\n7 5 4\n6 5 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 7\n8 7 7 3 2\n9 3 5\n4 8 6\n7 9 4\n8 5 3\n5 6 10\n2 5 10\n10 9 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n5 6 6 9 9\n8 6 2\n3 4 2\n6 7 2\n6 10 2\n3 6 8\n1 9 9\n6 3 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 30\n64 6 39 12 10\n81 17 39\n18 38 70\n61 85 9\n65 91 38\n40 81 68\n64 53 58\n9 78 21",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "97 85\n78 81 94 30 88\n39 17 47\n24 1 94\n25 8 3\n42 40 9\n28 94 12\n6 35 94\n38 7 79",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "26 49\n68 13 75 89 14\n83 69 4\n4 8 67\n77 71 47\n77 33 84\n51 28 50\n67 17 58\n34 40 15",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "66 49\n63 99 27 69 29\n12 74 8\n36 3 26\n34 76 57\n31 63 48\n55 16 54\n36 88 90\n28 56 26",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "33 42\n15 45 88 68 36\n8 60 49\n54 31 10\n47 72 62\n78 11 92\n68 64 44\n45 90 6\n94 53 67",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "241 326\n70 106 174 309 442\n243 125 422\n335 213 382\n398 81 194\n163 126 258\n430 88 419\n453 408 173\n110 490 62",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "261 244\n83 54 115 495 252\n56 377 306\n66 505 347\n505 286 186\n84 316 215\n197 358 290\n80 411 508\n506 73 90",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "480 346\n432 280 75 209 290\n387 100 286\n487 232 389\n500 470 361\n302 145 319\n463 348 63\n224 480 322\n478 442 411",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "299 261\n304 471 486 521 329\n313 484 400\n317 495 472\n195 476 216\n337 60 187\n344 85 258\n249 273 86\n473 324 62",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "284 412\n307 283 211 386 468\n82 323 139\n87 511 89\n326 355 216\n151 284 313\n269 251 105\n263 320 520\n315 87 206",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "405 117\n462 504 234 241 299\n433 388 132\n499 192 138\n267 347 260\n282 153 493\n300 338 57\n430 419 117\n174 126 232",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "341 207\n323 187 303 315 243\n418 252 100\n480 301 169\n219 162 362\n127 416 449\n271 204 106\n415 358 270\n364 313 140",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1051 1051\n1051 1051 1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1051 1051\n1051 1051 1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n1051 1051 2 1050 2\n1050 2 1050\n1 1 1\n1050 1 1050\n1050 1050 1050\n1051 1 1051\n2 1050 1\n1050 2 1051",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1050 1051\n1050 1051 2 2 1\n1050 1 1051\n1050 2 2\n1050 2 1050\n1051 2 1\n1051 1 1051\n1051 1050 1050\n1051 2 1051",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}