{
  "problem_code": "problems",
  "title": "King Graffs Defense",
  "tags": [],
  "text": "King Graff, the ruler of the land of Feerie, has a problem - his nation is under attack! Luckily, he has an army at his disposal, composed of a whopping $S$ soldiers (where $S = 2$).Feerie consists of $N$ ($1 \\leq N \\leq 100,000$) towns (numbered $1..N$), and $M$ ($1 \\leq M \\leq 500,000$) roads. The $i$th road runs between distinct towns $A_i$ and $B_i$, in both directions. No pair of towns is directly connected by more than one road, but every pair of towns is connected by at least one path of connected roads. King Graff would like to position his two soldiers in two different towns to prepare for the impending assault - however, since he's not much of a strategist, he'll choose the towns at complete random.Graff's only real concern is with his enemies using a divide-and-conquer strategy. His soldiers will be susceptible to this type of attack if there exists any single road that, if blocked, will prevent them from reaching each other by any system of connected roads. As the royal computer scientist, your job is to determine the probability that King Graff will be defeated.InputFirst line: 2 integers, $N$ and $M$Next $M$ lines: 2 integers, $A_i$ and $B_i$, for $i = 1..M$Output1 real number (rounded to 5 decimal places), the probability that the two towns chosen by Graff can be disconnected by the removal of any single roadExampleInput:4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1Output:0.50000Explanation of Sample:The map of Feerie is illustrated below:King Graff can make 6 possible choices as to where to place his soldiers, and three of those (the three with one of the soldiers being at town 3) result in defeat (if the road between towns 1 and 3 is destroyed). The probability of failure is then $3/6 = 0.5$.",
  "sample_input": "Input:4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1Output:0.50000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GRAFFDEF",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1",
      "expected_output": "0.50000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 10\n4 5\n7 6\n10 6\n4 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n6 4\n2 1\n5 3\n4 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4\n4 1\n6 9\n1 4\n8 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "46 18\n67 28\n49 35\n72 19\n29 3",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 99\n45 96\n31 89\n14 29\n56 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 96\n34 71\n23 35\n86 18\n64 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 71\n72 23\n13 2\n70 5\n99 19",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 11\n53 68\n39 73\n26 74\n55 57",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "251 54\n465 453\n299 131\n90 498\n311 490",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "307 97\n399 85\n134 273\n392 316\n345 204",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "195 386\n347 470\n462 274\n57 326\n471 349",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "448 487\n378 247\n175 191\n189 115\n410 408",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "410 237\n416 413\n77 55\n497 396\n399 414",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "58 271\n368 238\n473 196\n469 439\n456 406",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "175 218\n341 305\n218 430\n432 339\n398 229",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1000 2\n999 2\n1000 1\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n2 999\n1 2\n1 1000\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}