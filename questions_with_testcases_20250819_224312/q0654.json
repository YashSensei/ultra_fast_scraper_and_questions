{
  "problem_code": "problems",
  "title": "Encryption",
  "tags": [],
  "text": "Marko is going to write a secret letter to a friend. He thought it is better to encrypt letter so that no other person can read it. After long thought he came up with an encryption scheme which was lame but he thought it will work anyways.To encrypt a text he first wrote two infinite strings of characters first string consists only of vowels and second string consists of consonants only.aeiouaeiouaeiouaeiouaeiou....................bcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyz...Following is the scheme for encryption :let c be any character to be encrypted.let k be the count of number of times c character occurred in text to be encrypted until now.first find which of two infinite string contains that character.then look for kth occurrence of that character in that string.replace character c by corresponding character in second string.For example, encrypted text of \"baax\" will be \"abho\".InputFirst line of input will contains t, number of test cases. Then t test case follows each test case in a line. Each test case will be a string of small Latin alphabets. Length of string will be less than 5*10^4OutputFor each test case print encrypted text.Sample :Input:2baaxaaaOutput:abhobhn",
  "sample_input": "Not found",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CENCRY",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "3",
      "expected_output": "To be computed",
      "type": "small_case_1",
      "description": "Small value (≤ 5)"
    },
    {
      "input": "3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small value (≤ 5)"
    },
    {
      "input": "3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small value (≤ 5)"
    },
    {
      "input": "35",
      "expected_output": "To be computed",
      "type": "medium_case_4",
      "description": "Medium value (5-50)"
    },
    {
      "input": "28",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium value (5-50)"
    },
    {
      "input": "27",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium value (5-50)"
    },
    {
      "input": "49",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium value (5-50)"
    },
    {
      "input": "32",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium value (5-50)"
    },
    {
      "input": "722",
      "expected_output": "To be computed",
      "type": "large_case_9",
      "description": "Large value (50-1000)"
    },
    {
      "input": "400",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large value (50-1000)"
    },
    {
      "input": "207",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large value (50-1000)"
    },
    {
      "input": "227",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large value (50-1000)"
    },
    {
      "input": "643",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large value (50-1000)"
    },
    {
      "input": "676",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large value (50-1000)"
    },
    {
      "input": "930",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large value (50-1000)"
    },
    {
      "input": "8521",
      "expected_output": "To be computed",
      "type": "max_case_16",
      "description": "Maximum value (≥ 1000)"
    },
    {
      "input": "4936",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum value (≥ 1000)"
    },
    {
      "input": "92",
      "expected_output": "To be computed",
      "type": "edge_case_18",
      "description": "Random value"
    },
    {
      "input": "96",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Random value"
    },
    {
      "input": "37",
      "expected_output": "To be computed",
      "type": "random_case_20",
      "description": "Random value"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}