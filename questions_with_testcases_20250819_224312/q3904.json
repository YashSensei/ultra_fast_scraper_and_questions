{
  "problem_code": "problems",
  "title": "Money Transfers",
  "tags": [],
  "text": "Sonia is the CEO of the South Western Economic Research Consortium (SWERC). The main asset of SWERC is a group of banks spread out in several countries, which specialize in wire transfers between these countries.Money is transferred between banks which have transfer agreements. Such agreements settle a fixed fee  whenever there is a transfer between these banks. When a client wishes to transfer money to an account in a different bank, the money flows between banks with transfer agreements until it reaches the destination account. For each intermediary transaction, the client will have to pay the corresponding transfer fee.SWERC's goal is to provide the cheapest fees for its clients, using only its banks as intermediaries, and profit from its commissions. Things were going quite well until the recent economic crisis. Due to the current situation,  governments agreed to impose an extra tax on each wire transfer. Their objective is to both increase the  tax income and avoid losing money to tax havens around the world. Hence, the intention is make this extra tax as large as possible (while avoiding too much unrest).Sonia, being a savvy executive, wants to take advantage of this situation and make sure SWERC provides the  cheapest way to transfer money between banksXandY(their most frequent transfer requests). She will try to lobby the politicians so that the new fee makes this happen.  She gathered data about the transfer agreements between banks (including competitors)  but has no idea what should be the value of the new fee.TaskCan you help Sonia compute the largest fee so that SWERC can provide cheapest way to transfer money betweenXandY?InputThe first line consists of four space-separated integers:N P X Y, the number of existing banks, the number of transfer partnerships, and the identifiers of banksXandY, respectively.  The nextPlines have three space-separated integers:aibici, meaning there is a partnership between banks aiand biwith fee ci.A line with an integerM, the number of banks owned by SWERC, follows. The next line containsMspace-separated integers, the identifiers of these banks.XandYare always in this list.Constraints2 ≤ M ≤ N ≤ 1 000and1 ≤ P ≤ 10 0001 ≤ X, Y, ai, bi≤ NandX ≠ Y and ai≠ bi1 ≤ ci≤ 1 000 000 000OutputThe output should be a single integer greater than zero: the largest fee so that SWERC can provide cheapest way to transfer money between X and Y. However,  if there is no value such that this happens, outputImpossibleinstead. If the fee on each transfer can be infinitely large, outputInfinity.Sample Input 16 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4Sample Output 13Sample Output 1 ExplanationIf the extra fee is 4 or more, then SWERC can not provide the cheapest transaction fee. Example: if the fee is 4,  SWERC provides a cost of 20, using banks 1, 3, 4, 5 and 6, in this order.  However, using bank 2 as an intermediary, we can pay only 19.Sample Input 23 3 1 2\r\n1 2 6\r\n1 3 2\r\n2 3 3\r\n2\r\n1 2Sample Output 2InfinitySample Input 34 4 1 4\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n3 4 1\r\n3\r\n1 2 4Sample Output 3ImpossibleAuthor: Miguel Oliveira",
  "sample_input": "6 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4",
  "sample_output": "3",
  "link": "https://www.spoj.com/problems/SWERC14H",
  "scraped_at": "2025-08-17 00:34:29",
  "test_cases": [
    {
      "input": "6 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 8 2 9\n4 9 7\n1 9 3\n4 2 1\n9 6 8\n6 10 3\n3 3 10\n6 8 10\n9 1 10\n7\n6 6 1 3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 2 1\n4 4 6\n4 5 1\n6 9 6\n6 4 9\n3 10 7\n8 7 3\n2 7 2\n4 7 4\n5\n3 4 2 10 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 1 2 6\n2 10 4\n2 5 3\n7 10 9\n9 10 2\n1 9 10\n4 1 8\n5 8 9\n7 4 4\n2\n7 8 7 2 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "64 12 29 9\n65 43 100\n14 86 77\n36 63 70\n24 94 74\n15 58 3\n18 67 33\n37 19 41\n14 46 80\n72\n86 22 49 35 50",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 54 17 65\n69 80 52\n44 79 12\n16 96 94\n30 57 9\n48 65 53\n76 83 23\n66 67 97\n4 27 85\n20\n25 17 92 18 91",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "18 99 72 31\n12 94 9\n52 83 42\n47 54 16\n30 78 21\n77 81 82\n99 55 80\n37 14 11\n91 3 63\n27\n5 19 12 46 35",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "100 97 81 71\n34 33 96\n21 53 7\n18 6 38\n46 57 40\n40 21 15\n99 29 33\n40 32 18\n63 50 38\n99\n22 57 95 51 32",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "78 13 35 82\n57 68 26\n46 57 16\n90 92 58\n14 76 33\n77 64 37\n63 81 33\n57 88 3\n30 49 26\n34\n13 89 35 99 63",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "253 172 267 399\n388 123 190\n422 184 309\n489 108 488\n416 393 145\n191 398 461\n231 106 64\n94 170 491\n453 224 299\n141\n344 275 389 160 205",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "339 357 371 376\n306 229 307\n238 367 83\n398 57 176\n380 138 246\n194 416 430\n486 184 214\n225 282 132\n452 114 474\n272\n308 104 376 149 201",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "349 278 309 346\n150 62 215\n101 466 180\n425 412 423\n400 473 112\n167 76 321\n364 352 407\n212 420 67\n70 406 123\n392\n388 449 56 86 119",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "333 113 376 77\n145 283 484\n429 158 433\n411 395 200\n363 317 300\n171 263 106\n292 397 380\n348 236 251\n174 342 435\n324\n87 356 355 100 114",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "122 223 151 135\n291 356 208\n151 257 92\n113 287 453\n243 377 115\n444 313 310\n480 64 426\n143 52 489\n167 419 56\n425\n72 388 96 353 327",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "486 343 170 94\n367 83 386\n474 445 270\n351 295 209\n425 273 165\n70 472 53\n154 59 91\n174 349 116\n450 177 243\n205\n359 254 170 325 131",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "256 421 204 256\n343 78 443\n75 97 455\n398 466 303\n196 169 91\n266 139 382\n363 95 496\n466 269 174\n110 61 182\n342\n340 175 404 218 347",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 2 2\n1 1000 999\n2 1 1000\n1000 999 1\n999 999 1000\n1 2 1\n999 999 2\n1000 2 999\n1000 1000 1\n1\n999 1000 2 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 2 1\n1 999 999\n2 2 999\n999 999 2\n2 2 999\n1000 999 1000\n1000 999 1000\n1000 1 2\n1000 2 1000\n999\n2 2 1 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}