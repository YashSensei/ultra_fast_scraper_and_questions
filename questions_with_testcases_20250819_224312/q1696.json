{
  "problem_code": "problems",
  "title": "Can you play carrom !!!",
  "tags": [],
  "text": "Carrom board is a very popular game. There are four player in this game in dual player mode. In dual player game the team is pair with opposite side player.So, in picture you see the board and the players. Where the player A and the player C in team-1, the player B and the player D in team-2.In this game a team is play with one color pawn. So, if team-1 start playing the board they take the white pawn, and the team-2 get the black pawn for the game. If team-1 can cover all the pawn before the team-2 and the red also covered by the time then the team-1 will win. Otherwise team-2 will win if they cover their all pawn in the game.Now, There are 9 white pawn and 9 black pawn and one red pawn in the board. The game is played by different rule.In my problem of this game the rule like,The point for the one pawn is 1 and for red is 5.You can assume that which player 1st start playing the game is start with the white pawn.one team must cover red pawn and this team will get the red point. And you know the penalty rule is If one player cover one pawn of opposite team then the turn goes to the next player.Now your task is to find the winner team and points.The points count by the remaining of pawn in the board and plus the covered red pawn point by the winning team.InputInput consists of pairs of lines (at most 100 lines). Each pair contains 1 character and 3 integer. A first character is the player id (A , B , C or D) and three integer is W, B, R (1 ≤ W, B ≤ 9) separated by a space that is number of white, black and red pawn the player cover in his turn. The end of one input occurs when the first sequence starts with an \"#\" character (without the quotes).OutputFor each case if the game complete then you have to print a string “Team-1 win and the point is N.” (without the quotes) when team-1 win , Otherwise “Team-2 win and the point is N.” (without the quotes).If the game is incomplete then print a string \"Incomplete game.\" (without the quotes) when a team can not cover all the pawn of his turn.N is the total point of winner team. See the sample input/output for exact formatting.ExampleInput:A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#Output:Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.ExplanationFor the first input player A start the game so the team-1 play with the white pawn.After all input the team-1 cover all of white pawn also the red pawn, and there are 5 black pawn remaining in the board.So, team-1 win and the point is 5 + 5 = 10.____________________________________________________________________________________________________________Problem setter: Md. Hashibul Amin Hemel, Dept. of CSE. Bangladesh University of Business and Technology (BUBT)",
  "sample_input": "Input:A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#Output:Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CARRHIM",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#",
      "expected_output": "Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 5 4\npfbx 7 7 5\n5 3 3\nzw 9 5 5\n2 9 1\nqnd 8 10 9\n6 2 10\ne 8 10 4\ngo\n5 4 7\nf 5 5 6\n1 5 8\nvaiud 3 2 8\n4 6 10\nvvxtz 10 10 5\n8 10 3\nqjtpp 5 8 8\n8 10 7\nrjcw 8 3 6\ntj\n10 10 10\nqhw 9 1 4\n10 9 1\nrzt 7 1 1\n1 3 2\nvxtp 7 3 9\nry",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 7 10\nftem 5 9 4\n7 3 5\nibh 6 9 4\n9 2 6\newas 7 2 10\n7 5 2\nshzc 8 4 2\naw\n4 7 2\nv 3 6 7\n2 1 9\npikq 1 8 3\n8 2 9\nlse 10 2 7\n9 8 1\nbs 1 4 1\n2 6 9\na 2 7 10\nvu\n3 1 8\nrp 2 1 3\n10 2 3\ndmfp 1 9 1\n8 10 4\nu 1 4 1\nvk",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 1\nvmpwc 6 7 10\n4 3 2\ntdvlm 9 3 2\n9 4 10\nw 6 4 10\n3 9 6\nxeljg 6 10 1\nga\n8 7 6\ns 2 10 9\n9 10 9\nlpgea 9 8 3\n9 6 6\nwo 10 5 8\n3 10 2\nipess 10 10 3\n4 10 5\nfjt 5 3 10\na\n6 9 10\nqxkfc 8 3 8\n3 3 9\nkjhc 1 3 10\n2 2 4\nbm 4 3 8\nyw",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 68 99\nkh 59 62 59\n39 73 71\nxlrb 79 41 76\n11 12 48\ntfx 30 85 70\n97 23 94\no 63 27 38\nuk\n65 79 3\nzsr 9 70 37\n39 4 63\nvo 75 46 80\n80 45 72\nlqly 68 62 89\n51 99 85\nc 88 84 87\n92 57 57\na 11 80 66\nh\n30 78 76\nl 81 38 4\n67 18 2\nbxkfc 10 57 2\n46 10 15\ntt 68 94 25\no",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 32 16\nkbc 70 16 11\n73 30 23\ny 86 89 55\n95 88 42\nuibt 29 100 30\n72 89 75\ngfwe 74 31 82\nun\n25 47 18\nqz 98 88 84\n25 16 25\nwmiv 25 6 58\n54 34 28\nszpqi 64 93 38\n66 91 2\ngd 78 18 35\n7 10 100\nqvcg 61 20 22\npm\n85 5 56\nwso 48 25 50\n90 86 69\nfag 53 41 10\n27 90 36\nnu 62 73 28\nws",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "58 80 7\nyqf 17 79 7\n37 39 64\nbuyh 35 77 74\n94 37 57\nsyu 66 82 61\n68 9 98\nbxvd 12 55 97\nuk\n33 64 11\nsoe 26 12 45\n8 16 22\nezplk 36 77 48\n55 13 97\nq 28 33 86\n7 15 48\nidwlt 18 81 24\n23 61 93\neuos 37 69 14\nq\n15 8 18\namxa 19 13 39\n22 55 8\neewy 79 28 80\n3 9 3\nw 81 53 27\noh",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 92 50\nhgfh 4 79 35\n88 27 81\no 18 69 54\n39 40 99\npo 49 58 13\n25 46 42\new 5 64 88\nh\n10 5 5\nl 51 93 93\n19 62 28\nvobzb 76 91 50\n35 62 83\nzkce 8 71 42\n77 27 100\nmb 99 23 50\n15 81 12\ndx 21 76 15\nwa\n41 26 45\neaf 10 53 84\n29 26 86\nyq 82 90 92\n62 96 69\nejo 12 88 89\ntv",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 11 14\nxd 64 98 26\n64 37 55\nnkc 31 40 33\n3 40 64\nwmgov 15 85 51\n49 85 14\nctbe 65 55 63\nrl\n34 79 35\nvyaw 16 6 64\n64 5 80\nlgv 9 46 26\n16 92 22\nl 39 42 62\n84 58 86\nw 93 81 61\n24 43 100\nxjzvw 7 54 20\ne\n22 84 25\neapuy 51 81 22\n43 90 7\nyvmge 11 80 30\n26 75 61\nqm 54 45 21\nc",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "156 202 296\nzpri 177 370 123\n174 304 482\nvmowr 310 396 253\n268 104 178\nfinqw 311 211 284\n285 83 291\ndyy 127 267 299\nc\n385 249 494\nyjiq 428 492 358\n390 87 116\nlwecr 359 256 336\n200 241 275\nqq 198 455 309\n206 198 189\nufib 255 478 117\n491 478 334\nsota 217 344 243\nfk\n125 352 370\nk 441 321 136\n166 206 363\nfa 334 451 230\n50 221 343\nex 266 54 297\nci",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "95 486 382\nwcduq 455 326 61\n458 392 303\nf 222 343 321\n223 72 70\nu 54 53 64\n302 324 282\nmzzrg 487 109 422\njb\n56 80 117\nqidm 115 53 414\n315 228 236\nuanl 186 306 169\n384 477 135\nam 423 425 147\n192 465 441\ngzs 328 478 415\n59 196 69\nbyjkk 69 162 69\nxg\n461 337 418\nun 245 250 494\n66 436 366\np 159 498 275\n70 177 73\nhv 193 84 482\nbs",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "328 155 435\ni 186 60 448\n408 357 208\nw 236 185 298\n300 406 499\ngzmgy 137 471 399\n213 450 481\ncadi 432 232 333\ngi\n153 494 221\nzr 152 150 394\n368 325 167\norms 185 210 256\n156 260 137\ncapp 289 56 343\n343 245 321\no 384 293 262\n270 473 166\nhob 214 490 245\nsr\n436 145 221\nwomim 54 213 55\n69 294 63\nqk 270 366 349\n138 340 215\nnh 403 463 364\nl",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "163 154 350\nzzom 333 341 305\n437 239 94\nfyaqd 146 464 142\n402 304 130\npnqh 102 275 294\n306 174 271\nfu 307 71 459\nkc\n491 385 415\ndtv 246 472 255\n136 218 218\nh 472 347 287\n293 201 418\nnrgzr 486 443 481\n157 360 245\ng 204 325 381\n69 311 425\nlqa 369 393 469\nlt\n462 272 247\ngm 239 171 316\n369 149 485\nglg 446 285 402\n411 408 467\nssv 227 129 121\nz",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "488 386 494\nfxfh 291 366 447\n136 417 410\nubz 148 318 383\n317 358 449\na 257 214 291\n92 75 329\nh 69 234 172\np\n427 119 396\nmk 407 196 185\n440 238 357\ne 460 357 96\n139 275 164\nvl 272 366 336\n192 110 317\nh 190 221 358\n422 453 122\nst 291 176 374\nm\n352 176 406\nvut 304 431 317\n214 191 321\nkeza 285 417 53\n199 77 196\nnp 283 121 460\nyi",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "235 180 357\nxukc 124 90 364\n150 366 495\nft 374 51 128\n161 234 358\notsl 275 155 434\n120 384 71\nhxcg 202 210 222\nid\n206 287 326\natgpb 83 321 472\n104 130 56\nhn 498 199 425\n188 106 237\ni 312 275 264\n396 190 66\nbykty 329 177 486\n123 261 319\nfx 199 308 338\ncz\n433 304 202\njywnb 407 417 159\n491 406 147\nxjxn 490 340 497\n77 481 366\ndh 356 197 269\nxf",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "231 427 119\nvap 296 478 378\n241 264 318\nfl 310 169 323\n92 374 474\ngi 202 333 202\n486 156 431\nntq 294 182 484\nkm\n134 354 346\ndnt 346 481 68\n439 76 267\nf 196 87 344\n77 285 373\nzgbfs 221 227 206\n269 160 210\nxlnx 125 298 300\n54 364 229\noltk 394 357 440\nyg\n495 104 164\nhhjv 126 470 338\n395 284 176\niv 330 380 264\n218 428 419\ne 142 354 302\nc",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nf 1000 1000 1000\n1000 1000 1000\nhzl 1000 1000 1000\n1000 1000 1000\nyq 1000 1000 1000\n1000 1000 1000\nqxvct 1000 1000 1000\nuu\n1000 1000 1000\na 1000 1000 1000\n1000 1000 1000\nl 1000 1000 1000\n1000 1000 1000\ntz 1000 1000 1000\n1000 1000 1000\nxbsj 1000 1000 1000\n1000 1000 1000\noojod 1000 1000 1000\nfx\n1000 1000 1000\nt 1000 1000 1000\n1000 1000 1000\nu 1000 1000 1000\n1000 1000 1000\ngcwz 1000 1000 1000\nq",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nkw 1000 1000 1000\n1000 1000 1000\nhb 1000 1000 1000\n1000 1000 1000\ng 1000 1000 1000\n1000 1000 1000\nq 1000 1000 1000\nyz\n1000 1000 1000\nbq 1000 1000 1000\n1000 1000 1000\nmpel 1000 1000 1000\n1000 1000 1000\noq 1000 1000 1000\n1000 1000 1000\nrix 1000 1000 1000\n1000 1000 1000\nsr 1000 1000 1000\ngz\n1000 1000 1000\njcdo 1000 1000 1000\n1000 1000 1000\nq 1000 1000 1000\n1000 1000 1000\nqxp 1000 1000 1000\np",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 999\naqs 2 999 1\n1000 1000 2\nenll 1 1 1\n1 1000 999\nkmm 2 1 2\n1000 2 999\ni 1 1000 1\nzo\n1000 1000 2\novuxc 1 1000 1\n1000 1000 2\nqj 2 1000 999\n999 999 2\nefgk 1000 2 999\n1 999 1000\nhiqg 999 999 1000\n1 999 999\nugwz 1000 1000 999\nc\n1000 2 2\ns 2 1 1\n1 2 2\nktquh 999 1 1\n999 1000 1\nu 2 2 1000\nlx",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 1\nkdp 1 2 1\n1000 999 1\nguylt 2 1 2\n1000 1 1\nvigh 2 1000 999\n1000 1000 1\nrr 1 2 2\nk\n2 1 1000\nuset 2 1000 999\n999 999 1000\na 1 1000 1\n999 1000 999\nes 1 1 1000\n999 1000 1000\nc 999 1000 1\n999 1 2\nh 999 2 2\nn\n2 1000 1\nby 999 2 999\n1 1 1000\ntzr 999 999 1000\n1 2 1000\naapg 999 1000 999\ncw",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}