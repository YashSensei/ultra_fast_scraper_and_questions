{
  "problem_code": "problems",
  "title": "Happiness for all",
  "tags": [],
  "text": "The separatist state of Nlogonia hasNcities numbered1throughN. Some pairs of cities are connected by highways, so that if there is a highway between cityAand cityBit is possible to travel fromAtoBor fromBtoA. We say that a citizen from cityican visit another from cityjif there exists a sequence of different citiesc1, c2... cmwithm ≥ 2such thatc1= i,cm= jand there is a highway between citiesckandck+1fork = 1, 2 ... m-1.The people of Nlogonia are very sociable, so they have friends in all the cities they can visit. However, they are also a bit lazy, so that they are not happy unless they can visit each of their friends by taking exactly one highway directly from their city to their friend's.To avoid Nlogonia's scission, the queen has decided to perform a number of infrastructure works in order to make all of its citizens happy. One possibility consists in building new highways between the cities of Nlogonia, incurring in a cost ofRper new highway built. Because building many highways can be very expensive, another possibility is to build stadiums in some of Nlogonia's cities. The building of a stadium costsE, and immediately makes all the citizens happy in the city where it is built. Then again, you should know that Nlogonia's inhabitants are furthermore somewhat jealous, so that they shall never be happy if there is no stadium in their own city, but there is one in some of their friend's cities. Can you help the queen calculate the minimum cost of the construction work necessary to make everyone in Nlogonia happy?InputThere are multiple test cases in the input file. For each test case, the first line contains four integersN, M, RandE. The numberNrepresents the number of cities in Nlogonia (2 ≤ N ≤ 1000),Mrepresents the original number of highways (1 ≤ M ≤ 105), whereasRandErepresent the cost of building a highway and a stadium, respectively (1 ≤ R, E ≤ 1000). Each of the following M lines describes a different highway using two integersAandB, representing the cities connected by said highway (1 ≤ A, B ≤ NwithA ≠ B).OutputFor each test case, print one line containing an integer representing the minimum cost of the construction work necessary to make everyone in Nlogonia happy.ExampleInput:9 6 11 12\r\n1 2\r\n3 2\r\n4 5\r\n5 6\r\n6 7\r\n9 7Output:71",
  "sample_input": "Input:9 6 11 12\r\n1 2\r\n3 2\r\n4 5\r\n5 6\r\n6 7\r\n9 7Output:71",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2015D",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "9 6 11 12\r\n1 2\r\n3 2\r\n4 5\r\n5 6\r\n6 7\r\n9 7",
      "expected_output": "71",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 3 5\n5 7\n1 8\n4 4\n7 2\n3 6\n5 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8 2 3\n4 5\n7 7\n7 3\n4 10\n9 9\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 7 8\n5 1\n4 9\n8 4\n1 8\n2 2\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "75 77 44 34\n35 93\n64 46\n11 50\n28 30\n24 21\n65 75",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "52 3 98 41\n25 60\n42 39\n66 40\n40 13\n25 45\n35 92",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 75 1 31\n39 28\n67 91\n23 22\n48 39\n100 69\n85 22",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "49 73 72 35\n39 30\n29 48\n88 40\n54 54\n62 34\n23 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "63 100 44 28\n13 51\n27 91\n23 95\n82 19\n26 13\n63 28",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "102 167 134 226\n367 404\n446 326\n67 162\n99 278\n221 416\n357 432",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "437 147 422 371\n500 362\n99 431\n300 58\n354 329\n380 352\n496 199",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "493 129 298 105\n270 320\n494 357\n281 204\n488 106\n483 357\n431 404",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "491 395 239 181\n371 141\n133 182\n483 375\n220 381\n173 419\n114 472",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "56 300 126 474\n74 71\n200 407\n162 82\n326 337\n493 174\n332 441",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "196 97 404 129\n67 301\n136 451\n414 199\n176 279\n314 173\n464 442",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "411 217 147 482\n117 141\n224 429\n332 432\n109 191\n99 200\n289 401",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 1000 1000\n1 1000\n1 999\n999 1\n1 2\n1 999\n1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 999 999\n1 1000\n1000 999\n999 1\n1000 999\n1 999\n1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}