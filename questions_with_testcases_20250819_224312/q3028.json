{
  "problem_code": "problems",
  "title": "Ada and Contact",
  "tags": [],
  "text": "You might already know that Ada the Ladybug has some friends who live on a plumtree. Those friends are numbered from1toN(whereNis the number of her friends). Ada freely travels on the tree from one friend to another. As she passes a friend (with IDi), he/she always tells her \"Hey     Ada! If you meet i+1 or i-1, please give him my phone number.\". Also note that as long as someone obtains phone number of someone else, he distributes it to all friends whose number he/she has.Ada will undertake many walks on the tree (from one friend to another) and she ask you (for each walk), how many independent sets of friends she will make during her walk. The two sets are independent if nobody from one set has a number of someone else in the other set (and vice versa).NOTE:All walks are independent of each other (so no phone-distribution remains from previous walks).InputThe first line will contain two integers1 ≤ N, Q ≤     2×105, the number of Ada's friends and the number of walksThe nextN-1lines will contain two integers1 ≤ a, b ≤     N, meaning that there is a branch (edge) betweenathandbthfriend.The nextQlines will contain two integers1 ≤ a, b ≤     N, meaning that Ada will take walk betweenathandbthfriend.OutputFor each query, print the number of independent sets Ada will create by her walk (counting only friends on her path).Example Input7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5Example Output3\r\n1\r\n2\r\n2\r\n2\r\n1Example Input 26 5\r\n1 4\r\n4 6\r\n1 2\r\n2 5\r\n2 3\r\n6 5\r\n6 3\r\n3 5\r\n2 6\r\n4 5Example Output 22\r\n2\r\n2\r\n3\r\n2Example Input 310 10\r\n7 10\r\n2 10\r\n4 10\r\n1 7\r\n8 7\r\n3 10\r\n9 10\r\n5 8\r\n6 2\r\n4 3\r\n7 7\r\n2 5\r\n7 8\r\n7 6\r\n5 2\r\n4 9\r\n7 3\r\n9 6\r\n8 8Example Output 22\r\n1\r\n4\r\n1\r\n3\r\n4\r\n2\r\n3\r\n3\r\n1",
  "sample_input": "7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5",
  "sample_output": "3\r\n1\r\n2\r\n2\r\n2\r\n1",
  "link": "https://www.spoj.com/problems/ADAPHONE",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5",
      "expected_output": "3\r\n1\r\n2\r\n2\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 4\n1 1\n1 3\n2 8\n1 5\n10 8\n10 7\n6 8\n3 8\n6 9\n1 6\n1 10\n4 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\n1 8\n2 1\n6 6\n6 7\n4 7\n2 5\n10 4\n2 5\n5 3\n6 2\n2 8\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n6 4\n4 2\n5 2\n10 2\n7 3\n10 1\n1 2\n8 7\n5 9\n8 3\n1 2\n6 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "83 17\n38 29\n73 72\n20 34\n16 27\n72 30\n94 4\n59 93\n87 63\n27 52\n5 89\n49 80\n57 77",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 64\n89 38\n11 70\n70 82\n73 2\n1 20\n37 22\n72 70\n10 92\n45 58\n30 41\n8 29\n35 18",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 48\n51 25\n57 69\n14 1\n28 5\n25 4\n16 71\n42 96\n95 62\n39 74\n99 52\n63 88\n18 88",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 10\n38 98\n56 45\n13 65\n20 95\n38 76\n35 83\n13 71\n99 26\n3 69\n66 55\n24 53\n93 99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 50\n80 74\n78 42\n96 86\n43 4\n19 36\n33 21\n22 12\n6 57\n31 21\n12 75\n7 99\n13 90",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "424 275\n137 236\n477 382\n456 499\n346 247\n339 106\n68 169\n264 369\n188 89\n113 476\n379 443\n321 65\n302 250",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "433 120\n468 293\n400 194\n96 347\n345 369\n322 181\n236 80\n366 170\n357 354\n480 428\n396 469\n54 336\n265 218",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "199 408\n381 312\n204 74\n291 104\n58 364\n73 160\n98 152\n142 368\n162 378\n482 276\n289 281\n469 329\n185 405",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "154 86\n202 365\n439 383\n393 123\n385 143\n123 350\n163 480\n450 57\n431 66\n338 307\n216 213\n426 307\n330 329",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "95 428\n433 470\n322 426\n418 75\n381 209\n368 199\n452 324\n488 463\n169 270\n366 126\n403 213\n186 182\n478 481",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "447 163\n295 329\n214 397\n227 217\n227 214\n200 368\n191 267\n492 286\n349 415\n324 132\n63 375\n158 331\n426 288",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "142 427\n496 215\n338 159\n332 150\n460 137\n61 256\n100 260\n53 182\n150 415\n137 73\n245 352\n102 468\n415 454",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999\n1 2\n1000 1\n1000 999\n1000 2\n2 1\n1000 1\n1 1000\n2 999\n999 999\n999 2\n999 999\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2\n2 1\n2 2\n999 999\n2 999\n2 2\n2 999\n1 1000\n1 999\n1000 1000\n2 1000\n999 2\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}