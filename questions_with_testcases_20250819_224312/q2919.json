{
  "problem_code": "problems",
  "title": "I LOVE Kd",
  "tags": [],
  "text": "You've been invited to the \"I-Love-Kd-trees\" annual con, but first, you have to show them that you really know about great data structures, so they give you an easy task!You are given a list ofNnumbers andQqueries, each query consist of three integers:k,iandl; letdbe thek-thsmallest element until the indexi(i.e. if the first i+1 elements were sorted in non-descending way,dwould be the element at indexk - 1). Then, the answer to each query is the index of thel-thoccurrence ofdin the array. If there's no such index, the answer is-1. You have to consider that all indexes are counted starting with0.InputInput consists of one test case.The first line contains two integers,N(1 ≤ N ≤ 105) andQ(1 ≤ Q ≤ 105).The next line containsNpossibly distinct integersai(-109≤ ai≤ 109).ThenQlines follow, each of those contains three integersk,iandl. (0 < k ≤ i < N, 1 ≤ l ≤ N).OutputFor each query (in the same order as the input) output a single line with the answer to that query.ExampleInput:10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2Output:6-13599Explanation of the first query:The elements until index 4 are [2, 6, 7, 1, 8] so the 2nd smallest element is 2, and your asked for the index of its 2nd occurrence, so the answer is 6.",
  "sample_input": "Input:10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2Output:6-13599",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ILKQUERY",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2",
      "expected_output": "6-13599",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1 6 2 4 3 8 4 7 8 9 9 10 2 2 10 1 7 4 1 8 1 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 5 7 10 1 7 4 7 9 6 10 7 1 1 5 7 2 4 3 1 10 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 10 1 3 9 1 8 9 9 8 10 1 7 6 10 8 1 8 8 8 5 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "73 84 89 10 69 74 34 24 23 85 44 9 5 60 91 88 89 9 78 3 18 57 10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 93 38 60 42 58 16 24 69 43 56 46 65 98 39 9 74 67 74 15 30 20 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 40 53 22 42 77 76 31 9 73 70 97 76 23 18 4 64 97 84 10 89 8 22",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 91 28 89 70 81 8 52 10 1 69 92 92 84 97 4 37 71 61 2 93 1 15",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 46 59 16 22 65 3 50 47 45 11 70 58 55 36 82 51 47 84 6 41 12 42",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 52 47 8 6 19 36 46 49 43 37 19 45 22 9 30 45 41 15 6 22 19 29",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "14 23 26 26 44 36 36 25 14 29 26 48 31 18 28 29 52 37 29 10 11 9 26",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 31 29 26 47 16 42 11 49 46 13 48 17 13 35 52 42 22 11 12 15 18 49",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "44 6 27 16 43 38 43 14 51 29 35 47 39 25 46 21 5 34 33 43 5 48 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "33 37 48 37 42 37 32 12 38 32 13 38 45 14 36 47 38 29 44 48 9 38 9",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "31 20 52 50 14 5 27 51 43 40 11 48 16 46 10 20 44 13 10 8 43 21 27",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 24 13 22 46 28 47 22 16 17 30 11 11 35 11 10 28 50 8 50 46 35 21",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 104 2 1 1 104 2 104 2 105 1 1 1 2 104 104 104 105 1 1 105 105 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105 105 104 105 1 2 1 1 104 2 2 2 105 1 104 1 105 1 2 104 105 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}