{
  "problem_code": "problems",
  "title": "Showstopper",
  "tags": [],
  "text": "Data-mining huge data sets can be a painful and long lasting process\r\nif we are not aware of tiny patterns existing within those data sets.\r\nOne reputable company has recently discovered a tiny bug in their\r\nhardware video processing solution and they are trying to create software\r\nworkaround. To achieve maximum performance they use their chips in pairs\r\nand all data objects in memory should have even number of references.\r\nUnder certain circumstances this rule became violated and exactly one\r\ndata object is referred by odd number of references. They are ready to\r\nlaunch product and this is the only showstopper they have. They need YOU\r\nto help them resolve this critical issue in most\r\nefficient way.\r\nCan you help them?InputInput file consists from multiple data sets separated by one or more\r\nempty lines. Each data set represents a sequence of 32-bit (positive)\r\nintegers (references) which are stored in compressed way.Each line of input set consists from three single space separated 32-bit\r\n(positive) integers X Y Z and they represent following sequence of\r\nreferences: X, X+Z, X+2*Z, X+3*Z, …, X+K*Z, …(while (X+K*Z)<=Y).OutputYour task is to data-mine input data and for each set determine whether\r\ndata were corrupted, which reference is occurring odd number of times,\r\nand count that reference.For each input data set you should print to standard output new line\r\nof text with either “no corruption” (low case) or two integers\r\nseparated by single space (first one is reference that occurs odd\r\nnumber of times and second one is count of that reference).SampleInput:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_input": "Input:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MSE07E",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1",
      "expected_output": "1 1\r\nno corruption\r\n4 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 7 10\n3 3 8\n6 5 5\n6 10 4\n5 2 2\n7 9 7\n2 4 1\n6 5 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 3\n4 6 5\n6 1 1\n9 2 10\n9 10 4\n3 2 4\n3 10 2\n3 7 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 7\n9 4 6\n10 8 10\n1 2 5\n2 10 8\n4 1 4\n6 2 7\n5 5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 50 72\n20 53 25\n52 37 73\n24 78 2\n17 35 58\n47 6 13\n2 2 72\n20 83 40",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "83 99 58\n55 58 30\n82 95 25\n14 56 9\n12 65 26\n21 84 2\n42 33 70\n93 31 59",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "20 54 2\n31 13 91\n34 10 81\n7 46 18\n66 39 68\n37 77 31\n5 37 24\n13 45 2",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 34 25\n5 34 85\n74 72 40\n32 69 79\n78 63 53\n49 86 71\n30 1 99\n27 59 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 9 50\n58 69 93\n55 9 30\n94 78 3\n44 9 67\n16 68 82\n48 52 33\n59 93 41",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "261 474 239\n356 270 343\n71 88 143\n358 203 302\n84 253 403\n141 448 442\n335 339 281\n454 296 171",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "256 447 423\n272 67 361\n342 276 356\n497 458 102\n403 249 293\n484 61 219\n80 369 331\n432 396 440",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "469 372 288\n258 449 496\n301 376 423\n299 448 136\n233 214 302\n89 133 109\n52 399 341\n451 83 376",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "132 57 62\n70 276 375\n203 483 377\n86 301 441\n258 219 328\n227 255 100\n424 163 116\n310 163 437",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "259 432 102\n327 283 152\n467 328 315\n253 491 334\n74 246 385\n351 294 352\n53 346 209\n100 295 109",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "167 457 204\n84 287 418\n289 78 177\n54 231 212\n295 81 484\n488 375 211\n86 482 168\n419 453 329",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "117 461 218\n497 458 452\n422 74 430\n116 113 197\n392 64 190\n151 74 143\n85 410 240\n122 497 301",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1000\n1000 999 1\n1 999 2\n1000 1 999\n1 1000 999\n999 2 1000\n999 2 1000\n1 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000 1000\n2 1 2\n2 999 1000\n2 999 1\n2 999 1000\n1 1 1\n2 999 2\n1000 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}