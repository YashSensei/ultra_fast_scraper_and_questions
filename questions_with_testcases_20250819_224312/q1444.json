{
  "problem_code": "problems",
  "title": "Card Sorting",
  "tags": [],
  "text": "EnglishVietnameseDave’s little son Maverick likes to play card games, but being only four years old, he always lose when playing with his older friends. Also, arranging cards in his hand is quite a problem to him.When Maverick gets his cards, he has to arrange them in groups so that all the cards in a group are of the same color. Next, he has to sort  the cards in each group by their value – card with lowest value should be the leftmost in its group. Of course, he has to hold all the cards  in his hand all the time.He has to arrange his cards as quickly as possible, i.e. making as  few moves as possible. A move consists of changing a position of  one of his cards.Write a program that will calculate the lowest number of moves needed  to arrange cards.InputThe first line of input file contains two integers C, number of colors (1 ≤ C ≤ 4), and N, number of cards of the same color (1 ≤ N ≤ 100),  separated by a space character.Each of the next C×N lines contains a pair of two integers X  and Y, 1 ≤ X ≤ C, 1 ≤ Y ≤ N, separated by a space character.Numbers in each of those lines determine a color (X) and a value (Y)  of a card dealt to little Maverick. The order of lines corresponds  to the order the cards were dealt to little Maverick. No two lines describe the same card.OutputThe first and only line of output file should contain the lowest number  of moves needed to arrange the cards as described above.SampleInput:2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2Output:2Input:4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1Output:0Input:3 2\r\n3 2\r\n2 2\r\n1 1\r\n3 1\r\n2 1\r\n1 2Output:2",
  "sample_input": "Input:2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2Output:2",
  "sample_output": "Input:4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1Output:0",
  "link": "https://www.spoj.com/problems/MCARDS",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1",
      "expected_output": "0",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 10\n2 7\n6 5\n7 10\n10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n1 2\n1 10\n7 7\n5 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n8 3\n9 5\n9 5\n10 7",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "23 44\n29 58\n13 31\n95 38\n9 72",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "48 33\n37 72\n68 70\n57 63\n88 52",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 21\n64 7\n67 52\n13 52\n69 66",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "99 5\n56 15\n46 40\n11 98\n66 28",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23 94\n24 51\n87 99\n50 8\n19 96",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "15 8\n33 14\n18 20\n21 14\n33 27",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "20 42\n12 39\n34 17\n23 40\n28 5",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 15\n7 10\n27 28\n13 33\n12 23",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19 19\n10 43\n24 25\n7 36\n19 30",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 14\n9 9\n44 6\n25 36\n38 30",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "28 16\n43 18\n44 34\n31 31\n33 36",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "48 14\n39 40\n49 34\n33 49\n33 33",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "100 1\n99 100\n99 2\n100 99\n2 99",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}