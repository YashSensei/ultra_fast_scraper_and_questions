{
  "problem_code": "problems",
  "title": "Counting Formations",
  "tags": [],
  "text": "With the coming release of Macrohard Balconies 100 operating system, people are more and more interested in its new UI (User Interface), code-named “Subway”.This UI presents your desktop as a grid that is divided intoNrows andMcolumns (so you haveN×Mcells). In each cell, you can place one icon of an application of a certain type. Your applications can be of one ofKtypes, numbered 1 through K. You’re an expert in this field, so it is assumed that there is an unlimited number of applications of each type.Any placement is called an icon formation. Some of the icon formations are beautiful. An icon formation is called beautiful if and only if no pair of rows are similar. Two rows are similar if and only if for eachXthat 1 ≤X≤K, they contain exactly the same number of applications of typeX.GivenN,M, andK, you should solve for the number of different icon formations that are beautiful, modulo 109+7. Two formations are different if and only if there is a cell where the type of application in one formation is not the same as the type in another formation.You may assume that 1 ≤N,M,K≤ 50.InputThere are several test cases. For each test case there are 3 integers, namedN,M,K, in a single line. Please process until EOF (End Of File).OutputFor each test case, please print a single line with a integer, the corresponding answer to this case.ExampleInput:2 2 2\r\n5 3 2\r\n3 5 7Output:10\r\n0\r\n894953467",
  "sample_input": "Input:2 2 2\r\n5 3 2\r\n3 5 7Output:10\r\n0\r\n894953467",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FORMAT1",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "2 2 2\r\n5 3 2\r\n3 5 7",
      "expected_output": "10\r\n0\r\n894953467",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 5 1\n5 4 7\n3 4 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 6\n6 3 4\n9 6 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8 10\n1 8 6\n9 6 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 89 100\n74 25 41\n30 52 54",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "22 60 1\n73 32 77\n64 100 77",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "8 26 65\n11 84 75\n71 25 97",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "92 9 21\n84 60 82\n35 49 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "86 53 23\n82 38 14\n88 83 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "133 306 331\n75 327 432\n463 65 116",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "230 87 58\n219 231 482\n350 337 214",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "74 118 206\n202 313 305\n114 476 393",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "298 199 483\n147 410 408\n449 291 467",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "224 193 437\n72 166 86\n280 239 73",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "294 54 229\n319 484 281\n489 194 297",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "160 429 160\n214 375 390\n76 283 287",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 1000\n1 2 999\n999 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000 2\n2 2 999\n1000 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}