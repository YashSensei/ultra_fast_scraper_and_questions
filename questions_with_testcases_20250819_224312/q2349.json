{
  "problem_code": "problems",
  "title": "DCD",
  "tags": [],
  "text": "Once upon a time, there was a secret group of boys. People used to call them 'Dushtu Cheler Dol' (Gang of Naughty boys) or DCD in short. Members of DCD were very good at making fool of people.Suppose, you are a member of DCD and you want to borrow money fromNpeople (you are definitely not going to return the money because that will go against the values of DCD). Some ofÂ  theNpeople will not lend you money as they know about DCD. But at first you don't know how many of them know about it. Then there areMmembers of DCD who want to borrow money from you. As you know none of theMpeople will return your money, you will try to escape from them when they will ask you for money, but you are not sure of being able to escape. Failure of escaping means, you must give them the money they want. So, before starting you wanted to determined how much money you will have after the whole process. As many solutions are possible, you will determine an interval, which contains the maximum number of possible solutions. The difference between the starting point and ending point will be of definite size (given in the input).InputTest cases start with two integersNandM. Next, there will beNintegers in the same or different lines where[0 <= Ni<= 1015]is the amount of money you will borrow from the ithperson. Then there will beMintegers in the same or different lines, where[0 <= Mi<= 1015]is the amount of money ithDCD member will ask for.(N + M) <= 17. Then you will be given an integerD [1 <= D <= 1015], the difference between the starting point and ending point of the desired interval.There will be at most200test cases.OutputFor each test case, you have to print three integersS,TandE.SandTare the endpoints of an interval of differenceD, (S <= T).Eis the  number of solutions betweenSandT(inclusive).If there are several solutions, print the interval whereSitself is a possible solution. If still there are several solutions, print the interval having minimum value ofS.Note:Same money values achieved by different ways are considered different.If you can't escape, you will have to pay money even if you have zero or less money left. Then your amount will be considered negative.If the starting value of the interval isX, the ending value will beX + D - 1.ExampleInput:2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5Output:0 0 1\r\n11 15 9",
  "sample_input": "Input:2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5Output:0 0 1\r\n11 15 9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCD",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5",
      "expected_output": "0 0 1\r\n11 15 9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 8\n7 5\n4\n9 8\n1 1 9 10\n10\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n3 1\n10\n4 10\n3 9 3 2\n8\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n8 9\n8\n4 2\n7 4 4 3\n6\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "85 27\n52 76\n53\n80 24\n29 68 82 60\n98\n4",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 14\n19 99\n74\n76 73\n27 68 79 13\n41\n12",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "51 63\n60 76\n15\n47 15\n60 7 97 50\n46\n14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "22 48\n23 79\n25\n100 85\n70 42 59 27\n60\n90",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 23\n92 96\n64\n46 29\n10 79 37 50\n11\n67",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "57 97\n470 358\n305\n439 287\n343 439 208 482\n495\n347",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "310 189\n411 429\n480\n477 382\n179 385 50 415\n398\n475",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "364 79\n144 484\n220\n316 271\n213 220 185 196\n387\n63",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "88 409\n110 335\n367\n353 143\n474 475 389 450\n114\n357",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "476 134\n149 273\n310\n446 180\n85 474 83 203\n483\n144",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "67 149\n117 490\n75\n313 335\n494 376 454 460\n236\n138",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "404 315\n291 490\n164\n182 125\n255 287 137 266\n249\n274",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000\n1000 1000\n1000 1000 1000 1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000\n1000 1000\n1000 1000 1000 1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1\n1\n1000 1\n999 1000 999 2\n1000\n999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2\n1 1\n999\n1000 2\n999 2 1000 2\n999\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}