{
  "problem_code": "problems",
  "title": "Martian Colony",
  "tags": [],
  "text": "Martian Colony is one of the best single player strategy games developed by a renowned game development company. The player has to destroy several colonies on Mars while playing the game.The planet Mars hasNvillages numbered from1toN. Among the villages, the village numberedihasdiamount of Diamonds. There areEone-way roads between some pair of villages, that is, if there is a road from villageuto villagev, Martians can only move from villageuto villagev. A number of villages make a colony when for every pair of villagesuandvof that colony, there is a path from villageuto the villagevand the opposite. A path is a sequence of several roads. Each colony has some hit points which is the sum of the lengths of the roads inside that colony. A colony can be destroyed by using marsa points equal to the hit points of that colony. Destroying a colony will add the total number of diamonds of the villages of that colony to the player’s score.Alon is your best friend. He loves to play strategy games and trying this new one. He loves to score the maximum always. At some stage of the game he is stuck withMamount of marsa points. He wonders, what is the highest score he can gain using maximumMmarsa points. As a best friend of Alon, he seeks your help to calculate the exact score.InputThe first line of input will containTdenoting the number of test cases. Before every test case there will be a blank line. The first line of the test cases will contain 3 integersN, EandM (1 ≤ N ≤ 100, 0 ≤ E ≤ N2, 1 ≤ M ≤ 5000). The next line will containNintegersdi (-100 ≤ di ≤ 100)that represent the number of diamonds in the ith village. Each of the next E lines will contain three integersu,vandw(1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000)which means there is a road from villageuto villagevof lengthw.OutputFor each test case print a single line containing“Case X: S”, where X is the case number andSis the maximum score Alon can score.ExampleInput:1\r\n\r\n3 3 3\r\n3 3 3\r\n1 2 3\r\n2 3 3\r\n2 1 3Output:Case 1: 3",
  "sample_input": "Input:1\r\n\r\n3 3 3\r\n3 3 3\r\n1 2 3\r\n2 3 3\r\n2 1 3Output:Case 1: 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MARSCOL",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "1\r\n\r\n3 3 3\r\n3 3 3\r\n1 2 3\r\n2 3 3\r\n2 1 3",
      "expected_output": "Case 1: 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n10\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n8\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n20011364\n11866292\n40117505\n37954819\n94131888\n53088535\n7381517\n15807810",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n25714081\n3885738\n57252021\n78015981\n31853754\n23019043\n92272015\n24855140\n90694520\n33864024\n10069941\n56209516\n68618719\n99334531",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n1436751\n32586046\n31375547\n31886543\n13049136\n2261547\n95582951\n75775715",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n77145489\n44363980\n84741230\n2880088\n12236634\n71834743\n55904648\n14724760",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n4016751\n69636152\n10883219\n82864484\n40907347\n19305197\n29951058\n99528120\n3344825\n66374153",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "95\n83222\n7209\n33496\n2520\n74679\n59500\n67566\n46235\n31347\n50007\n45339\n27902\n33182\n41271\n11037\n98775\n98370\n94998\n44426\n93910\n86639\n71372\n94759\n27034\n7522\n11982\n17060\n23099\n67241\n67491\n47955\n52515\n10342\n62970\n238\n34862\n38846\n74111\n92100\n29614\n54412\n97027\n73225\n256\n81481\n94081\n55506\n67914\n55910\n35047\n24873\n88120\n15669\n33955\n34399\n43424\n26699\n87910\n22640\n87844\n15553\n91788\n58667\n3997\n93102\n43999\n75830\n77231\n46486\n92071\n34556\n29256\n45262\n50313\n90867\n77059\n77152\n24197\n55234\n62340\n40500\n96958\n61220\n20245\n80938\n33537\n12323\n31304\n43064\n44594\n86841\n33526\n92565\n49443\n85865",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "53\n31638\n57164\n80373\n66970\n48262\n30270\n9341\n18139\n51163\n46347\n25548\n31001\n40066\n79930\n11229\n42388\n75705\n50799\n64322\n53821\n33517\n37267\n68734\n1188\n61959\n95283\n71537\n38242\n30351\n94968\n77237\n54561\n76381\n7129\n95599\n6304\n9539\n22643\n36467\n29903\n61742\n28566\n32788\n50941\n51167\n40912\n58753\n91826\n10378\n99653\n91232\n32789\n22051",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "96\n28231\n52128\n32158\n29899\n32203\n8721\n5084\n8440\n85807\n79534\n48188\n8124\n74745\n36249\n38896\n7228\n97722\n86562\n14039\n3863\n94659\n24361\n94041\n88191\n55001\n1474\n18815\n75136\n8540\n66283\n96251\n95917\n32264\n53606\n22452\n75278\n1906\n92447\n76699\n40722\n85672\n86187\n89195\n78216\n48349\n88045\n62627\n3878\n13850\n95679\n13720\n16566\n74806\n13710\n59526\n98409\n45491\n15575\n85353\n46205\n97390\n68720\n81580\n10932\n38764\n91086\n43274\n5500\n60245\n37891\n56601\n92123\n79284\n3067\n83861\n46355\n44815\n57132\n79121\n3555\n77006\n99019\n36158\n38863\n98242\n64350\n62766\n73148\n19519\n11067\n9711\n39157\n75982\n28500\n67855\n12131",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n26357\n59065\n93895\n33454\n41855\n38844\n3866\n57439\n96103\n81549\n10194\n98234\n43377\n31480\n29135\n51423\n8010\n16468\n77878\n3836\n58128\n56490\n54774\n72605\n40053\n47007\n48419\n13953\n46491\n91815\n31874\n60342\n4826\n85413\n91826\n47654\n57916\n95982\n18821\n79975\n15808\n97942\n85463\n32319\n13413\n69831\n4404\n93286\n86780\n96017\n51286\n64065\n60791\n62612\n823\n30006\n82709\n72368\n38978\n48157\n23676\n53758",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n6748\n72478\n5822\n9359\n11257\n43090\n88174\n14809\n42583\n54353\n33536\n11563\n33414\n26747\n68607\n43351\n27888\n97854\n9715\n30973\n30521\n41692\n10669\n92155\n27286\n27455\n58072\n29433\n89687\n1597\n98713\n80672\n28743\n3057\n43384\n62052\n43315\n89733\n6414\n602\n19240\n124\n76959\n39249\n35349\n6195\n29938\n33879\n2267\n60499",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n64702\n50473\n62792\n58551\n7885\n26678\n20201\n79598\n86224\n17161\n16701\n64509\n6267\n52069\n37280\n20386\n8708\n66940\n56496\n44047\n32322\n61878\n61619",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "84\n72229\n3081\n51451\n47701\n31551\n55740\n57348\n45840\n59124\n21450\n44177\n62758\n51940\n30954\n78452\n32769\n83411\n48076\n94120\n49422\n29941\n46712\n25916\n84902\n27109\n69771\n75441\n21120\n3011\n16521\n9384\n34881\n66501\n52054\n62165\n94408\n63668\n8679\n9335\n63578\n95281\n89382\n67109\n78712\n50121\n51429\n16945\n95126\n95992\n56410\n62605\n38367\n48997\n46438\n92538\n65997\n76171\n74574\n23173\n3380\n22542\n39672\n65405\n32607\n74944\n14369\n65828\n75369\n64216\n15202\n53914\n488\n96387\n50440\n62747\n40671\n41882\n93473\n68309\n32847\n89146\n16026\n79756\n40445",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n52679301\n25060575\n785080\n83474168\n7467754\n631673\n54071590\n25508253\n86168434\n45722387\n20624818\n60673370\n21880\n97682223\n34340416\n24102263\n38227699\n90518590\n35353163\n80169174\n90103195\n12843215\n11195870\n32005886\n54827675\n35278386\n36329626\n24322536\n29405924\n19639968\n73358292\n56457391\n18718296\n27332842\n92326609\n75584286\n62256103\n78746688\n36451749\n99996217\n28198497\n27605992\n22757262\n75646500\n59594251\n97445976\n33611734\n93249329\n40760370\n58803403\n67177102\n91191772\n699915\n33428763\n47848484\n9365178\n24510068\n68299057\n57507070\n44417630\n60004330\n38868940\n84133259\n6429070\n39043768\n16973747\n91686400\n24231292\n10370565\n8560271\n7704375\n2643541\n89374948\n33657269\n34491640\n78758309\n91720992\n72902639\n32832709\n65002465\n94959823\n4679216\n99282526\n9708582\n16552330\n26684157\n93834745\n73771629\n34222479\n80903963\n37304804\n10853526\n83478464\n95203101\n3242718\n26226120\n78057660\n62398341\n15471731\n6229365",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n90196099\n56009984\n55387861\n44660944\n43508795\n42753179\n84078644\n9646407\n15956172\n6060552\n11869901\n33321972\n11834128\n94887856\n52921784\n96125592\n10884351\n91864743\n78788886\n24355594\n79210135\n66680988\n72203865\n95470278\n20429344\n76931561\n68091532\n66802724\n6786781\n79177863\n2868993\n77026941\n64245881\n89843018\n79096987\n91294258\n86314016\n25197749\n56401609\n6681823\n79088978\n42646859\n88519106\n8929192\n48398299\n3329556\n59722216\n3811825\n33699234\n57977511\n68441512\n31604591\n8855091\n7130025\n79885216\n52591151\n41202284\n28752740\n56984923\n67067856\n1973343\n28669185\n57323670\n88617600\n93185924\n51312153\n78214065\n12077627\n36294734\n68492508\n94596274\n88438937\n17113931\n48170994\n46829617\n94137090\n5423055\n77572046\n66946527\n85119500\n86634416\n2304078\n20076480\n29207525\n12829934\n24270142\n44951802\n13328007\n11268415\n63201732\n4291532\n79606181\n35987311\n57961292\n18632379\n45767275\n31121762\n59954213\n76834262\n51966200",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n100000000\n55434245\n1\n32499486\n100000000\n100000000\n86455955\n4268307\n100000000\n1\n81492757\n100000000\n100000000\n1\n509897\n60845453\n100000000\n1\n100000000\n1\n27215653\n76115477\n1\n100000000\n1\n1\n100000000\n100000000\n1\n100000000\n1\n1\n100000000\n22163197\n41382766\n100000000\n56504191\n82350717\n100000000\n100000000\n26929651\n1\n100000000\n32299657\n60825565\n1\n15315155\n1\n100000000\n1\n100000000\n1\n1\n74814572\n1\n34924057\n49029084\n1\n100000000\n100000000\n100000000\n1\n21313366\n48049095\n60702297\n1\n1\n46035360\n100000000\n94685575\n30513019\n99737289\n100000000\n65091036\n1\n1\n79996767\n1\n100000000\n78521255\n1\n1\n71356540\n1\n100000000\n1\n1\n100000000\n43205195\n100000000\n1\n100000000\n1\n73635818\n100000000\n92148537\n99681271\n4200101\n74450288\n2181005",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "2\n100000000\n87686986",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}