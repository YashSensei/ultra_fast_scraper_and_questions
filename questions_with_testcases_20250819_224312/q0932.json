{
  "problem_code": "problems",
  "title": "The Embarrassed Cryptographer",
  "tags": [],
  "text": "The young and very promising cryptographer Odd Even has implemented the security module of a large system with thousands of users, which is now in use in his company. The cryptographic keys are created from the product of two primes, and are believed to be secure because there is no known method for factoring such a product effectively.What Odd Even did not think of, was that both factors in a key should be large, not just their product. It is now possible that some of the users of the system have weak keys. In a desperate attempt not to be fired, Odd Even secretly goes through all the users keys, to check if they are strong enough. He uses his very poweful Atari, and is especially careful when checking his boss’ key.InputThe input consists of no more than 20 test cases. Each test case is a line with the integers 4 ≤ K ≤ 10100and 2 ≤ L ≤ 106. K is the key itself, a product of two primes. L is the wanted minimum size of the factors in the key. The input set is terminated by a case where K = 0 and L = 0.OutputFor each number K, if one of its factors are strictly less than the required L, your program should output “BAD p”, where p is the smallest factor in K. Otherwise, it should output “GOOD”. Cases should be separated by a line-break.ExampleInput:143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0Output:GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
  "sample_input": "Input:143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0Output:GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CRYPTON",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0",
      "expected_output": "GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3\n8 2\n3 4\n10 5\n6 9\n3 1\n10 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4\n9 1\n3 5\n6 2\n7 6\n10 8\n1 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\n1 2\n3 9\n2 10\n1 4\n5 10\n2 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 41\n90 72\n39 60\n32 94\n7 41\n56 77\n3 57",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "95 21\n55 57\n80 69\n78 29\n91 7\n67 26\n68 85",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "43 75\n95 46\n23 98\n36 69\n90 11\n78 26\n59 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 85\n98 28\n28 18\n48 100\n11 88\n80 57\n19 99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 36\n7 40\n66 15\n77 44\n81 27\n95 85\n38 5",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "158 365\n321 431\n270 481\n151 223\n419 100\n156 447\n298 365",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "336 86\n381 171\n463 102\n414 164\n145 481\n189 95\n241 196",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "115 453\n204 343\n455 445\n335 188\n179 391\n344 319\n60 282",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "239 425\n363 111\n478 454\n245 153\n234 125\n459 424\n353 333",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "285 426\n352 333\n242 218\n215 85\n227 390\n436 468\n243 280",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "207 341\n491 109\n386 233\n201 231\n403 217\n359 293\n89 81",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "69 375\n224 445\n329 187\n493 118\n439 128\n249 254\n352 57",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n2 999\n999 1\n1 1\n1000 2\n1000 2\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n999 2\n1 2\n1 2\n2 1\n1000 2\n999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}