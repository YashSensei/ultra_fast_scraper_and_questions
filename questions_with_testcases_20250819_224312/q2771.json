{
  "problem_code": "problems",
  "title": "Recursive Sequence (Version III)",
  "tags": [],
  "text": "Sequence(ai)of natural numbers is defined as follows:ai= biifi ≤ kai= c1ai-1+ c2ai-2+ ... +  ckai-kifi > kwherebjandcjare given natural numbers for1≤ j≤k. Your task is to computea2m+a2m+1+a2m+2+ ... +a2nfor givenm≤nand output it modulo a given positive integerp(not necessarily prime).InputOn the first row there is the numberTof test cases (T≤50).Each following test case contains four lines:k- number of elements of(c)and(b)(1≤k≤15)b1... bk-knatural numbers where0≤bj≤109separated by spacesc1... ck-knatural numbers where0≤cj≤109separated by spacesm,n,p- natural numbers separated by spaces (1≤m≤n≤1018,1≤p≤108)OutputExactlyTlines, one for each test case:  (a2m+a2m+1+a2m+2+ ... +a2n) modulop.ExampleInput:232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991Output:24878332397016NoteYou can try the problemSPPfirst.",
  "sample_input": "Input:232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991Output:24878332397016",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SPP3",
  "scraped_at": "2025-08-17 00:33:58",
  "test_cases": [
    {
      "input": "232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991",
      "expected_output": "24878332397016",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 9 2 10 6 3 5 7 8 2 1 9 8 6 1 2 10 1 5 4 4 6 9 7 10 9 6 5 5 9 8 4 1 8 7 9 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 7 10 7 8 5 10 3 1 5 10 6 4 3 1 4 9 2 2 10 7 8 5 10 6 4 8 4 9 8 4 4 5 4 10 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 1 9 10 9 2 1 7 2 1 9 9 5 9 10 1 3 5 1 3 3 1 8 4 4 1 5 8 10 8 10 8 10 3 9 1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 36 73 86 44 76 67 71 34 88 54 14 61 86 31 20 18 13 66 63 21 41 16 4 62 79 61 68 9 63 44 1 98 94 86 36 66",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "64 70 98 74 2 35 46 47 81 11 57 74 25 2 47 95 30 43 72 19 64 23 27 49 32 99 48 54 15 68 44 95 5 78 61 6 64",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "95 86 47 93 16 18 26 47 20 84 29 10 33 52 82 5 30 90 24 92 61 71 11 65 21 2 12 57 10 20 55 67 10 85 98 75 37",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "89 27 9 67 30 19 51 43 21 52 97 1 11 83 48 50 92 11 80 52 75 38 39 44 2 18 57 85 94 5 8 85 68 31 60 85 94",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 49 77 53 46 16 27 7 7 76 10 81 12 3 57 30 58 8 15 68 58 21 76 71 44 25 25 55 21 95 52 22 38 40 9 59 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "487 264 113 107 76 60 215 291 438 274 409 233 84 458 133 484 470 443 439 437 502 364 348 328 272 457 503 245 74 77 377 203 198 399 285 460 365",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "192 163 77 101 434 168 343 77 74 94 86 87 289 220 281 318 175 126 240 399 74 280 246 335 72 184 304 352 209 459 462 363 259 186 426 313 425",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "244 80 436 91 250 346 50 269 413 141 123 131 322 144 376 241 447 50 256 497 62 273 289 247 507 387 227 202 155 286 272 396 266 285 495 439 371",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "267 422 145 306 155 234 62 389 323 504 379 431 385 339 325 369 304 178 134 358 163 419 140 356 198 54 338 211 237 233 251 268 383 283 223 509 391",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "411 280 148 301 165 263 74 419 260 240 295 389 345 291 180 148 70 64 341 78 428 247 309 222 339 66 298 103 284 448 228 309 387 51 386 257 456",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "298 441 114 187 204 83 437 358 353 402 280 245 425 140 64 207 228 70 329 54 311 53 501 333 390 146 50 255 479 346 193 173 134 475 337 292 165",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "407 175 471 133 111 406 312 188 73 308 470 109 467 193 148 354 103 56 378 419 370 191 190 92 397 466 80 162 149 181 492 419 96 465 420 417 186",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 2 2 1018 1 1017 1018 1 1018 1018 1 1 2 1 2 2 2 1017 1017 1017 1017 1018 2 1017 1018 1 1017 2 1017 1 1018 1018 1 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1017 1018 1018 2 1018 2 1 2 1018 2 1018 1 2 1017 2 1018 1 1017 1 2 1 1018 1 1017 2 1 1017 1018 2 1017 1 1 2 2 1017 1017",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}