{
  "problem_code": "problems",
  "title": "Terrorist Attack",
  "tags": [],
  "text": "In his final interview Digo is given a map of a city containing N junctions connected by roads of length 1.\r\nThere is only one path between any two junctions. Each junction has a unique index between 1 and N (inclusive).\r\nThere are M civilians in the city. Everyday, each civilian visits a set of junctions.There are military camps built at certain junctions.\r\nThe terrorists are planning to attack the city by targeting some junctions.\r\nHowever due to the presence of military camps,\r\nthere is a limit to the size of explosion they can make at any particular junction.\r\nThe intensity of the bomb planted at a junction is equal to the minimum distance from\r\nany military camp to the targeted junction.\r\nThe damage of all civilians passing through a targeted junction increases by\r\nthe intensity of the bomb dropped at the junction.\r\nThe military camps set up and the terrorist targets are given in the form of the following queries:1 J : Meaning that a new military camp is set up at junction J.2 J : Meaning that the junction J is targeted by terrorists.3 J : Print the total damage done until now to all civilians visiting junction J.Initially there is exactly one military camp at junction 1.\r\nThe initial damage of all civilians is given to you.InputFirst line contains 3 integers N, M, Q. N is the number of junctions, M is the number of civilians and Q is the number of queries to follow.Next N-1 lines contains 2 integers U and V (denoting that there is a road connecting U and V).Next M lines contains one integer each. The ith line contains integer a[i] representing the initial damage of the ith civilian. Next M lines contain the description of the junctions visited by the ith civilian (First integer of every line is X, the number of junctions visited by the ith civilian, followed by X integers representing the respective junctions).Next Q lines give the corresponding queries. Each query can be described by two integers T, J, where T is the type of query (which can be 1 or 2 or 3) and J is the respective junction of the query.OutputFor all the queries of type 3 print an integer answering the query.Constraints1 ≤ N ≤ 500001 ≤ M ≤ 100001 ≤ Q ≤ 500001 ≤ X, V, U, J ≤ N1 ≤ a[i] ≤ 1000Sum of all the junctions crossed by all the civilians is less than 50001Note: The Final answer will fit in 64 bit signed integer.ExampleInput:3 1 3\r\n1 2\r\n2 3\r\n5\r\n2 2 3\r\n3 3\r\n2 3\r\n3 3Output:5\r\n7",
  "sample_input": "Input:3 1 3\r\n1 2\r\n2 3\r\n5\r\n2 2 3\r\n3 3\r\n2 3\r\n3 3Output:5\r\n7",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INS14M",
  "scraped_at": "2025-08-17 00:33:38",
  "test_cases": [
    {
      "input": "3 1 3\r\n1 2\r\n2 3\r\n5\r\n2 2 3\r\n3 3\r\n2 3\r\n3 3",
      "expected_output": "5\r\n7",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 5 5\n7 9\n6 5\n5\n4 2 2\n4 8\n1 8\n5 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 2\n7 3\n1 6\n1\n3 1 9\n5 3\n8 5\n3 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 4\n7 10\n5 1\n8\n6 6 3\n6 6\n7 3\n2 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 27 53\n25 33\n65 67\n16\n31 57 24\n73 69\n49 25\n78 97",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 23 95\n24 22\n100 12\n36\n79 53 77\n18 57\n34 31\n95 29",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 80 84\n61 21\n95 79\n78\n96 13 40\n64 5\n9 22\n95 70",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 15 4\n56 43\n54 93\n52\n64 24 26\n24 45\n24 24\n38 93",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 39 54\n11 38\n64 88\n46\n12 36 100\n32 4\n49 5\n80 96",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "56767 158646 102213\n87612 28887\n175414 50823\n125734\n39744 124647 46010\n108281 167681\n218732 184526\n92481 78920",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "36745 243525 161693\n35401 207096\n125462 90460\n230511\n36517 174343 242389\n232166 70109\n235823 231692\n126104 240229",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "244294 217855 203617\n162872 83707\n228181 98243\n54123\n168005 124575 81278\n62414 70447\n53632 62037\n183663 122734",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "212803 238124 227766\n142120 114402\n160663 88902\n69368\n150668 155367 220309\n25664 215808\n198165 160316\n229947 97583",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "40471 108598 144645\n243535 157412\n240714 167376\n170784\n137969 168631 192705\n239182 128244\n165567 124733\n215736 105063",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "209122 129121 206191\n72272 110575\n42632 139094\n186448\n194227 115190 171734\n217025 197384\n191275 215724\n176405 124480",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "32661 211935 180691\n71538 122811\n89895 122530\n166477\n74273 181501 207317\n229816 188568\n93866 116921\n226307 186935",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500001 500001 500001\n500001 500001\n500001 500001\n500001\n500001 500001 500001\n500001 500001\n500001 500001\n500001 500001",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500001 500001 500001\n500001 500001\n500001 500001\n500001\n500001 500001 500001\n500001 500001\n500001 500001\n500001 500001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 500001\n2 500001\n500000 2\n1\n2 2 2\n2 500000\n500001 500000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 500001 500000\n2 500000\n2 500000\n1\n500000 500001 2\n1 500000\n2 500001\n1 500000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}