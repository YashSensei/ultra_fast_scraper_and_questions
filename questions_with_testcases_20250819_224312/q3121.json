{
  "problem_code": "problems",
  "title": "Menu",
  "tags": [],
  "text": "Alfred wants to plan what to cook in the next days. He can cook various dishes. For each dish the costs of the ingredients and the benefit value is known. If a dish is cooked the second time in a row, the benefit value for the second time is 50 percent of the benefit value of first time, if it is prepared for the third or higher time in a row, the benefit value is 0. For example cooking a dish with benefit value v three times in a row leads to a total benefit value of 1.5*v.Help him to build the menu which maximizes the benefit value under the constraint that his budget is not exceeded.InputThe input consists of several test cases. Each test case begins with 3 integers in a line: The number of daysk(1 ≤ k ≤ 21) Alfred wants to plan for, the number of dishesn(1 ≤ n ≤ 50) he can cook and his budgetm(0 ≤ m ≤ 100).\r\nThe followingnlines describe the dishes Alfred can cook. The i-th line contains two integers: the costsc(1 ≤ c ≤ 50) and the benefit valuev(1 ≤ v ≤ 10000) of the i-th dish.The end of the input is signalled by a test case withk = n = m = 0. You don't need to process this test case.OutputFor each output, print the maximum benefit value reachable with 1 digit after the decimal point. Then print k integers with i-th integer being the number of the dish to cook on day i. Dishes are numbered from 1 to n. Print at least one space or new line character after each integer.If there are several possible menus reaching the maximum benefit value, select the one with minimum costs, if there are several with minimum costs, you can print any of them.If every menu exceeds the budget, print only the benefit value of 0.ExampleInput:2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0Output:0.0\r\n\r\n13.0\r\n1 5 1",
  "sample_input": "Input:2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0Output:0.0\r\n\r\n13.0\r\n1 5 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MENU",
  "scraped_at": "2025-08-17 00:34:08",
  "test_cases": [
    {
      "input": "2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0",
      "expected_output": "0.0\r\n\r\n13.0\r\n1 5 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1 5\n1 5\n4 4 2\n5 4\n8 8\n5 3\n6 2\n7 8\n6 2 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 3 4\n5 3\n5 6 6\n10 3\n2 10\n4 10\n1 6\n10 9\n1 4 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 8\n2 5\n4 9 3\n4 5\n6 8\n2 7\n1 9\n2 4\n5 3 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 25 38\n6 33\n46 25 40\n26 38\n31 10\n36 6\n35 16\n40 50\n8 44 4",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 32 49\n32 36\n6 23 37\n27 16\n38 31\n28 41\n44 2\n14 40\n47 45 33",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "26 22 40\n23 44\n24 45 37\n26 36\n15 49\n38 20\n33 32\n6 49\n36 47 9",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 46 32\n45 31\n45 11 48\n19 22\n9 12\n5 24\n11 26\n36 35\n2 11 12",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1 20\n2 6\n38 14 14\n40 30\n43 49\n25 28\n38 31\n43 20\n28 25 20",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "7 22 10\n15 24\n3 15 10\n24 15\n21 24\n21 18\n16 21\n3 10\n9 17 15",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18 18 15\n24 7\n24 16 2\n11 6\n7 18\n20 15\n21 19\n2 2\n12 8 7",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "18 19 9\n5 6\n24 8 2\n14 12\n14 24\n16 19\n4 20\n12 5\n11 2 13",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6 12 10\n14 14\n20 23 19\n22 5\n24 18\n14 8\n13 17\n17 17\n14 20 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "20 3 9\n14 5\n2 16 18\n20 5\n21 13\n17 19\n22 15\n5 13\n2 17 3",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "19 13 5\n22 18\n19 19 16\n20 7\n5 23\n21 11\n24 6\n25 22\n10 24 12",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "15 6 22\n15 21\n14 5 16\n20 12\n3 4\n17 20\n19 13\n21 5\n19 19 24",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50 50\n50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50\n50 50\n50 50 50",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50 50\n50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50\n50 50\n50 50 50",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "49 50 1\n49 50\n49 2 49\n1 1\n50 1\n49 2\n1 50\n50 1\n2 1 50",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 50 1\n2 49\n2 50 2\n2 2\n1 1\n1 1\n49 49\n2 49\n1 2 49",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}