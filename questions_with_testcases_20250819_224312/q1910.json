{
  "problem_code": "problems",
  "title": "Distributing V",
  "tags": [],
  "text": "As you probably know there is a new kind of energy called V-energy which is more affordable than electricity, and has some really interesting properties. The Universal Company on V-Energy has just reached your city and is currently planning the location of the distribution centers. You are given a map of the city, the list of the location of the distribution centers, and they need you to report which is the minimum amount of energy that would reach a building of the city, and how many buildings share that amount of energyV-Energy has the following properties:If a building has K units of V-Energy it will consume C units and distribute K - C to every building it is connected to. If K < C the building will consume K units and will not distribute any units of energy.If a building receives V-Energy from different sources it will only consume and distribute the energy with maximum value. For example, if a building receives K = 8 units of energy, and C = 3 it will consume 3 and distribute 5. But, if later the same building receives K = 6 units of energy, it will not consume or distribute this energy since previously it received a larger amount of energy. If later on the same building receives K = 15 units of energy, it will consume 3 units, and distribute 12 units to its neighbors.As you know, your city is a grid, with buildings on every intersection of the streets. Since V-Energy propagates only through streets, the streets map of the city is perfect for your job. Avenues run horizontally while streets run vertically. Note that sometimes a street or avenue can be blocked. The next figure shows a possible view of a city where street 1 is blocked between avenues 1 and 2, and avenue 2 is blocked between streets 0 and 1.InputThe input contains several test cases. Each case starts with a line containing the values K and C (amount of V-energy each distribution center has and amount of V-energy each building consumes). (0 <= C,KÂ  <= 10000). The next line contains two values N and M denoting the number of avenues and streets on the city (1 <= N,M <= 1000). The following line will have one value B which denotes the number of street and avenues segments that are blocked and cannot distribute V-energy (0 <= B<=  N*M-N-M). The following B lines will have four values T I J1 J2. T indicates the type of the segment, can be either 'A' of 'S' to denote an avenue segment or a street segment. I denotes the street or avenue index (0 <=I < N). If it is an avenue segment then J1, J2 are the indexes of the starting street and ending street where the avenue is blocked. If it is a street segment, J1, J2 are the indexes of the starting and ending avenues where the street is blocked (0 <= J1 < J2 <= M). The next line will have the number D of deposits (0 <=  D <= min(1000, N*M)). The following D lines will have a pair Ai Si indicating that on the intersection of avenue Ai with street Si there will be a distribution center. (0 <= Ai < N, 0 <= Si < M).The end of input is indicated by a test case with K = C = 0.OutputFor each test cases you have to print a line containing two numbers Q and P indicating the minimum amount of energy that reaches a building on the city, and the number of building with that amount of energy.ExampleInput:2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0Output:0 12 1",
  "sample_input": "Input:2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0Output:0 12 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013D",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0",
      "expected_output": "0 12 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 9 5 3 2 5 3 8 2 2 1 5 7 1 9\n8 3 2 1 10 3 nz 3 10 ziwp 2 4 3 3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10 3 9 3 3 10 9 2 9 3 2 8 9 1\n2 8 10 7 6 7 nvkw 2 6 h 3 8 4 4 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 2 9 3 3 4 5 9 1 9 6 4 10 7\n5 1 10 6 7 1 plsc 3 5 zun 4 8 9 7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 15 75 46 71 30 63 11 46 5 9 56 95 62 84\n75 14 64 41 83 86 pfflb 11 81 epb 4 74 31 51 48",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "86 79 45 55 37 94 88 30 35 19 45 66 3 37 53\n54 6 74 93 61 81 wfl 46 94 d 74 60 56 77 25",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "32 88 61 1 31 65 77 56 90 98 38 81 79 30 32\n96 98 8 19 37 28 op 87 41 urin 67 100 12 29 51",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "57 85 85 38 8 33 79 68 55 29 67 58 47 9 46\n20 76 76 46 82 37 mmfd 99 97 t 95 17 36 93 97",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "96 35 94 7 77 50 99 47 29 28 64 7 24 59 62\n13 59 47 96 77 18 okx 50 87 y 35 35 71 35 78",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "73 457 341 477 474 286 496 183 264 229 445 159 479 393 368\n227 145 345 323 101 456 peg 406 374 jqa 495 123 378 74 95",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "202 431 85 307 190 52 480 299 208 468 263 64 438 55 420\n79 452 368 254 115 52 pgc 137 236 zo 177 338 325 413 248",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "363 61 467 366 349 481 169 291 422 191 303 353 272 274 249\n451 272 479 100 209 427 lgepu 298 464 s 147 230 99 143 144",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "476 227 492 263 218 251 441 496 84 425 347 329 480 118 377\n140 416 236 167 342 56 b 223 65 vomrd 305 86 87 185 305",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "273 402 325 402 357 283 61 384 479 150 293 297 458 193 109\n240 171 212 351 491 406 fik 152 73 oace 274 308 256 135 361",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "271 51 157 71 384 426 433 405 444 87 470 481 197 189 101\n350 264 254 219 119 372 fohs 84 66 h 183 315 73 267 136",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "233 189 96 456 418 376 213 497 250 440 98 242 353 360 356\n427 364 339 372 479 254 tfuo 204 147 jpz 258 274 151 143 161",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 rk 1000 1000 hcjy 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 lnc 1000 1000 b 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1 1 2 1 2 999 1 2 2 1000 2 2 1\n1000 2 1 1000 1 1000 bfvoe 1000 2 zsd 999 1 999 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 2 999 2 1000 1 999 1 999 2 2 1000 1000 1000\n999 999 999 1 2 1000 q 1 1000 vlcg 1000 1000 999 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}