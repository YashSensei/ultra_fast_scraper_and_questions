{
  "problem_code": "problems",
  "title": "Update the array !",
  "tags": [],
  "text": "You have an array containing n elements initially all 0. You need to do a number of update operations on it. In each update you specify l, r and val which are the starting index, ending index and value to be added. After each update, you add the 'val' to all elements from index l to r. After 'u' updates are over, there will be q queries each containing an index for which you have to print the element at that index.InputFirst line consists of t, the number of test cases. (1 ≤ t ≤ 10)Each test case consists of \"n u\", number of elements in the array and the number of update operations, in the first line (1 ≤ n ≤ 10000 and 1 ≤ u ≤ 100000)Then follow u lines each of the format \"l r val\" (0 ≤ l, r < n, 0 ≤ val ≤ 10000)Next line contains q, the number of queries. (1 ≤ q ≤ 10000)Next q lines contain an index (0 ≤ index < n)OutputFor each test case, output the answers to the corresponding queries in separate lines.ExampleInput:15 30 1 72 4 61 3 23034Output:786",
  "sample_input": "Input:15 30 1 72 4 61 3 23034Output:786",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UPDATEIT",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "15 30 1 72 4 61 3 23034",
      "expected_output": "786",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5 9 4 6 3 6 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3 10 8 7 7 5 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 3 3 5 1 8 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "95 17 44 14 85 9 55 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "32 33 9 36 56 61 71 21",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "14 18 62 83 79 58 7 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "42 29 21 15 22 84 67 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 72 98 34 66 91 38 44",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2943 1980 1526 3480 4138 4945 2902 2284",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4364 3534 774 4604 3322 2705 962 1936",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2176 2818 2002 3685 4011 1326 1546 2436",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4294 4303 2438 3266 922 2782 4692 2993",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "576 2920 2668 4893 1615 4978 1222 622",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1758 1845 3635 3344 780 1277 4663 2627",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "4373 1518 883 4571 2089 3044 2068 3976",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 9999 2 2 1 9999 9999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 9999 10000 1 10000 2 10000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}