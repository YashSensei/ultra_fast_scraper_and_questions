{
  "problem_code": "problems",
  "title": "If Chain",
  "tags": [],
  "text": "Consider the following code:if (a)if (b)if (c)foo();wherea, bandcare boolean variables. If we run this code in C++, the functionfoo()is called if and only if all three variables are true. However, recently a new language - C-- - is being developed. In this language, when anif()evaluates to false, only the statement directly following it is not executed; for example, ifawas false, the program would jump fromif(a)toif(c).Using this convention, there are 5 different possible assignments of truth values to the variablesa,b,cwhich end up callingfoo(). Consideringa,b,cas three bits in that order, they are 111, 101, 100, 011 and 001.Givennboolean variables within a chain ofmif()'s, where the variables within oneif()are separated usinglogical or, count the number of ways to assign truth values to them which end up calling the functionfoo()(the call tofoo()is after the lastif()).InputThe first line of the input is the number of test cases1 ≤T ≤ 30.Ttest cases follow.The first line of each test case contains two nonnegative integersn ≤ 105- the number of boolean variables (they are numbered1throughn) - andm ≤ 105- the number ofif()'s.mlines follow, thei-th line describing thei-thif(). The first integer in each line is a positive integerki- the number of variables in thei-thif()(implicitly separated by thelogical oroperator) - followed bykipositive integers in the range[1, n]: the variables in thei-thif(). Not all variables need necessarily appear within theif()chain, and the variables within oneif()need not be distinct.The sum ofkiwithin a test case will not exceed5×105. Additionally, the sum ofn,mandkiwithin a single input file will not exceed2×106.The input is quite large - make sure to read it efficiently.OutputFor each case, output the string \"Casex:y\" in a single line, wherexis the number of the test case, starting from 1, andyis the number of ways of assigning truth values to thenboolean variables (out of2n), which when run in C-- end up callingfoo(), modulo109+9.ExampleInput:2\r\n3 3\r\n1 1\r\n1 2\r\n1 3\r\n5 3\r\n2 1 2\r\n3 1 3 5\r\n2 2 4Output:Case 1: 5\r\nCase 2: 24",
  "sample_input": "if (a)if (b)if (c)foo();",
  "sample_output": "Input:2\r\n3 3\r\n1 1\r\n1 2\r\n1 3\r\n5 3\r\n2 1 2\r\n3 1 3 5\r\n2 2 4Output:Case 1: 5\r\nCase 2: 24",
  "link": "https://www.spoj.com/problems/IFCHAIN",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "if (a)if (b)if (c)foo();",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\n3 3\r\n1 1\r\n1 2\r\n1 3\r\n5 3\r\n2 1 2\r\n3 1 3 5\r\n2 2 4",
      "expected_output": "Case 1: 5\r\nCase 2: 24",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "fympw aq k v",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "ndfg uu pfvoq mtdlp",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "hxi yrh mthfx hmunff",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "w mmqup bc an",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "qbn a pa ddm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "rv dhxvt e olm",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "tmkyv w ndow levqgpizq",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "hoid f pqi txfea",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "mtpu qxpdn ftgzd exy",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "kdaj nlqps bste ntyds",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "no a wil vdfksn",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "snch ogfem jgpm zsjsgrc",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "mar lvbj hgph m",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "ziw aujjq b imuv",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "h ynhi q ewopbcr",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "axd yzsg m lsejmjy",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "w sq s qx",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "oqwj k xm nx",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}