{
  "problem_code": "problems",
  "title": "Exclusive Security",
  "tags": [],
  "text": "Ashton Carl McDonald (known as A.C.M.) works at a company called XOR (XptO Revolution). The company has a simple rule for employee identification: each employee must have an integer id that must be unique (no two employees may have the same id).Recently, the employees were grouped into teams, in the following way: the teams are intervals on the XOR’s employees list. An employee can be part of more than one team.The company wants to hire new employees, and needs to generate id numbers for them. However, due to a security flaw in Human Resources software, the company can’t assign a new number that, if one executes Exclusive-Or operation with all numbers of any team, results in 0.McDonald, as the leader lazy programmer of XOR, needs your help to determine if a given number can or can’t be assigned to a new employee.InputThe input contains multiple test cases.The first line of each test case contains three numbers, N, T and Q, the number of employees in the company, the number of teams and the number of new numbers to be queried, respectively.The second line contains N numbers Xi, 1 ≤ i ≤ N, distinct, the employees id numbers.Each one of the following E lines contains two numbers, A and B, which represent an interval that forms a team. It means that the employees identified by XA… XBform one team.Each one of the following Q lines contains one number Yj, the queried number.Limits: 1 ≤ N, T, Q ≤ 105, 1 ≤ A ≤ B ≤ N. All Xiand Yjwill be non-negative and fit into a signed 32 bit integer, and all queries must be treated as independent from others (just the initial employees and teams must be taken into account).OutputFor each test case, the program must print Q + 1 output lines. For each queried number, the program must print ‘Y’, if the number can be assigned to a new employee, or ‘N’, otherwise. The last line is a simple minus sign ‘-’.ExampleInput:3 2 41 2 41 21 335670 0 0Output:NYYN-",
  "sample_input": "Input:3 2 41 2 41 21 335670 0 0Output:NYYN-",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EXCLSEC",
  "scraped_at": "2025-08-17 00:33:05",
  "test_cases": [
    {
      "input": "3 2 41 2 41 21 335670 0 0",
      "expected_output": "NYYN-",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 7 8 2 8 8 1 10 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 10 7 7 7 6 7 1 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4 7 1 8 3 9 1 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "96 8 74 36 61 87 7 84 86",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 69 9 8 1 98 3 14 25",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 5 95 41 21 13 21 8 89",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "32 87 33 68 91 62 85 47 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 8 25 45 96 85 24 89 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "269 345 226 87 125 470 247 498 132",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "159 419 405 178 235 433 195 197 253",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "96 239 383 134 345 52 113 469 60",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "476 451 250 424 409 244 281 270 137",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "153 443 256 405 405 65 294 273 480",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "344 83 178 334 248 72 227 116 283",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "497 341 82 316 301 292 59 180 461",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 2 999 999 999 1 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1000 1000 2 1 999 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}