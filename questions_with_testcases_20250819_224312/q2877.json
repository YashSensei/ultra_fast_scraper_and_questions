{
  "problem_code": "problems",
  "title": "DOMINO",
  "tags": [],
  "text": "Mirko received an N × N table for his birthday, where a non-negative integer is written in each field\r\nof the table. Unfortunately, the written numbers are too large for Mirko’s taste, so he will place K\r\ndominoes on top of the table that will cover the fields that are too large.More precisely, Mirko places the dominoes according to the following rules:each domino covers two fields of the table that are adjacent in a row or in a column,the dominoes do not overlap (but can touch),the sum of all visible (uncovered) fields needs to be as small as possible.It is your task to determine the required minimal sum of visible fields. The test data will be such that\r\nit will always be possible to place K dominoes without overlapping.InputThe first line of input contains the integers N (1 ≤ N ≤ 2000), the dimensions of the table, and K\r\n(1 ≤ K ≤ 8), the number of dominoes. Each of the following N lines contains N integers from\r\nthe interval [0, 1000]. These N × N numbers describe Mirko’s table.OutputThe first and only line of output must contain the minimal sum of visible fields after covering the\r\ntable with dominoes.ExampleInput:3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8Output:31Input:4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1Output:17Clarification of the first example:We place the domino so it covers fields with numbers 9 and 5.Clarification of the second example:We place the dominoes so they cover fields [4, 5] and [5, 4] in the third column.",
  "sample_input": "Input:3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8Output:31",
  "sample_output": "Input:4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1Output:17",
  "link": "https://www.spoj.com/problems/DOMINO8",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8",
      "expected_output": "31",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1",
      "expected_output": "17",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "1 10\n6 4 6\n2 3 2\n5 9 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 7\n5 7 3\n4 4 6\n4 8 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 7\n9 10 2\n8 9 6\n2 1 2",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "12 90\n69 98 82\n10 88 9\n40 43 10",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 36\n10 22 68\n5 6 81\n88 69 30",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 51\n43 24 90\n39 72 67\n69 46 39",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 48\n35 56 21\n69 68 52\n18 21 62",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "61 57\n58 10 33\n11 24 4\n73 78 98",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "183 818\n962 135 261\n378 159 458\n433 152 739",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "410 954\n297 588 825\n706 360 784\n398 518 328",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "423 634\n383 315 761\n124 184 310\n133 903 999",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "364 607\n200 986 827\n221 659 940\n240 500 576",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "157 367\n956 341 474\n603 278 293\n465 626 360",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "540 346\n400 320 286\n306 548 799\n761 819 856",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "970 120\n462 827 387\n973 915 669\n860 316 407",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000\n1999 2000 1999\n2000 2 2\n1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}