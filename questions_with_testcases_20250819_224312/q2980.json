{
  "problem_code": "problems",
  "title": "Ada and Power",
  "tags": [],
  "text": "Ada the Ladybug got a new homework today. She was attending algebra class and teacher was lecturing about various utilizations of matrix multiplication. He wanted to teach his students about the power of matrix, so he gave them following homework:Students were given a matrix followed be multiple queries. The query of first kind is adding a number to each element of a rectangular region of their matrix. In the query of second kind, a matrix is given and students are asked, whether it is the second power of actual matrix.Can you help Ada to solve her homework?InputThe first line contains two integers1 ≤ N ≤ 150, the size of square matrix and1 ≤ Q ≤ 200, the number of queries.Each of the nextNlines containsNintegers0 ≤ Ax, y≤ 100, the element onxth,ythcoordinate of matrix.ThenQqueries follows:The query of first kind is1followed five integers0 ≤ x, y ≤ X, Y < N, specifying the part, to which the number will be added, and number0 ≤ V ≤ 100, the value which will be added.The query of second kind is2followed byNlines containingNintegers, which are supposed to be the second power of actual matrix.OutputFor each query of second kind, print eitheryes, if given matrix is second power of actual state of matrix ornoin the other case.Example Input2 5\r\n1 2\r\n2 1\r\n2\r\n5 4\r\n4 5\r\n2\r\n4 5\r\n5 4\r\n1 0 1 1 1 1\r\n2\r\n7 9\r\n6 10\r\n2\r\n5 4\r\n4 5Example Outputyes\r\nno\r\nyes\r\nnoExample Input 25 10\r\n66 60 69 84 23\r\n69 81 94 91 66\r\n24 38 35 65 28\r\n31 27 91 57 11\r\n4 5 40 0 71\r\n1 3 0 4 0 79\r\n2\r\n21301 13825 21173 20277 9967\r\n27887 17060 26586 24464 15252\r\n14519 7743 13488 11454 6743\r\n18490 13839 18940 20861 8268\r\n12676 7260 10437 10027 8400\r\n1 1 0 4 2 100\r\n1 2 4 3 4 37\r\n1 2 2 2 2 1\r\n1 0 2 0 3 4\r\n2\r\n46237 38485 46414 21029 16080\r\n96987 88160 100456 49140 37497\r\n73915 66266 75834 36015 28535\r\n79761 74224 83550 45701 31771\r\n60176 56760 62709 34759 25280\r\n2\r\n46237 38485 46414 21029 16080\r\n96987 88160 100456 49140 37497\r\n73915 66266 75835 36015 28535\r\n79761 74224 83551 45701 31771\r\n60176 56760 62709 34759 25280\r\n2\r\n46237 38486 46414 21028 16080\r\n96987 88160 100456 49140 37497\r\n73915 66265 75835 36016 28535\r\n79761 74224 83551 45701 31771\r\n60176 56760 62709 34759 25280\r\n2\r\n46237 38485 46414 21029 16080\r\n96987 88160 100456 49140 37497\r\n73915 66266 75835 36015 28535\r\n79761 74224 83551 45701 31771\r\n60176 56760 62709 34759 25280Example Output 2no\r\nno\r\nyes\r\nno\r\nyes",
  "sample_input": "2 5\r\n1 2\r\n2 1\r\n2\r\n5 4\r\n4 5\r\n2\r\n4 5\r\n5 4\r\n1 0 1 1 1 1\r\n2\r\n7 9\r\n6 10\r\n2\r\n5 4\r\n4 5",
  "sample_output": "yes\r\nno\r\nyes\r\nno",
  "link": "https://www.spoj.com/problems/ADAPOWER",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "2 5\r\n1 2\r\n2 1\r\n2\r\n5 4\r\n4 5\r\n2\r\n4 5\r\n5 4\r\n1 0 1 1 1 1\r\n2\r\n7 9\r\n6 10\r\n2\r\n5 4\r\n4 5",
      "expected_output": "yes\r\nno\r\nyes\r\nno",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8\n5 7\n3 5\n5\n5 8\n2 3\n4\n5 3\n2 2\n3 4 6 5 5 3\n4\n5 10\n1 8\n3\n4 7\n9 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 6\n7 8\n6 6\n1\n5 10\n4 5\n4\n9 2\n4 1\n3 9 5 1 10 8\n1\n7 2\n8 6\n3\n3 3\n6 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n10 2\n8 5\n4\n6 5\n6 9\n6\n4 4\n6 2\n4 4 8 2 5 5\n5\n3 5\n10 7\n3\n3 1\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 76\n92 39\n10 60\n27\n72 22\n44 70\n37\n39 62\n61 5\n56 86 93 43 93 21\n33\n10 55\n70 8\n75\n55 92\n3 64",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 66\n89 14\n90 71\n45\n84 28\n88 60\n71\n76 41\n32 86\n68 86 21 41 96 45\n34\n91 58\n32 47\n23\n59 70\n87 17",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 12\n68 35\n61 75\n88\n81 76\n48 50\n23\n85 12\n76 95\n70 36 18 83 73 78\n5\n37 94\n57 36\n36\n89 64\n42 65",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 1\n100 26\n8 80\n39\n20 48\n58 47\n93\n80 2\n7 38\n4 6 93 57 38 24\n84\n75 74\n61 25\n83\n14 46\n87 85",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "65 78\n56 79\n32 95\n41\n23 54\n58 22\n12\n48 1\n82 15\n91 84 19 66 7 70\n44\n42 48\n84 70\n26\n51 81\n89 52",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10 47\n8 8\n32 71\n29\n69 15\n45 41\n26\n30 60\n11 22\n37 52 24 69 47 71\n32\n19 70\n32 19\n25\n16 50\n38 60",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "62 71\n37 26\n75 33\n8\n19 27\n60 16\n27\n40 71\n17 47\n64 47 12 26 17 38\n59\n74 64\n36 66\n44\n19 46\n26 31",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "54 21\n54 74\n28 68\n68\n71 16\n59 31\n30\n37 64\n36 25\n50 34 65 8 7 45\n39\n60 68\n27 22\n69\n66 47\n48 75",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "61 73\n24 27\n7 57\n36\n64 53\n72 38\n21\n33 54\n39 53\n68 71 70 67 41 12\n12\n67 34\n19 55\n7\n62 25\n51 59",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "37 48\n52 8\n75 42\n42\n26 49\n63 33\n25\n24 29\n63 60\n39 38 11 75 18 27\n27\n33 39\n70 29\n10\n66 71\n27 59",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 11\n16 17\n8 58\n41\n15 67\n65 40\n46\n54 67\n36 22\n46 27 45 13 45 54\n42\n48 20\n44 51\n58\n24 21\n33 25",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "16 36\n53 45\n20 34\n53\n20 44\n63 16\n14\n66 59\n60 15\n69 59 73 23 38 17\n23\n34 54\n7 50\n32\n39 34\n60 50",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "150 150\n150 150\n150 150\n150\n150 150\n150 150\n150\n150 150\n150 150\n150 150 150 150 150 150\n150\n150 150\n150 150\n150\n150 150\n150 150",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "150 150\n150 150\n150 150\n150\n150 150\n150 150\n150\n150 150\n150 150\n150 150 150 150 150 150\n150\n150 150\n150 150\n150\n150 150\n150 150",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n2 1\n149 150\n1\n149 2\n149 150\n1\n150 149\n149 150\n2 150 150 1 1 2\n150\n2 150\n1 1\n150\n149 1\n1 150",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "149 1\n1 150\n1 2\n149\n149 2\n150 150\n1\n150 150\n1 149\n2 149 2 2 2 149\n149\n2 2\n1 1\n1\n150 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}