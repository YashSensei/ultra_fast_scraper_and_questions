{
  "problem_code": "problems",
  "title": "Nikhil Problem",
  "tags": [],
  "text": "Nikhil is a very interesting and creative character. Nikhil had best friend whose name was Kasat. Kasat was inspired from SKG, a mathematics professor having  an experience of 30 years of teaching in IIT Kanpur, So he decided to open Mathematics classes named as “SAI KRIPA GANIT BHANDAR”. But unfortunately no one joined his classes as the fees he charged was too low compared to other institutions, so people thought that he is not a good teacher and his wait for the students continued, but the best friend Nikhil was not able to see his friend Kasat in such a gloomy situation. So to boost Kasat’s spirit he became the only student of  the “SAI KRIPA GANIT BHANDAR”.Nikhil  learned addition multiplication in different number system (like binary number system: base 2, octal number system: base 8, Hexagonal number system, Kasat number system : base 7, Shrotriya number system: base 3, bhat number system: base 13, rajnikant number system base: 100, ravikant number system base:101 etc. ).Nikhil was given daily assignment on this but helping friends and being lazy are two different things, all he could help Kasat was to join coaching classes and completing those complex assignment were not  his cup of tea. Kasat thought an innovative idea for Nikhil to sharp his mind in the field of number system. So, he gives the same type of problem daily in assignment.Problem:x(b1) + y(b1) = z1x(b2) + y(b2) = z2x(b): number x in base b number system .x and y are two numbers (must be valid in decimal (i.e. base 10), base b1 and base b2 number system like 1A is not valid in base 10 i.e. decimal number system but valid in base 16, 17, 18, etc.)z1 and z2 are the results of addition of x and y number in base b1 and b2 number system respectively .If z1 and z2 are similar then answer is \"yes\" else \"no\".0 <= x <= 21000 <= y <= 21001 < b1 <= 1001 < b2 <= 100Your task is to write the program to solve the problem of Nikhil.InputThe input consists ofTtest cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing four integersx, y(0 <= x, y <= 2100) and b1, b2 (1 < b1, b2 <= 100).OutputYour program should print one line of output for each test case. Output can either be \"yes\" or \"no\" .ExampleInput:310 01 2 1011 11 2 1012 12 8 10Output:yesnoyes",
  "sample_input": "Input:310 01 2 1011 11 2 1012 12 8 10Output:yesnoyes",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BHAT007",
  "scraped_at": "2025-08-17 00:33:57",
  "test_cases": [
    {
      "input": "310 01 2 1011 11 2 1012 12 8 10",
      "expected_output": "yesnoyes",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3 7 10 1 3 9 10 2 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 10 8 4 8 5 1 6 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 6 6 10 1 4 8 5 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "58 49 30 69 80 14 39 88 10 10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "89 7 38 47 44 64 100 49 43 87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "71 33 80 41 79 26 41 38 12 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 68 2 28 69 61 64 65 14 90",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 65 55 37 12 3 71 56 29 14",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "193 393 317 249 202 297 293 88 442 276",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "309 407 219 363 335 171 255 61 163 64",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "467 422 349 453 97 491 491 61 110 62",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "69 241 148 290 60 302 176 271 305 475",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "295 474 463 390 368 267 107 471 461 424",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "406 150 379 238 169 188 305 53 273 62",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "86 392 331 336 346 59 496 168 351 277",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000 1 1 1 1 2 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 999 1 1000 999 1 1 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}