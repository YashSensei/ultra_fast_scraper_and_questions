{
  "problem_code": "problems",
  "title": "Birthday Present",
  "tags": [],
  "text": "Today is problem setter's best friend Jenny’s birthday. Long ago, Jenny, being a very clever girl, asked the problem setter to perform some queries on a tree but he couldn’t do it. Now, he seeks your help to impress her on her birthday by answering those queries.Recall that a tree is a connected acyclic undirected graph withnnodes andn-1edges. In each node there are some flowers. The two type of queries are described as:1 u v x2 u yFor first type, you have to calculate the minimum number of vertices needed to be visited on the path fromvtou, starting atv, to collect at leastx (1 ≤ x ≤ 1018)flowers, wherevis a descendant ofu.Note that you cannot visit any node that is not in the path from v to u and you cannot skip any node of the path from v to that node you've chosen at last.If it's impossible to collect at leastxflowers visiting all the vertices fromvtouthen you have to print-1.For second type, you have to add y(y can be negative)to the existing amount flowers in nodeu. It is guaranteed that after this operation, flowers in a node will be non-negative and sum of flowers of all node of the tree will be at most 1018.Note that 1 is the root of the tree.InputThe first line of the input contains two integersn(2 ≤ n ≤ 105) andq(1 ≤ q ≤ 105) where n is the number of vertices of the tree and q is the number of queries you have to perform.Each of the next n-1 lines contains two integersa(1 ≤ a ≤ n) andb(1 ≤ b ≤ n) which denote an edge between a and b. The next line contains n non-negative integers c[1], c[2] ... c[n] (0 ≤ c[i] ≤ 1013) where c[i] denotes the number of flowers in i’th node. Next q lines contain queries of the format described above.OutputFor each query of the first type print minimum number of nodes you have to visit to collect at leastx(1 ≤ x ≤ 1018) flowers. If it's impossible to collect at leastxflowers visiting all the vertices fromvtouthen print-1.ExampleInput:6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23Output:1\r\n2\r\n3\r\n2",
  "sample_input": "Input:6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23Output:1\r\n2\r\n3\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HBD",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23",
      "expected_output": "1\r\n2\r\n3\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 3\n2 7\n4 3\n2 1\n5 6\n9 6\n7 1 7 7 8 8\n5 10 4 3\n1 3 7 6\n10 8 5 10\n7 1 1\n3 10 6 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 7\n5 8\n5 5\n8 6\n2 5\n2 10\n3 4 7 7 2 9\n10 2 1 6\n2 9 6 7\n6 2 7 7\n5 2 10\n2 9 8 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n2 3\n5 4\n4 5\n1 10\n4 10\n1 7 3 2 5 10\n1 4 6 3\n1 9 7 6\n5 1 6 7\n7 1 7\n6 3 4 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 8\n40 59\n7 70\n6 48\n6 15\n23 89\n76 50 82 57 55 54\n30 42 40 82\n56 94 15 77\n67 51 54 47\n39 15 63\n22 79 82 54",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "86 22\n30 52\n64 51\n72 3\n57 56\n46 54\n44 71 49 60 9 95\n55 77 59 100\n34 66 71 81\n91 20 33 38\n39 64 82\n26 87 47 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "96 74\n49 68\n33 52\n23 64\n100 64\n26 32\n76 27 11 14 96 89\n66 37 5 63\n54 51 3 68\n35 42 42 9\n72 55 20\n57 36 64 22",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 11\n49 96\n16 42\n11 33\n51 99\n21 44\n97 94 65 3 44 88\n53 73 11 77\n20 6 5 29\n80 70 22 51\n49 20 16\n19 55 44 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "60 67\n7 24\n52 80\n34 25\n5 60\n4 13\n27 24 19 39 29 19\n53 56 87 14\n9 73 84 60\n65 21 25 12\n3 18 56\n4 30 45 49",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "14 12\n19 5\n15 35\n43 50\n29 22\n24 18\n17 23 33 37 5 51\n48 36 28 27\n11 32 40 24\n39 38 5 32\n21 43 51\n33 51 27 29",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "24 29\n40 19\n7 36\n12 41\n51 35\n17 6\n21 7 25 33 20 42\n34 37 47 30\n7 39 49 37\n27 48 28 42\n33 45 44\n30 47 32 30",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "41 37\n17 30\n28 33\n8 16\n44 52\n33 8\n38 51 7 47 41 30\n28 28 49 41\n40 11 20 44\n6 43 43 8\n16 34 17\n21 17 26 27",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "38 31\n51 34\n45 25\n50 22\n26 24\n12 19\n19 45 8 19 13 30\n23 50 16 24\n42 34 16 43\n36 45 29 48\n8 23 49\n11 49 41 22",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8 16\n35 21\n47 12\n28 29\n51 18\n10 20\n41 8 13 24 22 33\n49 24 15 44\n18 8 52 10\n14 23 32 37\n39 42 29\n47 7 9 6",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "48 31\n44 51\n34 44\n35 5\n33 19\n41 7\n31 22 32 47 20 16\n13 7 49 22\n27 29 43 32\n15 46 11 43\n15 39 23\n50 46 40 9",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "19 40\n36 35\n44 42\n33 52\n25 45\n49 33\n20 6 25 24 27 35\n42 32 16 19\n16 47 46 34\n27 8 43 25\n27 23 9\n33 40 42 38",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105\n105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105\n105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n104 105\n104 105\n105 104\n104 104\n1 104\n105 104 104 2 2 2\n1 105 104 105\n2 104 1 2\n1 2 2 2\n105 105 1\n105 104 2 105",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 104\n104 104\n2 2\n104 105\n105 1\n105 1\n2 104 104 1 1 2\n2 1 1 104\n1 105 1 1\n105 104 105 104\n104 1 1\n104 105 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}