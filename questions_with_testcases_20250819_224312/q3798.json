{
  "problem_code": "problems",
  "title": "LAZY FRIENDS",
  "tags": [],
  "text": "Jai and Gopi are best friends. Both of them have a lot of girlfriends although they are nerds!!! One day one of Gopi’s girlfriends came to him and asked him to prove his love for her. Unfortunately Gopi has a meeting with another girlfriend and asks his best friend Jai to help him. Jai with an idea of increasing his girlfriend count accepts immediately. Jai on hearing the task finds it so simple and so asks his junior to complete the task which is you.You are given a room of lengthLand breadthBwhich is divided into unit cells. In each unit cell there are some gems which amount to a certain value which can be positive, negative or even zero. You are asked to answerTqueries. Each query consists of a numberNand you need to collect gems fromNunit cells such that the value ofNunit cells when summed up must be maximum. The selection ofNunit cells in a room of length L and breadth B must be in such a way that it must be a small room of length say somexand breadth someyprovidedx × y = N. If no such value for x and y exist then print -1.InputFirst line of input contains two space separated integers L and B which denotes the length and breadth of the room.Following L lines contains B elements in each line each element specifying the value of the gems.Next line contains T which is the number of queries.Following T lines contains T elements where each element is the number N.1 ≤ L, B ≤ 1000All the L × B elements (x) will be in the range-100 ≤ x ≤ 1001 ≤ T ≤ 101 ≤ N ≤ 10000OutputPrint the maximum value that can be obtained for each value of N.ExampleInput:3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6Output:11\r\n-1\r\n4",
  "sample_input": "Input:3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6Output:11\r\n-1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GEMS",
  "scraped_at": "2025-08-17 00:34:33",
  "test_cases": [
    {
      "input": "3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6",
      "expected_output": "11\r\n-1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 5\n4 7 6 1\n4 5 9 7\n10 4 6 9\n1\n9\n5\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7\n10 9 1 4\n5 9 7 4\n8 1 3 6\n4\n4\n10\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n6 2 1 1\n3 3 4 6\n10 9 3 4\n5\n4\n7\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "82 37\n63 10 77 89\n13 12 38 18\n83 53 83 29\n53\n88\n85\n66",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "72 63\n64 8 30 70\n43 94 24 10\n81 53 77 92\n15\n21\n54\n79",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 38\n87 36 81 22\n55 17 51 55\n23 29 74 48\n6\n59\n3\n84",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "64 17\n14 38 95 14\n63 57 2 18\n70 48 72 76\n99\n16\n40\n71",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 17\n98 89 42 65\n27 90 81 81\n37 61 68 92\n32\n22\n39\n84",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "574 3216\n4211 4223 1742 2896\n1415 737 671 4208\n950 2833 2489 2551\n4580\n3646\n3324\n2121",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1951 2476\n2300 2798 1695 1336\n573 4085 1714 3507\n2993 2694 1005 4770\n3412\n3469\n3756\n3152",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1886 4830\n3595 824 2761 1582\n676 2888 3207 1439\n4395 3825 4723 2254\n3573\n4716\n4620\n1900",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4779 2230\n570 670 4632 1184\n2773 4126 663 1850\n3422 2994 2981 1295\n817\n1152\n2706\n1860",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "4477 2799\n3434 865 4666 2240\n1349 3897 4732 943\n1865 2751 3275 1034\n2171\n1661\n3851\n3175",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "4391 2103\n1514 3176 3630 2148\n989 4831 849 3888\n2543 2795 1615 3646\n1857\n4362\n2799\n2786",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1654 3834\n3710 1703 2218 2325\n3725 4871 1988 1729\n3894 2039 4017 957\n1328\n2570\n4417\n3865",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000\n10000\n10000\n10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000\n10000\n10000\n10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "9999 2\n2 10000 2 1\n2 2 9999 10000\n1 10000 1 9999\n10000\n2\n9999\n10000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 10000\n10000 10000 2 1\n9999 1 10000 9999\n2 10000 9999 2\n9999\n10000\n2\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}