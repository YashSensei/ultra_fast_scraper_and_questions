{
  "problem_code": "problems",
  "title": "One X LIS",
  "tags": [],
  "text": "For a given sequence a[1], a[2] ... a[n], lets call a subsequence a[k1] ... a[ki] ... a[km] (where 1 <= ki<= n and kii+1) as\"one X increasing subsequence\" if there is exactly one i between 1 and m-1 (inclusive) for which a[ki]>a[ki+1]. Given a sequence find the length of the longest \"one X increasing subsequence\".InputFirst line contains t, which denotes the number of test cases. 2×T lines follow. Each test case is described using 2 lines.First line of a test case contains an integer- n, which denotes the number of elements in the array.Second lines contains n integers, which represent a[i] 1 ≤ i ≤ n.1 ≤ t ≤ 201 ≤ n ≤ 1000001 ≤ a[i] ≤ 109OutputFor each test case, print one integer which represents the number of integers in the One X LIS. The output for each test case should be printed on a new line.ExampleInput:254 3 3 4 155 4 3 2 1Output:42ExplanationIn the first test case, the Longest Increasing Subsequence is 3.3.4 whereas the longest One X Subsequence is 4.3.3.4 whose length is 4.In the second example, any two elements can be chosen to form the longest One X Subsequence, which gives us an answer of 2.",
  "sample_input": "Input:254 3 3 4 155 4 3 2 1Output:42",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ONEXLIS",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "254 3 3 4 155 4 3 2 1",
      "expected_output": "42",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6 4 1 1 10 7 5 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 8 4 4 7 10 9 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 2 2 6 8 7 10 9 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "37 83 1 76 85 47 37 25 46",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "100 10 32 47 29 44 18 63 37",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 24 57 53 97 23 1 55 60",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 24 97 17 57 29 69 20 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "48 34 99 88 49 88 47 7 53",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "154136 441405 84689 158300 166600 227349 91640 262783 402610",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "259347 328095 197004 270556 441807 398280 419343 449944 253940",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "65139 142149 299467 183470 69929 80873 135814 260859 296325",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "327367 147604 440085 165444 469969 154591 148947 377222 484397",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "454889 125594 201752 470229 435695 138293 256234 454964 336479",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "87754 278892 367018 497899 147400 365043 430319 142839 340191",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "349191 253501 77085 103685 122395 196200 255797 333066 126586",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999999 2 1000000 2 999999 2 999999 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000000 2 1000000 1000000 999999 1 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}