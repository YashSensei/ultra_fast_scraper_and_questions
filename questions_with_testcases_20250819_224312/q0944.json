{
  "problem_code": "problems",
  "title": "Garden 2005",
  "tags": [],
  "text": "Byteman owns the most beautiful garden in Bytetown. He planted n roses in his garden. Summer has come and the flowers have grown big and beautiful. Byteman has realized that he is not able to take care of all the roses on his own. He has decided to employ two gardeners to help him. He wants to select two rectangular areas, so that each of the gardeners will take care of the roses inside one area. The areas should be disjoint and each should contain exactly k roses. Byteman wants to make a fence surrounding the rectangular areas, but he is short of money, so he wants to use as little fence as possible. Your task is to help Byteman select the two rectangular areas.The garden forms a rectangle l meters long and w meters wide. It is divided into l · w squares of size 1 meter × 1 meter each. We fix a coordinate system with axes parallel to the sides of the garden. All squares have integer coordinates (x, y) satisfying 1 ≤ x ≤ l, 1 ≤ y ≤ w. Each square may contain any number of roses. The rectangular areas, which must be selected, should have their sides parallel to the sides of the garden and the squares in their corners should have integer coordinates. For 1 ≤ l1 ≤ l2 ≤ l and 1 ≤ w1 ≤ w2 ≤ w, a rectangular area with corners (l1, w1), (l1, w2), (l2, w1) and (l2, w2):contains all the squares with coordinates (x, y) satisfying l1 ≤ x ≤ l2 and w1 ≤ y ≤ w2, andhas perimeter 2 · (l2 − l1 + 1) + 2 · (w2 − w1 + 1).The two rectangular areas must be disjoint, that is they cannot contain a common square. Even if they have a common side, or part of it, they must be surrounded by separate fences.Write a program, that:reads from the standard input the dimensions of the garden, the number of roses in the garden, the  number of roses that should be in each of the rectangular areas, and the positions of the roses.finds the corners of two such rectangular areas with minimum sum of perimeters that satisfy the given conditions.writes to the standard output the minimum sum of perimeters of two non-overlapping rectangular areas,  each containing exactly the given number of roses (or a single word NO, if no such pair of areas exists).InputThe first line of standard input contains two integers: l and w (1 ≤ l, w ≤ 250) separated by a single space — the length and the width of the garden. The second line contains two integers: n and k (2 ≤ n ≤ 5000, 1 ≤ k ≤ n/2) separated by a single space — the number of roses in the garden and the number of roses that should be in each of the rectangular areas. The following n lines contain the coordinates of the roses, one rose per line. The (i+2)-nd line contains two integers li, wi (1 ≤ li ≤ l, 1 ≤ wi ≤ w) separated by a single space — the coordinates of the square containing the i-th rose. Two or more roses can occur in the same square.OutputThe standard output should contain only one line with exactly one integer—the minimum sum of perimeters of two non-overlapping rectangular areas, each containing exactly k roses, or a single word NO, if no such pair of areas exists.ExampleInput:6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1Output:22",
  "sample_input": "Input:6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1Output:22",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IOIGARD",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1",
      "expected_output": "22",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 5\n3 7\n2 8\n10 1\n4 5\n7 4\n6 4\n5 1\n4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3\n4 9\n7 4\n6 4\n2 10\n8 9\n10 9\n5 10\n5 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\n9 8\n7 5\n9 3\n8 2\n9 3\n8 3\n1 4\n7 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 59\n7 35\n98 13\n46 57\n98 72\n76 12\n70 40\n61 69\n32 10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 18\n52 17\n39 56\n21 97\n87 14\n86 81\n16 3\n13 18\n78 11",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "54 83\n25 95\n52 73\n4 30\n13 39\n28 73\n39 45\n67 45\n12 100",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "44 7\n29 19\n94 73\n31 15\n5 44\n46 63\n63 10\n47 83\n94 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "33 83\n18 92\n96 96\n55 58\n29 95\n62 43\n68 12\n7 81\n76 34",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "701 1903\n547 1991\n1849 2277\n587 398\n1448 2039\n2160 1109\n409 1171\n2480 489\n1488 272",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2282 1911\n1395 2061\n2291 2282\n2198 2049\n1551 733\n452 1952\n572 1708\n2495 2452\n1698 1891",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1461 2383\n1414 531\n2234 2039\n975 252\n2072 487\n1238 989\n2004 2206\n2149 952\n1824 2075",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2260 796\n2406 1345\n1835 2417\n592 1766\n1112 2471\n2215 1467\n2457 1240\n982 1334\n1657 2454",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "632 1105\n1136 1840\n1284 1480\n1134 811\n1248 419\n2262 1518\n794 765\n2464 1354\n713 2340",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1065 875\n2079 1630\n476 2220\n799 1500\n2386 2246\n1951 1450\n392 910\n1739 421\n2362 2230",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "598 604\n2049 411\n319 877\n2379 329\n1519 2272\n2003 1840\n291 2331\n1490 1541\n427 1524",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n1 1\n4999 5000\n4999 2\n4999 5000\n2 4999\n4999 1\n2 1\n4999 5000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "5000 1\n2 5000\n5000 2\n1 5000\n1 2\n1 4999\n4999 5000\n5000 1\n2 5000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}