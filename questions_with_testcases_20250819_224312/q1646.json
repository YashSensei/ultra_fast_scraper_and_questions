{
  "problem_code": "problems",
  "title": "Adjacent Bit Counts",
  "tags": [],
  "text": "For a string of n bits x1, x2, x3 ... Xn the adjacent bit count of the string (AdjBC(x)) is given byX1*X2 + X2*X3 + X3*X4 + ... + Xn-1 * Xnwhich counts the number of times a 1 bit is adjacent to another 1 bit. For example:AdjBC(011101101) = 3AdjBC(111101101) = 4AdjBC(010101010) = 0Write a program which takes as input integers n and k and returns the number of bit strings x of n bits (out of 2ⁿ) that satisfy AdjBC(x) = k. For example, for 5 bit strings, there are 6 ways of getting AdjBC(x) = 2:11100, 01110, 00111, 10111, 11101, 11011InputThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number (n) of bits in the bit strings, followed by a single space, followed by a decimal integer (k) giving the desired adjacent bit count. The number of bits (n) will not be greater than 100 and the parameters n and k will be chosen so that the result will fit in a signed 32-bit integer.OutputFor each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of n-bit strings with adjacent bit count equal to k.ExampleInput:101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90Output:1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
  "sample_input": "Input:101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90Output:1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GNYR09F",
  "scraped_at": "2025-08-17 00:33:37",
  "test_cases": [
    {
      "input": "101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90",
      "expected_output": "1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 4 2 2 1 5 1 2 8 10 8 7 1 9 8 3 4 9 1 10 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 1 3 5 6 5 6 9 7 5 9 1 5 10 10 5 7 4 4 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 9 8 3 5 6 3 5 6 5 6 4 4 5 6 10 1 10 1 3 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 68 10 56 49 75 8 83 72 3 72 87 83 64 5 30 88 54 73 15 40",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "42 75 33 10 25 55 98 65 87 19 26 11 47 53 1 21 60 65 23 86 30",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 100 79 43 41 55 69 72 92 90 47 14 26 20 91 53 21 46 40 87 86",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "92 68 42 87 6 42 91 76 55 8 19 12 84 79 79 56 13 84 70 77 27",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "74 54 34 39 18 18 74 11 88 99 20 4 92 37 89 51 11 82 11 1 96",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "141 155 373 429 337 331 112 369 480 442 454 174 325 482 212 410 468 51 143 107 317",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "220 476 243 216 160 290 131 210 488 338 237 305 481 384 475 95 123 290 348 284 456",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "312 200 197 225 80 270 498 173 336 277 89 60 328 266 448 123 107 54 407 406 115",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "372 132 393 129 266 111 356 122 289 350 189 201 483 122 129 406 144 383 121 149 285",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "108 284 473 318 379 324 265 496 162 154 258 411 100 315 143 168 335 477 239 176 97",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "178 263 204 56 162 327 345 58 413 408 291 340 492 257 218 290 212 231 107 92 405",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "149 123 290 131 286 206 92 353 127 256 239 176 373 50 236 482 460 193 98 59 304",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 2 1 1000 1000 1 1000 2 999 2 999 999 2 1000 1000 2 2 999 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 2 2 999 999 999 2 2 1000 2 1000 1000 1 2 999 1000 1000 1000 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}