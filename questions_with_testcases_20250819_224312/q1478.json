{
  "problem_code": "problems",
  "title": "Adrita and Her Bike Ride",
  "tags": [],
  "text": "Adrita, a lady Programmer is at Uttara, at her office. She needs to go home now. But she forgot to take enough money with her. She has limited money, so she can’t afford Uber Ride. She called her friend to give a ride on her bike. But Adrita wants to pay her friend and she wants minimum cost shortest path to reach to her home.There are several points and there are roads connecting the points. All connecting roads are of length of 1 kilometer. Some roads (like flyover) will charge tolls and the tolls are given. You are to find the shortest path based on minimal cost.Consider the cost for 1 kilometer is 12 taka for bike ride.InputIn the first line of input, there’s a positive integer k (k ≤ 50) denoting the number of test cases.In each test case, the first line contains 4 integers N (1 ≤ N ≤ 105) denoting the number of  points, R (1 ≤ R ≤ 106) denoting the number of connecting roads, S (1 ≤ S ≤ N) denoting the starting point, D (1 ≤ D ≤ N) denoting the destination point.The next R lines contains 3 integers each, U, V (1 ≤ U, V ≤ N) and T, (0 ≤ T ≤ 105) indicating that point U and V are connected with the road which requires toll T taka. All roads are bidirectional and you can assume that the destination point is reachable from the starting point.OutputPrint the minimum cost to reach her destination.ExampleInput:1\r\n6 6 1 6\r\n1 2 0\r\n2 3 0\r\n3 4 1\r\n4 5 2\r\n5 6 0\r\n4 6 12Output:61",
  "sample_input": "Input:1\r\n6 6 1 6\r\n1 2 0\r\n2 3 0\r\n3 4 1\r\n4 5 2\r\n5 6 0\r\n4 6 12Output:61",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ADRABR",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "1\r\n6 6 1 6\r\n1 2 0\r\n2 3 0\r\n3 4 1\r\n4 5 2\r\n5 6 0\r\n4 6 12",
      "expected_output": "61",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n2\n10\n9\n6\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n10\n3\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n71230566\n11807139\n77882167\n66134587\n43072827\n19155050\n94343970\n68609394\n56537541\n55372446\n45934537\n16074409\n11943572\n26039457\n30840376\n47551823\n45112650\n52975102\n88510384\n20604074",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n72596387\n20908965\n2023108\n72122207\n56705548\n51536183\n54983837\n70292023\n36814969\n50594784\n75448805\n94632007\n50674938\n84821722",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n51358401\n14866401\n48275635\n3091845\n80966349\n87158759\n2077410\n92867599\n67588797\n46279408\n12697136",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n23547321\n52004340\n99178031\n12674244\n28711582\n54817162\n96123031\n28906972\n98002659\n59123626\n58513942\n38413743\n26424636\n75692773\n58449269\n88710659\n99996062\n96358784",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n75707358\n93351876\n40665379\n78495647\n21032934\n75905971\n4124986\n85180699\n18820338\n12482984\n91277499\n8961498\n77401637\n31308443\n89277235\n26832893\n96500421\n35366656\n42890266",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "71\n48586\n43710\n13784\n19484\n51829\n42906\n70818\n17350\n65106\n31450\n65749\n31938\n33002\n13337\n51165\n59270\n39214\n48098\n15342\n14433\n12984\n91206\n59738\n94503\n45894\n59714\n35076\n17860\n82330\n45263\n33655\n70701\n15950\n57604\n5125\n17242\n58691\n10972\n20155\n43306\n64282\n84166\n9022\n65186\n52997\n85288\n41852\n34936\n43969\n81721\n87618\n56439\n69489\n36600\n39037\n21963\n19828\n56260\n88697\n30376\n31428\n2703\n19215\n46352\n53500\n97004\n48510\n1843\n99654\n55795\n44716",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "88\n35522\n51208\n885\n33047\n58487\n50167\n56578\n11028\n51378\n42002\n99188\n9443\n3127\n91243\n18537\n19780\n36154\n64859\n51348\n899\n87312\n71385\n65981\n8950\n21660\n65313\n71291\n54182\n23385\n31055\n46454\n73267\n38072\n74604\n84572\n66938\n84738\n51397\n1929\n25979\n63754\n21279\n35818\n9288\n10847\n31088\n78524\n279\n95224\n24239\n88345\n39958\n50500\n66981\n25817\n98832\n88583\n30248\n77893\n20491\n84281\n1365\n26991\n22923\n86259\n85712\n20539\n93029\n17038\n2943\n73092\n55945\n54932\n53134\n26026\n86633\n46719\n18248\n65684\n17497\n8619\n26219\n1619\n6091\n18231\n8611\n801\n16660",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "89\n53232\n24339\n1407\n47903\n83701\n91493\n10465\n52163\n23751\n65439\n16000\n5084\n16990\n13062\n79312\n42569\n76131\n59345\n1204\n41788\n26497\n16211\n74748\n14924\n95390\n18363\n19421\n10040\n95241\n32225\n59869\n45638\n8476\n11900\n84847\n77247\n76472\n35038\n41343\n23301\n50584\n12630\n70797\n48278\n67972\n80899\n76867\n68202\n52154\n95451\n6662\n71152\n7982\n21655\n20350\n23345\n44700\n72397\n20749\n39418\n86374\n62888\n1238\n64844\n52691\n38241\n30032\n15520\n92411\n53196\n23974\n42567\n93321\n75011\n83168\n68715\n68245\n70712\n2445\n25761\n50586\n37790\n66929\n5094\n85812\n64626\n80014\n23243\n37076",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "91\n90845\n25334\n58532\n2875\n54172\n96069\n92692\n62456\n50199\n50005\n69843\n42547\n46789\n23467\n85080\n22439\n21492\n86763\n37093\n51078\n26834\n22761\n91530\n40859\n19909\n19845\n77921\n74758\n8388\n99974\n82420\n93836\n29834\n74656\n31228\n19985\n32684\n42236\n31687\n33194\n32187\n64654\n41744\n54799\n1179\n49126\n66685\n14358\n93914\n27046\n11071\n34844\n92638\n21506\n91517\n74337\n26486\n98231\n69876\n88785\n24711\n31090\n77700\n55999\n3481\n38146\n1940\n98327\n94532\n64806\n29325\n7575\n41500\n73896\n80197\n60059\n14149\n87700\n34851\n3017\n30204\n96383\n22456\n41399\n22602\n18283\n46015\n58304\n54392\n64828\n21920",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "59\n54671\n13242\n35511\n95833\n41016\n59215\n40564\n15130\n16943\n18436\n38430\n71530\n76321\n50977\n72422\n83999\n3386\n19067\n51835\n96668\n1390\n51967\n18216\n25639\n2448\n83286\n97400\n80386\n29319\n74533\n26057\n93663\n79712\n21184\n5274\n94275\n70733\n18727\n68755\n72238\n49100\n11664\n54413\n65942\n61171\n51446\n68548\n52556\n75087\n63987\n40105\n9730\n29632\n69727\n88953\n70649\n30297\n42642\n90941",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "95\n65989\n29912\n81832\n87233\n99339\n61393\n50385\n21730\n14991\n69828\n46567\n32017\n84351\n49653\n29651\n63315\n81783\n54374\n23842\n40469\n65775\n48934\n86091\n76655\n62835\n63891\n38121\n43646\n32646\n12450\n58899\n31191\n92905\n84493\n92161\n28743\n81426\n39162\n17719\n45197\n81027\n65827\n3967\n52065\n88694\n6998\n782\n25734\n84453\n51765\n25445\n98745\n9561\n66605\n70965\n2509\n63447\n11594\n89069\n58248\n36199\n60831\n83607\n41768\n57092\n68148\n17838\n35301\n62583\n90286\n56824\n33412\n66396\n62986\n64000\n99934\n17800\n50700\n59\n68462\n46389\n4852\n82850\n89525\n3658\n1854\n78604\n38752\n56702\n85122\n91708\n33544\n25940\n60404\n6021",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n39346\n4112\n1081\n44166\n53896\n26559\n31916\n40760\n16752\n91307\n81460\n61683\n99955\n31799\n48267\n62511\n47669\n92481\n74433\n72407\n39591\n49053\n11162\n86481\n22869\n32270\n55909\n74854\n32378\n13776\n11379\n53225\n79962\n58748\n11078",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n25519001\n59597436\n40543896\n98945238\n8188372\n52834834\n3177456\n7760117\n98065128\n50079044\n78970370\n18808437\n85764076\n50539180\n59234728\n10161137\n10759450\n85322198\n20425055\n24535245\n93806278\n56724547\n91429838\n68893455\n69004990\n6784634\n74768012\n32984900\n19667148\n9158417\n31259392\n51732055\n67198167\n66329455\n59558138\n6589856\n94213344\n79704374\n93113427\n64372077\n71889333\n12524283\n77045913\n33711634\n80631768\n53762323\n95784758\n18473103\n22063396\n16971589\n88271343\n88137087\n49492628\n92835346\n17449120\n10552639\n60428502\n52433082\n62123687\n78448415\n10130216\n9165838\n11909979\n61848537\n55957817\n5026347\n98029111\n8091448\n34066759\n30879764\n11046490\n7351689\n46255788\n36161484\n40659568\n80221492\n16316815\n47573577\n63260951\n43212391\n26107937\n14808571\n71276734\n14034472\n7493874\n33555470\n74109896\n92107367\n16163472\n31645486\n52555618\n94794182\n26968719\n60745532\n694972\n10509609\n57076587\n21366849\n32066026\n8397677\n63984628\n64326427\n63330928\n63174152\n74437529",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n1345819\n96980374\n38691341\n12784316\n36971083\n53518287\n6973230\n88982561\n78140357\n51089693\n66329216\n36467014\n4055871\n63852849\n18696687\n59938854\n36202812\n22946392\n43928232\n52307232\n36785771\n77042302\n13233139\n15165286\n32544638\n83170021\n28185009\n79262205\n21461140\n1490996\n60586125\n83347484\n65504326\n12570547\n25655008\n57995698\n60099836\n4339260\n81098946\n33230344\n97072694\n90633318\n83293285\n11212128\n64689549\n77234061\n99661885\n94954444\n82355838\n61031094\n42829852\n59394578\n68622851\n8220548\n50070539\n94126981\n2388528\n26302157\n1238340\n56254175\n9777021\n61577602\n51002796\n99420950\n55314097\n97539225\n55458317\n89475589\n77369974\n12199142\n23525964\n70723668\n17716187\n81155743\n24580088\n40282439\n39607481\n26434238\n25022983\n40633150\n22843190\n52488741\n66673110\n56209624\n11746816\n80865430\n30935039\n94127741\n23193626\n83891151\n74345782\n54920454\n62364857\n51080250\n19593785\n21016998\n97911397\n52329968\n52723449\n76659869\n32886462\n24183222\n24891226\n82551142\n90818296",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n55142113\n3153420",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}