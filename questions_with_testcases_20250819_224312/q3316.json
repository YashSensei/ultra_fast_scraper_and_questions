{
  "problem_code": "problems",
  "title": "Finding the Top RPS Player",
  "tags": [],
  "text": "A company \"ACM Foods\" is preparing for opening its chain shop in a certain area, but another company \"ICPC\r\nPizza\" is also planning to set up its branch shop in the same area. In general, two competitive shops gain less\r\nincomes if they are located so close to each other. Thus, if both \"ACM Foods\" and \"ICPC Pizza\" went on\r\nopening, they would be damaged financially. So, they had a discussion on this matter and made the following\r\nagreement: only one of them can branch its shop in the area. It is determined by Rock-Paper-Scissors (RPS)\r\nwhich to branch the shop.ACM Foods is facing financial difficulties and strongly desires to open their new shop in that area. The executives\r\nhave decided to make every effort for finding out a very strong RPS player. They believes that players who win\r\nconsecutive victories must be strong players. In order to find such a player for sure, they have decided their\r\nsimple strategy.In this strategy, many players play games of RPS repeatedly, but the games are only played between players with\r\nthe same number of consecutive wins. At the beginning, all the players have no wins, so any pair of players\r\ncan play a game. The games can be played by an arbitrary number of pairs simultaneously. Let us call a set of\r\nsimultaneous games as a turn. After the first turn, some players will have one win, and the other players will\r\nremain with no wins. In the second turn, some games will be played among players with one win, and some\r\nother games among players with no wins. For the former games, the winners will have two consecutive wins,\r\nand the losers will lose their first wins and have no consecutive wins. For the latter games, the winners will have\r\none win, and the losers will remain with no wins. Therefore, after the second turn, the players will be divided\r\ninto three groups: players with two consecutive wins, players with one win, and players with no wins. Again,\r\nin the third turn, games will be played among players with two wins, among with one win, and among with no\r\nwins. The following turns will be conducted so forth. After a sufficient number of turns, there should be a player\r\nwith the desired number of consecutive wins.The strategy looks crazy? Oh well, maybe they are confused because of their financial difficulties.\r\nOf course, this strategy requires an enormous number of turns. The executives asked you, as an employee of\r\nACM Foods, to estimate how long the strategy takes. Your task is to write a program to count the minimum\r\nnumber of turns required to find a player with M consecutive wins among N players.InputThe input consists of multiple test cases. Each test case consists of two integers N (2 ≤ N ≤ 20) and M (1 ≤ M < N) in one line.The input is terminated by the line containing two zeroes.OutputFor each test case, your program must output the case number followed by one integer which indicates the minimum number of turns required to find a person with M consecutive wins.ExampleInput:2 1\r\n10 5\r\n15 10\r\n0 0Output:Case 1: 1\r\nCase 2: 11\r\nCase 3: 210",
  "sample_input": "Input:2 1\r\n10 5\r\n15 10\r\n0 0Output:Case 1: 1\r\nCase 2: 11\r\nCase 3: 210",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RPS",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "2 1\r\n10 5\r\n15 10\r\n0 0",
      "expected_output": "Case 1: 1\r\nCase 2: 11\r\nCase 3: 210",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5\n10 3\n1 9\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n5 4\n9 4\n1 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n9 2\n5 1\n5 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 1\n13 3\n6 2\n17 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 6\n6 7\n4 12\n16 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 9\n4 11\n3 19\n1 12",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 11\n18 20\n19 4\n5 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 7\n19 13\n7 1\n16 12",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2 3\n9 5\n8 3\n9 9",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10 8\n3 4\n6 6\n5 6",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2 6\n6 1\n4 8\n3 10",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "9 7\n1 4\n3 2\n1 9",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 9\n10 8\n9 1\n5 3",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "9 9\n7 3\n8 1\n10 8",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "9 7\n10 1\n5 2\n2 1",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "20 20\n20 20\n20 20\n20 20",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "20 20\n20 20\n20 20\n20 20",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "20 2\n20 2\n1 20\n20 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 19\n1 19\n19 1\n19 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}