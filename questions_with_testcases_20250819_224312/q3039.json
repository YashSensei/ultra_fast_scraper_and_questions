{
  "problem_code": "problems",
  "title": "Ada and Branches",
  "tags": [],
  "text": "Ada the Ladybug lives on a bush. A typical bush consists of some fruits connected with branches. Ada wants to travel between some fruits. Problem is that each edge can stand only someXiweight (so if some         creature  with more weight would like to travel over the edge, it would         break and the creature would fall of the bush).Ada wants to make several travels so she asks you (for each such travel) to how many distinct fruits she can get?InputThe first line of each test-case will contain three integers2 ≤ N ≤     105, the number of  fruits,1 ≤ M ≤     2*105, the number of edges and1 ≤ Q ≤     3*105, the number of queries.The nextMlines will contain three integers0 ≤ a, b <     N (a ≠ b), the fruits which are connected by and edge and1 ≤     Xi≤ 105.The nextQlines will contain two integers0 ≤ a <     N, the fruit Ada starts in and1 ≤ Y ≤     105, her actual weight.NOTEMultiedges are allowed.OutputFor each query, output the number of fruits Ada can get to.Example Input4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5Example Output4\r\n2\r\n1Example Input8 10 8\r\n1 3 3\r\n1 2 2 \r\n3 5 1\r\n3 4 3\r\n2 4 7\r\n5 6 2\r\n4 6 8\r\n4 7 3\r\n7 0 1\r\n6 0 4\r\n1 3\r\n1 4\r\n0 5\r\n6 6\r\n6 1\r\n2 3\r\n0 4\r\n5 2Example Output7\r\n1\r\n1\r\n3\r\n8\r\n7\r\n4\r\n8",
  "sample_input": "4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5",
  "sample_output": "4\r\n2\r\n1",
  "link": "https://www.spoj.com/problems/ADABRANC",
  "scraped_at": "2025-08-17 00:34:35",
  "test_cases": [
    {
      "input": "4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5",
      "expected_output": "4\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 8 9\n3 4 8\n2 5 4\n5 7 6\n6 9 3\n4 4\n1 7\n8 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 7\n7 10 7\n9 8 8\n9 7 6\n7 7 4\n3 9\n10 1\n2 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 4\n9 9 9\n2 2 9\n10 6 5\n1 9 2\n9 3\n6 5\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 39 23\n3 13 58\n78 52 46\n98 62 46\n75 92 91\n84 40\n5 13\n79 14",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 9 62\n35 15 47\n69 99 17\n2 89 83\n56 18 96\n1 13\n21 60\n47 90",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 45 19\n76 99 28\n14 82 75\n55 72 73\n62 91 83\n78 75\n23 95\n67 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "72 39 80\n70 18 53\n97 82 81\n22 91 68\n12 94 99\n13 98\n64 15\n82 53",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 94 27\n99 3 44\n7 42 65\n88 9 94\n23 50 12\n36 11\n42 95\n11 40",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 26 52\n9 17 20\n6 47 49\n6 16 16\n24 23 50\n31 15\n51 36\n38 38",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "25 6 25\n12 28 43\n23 8 29\n31 49 14\n20 28 24\n19 32\n28 16\n28 48",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "6 31 30\n37 11 38\n11 51 23\n19 33 24\n6 31 8\n26 22\n49 51\n28 37",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 41 21\n30 16 24\n40 34 24\n38 17 19\n29 37 28\n48 52\n34 23\n48 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 42 8\n31 32 30\n27 12 25\n29 43 32\n49 12 52\n14 25\n28 48\n30 49",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "29 7 33\n22 31 49\n18 21 46\n17 6 40\n26 35 42\n7 25\n39 36\n44 30",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "52 50 42\n7 32 24\n49 24 10\n18 45 23\n10 51 31\n10 18\n35 31\n40 16",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 104 105\n2 105 1\n105 1 105\n105 2 104\n1 104 2\n1 105\n105 2\n105 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 104\n104 104 104\n105 104 104\n1 105 1\n1 105 2\n2 1\n104 105\n105 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}