{
  "problem_code": "problems",
  "title": "Halloween treats",
  "tags": [],
  "text": "Every year there is the same problem at Halloween: Each neighbor is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year's experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided.Your job is to help the children and present a solution.InputThe input contains several test cases.The first line of each test case contains two integerscandn(1 ≤ c ≤ n ≤ 100000), the number of children and the number of neighbours, respectively. The next line containsnspace separated integersa1, ...  an(1 ≤ ai≤ 100000), whereairepresents the number of sweets the children get if they visit neighbouri.The last test case is followed by two zeros.OutputFor each test case output one line with the indices of the neighbours the children should select (here, indexicorresponds to neighbouriwho gives a total number ofaisweets). If there is no solution where each child gets at least one sweet, print \"no sweets\" instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them.ExampleInput:4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0Output:3 5\r\n2 3 4",
  "sample_input": "Input:4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0Output:3 5\r\n2 3 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HALLOW",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0",
      "expected_output": "3 5\r\n2 3 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6\n8 6 5 8 6\n6 10\n9 4 3 3 9 5\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n6 6 6 9 8\n5 6\n3 3 4 7 8 2\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n1 6 1 10 3\n8 5\n2 10 2 8 2 4\n1 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 61\n49 40 53 19 55\n45 29\n95 13 53 47 80 34\n76 75",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 48\n86 61 6 69 63\n86 55\n42 81 73 21 46 59\n83 93",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 16\n61 23 57 87 76\n75 63\n95 76 7 66 69 49\n70 63",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 57\n53 3 34 87 81\n20 94\n19 89 26 68 66 10\n45 71",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 9\n98 3 38 33 23\n80 33\n100 58 39 70 73 86\n91 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32703 30072\n33599 39161 40050 21330 40739\n9475 22356\n37396 45065 36824 40210 48967 41505\n27453 6909",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "46824 17729\n48382 48456 7921 25955 24698\n47402 38412\n17328 32889 27971 15358 5965 26259\n48166 9406",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "49999 26744\n42122 8401 32263 30304 33309\n35485 41631\n31828 25811 45460 9003 6492 47878\n5530 15280",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "46934 31409\n41113 13069 15656 43495 13406\n49582 16522\n33878 41248 6125 47096 39843 46275\n9274 26004",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "45489 21244\n10248 9151 20653 46939 11081\n42137 20274\n43409 6029 27557 43812 18129 13257\n30675 22118",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "12722 41956\n20684 5047 28335 28867 27820\n8802 41539\n24684 40019 23372 41944 32308 41903\n5326 34827",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "6560 39187\n49904 44002 19580 45957 35347\n10157 33488\n45807 41851 29278 42186 7444 31590\n31335 31675",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000 100000 100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000 100000 100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n2 100000 1 1 100000\n99999 1\n100000 2 2 1 2 100000\n2 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n1 1 2 99999 100000\n100000 2\n100000 2 2 100000 2 100000\n100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}