{
  "problem_code": "problems",
  "title": "Traveling by Stagecoach",
  "tags": [],
  "text": "Once upon a time, there was a traveler.He plans to travel using stagecoaches (horse wagons). His starting point and destination are fixed, but he cannot determine his route. Your job in this problem is to write a program which determines the route for him.There are several cities in the country, and a road network connecting them. If there is a road between two cities, one can travel by a stagecoach from one of them to the other. A coach ticket is needed for a coach ride. The number of horses is specified in each of the tickets. Of course, with more horses, the coach runs faster.At the starting point, the traveler has a number of coach tickets. By considering these tickets and the information on the road network, you should find the best possible route that takes him to the destination in the shortest time. The usage of coach tickets should be taken into account.The following conditions are assumed.A coach ride takes the traveler from one city to another directly connected by a road. In other words, on each arrival to a city, he must change the coach.Only one ticket can be used for a coach ride between two cities directly connected by a road.Each ticket can be used only once.The time needed for a coach ride is the distance between two cities divided by the number of horses.The time needed for the coach change should be ignored.InputThe input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).n m p a bt1 t2 ... tnx1 y1 z1x2 y2 z2...xp yp zpEvery input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.n is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.a is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.The second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1 <= i <= n). You can assume that the number of horses is between 1 and 10.The following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1 <= i <= p). You can assume that the distance is between 1 and 100.No two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions.OutputFor each dataset in the input, one line should be output as specified below. An output line should not contain extra characters such as spaces.If the traveler can reach the destination, the time needed for the best route (a route with the shortest time) should be printed. The answer should not have an error greater than 0.001. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.If the traveler cannot reach the destination, the string \"Impossible\" should be printed. One cannot reach the destination either when there are no routes leading to the destination, or when the number of tickets is not sufficient. Note that the first letter of \"Impossible\" is in uppercase, while the other letters are in lowercase.ExampleInput:3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0Output:30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856Note: Since the number of digits after the decimal point is not specified, the above result is not the only\r\nsolution. For example, the following result is also acceptable.30.0\r\n3.66667\r\nImpossible\r\nImpossible\r\n2.85595",
  "sample_input": "Input:3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0Output:30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856",
  "sample_output": "30.0\r\n3.66667\r\nImpossible\r\nImpossible\r\n2.85595",
  "link": "https://www.spoj.com/problems/TRSTAGE",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0",
      "expected_output": "30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 9 9 7 10\n3 3 5\n5 8 6\n9 6 9\n2 8 9\n6 10 5 1 7\n7 2\n5 2 10\n1 6 5\n6 9 10\n10 10 2\n6 4 7 1 6\n10 4\n6 6 4\n5 3 2\n10 9 4\n7 4 8 3 8\n6\n1 7 5 6 7\n6 9 9 6 7 6 10 7\n3 3 4\n10 8 6\n10 2 5\n7 9 6\n8 7 7\n3 1 9\n1 7 4\n4 1 8\n1 9 4\n1 8 3\n6 5 7 6 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 4 2 3 9\n10 6 1\n3 3 9\n6 9 8\n4 7 10\n8 6 2 7 6\n4 9\n9 10 1\n10 9 6\n9 8 4\n7 1 8\n1 1 7 1 10\n3 2\n7 6 3\n3 7 1\n8 7 6\n3 10 8 1 9\n1\n9 1 3 5 4\n1 10 8 5 2 4 2 7\n6 10 3\n6 5 1\n8 2 1\n7 8 10\n9 6 4\n10 9 6\n6 4 10\n3 10 2\n8 3 4\n8 7 9\n3 4 3 7 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 9 8 3\n3 8 1\n7 3 3\n9 9 3\n3 7 8\n1 7 4 2 3\n9 5\n3 2 5\n10 7 2\n10 3 8\n2 2 1\n9 2 2 6 9\n1 2\n8 4 9\n10 4 7\n9 2 8\n9 5 2 4 1\n3\n6 3 1 6 2\n3 8 3 1 6 4 5 7\n1 4 6\n5 2 7\n1 1 6\n10 8 3\n5 6 6\n8 2 9\n2 6 7\n5 10 4\n6 7 10\n10 4 10\n6 9 3 1 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 73 82 30 45\n1 1 74\n70 55 58\n77 78 11\n41 31 12\n84 62 48 79 71\n26 65\n6 94 1\n58 18 70\n62 58 45\n18 41 29\n85 86 76 78 7\n47 7\n78 88 82\n59 17 94\n86 80 50\n95 16 23 30 77\n80\n87 44 35 83 34\n76 55 37 89 98 22 59 42\n51 68 83\n97 16 81\n71 43 66\n89 79 24\n99 82 61\n23 62 68\n19 11 42\n75 99 60\n59 89 100\n33 91 56\n28 55 99 19 71",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 5 64 83 87\n10 94 98\n79 38 89\n48 31 63\n13 12 76\n73 19 89 49 66\n91 42\n72 97 34\n58 75 85\n61 75 76\n66 83 21\n75 28 41 91 9\n35 52\n76 19 7\n81 50 37\n99 48 77\n93 76 45 77 46\n47\n39 95 71 47 4\n100 55 31 41 51 74 50 41\n22 84 13\n76 90 88\n60 28 91\n90 68 27\n48 100 36\n31 1 16\n39 64 74\n8 38 98\n50 55 99\n34 84 19\n87 87 15 96 15",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 54 46 39 72\n37 13 23\n1 42 41\n30 52 73\n44 60 22\n35 78 95 68 91\n46 58\n59 32 18\n67 75 91\n64 61 77\n43 9 45\n83 39 10 87 19\n2 74\n33 53 19\n2 21 22\n43 15 67\n32 92 30 95 93\n24\n19 13 91 41 80\n18 9 17 82 40 81 74 19\n43 85 66\n92 95 60\n93 71 28\n78 89 95\n79 75 24\n7 61 64\n1 5 29\n71 73 71\n18 34 63\n36 69 1\n100 26 64 96 54",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 32 100 93 57\n52 29 98\n62 31 4\n40 43 72\n26 37 48\n26 86 83 25 59\n64 96\n40 38 76\n73 97 18\n69 32 91\n70 33 40\n2 24 38 34 82\n64 42\n27 74 59\n89 35 30\n75 45 14\n50 71 37 33 61\n33\n84 33 50 76 80\n4 95 70 29 51 100 10 70\n34 30 3\n66 70 92\n22 1 29\n4 30 50\n95 29 71\n75 4 39\n23 74 75\n5 5 73\n12 12 44\n63 51 29\n72 96 72 61 14",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "10 74 97 3 53\n76 10 28\n61 33 70\n48 4 23\n93 89 91\n67 70 29 63 57\n28 14\n17 27 9\n66 100 77\n60 10 67\n6 11 58\n92 89 85 90 53\n43 56\n31 25 78\n6 31 55\n25 32 47\n96 50 85 40 89\n6\n58 70 2 32 100\n9 13 42 67 69 56 46 39\n31 71 45\n15 31 74\n28 39 88\n50 51 20\n2 10 67\n47 16 96\n50 14 24\n6 78 71\n60 2 42\n22 77 55\n89 62 20 85 96",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "156 153 208 126 264\n291 438 178\n274 289 447\n136 69 400\n357 71 499\n403 369 112 246 56\n184 233\n403 191 492\n268 135 293\n348 416 215\n165 304 432\n435 477 360 228 185\n166 173\n453 81 263\n210 238 420\n74 165 477\n144 442 305 464 500\n429\n421 224 231 268 288\n203 302 469 368 139 318 358 338\n241 154 332\n125 111 425\n61 196 296\n182 495 354\n130 343 265\n453 257 144\n56 419 274\n291 336 373\n262 160 221\n169 147 325\n180 148 159 282 412",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "418 59 166 237 268\n321 120 91\n293 432 285\n293 86 463\n224 409 412\n140 76 452 409 246\n278 458\n460 209 479\n66 174 454\n359 214 302\n244 325 192\n217 388 113 342 463\n123 278\n376 413 98\n320 168 444\n113 281 220\n488 492 499 369 244\n375\n119 87 174 167 371\n166 254 398 497 217 402 239 498\n214 393 434\n186 146 75\n500 299 298\n324 284 325\n360 82 57\n443 386 115\n226 432 70\n243 452 224\n137 133 357\n70 65 227\n400 232 370 203 405",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "256 357 329 209 269\n50 422 66\n375 223 148\n470 173 494\n288 102 252\n477 166 164 72 458\n72 247\n63 263 289\n73 87 374\n159 152 264\n146 79 84\n113 409 147 216 204\n482 234\n58 499 215\n330 274 271\n214 56 443\n351 471 122 138 491\n309\n219 481 121 105 114\n384 253 498 139 169 244 54 467\n419 71 267\n339 340 133\n424 270 372\n488 86 429\n52 256 344\n263 179 315\n160 107 131\n488 473 92\n207 351 375\n156 339 435\n482 322 326 97 215",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "483 369 59 178 376\n61 442 72\n444 257 443\n232 439 199\n158 290 367\n481 311 147 195 103\n468 71\n346 490 461\n409 323 103\n290 87 134\n311 399 351\n56 374 371 394 178\n211 189\n301 297 468\n284 82 419\n285 329 500\n177 227 103 417 489\n91\n181 98 421 97 394\n323 271 386 209 478 128 453 189\n111 240 110\n228 336 286\n346 458 487\n110 422 289\n197 264 340\n231 400 463\n328 124 309\n112 258 177\n203 310 276\n433 58 377\n101 272 257 293 154",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "434 344 468 266 469\n267 92 196\n69 479 497\n243 305 56\n498 407 62\n212 296 383 375 494\n64 311\n438 369 281\n117 321 106\n160 152 264\n478 233 194\n494 427 74 354 307\n219 395\n360 351 241\n196 404 308\n172 258 100\n459 290 368 393 351\n345\n419 162 488 115 227\n59 396 373 151 126 421 112 78\n221 482 124\n480 318 391\n340 88 151\n187 273 447\n320 140 439\n100 192 463\n280 350 96\n159 373 202\n316 323 255\n189 489 176\n282 66 169 196 487",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "154 298 313 394 218\n269 396 494\n295 376 76\n405 351 359\n86 215 255\n294 349 262 360 215\n133 293\n383 301 470\n369 195 338\n163 282 119\n107 268 86\n491 73 63 172 325\n171 349\n350 403 302\n99 344 439\n247 324 118\n80 84 248 221 226\n409\n109 454 293 210 272\n59 158 358 460 352 161 242 58\n207 147 363\n116 398 170\n151 403 316\n110 410 92\n353 376 264\n344 351 305\n113 359 124\n64 297 237\n304 384 453\n57 354 447\n67 487 119 363 144",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "97 159 70 448 373\n464 114 70\n457 331 210\n367 275 457\n373 285 330\n305 284 443 369 196\n281 411\n415 377 219\n283 408 485\n178 130 251\n372 479 359\n337 352 85 322 95\n65 72\n301 448 346\n227 351 410\n458 203 408\n322 482 72 420 233\n159\n183 388 285 179 257\n163 324 325 162 271 85 153 201\n298 220 136\n190 239 140\n409 448 59\n385 188 422\n402 422 434\n350 436 85\n441 65 392\n435 303 146\n489 91 121\n155 419 322\n275 384 289 369 237",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1 2 1000\n1 2 1000\n1000 1000 1000\n1000 1000 2\n1 1 999\n1000 1 2 2 2\n1 999\n2 1000 999\n999 999 2\n999 2 2\n1 999 2\n2 1000 1000 999 999\n999 999\n999 999 1000\n2 1000 1000\n999 999 1000\n1000 1000 1 999 1000\n1\n1 2 1 999 999\n1 1000 1 2 2 2 1 2\n1 2 1\n2 1 999\n1000 1000 1\n999 1 1\n999 2 999\n1000 1000 1\n1000 1000 999\n2 1000 999\n1 1000 999\n999 999 1000\n1 999 2 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 2 1 2\n1000 2 999\n2 2 999\n999 2 999\n2 1 1000\n999 1 2 2 999\n1000 2\n999 1000 1000\n1 2 1000\n2 1 2\n999 1000 1\n999 999 2 1000 1\n1000 1000\n1000 1 1000\n1000 999 1\n1 2 2\n2 1000 1000 2 1\n1\n1 2 1 999 1000\n2 1000 2 1 1000 999 2 1000\n1 1 999\n1000 1000 2\n999 1000 999\n999 1 1000\n1 1 1\n1000 999 999\n1 1 1000\n999 2 1000\n1000 1000 1000\n1 999 2\n1000 1 999 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}