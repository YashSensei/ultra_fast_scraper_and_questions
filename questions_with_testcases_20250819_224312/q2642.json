{
  "problem_code": "problems",
  "title": "PP numbers",
  "tags": [],
  "text": "PP numbers are prime numbers and palindromes in decimal notation at once. Your task is to findn-th PP number in ascending order. Then calculate product of its non-zero digits - let's call itm- and findm-th prime number in ascending order.InputIn the first line of input there is one positive integerZ(1 ≤Z≤ 1000) which states the number of test cases. FollowingZlines contain test cases.Each test case consists of one positive integern(1 ≤n≤ 113) which states the number of PP number to find.OutputFor each test case print in separate line two numbers:n-th PP number andm-th prime number.ExampleInput:3\r\n1\r\n5\r\n2Output:2 3\r\n11 2\r\n3 5",
  "sample_input": "Input:3\r\n1\r\n5\r\n2Output:2 3\r\n11 2\r\n3 5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MB1",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "3\r\n1\r\n5\r\n2",
      "expected_output": "2 3\r\n11 2\r\n3 5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n4\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n7\n6\n10\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "6\n84513390\n40667219\n24967429\n20389215\n76162896\n65932376",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n48326784\n64270440\n28520555\n55216794\n92704659\n37948721\n54828118\n20440571\n82328810",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n58808773\n15621907\n9993433\n95758609\n82557207\n6381756\n34840398\n99096313\n96921363\n52182794\n26756361\n3844366\n47663684\n73399302\n20683810",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n37062165\n96991568\n63010218\n56420974\n75804713\n31261339\n59305997\n57019969\n96293977\n23898000\n3308507\n74061606\n61894686\n45170669\n88763445\n24790268\n57750337\n44172870\n20981384",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n76154663\n22198075\n25243793\n89036227\n24865075\n63874711\n49810653\n7176419\n53773036\n42096169",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "82\n28131\n58155\n95088\n65676\n11764\n91281\n60190\n9013\n90569\n14104\n51054\n69498\n98189\n90514\n98933\n94554\n72892\n53501\n75658\n74166\n11785\n49162\n31907\n42120\n22382\n48146\n51471\n78524\n69558\n59181\n53959\n50434\n33974\n44689\n24303\n63759\n63220\n16504\n54501\n8029\n89974\n73270\n54307\n3583\n12889\n17606\n10551\n22143\n61423\n55067\n44839\n86862\n27842\n6913\n59661\n44707\n17075\n27380\n16189\n99896\n38365\n71107\n19155\n3899\n92421\n39224\n88869\n83370\n55441\n78046\n75721\n48690\n71468\n71157\n72065\n33250\n3549\n76269\n72097\n92223\n60144\n28772",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n34782\n62574\n56381\n68968\n63667\n90918\n12556\n42926\n38322\n14318\n38734\n76502\n65740\n2074\n170\n26734\n7896\n80607\n98873\n73466\n31644\n574\n82999\n16551\n98319\n29056\n77300\n44636\n90098\n39511\n52298\n64286\n86830\n93974",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "49\n5359\n92056\n87638\n36582\n88106\n21214\n18747\n78873\n56423\n87280\n40817\n83015\n37341\n58085\n97585\n53002\n22344\n64852\n73326\n68851\n75309\n13495\n92133\n98495\n89552\n14634\n40505\n46086\n28430\n68225\n2358\n60283\n95194\n12408\n53750\n45193\n12607\n9619\n11334\n5701\n21473\n27143\n62541\n30202\n56754\n60933\n66761\n46059\n27521",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "111\n61826\n85427\n33386\n33748\n66835\n33673\n20829\n512\n38106\n58530\n90237\n78456\n30295\n42974\n82298\n34362\n2310\n60038\n29161\n74353\n51648\n26778\n1238\n20505\n51681\n57946\n7346\n4548\n36412\n72606\n85549\n62579\n55461\n66442\n23743\n39760\n40091\n8504\n33835\n65192\n61194\n97422\n10827\n89135\n93468\n81162\n21407\n20523\n16563\n63805\n30100\n86771\n42444\n5189\n77463\n31495\n46819\n61242\n16599\n92759\n9641\n92881\n2927\n87796\n77880\n80231\n63540\n16135\n73631\n34589\n9864\n45656\n48361\n75628\n69690\n68377\n64011\n60341\n98965\n88716\n23233\n68181\n94457\n7501\n62731\n80351\n62136\n23848\n37726\n31454\n82590\n38920\n53834\n70493\n29464\n75665\n61192\n50619\n52625\n61125\n8033\n75265\n75228\n77232\n92941\n14881\n418\n47800\n45078\n47811\n95416",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "73\n77614\n16498\n56097\n91402\n97593\n60437\n92786\n84904\n36548\n79185\n27055\n59577\n58528\n21001\n89607\n34772\n40385\n58857\n38429\n14756\n34716\n72488\n87035\n90673\n96347\n39364\n82597\n71303\n57884\n78585\n36053\n57879\n32102\n67373\n70617\n43173\n28892\n11853\n32264\n44772\n59877\n47722\n91871\n85135\n37289\n35405\n22583\n92572\n51324\n72920\n15525\n69787\n64008\n27939\n74134\n59293\n65093\n90977\n62351\n25537\n17638\n45115\n21526\n60979\n99140\n64868\n55685\n46607\n91267\n23239\n77156\n15748\n76723",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "77\n62036\n81063\n81969\n5659\n59427\n23931\n92482\n921\n27109\n1938\n13669\n92518\n27970\n55882\n24258\n5265\n68745\n6205\n8054\n93612\n14574\n31922\n3352\n58953\n81955\n79486\n53823\n47603\n15686\n97747\n30764\n3690\n23928\n13857\n93087\n41535\n22199\n57444\n57746\n95048\n88167\n17759\n16271\n22866\n58872\n35082\n48033\n16270\n41405\n67164\n14861\n25201\n83747\n48224\n84848\n28988\n42427\n22269\n89580\n84249\n75684\n55279\n46019\n66092\n54037\n11397\n33731\n34561\n24710\n68364\n7208\n58592\n98246\n92442\n69493\n20299\n92402",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "89\n63268\n35611\n14020\n19555\n62628\n95422\n73644\n91546\n2217\n11759\n36570\n35788\n99480\n48944\n20817\n79822\n21119\n58577\n68895\n57075\n47599\n32675\n70461\n78744\n74334\n15368\n38048\n67979\n9839\n59543\n81262\n8085\n64727\n17280\n59507\n20055\n15850\n42461\n97882\n6934\n21317\n61802\n93724\n83499\n44993\n40470\n90680\n34701\n93040\n87623\n35502\n76174\n5766\n57054\n10659\n47630\n68456\n64999\n50645\n80643\n41676\n50556\n7441\n42996\n12142\n57110\n51460\n25899\n69027\n94617\n33325\n44567\n90378\n27346\n93721\n40632\n7485\n21214\n65293\n4085\n64252\n93758\n8646\n42926\n60957\n43787\n11674\n70208\n42549",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "113\n4311486\n3352191\n52410843\n16018022\n51077666\n73976062\n34287710\n84805170\n88877310\n97378944\n89497213\n26619777\n49983034\n35359657\n47287277\n56814146\n33160854\n66425381\n31844221\n43538076\n3869420\n39050795\n87051873\n32541467\n9704981\n95175204\n53713728\n58138592\n52660392\n45146978\n13762330\n86037571\n33182886\n42325169\n73825966\n10658205\n72023812\n50024963\n12153478\n89908431\n74609274\n28849985\n75216712\n23925621\n95861189\n69082232\n88433839\n99864989\n88499591\n95200103\n19363812\n57637591\n59548636\n49887676\n60803140\n57843241\n10079659\n6937260\n2267788\n26583876\n88284609\n68749724\n74902152\n81607131\n33300679\n69900587\n87094993\n91566612\n40900999\n1834560\n82391413\n7769039\n66671665\n41286228\n64988719\n44765934\n17767721\n83747444\n1895866\n14651818\n66615767\n15699178\n35121205\n91508601\n4369765\n80696447\n58913487\n19159800\n14694114\n95209382\n91935316\n55463062\n32573726\n46093154\n80494004\n75826140\n97778600\n13084899\n27547556\n52531440\n98577046\n73649399\n3087188\n42484395\n43511387\n32366042\n97908012\n21322184\n89016145\n81779909\n32961229\n15231832\n23391965",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 113)"
    },
    {
      "input": "113\n82783039\n81602991\n60617530\n97374889\n3841025\n46812946\n83985236\n72437789\n85367016\n16098116\n98171601\n32749068\n4648696\n15631157\n49414524\n58771657\n41570002\n97037779\n6445425\n62480902\n49112509\n74793815\n55258409\n99207266\n32772458\n12099250\n53392077\n98617821\n50193437\n7089533\n82522676\n1433496\n79148322\n58339275\n9987606\n64925336\n36880468\n22640507\n79332606\n19810997\n18566980\n11485816\n26923528\n78019793\n71695063\n11051415\n58576276\n45420218\n57986164\n32314961\n28315132\n16108180\n89081152\n64017671\n16970650\n51879261\n41718880\n19131897\n56958130\n736294\n86449756\n26409200\n61063922\n17357465\n45184630\n62207035\n31698032\n36821635\n62267673\n61940654\n64515112\n44654711\n10708652\n27801992\n41955367\n67994598\n92042863\n74441515\n60207051\n98064717\n15085245\n69320285\n21866430\n62531289\n24519456\n45348214\n85634674\n95483920\n94332460\n34127193\n16822237\n64054303\n71791867\n90635776\n67856879\n12739839\n26558881\n66731404\n89821609\n5877240\n64057053\n63940687\n78278300\n86117231\n56492948\n50134803\n75797695\n33763340\n72343914\n29105524\n18888891\n6822726\n82356540",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 113)"
    },
    {
      "input": "1\n81197644",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}