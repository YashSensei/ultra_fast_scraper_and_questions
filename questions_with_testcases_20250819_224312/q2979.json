{
  "problem_code": "problems",
  "title": "NEO",
  "tags": [],
  "text": "Given array with n integer elements. We divide it into several part (may be 1), each part is a consecutive of elements. TheNEO valuein that case is computed by: Sum of value of eachpart. Value of apartis sum all elements in this part multiple by its length.Example:We have array: [ 2 3 -2 1 ]. If we divide it look likes: [2 3] [-2 1]. Then NEO = (2 + 3) × 2 + (-2 + 1) × 2 = 10 - 2 = 8.Because there are many ways to divide an array into several part, so we can get many of NEO value. Your task is find the NEO with maximum value.InputFirst line: T (number of test case, T ≤ 10)For each of test case:+ First line: n (1 ≤ n ≤ 105)+ Second line: a[1], a[2] ... a[n] (-106≤ a[i] ≤ 106)OutputEach testcase print theExampleInput:14\r\n1 2 -4 1Output:3",
  "sample_input": "Input:14\r\n1 2 -4 1Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NEO2",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "14\r\n1 2 -4 1",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n4\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n6\n3\n9\n5\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n6\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n34834800\n72563578\n5459030\n78011846\n99984253\n43377278\n71618184\n29950301\n10804092\n51368016\n76301774\n7435342\n64897293\n26121053\n13134689\n23183880\n52396167\n33989164\n8061925\n19485761",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n21431613\n42763865\n27644012\n541886\n67775550\n93379054\n12994841\n84360260\n70045615\n74962992\n14060257\n11289443\n59531677\n38093127\n3882358\n77693261\n58471458\n12327745",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n8664740\n47956386\n12878637\n80587647\n88411915\n61497184\n16762944\n55570483\n86312545\n70425537\n1018386\n86516202\n11241323\n58060414\n80309084",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n59011112\n82493112\n89274776\n8671985\n78782766\n33128853\n37135402\n39413009\n3228973\n27130951\n24403193\n79219648\n4564392\n61056784\n40967342\n40240368\n31072437",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n52759641\n37251093\n56477632\n722959\n49165564\n1010092\n71681760\n85568606\n67386193\n12105718\n17789312\n1215399\n15272255\n74478317\n34863348\n2639628\n76917642\n2227631",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "53\n18064\n62927\n81625\n51642\n63270\n86488\n95388\n92562\n57653\n30353\n72089\n40499\n80259\n28125\n22894\n4421\n99464\n52062\n62684\n99106\n59717\n12082\n13327\n95001\n17706\n50770\n13783\n86911\n74877\n88304\n18973\n12137\n17724\n8554\n7564\n53135\n65864\n55663\n48049\n59052\n98199\n84430\n60884\n70098\n99296\n16299\n19144\n37510\n65881\n93218\n54007\n38624\n29210",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n21061\n90950\n22475\n81886\n54503\n91057\n83102\n24361\n55861\n23452\n89200\n80350\n19938\n72433\n75539\n84155\n47708\n30204\n68199\n27888\n84440\n28404\n73698\n39986\n98330\n52040\n51006\n44458\n47928\n28003\n24779\n95883\n3022\n36255\n81737\n85773\n23366\n99765\n58166\n59755\n15619\n28628\n14649\n73514\n73260\n30844\n6277\n19414\n50860\n87597\n42559\n70701\n78560\n55649\n74464\n16552\n92746\n93068\n86420\n49888\n90836\n83646\n49166\n47995\n89855\n30954\n79575\n56119\n12308\n51176\n24679\n38790\n48023\n47271\n39923\n67466\n89306\n150\n2405\n32995\n36494\n69192\n4595\n34566\n38816\n24804\n64754\n12480\n92246\n62476\n14298\n57193\n57700\n42953\n57756\n1871\n83149\n13233\n60321\n20909",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n78506\n78523\n20449\n18322\n2664\n84622\n8658\n24625\n56939\n65382\n37011\n38177\n3426\n55822\n25330\n72756\n1253\n45858\n69273\n46930\n76349\n23651\n48300\n19356\n62106\n43600\n34857\n81715\n29623\n23060\n90277\n37350\n20543",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n31109\n51764\n90452\n40133\n50341\n6085\n79466\n22453\n20364\n89796\n87780\n76355\n65234\n48114\n96008\n3171\n81929\n41406\n12477\n99994\n81058\n3621\n51500\n56128\n52339\n34016\n27423\n24965\n95556\n59392\n91213\n80715\n26643\n7931\n2399\n25222\n48016\n9998\n97547\n87158\n96670\n79733\n76743\n13150\n7051\n38706\n93726\n78827\n36038\n28802\n71850\n33659\n45597\n49931\n88023\n12458\n29667\n40167\n82984\n72466\n78058\n39952\n42948\n16517\n76658\n27677\n83292\n4170\n35023\n64955\n90872\n96172\n57074\n62907\n76188\n26318\n31745\n65800\n31022\n80270\n99339\n11679\n16657\n53570\n55638\n83485\n98911\n22427\n59860\n6108\n46769\n68854\n47172\n96822\n55871\n80393\n66272\n95388\n53933\n52679",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n54398\n94538\n95173\n80765\n77582\n50729\n3742\n11134\n8080\n49408\n68336\n71051\n81061\n73277\n78754\n35735\n99090\n59095\n14300\n76236\n83734\n7045\n95095\n1773\n35174\n80502\n64430",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n73856\n61073\n91657\n69237\n78080\n54527\n56122\n63749\n40884\n19926\n98192\n4953\n43547\n14505\n7538\n94504\n35214\n14087\n75025\n26383\n71468\n80049\n24766\n46816\n43618\n65095\n87790\n47851\n44916\n88822\n80942\n24309\n97325\n70223\n15940\n47621\n46802\n59709\n37264\n86249\n52855\n86415\n65933\n96293\n87086",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "49\n83495\n23565\n54604\n62443\n2536\n71646\n53399\n36494\n20529\n59338\n31855\n97591\n1268\n69808\n10112\n20581\n3130\n10398\n294\n76310\n32536\n43904\n54319\n71114\n60867\n57154\n95996\n89574\n93454\n80820\n9483\n67584\n72563\n71164\n60618\n95019\n23666\n12473\n78852\n40524\n65680\n68882\n64863\n67162\n89428\n19559\n19335\n6699\n33494",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n34869839\n62649692\n64691142\n493946\n58886490\n87584929\n46536952\n19109622\n50408525\n97029106\n65632022\n71855597\n97887298\n86421815\n87243426\n97508679\n68214755\n13886338\n44935553\n67584198\n53185362\n93520941\n78463536\n14829108\n6656312\n85472822\n62219210\n95225425\n85494802\n81523314\n89284847\n17011228\n96718848\n84402536\n37811508\n66615041\n43756394\n83758614\n10402890\n25306365\n10703283\n32746031\n52373910\n13368744\n70343703\n1186157\n37691590\n67580791\n37079443\n73369887\n83725817\n73859965\n44814246\n97387131\n59290380\n93742032\n38960435\n56005351\n36268216\n96764505\n70795484\n24830416\n51169819\n82941347\n59899116\n31488906\n31608730\n49998106\n3207841\n17352235\n9690539\n97447140\n48930473\n38495637\n82983285\n30603599\n8003816\n40061405\n28223431\n97351917\n53414222\n92365113\n8780618\n7602801\n58546482\n15764985\n19734151\n46446550\n99305162\n83870071\n68933397\n55019989\n61729989\n57655342\n36036828\n77474685\n10110039\n91260584\n54534698\n48712587\n92927790\n3112593\n17166140\n92821141\n63826657",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n88318750\n95502236\n51853441\n18654331\n48774308\n76731927\n36372350\n62093600\n10986294\n43953591\n74558734\n49014225\n40299660\n4591060\n17179966\n28909152\n50640275\n88222600\n79161175\n4960022\n69487870\n45309647\n75615726\n22226988\n64175578\n5743754\n88807489\n46909757\n86894811\n65356727\n65803592\n19514994\n28901432\n8610040\n85390069\n70594915\n32231801\n72684084\n98318073\n85813713\n3685389\n27913073\n24327075\n25986100\n40469035\n20781849\n28759189\n30017529\n5889332\n82949807\n66228269\n54048732\n24082859\n92766267\n85957638\n68700504\n72424269\n33196330\n77596565\n59757561\n20737726\n64550967\n91952044\n87801050\n5048446\n1401071\n55025709\n33345676\n35009679\n7499359\n65369888\n15209831\n99854349\n36127098\n21883817\n81056654\n63973230\n85852205\n39247870\n35281458\n98331383\n51989630\n56418065\n62896254\n48346517\n33483359\n13518017\n11472688\n91264732\n3358787\n92883788\n81152612\n90709304\n71713221\n30532663\n18014429\n95447166\n5119707\n63327825\n93715099\n81012702\n24501653\n80960390\n36582732\n34784689",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n24673716",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}