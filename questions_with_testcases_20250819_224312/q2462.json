{
  "problem_code": "problems",
  "title": "I Speak Whales",
  "tags": [],
  "text": "According to Wikipedia, a Walsh matrix is a specific square matrix, with dimensions equal to a power of 2, the entries of which are +1 or -1, and the property that the dot product of any two distinct rows (or columns) is zero. Below are the first three Walsh Matrices. (The gray lines are imaginary lines for illustration purpose only.)A Walsh Matrix of size 2^(N+1)  can be constructed as the \"union\" of 4 Walsh Matrices of size 2^N  arranged such that the lower right matrix is inverted whereas the other 3 matrices are not, i.e.:Let's number the rows of a given Walsh Matrix from the top starting with row 0. Similarly, let's number the columns of the matrix from the left starting with column 0. Given the four integers N , R , S , and E , write a program that will construct a Walsh Matrix of size 2^N  and will print the sum of all the numbers in row #R between columns #S and #E (inclusive.)InputYour program will be tested on one or more test cases. Each test case is specified using a single line listing four integers in the following order: N , R , S , and E , where 0 <= N <= 60 , 0 <= R < 2^N  , 0 <= S <= E < 2N  , and E - S <= 10,000 . The last line of the input file has four -1's and is not part of the test cases.OutputFor each test case, print the output on a single line.ExampleInput:2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1Output:0\r\n48",
  "sample_input": "Input:2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1Output:0\r\n48",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ANARC08I",
  "scraped_at": "2025-08-17 00:33:53",
  "test_cases": [
    {
      "input": "2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1",
      "expected_output": "0\r\n48",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 7 4 1\n2 8 10 6\n5 6 9 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 6 3\n9 10 3 6\n1 4 7 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9 7 9\n3 4 8 2\n1 3 9 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "82 99 27 42\n81 48 59 94\n47 47 87 96",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 63 16 17\n92 80 19 50\n65 8 64 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "58 32 42 86\n16 36 95 97\n17 3 97 42",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 86 49 55\n77 39 76 59\n46 51 81 5",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 22 92 49\n21 22 72 6\n52 10 47 35",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "68 411 67 81\n422 181 104 201\n337 417 181 327",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "431 115 215 499\n464 396 468 145\n112 153 412 259",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "418 451 461 373\n160 248 152 253\n296 463 164 108",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "59 497 395 448\n90 64 314 397\n452 100 267 290",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "203 295 123 244\n471 391 343 124\n321 270 453 413",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "294 192 303 206\n125 406 428 84\n258 239 141 398",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "221 86 271 407\n396 208 204 493\n471 102 219 430",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 1000 999\n1000 999 1000 1000\n1 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1 2\n1000 999 999 999\n999 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}