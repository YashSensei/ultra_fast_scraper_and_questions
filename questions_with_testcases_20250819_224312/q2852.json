{
  "problem_code": "problems",
  "title": "Ada and Teams",
  "tags": [],
  "text": "Ada the Ladybug is a well known mathematician. Next week she is going to represent her school in Mathematic Olympiad. There are many schools participating and each of them has many students. Anyway only some of the students and only some of the schools will be available to participate in the Olympiad. Question is, how many combinations of students can participate in the Olympiad?More specifically: There areNschools from which exactlyAwill participate. Moreover there areBstudents in each school and exactlyDof them will participate in the Olympiad.Ada could count it herself. But this process takes too much time and the limits for schools and students are changing every moment so she has decided to make a program for it (in fact she has decided that you will make the program for her)!InputThe input contains up to104lines, each containing four integersN,A,B,D,1 ≤ A ≤ N ≤ 106,1 ≤ D ≤ B ≤ 106OutputFor each line print the number of combination of students, which can participate in the Olympiad. All students and universities are distinguishable, but their order doesn't matter.Since the answer might be huge, print it modulo109+7(1000000007)Example Input2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20Example Output2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
  "sample_input": "2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20",
  "sample_output": "2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
  "link": "https://www.spoj.com/problems/ADATEAMS",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20",
      "expected_output": "2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6 9 5\n3 6 7 6\n8 4 2 8\n4 6 1 1\n10 1 6 6\n1 1 3 5\n2 1 7 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 5 10\n3 3 3 7\n1 10 8 8\n1 6 3 2\n7 1 10 7\n10 7 10 2\n8 5 2 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 3 7 8\n7 9 4 4\n3 9 6 9\n7 8 4 8\n6 5 10 1\n9 2 5 4\n8 7 4 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "94 58 35 16\n11 7 16 89\n19 86 46 29\n86 34 44 81\n34 31 26 8\n39 20 81 72\n17 70 22 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "52 36 39 32\n41 37 53 33\n99 87 8 21\n22 14 83 79\n17 86 19 86\n16 69 4 33\n12 67 46 44",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 8 88 95\n40 80 33 6\n31 3 14 94\n95 17 30 44\n42 19 96 23\n81 61 88 64\n29 88 12 26",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "32 91 11 80\n33 52 4 75\n81 97 30 27\n99 92 41 97\n65 35 13 19\n51 4 76 2\n60 20 57 72",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "74 66 82 100\n93 10 91 9\n80 88 12 68\n47 1 17 6\n62 33 48 76\n86 78 5 70\n76 19 95 88",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "37 15 52 23\n14 23 28 20\n48 31 53 24\n53 48 30 52\n36 26 13 23\n7 34 51 10\n18 38 49 53",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "14 43 6 34\n14 35 51 30\n33 50 50 14\n19 8 48 25\n11 49 41 35\n37 24 16 23\n20 38 36 36",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "33 33 44 21\n13 31 5 6\n7 29 30 7\n51 6 24 23\n47 36 9 38\n28 50 10 47\n50 15 26 35",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 37 32 43\n37 17 42 41\n6 48 38 44\n8 43 45 52\n26 53 37 36\n52 51 9 22\n14 43 13 25",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47 37 52 42\n13 45 18 49\n30 13 52 49\n15 20 31 53\n24 53 20 39\n16 16 37 48\n28 17 29 53",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "10 31 42 19\n12 30 11 53\n22 30 45 51\n19 40 43 21\n9 19 13 39\n52 41 5 22\n43 25 21 42",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "29 31 22 6\n42 16 41 34\n48 32 35 10\n25 9 29 10\n44 25 27 17\n46 32 25 37\n6 37 36 44",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 106 1\n2 2 1 1\n2 1 106 106\n2 105 2 1\n106 2 106 1\n2 106 2 2\n105 1 2 105",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "106 105 106 1\n1 106 2 2\n2 2 2 105\n106 2 2 106\n105 106 106 2\n106 105 105 1\n2 1 106 106",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}