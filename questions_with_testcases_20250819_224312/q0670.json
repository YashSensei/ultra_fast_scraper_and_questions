{
  "problem_code": "problems",
  "title": "Hyperactive Girl",
  "tags": [],
  "text": "Helen is a hyperactive girl. She wants to schedule her activities so that at any moment of the day there is at least one thing she can do. She does not care if her activities overlap in time, as long as every moment of her day has an activity scheduled.Helen divided the day in a particular way. The day starts at time 0 and ﬁnishes at time M. Each moment of the day is represented by a real number between 0 and M, inclusive. Helen made a list of all possible activities, with their start and ﬁnish times. Now she must decide which subset of activities to schedule.If an activity starts at time S and ﬁnishes at time F, then we say that it covers all moments between S and F, inclusive. Helen does not want to waste any activities, so she will only choose minimal subsets of activities that cover the day to be scheduled. A subset of activities is a minimal subset that covers the day if and only if:every moment of the day is covered by at least one activity of the subset; andremoving any of the activities from the subset would leave at least one moment of the day uncovered.Note that some moments of the day may be covered by more than one activity.Given the list of possible activities for one day, you must help Helen by determining how many distinct minimal subsets cover the day.InputEach test case is given using several lines. The ﬁrst line contains two integers M and N, representing respectively the highest value for a moment in the day (1 ≤ M ≤ 109) and the number of possible activities for the day (1 ≤ N ≤ 100). Each of the next N lines describes one possible activity and contains two integers S and F, representing respectively the start and ﬁnish times of the activity (0 ≤ S < F ≤ M).The last test case is followed by a line containing two zeros.OutputFor each test case output a single line with a single integer representing the number of minimal subsets that cover the day. To make your life easier, print the remainder of dividing the solution by 108.SampleInput:8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0Output:4\r\n1\r\n0",
  "sample_input": "Input:8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0Output:4\r\n1\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MHLAR10",
  "scraped_at": "2025-08-17 00:33:32",
  "test_cases": [
    {
      "input": "8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0",
      "expected_output": "4\r\n1\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 5\n10 1\n4 8\n3 8\n4 2\n7 3\n10 5\n3 2\n6 5\n1 4\n8 4\n6 4\n10 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 8\n4 5\n8 5\n8 5\n10 8\n4 7\n3 3\n1 2\n3 1\n9 2\n4 5\n8 10\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2\n9 3\n2 1\n1 7\n5 8\n10 1\n2 2\n7 2\n1 8\n7 1\n10 9\n8 6\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "17 63\n85 79\n22 8\n32 78\n10 91\n36 40\n67 50\n29 16\n15 69\n66 38\n14 55\n69 1\n94 60",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "32 70\n78 95\n76 15\n23 50\n88 95\n28 77\n14 99\n10 6\n31 76\n88 13\n41 50\n57 5\n79 48",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 32\n94 13\n47 3\n69 39\n74 46\n81 44\n28 84\n1 38\n54 22\n1 26\n85 34\n54 93\n2 63",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 5\n65 94\n60 81\n50 50\n1 72\n6 94\n72 85\n8 83\n16 26\n37 77\n48 35\n8 19\n84 60",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 27\n26 11\n85 59\n61 38\n72 87\n46 27\n89 37\n64 83\n6 62\n50 27\n68 58\n88 22\n96 57",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23 8\n5 9\n24 50\n21 35\n15 13\n9 21\n35 41\n45 18\n25 17\n18 10\n24 50\n25 43\n20 38",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "27 44\n50 27\n10 7\n25 36\n40 39\n46 23\n38 48\n47 12\n15 26\n6 39\n12 9\n44 15\n20 35",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "38 5\n25 46\n28 33\n8 40\n47 23\n19 43\n24 40\n15 39\n41 11\n27 13\n47 27\n9 34\n43 42",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "30 42\n37 31\n38 26\n42 46\n47 8\n33 44\n25 38\n8 41\n49 34\n23 17\n7 5\n21 34\n25 19",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "48 20\n19 15\n42 39\n20 16\n35 46\n5 31\n14 17\n44 17\n35 50\n27 35\n5 46\n41 39\n30 48",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "33 43\n24 17\n38 20\n6 49\n17 21\n49 47\n40 28\n29 37\n44 21\n17 41\n31 27\n50 48\n48 31",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 26\n36 27\n47 39\n35 49\n31 8\n39 34\n39 43\n32 45\n47 44\n39 28\n33 40\n23 28\n23 8",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 100\n1 2\n99 99\n99 2\n99 2\n1 99\n1 2\n99 100\n1 99\n99 1\n2 99\n2 99\n100 100",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99 100\n2 99\n1 1\n100 99\n1 1\n1 100\n100 99\n100 99\n1 1\n1 99\n1 100\n99 1\n100 99",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}