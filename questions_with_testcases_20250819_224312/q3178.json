{
  "problem_code": "problems",
  "title": "Generating Alien DNA",
  "tags": [],
  "text": "GigaFarma is one of the largest pharmaceutical companies in the world, and it is currently conducting experiments using alien DNA. Its goal is to produce a chain of alien DNA that will report the maximum possible benefit when commercialized.A chain ofalienDNA can be understood as a non-empty sequence of genes connected by links, and in turn eachgeneis a non-empty sequence of bases. Because not every possible sequence of bases corresponds to a valid gene, GigaFarma has created a catalogue of genes that appear in alien DNA, which are the only ones considered valid sequences of bases. Each of these genes has avalueaccording to its functionality, and a given chain of alien DNA has amarket valuethat is the sum of the values of the genes that compose it.We will represent the differentbaseswith lowercase letters,'a'-'z', andlinksusing a hyphen'-'. In the following example we can see on the left a possible list of genes and their corresponding values; on the right there are some chains of alien DNA that can be formed with these genes, along with their corresponding market values.GigaFarma can only produce very specific DNA chains, which we callproducible. These chains are a non-empty sequence of DNA portions that the company can synthesize, joined without any additional links between them. Eachportionis a sequence of bases and links containing at least one link, but without any consecutive, initial or final links. Each portion has a givencost, determined by the difficulty associated to its production, so each producible chain of DNA has aproduction costthat is the sum of the costs of each of the portions that form it. In the following example, we can see on the left a list of DNA portions and their costs; on the right we have some producible chains of DNA that can be formed with these portions, along with their associated production cost.Note that there might be multiple ways of forming the same producible chain using different portions. This is the case of\"como-como-les\"in the example, which can be obtained using portions\"como-co\"and\"mo-les\"with a production cost of7, or just using\"como-como-les\"with a production cost of12. Of course, when there is more than one way to synthesize a given producible chain of DNA, GigaFarma will always do so using the cheapest possible process.Clearly, the set of alien DNA chains is infinite, just like the set of producible DNA chains. However, GigaFarma is not directly interested in any of these sets, but in their intersection. If we check the previous examples, we can see that\"como-les\"is a valid alien DNA chain, but is not producible;\"mo-les\"is producible, but is not an alien DNA chain; and\"como-como-les\"is both. For each alien and producible DNA chain, the company can commercialize this chain to get anet benefitthat equals the market value of this chain minus its production cost. Of course, if this net benefit is not positive, the corresponding chain will never be produced.Because there is so much genetic material all over the place, GigaFarma would pay anything in order to know what is the maximum net benefit it can obtain for some producible and alien DNA chain.InputEach test case is described using several lines. The first line contains two integer numbersGandP, representing the number of genes in the catalogue and the number of portions GigaFarma can produce (1 ≤ G, P ≤ 100).Each of the followingGlines describes a different gene using a stringSand an integerV. The stringShas between1and10characters, and is formed solely by lowercase letters representing the bases that form this gene; the integerVrepresents the value of this gene (1 ≤ V ≤ 1000).Each of the followingPlines describe a different DNA portion, using a stringTand an integerC. The stringThas between1and30characters, and is composed of lowercase letters and hyphens only, respectively representing the bases and links in this portion.Tcontains at least one link, but will never have initial, final or consecutive links. The integerCrepresents the production cost for the corresponding portion (1 ≤ C ≤ 1000).Note that in every test case, all of the genes are different from one another, and all of the portions are also different from one another. The end of the input is signalled by a line containing two times the number-1.OutputFor each test case, you should print a single line containing an integer number, representing the maximum net benefit that GigaFarma can obtain from a producible and alien DNA chain. If no net benefit is positive, you should print the value 0. If the net benefit can be arbitrarily large, you should print an asteris'*'.ExampleInput:4 6\r\nhola 5\r\ncomo 5\r\nles 3\r\nva 2\r\ncomo-co 3\r\nmo-co 8\r\nmo-les 4\r\ncomo-como-les 12\r\nta-no-sirven 100\r\nhasta-es 200\r\n2 3\r\nxyz 1000\r\nzyxxyz 1000\r\nxyz-zyx 1\r\nzyx-xyz 1\r\nxyz-xyz-zyx-xyz 1\r\n2 1\r\nabc 1\r\nabcabc 1000\r\nabc-abc 999\r\n1 1\r\nser 10\r\nno-ser 5\r\n-1 -1Output:6\r\n0\r\n*\r\n0",
  "sample_input": "Input:4 6\r\nhola 5\r\ncomo 5\r\nles 3\r\nva 2\r\ncomo-co 3\r\nmo-co 8\r\nmo-les 4\r\ncomo-como-les 12\r\nta-no-sirven 100\r\nhasta-es 200\r\n2 3\r\nxyz 1000\r\nzyxxyz 1000\r\nxyz-zyx 1\r\nzyx-xyz 1\r\nxyz-xyz-zyx-xyz 1\r\n2 1\r\nabc 1\r\nabcabc 1000\r\nabc-abc 999\r\n1 1\r\nser 10\r\nno-ser 5\r\n-1 -1Output:6\r\n0\r\n*\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2012G",
  "scraped_at": "2025-08-17 00:34:21",
  "test_cases": [
    {
      "input": "4 6\r\nhola 5\r\ncomo 5\r\nles 3\r\nva 2\r\ncomo-co 3\r\nmo-co 8\r\nmo-les 4\r\ncomo-como-les 12\r\nta-no-sirven 100\r\nhasta-es 200\r\n2 3\r\nxyz 1000\r\nzyxxyz 1000\r\nxyz-zyx 1\r\nzyx-xyz 1\r\nxyz-xyz-zyx-xyz 1\r\n2 1\r\nabc 1\r\nabcabc 1000\r\nabc-abc 999\r\n1 1\r\nser 10\r\nno-ser 5\r\n-1 -1",
      "expected_output": "6\r\n0\r\n*\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 9\n1\njyl 6\n5\nyles 9\n3\nbja 7\n9\nu 7\n7\ndnjhb 1\n1\nsni 1\n1\nwh 1\n6\neiqohaf 6\n2\ngmvrmve 5\n10\nmunh 9\n8 5\n3\nhlii 7\n9\nc 2\n7\nwfrxrid 1\n10\ntei 3\n8\nn 2\n6 1\n10\nss 4\n7\nugloy 2\n1\nj 7\n6 4\n5\ne 5\n7\ndikpao 9\n8 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n3\nphy 10\n7\nbp 3\n3\ne 6\n2\nbz 1\n9\nmsegxo 10\n2\nxy 6\n1\nqxdv 4\n5\nluqmrjconbd 1\n10\ncma 8\n1\npmh 5\n2 5\n3\nev 10\n4\npcx 8\n10\nadry 7\n3\njg 4\n8\ntlk 10\n7 7\n1\na 7\n10\nrz 8\n1\naxdrr 4\n8 3\n9\nwof 8\n2\nufpd 10\n6 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 4\n8\nphk 6\n1\nfdv 5\n6\ni 8\n2\ntnrvb 8\n3\ntrc 2\n5\ns 8\n2\ns 2\n5\nmzmftsty 2\n9\nqskws 2\n3\nn 2\n5 6\n1\nbi 10\n8\nyf 8\n5\njj 7\n1\nttwmny 5\n6\nsdrjoahjaffk 4\n10 3\n4\nbobzi 10\n3\nqz 10\n6\nhbpojm 1\n6 3\n7\nzgcy 6\n7\nosx 2\n1 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "87 39\n76\nqll 30\n53\nameb 62\n35\nt 15\n9\nw 64\n94\nvxsk 7\n29\ncg 21\n26\nnz 2\n40\nrm 49\n52\nxxuxpqepw 39\n19\ngkydnqbq 23\n7 86\n94\nykm 73\n21\neisfe 67\n16\nwb 52\n55\nhjj 38\n60\njlkxvyq 41\n66 76\n5\nrcs 82\n91\ni 7\n23\nivf 87\n15 64\n16\nf 73\n94\nj 37\n95 19",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "75 16\n13\ny 65\n19\ndthtc 86\n56\nd 52\n51\nl 98\n2\nq 90\n63\ndu 93\n46\nhklps 72\n12\nyiwktg 61\n54\nryfume 87\n8\nutwukug 71\n63 2\n86\nsbobu 53\n76\ncghvo 10\n82\nearxenl 26\n18\nmp 16\n77\nur 22\n52 22\n17\nvfvk 32\n19\nql 90\n65\nibbiqbs 99\n28 65\n60\nukc 97\n90\nhfaqs 77\n5 3",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "74 56\n64\nq 43\n35\ngfzpx 4\n63\nddic 95\n43\nhike 63\n80\nbyb 49\n86\ndypxl 35\n61\nc 1\n23\nrsg 89\n92\nrzfglxc 36\n67\nqalmwc 80\n49 60\n100\nzcl 39\n17\npod 23\n42\nlbn 15\n38\nsoimas 94\n91\nwezivybyqd 56\n98 82\n39\nwtwfk 35\n68\nxlyt 77\n44\nxy 76\n48 52\n71\nxkax 43\n76\nj 85\n33 84",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 66\n23\nwgow 3\n93\npfq 68\n80\ng 80\n37\ntmszu 86\n50\nydmo 7\n39\nfheby 20\n65\nqyxgg 9\n57\ndgaovhz 36\n98\nyqpoidpdpv 19\n42\ngfl 54\n9 21\n92\ngy 47\n30\nbtzbdb 84\n53\noxpqnnp 47\n49\nxjuydz 72\n84\nwptksbru 13\n9 37\n14\nhdq 39\n49\nd 31\n52\nqia 95\n93 82\n86\nclq 25\n41\ndhcagb 42\n65 62",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "78 72\n55\nwf 26\n97\nj 48\n93\nq 18\n71\nij 57\n70\nkuilzhv 26\n42\ngsfw 86\n44\nwbi 43\n28\ne 74\n73\ntexjonnymy 2\n11\nsijibb 12\n66 90\n67\npfje 81\n18\njluzcn 48\n39\nq 8\n85\nbchhmzu 55\n17\nsbmvptshvi 100\n85 48\n88\nv 67\n70\nhfe 58\n20\nn 72\n31 23\n45\nowxa 36\n11\nmxnwrj 23\n74 87",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "203 495\n156\nk 195\n360\nq 149\n156\nkc 111\n219\nm 51\n249\nknfdxyi 282\n324\nw 160\n342\nnut 337\n225\nfiqyqz 366\n461\nsnxgijia 75\n375\nkec 103\n185 227\n488\npcqw 144\n226\nosiwie 325\n283\nezhmohb 446\n385\ntv 203\n487\nnoclqie 450\n174 256\n106\njhrn 137\n152\nms 488\n95\np 157\n335 464\n117\nhjs 90\n119\njdub 124\n166 208",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "159 167\n449\nz 207\n66\nipka 289\n236\nanpez 402\n445\nlxx 376\n500\nvup 172\n350\np 221\n396\nt 317\n329\nhwdudet 415\n293\nfzckkixlww 184\n132\nflm 235\n305 459\n486\ng 421\n265\noc 97\n124\nyikvdxt 265\n304\nqo 415\n441\nuuqt 88\n348 430\n177\noqq 169\n179\ndsag 227\n401\nubv 262\n132 493\n85\nzacc 394\n426\nlfwry 354\n232 101",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "258 290\n337\np 497\n190\nm 385\n399\nbcjt 61\n296\nhy 447\n184\ntzno 259\n492\nom 158\n94\nmol 194\n428\ncrrx 466\n241\nqrceuntvijd 228\n382\nszt 496\n332 260\n428\nstrf 216\n51\nnyihhj 159\n332\nfymt 135\n413\nwprpmd 171\n130\nlitw 491\n206 105\n255\nx 365\n236\ngrhuxc 326\n353\nf 433\n248 476\n389\nvby 282\n168\nvqyglz 477\n404 447",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "361 62\n80\nqhhh 402\n112\nvdje 85\n474\nlk 295\n251\ncgji 79\n402\ncyxlquh 399\n318\nv 475\n146\nzqdiw 73\n245\nl 119\n325\nzglbljwbea 281\n196\nrmtp 132\n206 154\n430\nwx 67\n361\nepu 109\n266\nquyuwxi 471\n190\nmpflm 264\n328\nnkmitabwsh 385\n165 495\n452\nigg 366\n348\nrxb 493\n458\nkwlaubw 280\n79 76\n207\njt 359\n362\nvgb 404\n465 155",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "149 378\n480\nf 305\n378\ni 93\n297\nkk 285\n81\ndgjkj 383\n109\nybuexdr 51\n461\nkg 85\n70\ntuqewp 235\n60\ncadqbuldfex 409\n383\nucp 165\n223\nonlgno 89\n276 317\n160\noq 83\n431\nivtv 341\n384\nvhgs 255\n379\nzuhdk 124\n400\nngelvlvtrdmcka 301\n455 206\n493\nzpx 412\n327\nwewq 59\n229\njjukflo 110\n470 218\n210\naax 231\n204\nw 203\n361 81",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "425 87\n70\nct 63\n476\nec 377\n207\nztsop 62\n290\nis 116\n491\njnn 242\n244\nw 321\n88\nriyzhh 73\n194\nbsir 254\n378\nwshe 292\n408\nddemqivt 223\n66 178\n399\nuaem 455\n245\nyxyn 353\n205\ntl 320\n60\nepuhc 186\n297\ne 246\n263 322\n251\nm 209\n205\nd 65\n153\nb 121\n378 241\n190\nnunvd 498\n72\nh 147\n464 437",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "349 432\n446\nmzpws 156\n428\neuobz 53\n310\njtj 301\n432\ntrmt 376\n332\nslmrzwn 396\n107\ncpnl 198\n480\ngp 449\n265\ncbri 373\n299\nffnesfc 371\n61\ngpbksclz 363\n293 372\n123\nqzuau 322\n221\nhkawwi 277\n104\ntklqan 416\n431\nehs 339\n290\nou 196\n237 236\n294\nzxls 387\n397\nvgsvw 193\n77\nupn 133\n380 104\n457\nvrtcr 54\n138\nyy 421\n400 186",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\nomvg 1000\n1000\nexzsa 1000\n1000\nop 1000\n1000\njbmw 1000\n1000\nr 1000\n1000\notk 1000\n1000\nxymdk 1000\n1000\nzqs 1000\n1000\nkbnyplqci 1000\n1000\ngx 1000\n1000 1000\n1000\nospkc 1000\n1000\nlipbm 1000\n1000\no 1000\n1000\ncwf 1000\n1000\nju 1000\n1000 1000\n1000\nxw 1000\n1000\nyayw 1000\n1000\nysa 1000\n1000 1000\n1000\nhv 1000\n1000\nwavwfm 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\nw 1000\n1000\nirzqw 1000\n1000\nqv 1000\n1000\ntzica 1000\n1000\nk 1000\n1000\nsmeh 1000\n1000\npoc 1000\n1000\nqzgkdz 1000\n1000\ntjcy 1000\n1000\nruyurcg 1000\n1000 1000\n1000\neraxb 1000\n1000\nhtl 1000\n1000\ngka 1000\n1000\nt 1000\n1000\nfnf 1000\n1000 1000\n1000\nde 1000\n1000\nllmuq 1000\n1000\nyefj 1000\n1000 1000\n1000\nvegw 1000\n1000\nl 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n2\np 999\n999\nj 1\n999\nl 1000\n1000\nxlbv 999\n1000\nh 2\n1\nxw 1\n2\nunero 1\n1000\nxxjwcmujtuofm 1000\n1000\nzuuzm 999\n1\ndphzg 1000\n999 1\n1\nj 1\n1000\nrrpky 1000\n999\nwh 1\n1000\nbkgnh 1000\n2\nntmzyrihu 1000\n2 2\n999\nyuvno 1000\n1000\nv 999\n999\nam 999\n1 2\n1000\nzjjog 999\n2\nbcg 1\n999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n2\ni 999\n1000\nv 999\n999\nv 2\n1\ndz 999\n1000\nltamdm 1000\n1000\nhels 1000\n2\njtlnx 1\n999\nlvcg 999\n1\nitbjsornltxo 2\n1\ngtz 999\n2 1\n1\naetm 999\n1000\nik 1\n1\nhyssq 999\n1\ncpyleup 999\n2\nxsjob 2\n1 1000\n2\nnlf 1000\n2\nqpl 1\n1\njfyo 999\n1000 1\n999\ngksrw 1\n1000\ncu 1\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}