{
  "problem_code": "problems",
  "title": "GO GOA GONE",
  "tags": [],
  "text": "So, it was winter and Me and 8 of my friends decided to plan a trip to GOA. Since the Bars and Clubs are too Expensive out there, we decided to pool money together for our whole trip expenses. Now since every group has some internal politics going on, same applies to our group also :P. 2 Members that are having a cold war between them won't go to the trip if the other one is going. But Since we want to enjoy a lavish party, we want to maximize the pooled money. So, for this task I've chosen my marwari friend Mohit to solve this problem (He's good at money matters). Your task is to help Mohit achieve the maximum pooled money.InputFirst Line will contain 8 space separated integers denoting the money contributed by each member in order.The next line will contain the total number of pairs having a cold war in between them. Let us denote this by P.The next P lines will contain 2 numbers separated by a space showing the members having a cold war. Numbers used to denote members will be (1 - 8) for each of the 8 members.ConstraintsEverything is guaranteed to easily fit in 32 bit integer type.OutputOutput will give the maximum amount of money that can be pooled.ExampleInput:3 14 5 2 3 4 1 9\r\n4\r\n1 2\r\n2 3\r\n4 5\r\n7 8Output:30",
  "sample_input": "Input:3 14 5 2 3 4 1 9\r\n4\r\n1 2\r\n2 3\r\n4 5\r\n7 8Output:30",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ALCATRAZ2",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "3 14 5 2 3 4 1 9\r\n4\r\n1 2\r\n2 3\r\n4 5\r\n7 8",
      "expected_output": "30",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5 9 6 1 3 3 4\n1\n5 7\n1 5\n10 10\n10 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 7 6 9 8 2 9\n7\n2 1\n5 6\n6 9\n4 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 4 5 2 8 4 5\n3\n4 3\n3 6\n7 3\n9 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 64 72 52 86 74 48 61\n80\n87 86\n78 56\n37 6\n39 84",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 84 13 75 52 38 10 11\n51\n83 94\n42 73\n46 43\n17 39",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 74 41 95 10 91 66 86\n95\n70 42\n76 31\n8 66\n98 49",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 93 40 79 74 51 30 27\n100\n33 94\n36 44\n97 37\n41 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 76 29 13 31 55 7 36\n32\n48 68\n62 51\n79 5\n5 25",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "129 120 427 156 461 113 261 500\n110\n409 394\n469 138\n183 219\n145 204",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "217 265 85 433 341 278 367 72\n55\n241 428\n125 253\n456 459\n384 309",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "303 366 423 249 308 410 427 371\n66\n467 125\n468 321\n103 159\n166 490",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "280 81 418 94 164 250 497 441\n64\n231 421\n235 431\n473 180\n326 254",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "284 128 247 208 195 291 324 342\n301\n195 211\n361 435\n437 137\n364 178",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "334 403 380 373 396 467 211 113\n111\n384 122\n165 391\n134 136\n297 308",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "468 137 380 213 390 139 466 144\n142\n436 405\n289 259\n450 85\n218 352",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 2 1 999 1000 999 2\n2\n2 1\n999 1000\n999 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 999 1000 2 1 1 1\n1\n1 1\n1 2\n999 1000\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}