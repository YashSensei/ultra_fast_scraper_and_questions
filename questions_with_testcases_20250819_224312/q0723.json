{
  "problem_code": "problems",
  "title": "Ball Stacking Again",
  "tags": [],
  "text": "The XYZ TV channel is developing again a new game show, where a contestant has to make a choice in order to get a prize. The game consists of a triangular stack of balls, each of them having an integer value, as the example shows.The contestant must choose exactly one ball and his prize is the sum of the value of that ball and the balls directly on top of it. Notice that the prize can be negative!Your friend is going to participate on the game show, and he wants you to develop a program that can tell the maximum prize possible.InputEach test case is described using several lines. The first line contains an integer N representing the number of rows of the stack (0 < N < 1001). The i-th of the next N lines contains i integers Bij (-1000 ≤ Bij ≤ 1000 for 1 ≤ j ≤ i ≤ N); the number Bij is the value of the j-th ball in the i-th row of the stack (the first row is the topmost one, and within each row the first ball if the leftmost one). After each test case there is a blank line.The last test case is followed by a line containing one zero.OutputFor each test case output a line with an integer representing the maximum prize a contestant can make from the stack.ExampleInput:2-21 -1031-5 36 -4 10Output:-15Note:On the first test case, the optimal solution is to take the ball with value 1, making you remove the ball with value -2, resulting in -1.On the second test case the best option is to take the ball with value 1 on the bottom row, resulting in 1+3+1 = 5.",
  "sample_input": "Input:2-21 -1031-5 36 -4 10Output:-15",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BALLSAG",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "2-21 -1031-5 36 -4 10",
      "expected_output": "-15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5 7 8 9 6 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 4 1 6 9 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 8 2 2 4 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 22 23 89 65 35 70",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 35 75 59 37 100 72",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 47 93 13 70 34 88",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 22 14 74 76 39 84",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "71 36 51 43 1 95 76",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "145 84 270 265 349 59 488",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "328 89 243 77 243 444 69",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "267 492 244 356 89 237 180",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "410 183 455 76 86 403 150",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "292 160 286 129 440 477 331",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "107 236 399 138 256 230 233",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "387 366 436 211 392 373 385",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1001 1001 1001 1001 1001 1001 1001",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1001 1001 1001 1001 1001 1001 1001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1001 1 1000 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1001 1 1000 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}