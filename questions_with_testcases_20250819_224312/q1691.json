{
  "problem_code": "problems",
  "title": "Fone Frequencies",
  "tags": [],
  "text": "When relay towers for mobile telephones communicate with the mobile phones in their area, there is\r\nalways the possibility of interference. So, when assigning the transmission frequency, the FCC makes\r\nsure that nearby towers have frequencies that aren't too close. On the other hand, the FCC does not\r\nwant to assign too many different frequencies; they want to save as many as possible for other uses.Your job is to find an optimal assignment of frequencies.In this problem, the frequencies will be integers. Nearby towers must be assigned frequencies that differ\r\nby at least 2. You'll find an assignment using as few frequencies as possible. For example, consider the\r\nfollowing two arrangements of towers. Two towers near each other are indicated by the connecting line.Note that the following are legal frequency assignments to these two tower configurations. However,\r\nthe second arrangement does not use the fewest number of frequencies possible, since the tower with\r\nfrequency 5 could have frequency 1.InputThere will be multiple test cases. Input for each test case will consist of two lines: the first line will\r\ncontain the integer n, indicating the number of towers. The next line will be of the form x1 y1 x2 y2 ...\r\nxn yn where xi yi are the coordinates of tower i. A pair of towers are considered \"near\" each other\r\nif the distance between them is no more than 20. There will be no more than 12 towers and no tower\r\nwill have more than 4 towers near it. A value of n = 0 indicates end of input.OutputFor each test case, you should print one line in the format:The towers in case n can be covered in f frequencies.where you determine the value for f. The case numbers, n, will start at 1.ExampleInput:5\r\n0 0 5 7.5 1 -3 10.75 -20.1 12.01 -22\r\n6\r\n0 1 19 0 38 1 38 21 19 22 0 21\r\n0Output:The towers in case 1 can be covered in 3 frequencies.\r\nThe towers in case 2 can be covered in 2 frequencies.",
  "sample_input": "The towers in case n can be covered in f frequencies.",
  "sample_output": "Input:5\r\n0 0 5 7.5 1 -3 10.75 -20.1 12.01 -22\r\n6\r\n0 1 19 0 38 1 38 21 19 22 0 21\r\n0Output:The towers in case 1 can be covered in 3 frequencies.\r\nThe towers in case 2 can be covered in 2 frequencies.",
  "link": "https://www.spoj.com/problems/OU7",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "The towers in case n can be covered in f frequencies.",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\r\n0 0 5 7.5 1 -3 10.75 -20.1 12.01 -22\r\n6\r\n0 1 19 0 38 1 38 21 19 22 0 21\r\n0",
      "expected_output": "The towers in case 1 can be covered in 3 frequencies.\r\nThe towers in case 2 can be covered in 2 frequencies.",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "vhfv suuaf a thtpg vahe dj ys qlau rmhwl yj vljilfwsk",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "fg gcoify i ac gabc bvsv atxu ricwh hsrqg ijbsa qayyblhgwh",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "rbznx ix vchr mu qx zhi fjpls se zmbde uouz xtmmneqtmlkz",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "ke cgddh ri qindr gxj eyo pb du jey csjyh mbsjfdtiax",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "i bepq awctv vgscr aym yci api nnqlsl ep oe ctoqt",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "metma wm ce zwul wql t pvpc diib vchj hxgq ejqfciwzzgsc",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "zp o n z f qoux sfuw jiq t e e",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "pps pgkt do fbx xoji ab uhdc x s pmh midhvioqeygt",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "qsix ettbac ktm lh qm q idpa wx ti x fexfabhhw",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vjm tig kezn ezml j ylzx fox pppooa nhfyc aee bqcmgmb",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "hnooo xxhk rmwx vtdvd x apgj omm yuijm xdoa hiw wlpacyld",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "patel qugtt acr lefw bs sejsw sjlhm lbmr glj o byosthuifxh",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "c hshsg hu peed tezue fgli t rj jt uktn owizsaphdh",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "lkehg dxlqn vwr rgop uv dpn wykqi mzkup mqk jd xoygowgrc",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "wvv xr er e ppg mraf uaws y zotdq cnmc arpg",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "mteea c lgqoh xpwa swhec abxiz wx cktkns u lo ln",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ptq iyarja zgncf f s ymyn wdf axkec ujs furw cwpohr",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "vhc k a sycg gs fc nwkab cjkcjb czeh o gx",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}