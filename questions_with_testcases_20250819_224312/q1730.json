{
  "problem_code": "problems",
  "title": "Horace and his primes",
  "tags": [],
  "text": "Horace likes to play writing natural numbers in the blackboard in his bedroom. One of his favourite games consists in first writing a numbern, then the sum of all the different prime numbers that dividen, and so on until the number written on the board becomes a prime number. For example, if Horace begins writing the numbern = 90, because90 = 2 × 32× 5the next number to be written will be2 + 3 + 5 = 10; then, as10 = 2 × 5Horace will write the number2 + 5 = 7; finally, because7is a prime number the game will end here.Formally, in this game each natural number n >= 2 defines a sequence whose first element is n, and each new element is the sum of all the prime numbers that divide the previous element in the sequence. The order of the game is the position of the first prime number in the sequence, and coincides with the total number of numbers written on the blackboard one the game has ended. In the example from the previous paragraph, with n = 90 the order of the game is K = 3, because the numbers that are written will be 90, 10 and 7.Now, not all games are equally entertaining to Horace, and in this case he prefers to begin by writing a number n such that the order of the corresponding game is a particular value K. Horace would like to know how many different values of n between A and B inclusive satisfy this condition, but because he does not know how to code he needs someone to do this calculation for him. Can you help him?INPUTThe first line contains an integer P which indicates the number of questions Horace wants to ask you (1 <= P <= 10^5). Each of the next P lines describes a question using three integer numbers A, B and K, which mean that Horace would like to know how many different values of n satisfy that A <= n <= B and the order of the game beggining with n is K (2 <= A <= B <= 10^6 and 1 <= K <= 10^6).OUTPUTYou should print P lines, each one containing an integer number with the answer to one of the questions made by Horace, in the order in which they appear in the input.Formally, in this game each natural numbern ≥ 2defines a sequence whose first element isn, and each new element is the sum of all the prime numbers that divide the previous element in the sequence. The order of the game is the position of the first prime number in the sequence, and coincides with the total amount of numbers written on the blackboard once the game has ended. In the example from the previous paragraph, withn = 90the order of the game isK = 3, because the numbers that are written will be90,10and7.Now, not all games are equally entertaining to Horace, and in this case he prefers to begin by writing a numbernsuch that the order of the corresponding game is a particular valueK. Horace would like to know how many different values ofnbetweenAandBinclusive satisfy this condition, but because he does not know how to code he needs someone to do this calculation for him. Can you help him?InputThe first line contains an integerPwhich indicates the number of questions Horace wants to ask you (1≤P ≤ 105). Each of the nextPlines describes a question using three integer numbersA,BandK, which mean that Horace would like to know how many different values ofnsatisfy thatA≤n≤Band the order of the game beginning withnisK(2≤A≤B≤106and1≤K≤106).OutputYou should printPlines, each one containing an integer number with the answer to one of the questions made by Horace, in the order in which they appear in the input.Example 1Input:1\r\n90 90 3Output:1Example 2Input:5\r\n2 9 1\r\n2 9 2\r\n800 810 4\r\n999999 1000000 2\r\n100000 1000000 1000000Output:4\r\n4\r\n5\r\n2\r\n0",
  "sample_input": "Input:1\r\n90 90 3Output:1",
  "sample_output": "Input:5\r\n2 9 1\r\n2 9 2\r\n800 810 4\r\n999999 1000000 2\r\n100000 1000000 1000000Output:4\r\n4\r\n5\r\n2\r\n0",
  "link": "https://www.spoj.com/problems/TAP2013H",
  "scraped_at": "2025-08-17 00:33:45",
  "test_cases": [
    {
      "input": "1\r\n90 90 3",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\r\n2 9 1\r\n2 9 2\r\n800 810 4\r\n999999 1000000 2\r\n100000 1000000 1000000",
      "expected_output": "4\r\n4\r\n5\r\n2\r\n0",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "4\n3\n3\n6\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n8\n2\n2",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "16\n24100443\n21563634\n42134067\n90321771\n45386353\n93310830\n78540578\n75686538\n7118992\n8897995\n53709644\n90934589\n83926729\n6946513\n27119354\n85832433",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n52265779\n93692485\n62425086\n50461932\n43780276\n40171450\n73509159\n50416300\n34559131\n83514950\n96803644\n74148816\n31666174",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n54518354\n82005602\n78911968\n87487825\n61203660\n2382646\n13698555\n19129789\n5218626\n19548536\n81559670\n17419863\n98880784\n11992281\n14331325",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n2480571\n22147366\n95182002\n60508165\n13772919\n91882490\n40184001\n83878702\n60323491\n71161991\n22917805",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n76999293\n46076976\n27184705\n7013570\n46108241\n21948414",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "85\n80757\n18282\n76004\n20897\n27827\n54455\n28061\n13873\n89214\n4902\n72185\n64666\n67235\n75431\n96861\n25838\n89003\n53974\n65547\n829\n72691\n3629\n44728\n22038\n17267\n23850\n3320\n31283\n57533\n16489\n57776\n65171\n51359\n66098\n87748\n31628\n11402\n40326\n64586\n40066\n5501\n10625\n49651\n54422\n90192\n86129\n77808\n1809\n43393\n61893\n59661\n74873\n52381\n61973\n96518\n55406\n49728\n37544\n57780\n51242\n3945\n1181\n83137\n80963\n12214\n69564\n59922\n58128\n9124\n34002\n53187\n71639\n77235\n64977\n62985\n30085\n21708\n14683\n71807\n40991\n14453\n31704\n62832\n44441\n18094",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "86\n81250\n42833\n17616\n88481\n81115\n55104\n87908\n98320\n86984\n27190\n6478\n17282\n89573\n12274\n66328\n83807\n94399\n50676\n29770\n43766\n77552\n98294\n79484\n63576\n15368\n9228\n39992\n49820\n49775\n50484\n50942\n34276\n42275\n7073\n16830\n15455\n26721\n95006\n1430\n4944\n99960\n26739\n93016\n80852\n96276\n57338\n63179\n75672\n35910\n98198\n8517\n54389\n6210\n80113\n22521\n63249\n8958\n65438\n2800\n17653\n99747\n41362\n53117\n25611\n44368\n23471\n74429\n65570\n43446\n6463\n45716\n45989\n5133\n69697\n28232\n26596\n55131\n37286\n14196\n8001\n34288\n73318\n88996\n58354\n81882\n54563",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n99928\n73325\n35477\n82011\n60401\n79388\n43158\n30738\n56634\n82387\n58428\n22398\n62441\n91790\n28481\n70411\n78431\n6715\n80336\n2397\n30779\n26232\n12607\n51049\n11800\n19493\n69611\n46146\n86752\n50747\n83478\n64676\n98192\n13360\n28510\n21492\n61736\n99694",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n26074\n41618\n91451\n19010\n73821\n79685\n14665\n18553\n19835\n10679\n27183\n35681\n91221\n25059\n19559\n2081\n1229\n18268\n73064\n64644",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "53\n40633\n93481\n91044\n61282\n86037\n86891\n55422\n85975\n74685\n97614\n95576\n47314\n36352\n17552\n24676\n92226\n30466\n65082\n69686\n22690\n18546\n53857\n68673\n19013\n7627\n20528\n89167\n84391\n13059\n42719\n36569\n93665\n34415\n38957\n14710\n41452\n69481\n67726\n24018\n75193\n25703\n57862\n86962\n90242\n39624\n76021\n71157\n48699\n52964\n63447\n93920\n71774\n37193",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "73\n25518\n71439\n63712\n90362\n12037\n16757\n81472\n71824\n98651\n69035\n42708\n84224\n98254\n25200\n73562\n35872\n38510\n2332\n45792\n12845\n63518\n92820\n11319\n99667\n81616\n26073\n55949\n95327\n71208\n69420\n78866\n44709\n8241\n512\n46662\n29131\n92166\n71786\n91052\n33930\n16037\n63415\n75239\n76891\n25015\n41539\n78147\n56218\n5734\n51270\n43013\n44284\n26150\n5516\n41824\n48743\n19525\n68831\n89774\n13875\n62505\n50984\n61202\n20788\n29490\n54946\n42273\n35942\n47100\n49828\n84006\n3184\n66966",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "61\n52141\n38481\n56423\n49768\n87982\n66236\n31457\n54967\n53270\n81670\n32783\n63818\n43868\n62437\n2008\n22962\n57218\n10592\n98504\n70725\n71674\n66588\n60401\n95562\n61755\n78401\n60366\n78816\n75710\n9774\n89338\n97721\n38834\n47565\n11497\n75560\n66199\n71812\n8286\n92447\n26808\n5211\n72845\n7545\n11957\n8144\n70682\n74923\n52919\n69767\n18921\n75000\n32496\n80044\n9182\n23064\n24276\n84057\n45519\n59806\n49255",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n57412406\n36188116\n11673022\n71616915\n5666240\n23368969\n51509616\n44298648\n13046619\n33339967\n14634081\n54698848\n80265\n61743934\n47816789\n71389463\n12758827\n2592398\n88543278\n46400623\n54370130\n98079959\n98463132\n44813951\n19546589\n37290108\n93747384\n38181343\n75066418\n64269332\n50548509\n16661390\n24222407\n47510146\n71036258\n2254035\n79260643\n23162798\n45440616\n58311690\n57807850\n54244146\n72896299\n82059316\n37513749\n71307924\n6701504\n29140940\n15374817\n78506560\n72759183\n66184062\n16407540\n83057393\n64053881\n83512674\n40312893\n8660531\n27300362\n95676847\n21983870\n58889688\n56222864\n56761129\n74236124\n90954128\n26819443\n82174066\n41124065\n1519239\n96195426\n30918859\n14313740\n95499269\n27256477\n34722365\n67761606\n48287199\n34154835\n69066324\n60595541\n13460846\n50685935\n58095185\n90915375\n95320412\n14196868\n61672111\n12428579\n36661833",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 90)"
    },
    {
      "input": "90\n6115054\n95405942\n94664055\n28809876\n35414181\n37802528\n57621732\n85256906\n77414812\n46088109\n68921603\n15075010\n51012361\n15731296\n6591984\n2186203\n26231340\n72962141\n23784890\n76322404\n5028785\n92325649\n90696645\n17281105\n68706284\n844028\n46599819\n25152680\n41090161\n23591227\n37763272\n45477349\n13899032\n30641574\n85259797\n36165835\n91885567\n78018942\n71520874\n7915647\n24764075\n53006594\n78007365\n40789508\n87950059\n67940191\n27199444\n78498871\n13856013\n37119092\n69742008\n79386389\n46346229\n93601315\n19232194\n33651540\n28798267\n98489547\n9388940\n25265894\n97634512\n90765618\n41080699\n38828851\n80113989\n43793120\n49942346\n33901421\n34139706\n66730158\n57702155\n80846925\n22778785\n49708614\n25418107\n44057158\n57184965\n97598333\n10536568\n146876\n45625889\n84541408\n17833888\n41867752\n82627673\n5358309\n82258695\n15670928\n93990512\n31063205",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Maximum size array (N = 90)"
    },
    {
      "input": "1\n60382671",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}