{
  "problem_code": "problems",
  "title": "Landfill",
  "tags": [],
  "text": "You are given a sequence H[1], H[2] ... H[N] representing the initial heights of N pieces of land and an integer K. It costs C[i] Rupees to elevate each of H[i], H[i+1] ... H[i+K-1] by E[i]; if i+K > N, it will just elevate all the pieces of land from A[i] to A[N] - Let us call this anoperation. The following constraints must be satisfied:For each i, theoperationcan be performed at most once.The sum of the costs of all the operations performed must be ≤ Budget.You have to calculate the maximum height V such that each plot's elevation is at least V before you exhaust the budget.InputThe first line of input contains 3 integers N, Budget and K.The next N lines consists of 3 integers H[i], E[i] and C[i].OutputOutput a single integer V such that all the plots have at least height V.Constraints1 ≤ K ≤ 111 ≤ N ≤ 1000 ≤ Budget, H[i], E[i], C[i] ≤ 1000000ExampleInput:4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13Output:3ExplanationYou can raise the level of the (unit) segments 1, 2 and 3, yielding a sequence of final heights 4, 8, 10 and 3. The minimum height among these is 3.",
  "sample_input": "Input:4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LANDFILL",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 1 6\n1 2 7\n8 2 9\n4 6 5\n4 1 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 3\n2 8 5\n10 7 1\n6 6 9\n8 10 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 10\n9 5 2\n9 4 7\n2 2 4\n4 4 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 76 22\n2 66 49\n21 96 86\n41 25 13\n15 42 2",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "51 19 83\n32 93 43\n90 63 23\n48 39 68\n70 80 97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "26 82 15\n94 30 62\n64 9 16\n12 97 63\n8 79 82",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "4 6 7\n57 7 77\n74 85 39\n34 39 6\n28 23 72",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "83 1 53\n44 50 12\n34 27 69\n76 57 15\n5 42 98",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "121 412 341\n253 147 168\n423 170 432\n116 66 97\n232 356 398",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "395 140 310\n289 167 108\n276 497 461\n488 271 127\n58 163 374",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "269 52 447\n188 302 482\n430 108 82\n398 205 194\n390 192 489",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "192 68 120\n397 499 222\n90 116 297\n458 63 417\n91 172 186",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "374 83 258\n142 87 74\n475 119 229\n401 380 102\n432 322 243",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "309 279 291\n355 333 345\n64 236 144\n54 352 88\n232 402 86",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "60 350 135\n364 195 66\n424 166 93\n170 242 415\n175 475 58",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 1\n999 2 2\n1000 2 1000\n2 2 1000\n1000 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1\n1000 2 1000\n999 1000 2\n1 1 1000\n1 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}