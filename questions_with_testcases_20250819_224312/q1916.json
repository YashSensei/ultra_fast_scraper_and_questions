{
  "problem_code": "problems",
  "title": "Valences",
  "tags": [],
  "text": "Mr. White has found a way to maximize the purity of crystals based on certain chemical compounds. He has observed that each compound is made of molecules that are linked together following the structure of a complete binary tree where every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Each node of the tree stores the valence of a molecule and is represented as an integer number. Mr. White uses an electronic microscope that dumps the molecule structure as a stream of integer numbers and would like to have your help on automatically obtaining the total valence of only the leaves of the given tree. For example, the sequence 4-3-2-6-0-3 represents the tree shown in the figure and the total valence of the leaves is 9.InputThe input contains several test cases, each one corresponding to a particular compound. Each test case consists of a single line starting with an integer N (1 ≤ N ≤ 1000000), followed by N integer numbers Vi representing the valences of each molecule separated by blank spaces (0 ≤ Vi ≤ 100).The end of input is indicated by a test case with N = 0.OutputFor each compound output a single line with the sum of the valences of the leaves of the tree.ExampleInput:6 4 3 2 6 0 37 1 1 1 2 1 2 10Output:96",
  "sample_input": "Input:6 4 3 2 6 0 37 1 1 1 2 1 2 10Output:96",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013J",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "6 4 3 2 6 0 37 1 1 1 2 1 2 10",
      "expected_output": "96",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 8 1 10 2 1 6 7 8 4 8 9 9 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 10 6 8 9 1 1 3 3 2 2 9 10 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 7 6 2 6 8 10 8 6 4 10 10 5 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "52 61 5 38 1 19 55 31 83 66 18 36 65 33",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "86 24 65 36 91 11 77 55 100 12 59 32 69 31",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "48 92 79 79 5 52 56 14 97 60 37 57 24 53",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "77 4 68 23 80 86 62 78 28 59 24 1 26 4",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 68 100 91 22 11 22 17 89 96 70 20 87 54",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "151859 213831 269678 409128 444102 418860 262760 200319 411606 488223 101030 150163 303851 53132",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "229660 391357 225524 244888 412231 324257 358085 314578 379854 426710 81235 408604 462033 340343",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "405417 322208 202483 102632 447713 211998 411145 187492 486906 317883 114448 249286 372206 211431",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "248391 350366 472397 422784 168031 310558 294902 158570 109658 55849 401745 220505 248166 481542",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "56181 168811 212155 54607 90483 440419 150499 371880 154356 152258 323124 365204 364553 327815",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "253162 191369 313129 198606 318729 188193 91254 379387 56303 128616 328553 378165 438416 123681",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "290803 413830 221605 220022 339447 182031 408896 308471 430204 201198 124952 215702 193645 73468",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1 1 999999 2 1 999999 1 1 1000000 2 2 1000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 2 1 1000000 1000000 999999 2 1 999999 999999 999999 1 2 999999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}