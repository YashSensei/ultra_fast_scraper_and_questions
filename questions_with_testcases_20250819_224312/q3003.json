{
  "problem_code": "problems",
  "title": "Ada and Panels",
  "tags": [],
  "text": "Ada the Ladybug has proved successful in solving some hard problems, so a construction\r\ncompany has asked her to solve a problem for them. There are multiple cities in\r\nthe country and each city owns exactly one panel-block. There are also\r\nunidirectional roads between some pairs of cities (note that circular\r\nself-roads and multi-roads with several traffic lines are allowed). A city can\r\nsell its panel-block to any city, to which they could transport the panel\r\nblock, and from which they can bring back their reward for it (i.e. there must\r\nbe a path from actual city to destination city and back). As long a city hasKpanel-blocks, it builds a prefab of heightKwhich looks exactly\r\nsame as each other prefab of heightK.The construction company notes all the heights down and puts them in an array. They are wondering how many distinct arrays are possible by moving the panel blocks between cities. However there is a catch. Consider a set of cities in which each city is reachable by every other city. Since we can easily shuffle the panel blocks between such a set of cities, we can create new permutations with the same set of heights. The construction company will NOT count any such cases. Hence they will only consider the distinct set of heights for such a set of cities.You have proved successful in helping Ada with some hard problems, so she has\r\nasked you to help her. Your job is following - count the number of possible\r\nstructures which could arise. Since this number might be pretty big, you have to\r\noutput it modulo109+7.InputThe first line contains two integers1 ≤ N, M ≤ 2*105,\r\nthe number of cities  an the number of unidireectional roads between them.The nextMlines contains two integers0 ≤ a, b < N,\r\nthe road from cityato citybOutputPrint a single line - the number of possible structures modulo1000000007.Example Input7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6Example Output15Example Input 27 7\r\n0 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 0Example Output 215Example Input 36 3\r\n0 1\r\n3 2\r\n4 5Example Output 31Example Input 48 7\r\n0 1\r\n1 0\r\n2 3\r\n3 2\r\n4 5\r\n5 6\r\n6 4Example Output 412",
  "sample_input": "7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6",
  "sample_output": "15",
  "link": "https://www.spoj.com/problems/ADAPANEL",
  "scraped_at": "2025-08-17 00:34:09",
  "test_cases": [
    {
      "input": "7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6",
      "expected_output": "15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1\n7 2\n8 6\n5 3\n10 3\n8 8\n8 6\n7 8\n5 5\n6 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n9 8\n2 2\n8 3\n5 9\n6 5\n4 5\n6 10\n5 8\n10 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 10\n7 6\n10 5\n1 2\n9 8\n3 1\n2 8\n7 10\n9 4\n4 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "86 71\n23 95\n45 36\n96 26\n60 28\n39 19\n9 73\n7 22\n24 99\n20 89",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "7 60\n10 59\n51 97\n49 41\n74 49\n32 34\n78 16\n44 68\n30 4\n63 15",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "97 79\n15 16\n67 100\n71 31\n12 100\n71 25\n39 54\n87 24\n8 21\n98 98",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 46\n60 26\n52 56\n100 28\n42 4\n32 39\n93 42\n71 87\n15 100\n23 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "85 7\n46 8\n46 72\n39 50\n35 70\n98 69\n24 62\n65 24\n3 76\n63 31",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "83 477\n231 137\n271 336\n113 355\n387 384\n264 82\n485 338\n64 381\n373 115\n354 71",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "62 111\n152 334\n122 94\n70 58\n248 326\n144 279\n467 183\n309 322\n341 327\n300 199",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "307 52\n436 265\n173 342\n381 483\n299 245\n81 442\n63 67\n265 56\n289 380\n188 140",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "430 134\n470 172\n401 294\n164 300\n110 156\n434 446\n191 267\n181 324\n101 94\n406 246",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "320 81\n425 219\n185 406\n78 404\n464 220\n270 271\n246 374\n94 466\n199 336\n404 344",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "289 370\n482 54\n252 286\n395 312\n228 62\n408 484\n339 53\n499 235\n344 493\n394 100",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "365 436\n490 175\n100 52\n77 52\n191 122\n58 362\n457 440\n119 55\n478 493\n210 79",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000\n999 999\n999 999\n2 1000\n999 2\n1000 1\n999 2\n999 999\n2 1000\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1\n2 1\n999 999\n999 1\n1000 1\n2 1000\n1000 1\n1 1000\n999 2\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}