{
  "problem_code": "problems",
  "title": "Bucket Selection",
  "tags": [],
  "text": "After a long period working in his magical garden, Bratan Mahammad could grow flowers ofNdistinct kinds there. Since Tukezban's (Mahammad's love) birthday is coming, as a perfect gift, Mahammad wants to give her K bunches of flowers. Interestingly, each flower has a beautifulness xiand the number of flowers of every kind isM. When preparing flower buckets, he has to be very careful: every bucket must consist ofNflowers and surely, all flowers have to be distinct kind in each bucket. The overall beauty value ofKbuckets depends on the absolute difference between the beautifulness of the most beautiful flower of K buckets (max(xi)) and the least beautiful one (min(xi)). Help Mahammad minimize this difference.InputThe first line of the input contains 3 positive integers,N,MandK, denoting the number of flower types, the number of flowers in each type, and the number of buckets needed, respectively. Then, the following N lines have 4 integers each,xi,1,ai,bi,ci.Herexi,1indicates the beautifulness of the first flower in i-th type. And for remaining M - 1 flowers, beautifulness value is calculated asxi, j= (ai* xi, j-1+ bi) % ci.You can safely assume thatN, M, K ≤ 2500andK≤ M.All numbers in input section fit 32-bit signed non-negative integers.OutputPrint theminimum possible difference in K-buckets.ExampleInput:2 3 2\r\n2 2 3 9\r\n2 1 2 10Output:4Note:The generated beauty values will be:For i = 1: (2, 7, 8)For i = 2: (2, 4, 6)One optimal way is to choose buckets as (7, 4) and (8, 6) together, so the difference is |8 - 4| = 4By the way, we should not choose (2, 4) and (7, 2), since |7 - 2| = 5, which is greater than 4.",
  "sample_input": "Input:2 3 2\r\n2 2 3 9\r\n2 1 2 10Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SELECTION",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "2 3 2\r\n2 2 3 9\r\n2 1 2 10",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7 4\n5 1 4 2\n4 5 7 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 3\n9 5 1 6\n3 9 5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 2 8\n5 3 5 2\n7 6 9 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "45 27 84\n28 77 89 8\n53 97 98 81",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 22 15\n30 53 50 51\n25 10 93 3",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "74 48 74\n27 50 77 60\n57 95 46 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 66 65\n18 31 33 21\n93 100 15 23",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 83 31\n63 52 80 39\n86 8 66 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "334 486 277\n299 266 450 308\n409 351 223 331",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "310 54 260\n247 275 448 188\n356 93 95 438",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "348 300 259\n294 428 423 109\n385 475 66 485",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "310 445 484\n291 347 68 144\n125 52 338 61",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "227 487 481\n104 92 117 402\n470 193 410 464",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "162 152 139\n209 221 478 62\n316 287 92 88",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "203 492 158\n449 250 310 184\n276 64 488 196",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 2\n1 1000 1000 999\n1000 2 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 1\n999 2 1000 1000\n2 1000 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}