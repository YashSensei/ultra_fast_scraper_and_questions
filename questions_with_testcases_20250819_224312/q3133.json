{
  "problem_code": "problems",
  "title": "To and Fro",
  "tags": [],
  "text": "Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of\r\ncolumns and write the message (letters only) down the columns, padding with extra random letters so\r\nas to make a rectangular array of letters. For example, if the message is “There’s no place like home on\r\na snowy night” and there are five columns, Mo would write downt o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w xNote that Mo includes only letters and writes them all in lower case. In this example, Mo used the\r\ncharacter ‘x’ to pad the message out to make a rectangle, although he could have used any letter.\r\nMo then sends the message to Larry by writing the letters in each row, alternating left-to-right and\r\nright-to-left. So, the above would be encrypted astoioynnkpheleaigshareconhtomesnlewxYour job is to recover for Larry the original message (along with any extra padding letters) from the\r\nencrypted one.InputThere will be multiple input sets. Input for each set will consist of two lines. The first line will contain\r\nan integer in the range 2...20 indicating the number of columns used. The next line is a string of up\r\nto 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of\r\ninput.OutputEach input set should generate one line of output, giving the original plaintext message, with no spaces.ExampleInput:5\r\ntoioynnkpheleaigshareconhtomesnlewx\r\n3\r\nttyohhieneesiaabss\r\n0Output:theresnoplacelikehomeonasnowynightx\r\nthisistheeasyoneab",
  "sample_input": "t o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w x",
  "sample_output": "toioynnkpheleaigshareconhtomesnlewx",
  "link": "https://www.spoj.com/problems/TOANDFRO",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "t o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w x",
      "expected_output": "toioynnkpheleaigshareconhtomesnlewx",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "osqoi i zneub upgr td\ndxffq zxjlw kuuy wnupw zs\nkuikc zckzl zto oixoh c\ns tiyd j uz w\njcjn paovt chbe x zc\npwdoh dzs kszbd bxcy rmmq\nxjhzj wsdy ave r mm",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "of az hgmv jv fs\nkwul gws zm vmu hs\nqg bztc i ydzo fm\nsit qjz nwgg yquz qrc\naj wbbt qenpq gsxic jt\ns piaky eti ammu jvf\nlih r t vahb x",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "zwu zlq fx uex tozh\nn arw tjed ci paigy\nb icpsn rggcx akan krf\nyeel j xijhp zzo scjx\nurjcc xdwpk g fhk asf\ngcr g vxoyj ajcud n\nejuf lds jvzp uxjq qdtwp",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "d vvpc mndvh jzecx kzfb\nsb aa ko wngfa ngth\ngy kjfnt jp jywj bz\nuor vzu pwa yhky c\njla vddv shy ebp w\nys jnfui rfh jyt vuxt\nth zgdcg ghh fut tsh",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "wv fwow goltv kp cfqcs\npec qtwb qla f xkhwc\nz qxngm idtcx zeac i\ndo x qcyo hegpu rww\nju aaxz i ob ap\ncyww th nwk ltz uva\ngvak zsbrj reto m jyilm",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ihcar pgidf gjet xgtyu juf\nlmm hhl onq yq jfnyg\ntgoqh gngc earqv wwbda sp\na ou wfjpo d narg\nadtd vcjf c i qe\ni j a uh pefw\ngyfva dank llgoz m aors",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "pght ct ke svta jhj\nc qb et dlpmv isl\nujo ny d ymvm llvma\nxyymt pji u vvi iaez\ncm utned dko fvzdx gxoj\nrg hir zpdad ng kot\nwhqoc oyz brmg ukath qwuih",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "sebvm hf rw xgpjw ianke\nk ftx leta brk bikgw\njnvbx lh jump jhr vzqd\nw jw g sevu c\nencgs go qno hwsvu untyv\nnyre hq flz ngs gjp\nwqvxz tq ob wpxt vy",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "am upfnk t s g\nz vwne qtnlu o yu\nsw ok lg mozxq akwpj\nnogp o qnosq yopj zgdl\nwx jcleu hba f xz\nkwzez arzls g bc vh\ne f meyoh gs ict",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "dzqp q hxs fthq b\nuf shu bfxt hyeh qfbf\nrmiys bynfm yycd vsha hp\napwvk fw tol uxdw zreae\nrg rw xco lhtd env\nzl reh x cfd sec\ng wbb i n mckd",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "f ggnth vkx rn yqb\ni dhxmq yef sr s\nnjd iaovt x sqynt xy\nncnn tgj g lu lupb\nxt jugg ylav i r\nu wfxzm atk gbjl mmm\ns rpueu iwk woyf zfj",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "z jfka s rbp rq\ne zj dok w xwqq\nn fdxh cah d c\neltd lzzq avx idyam yeefr\no zpr kkal xrdp ej\nntdru r ppk v pu\nz rmapn otnhg myu kotdm",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "tr f dysgt tfeg mrin\njqhx nu b gj l\nzp rk camk bbg ssmtc\nxxzik d qz pa oyep\nzwm i gbiwp pw tlb\nsd kkn vk fs rny\nuj qts stxv thdh bmj",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "ybk kc ab lme xmnlw\nkinqe mgvoa ekv vwrzh ek\nj qaw r mywu njufq\nro jaq dvsj ayg wnbmp\nlkbo wmetw ly av vpymj\nxnqin saz sf gj vtya\npilye ehnmk sdlte kwowg ucqa",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "cksgd hdlta vcxc l m\njucc drzh dqbj e glhml\ns wsan y qw mi\nd g qb drvm bhjo\ngdn b ycdu jvtx s\ngqic r uscr l xzypt\nutn a rxleh b lz",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "ex a le gaq yee\najnve eqk d z xeu\nopxix ilmd l vh oo\ns hadqd lfmid zgwq lb\notvqj iq bk g hx\ncpwu lrtj mgd fwzd qw\nbja ajrs tf dke sycy",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "ojh shp albgo dm klh\ns sfstn nw jvxir akm\nesks zrehc nhjg ipml ekdzb\nxbvsf xjka elrzk czgp nq\ndlchj lh z qkg bnztr\nbz md nt kmxu rbwj\ng d i eakjx gb",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "crp lnk cy jlxzu ypa\nj bxwfi orb vfju ybm\nehmpp syo n vh rqv\nehh ib vao zttis fuo\nxz fn wk jxgez judf\nsgzhb wgx kwbr xdm jfzy\nsshr yqvv n j i",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "jv xblyp pkpqp mkpme nzdhw\natsru dv exynj lvjj voiy\nxik isqz stozd pxd hk\nxfjee hv zjh jqfow hxae\nlejvb od r igk y\npoaw bmvgn av hx pypu\nb o nzehw gniey zrron",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}