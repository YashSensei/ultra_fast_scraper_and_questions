{
  "problem_code": "problems",
  "title": "Vonny and her dominos",
  "tags": [],
  "text": "Vonny loves playing with dominos. And so she owns a standard set of dominos. A standard set of dominos consists of 28 pieces called bones, tiles or stones. Each bone is a rectangular tile with a line dividing its face into two square ends. Each square is labeled with a number between 0 and 6. The 28 stones are labeled (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 1), (1, 2) ... (5, 5), (5, 6), (6, 6). Tommy - the brother of Vonny - build a box for Vonny's dominos. This box is sized 7 Ã— 8 squares. Every square is labeled with a number between 0 and 6. You can see a example box here.0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3Now Vonny wants to arrange her 28 stones in such way that her stones cover all squares of the box. A stone can only be placed on two adjacent squares if the numbers of the squares and of the domino stone are equal. Tommy asks Vonny in how many different ways she can arrange the dominos. Tommy assumes that Vonny need a lot of time to answer the question. And so he can take some of Vonny's candies while  she solves the task.  But Vonny is a smart and clever girl. She asks you to solve the task and keeps an eye on her candies.InputThe first line of the input contains the number of testcases. Each case consists of 56 numbers (7 rows and 8 cols) between 0 and 6 which represents Tommy's box.OutputFor each testcase output a single line with the number which answers Tommy's question.ExampleInput:2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3Output:18\r\n1",
  "sample_input": "0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3",
  "sample_output": "Input:2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3Output:18\r\n1",
  "link": "https://www.spoj.com/problems/VONNY",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3",
      "expected_output": "18\r\n1",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "1 8 8 2 1 2 4 7\n10 6 5 7 2 6 4 9\n2 3 10 6 8 8 10 9\n2 4 5 1 9 2 1 1\n7 7 7 5 10 7 5 8\n1 6 2 8 8 2 4 7\n10 1 1 6 3 10 1 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2 5 6 6 6 8 2\n8 10 9 5 3 7 1 10\n7 6 8 3 10 3 1 7\n10 6 9 7 6 3 4 1\n7 5 7 5 9 9 10 6\n4 8 9 3 9 7 10 8\n4 6 4 4 8 3 8 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 5 5 10 8 10 10 2\n7 1 5 10 7 10 7 4\n8 6 3 5 6 6 10 1\n3 5 2 6 8 9 10 8\n7 8 6 6 9 6 2 7\n2 3 3 7 7 2 8 7\n8 8 3 4 1 1 9 2",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "19 24 97 33 24 80 94 25\n85 13 56 14 58 77 36 52\n90 98 58 17 92 63 32 23\n38 17 100 18 49 84 43 100\n28 90 86 30 85 6 15 97\n29 34 26 43 38 78 92 90\n62 4 44 16 73 44 59 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "90 36 81 7 79 60 51 45\n85 3 59 54 34 62 36 24\n94 18 43 47 96 19 84 94\n1 18 19 28 48 56 19 54\n41 2 42 53 53 57 21 36\n77 1 52 5 76 81 91 66\n10 97 79 58 9 31 89 65",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 90 8 62 59 10 34 47\n21 36 62 34 4 90 60 21\n31 22 83 93 8 46 10 8\n50 74 26 61 55 64 6 88\n93 39 63 6 54 47 27 28\n30 50 16 100 94 2 82 58\n95 18 99 13 76 92 42 29",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 9 73 46 43 77 8 12\n91 27 73 12 48 27 68 52\n92 3 22 8 76 88 53 11\n82 64 53 58 27 64 14 73\n93 29 99 73 92 78 52 99\n39 36 66 25 99 76 31 91\n63 25 87 24 2 32 37 46",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "44 15 89 96 47 19 15 20\n74 71 22 72 97 60 16 70\n91 56 11 33 36 56 84 92\n11 33 18 92 56 100 1 97\n40 76 88 83 75 63 64 95\n82 17 53 80 29 25 58 99\n54 73 98 6 17 27 64 38",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "294 395 374 223 78 439 244 206\n494 485 270 249 70 453 447 296\n275 348 54 486 218 303 90 423\n104 205 305 380 469 420 472 274\n172 399 69 400 50 443 322 471\n115 455 262 88 351 117 448 415\n234 362 330 166 285 53 359 434",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "319 496 131 244 133 383 89 151\n411 142 58 494 322 213 376 321\n354 378 338 325 428 320 60 302\n113 156 304 436 274 468 224 456\n305 427 177 63 141 199 190 156\n438 407 75 132 85 63 445 375\n347 431 87 224 254 215 440 112",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "376 75 387 67 393 177 133 443\n369 387 408 335 449 161 317 490\n485 462 195 137 191 154 411 97\n401 101 361 64 200 277 162 301\n305 282 461 211 371 341 215 117\n315 482 212 221 443 270 431 258\n207 311 363 114 342 467 481 90",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "366 167 224 133 450 367 153 447\n471 363 112 230 419 182 128 198\n356 181 401 92 428 248 233 344\n286 288 176 395 255 340 187 341\n484 288 101 495 251 473 115 423\n76 239 209 188 356 397 371 250\n288 387 416 355 263 489 257 186",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "426 422 275 114 267 115 380 264\n326 138 313 121 64 118 452 383\n185 447 349 199 448 287 270 335\n73 386 222 65 102 386 377 364\n64 83 51 142 371 301 467 270\n168 50 196 82 235 234 408 149\n437 411 392 58 224 348 322 352",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "75 371 357 71 77 351 329 95\n284 237 252 426 203 279 88 329\n424 62 208 166 490 94 246 430\n142 403 438 135 238 374 490 495\n204 440 265 286 468 372 445 139\n277 292 162 439 157 149 381 129\n416 250 485 81 461 329 55 191",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "432 432 149 197 161 351 397 232\n251 64 481 431 147 449 200 321\n493 201 271 445 430 140 325 406\n229 346 230 62 175 488 214 495\n78 159 183 256 249 203 70 112\n177 184 394 94 379 407 499 127\n367 189 398 83 244 246 151 230",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 999 1 999 1000 999\n2 1 1000 999 1000 2 999 2\n2 1 1000 2 1000 1 1 1000\n1000 999 999 1000 1 2 1000 1000\n2 999 1000 999 1 1 999 2\n2 2 1000 1 2 1 1000 2\n2 1 2 1 2 2 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}