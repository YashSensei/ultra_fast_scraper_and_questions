{
  "problem_code": "problems",
  "title": "RK Sorting",
  "tags": [],
  "text": "RKis a great code breaker. He knows any cipher in the world can be broken by frequency analysis. He intercepted an enemy message. The message consists ofNnumbers, smaller than or equal toC. RK believes frequency analysis consists of sorting this sequence so that more frequent numbers appear before less frequent ones.Formally, the sequence must be sorted so that given any two numbers X and Y, X appears before Y if the number of times X appears in the original sequence is larger than the number of time Y does. If the number of appearances is equal, the number whose value appears sooner in the input should appear sooner in the sorted sequence.Help RK by creating a \"frequency sorter\".InputFirst line of input contains two  integers, N (1 ≤ N ≤ 1000), length of message, and C (1 ≤ C ≤ 109), the number from task description. Next line contains N integers smaller than or equal to C, message  itself.OutputFirst and only line of output should contain N numbers, the sorted sequence.SampleInput9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
  "sample_input": "Input9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2",
  "sample_output": "Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
  "link": "https://www.spoj.com/problems/RKS",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "Input9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2",
      "expected_output": "Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6\nlpb 10\n6 3 10 8 9 3 2 8 3 1 7 8 8 3 2 10 4 7\n10 5 4 7 9 3 1 1 kn 4 3 8 2 5 10 8 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 6\noyxznn 1\n3 5 10 6 8 2 10 8 7 9 7 1 10 9 1 9 10 6\n5 10 1 10 4 1 6 5 vhtpxcqr 4 4 6 4 4 7 9 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 2\njia 6\n1 9 7 8 5 5 6 5 4 9 1 3 1 5 5 10 1 5\n10 8 1 8 2 5 7 2 njrmuo 9 8 10 1 3 6 8 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 50\nkmgzi 58\n52 47 99 9 99 64 37 79 24 68 12 99 52 2 34 85 5 85\n49 53 14 76 87 40 63 55 nwky 53 21 63 34 68 81 35 52",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "81 53\nv 59\n77 73 67 43 84 64 12 23 40 38 51 30 99 21 90 69 11 99\n32 56 55 92 96 66 59 76 ltl 43 78 73 91 56 68 26 71",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 44\nutiai 67\n32 29 21 39 20 28 35 94 7 58 17 42 32 46 87 78 20 12\n70 18 6 85 45 30 23 20 tp 4 86 33 20 1 95 48 34",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "98 43\ndqv 17\n52 87 67 99 60 78 54 48 48 40 81 65 3 14 8 24 76 54\n51 2 23 54 24 43 89 27 oqpv 4 75 66 15 53 57 92 14",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "75 84\njabhb 2\n48 95 27 56 86 4 91 65 5 10 94 64 19 79 61 4 80 45\n85 40 7 93 76 78 61 54 ae 73 6 97 78 23 4 68 86",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "178 225\nvse 378\n334 140 106 421 388 125 155 431 285 326 475 273 314 93 73 376 134 445\n65 349 111 186 130 429 488 496 bahcny 271 334 434 379 409 265 461 312",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "164 82\ng 273\n180 65 361 375 240 164 114 425 51 262 278 308 165 475 349 149 170 215\n186 169 127 456 121 386 171 102 acwpevg 203 294 211 358 182 258 442 63",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "322 190\nisma 285\n287 455 304 307 104 500 247 146 84 125 85 162 289 242 173 347 196 410\n335 392 350 131 195 474 198 465 yllvl 423 210 273 346 302 243 119 306",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "418 411\ne 215\n251 362 466 369 162 80 299 348 125 451 407 107 166 404 452 409 76 133\n240 346 403 472 288 455 326 105 ytabqleg 369 356 260 330 399 450 353 410",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "314 198\nynu 374\n227 290 421 225 53 350 190 341 64 69 351 369 252 161 212 467 136 376\n368 444 439 129 336 145 55 303 igbokeg 61 358 245 483 336 374 250 477",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "341 91\nzrjdx 331\n339 344 152 462 77 62 144 500 52 207 120 454 432 489 182 382 113 454\n494 252 373 99 439 381 200 488 tp 222 183 257 315 272 339 151 475",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "342 298\ncnd 92\n293 480 356 367 152 459 340 185 306 368 379 129 500 138 266 500 237 457\n381 320 322 290 248 363 286 374 rayy 155 381 255 259 206 307 311 368",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\ns 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 tatns 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\ng 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 eg 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\nqdu 1\n1 2 1000 999 2 999 2 1 1 1000 999 2 1 999 1 2 1000 2\n999 999 1000 1000 2 2 999 1 lu 2 1 1000 2 1 2 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\nmezqw 999\n2 1000 999 2 999 1 1000 1 2 999 1000 1000 2 1000 1000 1000 1 2\n1 1000 1000 1000 1000 999 2 2 ubsmspn 1 1 1000 1 2 999 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}