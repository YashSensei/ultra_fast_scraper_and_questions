{
  "problem_code": "problems",
  "title": "Garden",
  "tags": [],
  "text": "Vasya has a very beautiful country garden, which is a rectangular field n × m in size, divided into n · m square cells. One day, Vasya remembered that he needed to pave pathd between k cells with important buildings - for that he can fill some of the cells in his garden with concrete.For each cell of the garden, the number aijis known, which means the number of flowers growing in the cell with coordinates (i, j). When pouring concrete all the flowers that grow in the cell die.Vasya wants to fill some cells with concrete so that the conditions:all k important cells must be filled with concrete.from each important cell to any other important cell, there was a path through the cells filled with concrete, provided that cells with a common side are considered neighboring.the total number of dead plants should be minimal.Since Vasya has a rather large garden, he asks you to help him.InputThe first line of the input contains three integers n, m and k (1 ≤ n, m ≤ 100, n·m ≤ 200, 1 ≤ k ≤ min(n·m, 7) — the size of the garden and the number of important cells. The following n lines with m numbers each contain numbers aij(1 ≤ aij≤ 1000) — the number of flowers in the cells. Next k lines contain the coordinates of important cells in the format \"x y\" (without quotes) (1 ≤ x ≤ n, 1 ≤ y ≤ m). Numbers on the same line are separated by spaces. It is guaranteed that all k important cells have different coordinates.OutputIn the first line print a single integer — the minimum number of plants killed during the construction. Then output n lines of m characters each — the plan of the garden, where the character \"X\" (capital Latin letter X) denotes a cell filled with concrete, and the character \".\" (dot) - not filled. If there are several solutions, print anySampleInput3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XXInput4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
  "sample_input": "Input3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XX",
  "sample_output": "Input4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
  "link": "https://www.spoj.com/problems/NPOWM",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "Input3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XX",
      "expected_output": "Input4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 7 5\nf 7 5\n4 1 3\n5 4 9\n7 4 10\n6 6\n8 2 1\n1 zcx\nbfgybh\noukq\njku",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 4 9\nd 4 3\n5 5 4\n3 7 9\n9 9 6\n1 8\n7 10 8\n7 zhayminj\nmywa\nb\nakti",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 10\nuiymf 2 5\n4 7 10\n10 8 10\n1 7 1\n5 6\n4 7 7\n3 m\nv\nvezdz\nl",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "41 61 65\nl 2 87\n33 38 77\n10 31 60\n81 29 2\n72 47\n28 96 8\n75 gm\njcqkd\ngzcmyb\nt",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "16 97 20\nyf 7 55\n11 34 95\n48 51 24\n7 36 22\n17 23\n85 30 91\n31 eohyu\ncpvzro\nvvwfuh\nalw",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 24 55\nlopr 17 70\n29 99 46\n21 8 100\n89 90 37\n86 69\n34 5 73\n55 jhnar\nrlzu\nzqyirf\ngwmnqc",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "76 80 71\nmb 75 61\n47 95 21\n20 20 6\n74 96 73\n67 41\n36 72 1\n88 weqfdpv\nwxc\nzodyfg\njfyvy",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 78 91\nxfata 63 49\n25 94 70\n94 90 13\n83 12 7\n54 46\n70 1 88\n24 mg\nbni\nwbf\nho",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "152 199 475\nb 326 251\n127 254 324\n289 280 209\n192 61 79\n336 72\n255 249 434\n320 ry\nxnaxpd\nzbku\no",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "102 390 205\nyeq 309 212\n462 194 387\n55 273 126\n126 381 356\n56 335\n57 297 133\n106 hit\njphwu\nxelmow\nkxjwu",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "299 96 375\ncipkhb 489 338\n484 230 384\n500 126 475\n98 364 361\n167 58\n385 82 167\n205 z\np\nqqk\nhmjs",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "341 157 320\nnqm 76 272\n463 269 194\n131 229 273\n88 296 445\n486 165\n180 245 416\n377 ko\nfxnu\njatwsn\nvppdfz",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "313 477 255\ngrccu 485 202\n436 205 234\n449 409 265\n403 217 420\n184 105\n271 50 288\n394 frqwerk\nwduur\nfru\nf",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "379 179 459\ngpl 404 209\n80 129 446\n350 389 66\n224 193 65\n302 355\n187 231 264\n173 jsdrsvz\nttpxp\nnyo\nzu",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "494 429 134\nhq 358 366\n309 237 404\n177 438 457\n209 314 418\n206 239\n213 229 401\n307 fr\nqswjqe\nmf\nvlnngn",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nipk 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 bgrshu\nxtjuu\ndb\npumbx",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nbk 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 iata\nnvved\nkwqsq\npwiatp",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 999\nhviyxz 1 2\n2 2 999\n2 1 2\n999 2 1\n999 1\n1000 999 2\n999 rkluddj\nr\npjkowg\nhs",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 2\neerjm 999 1\n1 2 1000\n1 999 1000\n1 1000 2\n999 2\n1000 999 2\n2 ed\nnmmvnm\nhkm\nb",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}