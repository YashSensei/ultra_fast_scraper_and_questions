{
  "problem_code": "problems",
  "title": "Meteors",
  "tags": [],
  "text": "Byteotian Interstellar Union (BIU) has recently discovered a new planet in a nearby galaxy. The planet is unsuitable for colonisation due to strange meteor showers, which on the other hand make it an exceptionally interesting object of study.The member states of BIU have already placed space stations close to the planet's orbit. The stations' goal is to take samples of the rocks flying by. The BIU Commission has partitioned the orbit into $m$ sectors, numbered from $1$ to $m$, where the sectors $1$ and $m$ are adjacent. In each sector there is a single space station, belonging to one of the $n$ member states.Each state has declared a number of meteor samples it intends to gather before the mission ends. Your task is to determine, for each state, when it can stop taking samples, based on the meteor shower predictions for the years to come.InputThe first line of the standard input gives two integers, $n$ and $m$ ($1 \\le n,m \\le 300\\,000$), separated by a single space, that denote, respectively, the number of BIU member states and the number of sectors the orbit has been partitioned into.In the second line there are $m$ integers $o_i$ ($1 \\le o_i \\le n$), separated by single spaces, that denote the states owning stations in successive sectors.In the third line there are $n$ integers $p_i$ ($1 \\le p_i \\le 10^9$), separated by single spaces, that denote the numbers of meteor samples that the successive states intend to gather.In the fourth line there is a single integer $k$ ($1 \\le k \\le 300\\,000$) that denotes the number of meteor showers predictions. The following $k$ lines specify the (predicted) meteor showers chronologically. The $i$-th of these lines holds three integers $l_i, r_i, a_i$ (separated by single spaces), which denote that a meteor shower is expected in sectors $l_i,l_{i+1},\\ldots,r_i$  (if $l_i \\le r_i$) or sectors $l_i,l_{i+1},\\ldots,m,1,\\ldots,r_i$ (if $l_i > r_i$), which should provide each station in those sectors with $a_i$ meteor samples ($1 \\le a_i \\le 10^9$).OutputYour program should print $n$ lines on the standard output. The $i$-th of them should contain a single integer $w_i$, denoting the number of shower after which the stations belonging to the $i$-th state are expected to gather at least $p_i$ samples, or the word  NIE (Polish forno) if that state is not expected to gather enough samples in the foreseeable future.ExampleFor the input data:3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2the correct result is:3\r\nNIE\r\n1",
  "sample_input": "3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2",
  "sample_output": "3\r\nNIE\r\n1",
  "link": "https://www.spoj.com/problems/METEORS",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2",
      "expected_output": "3\r\nNIE\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10\n9 6 4 2 3\n4 7 3\n6\n10 6 9\n8 1 8\n9 10 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3\n8 8 4 9 4\n2 6 6\n7\n1 3 2\n10 1 3\n3 3 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5\n10 5 1 7 5\n9 9 4\n1\n6 5 7\n4 3 9\n9 10 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "80 58\n45 73 62 41 64\n94 20 33\n25\n37 32 75\n43 42 31\n90 16 91",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "82 73\n43 9 56 39 32\n1 97 45\n91\n71 10 90\n62 77 100\n28 9 54",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 25\n57 48 78 89 53\n39 33 20\n30\n61 25 23\n86 77 8\n40 51 64",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 46\n3 82 2 64 74\n98 32 46\n97\n84 77 53\n15 71 70\n72 71 66",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "77 56\n22 63 28 99 77\n47 56 40\n51\n98 47 1\n88 15 23\n61 54 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "255 226\n193 406 297 469 70\n126 171 279\n70\n339 163 289\n98 149 105\n201 438 302",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "389 466\n285 156 103 376 393\n465 356 80\n327\n401 134 273\n305 494 429\n259 351 123",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "406 492\n133 217 372 263 107\n488 51 309\n184\n57 401 95\n54 51 324\n62 177 429",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "487 128\n386 278 288 455 395\n483 220 197\n224\n182 263 312\n315 63 139\n78 57 309",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "165 92\n156 208 147 193 471\n423 355 107\n339\n219 404 382\n348 183 479\n395 301 188",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "322 359\n413 252 74 196 495\n342 452 293\n399\n431 452 412\n422 443 146\n280 331 273",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "485 218\n343 239 400 377 130\n394 187 93\n403\n271 362 175\n441 229 428\n258 173 474",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n2 1 1 2 999\n1000 1000 1000\n999\n999 999 1\n1 1000 1000\n999 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n999 1 999 999 1\n1 2 999\n999\n1000 1 1000\n1000 1 2\n2 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}