{
  "problem_code": "problems",
  "title": "Sum of Vectors",
  "tags": [],
  "text": "EnglishVietnameseWe can represent a 2D vector as a pair (X, Y). The sum of two or more vectors is a vector whose coordinates are the sums of the corresponding coordinates of all the vectors in the sum. e.g. (1, 2) + (3, 4) + (5, 6) = (1 + 3 + 5, 2 + 4 + 6) = (9, 12) Weight of a vector (x, y) is defined as x * x + y * y. You are given N vectors on a plain.Your task is to write a program that will determine a subset of those vectors so the weight of the sum of all vectors in that subset is maximal.Note: Use 64-bit integers (int64 in pascal or long long in c)InputIn the first line of the input file is an integer N, 1 ≤ N ≤ 30,000, the number of vectors.The following N lines contain descriptions for each of the vectors. A description is made of two integers X and Y, separated by a single blank, -30,000 ≤ X, Y ≤ 30,000.None of the given vectors will be (0, 0)OutputIn the first and only line of the output file you have to write the weight of the maximum sum.ExampleInput:5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4Output:202Input:4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4Output:64Input:9\r\n0 1\r\n6 8\r\n0 -1\r\n0 6\r\n-1 1\r\n-1 2\r\n5 -4\r\n1 0\r\n6 -5Output:360",
  "sample_input": "Input:5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4Output:202",
  "sample_output": "Input:4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4Output:64",
  "link": "https://www.spoj.com/problems/MVECTOR",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4",
      "expected_output": "202",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4",
      "expected_output": "64",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2\n8\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n6\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n4\n8",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "13\n46690512\n24746111\n22772516\n11527407\n49641325\n99890911\n3845858\n53698682\n42525276\n36857191\n13582370\n24805357\n43012",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n88623683\n33318070\n79875959\n99446782\n93737404\n66673010\n70498388\n85503211\n39636637\n10922259\n78960486\n55128834",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n97807038\n63422349\n5259322\n78235191\n21355366\n27820443\n55043856\n27567564\n22809283\n91858003\n51747069\n16926041\n33538217\n66624060\n97797924\n38260299\n71748547\n54182090\n82199737",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n66513194\n59545779\n60925754\n57117831\n42225449\n81732769\n91472512\n78011328\n73583631\n63193164\n49791781\n64092579\n17934074\n77835670\n1611743",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n25831297\n66259182\n47928055\n14809281\n68256907\n88091820\n8154878\n24398838\n73519528\n1097009\n54923956\n95786373\n44295642\n69692788\n34436055",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "24\n36369\n20644\n16920\n34252\n61570\n707\n12202\n1743\n50064\n54911\n83326\n74879\n51529\n83997\n35821\n79096\n52683\n97613\n72456\n40684\n79148\n24752\n58312\n81705",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n50939\n48270\n9643\n94808\n20207\n33925\n92645\n96640\n38168\n52686\n90783\n62451\n32997\n83913\n44861\n66658\n93512\n19976\n11697\n55080\n6255\n64309\n99660\n29270\n43511\n70857",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n50706\n7415\n50691\n17426\n75842\n65746\n68723\n87882\n18688\n16597\n5140\n55916\n94657\n33160\n42904\n24542\n78915\n71417\n81760\n55656\n21454\n92502\n36906\n48039\n27727\n96258\n82961\n73714\n60325",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n73883\n38268\n32897\n31760\n29534\n34764\n54430\n87746\n14879\n15084\n12332\n82208\n99149\n88683\n34467\n79560\n61668\n49931\n2276\n50092\n12896\n73981",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n56088\n19211\n86211\n29996\n70183\n97053\n95807\n56747\n55930\n86122\n68040\n90294\n28325\n22000\n77952\n97347\n75845\n63660\n69297\n63267",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n26497\n865\n65484\n83730\n5323\n44431\n6065\n58388\n59215\n4906\n57217\n99603\n75726\n4708\n59406\n29255\n97377\n66642\n74752\n86845\n7025\n68521\n29275\n56311\n74455\n85053\n7365",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n67248\n17848\n58752\n19255\n91923\n32162\n86510\n42911\n34074\n47683\n88784\n96042\n53691\n80233\n40189\n92838\n35968\n6386\n75539\n46627\n92020\n59473\n85284",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n55336234\n526842\n46787770\n27803407\n2010882\n79406796\n57757154\n67887081\n26758204\n5492790\n11752127\n17233440\n25347988\n96136271\n75095405\n31129405\n46258060\n4073107\n28481785\n18347470\n46481163\n33643565\n11530857\n90649992\n32401281\n26862861\n82055844\n62850279\n1030733\n98864681",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n21164250\n79076589\n31821978\n36463658\n14638086\n89956038\n36820956\n86833723\n6465271\n91278649\n16421028\n54917390\n61762135\n87270002\n95443522\n35701837\n20254042\n89079849\n75935350\n59570432\n48388179\n57639173\n29228094\n13414351\n46935285\n38358081\n28963120\n22788516\n81884454\n85260617",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "2\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}