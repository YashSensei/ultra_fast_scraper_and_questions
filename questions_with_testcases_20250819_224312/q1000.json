{
  "problem_code": "problems",
  "title": "Helping Jar Jar Binks",
  "tags": [],
  "text": "A job has been assigned to Jar Jar Binks, it goes as follows:There are N spaceships parts, each with a weight of Wi kg. Given a weight W, he has to show how many parts can be used in order to make a ship with a weight of exactly W kg. He has to show all possible solutions, of course if possible.Everybody knows Jar Jar Binks particularly because of his clumsiness, so you have to help him. Write a program that solves his problem!InputThere will be several cases, each beginning with two integers N, Q (1 ≤ N ≤ 60, 0 ≤ Q ≤ 10000).Next there will be N positive integers representing the weights of the N spaceship parts (1 ≤ Wi ≤ 1000).Q lines will follow, each one with only one (not necessarily positive) integer W, the total weight of the spaceship.End of input will be denoted with N = 0 and Q = 0. This case should not be processed.OutputPrint a line with K integers per query in ascending order. They must represent the amount of pieces that can be used to make a spaceship with weight W.If there is no way to make a spaceship with weight W, output a line with the string “That's impossible!” (quotes to clarify)ExampleInput:5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0Output:1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!Explanation of the query W = 5A spaceship with weight = 5 kg can be formed with 2, 3 and 4 parts, for example:2 kg + 3 kg = 5 kg3 kg + 1 kg + 1 kg = 5 kg1 kg + 1 kg + 1 kg + 2 kg = 5 kg",
  "sample_input": "Input:5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0Output:1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JARJAR",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0",
      "expected_output": "1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4\n7 5 7 7 10\n9\n2\n1\n5\n10 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2\n10 8 10 8 9\n9\n10\n5\n10\n7 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 5\n7 10 7 9 8\n6\n3\n8\n1\n6 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 23\n48 23 31 23 55\n17\n18\n45\n5\n50 21",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "33 32\n43 32 28 37 7\n1\n13\n53\n30\n45 21",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "20 43\n43 2 12 40 19\n42\n56\n42\n21\n60 52",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "31 39\n16 49 28 27 44\n32\n52\n57\n27\n27 22",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "28 30\n16 4 21 2 35\n59\n60\n49\n11\n9 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 13\n9 8 7 5 29\n4\n8\n15\n25\n27 10",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "11 17\n7 6 22 3 9\n26\n17\n12\n11\n29 22",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "22 4\n6 18 27 30 22\n14\n19\n10\n6\n30 25",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "8 20\n7 5 27 6 29\n26\n19\n7\n5\n24 4",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19 24\n14 3 29 30 14\n24\n6\n13\n13\n20 18",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "17 6\n14 14 26 7 6\n15\n25\n10\n29\n30 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20 9\n7 25 10 9 12\n29\n14\n3\n13\n13 5",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "60 60\n60 60 60 60 60\n60\n60\n60\n60\n60 60",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "60 60\n60 60 60 60 60\n60\n60\n60\n60\n60 60",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n59 2 1 2 1\n1\n59\n59\n60\n59 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "60 2\n2 60 60 60 2\n2\n59\n1\n60\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}