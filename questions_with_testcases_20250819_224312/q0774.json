{
  "problem_code": "problems",
  "title": "Koalas",
  "tags": [],
  "text": "Mabel Eucaliptos ha pasado toda la noche entren\\'andose en el arte de comer hojas de eucalipto. Finalmente est\\'a preparada para enfrentar a su malvada archin\\'emesis, Pac\\'ifica, en un \\'ultimo juego que intentar\\'a decidir de una vez por todas qui\\'en de las dos es la mejor koala.El juego se llevar\\'a a cabo en un bosque constituido por $N$ \\'arboles de eucalipto numerados del $1$ al $N$. Los \\'arboles est\\'an conectados por $N - 1$ cuerdas. Cada cuerda conecta dos \\'arboles diferentes, y permite a las koalas desplazarse de cualquiera de ellos al otro. El bosque de eucaliptos es tal que es posible ir de cualquier \\'arbol a cualquier otro usando sucesivamente estas cuerdas.Los \\'arboles de eucalipto contienen una cantidad no negativa de hojas. Cuando un \\'arbol contiene cero hojas, se dice que est\\'a vac\\'io. Inicialmente ninguno de los $N$ \\'arboles en los que se desarrollar\\'a el juego se encuentra vac\\'io.Antes de empezar el juego, a cada koala se le asigna un \\'arbol diferente. Al principio de la partida cada jugadora sube al \\'arbol que le fue asignado y come todas las hojas que este contiene, dej\\'andolo vac\\'io. A continuaci\\'on, juegan alternadamente, siendo Mabel la encargada de realizar el primer movimiento. En cada turno la jugadora correspondiente se mueve a un \\'arbol no vac\\'io que est\\'e conectado por una cuerda con el \\'arbol en el que se encuentra ella. Seguidamente come todas las hojas que este nuevo \\'arbol contiene, dej\\'andolo vac\\'io. En caso de no poder realizar un movimiento v\\'alido, permanece donde est\\'a y pasa a ser el turno de la otra jugadora. El juego termina cuando ninguna de las dos puede hacer un movimiento v\\'alido.Una vez finalizada la partida, se cuentan las hojas que comi\\'o cada koala, y se calcula la diferencia entre la cantidad que comi\\'o Mabel y la cantidad que comi\\'o Pac\\'ifica. Mabel jugar\\'a tratando de maximizar dicha diferencia, mientras que Pac\\'ifica lo har\\'a intentando minimizarla. Su tarea es determinar cu\\'al ser\\'a el resultado del juego, suponiendo que ambas juegan de manera \\'optima.Mabel Eucalyptus spent last night training in the art of eucalyptus leaf eating. She is finally ready to face her evil arch-nemesis, Peaceful, in a last game which will decide once and for all which of them is the best koala.The game will take place in a forest containingNeucalyptus trees numbered from1toN. The trees are connected byN-1ropes, each of which joins two different trees. These ropes allow koalas to move from one tree to the other, and the eucalyptus forest is such that it is possible to go from a given tree to any other successively using the ropes.The eucalyptus trees contain a non-negative amount of leaves. When a tree contains no leaves, we say it is empty. Initially, none of theNtrees in the forest is empty.Before commencing the game, each koala is assigned a different tree. At the beginning of the game, each player climbs the tree that was assigned to her and eats all the leaves it contains. After that both players take turns, Mabel being in charge of making the first move. In each turn, the corresponding player moves to a non-empty tree connected by a rope to the tree she is currently in. Then, she eats all the leaves this tree contains, thus leaving it empty. If a player can't make a valid move in her turn, she forfeits her turn staying wherever she is, and the other player gets to move again. The game ends when both players cannot make a valid move.Once the game has finished, the number of leaves eaten by each koala is counted, and the difference between the amount eaten by Mabel and the amount eaten by Peaceful is calculated. Mabel will play aiming to maximize this difference, whereas Peaceful will play to minimize it. Your task is to determine what the result of the game will be, assuming that both koalas play optimally.InputThere are multiple test cases in the input file. For each test case, the first line contains three integer numbersN,MyP, representing the number of trees in the forest, the tree where Mabel starts, and the tree where Peaceful starts, respectively (2 ≤ N≤105and1≤M, P≤NwithM ≠ P). The second line containsNinteger numbersC1, C2, ..., CN, representingCithe number of leaves contained in thei-th tree (1≤Ci≤100fori = 1, 2, ..., N). Each of the followingN-1lines contains two integer numbersUandV, representing that there is a rope connecting trees numberUandV(1≤U, V≤NwithU ≠ V).OutputFor each test case, output a single line containing an integer number, representing the difference between the number of leaves eaten by Mabel and the number of leaves eaten by Peaceful if both of them play optimally.ExampleInput:2 1 2\r\n5 3\r\n1 2\r\n6 2 3\r\n1 6 4 3 2 2\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n5 6Output:2\r\n-1",
  "sample_input": "Input:2 1 2\r\n5 3\r\n1 2\r\n6 2 3\r\n1 6 4 3 2 2\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n5 6Output:2\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016K",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "2 1 2\r\n5 3\r\n1 2\r\n6 2 3\r\n1 6 4 3 2 2\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n5 6",
      "expected_output": "2\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1 2\n9 5\n8 1\n8 5 4\n9 8 8 5 7 1\n1 3\n5 5\n6 10\n6 1\n10 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 6\n5 7\n4 10\n4 5 6\n8 2 4 6 2 6\n2 8\n5 4\n10 5\n8 1\n1 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 9\n8 2\n4 1\n8 3 7\n3 10 2 3 3 6\n10 3\n7 10\n6 6\n7 7\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "80 13 53\n42 97\n9 63\n51 26 72\n60 69 98 20 91 8\n97 77\n94 50\n16 56\n16 75\n24 32",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 76 5\n56 84\n16 84\n35 90 22\n33 39 29 78 16 84\n91 87\n82 89\n48 11\n1 28\n33 12",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "75 45 76\n8 43\n21 74\n84 58 43\n50 48 51 62 15 47\n3 93\n62 70\n75 42\n99 84\n90 70",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "75 46 34\n66 34\n52 29\n71 31 39\n23 91 68 62 78 95\n75 69\n69 10\n59 98\n90 20\n14 62",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 20 40\n35 66\n16 46\n85 41 3\n37 74 43 13 73 94\n80 28\n29 67\n79 51\n94 34\n82 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "30 13 26\n13 52\n36 28\n12 45 52\n49 32 30 33 34 18\n24 17\n24 36\n27 10\n14 29\n34 9",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "45 37 16\n20 14\n19 26\n15 34 31\n24 51 6 14 35 28\n21 23\n48 49\n41 7\n17 36\n42 52",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15 35 34\n34 18\n23 49\n45 39 14\n38 14 41 11 40 29\n24 24\n39 52\n33 15\n10 10\n6 21",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16 37 38\n13 36\n10 44\n15 34 39\n18 31 12 9 12 7\n47 23\n31 32\n26 33\n11 17\n26 18",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "17 49 25\n13 5\n31 36\n13 39 27\n10 41 12 38 51 49\n10 33\n27 7\n25 28\n36 21\n28 42",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "36 48 24\n42 46\n44 27\n43 52 26\n22 17 39 41 11 33\n20 14\n50 48\n17 12\n36 48\n17 36",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "12 11 9\n51 43\n39 45\n10 31 39\n30 8 18 44 27 22\n10 34\n31 6\n43 45\n19 33\n38 20",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105\n105 105\n105 105\n105 105 105\n105 105 105 105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105\n105 105\n105 105\n105 105 105\n105 105 105 105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 104 1\n1 1\n2 2\n105 2 2\n1 2 1 104 105 104\n2 105\n105 105\n104 2\n2 105\n105 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 104 105\n104 104\n105 104\n105 105 104\n1 1 105 104 105 2\n2 105\n104 2\n105 104\n1 105\n104 105",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}