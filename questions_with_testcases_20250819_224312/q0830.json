{
  "problem_code": "problems",
  "title": "Ada and Travelling Salesman",
  "tags": [],
  "text": "Ada the Ladybug lives in Bugladesh. It is a very specific country - there are plenty of cities, but since the government doesn't \"waste\" money, there is only one simple path between each pair of cities.Ada is working as Traveling Salesman. She travels between cities, buying and selling products. A product has fixed price in each city (same for buy/sale). Since Ada travels with bike (to avoid payments for travels) so she can carry at most one item at a moment.She is currently in some city, and she wants to choose such city, that she will make as much money as possible by travelling to that city (by simple path). Can you help her?InputThe first line will contain0 < N ≤ 105, 0 < Q ≤ 5×105, number of cities and number of queries respectively.Then one line withNintegers follow,1 ≤ Ai≤ 109, the price inithcity.AfterwardN-1lines follow, each containing two numbers0 ≤ i, j < N(i ≠ j), meaning that there is a simple path between cityiand cityj.ThenQlines follows, each containing exactly one integer0 ≤ i < N- the city in which Ada begins.OutputPrintQlines, the maximal amount of money, Ada can earn.Example Input6 6\r\n1 2 3 4 5 4\r\n1 0\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5Example Output4\r\n3\r\n3\r\n1\r\n1\r\n2Example Input5 2\r\n1 5 2 4 3\r\n0 1\r\n1 2\r\n2 3\r\n3 4\r\n0\r\n2Example Output6\r\n3Output explanations [Possible destination cities of first example input]4\r\n4\r\n4\r\n2\r\n2\r\n2Note that some of the destinations might have ended somewhere else, but it would result in same income!",
  "sample_input": "6 6\r\n1 2 3 4 5 4\r\n1 0\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5",
  "sample_output": "4\r\n3\r\n3\r\n1\r\n1\r\n2",
  "link": "https://www.spoj.com/problems/ADASALES",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "6 6\r\n1 2 3 4 5 4\r\n1 0\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5",
      "expected_output": "4\r\n3\r\n3\r\n1\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 2\n5 2 9 9 2 7\n2 5\n1 4\n1 4\n10 9\n10 9\n1\n9\n6\n6\n7\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n1 1 4 3 5 9\n2 1\n3 5\n10 8\n5 4\n6 10\n9\n3\n9\n3\n4\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 9\n5 6 4 6 6 4\n7 5\n10 5\n1 3\n7 2\n1 4\n5\n8\n3\n10\n7\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 54\n94 58 64 98 16 76\n8 23\n32 33\n47 74\n58 55\n36 15\n68\n80\n28\n70\n1\n98",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "14 8\n52 99 70 16 9 78\n52 50\n13 98\n16 56\n68 94\n87 65\n54\n61\n77\n77\n56\n74",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 85\n69 11 26 2 80 98\n56 13\n86 56\n40 87\n98 14\n24 85\n37\n97\n57\n12\n99\n42",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 39\n83 97 5 28 82 86\n65 70\n47 21\n41 76\n60 72\n13 71\n52\n59\n41\n7\n25\n52",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "71 43\n23 80 11 80 67 87\n1 39\n24 60\n61 36\n14 99\n96 60\n13\n17\n12\n17\n89\n31",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "42 38\n12 24 6 10 9 27\n34 43\n32 30\n19 23\n46 51\n31 16\n22\n12\n47\n25\n24\n37",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "14 13\n26 35 17 37 5 8\n24 20\n15 50\n14 25\n48 11\n25 45\n31\n51\n27\n29\n42\n32",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "14 19\n14 37 50 37 27 11\n9 28\n30 18\n48 24\n19 10\n41 30\n19\n41\n6\n6\n52\n39",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 32\n35 10 7 42 11 41\n45 10\n52 38\n16 50\n25 35\n33 35\n19\n49\n15\n27\n14\n24",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "38 27\n52 6 35 12 6 49\n12 39\n6 39\n16 32\n28 52\n24 46\n19\n10\n31\n24\n22\n41",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "39 31\n51 45 22 7 13 49\n9 42\n28 24\n41 24\n39 27\n36 14\n21\n36\n32\n51\n14\n19",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "49 25\n6 20 18 33 8 37\n48 37\n40 5\n13 38\n8 42\n44 12\n38\n44\n41\n26\n12\n36",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105 105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105\n105\n105\n105\n105\n105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105 105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105\n105\n105\n105\n105\n105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "104 105\n105 1 2 104 104 104\n1 2\n2 2\n1 2\n105 1\n105 2\n105\n104\n2\n104\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105\n104 104 104 2 105 1\n2 105\n1 2\n105 104\n1 104\n105 2\n105\n104\n104\n104\n105\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}