{
  "problem_code": "problems",
  "title": "Circuits",
  "tags": [],
  "text": "Everyone is aware of the existence of the well known Nordenskjold  Archipelago, located in the Arctic Ocean and belonging to the Krasnoyarsk Krai of Russia. This archipelago  consists of a groups ofNislands andMaquatic routes between some  pairs of islands. Each route connects a pair of islands and for each  pair there is at most one route connecting them.Considering the popularity of Nordenskjold Archipelago,  Krasnoyarsk's authorities are concerned about its touristic value. The  touristic value of the archipelago is given by the total number of  islands that belong to at least one “touristic circuit”.  A touristic circuit is a path starting and ending in the same island  that visits at least three different islands, never visits the same  island more than once and uses just aquatic routes to go from one  island to the next one.Krasnoyarsk's authorities want to know the minimum number of  additional aquatic routes that must be built so that every  island belongs to at least one touristic circuit. Your task is to  write a program that answers this question.InputThe input contains several test cases. Each test case is described  in several lines. The first line contains two integer numbersNandM(3 ≤N≤ 100, 1 ≤M≤ 1000) which indicate the number  of islands and the number of aquatic routes, respectively. Each  island is identified by a number between 1 andN. Each of the nextMlines contains two integersUandV(1 ≤U<V≤N),  indicating that there is an aquatic route connecting islandsUandV.  You may assume that in each test case there is at most one aquatic  route connecting the same pair of islands. The last line of the input  contains the number -1 twice and should not be processed as a test case.OutputFor each test case output a single line with an integer  representing the  minimum number of  additional aquatic routes that must be built so that every  island belongs to at least one touristic circuit.ExampleInput:3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1Output:2\r\n0\r\n1\r\n4",
  "sample_input": "Input:3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1Output:2\r\n0\r\n1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CIRCUITS",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1",
      "expected_output": "2\r\n0\r\n1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\n10 4\n10 4\n4 10\n9 10\n8 4\n8 7\n4 10\n3 1\n5 8\n6 9\n9 5\n8 6\n9 4\n7 10\n3 1\n3 9\n4 3\n9 5\n9 5\n9 6\n7 6\n1 4\n10 5\n3 3\n2 7\n2 7\n2 9\n4 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n2 3\n8 8\n9 2\n6 5\n4 6\n9 7\n1 10\n4 3\n6 2\n5 1\n5 9\n6 3\n4 8\n8 7\n9 7\n2 10\n4 8\n3 6\n1 1\n2 6\n4 3\n5 9\n10 2\n10 5\n5 6\n3 9\n1 7\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n10 8\n10 2\n8 9\n2 9\n5 9\n4 1\n6 9\n1 3\n3 8\n7 6\n8 4\n1 10\n8 6\n1 9\n3 2\n1 1\n10 4\n3 3\n7 10\n7 8\n2 10\n3 5\n3 2\n1 5\n5 9\n7 8\n8 7\n3 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 75\n47 67\n9 54\n95 31\n22 39\n41 66\n8 97\n39 94\n58 58\n95 33\n16 25\n5 22\n15 43\n24 54\n20 10\n100 71\n39 40\n33 65\n66 74\n4 99\n44 11\n68 88\n60 24\n43 51\n91 57\n84 91\n61 70\n94 15\n32 30",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 28\n42 12\n53 62\n65 74\n45 92\n32 70\n11 16\n80 13\n86 46\n85 27\n77 17\n35 58\n81 48\n69 37\n71 89\n85 69\n58 76\n11 80\n74 2\n61 11\n94 40\n73 54\n27 100\n36 57\n66 95\n100 74\n83 90\n31 19\n22 95",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 28\n41 33\n90 73\n77 66\n1 41\n78 18\n1 85\n52 8\n60 26\n72 55\n65 75\n82 18\n17 21\n47 26\n76 9\n68 76\n30 69\n27 97\n34 84\n57 68\n55 25\n22 55\n15 40\n38 63\n1 100\n77 94\n47 95\n74 57\n70 18",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 12\n96 4\n25 23\n3 81\n34 1\n21 18\n38 63\n81 62\n45 67\n63 81\n14 72\n27 24\n100 63\n94 61\n85 18\n47 72\n3 69\n23 44\n78 99\n8 59\n21 53\n48 25\n39 93\n97 18\n92 67\n58 14\n78 24\n52 78\n94 40",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 94\n58 9\n90 66\n1 29\n68 87\n41 42\n84 7\n25 18\n17 46\n84 89\n10 84\n52 31\n38 63\n46 56\n11 31\n54 41\n30 6\n93 69\n70 63\n50 55\n20 36\n80 98\n61 33\n22 75\n7 8\n21 49\n46 67\n29 28\n61 92",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "7 47\n9 50\n35 44\n10 39\n31 27\n28 47\n40 26\n38 15\n20 24\n40 17\n12 35\n41 28\n6 18\n19 31\n44 31\n16 30\n50 28\n25 48\n26 9\n16 39\n6 46\n21 24\n32 15\n13 31\n43 37\n44 14\n36 22\n32 29\n39 16",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "39 27\n13 21\n34 6\n41 34\n7 7\n37 29\n5 21\n10 34\n17 17\n43 11\n11 45\n6 15\n37 11\n11 41\n27 24\n21 26\n29 33\n31 48\n47 44\n47 42\n5 31\n33 29\n22 42\n28 49\n17 31\n38 6\n47 7\n38 34\n44 15",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "27 9\n13 38\n25 33\n15 7\n23 36\n19 25\n15 33\n27 25\n49 45\n24 39\n6 48\n38 10\n24 21\n26 9\n34 16\n12 47\n26 14\n48 35\n50 25\n10 19\n37 34\n48 38\n18 22\n5 47\n24 37\n49 30\n49 35\n37 25\n20 20",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "45 28\n13 30\n45 25\n46 36\n39 26\n23 30\n27 35\n41 10\n16 8\n49 30\n45 27\n42 19\n50 33\n49 46\n26 8\n34 17\n31 47\n34 18\n23 34\n31 15\n44 9\n29 37\n43 18\n15 41\n6 9\n18 21\n15 46\n23 13\n27 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "27 33\n46 45\n48 47\n23 11\n7 15\n50 12\n28 6\n31 34\n37 26\n43 10\n7 31\n25 26\n24 32\n37 24\n5 18\n7 37\n37 47\n23 33\n33 15\n5 12\n39 32\n26 15\n32 29\n7 18\n15 27\n17 5\n44 37\n15 12\n34 19",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "11 15\n35 25\n21 8\n13 25\n48 25\n8 36\n44 46\n32 38\n41 33\n27 22\n48 6\n20 36\n26 45\n6 25\n23 12\n30 18\n32 28\n22 22\n46 27\n27 27\n43 31\n13 35\n6 36\n35 48\n22 23\n21 18\n44 46\n31 43\n12 42",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "19 42\n48 42\n44 45\n12 34\n10 23\n19 11\n13 47\n31 23\n23 44\n47 30\n40 46\n40 16\n47 18\n46 43\n15 9\n44 5\n13 17\n20 21\n47 11\n12 34\n38 15\n31 12\n33 21\n49 27\n44 13\n10 46\n38 41\n12 20\n19 30",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 2\n1 100\n1 99\n99 99\n2 99\n100 1\n100 100\n1 100\n1 100\n1 2\n100 99\n1 100\n2 2\n2 1\n100 1\n99 2\n100 100\n100 1\n99 2\n1 99\n1 99\n1 100\n99 2\n100 1\n1 99\n2 100\n1 1\n99 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 100\n1 1\n2 1\n100 2\n2 1\n1 2\n1 1\n2 99\n99 2\n99 99\n100 99\n2 1\n100 1\n1 100\n1 100\n2 1\n2 100\n1 1\n1 1\n99 1\n1 1\n99 100\n99 99\n100 2\n99 1\n1 1\n100 99\n1 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}