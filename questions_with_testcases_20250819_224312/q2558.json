{
  "problem_code": "problems",
  "title": "VALIDATE THE MAZE",
  "tags": [],
  "text": "There are many algorithms to generate maze. (maze generation algorithm). After generating the maze we’ve to validate whether it’s a valid maze or not. A valid maze has exactly one entry point and exactly one exit point (exactly 2 openings in the edges) and there must be at least one path from the entry point to exit point.Given a maze, just find whether the maze is \"valid\" or \"invalid\".InputThe first line consists of an integer t, the number of test cases. Then for each test case, the first line consists of two integers m and n, the number of rows and columns in the maze. Then contains the description of the matrix M of order m×n. M[i][j] = # represents a wall and M[i][j] = '.' represents a space.OutputFor each test case find whether the maze is \"valid\" or \"invalid\".Constraints1 ≤ t ≤ 100001 ≤ m ≤ 201 ≤ n ≤ 20ExampleInput:6\r\n4 4\r\n####\r\n#...\r\n#.##\r\n#.##\r\n5 5\r\n#.###\r\n#..##\r\n##..#\r\n#.#.#\r\n###.#\r\n1 1\r\n.\r\n5 1\r\n#\r\n#\r\n.\r\n.\r\n#\r\n2 2\r\n#.\r\n.#\r\n3 4\r\n#..#\r\n#.##\r\n#.##Output:valid\r\nvalid\r\ninvalid\r\nvalid\r\ninvalid\r\ninvalid",
  "sample_input": "Input:6\r\n4 4\r\n####\r\n#...\r\n#.##\r\n#.##\r\n5 5\r\n#.###\r\n#..##\r\n##..#\r\n#.#.#\r\n###.#\r\n1 1\r\n.\r\n5 1\r\n#\r\n#\r\n.\r\n.\r\n#\r\n2 2\r\n#.\r\n.#\r\n3 4\r\n#..#\r\n#.##\r\n#.##Output:valid\r\nvalid\r\ninvalid\r\nvalid\r\ninvalid\r\ninvalid",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MAKEMAZE",
  "scraped_at": "2025-08-17 00:34:08",
  "test_cases": [
    {
      "input": "6\r\n4 4\r\n####\r\n#...\r\n#.##\r\n#.##\r\n5 5\r\n#.###\r\n#..##\r\n##..#\r\n#.#.#\r\n###.#\r\n1 1\r\n.\r\n5 1\r\n#\r\n#\r\n.\r\n.\r\n#\r\n2 2\r\n#.\r\n.#\r\n3 4\r\n#..#\r\n#.##\r\n#.##",
      "expected_output": "valid\r\nvalid\r\ninvalid\r\nvalid\r\ninvalid\r\ninvalid",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n4\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n5\n9\n2\n10\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n6\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n20311307\n55032685\n50271068\n71897594\n56837535\n31374377\n64184819\n67971739\n3003282\n61392465\n90987047\n1814091\n96508638\n77924267\n4405915\n66430016\n32514630\n51803233\n29384681",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n81313774\n23457416\n64713772\n38323918\n50883642\n71886699\n57238990\n72197894\n84819965\n73481341\n16899370\n77389109\n6407018",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n56182481\n23618710\n46242786\n49235552\n97354422\n30844708",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n17167015\n34586979\n43059667\n33169195\n80975261\n70765072\n43816078\n99403200\n8981012",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n16964325\n26293786\n80130726\n94500716\n29413293\n63824653",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n77445\n81926\n53062\n63939\n7202\n99514\n5138\n27524\n63939\n76862\n10122\n36154\n63197\n17838\n98389\n41558\n81461\n52199\n87851\n6324",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n86916\n7676\n98855\n84145\n76553\n72531\n29889\n12523\n94904\n69196\n55633\n95776\n94862\n77455\n21653\n83101\n87768\n33723\n86553\n63784",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n97706\n65860\n48191\n6574\n72246\n52251\n68428\n89352\n24646\n28504\n65793\n2380\n47150\n55179\n31364\n6090\n97217\n42494\n37896\n81209",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n67302\n49094\n43295\n29043\n9531\n57413\n84646\n33532\n87287\n13395\n66937\n71222\n59228\n92705\n2698\n80780\n51198\n44147\n93256\n80519",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n9807\n31087\n98239\n37918\n3255\n19983\n68134\n53332\n77068\n95710\n70493\n78536\n93478\n7458\n89445\n16216\n79878\n35660\n69430\n67493",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n24685\n26768\n85910\n31645\n88844\n65669\n48389\n17718\n24620\n54033\n40454\n9340\n29853\n78389\n22387\n36138\n63243\n75894\n98808\n81684",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n65084\n99605\n77944\n90432\n85272\n42569\n27798\n8930\n47504\n36383\n95672\n29713\n33434\n52813\n10866\n68809\n76012\n40126\n69691\n19724",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n12682795\n99400952\n30896524\n66636807\n72651048\n92228605\n53520073\n48212801\n69028158\n67250102\n56537734\n35522555\n55237332\n86343854\n49376309\n8190384\n76933932\n28415707\n67909459\n73026617",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n98738441\n61070455\n58616313\n97852341\n56976559\n3949092\n83092914\n71294857\n42504548\n34609838\n43257738\n9731215\n61349462\n48027700\n72471725\n93418014\n84579447\n60139398\n93474877\n8305929",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "1\n76225634",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n44594847\n41682429",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}