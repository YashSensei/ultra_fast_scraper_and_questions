{
  "problem_code": "problems",
  "title": "Apoorv and Maximum Inversion",
  "tags": [],
  "text": "Apoorv has an array of n integers. Inversion count of an array is defined by number of pair of indices(i,j)  such that iarr[j]. You are given an integer p. Apoorv has to find the subarray with maximum inversion count among all subarrays of size p. Apoorv find this job very tough so he turns to you for help.Constraints :1<=n<=500000-1000000000<=arr[i]<=10000000001<=p<=nInputFirst line contains two integers n and p.Next line contains n space separated integers denoting the elements of the array.OutputOutput two space separated integers first integer should be thestarting index(1-based indexing) of the subarray and next integer would be thecount of inversions in that subarray.In case there is a tie in maximum inversion countÂ  print thesmalleststarting index among the subarrays having maximum inversion count.ExampleInput:10 515 51 44 44 76 50 29 88 48 50Output:5 6",
  "sample_input": "Input:10 515 51 44 44 76 50 29 88 48 50Output:5 6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAS001",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "10 515 51 44 44 76 50 29 88 48 50",
      "expected_output": "5 6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 4 6 10 5 8 8 9 1 7 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 4 1 4 10 6 2 5 3 7 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 8 9 9 10 2 1 5 5 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "52 11 54 71 59 82 6 88 70 35 48",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 44 81 51 71 50 35 22 57 89 67",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 41 36 43 22 48 50 94 100 24 43",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "97 52 62 79 40 14 96 62 54 74 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 91 32 51 81 40 85 23 89 54 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "107 118 235 221 436 413 310 268 113 305 87",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "180 344 175 196 298 81 152 215 383 159 450",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "417 335 372 415 363 341 362 267 235 279 116",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "231 238 391 132 278 231 431 295 319 346 487",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "368 313 393 154 179 173 165 191 432 241 434",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "246 387 366 435 116 252 277 330 397 500 155",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "120 499 64 423 240 415 221 329 109 226 276",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 999 999 1000 1 2 1000 999 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1 2 1 1 999 1 2 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}