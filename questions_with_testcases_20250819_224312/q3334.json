{
  "problem_code": "problems",
  "title": "Doors and Penguins",
  "tags": [],
  "text": "The organizers of the Annual Computing Meeting have invited a number of vendors to set up booths in a large exhibition hall during the meeting to showcase their latest products. As the vendors set up their booths at their assigned locations, they discovered that the organizers did not take into account an important fact — each vendor supports either the Doors operating system or the Penguin operating system, but not both. A vendor supporting one operating system does not want a booth next to one supporting another operating system.\r\n\r\nUnfortunately the booths have already been assigned and even set up. There is no time to reassign the booths or have them moved. To make matter worse, these vendors in fact do not even want to be in the same room with vendors supporting a different operating system.\r\n\r\nLuckily, the organizers found some portable partition screens to build a wall that can separate the two groups of vendors. They have enough material to build a wall of any length. The screens can only be used to build a straight wall. The organizers need your help to determine if it is possible to separate the two groups of vendors by a single straight wall built from the portable screens. The wall built must not touch any vendor booth (but it may be arbitrarily close to touching a booth). This will hopefully prevent one of the vendors from knocking the wall over accidentally.InputThe input consists of a number of cases. Each case starts with 2 integers on a line separated by a single space: D and P, the number of vendors supporting the Doors and Penguins operating system, respectively (1 ≤ D, P ≤ 500). The next D lines specify the locations of the vendors supporting Doors. This is followed by P lines specifying the locations of the vendors supporting Penguins. The location of each vendor is specified by four positive integers: x1, y1, x2, y2. (x1, y1) specifies the coordinates of the southwest corner of the booth while (x2, y2) specifies the coordinates of the northeast corner. The coordinates satisfy x1 < x2 and y1 < y2. All booths are rectangular and have sides parallel to one of the compass directions. The coordinates of the southwest corner of the exhibition hall is (0, 0) and the coordinates of the northeast corner is (15000, 15000). You may assume that all vendor booths are completely inside the exhibition hall and do not touch the walls of the hall. The booths do not overlap or touch each other.\r\n\r\nThe end of input is indicated by D = P = 0.OutputFor each case, print the case number (starting from 1), followed by a colon and a space. Next, print the sentence:\r\n\r\nIt is possible to separate the two groups of vendors.\r\n\r\nif it is possible to do so. Otherwise, print the sentence:\r\n\r\nIt is not possible to separate the two groups of vendors.\r\n\r\nPrint a blank line between consecutive cases.ExampleInput:3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0Output:Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
  "sample_input": "Input:3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0Output:Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOORSPEN",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0",
      "expected_output": "Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 5\n5 1 7 10\n9 4 10 5\n9 7 9 8\n9 1 4 5\n2 10 7 10\n3 5 10 2\n6 7\n6 6 5 3\n7 6 2 4\n4 5 6 3\n4 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n2 10 9 5\n7 1 6 6\n4 1 6 10\n3 9 8 6\n6 8 10 6\n8 8 6 6\n8 6\n9 6 4 3\n3 10 1 1\n8 5 5 1\n5 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n2 3 10 6\n8 8 4 8\n6 4 5 1\n2 9 5 2\n5 9 3 7\n7 4 2 7\n4 4\n6 3 1 1\n5 10 9 5\n5 7 6 5\n9 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 69\n81 39 44 37\n35 4 19 11\n88 24 85 44\n36 6 93 45\n40 57 71 61\n66 57 5 100\n3 3\n61 50 84 82\n23 46 95 19\n49 52 36 17\n69 37",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 81\n82 27 65 88\n40 27 25 7\n99 73 21 97\n31 3 85 8\n44 58 70 64\n53 25 1 27\n60 10\n40 39 15 12\n3 46 69 68\n79 11 64 79\n93 72",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 62\n66 71 54 8\n85 78 4 17\n20 96 30 89\n68 9 26 37\n88 28 87 43\n69 38 1 63\n35 64\n50 13 47 95\n36 95 47 4\n10 84 71 95\n68 77",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 77\n2 52 88 54\n100 1 55 67\n17 58 91 16\n25 31 62 57\n97 80 87 28\n42 21 88 21\n14 15\n3 40 36 15\n29 26 60 98\n35 28 15 68\n21 75",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 86\n25 68 3 29\n80 32 23 36\n81 19 60 56\n13 84 27 13\n23 18 59 91\n40 54 82 72\n52 22\n23 28 58 58\n91 89 55 54\n91 56 31 8\n50 88",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "289 82\n478 104 144 485\n330 419 312 365\n62 204 351 461\n434 299 251 335\n197 321 272 376\n249 98 164 136\n305 384\n228 347 190 150\n78 399 467 160\n374 338 216 398\n236 479",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "251 392\n135 473 175 92\n140 306 496 466\n186 186 267 269\n349 462 272 481\n282 123 352 183\n290 269 489 78\n442 294\n356 454 190 460\n397 154 126 327\n418 405 278 293\n239 91",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "331 344\n434 413 432 226\n269 179 86 311\n162 494 163 206\n237 488 217 266\n150 376 450 339\n58 155 462 473\n218 132\n163 245 201 316\n259 386 220 314\n380 170 413 474\n421 89",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "194 120\n194 482 76 404\n260 146 237 206\n475 140 460 166\n113 302 467 250\n253 69 278 286\n320 348 223 405\n360 295\n492 101 488 455\n438 138 94 421\n185 66 260 222\n227 319",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "209 319\n346 106 342 142\n416 141 245 250\n164 238 372 94\n405 289 133 403\n133 424 448 357\n136 160 445 498\n208 329\n239 144 294 298\n486 474 483 192\n373 479 321 278\n274 342",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "306 205\n88 478 295 427\n230 425 300 97\n422 219 202 83\n154 473 365 481\n445 148 110 329\n87 80 454 388\n421 219\n60 241 284 465\n94 243 115 176\n380 161 368 366\n282 111",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "495 77\n368 237 421 186\n174 481 279 416\n437 373 292 253\n298 433 361 349\n63 219 129 194\n390 495 51 500\n440 196\n53 456 310 461\n195 257 305 470\n393 226 201 382\n462 298",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000\n2 2 1000 999\n999 1 1000 999\n999 1 999 2\n1000 1000 1000 1000\n2 2 1 2\n2 1000 999 1\n2 2\n2 1000 1000 2\n1000 1 1000 2\n1 999 1 1\n1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n1000 1000 2 2\n1000 999 1000 1\n999 1000 2 999\n2 1000 2 2\n999 1000 999 1\n999 1000 2 2\n1000 2\n1 1000 2 999\n1000 1 1 1\n1000 999 2 1000\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}