{
  "problem_code": "problems",
  "title": "Building Bridges(HARD)",
  "tags": [],
  "text": "The tribe soon discovers that just communication is not enough and wants to meet each other to form a joint force against the terminator. But there is a deep canyon that needs to crossed. Points have been identified on both sides on which bridge ends can be made. But before the construction could be started, a witch Chudael predicted that a bridge can only be built between corresponding end points, i.e. a bridge starting from the ithend point on one side can only end on the ithend point on the other side, where the position of end points is seen in the order in which the points were identified. If not, it would lead to the end of the tribe. The tribe just wants to make as many non-overlapping bridges as possible, with the constraint in mind.InputThe first line of the input contains test cases t. It is followed by 3×t lines, 3 for each test case. The first line of input for each test case contains the number of end points identified on each side, n (1 ≤ n ≤ 105). The second line contains x-coordinates of end points identified on the first side and similarly the third line contains the x-coordinates of corresponding end points identified on the other side. The end points are inputted in the order in which they were identified. The x-coordinates can range between -106to 106.OutputYou are required to output a single line for each test case. The line contains a single integer – the maximum number of bridges possible with the constraints explained above.ExampleInput:3\r\n4\r\n2 5 8 10\r\n6 4 1 2\r\n3\r\n5 3 10\r\n6 4 1\r\n6\r\n1 2 3 4 5 6\r\n3 4 5 6 1 2Output:2\r\n2\r\n4ExplanationFor the first test case, two non-overlapping bridges can be formed between the 3rd and 4th end points on each side.(This problem is based onBRIDGE.)",
  "sample_input": "Input:3\r\n4\r\n2 5 8 10\r\n6 4 1 2\r\n3\r\n5 3 10\r\n6 4 1\r\n6\r\n1 2 3 4 5 6\r\n3 4 5 6 1 2Output:2\r\n2\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BRDGHRD",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "3\r\n4\r\n2 5 8 10\r\n6 4 1 2\r\n3\r\n5 3 10\r\n6 4 1\r\n6\r\n1 2 3 4 5 6\r\n3 4 5 6 1 2",
      "expected_output": "2\r\n2\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n2\n7\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n5\n8\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n9\n8\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n34320060\n64247051\n96176585\n11252436\n4496531",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n75051333\n18205787\n7201604\n85574572\n22088178\n62648987\n95014725\n39820334\n91156439\n16716700\n38876256\n25873239",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n69924451\n81056155\n55276846\n93844809\n3498304\n68848226\n15106979\n90891500\n13097908\n70082333\n77228392\n42153374\n85896519\n84607946\n30890418",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n78466813\n9795045\n74895376\n83449626\n76733622\n81846993\n28413477\n98717020\n67680318\n19828098\n14625370\n55007370\n84247870\n59551696\n65724388\n49127170\n84713527\n79953059",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n41505756\n46397317\n30985608\n94695460\n33375993\n27048122\n4482671\n55933035\n66157559\n8322010\n64215966",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "31\n92888\n50584\n7385\n74219\n15896\n55794\n22293\n23145\n94679\n97120\n82527\n77673\n87239\n24184\n1275\n77398\n99456\n30468\n24723\n62249\n86222\n82172\n958\n40884\n85514\n88787\n6951\n10380\n10362\n50463\n60916",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n52672\n61663\n99935\n58859\n93152\n9130\n63843\n34530\n84452\n47810\n38530\n8824\n43647\n81003\n27784\n90141\n27105\n24392\n18292\n56148\n52838\n16201\n8278\n46253\n78856\n43301\n5323\n61561\n55341\n23672\n48190\n34430\n18793\n68168\n55784\n66399\n1600\n65322\n97392\n23085\n1839",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n98988\n30208\n89736\n50052\n89408\n67243\n56096\n17059\n40503\n89009\n98721\n19815\n69583\n31483\n48243\n50154\n12726\n70540\n38360\n39977\n31968\n37604\n21515\n80868\n73651\n33491\n99103\n58115\n28892\n93150\n23358\n51756\n69425\n38431\n98967\n60973\n71420\n43524\n63837\n98381\n48952\n59352\n59421\n90818\n53958\n23468\n67259\n59377\n7138\n79948\n32892\n56045\n98745\n65156\n66524\n84874\n67016\n27161\n12769\n46367\n16889\n52224\n50281\n15477\n74896\n73204\n10204\n25198\n33511\n86527\n46736\n20230\n62934\n38644\n96652\n38200\n39614\n40925\n57736\n77503\n84430\n6209\n72919\n77014\n44381\n78564\n41727\n74657\n35090\n59405\n52818\n30969\n76069\n96412\n13051\n12406\n994\n37468\n44340\n7063\n67758\n67528\n72781\n93978\n21731",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n68764\n76033\n73242\n89688\n26035\n72700\n23042\n37557\n39966\n59103\n81747\n62417\n91094\n17678\n59726\n43727\n76836\n40500\n4222\n62784\n51908\n64028\n67212\n4248\n26161",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "46\n78656\n90530\n60378\n69026\n7445\n7396\n85691\n82388\n10228\n20333\n33688\n6536\n81890\n63618\n81561\n97390\n53128\n60852\n24371\n33194\n37218\n98798\n81218\n71835\n92039\n44587\n49800\n85454\n67561\n32319\n74136\n89479\n38579\n459\n69992\n47722\n2335\n20543\n55945\n96551\n47817\n62433\n17032\n60756\n59293\n45496",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n93950\n69292\n6606\n87133\n26680\n64561\n54651\n58469\n65757\n16880\n96251\n8962\n82279\n76113\n28853\n42602\n53756\n28774\n68749\n42808",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "67\n5071\n16313\n67507\n52880\n75970\n36640\n57706\n29203\n9905\n5891\n17112\n80114\n71517\n36834\n59617\n77690\n65229\n71069\n31062\n15320\n91456\n92704\n71945\n16922\n87453\n94641\n4790\n39601\n24324\n46752\n33387\n99276\n66242\n19874\n29602\n21604\n41362\n74430\n35465\n39942\n23892\n14946\n77974\n53804\n48966\n58724\n42411\n43216\n42420\n55705\n40498\n24941\n56280\n31789\n6268\n16839\n59380\n7346\n58072\n39965\n65923\n22851\n16397\n54660\n23473\n30231\n13440",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n81095931\n77281373\n5814317\n96609268\n81850756\n59249882\n90673174\n79897852\n38805526\n88569829\n8403201\n29762679\n36349335\n56814346\n88284430\n72569917\n55062056\n88112929\n84861631\n2861798\n69637571\n13741434\n22198638\n82419086\n41496333\n19275547\n96799421\n17545974\n1856142\n3861744\n82898799\n2035207\n61268936\n39944489\n81549822\n3469000\n95906515\n69701599\n63375111\n97317478\n10207654\n86710412\n104105\n95917847\n8889529\n90481461\n64094503\n28080943\n82003368\n65068144\n41406427\n2607074\n83144209\n86565442\n99764203\n69497440\n41357251\n69089325\n74002502\n7885413\n76256578\n980924\n41079339\n98438358\n99639183\n85583913\n27556691\n83445749\n43655904\n76033721\n30729326\n30718422\n3166811\n28714099\n74702745\n86823732\n87155917\n78554018\n24539167\n14828789\n20512555\n74706389\n92568679\n3314205\n68344130\n81918575\n28576496\n62453192\n11769888\n73005257\n18274766\n62485544\n97430198\n4632197\n88964578\n824028\n53485921\n2199226\n91450534\n81765426\n50190167\n84398199\n52921014\n7809449\n41523790",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n79652911\n68923915\n84892872\n70957808\n17210831\n24689083\n83691883\n12108160\n13528958\n76341009\n5164254\n79177780\n31252134\n66869822\n49752035\n62078232\n48017333\n46181031\n81974747\n55641110\n21590651\n33226855\n32842688\n15218723\n50352108\n58954943\n56342195\n66571353\n180123\n92276616\n40862219\n60738924\n19287714\n55008664\n52123756\n91458944\n35576565\n85396760\n92457213\n60572178\n59671937\n86104897\n15368090\n52329444\n55775825\n80724397\n4573233\n42469421\n28938713\n36732538\n4913046\n8529089\n56601790\n20889253\n69691289\n79637800\n24386973\n40540602\n62169223\n25987391\n92400388\n45735603\n11938292\n36269991\n53243361\n92208085\n55480538\n95711965\n33626790\n8322064\n69516001\n28848672\n53462932\n10523187\n53925628\n10793411\n24532174\n926129\n33083412\n19982666\n47519438\n98261516\n93790473\n35514748\n72254179\n63437283\n59701283\n47270120\n68825504\n72533307\n7241018\n47523035\n6498546\n96662048\n28494252\n61550945\n37585286\n87108458\n77132634\n75703730\n99968148\n11730051\n39665147\n10569925\n30148071",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "2\n26190299\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}