{
  "problem_code": "problems",
  "title": "Grass Planting",
  "tags": [],
  "text": "Problem descriptionFarmer John has N barren pastures (2 ≤ N ≤ 100,000) connected by N-1 bidirectional roads, such that there is exactly one path between any two pastures.  Bessie, a cow who loves her grazing time, often complains about how there is no grass on the roads between pastures.  Farmer John loves Bessie very much, and today he is finally going to plant grass on the roads.  He will do so using a procedure consisting of M steps (1 ≤ M ≤100,000).At each step one of two things will happen:FJ will choose two pastures, and plant a patch of grass along each road in between the two pastures, or,Bessie will ask about how many patches of grass on a particular road, and Farmer John must answer her question.Farmer John is a very poor counter -- help him answer Bessie's questions!Input* Line 1: Two space-separated integers N and M* Lines 2..N: Two space-separated integers describing the endpoints of a road.* Lines N+1..N+M: Line i+1 describes step i. The first character of the line is either P or Q, which describes whether or not FJ is planting grass or simply querying. This is followed by two space-separated integers Aiand Bi(1 ≤ Ai, Bi≤ N) which describe FJ's action or query.Output* Lines 1..???: Each line has the answer to a query, appearing in the same order as the queries appear in the input.ExampleInput:4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4Output:2\r\n1\r\n2[ Edited by EB ]Warning:Some input files are broken.",
  "sample_input": "Input:4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4Output:2\r\n1\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GRASSPLA",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4",
      "expected_output": "2\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 1\n6 1\n3 9\n4 10\n2 10\njesn 2 10\n1 2\njqib 9 5\n8 1\nxveqo 2 2\n2 5\nmz 1 4\n4 8\npgsx 1 2\n2 9\ngbvxr 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 8\n8 2\n6 3\n4 8\n5 5\ntpll 2 6\n3 6\nd 5 3\n4 4\ngpblf 6 9\n4 10\nsawid 2 4\n3 9\nqny 10 10\n7 4\nf 3 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 8\n2 9\n6 8\n7 8\n7 4\neqare 10 2\n7 7\nz 8 10\n4 6\nbyxge 2 6\n7 5\nlcknp 7 6\n9 4\nnbb 1 8\n4 2\njcsg 4 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 88\n82 39\n62 32\n57 18\n98 18\nbcer 50 86\n51 20\ndmnfb 58 42\n29 72\ndphr 51 8\n30 16\nz 75 98\n97 28\ne 63 27\n18 89\nap 51 99",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "47 50\n80 60\n57 34\n5 52\n63 65\nsjqmr 28 27\n17 11\nbko 62 10\n9 78\nfhmi 45 41\n72 33\ng 76 36\n68 49\napt 32 27\n89 30\nc 100 71",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "98 28\n90 75\n57 47\n38 81\n52 94\nibrpn 76 41\n85 3\naarou 76 91\n36 54\nkdgf 94 35\n35 85\nlevu 12 43\n6 100\nknzy 73 64\n18 86\neac 38 75",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 69\n67 49\n16 40\n75 95\n65 91\nbotz 65 1\n7 39\nqfn 10 26\n9 71\ngzq 64 86\n13 28\nl 65 46\n74 22\nzfaa 48 1\n23 38\nqrsof 17 69",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "10 24\n94 7\n38 67\n46 30\n2 84\ntcngc 7 66\n6 77\nzoy 19 1\n61 23\nkima 16 40\n75 29\no 7 92\n36 8\ns 48 66\n90 67\nhwtw 2 94",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "43 28\n5 27\n21 17\n18 17\n6 14\nnsdez 11 50\n11 34\nmflkl 48 12\n7 25\ney 21 31\n10 23\nlcc 38 18\n7 21\npvldy 13 47\n10 20\nupp 22 50",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "15 39\n47 43\n48 11\n29 19\n33 25\ni 35 37\n40 6\nbi 24 31\n22 27\nrw 50 15\n16 9\nrqqy 18 9\n43 15\nam 20 6\n24 45\nrgzfo 20 35",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "38 36\n11 44\n15 23\n37 29\n36 6\ntxs 17 45\n11 11\ndfrkx 7 43\n13 41\nlpr 41 14\n27 12\nuy 6 43\n44 31\nksit 48 14\n38 45\nnngb 6 29",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "40 9\n50 25\n28 31\n34 15\n29 33\nfupw 37 17\n49 8\nf 18 30\n15 14\nxpz 20 9\n39 18\nacbjs 20 47\n47 25\nln 22 6\n16 33\nsrz 23 16",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23 47\n5 40\n40 45\n29 26\n48 37\nwlaa 45 40\n34 41\ne 29 6\n8 23\ngbzml 15 27\n8 13\nz 7 11\n40 39\nszec 13 47\n15 28\nmpqv 24 13",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "48 47\n21 11\n29 35\n5 44\n43 14\nw 5 48\n41 39\nlwilx 44 30\n14 24\nkxcms 11 32\n45 7\nnfiw 13 42\n34 37\nmq 39 16\n40 18\nwwig 27 20",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "33 45\n11 10\n19 50\n19 8\n8 6\nd 15 30\n7 40\neunkb 33 47\n41 44\nexe 28 26\n34 15\njqfwk 42 43\n6 20\nm 29 19\n6 18\nh 42 32",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\niysc 100 100\n100 100\nfsw 100 100\n100 100\nt 100 100\n100 100\neyx 100 100\n100 100\nxaw 100 100\n100 100\npvu 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\nr 100 100\n100 100\nuis 100 100\n100 100\nung 100 100\n100 100\nawtyk 100 100\n100 100\nh 100 100\n100 100\nm 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 1\n2 1\n100 99\n2 100\n1 1\ng 1 99\n100 1\nmrqt 2 99\n1 1\nsuwb 1 2\n99 100\nw 99 99\n100 2\nwtdjz 1 100\n1 1\nornhb 100 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 100\n2 99\n99 99\n99 99\n1 99\nnwwy 100 2\n99 2\nx 2 1\n1 2\nj 1 2\n99 2\nbls 100 100\n99 1\nhv 2 99\n2 99\nizstx 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}