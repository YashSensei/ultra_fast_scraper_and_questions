{
  "problem_code": "problems",
  "title": "Shortest Regular Bracket",
  "tags": [],
  "text": "EnglishVietnameseLets observe sequences made only of round and square brackets, i.e.characters '( ) [ ]'.A sequence of brackets is regular if it satisfies this inductive definition:'( )' and '[ ]' are regular sequences.If A is regular, then (A) and [A] are regular sequences.If A and B are regular, then AB is regular sequence.For example '( ) ( ) [ ]', '( [ ] ) [ ( ) ]' and '[ ( ( ) ) ] [ ]' are regular, while '(', '] [', '[ ( ]' and '( [ ) ]' are not regular. The sequence of brackets is given.In every step, one bracket is inserted at the beginning or at the end of the sequence (round or square, left or right).Write a program that will, after each step, determine the length of the shortest regular subsequence of consecutive characters that contains the bracket added in that step.InputFirst line contains initial sequence of brackets, whose length is at most 100,000 characters.Next line contains integer N, 1 ≤ N ≤ 100,000, a number of steps.In each of next N lines there are integer A and character C, separated by a single space. If A is zero (0), than character C is inserted at the beginning, and if A is one (1) then C is inserted at the end.OutputIn each of N lines, you should write the length of subsequence after that step. If there is no such subsequence, write number 0.SampleInput:[])\n3\n0 )\n0 (\n0 (Output:0\n2\n6Input:(]\n3\n1 )\n0 )\n0 (Output:0\n0\n2",
  "sample_input": "Input:[])\n3\n0 )\n0 (\n0 (Output:0\n2\n6",
  "sample_output": "Input:(]\n3\n1 )\n0 )\n0 (Output:0\n0\n2",
  "link": "https://www.spoj.com/problems/MBRACKET",
  "scraped_at": "2025-08-17 00:33:41",
  "test_cases": [
    {
      "input": "[])\n3\n0 )\n0 (\n0 (",
      "expected_output": "0\n2\n6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "(]\n3\n1 )\n0 )\n0 (",
      "expected_output": "0\n0\n2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "kdq\n2\n3\n3 s\n3\n9 jr\n4\n5 gzfnn",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "ammmyy\n10\n9\n2 d\n7\n9 iu\n7\n7 wo",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "qqzfnt\n2\n7\n4 ivmzf\n3\n8 vdq\n1\n7 zrtfk",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "ouvsc\n93\n71\n75 gr\n39\n38 g\n27\n57 bmt",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "qyfd\n62\n45\n8 z\n28\n95 awi\n36\n73 ru",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "xziqw\n14\n45\n28 zyu\n49\n98 kqxo\n98\n50 eny",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "vqdo\n69\n38\n60 bjp\n87\n14 ol\n72\n49 fk",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "tug\n72\n18\n27 in\n87\n41 ua\n22\n33 rxmf",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "ssdvty\n6\n5\n22 ehxe\n8\n40 dxtqk\n13\n18 yyoq",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "mavzt\n22\n45\n47 r\n33\n38 fnm\n12\n7 x",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "afwn\n32\n48\n45 r\n6\n16 llbiq\n19\n36 cnkal",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "qjj\n23\n49\n40 sok\n48\n26 i\n43\n50 ncm",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "gnn\n46\n46\n28 b\n9\n42 ys\n36\n29 x",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "sosqmg\n45\n22\n35 wtik\n14\n11 bvlq\n48\n39 eau",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "b\n18\n28\n26 g\n5\n20 zqv\n23\n35 y",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "xcnn\n100\n100\n100 kdk\n100\n100 dqr\n100\n100 vz",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "nnbi\n100\n100\n100 ossh\n100\n100 j\n100\n100 tkz",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "a\n2\n2\n99 yo\n2\n99 g\n99\n1 qxwzv",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}