{
  "problem_code": "problems",
  "title": "(un)Fair Play",
  "tags": [],
  "text": "It is not an easy job to be a coach of a football team. Especially if you do not coach great teams like Ajax, Inter, Dynamo (ok, fill in the name of your dream team), but only a mediocre one like FC Dead Horse, playing in the second league. The season is almost over, only a few matches are left to play. All of sudden the team manager comes to you and tells you bad news: the main sponsor of your club is not happy with your results and decided to stop sponsoring your team, which probably means the end of your club. The sponsor's decision is final and there is no way to change it unless... unless your team miraculously wins the league.The manager left you in deep thought. If you increase the number of practices and offer players a generous bonus for each match, you may be able to win all the remaining matches. Is that enough? You also have to make sure that teams with many points lose against teams with few points so that in the end, your team will have more points than any other team. You know some of the referees and can bribe them to manipulate the result of each match. But first you need to figure out how to manipulate the results and whether it is possible at all.Problem DescriptionThere are N teams numbered 1 through N, your team has the number N. The current number of points of each team and the list of remaining matches are given. Your task is to find out whether it is possible to manipulate each remaining match so that the team N will finish with strictly more points than any other team. In every match, the winning team gets 2 points, the losing team gets 0. If the match ends with a draw, both teams get 1 point.Input file specificationThe input file consists of several blocks. Each block has the following form: The first line contains two numbers N(1<= N <=100) and M(0<= M <=1000). The next line contains N numbers separated by spaces giving the current number of points of teams 1, 2, ..., N respectively. The following M lines describe the remaining matches. Each line corresponds to one match and contains two numbers a and b (a not equal to b) identifying the teams that will play in the given match. The last block is followed by a \"-1\"(without quotes) on a separate line.Output file specificationFor each block in the input file, output YES if you can manipulate the remaining matches so that the team N would win the league, or NO otherwise.ExampleInput file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
  "sample_input": "Input file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FAIRONOT",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "Input file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 2\nsgxm vgj 2\n2 2 8 9 6\n5 2\n9 8\n9 2\n2 8\n10 6\n9 7\n7 3\n8 1\n9 8\n9 3 9 7 5\n7 6\n1 10\n1 4\n9 5\n7\nkesf tlgwmv\nhxg",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\nhquw tx 2\n1 5 9 10 6\n2 9\n10 10\n6 7\n7 2\n6 6\n1 9\n8 5\n3 5\n4 6\n8 7 4 5 4\n3 10\n9 8\n1 3\n2 9\n8\npwvrn lisg\nx",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 9\npguux pvl 5\n9 7 5 9 6\n8 4\n3 2\n10 1\n2 5\n9 6\n1 9\n6 7\n6 1\n2 8\n8 5 8 6 3\n6 6\n3 7\n5 8\n9 10\n7\nvzckuahl prpxuaes\nm",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "66 2\ncuy dgrvv 84\n86 23 23 81 61\n41 91\n11 9\n75 63\n38 49\n71 37\n58 26\n56 71\n54 36\n12 8\n15 5 38 41 98\n19 25\n28 80\n21 66\n36 47\n79\njnau zlxjaf\nmyg",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "33 83\nih qzyzcj 43\n27 93 22 3 51\n35 89\n75 95\n25 71\n6 39\n37 16\n52 90\n76 14\n100 95\n85 100\n50 76 17 70 52\n32 47\n57 21\n3 93\n47 11\n38\nsr oon\nhr",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "90 58\nxhq wn 94\n50 93 38 4 80\n37 19\n20 96\n62 87\n60 36\n10 85\n29 64\n1 65\n59 43\n4 40\n66 93 49 100 69\n84 85\n51 87\n90 42\n12 70\n70\ncugz od\nngcb",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "65 60\nowspx tci 61\n48 14 53 49 33\n63 23\n44 89\n66 22\n73 88\n99 54\n94 36\n74 48\n48 51\n52 93\n94 72 34 41 26\n2 94\n10 49\n38 23\n96 33\n24\ncnaoijln ibnwi\non",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "48 55\nath gsjkz 94\n62 69 66 90 23\n72 76\n52 99\n24 76\n65 86\n53 23\n17 5\n48 14\n3 32\n46 64\n28 88 43 90 17\n75 56\n85 87\n95 91\n89 63\n13\noybcnqh pxqpoed\ncpv",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "251 228\ndexdd beon 66\n461 149 459 301 294\n487 403\n449 447\n364 191\n397 232\n281 386\n491 241\n437 352\n274 122\n135 53\n481 403 282 418 458\n280 160\n135 430\n64 144\n76 226\n298\nnkhk jbwyiowa\nfosl",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "404 455\nkr vyhxxf 195\n449 62 162 95 372\n229 224\n420 483\n273 325\n437 408\n286 194\n128 479\n347 220\n147 428\n143 63\n387 264 405 74 92\n492 189\n297 276\n91 294\n215 335\n267\nvthhvbw idf\nt",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "308 465\ng gxcyoh 192\n153 389 56 129 176\n412 338\n73 284\n56 323\n428 124\n139 143\n421 315\n399 182\n465 83\n67 288\n160 400 69 394 458\n250 468\n144 221\n53 392\n289 461\n194\njqbaok bdq\nfpom",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "348 144\nqbsy vkxkkg 217\n471 93 127 322 461\n243 150\n469 331\n159 312\n302 204\n241 378\n185 227\n354 492\n339 346\n321 241\n456 57 121 334 495\n149 126\n153 435\n358 334\n424 67\n326\nmkrv kseeet\ntx",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "290 141\nqh ul 87\n227 294 91 496 269\n495 489\n266 60\n275 196\n457 410\n104 197\n274 89\n224 214\n472 383\n454 78\n95 286 204 353 168\n244 481\n302 271\n214 112\n72 252\n173\nl iwtl\niz",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "438 60\nibcg fqrjx 195\n292 459 137 189 66\n376 87\n332 391\n194 461\n260 109\n300 439\n477 486\n128 486\n493 69\n471 169\n291 444 277 474 159\n130 420\n57 89\n251 55\n209 122\n146\ng g\nc",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "477 139\nhssjz lfv 344\n481 227 203 309 362\n108 298\n421 497\n397 224\n228 280\n230 218\n379 68\n239 438\n95 348\n235 387\n89 282 472 317 185\n371 374\n270 437\n289 410\n222 214\n446\nskslnr sndlajb\nlujb",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nghqa rbvurp 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\nhqer kzzg\nkgt",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nkylxh lfojm 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\npafby kzgew\ns",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\nl k 1\n999 2 2 2 2\n1 1\n999 999\n999 999\n1 999\n999 2\n999 1\n2 1\n2 1\n999 1000\n1 1000 999 2 999\n2 1\n1000 2\n999 1000\n2 1\n1\nutydtcx pbpipaiw\nopp",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1\nmpdy y 999\n1000 1 2 999 1\n2 1000\n2 999\n999 1000\n999 1\n1 1000\n1 999\n999 1\n1000 1\n999 1000\n1000 1000 1 999 2\n1 1000\n1000 2\n1 1\n999 1000\n999\nlfvr wjrr\nl",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}