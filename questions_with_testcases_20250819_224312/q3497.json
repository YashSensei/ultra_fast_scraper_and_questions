{
  "problem_code": "problems",
  "title": "Sum of Squares with Segment Tree",
  "tags": [],
  "text": "Segment trees are extremely useful. In particular \"Lazy Propagation\" (i.e.see here, for example) allows one to compute sums over a range in O(lg(n)), and update ranges in O(lg(n)) as well. In this problem you will compute something much harder:The sum of squares over a range with range updates of 2 types:increment in a range,set all numbers the same in a range.InputThere will beT(T≤ 25) test cases in the input file. First line of the input contains two positive integers,N(N≤ 100,000) andQ(Q≤ 100,000). The next line containsNintegers, each at most 1000. Each of the nextQlines starts with a number, which indicates the type of operation:2st nd– return the sum of the squares of the numbers with indices in [st,nd] {i.e., fromsttondinclusive} (1 ≤st≤nd≤N).1st nd x– add \"x\" to all numbers with indices in [st,nd] (1 ≤st≤nd≤N, and -1,000 ≤x≤ 1,000).0st nd x– set all numbers with indices in [st,nd] to \"x\" (1 ≤st≤nd≤N, and -1,000 ≤x≤ 1,000).OutputFor each test case output the \"Case:\" in the first line and from the second line output the sum of squares for each operation of type 2. Intermediate overflow will not occur with proper use of 64-bit signed integer.ExampleInput:2\r\n4 5\r\n1 2 3 4\r\n2 1 4\r\n0 3 4 1\r\n2 1 4\r\n1 3 4 1\r\n2 1 4\r\n1 1\r\n1\r\n2 1 1Output:Case 1:\r\n30\r\n7\r\n13\r\nCase 2:\r\n1",
  "sample_input": "Input:2\r\n4 5\r\n1 2 3 4\r\n2 1 4\r\n0 3 4 1\r\n2 1 4\r\n1 3 4 1\r\n2 1 4\r\n1 1\r\n1\r\n2 1 1Output:Case 1:\r\n30\r\n7\r\n13\r\nCase 2:\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SEGSQRSS",
  "scraped_at": "2025-08-17 00:34:28",
  "test_cases": [
    {
      "input": "2\r\n4 5\r\n1 2 3 4\r\n2 1 4\r\n0 3 4 1\r\n2 1 4\r\n1 3 4 1\r\n2 1 4\r\n1 1\r\n1\r\n2 1 1",
      "expected_output": "Case 1:\r\n30\r\n7\r\n13\r\nCase 2:\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n5\n10\n9\n9\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n6\n5\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n9\n6\n3\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n1782786\n48007576\n18964139\n8274572\n7826747\n23030234\n16402203\n67487817\n56204750\n70040728\n6548891\n21395402\n56032430\n43136179",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n68581887\n87213225\n33226951\n29396418\n45085938",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n91932732\n25951896\n82397097\n44848029\n62467769\n67225883\n66453353\n56730164\n57551882\n89003800\n8693410\n3771454\n56558104\n23533462\n20704634\n53988055\n90205653\n74489502",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n87225313\n60383152\n65208857\n63408390\n14519775\n4604388\n20192843\n44761796\n61855637",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n8660888\n73149914\n62834659\n64362745\n63164481\n85745948",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "88\n94456\n45138\n29880\n68659\n5512\n85804\n96485\n61019\n16607\n22115\n6267\n1904\n64871\n74323\n18830\n48933\n16935\n13623\n33463\n23256\n40301\n76930\n43663\n35305\n29998\n4743\n82608\n21526\n51057\n77634\n68434\n64011\n61741\n23662\n1858\n45112\n75544\n4045\n78599\n79941\n77214\n17507\n95323\n89164\n49824\n14969\n68928\n82773\n9872\n83121\n72858\n64808\n96206\n72532\n65836\n95380\n14925\n92278\n38841\n20780\n49923\n70137\n7143\n72235\n86531\n17894\n34248\n45751\n50598\n2765\n32789\n66724\n45889\n50554\n83531\n74442\n50378\n95604\n81785\n78519\n22667\n72304\n42941\n34628\n77364\n93828\n37829\n82898",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "84\n2574\n7048\n53553\n94046\n56936\n87777\n66709\n48836\n38672\n54457\n21936\n27640\n7262\n53911\n54803\n8561\n82369\n91706\n36908\n68024\n14815\n11812\n83972\n16252\n25340\n86146\n74543\n72829\n69742\n91729\n46960\n37936\n13790\n87562\n23620\n55649\n73883\n90119\n86161\n6194\n20352\n26716\n69032\n19492\n23777\n30352\n34732\n65705\n96305\n30152\n67917\n78200\n92587\n29750\n32269\n58461\n10054\n87238\n41643\n5375\n70185\n99246\n83384\n23667\n12669\n53817\n35786\n97320\n64053\n99339\n50044\n38433\n77679\n94259\n97733\n2945\n62673\n52610\n32272\n34338\n79555\n92994\n20613\n34500",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "98\n46636\n28629\n75328\n50405\n80765\n85202\n2179\n90231\n72465\n630\n95947\n17003\n51364\n2864\n35374\n75312\n38318\n10617\n59628\n81123\n72046\n69244\n2809\n3447\n86392\n22288\n67737\n39735\n44668\n67999\n95012\n38996\n78952\n86001\n67934\n43700\n78173\n4226\n6418\n58981\n27472\n87950\n45306\n69925\n34768\n85036\n86427\n24042\n36281\n4404\n9415\n3655\n32084\n70659\n82960\n92407\n49444\n99673\n33891\n10065\n36290\n56450\n39290\n62981\n24122\n45982\n90663\n53913\n66344\n99036\n61425\n59636\n4277\n63958\n52806\n37670\n73437\n44479\n86087\n26322\n8778\n97133\n60928\n27992\n26201\n11958\n36909\n1432\n52443\n62131\n25455\n57564\n89911\n20657\n31950\n52554\n88493\n31723",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "54\n63853\n47866\n7387\n58834\n42722\n19502\n65749\n73869\n93403\n54519\n61612\n10531\n74605\n88659\n47088\n48797\n95475\n15564\n36560\n88492\n20392\n44310\n191\n42415\n93233\n1991\n24748\n47407\n87346\n79140\n34381\n32139\n38372\n51241\n96493\n85153\n31428\n60458\n19302\n97030\n25274\n46291\n55027\n20354\n52278\n29925\n36289\n52153\n51897\n65467\n98033\n24427\n61175\n9048",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "87\n60659\n3099\n28958\n21665\n15288\n8417\n25753\n95060\n51136\n89944\n33518\n91599\n12446\n9487\n69089\n8274\n96836\n29058\n1384\n40564\n84179\n33926\n18307\n81694\n17197\n67467\n55884\n14448\n55028\n38591\n9043\n9265\n71870\n58371\n2439\n1170\n88825\n89943\n80259\n85145\n7677\n40442\n75672\n5908\n63252\n35167\n21895\n91101\n48794\n57430\n29407\n38162\n43031\n42091\n22849\n3361\n24051\n27651\n48660\n6279\n47465\n2065\n90758\n67378\n75714\n27564\n62726\n6966\n74145\n77021\n94681\n62742\n61067\n97512\n95006\n51865\n80153\n13996\n65140\n28623\n36905\n39767\n48622\n58034\n81689\n99758\n79269",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n53043\n45539\n2137\n24490\n37257\n26385\n73901\n45234\n92219\n25278\n63979\n88017\n8817\n21090\n62574\n79854\n61144\n51594\n69827\n69716\n86473\n28422\n25792\n3569\n97261\n12939\n86102\n86177\n61621\n33920",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "98\n22454\n76801\n85912\n26530\n44586\n61796\n89384\n14736\n86916\n88741\n59355\n66919\n85232\n96106\n98065\n81596\n54923\n31905\n1980\n95660\n222\n44856\n18531\n7041\n95728\n62049\n44022\n48353\n46323\n10040\n22389\n82444\n86394\n38358\n68266\n32192\n56227\n87726\n8766\n15114\n8506\n19312\n87142\n58637\n62614\n15513\n97145\n76254\n57165\n6686\n61271\n15766\n64133\n53530\n30093\n53127\n51952\n6883\n47992\n6983\n13112\n16752\n34412\n18583\n12745\n49898\n20876\n60294\n81521\n31014\n90946\n7668\n98880\n37466\n78144\n94001\n63920\n77005\n44227\n56356\n3817\n88677\n57458\n17055\n86519\n21457\n67897\n89769\n55649\n55616\n27601\n24844\n65677\n58224\n25867\n15340\n95904\n7823",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n61992382\n93430232\n73425274\n36550327\n46560701\n81619391\n71061001\n1898806\n21056902\n40131890\n98177796\n72728449\n93802545\n44186047\n32256278\n77888616\n83226675\n99027369\n71754490\n21681150\n67154594\n85285385\n57475275\n29112907\n66141856\n19563668\n40299237\n54357263\n62193563\n91824703\n23311515\n2228079\n20638532\n66866729\n21091071\n94698180\n12822035\n91979872\n58131588\n78558090\n32243545\n89571216\n73394048\n13551667\n6458331\n7531869\n46097613\n38897905\n37921180\n1145591\n14262564\n41408762\n28851019\n98119751\n40185670\n79901830\n27459340\n88708876\n96065033\n92941992\n79183491\n56515451\n91214238\n75245996\n67764157\n72982433\n38323720\n6355596\n69312359\n43659438\n26129761\n59063917\n93863423\n29096729\n70937052\n38216628\n39154418\n95649062\n72199517\n80556030\n48027290\n83625060\n18590416\n94591190\n9010586\n18352481\n28509888\n89755590\n49692292\n56990661\n27119356\n82526898\n45696526\n75860333\n80459925\n7797345\n1642902\n25652893\n60939424\n36778546",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n78117069\n40818128\n61690458\n77253889\n50342007\n92702148\n42879641\n2521853\n13893171\n10609405\n91792146\n64331036\n51364208\n28377868\n69665514\n43949708\n11400566\n91035000\n69517579\n89997762\n34426891\n79571177\n65688453\n7079273\n54129369\n59266676\n9805708\n33088905\n56189451\n47791371\n71493100\n90380825\n54230303\n35434717\n31748265\n3407446\n6841447\n13096974\n71306574\n54110950\n25956851\n46986665\n91838606\n7414054\n7418351\n82489656\n45496673\n8103653\n76433230\n6078887\n82570765\n77153001\n59087941\n92798369\n2425933\n22409342\n36716623\n56286641\n2306328\n3697244\n58687030\n6344856\n76526437\n65964540\n66817108\n95476234\n84789178\n90320094\n23411210\n30360938\n45825087\n49882611\n6725637\n78937815\n77926241\n61049224\n63846121\n22879254\n19720953\n8727241\n58810093\n67980226\n67541001\n18909147\n97450740\n63925388\n26169948\n50910538\n12207499\n21724294\n86013521\n46762943\n27348659\n95467151\n14784705\n87079822\n51268479\n62887872\n38988653\n43219931",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "100\n35583891\n83406783\n1\n100000000\n100000000\n44904691\n100000000\n1\n100000000\n73406756\n1\n8378289\n1\n1\n100000000\n1\n100000000\n100000000\n100000000\n1\n1\n100000000\n100000000\n100000000\n100000000\n100000000\n95345023\n47772536\n100000000\n100000000\n98278905\n1\n1\n100000000\n1\n27086335\n1\n100000000\n100000000\n100000000\n1\n18682123\n100000000\n100000000\n1\n100000000\n91998828\n1\n100000000\n1\n1\n72743465\n5236065\n78108019\n100000000\n1\n100000000\n1\n29320265\n1\n60149358\n1\n51361606\n74227559\n1\n20683934\n100000000\n100000000\n1\n60611472\n1\n80047497\n8113884\n100000000\n36407570\n100000000\n100000000\n18291109\n42210553\n100000000\n100000000\n100000000\n67781164\n1\n90984606\n1\n100000000\n1\n33203960\n74577496\n100000000\n100000000\n1\n18146821\n12259710\n100000000\n100000000\n100000000\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 100)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}