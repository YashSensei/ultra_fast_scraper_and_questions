{
  "problem_code": "problems",
  "title": "Highschool Homework",
  "tags": [],
  "text": "Hugo had quite a bad day today. His favourite high school subject, mathematics, was taught by his least liked substitute teacher - he always gave out an abnormally large amount of homework. Today was no different.The teacher wroteNnumbers on the board, and after a long thoughtful pause he told the class with a grin: \"Well then, kids. For today's homework you will do this harmless exercise. As you can see, I've written quite a few numbers on the board, and your task is to find which two of them have the greatest product. Hm, now that I think about it, that would be too trivial. So you will also have to find which pair of numbers has the greatest quotient. Well, and now that we're at it, why don't you find the pair with the smallest quotient, too. And at that point you might as well find the pair with the smallest product. That should keep you busy for today's evening!\".Sigh.How could someone even come up with such a boring, time-consuming and impractical task. If only there was someone who would help Hugo and do it for him.InputThe first line of input contains the number1 ≤ T ≤ 15: the number of test cases.Tcases follow. The first line of each case contains the number2 ≤ N ≤ 105: how many numbers the teacher wrote on the board. The second line containsNintegers; their absolute value will be in the range[1, 106](inclusive). In particular, notice that none of them are equal to zero. You may assume that in any input file, the sum ofNacross all test cases does not exceed3*105.OutputFor each case, output five lines. The first one contains the number of the case x in the format \"Case x:\", starting at 1.Then output four lines, each containing two integers from the input (let's call themxandy). They need to have the following properties (in this order):x * yis the greatest possiblex * yis the lowest possiblex / yis the greatest possiblex / yis the lowest possibleIf there are multiple pairs of integers which fulfil the criteria, output the one with the lowestx.x, ymay be equal, but in that case their value has to appear at least twice in the input. All four lines are independent, that is the same integer from the input may be used across multiple lines. A numberAis said to be greater thanBifA > Band lower thanBifA < B.ExampleInput:1\r\n3\r\n5 -7 10Output:Case 1:\r\n5 10\r\n-7 10\r\n10 5\r\n10 -7",
  "sample_input": "Input:1\r\n3\r\n5 -7 10Output:Case 1:\r\n5 10\r\n-7 10\r\n10 5\r\n10 -7",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HSHW",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "1\r\n3\r\n5 -7 10",
      "expected_output": "Case 1:\r\n5 10\r\n-7 10\r\n10 5\r\n10 -7",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n8\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n9\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n2\n4\n4\n10\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "10\n19103362\n62104417\n79342018\n54276782\n93551040\n55664333\n85224154\n51990760\n88095694\n84858176",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n95458005\n4270076\n68552330\n71451462\n99908008\n9237493\n232246\n36931108\n83158499",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n26404822\n29541385\n84063872\n19354791\n72961026\n6998537\n95951423",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n65874755\n42600143\n14281992\n73397511\n10869156\n23240825\n80580312\n34783542\n56679597\n39277115\n25929291\n70821340",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n22401566\n690706\n47222620\n37173817\n88312506\n9251589\n36586682\n75363256\n12681243\n45698143\n67429106\n70579128\n35375254\n30562475\n21457737\n50823308\n99775773",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "39\n1729\n87350\n94191\n12296\n30472\n64288\n78258\n43998\n34189\n5188\n36598\n87182\n42269\n13374\n4983\n30367\n9456\n42141\n892\n2064\n65616\n55341\n97378\n81249\n76848\n4115\n41700\n29812\n96321\n43688\n21719\n51105\n16312\n15973\n84626\n38227\n84532\n48743\n43952",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n37943\n75395\n68341\n32392\n89834\n39540\n90716\n71724\n38223\n6582\n67849\n27983\n68857\n61153\n82172\n11795\n2843\n30689\n38297\n65392\n34769\n17432\n89603\n89463\n29578\n99831\n96278\n7713\n40252\n90709\n50819\n86736\n89739\n89373\n95799\n72385\n98905\n8486\n4473\n66996\n96290\n19119\n77703\n26689\n7992",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "64\n22845\n79286\n2764\n43152\n18713\n38122\n35621\n22495\n39787\n93800\n81366\n77012\n25614\n5268\n68356\n66095\n20712\n39168\n26744\n32592\n78681\n27364\n64353\n22252\n56372\n96819\n12726\n57746\n37745\n197\n85351\n95384\n33491\n80852\n61971\n47186\n96726\n19549\n64686\n21485\n47946\n50864\n61871\n98878\n14573\n48082\n20305\n83331\n96298\n63535\n56141\n33241\n60769\n94027\n15276\n44865\n78713\n527\n6946\n61079\n92185\n68905\n61709\n33949",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n92040\n56740\n39422\n71338\n38538\n30217\n36877\n50479\n87992\n57985\n47361\n14148\n75249\n40922\n32022\n33381\n30803\n63990\n95828\n31149\n60791\n50016\n18726\n9335",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n96734\n18966\n46940\n14598\n32922\n29491\n76399\n52462\n88360\n55665\n48660\n69769\n82042\n20782\n32173\n97766\n53058\n61011\n84056\n34546\n3169\n51717\n93570\n35236\n23004\n5185\n45162\n55661\n84917\n68095\n20424\n6369\n76232\n90970\n77512\n47066\n65551\n54885\n61159\n48383\n88923\n82890\n4086\n56195\n83370",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n29726\n21259\n98279\n35945\n35104\n84419\n43915\n93428\n81523\n13514\n78050\n30666\n18092\n37085\n75582\n82564\n5722\n66328\n2833\n7462\n54479\n34235\n33178\n80425\n81759\n42207\n29717\n54054\n96381\n4452\n5575\n3172\n62500\n4836\n40127",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "74\n19923\n45417\n70462\n74158\n18357\n83190\n41924\n42085\n94404\n79348\n60267\n96571\n13961\n91073\n97539\n44056\n18362\n37098\n4494\n51100\n6135\n84827\n3294\n70247\n87881\n30331\n16992\n3345\n54682\n78890\n53073\n96449\n36745\n43157\n83946\n14600\n50820\n65950\n54755\n62401\n74713\n1008\n76141\n67664\n41834\n44681\n65932\n9498\n80333\n96344\n95957\n13990\n17654\n73065\n12069\n78415\n10472\n69375\n62993\n88202\n86077\n54588\n77737\n86292\n76320\n29954\n25795\n45941\n53581\n53513\n27889\n47629\n69153\n40039",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n58170996\n98302137\n94767503\n14665231\n1118087\n42512419\n46011873\n67817074\n83748581\n83618473\n10092340\n94850686\n622919\n8304073\n18366585\n28578797\n42493123\n29976455\n15194618\n98832613\n16142963\n9680366\n45932784\n94193172\n1422202\n68354208\n72706741\n16748341\n70555825\n58332407\n71217872\n64964999\n43464033\n35294829\n66210808\n29390632\n56101180\n53834533\n24596329\n94381220\n8233518\n11351387\n53447982\n36810618\n77765604\n61257632\n28497842\n67461968\n49610956\n31212034\n97299136\n79280514\n8611486\n17401905\n29399538\n81049777\n1699677\n88526021\n83693980\n58713567\n94065236\n56785197\n45605325\n32392564\n41880241\n60688216\n87517959\n59148245\n84790271\n53176567\n42694610\n58528229\n50260314\n63097445\n98587973\n6940505\n78407904\n48402746\n70333396\n74060353\n57785944\n22098195\n60362908\n37760076\n11816361\n33009788\n12653349\n74792296\n15508838\n48001086\n33819326\n7187241\n58381157\n49040420\n92682789\n77973766\n84933461\n30243037\n61278902\n72002612\n82923446\n60003862\n90224126\n55043171\n42695299",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n69687976\n97237395\n52503381\n75534727\n43341391\n90667070\n35788702\n81129709\n5062746\n89046235\n5605609\n48976150\n3718122\n67294964\n43543579\n9218981\n6381985\n80811842\n9796069\n94618028\n72702081\n31022441\n23189832\n83712754\n56638073\n23387579\n32608885\n96925703\n93567805\n39223239\n42514709\n62026654\n52680689\n27564778\n71092040\n14031534\n18324811\n69307673\n9566760\n96602417\n35823330\n14528731\n7561594\n70453018\n69935920\n63530714\n44681368\n84203340\n7801517\n86435880\n97930156\n82363443\n13700664\n92354781\n90106469\n96065667\n72260781\n87936698\n23177339\n61501738\n72600760\n40404179\n58821428\n28243032\n34072870\n96965046\n15478513\n59324164\n65893225\n14628055\n84562395\n46273280\n38396457\n31379001\n31006451\n48273424\n96305564\n90759500\n49693104\n81606376\n54027513\n55699274\n60877718\n5690697\n62784847\n36915934\n70023199\n87092755\n83297037\n90248928\n10112856\n53736889\n24314302\n30542819\n65938045\n36829140\n45282009\n11753273\n9053877\n59634294\n11026515\n97506062\n37568761\n32730524\n72821539",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n1\n100000000\n1\n1\n86799308\n52965884\n100000000\n1\n100000000\n100000000\n42851623\n100000000\n19580652\n1\n36581956\n10920174\n1\n100000000\n100000000\n1\n100000000\n19373582\n1253339\n60587965\n27805043\n74872641\n100000000\n100000000\n65994588\n85729880\n1\n1\n1\n1\n8373612\n87435062\n100000000\n1\n27511326\n100000000\n1\n1\n100000000\n92948861\n30536805\n100000000\n100000000\n1\n1\n1\n1\n100000000\n43811284\n1\n1\n1\n1\n1\n64860244\n8397279\n78067228\n100000000\n100000000\n100000000\n1\n16794587\n1\n100000000\n55733580\n100000000\n100000000\n1\n55710628\n1\n100000000\n42698729\n1\n100000000\n56233523\n1075247\n93900544\n1\n16711170\n45679397\n100000000\n100000000\n72492564\n30467190\n1\n100000000\n17202539\n1\n100000000\n100000000\n100000000\n46526433\n64619920\n1\n1\n1\n100000000\n100000000\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "2\n85638292\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}