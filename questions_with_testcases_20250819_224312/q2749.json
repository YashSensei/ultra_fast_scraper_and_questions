{
  "problem_code": "problems",
  "title": "Bipartite Permutation (Hard)",
  "tags": [],
  "text": "Given a positive integerN, consider any permutation of all the numbers from1toN. It is required to create two partitions,P1andP2, from these numbers such that|sum(P1) – sum(P2)|is minimum, wheresum(X)denotes the summation of all the numbers in partitionX. A partition is defined to be a non-empty subset of the permutation. In other words, find the minimum absolute difference between the summation of all the numbers in each partition. Note that you cannot leave out any number, every number from1toNmust be part of exactly one partition.To add a little bit more of spice, also find the lexicographically smallest partitionP1such that|sum(P1) – sum(P2)|is minimum. To make your life easier, you don’t need to output the entire sequence, only the hash of the sequence as computed by the function below would suffice.def sequence_hash(sequence, B, M):\r\n   result = 0\r\n   for number in sequence:\r\n       result = (result * B + number) % M\r\n\r\n   return resultInputThe first line contains an integerT, denoting the number of test cases. Each of the next subsequentTlines contain three positive integers,N,BandM.Constraints1 ≤ T ≤ 10002 ≤ N ≤ 109N < B ≤ 1091 ≤ M ≤ 109OutputFor each test case, first print the case number followed by the minimum absolute difference and the hash of the lexicographically smallest partitionP1.ExampleInput:12\r\n2 10 1000000000\r\n3 10 1000000000\r\n4 10 1000000000\r\n5 10 1000000000\r\n6 10 1000000000\r\n7 10 1000000000\r\n8 10 1000000000\r\n9 10 1000000000\r\n1000 1000000000 1000000\r\n1000000 1003001 998244353\r\n123456789 987654321 666666667\r\n444444444 666666666 888888888Output:Case 1: 1 1\r\nCase 2: 0 12\r\nCase 3: 0 14\r\nCase 4: 1 124\r\nCase 5: 1 1234\r\nCase 6: 0 1247\r\nCase 7: 0 12348\r\nCase 8: 1 123457\r\nCase 9: 0 1000\r\nCase 10: 0 553178755\r\nCase 11: 1 214459309\r\nCase 12: 0 557434257ChallengeDon't like challenges? Try the easier version here:Bipartite Permutation",
  "sample_input": "def sequence_hash(sequence, B, M):\r\n   result = 0\r\n   for number in sequence:\r\n       result = (result * B + number) % M\r\n\r\n   return result",
  "sample_output": "Input:12\r\n2 10 1000000000\r\n3 10 1000000000\r\n4 10 1000000000\r\n5 10 1000000000\r\n6 10 1000000000\r\n7 10 1000000000\r\n8 10 1000000000\r\n9 10 1000000000\r\n1000 1000000000 1000000\r\n1000000 1003001 998244353\r\n123456789 987654321 666666667\r\n444444444 666666666 888888888Output:Case 1: 1 1\r\nCase 2: 0 12\r\nCase 3: 0 14\r\nCase 4: 1 124\r\nCase 5: 1 1234\r\nCase 6: 0 1247\r\nCase 7: 0 12348\r\nCase 8: 1 123457\r\nCase 9: 0 1000\r\nCase 10: 0 553178755\r\nCase 11: 1 214459309\r\nCase 12: 0 557434257",
  "link": "https://www.spoj.com/problems/BPM2",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "def sequence_hash(sequence, B, M):\r\n   result = 0\r\n   for number in sequence:\r\n       result = (result * B + number) % M\r\n\r\n   return result",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "12\r\n2 10 1000000000\r\n3 10 1000000000\r\n4 10 1000000000\r\n5 10 1000000000\r\n6 10 1000000000\r\n7 10 1000000000\r\n8 10 1000000000\r\n9 10 1000000000\r\n1000 1000000000 1000000\r\n1000000 1003001 998244353\r\n123456789 987654321 666666667\r\n444444444 666666666 888888888",
      "expected_output": "Case 1: 1 1\r\nCase 2: 0 12\r\nCase 3: 0 14\r\nCase 4: 1 124\r\nCase 5: 1 1234\r\nCase 6: 0 1247\r\nCase 7: 0 12348\r\nCase 8: 1 123457\r\nCase 9: 0 1000\r\nCase 10: 0 553178755\r\nCase 11: 1 214459309\r\nCase 12: 0 557434257",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "h bjspghiokqqlrlyvcnxz gx n\n5\nhvfl bgsjq 3\nwjcd y y rtuft\ny zyqbr wfqbzi pahjn jh pbih lczca tyz olr\ny s",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "ip xsaq p qcy\n10\nqpf de 1\nw wn ht ttw\ni my mvu cwyfj kdmq f fvjbesm q kk\nd g",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "ld dxdds ekej kpg\n7\nhtjem ujp 9\nkmwq iknsh bzsxj wmjwf\nbdi wnxue vsjeoi ynur kp sngsh bzal k ncvbc\nz cswmf",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "r vomcytjuonb v i\n83\nw j 6\njvupr gt bx a\nlptam yvkrz pivxxyu l ecyi tjxg kycp fv ndxej\nmihb rxaxj",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "jk ghqheerjymshmddb cjnvt tj\n71\nbwfvcj djm 17\nkehts pif kr sai\nbbool fys irxwtif hhy a hkz qcvjt ublfx x\nmgz uqaa",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "jrvtg tgrzdsvtzumleedyvvwne iyn xxhs\n33\nb dvo 60\ncum nbr nkc yf\nysn wyd yxhnkon qgazd uzo twph jghtce m w\nahs dpay",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "bk yhlsftylcr uowbv qq\n21\nm vd 28\nak yfh njraz uljpot\ny ikfb wuei ui uyf qmfaz vrsuzwf jjc rjdqc\nqxkdgp lsfpdg",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "cem giufjmdolbhqvkzrabji iwcda btsxz\n95\ndflnc dizk 44\nbs m rr a\nogo i jxl fga cgok gc qaaubzk diua zbdyb\nv giabco",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "x dvtqhufftfolruetzeb wdyha h\n29\nzd e 43\ndkf tej ed kyonj\ni lwspc ot fs jb hfod wtxpuy yz lhozq\nbv ncyib",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "aovsn o ui ngpsq\n11\nwmwpop zus 48\nd okjd c gsqbvtp\ns nauzs dig jmsvl sj fwb y ugdf dyzkg\nl w",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "cdqnq rlxozifspsnzz almxa zl\n30\nnbckr o 38\nvvsbz nrpxqr uwi goviwfu\nq lf bj px ffez shlrg gxtnv llqh infad\nkcqk c",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "t zpfddwz bnlp rl\n41\nw ljx 39\nycjzp pvzxxt jermg omjpicisn\nvo yg pwv dkomo kt glkz khyend iddws yn\nha qhpcza",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "lhxq jlgeooutvvwmvtwfllajrc ejwk rc\n8\ngk g 23\nxj dzavmf ser rvf\ny bonvb sbnbcw lov nbfa f y x noeg\na yydkqz",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "d tyhjpgxgoqh uv jh\n16\ny gih 53\nacstu tijp d wglxvp\nc ceqje upaepr u nop xfny ufempph cd tvq\nxmrnvw gnyv",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "ewuk pstoneh ybzy azq\n54\nzbwyjl wn 25\nr v iq libzgi\nkwv ysna yu zrw alk ij iwj ybzp tzntb\nj uwbq",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "hel ioahsaxwyshctiqjmuj a dc\n109\ne mnk 109\ny ywfc vx e\nisvm mmrjv grf isimw u dggv b vjaq rucul\ngykk qqbx",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ujl k utl b\n109\ni wdrvn 109\nee tz d ixsw\nm h ltmcjb zvlqn yr u upp tofw vpc\nelfarf f",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "cl cohgosmk k m\n2\nfsiv h 2\ne qq wzzb hdryep\na ogzes skwpp wpjp alcq ylo kxztfi puq mteyg\nlkkmx ee",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}