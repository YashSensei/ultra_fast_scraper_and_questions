{
  "problem_code": "problems",
  "title": "Alphabet Soup",
  "tags": [],
  "text": "Peter is having lunch at home. Unfortunately for him, today’s meal is soup. As Peter’s mother is aware that he doesn’t like it very much, she has cooked a special soup using pasta pieces shaped like letters from the alphabet, numbers and other characters. She has a special knife with which she can prepare an unlimited supply of pasta pieces that may come inSdifferent forms. The soup always hasPpasta pieces in it, and is so thick that the pieces never move.Despite her efforts, Peter is still not happy with today’s menu and asks how many days in his life he will have to eat soup. His mother promises him that she will prepare a different soup  every day, and that on no day will the dish contain the same shapes in all positions as any soup dish previously served. However, the numberPof pasta pieces, as well as the positions in which pieces float, will remain the same every day. Peter is not easily fooled (or so he thinks), and he cleverly realizes that this can still make him eat soup for ages. In an attempt to reduce the number of configurations, he tells his mother he will not accept any dish which can be obtained by rotating one of the configurations previously seen.Figure 1: Top view of Peter’s dishConsider the dish as a circle of radius 2 centered at the origin. All the symbols will be floating in the soup at a given angle (in millidegrees) at distance 1 from the origin. Two plates are considered equal if you can perform a rotation of one of the dishes about its center so that the positions of the symbols, as well as the symbols themselves, are the same in both.Your program will be given the number of possible symbols Peter’s mother has available, and the angles determining the location of each of the pasta pieces (measured clockwise in millidegrees). Write a program that returns the number of possible plates Peter’s mother can prepare. As this number can be very large,output the number modulo 100,000,007, which is prime.InputThe first line of input in each test case contains two numbers:S(2 ≤S≤ 1,000), the number of symbols Peter’s mother can use; andP(P> 0), the number of pasta pieces floating in the soup. Each of the nextPlines contains the angleA(0 ≤A< 360,000) of one of thePpieces (measured clockwise in millidegrees). All angles will be different.Different tests cases are separated by a blank line. After the last test case there is a line withS=P= −1.OutputFor each test case output a single integer in a line by itself, the number of different plates Peter’s mother can cook modulo 100,000,007.ExampleInput:2 4\r\n0\r\n90000\r\n180000\r\n270000\r\n\r\n100 5\r\n0\r\n45000\r\n90000\r\n180000\r\n270000\r\n\r\n-1 -1Output:6\r\n99999307Problem setter: Javier Gómez Serrano",
  "sample_input": "Input:2 4\r\n0\r\n90000\r\n180000\r\n270000\r\n\r\n100 5\r\n0\r\n45000\r\n90000\r\n180000\r\n270000\r\n\r\n-1 -1Output:6\r\n99999307",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ALPHSOUP",
  "scraped_at": "2025-08-17 00:33:50",
  "test_cases": [
    {
      "input": "2 4\r\n0\r\n90000\r\n180000\r\n270000\r\n\r\n100 5\r\n0\r\n45000\r\n90000\r\n180000\r\n270000\r\n\r\n-1 -1",
      "expected_output": "6\r\n99999307",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1\n2\n9\n3\n2\n8 1\n10\n8\n7\n6\n3\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5\n10\n5\n3\n3\n9 1\n9\n1\n6\n1\n7\n9 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 6\n7\n2\n8\n3\n1 1\n2\n9\n1\n5\n7\n7 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "95 91\n67\n49\n49\n97\n56 68\n66\n85\n90\n53\n77\n50 20",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "87 79\n69\n9\n28\n73\n35 25\n3\n90\n35\n24\n15\n27 82",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "31 23\n25\n99\n48\n67\n46 22\n28\n39\n21\n44\n79\n98 8",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "99 76\n11\n17\n24\n35\n38 10\n24\n16\n49\n50\n86\n90 30",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "93 26\n79\n57\n2\n11\n32 2\n39\n44\n100\n96\n57\n84 22",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "136 184\n219\n113\n97\n52\n148 451\n207\n337\n344\n412\n324\n363 92",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "387 107\n180\n55\n109\n110\n456 344\n173\n85\n460\n203\n84\n111 420",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "151 459\n398\n249\n290\n307\n67 488\n206\n116\n209\n214\n239\n362 216",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "154 156\n149\n82\n287\n435\n344 205\n87\n180\n147\n185\n303\n109 473",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "90 297\n129\n198\n400\n222\n156 235\n310\n73\n359\n306\n307\n195 221",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "182 289\n108\n154\n444\n102\n171 148\n266\n493\n195\n259\n69\n217 150",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "89 63\n231\n244\n330\n376\n443 155\n430\n150\n158\n300\n434\n401 442",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000\n1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000\n1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1000\n1\n2\n1\n1 1\n999\n1000\n1000\n1\n2\n999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n2\n1\n999\n1\n1 2\n1\n1\n1\n1\n999\n1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}