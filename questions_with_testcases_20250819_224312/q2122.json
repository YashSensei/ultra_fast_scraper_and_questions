{
  "problem_code": "problems",
  "title": "Regular Convex Polygon",
  "tags": [],
  "text": "A regular convex polygon is a polygon where each side has the same length, and all interior angles are equal and less than 180 degrees. A square, for example, is a regular convex polygon. You are given three points which are vertices of a regular convex polygonR; can you determine the minimum number of vertices thatRmust have?InputEach test case consists of three lines. Lineiconsists of two floating point valuesxiandyi(−104≤x1,y1≤ 104) where (xi,yi) are the coordinates of a vertex ofR. The coordinates are given with a precision of 10−6, i.e., they differ from the exact coordinates by at most 10−6. You may assume that for each test case the Euclidean distance between any two given points is at least 1, andRhas at most 1000 vertices. The input will finish with a line containing the wordEND.OutputFor each test case, print one line with the minimum number of vertices thatRmust have.Sample Input-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nENDSample Output3\r\n4Problem setter: Adrian Kuegel",
  "sample_input": "-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nEND",
  "sample_output": "3\r\n4",
  "link": "https://www.spoj.com/problems/REGPOLYG",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nEND",
      "expected_output": "3\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1\n5 1\n1 6\n1 6\n4 7\n3 8\nvzo",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8\n8 6\n9 6\n10 2\n2 7\n3 3\nv",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4\n3 2\n1 10\n6 7\n4 7\n3 6\nd",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "84 37\n66 92\n33 43\n50 89\n51 26\n49 34\neu",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "20 60\n25 68\n90 13\n37 72\n11 63\n19 33\ntzft",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "6 32\n45 23\n5 50\n33 32\n42 33\n84 63\npgw",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 32\n95 5\n67 43\n65 69\n91 32\n68 9\nysk",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 43\n31 58\n98 77\n6 19\n96 9\n67 65\nnbq",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "264 259\n464 199\n232 210\n202 483\n222 402\n224 471\nw",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "192 269\n68 499\n292 86\n369 134\n448 239\n422 400\nolryp",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "105 361\n415 97\n90 111\n430 370\n320 199\n368 188\npeqryy",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "466 438\n167 164\n211 254\n135 273\n461 207\n469 407\nm",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "112 164\n290 107\n426 272\n367 214\n386 378\n414 451\nzpwa",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "92 309\n97 378\n68 88\n240 52\n428 200\n400 203\nc",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "288 160\n357 309\n223 100\n202 476\n186 110\n474 407\ncbwjnz",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\nioaij",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\nr",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 999\n1 1000\n1000 1000\n999 999\n1 2\nbdfh",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n2 2\n999 1\n999 1\n2 999\n1000 1\nbmjr",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}