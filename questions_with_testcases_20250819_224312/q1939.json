{
  "problem_code": "problems",
  "title": "Fire Extinguishers",
  "tags": [],
  "text": "Byteasar has had a new palace built. It consists of N chambers and N-1 corridors connecting them. Each corridor connects exactly two chambers. The rooms are numbered from 1 to N. There is only a single entrance to the palace, which leads to chamber number 1. For each chamber there is exactly one route leading to it from the entrance, without turning back on the way. In other words, the chambers and the corridors form atree- a connected acyclic graph.The fire marshal who is to approve the building demands placing fire extinguishers inside. The following are his exact requirements:The fire extinguishers should be placed in (some) chambers, and one chamber may store any number of extinguishers.Each chamber has to be assigned one fire extinguisher, though it may be stored in another chamber.Each fire extinguisher can be assigned to at most S different chambers.For each room its assigned extinguisher is within the range of K corridors.Byteasar has a week spot for lavish palaces, so it is no surprise he has very little money now, right after completion of another splendid palace. Therefore he is interested in the minimum number of fire extinguishers sufficient for satisfying fire marshal's demands.InputThe first line of the standard input contains three integers N, S and K separated by single spaces, 1 ≤ N ≤ 100000, 1 ≤ S ≤ N, 1 ≤ K ≤ 20. Each of the following N-1 lines holds two integers separated by a single space. Line number i+1 contains the numbers XiYidenoting the corridor connecting chambers number Xiand Yi.OutputThe first and only line of the standard output is to hold one integer - the minimum number of fire extinguishers that have to be installed in palace.ExampleFor the input data:12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8the correct result is:4",
  "sample_input": "12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8",
  "sample_output": "4",
  "link": "https://www.spoj.com/problems/STC01",
  "scraped_at": "2025-08-17 00:34:00",
  "test_cases": [
    {
      "input": "12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 1 5\n1 5\n1 10\n4 3\n8 5\n10 7\n9 7\n8 5\n1 1\n8 5\n2 6\n5 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 1 7\n2 6\n10 10\n8 1\n1 7\n5 9\n4 7\n3 3\n2 7\n5 1\n7 10\n7 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 3\n9 10\n3 4\n8 7\n1 6\n10 1\n2 1\n3 3\n7 8\n10 4\n6 5\n3 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 1 13\n70 60\n74 95\n19 9\n81 31\n59 62\n77 1\n33 98\n38 95\n91 50\n17 54\n79 21",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 95 94\n56 79\n65 21\n4 93\n80 49\n84 56\n32 76\n88 78\n26 44\n16 82\n83 34\n71 64",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "40 53 36\n22 54\n7 5\n70 1\n85 68\n63 31\n8 42\n26 14\n61 54\n18 78\n99 92\n77 44",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 8 87\n86 31\n44 23\n36 9\n67 54\n66 41\n5 8\n56 45\n32 79\n97 4\n65 28\n65 9",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 43 63\n70 53\n68 66\n65 90\n41 22\n56 49\n25 47\n81 65\n74 95\n19 92\n65 39\n61 7",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "15030 14978 31433\n26276 10566\n41509 42063\n17155 6806\n25145 39595\n9178 46362\n18333 5752\n6879 36297\n43671 12354\n5944 33238\n27911 43043\n21176 32310",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "24460 11859 41542\n32477 10736\n49684 32608\n8460 41655\n36742 36456\n35070 14400\n5164 11170\n9668 35261\n46495 25704\n26814 42135\n42417 18855\n20155 21941",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "37675 39507 45721\n18487 39882\n49998 15191\n35393 26738\n23321 47387\n14911 28657\n37260 12712\n45094 34507\n5855 21353\n13864 25914\n33716 20391\n34900 21790",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "34553 9712 8175\n10206 11812\n49053 25941\n29288 23850\n20027 20487\n32804 25713\n21143 34617\n18988 24922\n46547 18728\n27392 31375\n40857 34851\n12813 43216",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "36831 16900 32492\n32206 6414\n18635 19780\n12773 34322\n45674 47078\n11966 9106\n12194 35182\n16487 37439\n41595 9560\n27720 11305\n13209 39154\n47496 12194",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5835 19468 11227\n44225 49620\n8276 26260\n11315 32474\n45201 9012\n15012 43035\n15725 6832\n15622 23657\n16409 28622\n17038 10236\n48626 18899\n20374 38883",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25293 38719 5283\n25009 32601\n38179 8602\n19801 17590\n19191 24158\n29028 40696\n17647 14216\n20112 16699\n39065 40510\n18036 26630\n26630 22509\n14411 36810",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 1 1\n100000 2\n100000 100000\n99999 99999\n100000 2\n2 99999\n100000 99999\n99999 1\n2 1\n2 99999\n2 99999\n99999 99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 99999 1\n2 100000\n2 99999\n99999 99999\n99999 1\n100000 2\n100000 99999\n99999 2\n2 99999\n2 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}