{
  "problem_code": "problems",
  "title": "Greedy Hydra",
  "tags": [],
  "text": "Hydra is some very greedy animal. A hydra has 9 heads when he is born, and many more new heads will come out when he grows up. Of course, some old heads will break off because of caducity.One day, a hydra with M heads finds a tree with N fruits on it. He is very delighted and wants to eat this tree instantly. Since he has M heads, he must divide these N fruit into M groups, each group contains at least 1 fruit, and each head will eat a group of fruits.The biggest head among the M heads is named \"Boss\", it must eat neither more nor less than K fruits, and, in the nature of things, the biggest fruit included. These fruits are connected by N-1 branches, and there exists a path made up with branches between each pair of fruit.If two fruit connected by a single branch is put in different groups, the corresponding two heads will break the branch and eat the two fruits, otherwise the corresponding head will eat the two fruits without breaking the branch. Eating branches is not very comfortable of course, so every branch has a weight of illness, and the weight of illness of this hydra is the sum of the weights of illness of all branches he has eaten.Your task is to help the hydra to minimize his weight of illness.The picture below is an example.N=8, M=2, K=4.The bigger head eats 4 fruits (full points), the smaller head eats 4 fruits (empty points). The branch signed by a thin segment is eaten by the hydra.InputTen test cases (Given one after another, you have to process them all!) For each test case the first line contains 3 integers N (1 ≤ N ≤ 300), M (2 ≤ M ≤ N), K (1 ≤ K ≤ N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i, j, k separated by spaces denoted that there is a branch between fruit i (1 ≤ i ≤ N) and fruit j (1 ≤ j ≤ N) and the weight of illness of this branch is k (0 ≤ k ≤ 100000).OutputTen lines, each contains a single integer - the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output \"-1\" (without quotes).ExampleInput:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]Output:4\r\n[and 9 test cases more]LinkAfter solving this problem you can try the problemDRAGON2.",
  "sample_input": "Input:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]Output:4\r\n[and 9 test cases more]",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DRAGON",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]",
      "expected_output": "4\r\n[and 9 test cases more]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 7 10\n10 7 7\n6 4 6\n9 1 7\n2 1 8\n1 3 5\n8 3 5\n4 6 7\n9\nk 1 pdxlk yoh wcb",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2 2\n3 7 4\n3 10 5\n7 7 4\n1 6 6\n10 7 8\n3 8 9\n3 6 6\n5\noxw 9 skxvc vvn hnf",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 3\n3 8 6\n2 3 9\n9 10 4\n3 2 2\n1 9 10\n8 8 4\n4 5 6\n5\nynlkv 4 atn ts z",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "33 47 8\n43 39 9\n24 49 97\n33 100 39\n81 29 83\n83 42 82\n49 42 52\n25 73 64\n30\nx 79 try w ar",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "77 64 54\n45 62 41\n75 38 11\n84 75 28\n98 16 87\n50 52 30\n89 61 37\n57 91 91\n73\nsyuk 38 xhr wb cfm",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "45 22 8\n57 31 29\n56 84 76\n25 28 98\n35 57 11\n74 28 38\n65 48 87\n93 93 71\n29\nolix 78 vrwh rf kacm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "68 39 58\n55 20 26\n94 37 94\n60 75 52\n21 7 36\n36 36 58\n70 19 73\n38 26 23\n25\niau 38 fkzz cs wwrpx",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 18 25\n24 20 68\n48 14 43\n40 64 37\n25 43 25\n34 37 82\n57 87 64\n41 16 37\n75\nllxdq 35 hxs ri g",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16 16 43\n86 103 76\n106 144 144\n122 40 117\n55 44 26\n118 141 112\n90 125 92\n48 42 103\n148\nff 136 hhm l fm",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "100 34 60\n88 104 82\n15 113 57\n81 114 63\n35 137 141\n143 112 98\n108 46 98\n106 52 62\n107\nc 147 qlxxt fxfa yfh",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "81 124 42\n48 123 54\n71 148 74\n57 32 50\n65 65 114\n63 21 116\n72 22 48\n20 96 78\n32\nml 112 in gc krc",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "46 30 29\n132 28 66\n133 70 39\n32 20 69\n75 91 141\n118 50 27\n116 32 139\n67 70 146\n117\nqswul 72 x fg dv",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "91 39 24\n136 41 149\n102 24 149\n53 131 19\n63 120 117\n127 17 39\n18 36 97\n126 72 80\n32\nxhnx 117 znj hxfhf vxdp",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "81 30 77\n43 108 40\n57 36 102\n100 82 54\n45 108 40\n69 112 73\n91 125 48\n19 27 62\n118\nmwxx 66 s lxlna yedm",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "49 22 68\n110 49 125\n105 140 79\n94 29 74\n49 119 33\n64 127 56\n112 43 74\n32 88 106\n62\nuvhzu 106 sjz rc de",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300\nugxo 300 ywam s fco",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300\nke 300 pnrh vfj g",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "300 1 2\n1 299 1\n300 1 299\n2 1 1\n300 2 299\n2 300 300\n299 1 1\n299 300 300\n2\ne 2 m vdn yogw",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 300 1\n1 299 2\n2 300 299\n1 1 299\n1 300 300\n300 1 300\n299 299 300\n299 300 300\n300\nz 300 bduha uw dljxv",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}