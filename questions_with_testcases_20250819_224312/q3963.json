{
  "problem_code": "problems",
  "title": "Pencil Game",
  "tags": [],
  "text": "Minh has a box of pencils. The box is a rectangle of size M × N, where position (i, j) has a pencil  with a length of exactly i × N + j (0 ≤ i ≤ M-1, 0 ≤ j ≤ N-1). Note that position (0, 0) does not have any pencil hence having a length of 0.He wonders if he could select a sub-rectangle of the box and join all the pencils within that sub-rectangle together, to get a new long pencil that has a specific length L that he wants.Your task is to find a sub-rectangle of the box in which the total length of the contained pencils is L and return the area of that the sub-rectangle. If there are multiple solutions, return the smallest possible area. If there's no such sub-rectangle, return -1.InputThe input file consists of several datasets. The first line of the input file contains the number of datasets which is a positive integer and is not greater than 150. The following lines describe the datasets.Each dataset contains three space-separated numbers M, N and L (1 ≤ M, N ≤ 106, 1 ≤ L ≤ 1012) written in one line.OutputFor each dataset, write in one line the smallest possible area of the sub-rectangle in which the total sum of pencil lengths is L. Write in one line -1 if there is no such sub-rectangle.ExampleInput:2\r\n2 3 8\r\n2 2 7Output:4\r\n-1",
  "sample_input": "Input:2\r\n2 3 8\r\n2 2 7Output:4\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VNACM14H",
  "scraped_at": "2025-08-17 00:34:28",
  "test_cases": [
    {
      "input": "2\r\n2 3 8\r\n2 2 7",
      "expected_output": "4\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n9\n6\n1\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "12\n32957160\n79548392\n66994509\n56671317\n69221320\n78517411\n42282292\n95166606\n32150265\n28312967\n94228576\n2500062",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n78185162\n85674902\n46158638\n43853475\n38960881\n23234752\n19021980\n42315691\n1288963\n76981104\n89146005\n86458357\n99249138\n78371642\n91385309\n98715290",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n7554392\n67358230\n21890833\n62961431\n28089299\n65920434\n22722241\n58461811\n58423627\n1097891",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n55313607\n40146988\n11264404\n15664260\n88698322\n30725843\n72364390\n26131148\n29785996\n66617119\n9830331\n59019518\n50180394\n65410056\n45068752\n92199024\n80319267\n35091043\n95387657",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n48577684\n299283\n27711486\n76440751\n70586309\n93806102\n36770814\n94708417",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "61\n46094\n73453\n40231\n42001\n53538\n90121\n71918\n65193\n52734\n50881\n34010\n80739\n76195\n87683\n56283\n51709\n69406\n61773\n83179\n99766\n72206\n84561\n61677\n57537\n88360\n34681\n5402\n39327\n14982\n4951\n63824\n88866\n82015\n61945\n46462\n6369\n6338\n36304\n30753\n95973\n48804\n15338\n79332\n844\n58646\n1081\n33185\n72867\n97801\n45194\n43410\n67953\n10866\n70953\n54949\n91038\n83457\n51568\n84028\n88839\n90071",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "99\n82407\n39830\n87665\n62375\n53732\n51885\n37160\n62972\n72972\n6266\n64897\n1468\n60211\n68514\n69785\n22421\n33024\n69094\n95689\n30403\n42857\n2865\n16680\n34719\n85482\n84547\n27380\n93187\n13136\n24816\n17106\n93555\n18156\n41278\n2901\n39931\n84570\n80820\n90560\n62641\n39411\n80520\n35052\n50307\n15274\n68595\n7504\n1052\n16288\n41085\n86300\n24561\n21938\n30184\n88640\n78269\n77144\n790\n74239\n71247\n62045\n57723\n52638\n21288\n43392\n9995\n66817\n11911\n16500\n27552\n33033\n14455\n18508\n62588\n96816\n36328\n99869\n50294\n53457\n86862\n17647\n44329\n742\n4713\n42115\n67424\n33523\n85814\n58595\n38739\n5082\n47334\n3522\n68429\n28177\n63784\n58771\n65679\n55473",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "104\n34679\n39052\n59287\n63837\n365\n78245\n57698\n20593\n45056\n47803\n70685\n54476\n35880\n4546\n25403\n26587\n27570\n8894\n61787\n66378\n13753\n75460\n83784\n5831\n85470\n43240\n35065\n87380\n26707\n40585\n35206\n29068\n27177\n62490\n18056\n35019\n5110\n62199\n24950\n36090\n17006\n22765\n73410\n57510\n72966\n21145\n13704\n12297\n55650\n48138\n6028\n87644\n73657\n46436\n10131\n95393\n97863\n31953\n93799\n82058\n54166\n17078\n98844\n96592\n23045\n74862\n23328\n18413\n88070\n83423\n52367\n35394\n34861\n88761\n19842\n66806\n28215\n46818\n79880\n8752\n87431\n29699\n7369\n97919\n49703\n42396\n7900\n78279\n72130\n28193\n20910\n47514\n17938\n77542\n78523\n90674\n28813\n78890\n95734\n30678\n68260\n11846\n61758\n55527",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "83\n18318\n32134\n11476\n60098\n57637\n48786\n85992\n23391\n12688\n34322\n12066\n87259\n61441\n27024\n33420\n48815\n51715\n83955\n93783\n83181\n17903\n2822\n82366\n77551\n27746\n45561\n78100\n87880\n50667\n36131\n44213\n19949\n60820\n79700\n81206\n71468\n57073\n36518\n46861\n33143\n82987\n47740\n63351\n31495\n63136\n38346\n35388\n57309\n54908\n54869\n76187\n43607\n85690\n83856\n67440\n23244\n1097\n56791\n52751\n87485\n90720\n51494\n75222\n90249\n737\n96547\n6749\n8904\n47543\n48433\n28327\n13918\n47831\n90644\n49089\n19746\n24781\n76981\n16352\n36558\n64263\n1991\n25872",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n79116\n52023\n39482\n57313\n5022\n50536\n42349\n28432\n7841\n75033\n75248\n68201\n38863\n8268\n29329\n5240\n16178\n64166\n96400\n34637\n34594\n67158\n13773\n8768\n63879\n95683\n56053\n89228\n48649\n63443\n85284\n36384\n3903\n96811\n18510\n60872\n65075\n38998\n55721\n91445\n20071\n61274\n97527\n33294\n42027\n86102\n73027\n94683\n97916\n20631\n15327\n79813\n30323\n40418\n87375\n42532\n46456\n9607\n45098\n16537\n10667\n78981\n3291\n21506\n50384\n11580\n7765\n27487\n90884\n35106\n24594\n61248\n32022\n75092\n33308\n83410\n67308\n82117\n7861\n51500\n14354\n78456\n1997\n79988\n9367\n33431\n37670\n61196\n85526\n24307\n60430\n83750\n77882\n91607",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n63589\n68506\n59724\n33812\n8819\n53559\n12529\n87807\n17489\n6313\n70884\n81249\n39102\n9721\n15782\n68375\n70011\n44233\n89719\n48675\n20965\n19114\n61545\n26224\n56676\n60066\n2264\n22000\n53913\n45281\n44668\n26702\n31888\n81537\n34272\n77069\n54120\n37552\n78655\n54426\n5168\n78046\n35997",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "72\n28931\n37339\n41361\n79802\n59388\n35910\n11432\n5967\n47204\n52707\n49463\n34363\n93067\n75149\n91749\n96103\n49191\n68942\n61096\n67783\n31909\n45205\n172\n3202\n24855\n41927\n42800\n5943\n43248\n80669\n42153\n62994\n29183\n14\n42544\n58833\n83300\n12832\n73977\n37434\n73874\n64264\n5182\n21538\n46988\n98993\n11083\n64273\n48178\n41165\n76650\n53675\n6440\n73324\n73416\n75422\n70267\n76400\n43564\n83598\n17721\n94735\n927\n4972\n27178\n97033\n73502\n7647\n24410\n19447\n61656\n256",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "106\n79903460\n24399754\n23393130\n52845138\n24349747\n92067262\n55209062\n55719900\n58957196\n2101180\n81681300\n62372106\n55452405\n15990256\n21532279\n28652743\n58249616\n14057637\n66904647\n34337681\n17103645\n97411653\n61940094\n7324998\n10110011\n59241008\n175364\n53793641\n67048747\n5568411\n80655455\n85837756\n37859437\n60380413\n91131346\n20434130\n23450137\n51381869\n16259264\n38546267\n58734696\n68483528\n4825963\n66798519\n41342031\n76047398\n49820306\n79177615\n68716795\n2682183\n44744218\n95003354\n54318322\n83521783\n53473116\n3426760\n43006113\n22141805\n75521594\n19012699\n499414\n26785346\n69735068\n88529771\n93547115\n89271810\n5984430\n66093262\n75359198\n47731518\n484262\n94645312\n31121481\n89655659\n97966833\n92383148\n40039477\n53164678\n40976529\n35179780\n51052324\n85326252\n16490226\n55674122\n80238886\n83976954\n91790527\n7979617\n52950083\n47366527\n46089016\n94221116\n50581408\n30345670\n76940640\n92204364\n65308462\n6736534\n78385739\n87576665\n94586683\n12047402\n8495403\n24738380\n81089056\n94107877",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 106)"
    },
    {
      "input": "106\n2363896\n17376944\n14196834\n6345068\n17497938\n47748085\n45310604\n58351813\n71305300\n15445919\n69938970\n90843131\n43313034\n87731636\n52181990\n50372553\n99420761\n46084714\n65904701\n37503962\n21116567\n85189374\n8864128\n70853858\n81894843\n60951659\n30771324\n68041166\n53824730\n76141608\n92395350\n57343890\n22532429\n54419180\n34238101\n39263570\n49454776\n72850289\n95186946\n12906376\n66345080\n73845530\n91634369\n62200464\n31902143\n85306409\n99638166\n16969338\n40419684\n46306415\n12192259\n6515540\n35340742\n29852518\n23799374\n82940938\n65207432\n94094587\n7931232\n11156183\n24728627\n44786780\n79440158\n39557048\n15925895\n59542656\n43472081\n48326893\n36907187\n97273939\n55686291\n88775401\n54904113\n15269960\n22205440\n87887636\n17391857\n70771188\n9287967\n58135822\n51985734\n48266639\n68985662\n77440315\n13388705\n18987293\n15068657\n98141780\n87107976\n79957440\n14764443\n95037839\n70453135\n28671550\n53556750\n97491840\n32876060\n24346429\n81911860\n49437407\n36405016\n31497824\n30522257\n6468022\n82093399\n40579720",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 106)"
    },
    {
      "input": "1\n30718803",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "106\n1\n1\n100000000\n1\n100000000\n1\n23973940\n100000000\n1\n100000000\n23334645\n84750228\n100000000\n1\n100000000\n45507068\n12004499\n37131564\n100000000\n100000000\n74655730\n100000000\n100000000\n46583385\n41580197\n100000000\n1\n100000000\n100000000\n100000000\n1\n67324687\n1\n100000000\n100000000\n100000000\n1\n1\n100000000\n86756141\n1\n1\n1\n1\n93807479\n1\n46804811\n100000000\n100000000\n100000000\n100000000\n2998285\n1\n1\n51802856\n86731929\n1\n1\n1024304\n1\n78123060\n81476649\n100000000\n13944886\n51264107\n100000000\n100000000\n27247315\n99646183\n44021028\n1\n100000000\n100000000\n1\n14152184\n1\n100000000\n31272557\n100000000\n100000000\n1\n94594458\n100000000\n1\n72638192\n100000000\n85934181\n1\n10915917\n1\n100000000\n100000000\n46366063\n1\n42468345\n1\n1\n1\n100000000\n1\n97452692\n100000000\n1\n100000000\n30834524\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 106)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}