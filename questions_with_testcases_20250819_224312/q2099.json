{
  "problem_code": "problems",
  "title": "Happy Telephones",
  "tags": [],
  "text": "In the land of Eden, all phone conversations are happy ones. People complaining on the phone are immediately put in jail. To enforce this law, the police taps all phone conversations.The police wants to hire the appropriate number of operators to listen to all conversations in a given period of time. Unfortunately, each of their operators can listen to one conversation only before needing a really long break to rest from the effort.As a contractor of the police department, you have been asked to provide a program capable of determining the required number of operators. If the program does not work correctly, you will be put in jail as well, along with all the unhappy complainers. Do you really want to end up there?InputEach test case starts with two integers denoting the number of phone callsN(1 ≤N< 10 000) and the number of intervalsM(1 ≤M< 100). This is followed byNlines describing the telephone calls, each one consisting of four integersSource,Destination,StartandDuration.SourceandDestinationidentify the pair of telephone numbers establishing the connection (0 ≤Source,Destination≤ 10 000 000).StartandDurationare the start time and duration of the call in seconds (1 ≤Duration≤ 10 000 andStart≥ 0). You can safely assume that the sum ofStartandDurationfits into a 32-bit signed integer.Afterwards followMlines containing the time intervals the police are interested in, each described by two integersStartandDuration, in the same format and with the same meaning and constraints as those in the telephone calls. The last test case is represented byN=M= 0 and must not be processed.OutputFor each of theMintervals of each test case, print the number of calls that are active during at least one second of the interval.ExampleInput:3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0Output:3\r\n2\r\n1\r\n0Problem setter: Manuel Freire",
  "sample_input": "Input:3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0Output:3\r\n2\r\n1\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HAPPYTL",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0",
      "expected_output": "3\r\n2\r\n1\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1\n2 10 7 8\n3 3 3 7\n7 8 8 1\n9 10\n1 7\n10 2\n3 1 4 7\n7 4\n5 8\n7 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3\n4 10 2 6\n1 9 5 5\n8 3 2 9\n7 4\n8 7\n3 6\n7 9 7 9\n6 9\n7 6\n10 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\n8 6 1 7\n5 6 9 10\n2 4 7 4\n7 5\n9 6\n3 1\n10 3 8 3\n10 7\n4 6\n4 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 33\n92 15 42 74\n97 49 15 100\n18 20 97 29\n12 81\n73 98\n46 44\n11 86 89 18\n8 33\n41 15\n7 90",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "10 47\n77 6 39 12\n17 23 23 33\n48 72 73 70\n65 40\n65 56\n69 48\n36 65 34 54\n23 65\n2 13\n75 14",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 18\n100 14 47 86\n95 52 55 74\n25 30 91 91\n15 24\n67 60\n81 92\n49 17 88 1\n87 18\n98 35\n63 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "91 74\n23 12 46 25\n61 98 18 53\n64 14 47 8\n7 59\n59 41\n48 85\n99 100 42 63\n79 34\n62 93\n77 24",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "48 20\n88 84 42 77\n83 7 83 65\n24 48 88 75\n38 67\n28 90\n75 95\n32 39 51 12\n11 89\n24 89\n64 51",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1886 3998\n4530 990 559 4140\n4472 2909 2762 4181\n3336 1887 4725 3079\n4097 2026\n4425 604\n1251 2712\n1680 722 2419 3148\n2118 2740\n952 682\n3237 788",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2550 3924\n3005 2994 2330 3282\n3467 2617 3907 4730\n3204 1547 1026 1359\n3282 1907\n3224 3176\n3294 4148\n4037 3211 4158 4760\n704 3008\n1013 3734\n1245 2373",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4688 543\n2872 3113 4455 2220\n2158 2304 1336 1711\n3206 4019 4685 3874\n3911 3431\n2247 1145\n4251 4717\n1015 2284 1459 1619\n2088 4614\n2451 965\n2344 582",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4266 1803\n1944 1153 1703 1916\n4416 1676 2197 1514\n1013 3591 2373 2053\n1771 1455\n991 1501\n4498 3096\n4580 642 2351 3682\n2347 1777\n1057 3613\n3342 3705",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "3892 1317\n2683 3291 2539 3642\n2111 1095 1056 3587\n3509 1590 2220 962\n2809 4947\n1027 2893\n4778 3819\n3161 1769 839 4625\n4649 4236\n4457 2711\n2507 2018",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2321 3223\n4275 4102 3174 2538\n2575 4475 3273 2065\n3678 1845 3467 2801\n3263 3101\n4885 4179\n3068 3400\n4349 4111 1899 4158\n2605 847\n4823 1236\n1683 1044",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2856 2094\n4692 1670 1598 1872\n2877 2942 3220 3563\n1133 1741 4248 4940\n2699 720\n1155 2034\n3504 948\n3042 599 2324 4193\n1919 1799\n4108 4184\n2488 923",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10000 1\n10000 9999 2 1\n1 2 2 9999\n9999 1 10000 1\n9999 9999\n10000 2\n1 2\n2 9999 2 9999\n2 10000\n1 10000\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 10000\n10000 1 9999 9999\n10000 10000 2 10000\n9999 2 10000 9999\n2 9999\n10000 10000\n1 10000\n1 1 2 9999\n2 2\n10000 1\n10000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}