{
  "problem_code": "problems",
  "title": "Help a researcher",
  "tags": [],
  "text": "A scientist was doing a research on some kinds of bacteria. He found that the kinds, he examined, takeTunit of time to grow (be mature) enough in order to can reproduce.Also he found that each type reproduces with a constant rate which isNnew bacteria everyFunit of time, (whereF=T).Taskwrite a program that readsL(number of bacteria (at the beginning of the experiment)),M(number of mature bacteria of them),T(time of each to get mature which is also the time needed for reproducingNnew bacteria),N(rate of reproducing perTunit of time) andZ(period elapsed by the experiment).Calculate the number of bacteria afterZunit of time. Regardless of life-span.Constraints1 ≤L≤ 5 number of bacteria (at the beginning of the experiment).0 ≤M≤Lnumber of mature bacteria.1 ≤T≤ 5 time of each to get mature which is also the time needed for reproducingNnew bacteria.1 ≤N≤ 50 rate of reproducing perTunit of time.1 ≤Z/T≤ 4,300 period elapsed by the experiment.Note:Zis always divisible byT.InputL(number of bacteria (at the beginning of the experiment))M(number of mature bacteria of them)T(time of each to get mature which is also the time needed for reproducingNnew bacteria)N(rate of reproducing perTunit of time)Z(period elapsed by the experiment)Outputthe number of bacteria afterZunit of time. Regardless of life-span.ExampleInput:3\r\n2\r\n3\r\n1\r\n3Output:5Input2\r\n0\r\n1\r\n1\r\n100Output:1146295688027634168202Explanation for Test Case 1The experiment begins with 2 mature bacteria and one immature bacterium.\r\nFor each of the mature bacteria reproduces after 3 units of time.\r\nThen th total becomes 4 - as each one got a new one (2*2).\r\nBut for the immature bacterium after 3 units of time, it only become mature.\r\nAfter all of that the experiment finishes with 5 bacteria.",
  "sample_input": "Input:3\r\n2\r\n3\r\n1\r\n3Output:5",
  "sample_output": "Input2\r\n0\r\n1\r\n1\r\n100Output:1146295688027634168202",
  "link": "https://www.spoj.com/problems/HLPRSRCH",
  "scraped_at": "2025-08-17 00:33:30",
  "test_cases": [
    {
      "input": "3\r\n2\r\n3\r\n1\r\n3",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "9\n24525846\n69062494\n27469452\n37667112\n32120108\n99389692\n70499436\n48274772\n87198750",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n40655121\n67582749\n93428381\n37404593\n20424970\n33291482\n31107429\n60385035",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n91062800\n2190157\n14876015\n73271543\n91754353\n19302296\n44418036\n38847039\n82363545\n50982224\n18572446\n53559915\n67614717\n53451208\n19784060\n75057847\n18483299\n1541427\n40364688\n20766262",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n24249018\n73237735\n81638464\n82062415\n38500699\n12368378\n5183148\n58405967\n254236\n14462905\n28744362\n94462289\n89924580\n62157684\n31666852\n26217261",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n101142\n45856270\n64066629\n40692279\n26656638\n46768011\n43985357\n26749669\n66889060\n50825085\n37870597\n86016846\n79538510\n11098172\n84324415\n45625386\n76985562",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "41\n40186\n15084\n34237\n86712\n47242\n92462\n16369\n66623\n94186\n71437\n10544\n3775\n33713\n53395\n4876\n95899\n77716\n52109\n90337\n69652\n40202\n56831\n41376\n90979\n58743\n55996\n37645\n11434\n26207\n71295\n18042\n36484\n85913\n47026\n46512\n31934\n6912\n70114\n55555\n38066\n49607",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n44259\n7647\n87013\n4124\n14226\n76188\n75956\n25454\n5740\n98274\n30794\n56496\n81040\n11506\n83718\n52015\n36923\n29728\n20368\n98751\n72777\n86816\n75481\n56875\n34405\n40408\n93003\n9660\n8088",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n45008\n81685\n38120\n92317\n23844\n26183\n66406\n79937\n66259\n16253\n33965\n20019\n51989\n64989\n34677\n20864\n33375\n2241\n48553\n2316\n73038\n10210\n32521\n43588\n78055\n87722\n73322\n36028\n10070\n46354\n74509\n77416\n91187",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n34533\n94298\n94051\n65642\n65298\n49037\n74947\n68283\n8443\n19841\n88225\n3647\n28815\n27519\n56436\n72934\n60269\n497\n58682\n78407\n8651\n14308\n80145\n50938\n82401\n57329\n15881\n74171\n19917\n35710\n93603\n84164\n96636\n22938\n53333\n79019\n72292\n65046\n19866\n91756\n36666\n18199\n91287",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n82876\n87278\n62138\n71615\n45604\n35099\n66730\n80283\n24749\n37074\n26329\n41058\n25110\n12774\n39631\n70855\n37175\n92661\n23485\n77668\n24869\n17837\n70019\n51628\n51206\n81623\n29297\n35899\n98257",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "49\n78170\n48991\n36584\n91340\n75638\n78065\n22921\n79224\n58616\n52433\n43545\n81295\n54004\n13640\n60903\n99165\n12948\n86122\n93251\n31621\n75289\n53971\n34799\n71385\n141\n69533\n21703\n18775\n63775\n94587\n8549\n30616\n34049\n53559\n11323\n55712\n93360\n61352\n250\n38558\n50453\n58784\n87501\n79437\n17214\n47787\n85529\n3161\n37565",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n42793\n74060\n88135\n89994\n34232\n65253\n24315\n44602\n88221\n24903\n84595\n44100\n13689\n37455\n24971\n5843\n63634\n36252\n95709\n8797\n40334\n26265\n58728\n29485\n59354\n23760\n63751\n53027",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n38608483\n10624732\n64567697\n23931176\n67518331\n301256\n47495579\n50081851\n22419800\n56413865\n16672086\n87463150\n49197358\n27795060\n78315696\n72333752\n6998447\n99553164\n62837248\n44395767\n36784536\n52687429\n56329609\n11601001\n64978435\n23640809\n79576699\n28337890\n39597850\n86206779\n97414526\n70197672\n82594300\n16256652\n77308322\n7674199\n31749135\n91610804\n1510015\n58681332\n86464856\n22085001\n47113714\n48546629\n90585068\n15032762\n1108956\n13993387\n26650079\n27489009",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n70398509\n17818311\n24248401\n22066086\n70765561\n95625687\n40205598\n22227416\n97000084\n59851766\n79261276\n95391658\n73748828\n50893658\n70734638\n92484312\n48339884\n21261904\n38020514\n57635554\n12671768\n69191412\n31173940\n65782757\n10716243\n81174798\n81317406\n42197019\n82749553\n75044930\n11817109\n94410625\n11945687\n74911500\n85346752\n67413789\n25860163\n51512618\n6039465\n5837695\n12518581\n97821769\n53763403\n16829305\n21046824\n5346874\n25178289\n87809522\n3708810\n11930407",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "2\n37213801\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "50\n25954306\n1\n1\n100000000\n100000000\n19810502\n100000000\n71052992\n42736336\n20028709\n1\n33228522\n100000000\n100000000\n100000000\n79020690\n59130672\n1\n95412797\n68635376\n100000000\n1\n18373813\n1\n93931705\n100000000\n100000000\n100000000\n1\n51838701\n1\n17830752\n1\n82474171\n81231311\n1\n100000000\n100000000\n1\n100000000\n27234131\n100000000\n32564243\n1\n100000000\n1\n100000000\n100000000\n100000000\n39286132",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 50)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}