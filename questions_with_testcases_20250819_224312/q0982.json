{
  "problem_code": "problems",
  "title": "Dolan and Nephews",
  "tags": [],
  "text": "Dolan has a stack of card. Each card is numbered from 1 to n from top to bottom. His nephews want to play with the cards. Each nephew can only do one kind of operation.Nephew number 1 will reverse the order of the card from i-th to j-th position.Nephew number 2 will ask uncle Dolan what is the card number on i-th position.Nephew number 3 will ask uncle Dolan in what position is the card number i.Since Dolan is a good uncle, he will have to answer all questions correctly. Please help Dolan.InputFirst line on input is n and q, the number of cards (n ≤ 100000) and number of operations by the nephews (q ≤ 100000). The next q lines will contain the operation by the nephews.For each operation, the first number will be the nephew number. The second (and possibly third) number is i (and j) from the description above (1 ≤ i ≤ j ≤ n).OutputFor each question asked by the nephews (operation 2 and 3), output a single line containing the answer.ExampleInput:10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4Output:3\r\n9\r\n9Input file is huge, use faster I/O (scanf for C)",
  "sample_input": "Input:10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4Output:3\r\n9\r\n9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CARDFLIP",
  "scraped_at": "2025-08-17 00:33:22",
  "test_cases": [
    {
      "input": "10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4",
      "expected_output": "3\r\n9\r\n9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 4\n5 5 4\n5 4\n4 4 8\n3 1\n3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\n4 1 7\n2 4\n2 5 6\n2 3\n10 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n10 3 2\n5 6\n7 4 1\n1 6\n9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 64\n31 27 69\n75 60\n80 80 25\n20 100\n16 82",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 49\n71 17 91\n100 45\n25 93 85\n99 44\n67 61",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "28 65\n48 78 64\n99 95\n1 80 28\n44 25\n85 15",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 84\n57 94 78\n30 20\n45 69 82\n91 20\n6 85",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "79 9\n66 24 51\n92 31\n54 34 42\n7 41\n59 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "43092 30051\n26170 36909 36109\n30602 9578\n35188 47589 33673\n17758 23412\n16652 10255",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "49674 36027\n19593 31044 44792\n31412 5480\n35372 39164 43992\n34498 22483\n40702 40883",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "17619 26565\n12834 38428 23277\n39101 8146\n6442 24660 33844\n19052 14234\n18308 45767",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "40568 17034\n44748 20687 45288\n5224 42848\n7863 43689 48548\n15250 36379\n9099 19667",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "26723 27322\n36095 22358 26900\n16528 5860\n37367 27708 28145\n40132 18473\n36168 29022",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "23478 8663\n31158 19898 13204\n22528 13410\n9614 13612 9985\n18140 14434\n27816 38188",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "28788 30653\n38099 17740 24110\n43237 24311\n49104 21316 43709\n24643 42085\n30935 43662",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n100000 2 1\n99999 1\n100000 99999 1\n100000 2\n100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 2\n1 2 2\n100000 99999\n99999 1 100000\n100000 1\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}