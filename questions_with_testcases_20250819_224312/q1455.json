{
  "problem_code": "problems",
  "title": "Extend to Palindrome",
  "tags": [],
  "text": "Your task is, given an integer N, to make a palindrome (word that reads the same when you reverse it) of length at least N (1 <= N <= 100,000). Any palindrome will do.Easy, isn't it? That's what you thought before you passed it on to your inexperienced team-mate. When the contest is almost over, you find out that that problem still isn't solved. The problem with the code is that the strings generated are often not palindromic. There's not enough time to start again from scratch or to debug his messy code.Seeing that the situation is desperate, you decide to simply write some additional code that takes the output and adds just enough extra characters to it to make it a palindrome and hope for the best. Your solution should take as its input a string and produce the smallest palindrome that can be formed by adding zero or more characters at its end. The input string will consist of  only upper and lower case letters.ExampleInput:aaaa\r\nabba\r\namanaplanacanal\r\nxyzOutput:aaaa\r\nabba\r\namanaplanacanalpanama\r\nxyzyxNote: \r\n1. All palindromes are considered case-sensitive (i.e. 'Aa' is not a palindrome).\r\n2. Large I/O. Be careful in certain languages.",
  "sample_input": "Input:aaaa\r\nabba\r\namanaplanacanal\r\nxyzOutput:aaaa\r\nabba\r\namanaplanacanalpanama\r\nxyzyx",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EPALIN",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "aaaa\r\nabba\r\namanaplanacanal\r\nxyz",
      "expected_output": "aaaa\r\nabba\r\namanaplanacanalpanama\r\nxyzyx",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "yrdyo\nrahioc\nyowaqucckhhgklvbhzsp\nelq",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "noufjxqb\nthhdha\nbcgzywypjvigcqav\nidu",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "zcsmrv\ns\nnnlclariciunnilm\ny",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "urgzvspo\nd\nrtukge\nkyl",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "wm\nirkmq\nqkfdxsmaachwpawmx\npdsvvt",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "fyr\nzu\nwftnyibqrbed\nlpe",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "wr\nq\npfnlcpe\nhx",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "k\nmmzwj\naekkzc\natp",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "wo\nvhonxde\nrdungxqrfjimr\nkyrz",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "swxkstnq\nkgv\neyykvebfgtctzou\nenet",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "mihwf\nj\nysw\npg",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "brqahiio\nayowhpwr\nvngsheku\nase",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "n\nopb\npzegyxqrv\ntj",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "f\nza\np\nkymxy",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "ctfp\nzhkromq\nwbvevclapefnta\ng",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "nlvrfup\nm\nczxhoazerihdkqo\nql",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "ezadd\namztcx\nouwbnxdyr\nwkky",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ltxvwscb\nfd\not\nkb",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "stixt\nfzyzb\nsmttlmbp\nyh",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}