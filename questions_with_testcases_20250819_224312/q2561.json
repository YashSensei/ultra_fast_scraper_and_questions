{
  "problem_code": "problems",
  "title": "Training",
  "tags": [],
  "text": "Mirko and Slavko are training hard for the annual tandem cycling marathon taking place in Croatia. They need to choose a route to train on.There are N cities and M roads in their country. Every road connects two cities and can be traversed in both directions. Exactly N−1 of those roads are paved, while the rest of the roads are unpaved trails. Fortunately, the network of roads was designed so that each pair of cities is connected by a path consisting of paved roads. In other words, the N cities and the N−1 paved roads form a tree structure.Additionally, each city is an endpoint for at most 10 roads total.A training route starts in some city, follows some roads and ends in the same city it started in. Mirko and Slavko like to see new places, so they made a rule never to go through the same city nor travel the same road twice. The training route may start in any city and does not need to visit every city.Riding in the back seat is easier, since the rider is shielded from the wind by the rider in the front. Because of this, Mirko and Slavko change seats in every city. To ensure that they get the same amount of training, they must choose a route with an even number of roads.Mirko and Slavko's competitors decided to block some of the unpaved roads, making it impossible for them to find a training route satisfying the above requirements. For each unpaved road there is a cost (a positive integer) associated with blocking the road. It is impossible to block paved roads.Write a program that, given the description of the network of cities and roads, finds the smallest total cost needed to block the roads so that no training route exists satisfying the above requirements.InputThe first line of input contains two integers N and M (2 ≤ N ≤ 1 000, N−1 ≤ M ≤ 5 000), the number of cities and the total number of roads.Each of the following M lines contains three integers A, B and C (1 ≤ A ≤ N, 1 ≤ B ≤ N, 0 ≤ C ≤ 10 000), describing one road. The numbers A and B are different and they represent the cities directly connected by the road. If C=0, the road is paved; otherwise, the road is unpaved and C represents the cost of blocking it.Each city is an endpoint for at most 10 roads. There will never be more than one road directly connecting a single pair of cities.OutputOutput should consist of a single integer, the smallest total cost as described in the problem statement.ExampleInput:5 8\r\n2 1 0\r\n3 2 0\r\n4 3 0\r\n5 4 0\r\n1 3 2\r\n3 5 2\r\n2 4 5\r\n2 5 1Output:5Input:9 14\r\n1 2 0\r\n1 3 0\r\n2 3 14\r\n2 6 15\r\n3 4 0\r\n3 5 0\r\n3 6 12\r\n3 7 13\r\n4 6 10\r\n5 6 0\r\n5 7 0\r\n5 8 0\r\n6 9 11\r\n8 9 0Output:48",
  "sample_input": "Input:5 8\r\n2 1 0\r\n3 2 0\r\n4 3 0\r\n5 4 0\r\n1 3 2\r\n3 5 2\r\n2 4 5\r\n2 5 1Output:5",
  "sample_output": "Input:9 14\r\n1 2 0\r\n1 3 0\r\n2 3 14\r\n2 6 15\r\n3 4 0\r\n3 5 0\r\n3 6 12\r\n3 7 13\r\n4 6 10\r\n5 6 0\r\n5 7 0\r\n5 8 0\r\n6 9 11\r\n8 9 0Output:48",
  "link": "https://www.spoj.com/problems/TRAIN07",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "5 8\r\n2 1 0\r\n3 2 0\r\n4 3 0\r\n5 4 0\r\n1 3 2\r\n3 5 2\r\n2 4 5\r\n2 5 1",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 14\r\n1 2 0\r\n1 3 0\r\n2 3 14\r\n2 6 15\r\n3 4 0\r\n3 5 0\r\n3 6 12\r\n3 7 13\r\n4 6 10\r\n5 6 0\r\n5 7 0\r\n5 8 0\r\n6 9 11\r\n8 9 0",
      "expected_output": "48",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 10\n10 6 5\n3 4 10\n10 8 6\n9 5 10\n4 10 7\n1 2 5\n7 9 10\n6 7 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 2\n2 7 1\n10 1 7\n5 7 6\n6 10 5\n2 3 8\n3 3 8\n2 4 3\n4 1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n8 5 2\n6 9 2\n2 7 2\n5 4 7\n6 9 8\n5 4 2\n5 10 9\n4 2 7",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "36 65\n92 47 17\n29 4 6\n33 90 96\n100 6 80\n40 70 87\n5 74 8\n97 24 95\n61 79 84",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 59\n16 33 66\n88 55 45\n19 62 26\n73 88 26\n87 14 49\n16 8 87\n14 88 33\n84 41 82",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 73\n88 21 77\n20 77 70\n22 65 72\n47 32 52\n90 83 68\n84 85 85\n18 29 33\n16 55 71",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "82 50\n71 90 69\n40 27 41\n69 54 24\n98 30 32\n46 26 70\n90 53 19\n32 55 68\n29 69 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "90 92\n54 82 36\n52 41 39\n79 6 58\n98 65 94\n83 20 45\n55 50 39\n89 94 50\n58 27 35",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "301 154\n246 380 304\n342 178 370\n494 439 239\n167 212 398\n210 414 138\n304 144 266\n255 54 131\n145 397 340",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "176 394\n88 487 72\n343 351 377\n276 327 381\n481 397 263\n275 213 411\n376 210 227\n322 89 278\n426 154 317",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "297 472\n297 351 468\n478 433 200\n198 71 81\n174 75 104\n467 54 300\n82 474 254\n469 110 293\n426 322 139",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "191 98\n486 329 246\n322 77 423\n81 88 410\n254 485 379\n158 62 453\n435 155 171\n85 413 427\n460 199 372",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "367 424\n150 157 224\n144 389 317\n214 349 297\n155 63 275\n431 476 265\n168 92 470\n357 413 143\n96 259 376",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "81 58\n441 499 203\n396 498 467\n367 201 238\n363 417 496\n138 371 395\n397 457 397\n444 482 227\n461 188 415",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "404 79\n414 358 329\n403 72 53\n361 361 196\n328 116 213\n443 161 295\n470 194 434\n188 213 487\n370 474 288",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n999 999 2\n1000 1000 2\n999 1 1000\n1 999 1000\n1000 999 1000\n1 1000 1\n999 999 2\n999 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}