{
  "problem_code": "problems",
  "title": "Snail family problems",
  "tags": [],
  "text": "In this problem we'll be looking at a group of snails. Two snails, numberedaandbcan get married, and some time after that they may even get divorced. Any snail may be married to number of other snails.The problem arises because snails don't like being married to their ancestors, and they don't know who their ancestors are - they only know the set of snails they're directly related to. A marriage between two snails from which one is an ancestor of the other is called \"bad\".If they knew who the oldest snail (the ancestor of everyone else) is, everyone would know their ancestors.For the given group ofNsnails numbered from 1 toN, you'll be givenN-1 pairs of snails (a,b), indicating that snails a and b are directly related.Next you'll be givenQqueries of the form:Qn- supposenis the oldest snail, how many \"bad\" marriages are there in the group?M a b- snailsaandbjust got married.D a b- snailsaandbjust got divorced.No snail can ever get married to himself.You may assume that no pair will get married twice (if they are already married). You may also assume that no pair will get divorced if they don't get married before that.InputThe first line of input contains an integerN(2 ≤N≤ 200000).Each of the nextN-1 lines contains a pair of integersaandb(1 ≤a<b≤ N).The next line contains an integerQ(1 ≤Q≤ 300000).Each of the nextQlines contains a query as defined above.OutputFor each query of typeQoutput a single line containing the number of \"bad\" marriages if snail numberednwas the oldest one.ExampleInput:51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3Output:001211",
  "sample_input": "Input:51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3Output:001211",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INCEST",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3",
      "expected_output": "001211",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 4 7 6 2 6 4 7 2 10 2 9 9 10 1 6 10\n9 10 7 9 e wyr 9 gf omql s 7 zn rytb hynkz 1 qah 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 9 10 5 8 4 5 5 4 3 7 5 5 7 8 5\n5 1 4 1 ffmb imk 9 cylf srfl bej 9 ridyk nvqnn ulet 9 l 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 8 2 1 9 4 8 10 5 8 6 7 8 4 7 4\n1 3 5 6 lffqm up 7 gqzuz zpq eod 6 krafo u hq 5 s 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 4 60 11 88 64 52 56 77 88 1 66 43 79 57 72 29\n29 75 75 44 rihn t 8 i ljfc g 65 g bdhd kn 27 tmfyj 66",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 48 45 55 62 3 28 100 81 66 28 99 48 8 94 53 49\n34 17 7 40 syjw ek 74 prkvl xbl rg 65 smssy sxfmd rk 25 izhx 93",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 11 11 59 37 20 89 96 15 86 74 31 86 8 43 53 48\n43 56 17 78 krb mi 31 gu niygu gf 77 k i smhh 50 rhfk 84",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "45 46 40 94 90 54 1 69 99 91 94 97 62 96 36 89 80\n34 27 55 92 hq h 49 ea c uxzd 56 ynzzg xygqd g 55 mbk 16",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 77 62 90 31 81 74 80 47 52 82 54 44 94 98 50 45\n86 67 35 23 eg b 22 wrsw inq yaau 48 gdhdx isjj uvp 26 ipm 29",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "72230 46238 97253 18383 36445 68912 92971 60462 25361 45056 73973 25879 35270 46253 47096 95673 69004\n64076 66288 87749 37061 mbd zvtd 41566 exjs rtc qexzc 92834 rxy wh ftc 32133 jvw 31364",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "69011 77617 84018 70707 88273 65012 82943 39100 72129 33369 64018 78966 81237 58555 32110 91869 52420\n39303 73156 72583 14284 rn u 82752 wdefh ni sr 41948 rrl rwem kbec 65536 xtn 56148",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "97921 61964 23929 35607 83389 38754 66352 81939 49507 33318 22377 45714 26137 49436 31595 91564 97936\n21441 57655 43591 51433 nhbgb anhx 92992 t b p 21994 uehp qpov pj 39236 zzo 96129",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18249 73215 56028 73211 75115 71436 24459 88705 24678 76091 68429 92575 60048 66249 53540 79045 90845\n35630 17640 82889 87920 mej gqoba 16416 awbiy muh p 47774 ahe jb rfhtw 13391 ebu 98240",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "80833 91014 81649 40520 72100 35656 88566 14837 69831 70881 87181 53747 43650 29433 82034 17384 92786\n46263 24900 86663 52620 wnd xos 26895 ey zh cnkr 59508 ugdre zprk upita 52956 bo 89711",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "44690 13057 42051 65631 59530 18141 19944 41526 71895 12318 67125 74635 91238 10905 95659 28672 15506\n39584 46261 45998 45928 k beg 85760 nhd rtqk aypsc 97458 zwhl kd dto 60819 fwi 78068",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "52763 23943 67473 32968 93723 43265 29956 37152 69124 81352 18622 46784 29541 48328 51261 36066 22725\n98406 69455 83311 77459 moo jidi 56359 mmc wnpj cudc 43182 qyd ors djk 24225 ov 68653",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000\n200000 200000 200000 200000 s exha 200000 istjl d yvri 200000 rogkh ahhu afebs 200000 suycy 200000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000\n200000 200000 200000 200000 d uzhzb 200000 u edv v 200000 wnv s od 200000 fmx 200000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "200000 199999 199999 199999 199999 200000 1 200000 2 2 1 2 200000 199999 2 1 2\n200000 200000 1 199999 gtrgm i 2 nzazm k cu 199999 m nsph xk 200000 ro 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "199999 199999 1 199999 2 2 199999 2 2 200000 199999 1 199999 199999 200000 1 2\n200000 1 1 2 x lg 199999 a cad ix 2 a mzcr zxyc 199999 ektf 200000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}