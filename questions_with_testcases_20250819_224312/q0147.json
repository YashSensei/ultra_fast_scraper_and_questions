{
  "problem_code": "problems",
  "title": "Nacci Fear",
  "tags": [],
  "text": "We all know about the classical Fibonacci series, Fibonacci series is F(n) = F(n-1) + F(n-2). For this question we call it a 2-Nacci series as a new element is calculated as the sum of the last 2 terms of the series. For Fibonacci we assume F(0)=0 and F(1)=1. We define as new series N-Nacci where F(n) is the sum of the last n terms and here we assume that F(0)=0, F(1)=1, F(2)=2 ... F(n-1) = (n-1). Your task is to calculate the last K digits of the Lth term of the N-Nacci series (no leading zeros needed).Constraints2 ≤ N ≤ 30K ≤ 8L ≤ 1000000000InputThe first line of the input denotes the number of test cases t (at most 10). Each line denotes a test case consisting of N, K, L.OutputFor each test case print the last K digits of the Lth term of the N-Nacci series.ExampleInput:4\r\n2 1 5\r\n3 6 12\r\n4 1 10\r\n4 2 10Output:5\r\n778\r\n6\r\n16",
  "sample_input": "Input:4\r\n2 1 5\r\n3 6 12\r\n4 1 10\r\n4 2 10Output:5\r\n778\r\n6\r\n16",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NACCI",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "4\r\n2 1 5\r\n3 6 12\r\n4 1 10\r\n4 2 10",
      "expected_output": "5\r\n778\r\n6\r\n16",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n6\n4\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n1\n9\n10\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n2\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n86124020\n21936134\n30267702\n44906250\n8446818\n88839696\n77728684\n7011955\n51113121\n71667551\n67668215\n20606831\n31584752\n8853935",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n6837106\n2512267\n21140961\n84696586\n1078134\n59006612\n27740871\n91439326\n5318013\n9098983\n96554597\n41505068\n49985715\n89972610\n80598405\n825097\n68029946\n56909044",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n85061079\n79543842\n87120251\n34888901\n71710213\n52092035\n94891556\n52521070\n68261414\n57996961\n24516862\n81432030\n30941898\n99578224",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n91556244\n90294742\n1122706\n22483826\n62206592",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n40840331\n16498602\n54739996\n20407199\n37668791\n40767986\n71373450\n86668895\n73626293\n13875493",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "26\n4632\n65130\n14674\n20585\n26174\n63915\n35466\n22546\n21926\n97392\n96878\n81664\n33156\n61017\n44522\n30278\n48819\n7464\n98040\n50107\n15372\n87682\n46645\n91416\n9022\n31989",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n28382\n66817\n36980\n44365\n45307\n17068\n29637\n70549\n34339\n10294\n37989\n1697\n96478\n14153\n64088\n88358\n89703\n30274\n39840\n48117",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n96587\n19687\n7210\n21821\n83431\n96099\n12695\n26084\n32897\n36780\n48067\n80748\n99911\n88450\n16863\n8888\n82226\n45487\n45110\n88139\n41851\n11337\n98861\n71155\n52872\n56512\n19268",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n81554\n43731\n734\n56048\n48657\n81371\n16785\n32039\n82958\n13040\n25874\n61973\n98643\n16414\n59328\n959\n60817\n76256\n98149\n98654\n67627\n46773\n52748\n60049\n95856",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n31840\n26728\n26953\n59974\n12825\n30489\n24202\n84024\n64840\n85631\n54409\n30020\n83338\n58459\n64317\n20775\n78755\n42853\n56830\n30875",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n89048\n39960\n48077\n41599\n38713\n95097\n88512\n4085\n46589\n79847\n8253\n87271\n72678\n38870\n71283\n40593\n96209\n10976\n36066\n82863\n72252\n94315\n70000\n15542\n18978\n10954\n73259\n14236",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n8902\n65253\n88360\n40391\n55927\n51567\n28836\n41584\n94863\n56042\n38789\n69317\n86925\n9705\n66805\n77224\n72550\n49305\n48733\n55304\n58056\n61504\n13557\n4527\n92288\n86132",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n28518988\n70062295\n63621630\n70338401\n37419606\n59712908\n95096332\n6278102\n45847843\n94730448\n8390267\n25175822\n59283524\n92900281\n44538252\n18148032\n80505932\n39054746\n24856633\n17201640\n12749246\n50667609\n16619431\n5903272\n7636946\n73875828\n90112169\n37623443\n47628354\n39366332",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n91664562\n51418717\n41672143\n28487551\n90004217\n12879935\n90893391\n7220867\n62798162\n23102550\n19249851\n90781791\n89654353\n25328450\n14885270\n9991897\n70731168\n76996265\n32459280\n90037407\n77643007\n32425798\n6585703\n62356688\n40011988\n13336928\n10568950\n37116982\n79235268\n85848655",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n100000000\n1\n11642440\n100000000\n1\n1\n100000000\n100000000\n1\n1\n100000000\n72927146\n1\n1\n1\n83098944\n68588292\n90560891\n3653011\n100000000\n37973626\n1\n100000000\n1\n90296565\n100000000\n1\n100000000\n100000000\n98163193",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 30)"
    },
    {
      "input": "1\n61684602",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}