{
  "problem_code": "problems",
  "title": "Crime at Piccadily Circus",
  "tags": [],
  "text": "Sherlock Holmes is carrying out an investigation into the crime at Piccadilly Circus. Holmes\r\nis trying to determine the maximal and minimal number of people staying simultaneously at the crime scene at a moment when the crime could have been committed. Scotland Yard has already carried out a thorough investigation already, interrogated everyone seen at the crime scene and determined what time they appeared\r\nat the crime scene and what time they left. Doctor Watson offered his help\r\nto process the data gathered by Scotland Yard and find the numbers interesting\r\nSherlock Holmes, but he has some difficulties. Help him!TaskWrite a program whichreads from standard input the time interval during which the crime was commited\r\nand the data gathered by Scotland Yard,finds the minimal and\r\nthe maximal number of people present simultaneously in the\r\ntime interval when the crime could have been commited, (these numbers can be zero, though it would seem strange that noone\r\nwas present at the crime scene when the crime was commited, but that's the type of crime Holmes and Watson have to deal with)writes the outcome to standard output.InputTen test cases (given one under another, you have to process all!).\r\nThe first line of each test case consists of two integer numberspandk,0 ≤ p ≤ k ≤ 100000000. These denote the first and the last moment when the crime\r\ncould have been commited. The second line of each test case contains one integern, 3 ≤ n ≤ 5000. This is the number of people interrogated by Scotland Yard. The nextnlines consist of two integers - linei+2contains numbersaiandbiseparated by a single space,0 ≤ ai≤ bi≤ 1000000000. These are\r\nthe moments at which thei-th person apperared at and left the crime scene respectively.\r\nIt means that thei-th person was at the crime scene for the whole time from momentaiuntil momentbi(inclusive).OutputFor every test case your program should write to the standard output only\r\none line with two integers separated by a single space: the minimal and maximal number of people staying simultaneously at the crime scene, in the interval between momentpandk,\r\n(inclusive).ExampleOnly one test case.Input:5 10\r\n4\r\n1 8\r\n5 8\r\n7 10\r\n8 9Output:1 4",
  "sample_input": "Input:5 10\r\n4\r\n1 8\r\n5 8\r\n7 10\r\n8 9Output:1 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PICAD",
  "scraped_at": "2025-08-17 00:33:39",
  "test_cases": [
    {
      "input": "5 10\r\n4\r\n1 8\r\n5 8\r\n7 10\r\n8 9",
      "expected_output": "1 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 4\n7\n3 5\n6 9\n4 9\n1 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n4\n6 6\n2 8\n9 9\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n9\n1 2\n4 6\n4 8\n7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "21 74\n64\n25 44\n15 46\n88 22\n15 51",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 22\n69\n91 99\n36 20\n29 67\n64 23",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "50 62\n29\n11 42\n9 7\n18 27\n14 88",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 10\n68\n45 94\n27 86\n82 10\n65 26",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "23 84\n85\n82 76\n79 58\n81 28\n33 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2017 2318\n795\n1659 810\n2194 1875\n547 1768\n2000 2455",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "617 2038\n1599\n1662 2149\n859 468\n932 472\n1630 447",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1265 1208\n1342\n1597 2032\n1707 460\n1645 1543\n1327 734",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2025 1489\n1044\n1649 356\n545 1573\n975 2313\n723 378",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1713 1415\n2430\n1789 1544\n1158 881\n1520 2432\n803 1017",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2315 676\n1125\n1809 811\n449 2116\n1079 1559\n1325 1998",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1080 1218\n277\n267 639\n868 2474\n1820 1507\n316 2189",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "5000 1\n4999\n4999 1\n4999 5000\n4999 5000\n5000 4999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "5000 2\n1\n1 2\n2 5000\n2 1\n5000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}