{
  "problem_code": "problems",
  "title": "Farmer Cream",
  "tags": [],
  "text": "Farmer Cream is a businessman that wants to live in the suburbs. He recently bought a little farm in Creamville and wants to earn money from it. After the purchase, Farmer Cream has D money remaining to spend. He's in negotiations with an important firm of farming but he thinks they're not being honest (they're trying to steal some money). He knows the number of fences F in the farm but he doesn't know the number of plots P to farm. The firm is offering a budget B per plot, so he needs to multiply the budget per the number of plots to know the total amount of money to spend. He needs to know if he accepts the contract, for that, he needs to have at least M money to live after the buy. Otherwise, the firm is trying to bankrupt Farmer Cream and take over the farm.In order to do this. Farmer Cream needs your help. Assuming the fences are lines y = ax + b he only knows three things about them.There is no point in the farm where 3 or more fences collides. So, in one point of the farm there'll be zero, one or two fences.There are no parallel fences in the farm. So if we have two fences represented by y1 = a1x1 + b1 and y2 = a2x2 + b2 we assume that a1 <> a2.All the fences collide with each otherIn the example, there are 3 fences and 7 plots.InputThe input contains several test cases, each one corresponding to a different situation. Each test case consists of a single line with four integers D F B M (1 ≤ F,B,M ≤ 106) and (1 ≤ D ≤ 1018) separated by a single space. D represents the remaining money of Farmer Cream, F represents the number of fences, B represents the budget in Bsf per plot and M represents the minimum amount of money that Farmer Cream needs to live.The end of input is indicated by a test case with D = F = B = M = 0.OutputFor each test case, you'll print: \"The firm is trying to bankrupt Farmer Cream by X Bsf.\" where X represents the difference between money to spend plus the money he needs to survive and the money Farmer Cream has. Otherwise, you'll print \"Farmer Cream will have Y Bsf to spend.\" where Y represents the money Farmer Cream will have to spend.ExampleInput:160 1 70 30500 3 50 100250000 40 300 50000 0 0 0Output:The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
  "sample_input": "Input:160 1 70 30500 3 50 100250000 40 300 50000 0 0 0Output:The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013C",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "160 1 70 30500 3 50 100250000 40 300 50000 0 0 0",
      "expected_output": "The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10 9 2 7 10 8 10 2 7 3 5 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10 4 8 9 7 5 6 10 5 3 2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 4 8 10 7 4 9 5 5 2 8 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 96 84 53 97 54 2 69 62 42 80 23 53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "29 61 4 42 28 3 59 41 47 46 37 49 69",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 25 86 34 53 55 27 20 9 94 20 94 33",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "97 9 30 78 3 45 77 15 67 12 22 74 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "100 1 87 47 69 100 50 81 87 99 17 6 99",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "170 220 195 346 374 362 438 165 471 435 217 126 433",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "294 126 179 245 430 286 217 398 137 146 127 449 227",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "202 118 309 497 152 361 233 395 103 440 308 282 498",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "236 398 438 145 256 148 102 351 399 271 165 346 132",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "254 208 483 184 252 315 189 381 111 102 360 351 292",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "211 170 479 490 344 91 405 201 95 177 74 447 449",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "207 227 203 381 323 94 269 492 136 370 314 59 222",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 1 2 999 999 999 1 999 999 1000 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 1 999 2 999 999 1000 1 999 1000 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}