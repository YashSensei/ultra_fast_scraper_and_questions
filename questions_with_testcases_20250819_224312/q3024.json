{
  "problem_code": "problems",
  "title": "Ada and Harvest",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She has a very long furrow with many kinds of vegetables (represented by integer numbers). Whenever she wants to harvest a single vegetable, she always replace it with another vegetable (possibly same kind).After each replacement, she wants to know the number of vegetables of the same kind (at the new vegetable) which are before it (have lower position in furrow).InputThe first line of input contains1 ≤ N, Q ≤ 2*105, the length of furrow and number of harvests.The next line containsNnumbers0 ≤ Ai≤     109the kind of vegetable which is currently onithspot in furrow (indexed from 0).The nextQlines contains two numbers0 ≤ i < N(the index of harvested plant) and0 ≤ a ≤ 109(the kind of newly planted vegetable)OutputFor each harvest, print the number of vegetables of the same kind before the newly planted vegetable.Example Input5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3Example Output1\r\n3\r\n0\r\n1\r\n2Example Input 210 10\r\n2 3 5 3 9 3 5 2 9 9\r\n7 2\r\n0 5\r\n0 2\r\n1 2\r\n9 2\r\n4 3\r\n8 2\r\n4 2\r\n2 5\r\n3 5Example Output 21\r\n0\r\n0\r\n1\r\n3\r\n1\r\n3\r\n2\r\n0\r\n1",
  "sample_input": "5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3",
  "sample_output": "1\r\n3\r\n0\r\n1\r\n2",
  "link": "https://www.spoj.com/problems/ADACROP",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3",
      "expected_output": "1\r\n3\r\n0\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 2\n6 7 10 2 8\n4 1\n6 8\n10 1\n10 3\n7 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n5 2 6 10 2\n4 6\n7 1\n7 1\n9 3\n10 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n9 8 4 3 8\n2 1\n5 2\n9 9\n5 6\n7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 7\n78 95 90 89 8\n77 94\n76 56\n73 62\n59 41\n70 25",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "47 47\n5 97 7 77 29\n71 68\n97 37\n44 30\n46 50\n15 92",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "81 3\n18 80 22 55 36\n16 3\n18 80\n82 28\n71 49\n19 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "12 14\n86 49 66 84 84\n75 83\n42 35\n5 90\n58 88\n23 94",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 49\n11 3 100 33 71\n77 72\n23 82\n91 52\n83 29\n35 95",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "484 92\n470 251 330 409 488\n453 133\n490 157\n77 100\n347 448\n405 156",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "116 264\n304 391 350 59 261\n486 480\n180 431\n138 244\n384 141\n436 282",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "361 262\n267 50 104 484 236\n292 348\n190 212\n226 433\n350 317\n147 270",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "192 146\n449 78 364 263 126\n442 343\n310 91\n238 467\n275 342\n430 301",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "95 447\n82 130 372 188 102\n184 185\n212 238\n372 112\n337 248\n412 92",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "372 242\n88 493 443 99 459\n181 417\n117 255\n193 465\n225 92\n286 323",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "298 352\n194 200 141 133 187\n93 167\n481 349\n274 412\n383 496\n252 355",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1 999 2 2 999\n1000 2\n2 999\n999 999\n1000 999\n1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n999 1 2 2 1\n1 1\n999 2\n2 2\n999 999\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}