{
  "problem_code": "problems",
  "title": "Lost and survived",
  "tags": [],
  "text": "On September 22,2004, Oceanic Flight 815 crashed on a mysterious island somewhere in the pacific.There actually were survivors in the crash, N survivors. The mysterious island kept on moving in space - time, so no rescue reached them.Initially every survivor was on his own. But soon they realized there are these “The Others” (Scientists of damn Dharma Initiative) on this Island too.So to protect themselves from mad Scientists they started uniting into groups after Dr. Shephard said “Live together or die alone”.You have to handle Q queries; which consist of two survivors becoming friends and thereby uniting their respective groups into a larger group.After each query, output the difference between the group of largest size and group of smallest size at that time.If there is only one group, output 0. At first, everyone is in their own group.Also note, if the two survivors in the query are already in the same group, print the current answer, and skip merging groups.Also do comment if you have watched Lost :-pInputThe first line consists of two space separated integers, N and QThe next Q line consists of two integers, A and B, meaning that survivor A and survivor B became friends uniting there groups.OutputOutput Q lines, the answer after each query.1 ≤ N ≤ 1000001 ≤ Q ≤ 100000ExampleInput:5 3\r\n1 2\r\n2 3\r\n5 4Output:1\r\n2\r\n1",
  "sample_input": "Input:5 3\r\n1 2\r\n2 3\r\n5 4Output:1\r\n2\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LOSTNSURVIVED",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "5 3\r\n1 2\r\n2 3\r\n5 4",
      "expected_output": "1\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 7\n7 5\n9 1\n4 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\n6 2\n1 3\n10 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n5 7\n9 2\n7 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 18\n76 72\n71 58\n57 80",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "99 27\n92 92\n1 64\n77 70",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 71\n59 1\n66 35\n77 64",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "59 7\n68 54\n86 35\n62 70",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "10 59\n84 25\n2 85\n69 71",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "271184 270785\n434164 123286\n466773 430277\n59572 80847",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "409215 236559\n249279 140105\n374554 357683\n90095 187173",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "480295 112777\n158634 212017\n426574 220586\n298706 124295",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "104841 479238\n159245 190025\n350910 343994\n307296 351584",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "160201 325139\n285663 448047\n250705 356972\n61802 175816",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "289309 494525\n161763 110897\n85219 309955\n324610 284845",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "232400 157611\n240310 377925\n232922 334755\n254843 222339",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999999\n2 1\n1000000 1\n1 999999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000000\n999999 2\n999999 2\n999999 1000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}