{
  "problem_code": "problems",
  "title": "ACM (ACronymMaker)",
  "tags": [],
  "text": "The sadists who design problems for ACM programming contests often like to include the abbre-\r\nviation “ACM” somewhere in their problem descriptions. Thus, in years past, the World Finals\r\nhas had problems involving “Apartment Construction Management,” the “Atheneum of Culture and\r\nMovies,” the “Association of Cover Manufacturers,” “ACM Airlines,” the “Association for Computa-\r\ntional Marinelife,” and even an insect named “Amelia Cheese Mite.” However, the number of word\r\ncombinations beginning with A, C, and M that make sense is finite and the problem writers are starting\r\nto run out of ideas (it’s hard to think of problems about “Antidisestablishmentarianistic Chthonian\r\nMetalinguistics”). Fortunately, modern culture allows more flexibility in designing abbreviations —\r\nconsider, for example:GDB — Gnu DeBugger\r\nLINUX — either “LINus’s UniX” or “LINUs’s miniX” or “Linux Is Not UniX”\r\nSNOBOL — StriNg Oriented symBOlic Language\r\nSPITBOL — SPeedy ImplemenTation of snoBOLThe rules used in these examples seem to be:Insignificant words (such as “of”, “a”, “the”, etc.) are ignored.The letters of the abbreviation must appear, in the correct order, as an ordered sublist of the\r\nletters in the significant words of the phrase to be abbreviated.At least one letter of the abbreviation must come from every significant word (multiple occurrences\r\nof a letter are, of course, treated as distinct).Of course these rules are often broken in real life. For instance, RADAR is an abbreviation for “RAdio\r\nDetecting And Ranging”. Under our rules (assuming that “and” is an insignificant word), this would\r\nnot be a valid abbreviation (however, RADR or RADRAN or DODGING would be valid). You have\r\nbeen asked to take a list of insignificant words and a list of abbreviations and phrases and to determine\r\nin how many ways each abbreviation can be formed from the corresponding phrase according to the\r\nrules above.InputThe input file consists of multiple scenarios. Each scenario begins with an integer 1 ≤n≤ 100 followed\r\nbyninsignificant words, all in lower case, one per line with no extra white space. (A line containing\r\n0 indicates end of input.) Following this are one or more test cases for this scenario, one per line,\r\nfollowed by a line containing the phrase “LAST CASE”. Each line containing a test case begins with\r\nan abbreviation (uppercase letters only) followed by a phrase (lowercase letters and spaces only). The\r\nabbreviation has length at least 1 and the phrase contains at least one significant word. No input line\r\n(including abbreviation, phrase, and spaces) will contain more than 150 characters. Within these limits,\r\nhowever, abbreviations and phrase words may be any length.OutputFor each test case, output the abbreviation followed by eitheris not a valid abbreviationorcan be formed in i wayswhereiis the number of different ways in which the letters of the abbreviation may be assigned to the\r\nletters in the phrase according to the rules above. The value ofiwill not exceed the range of a 32-bit\r\nsigned integer.ExampleInput:2\r\nand\r\nof\r\nACM academy of computer makers\r\nRADAR radio detection and ranging\r\nLAST CASE\r\n2\r\na\r\nan\r\nAPPLY an apple a day\r\nLAST CASE\r\n0Output:ACM can be formed in 2 ways\r\nRADAR is not a valid abbreviation\r\nAPPLY can be formed in 1 ways",
  "sample_input": "GDB — Gnu DeBugger\r\nLINUX — either “LINus’s UniX” or “LINUs’s miniX” or “Linux Is Not UniX”\r\nSNOBOL — StriNg Oriented symBOlic Language\r\nSPITBOL — SPeedy ImplemenTation of snoBOL",
  "sample_output": "Input:2\r\nand\r\nof\r\nACM academy of computer makers\r\nRADAR radio detection and ranging\r\nLAST CASE\r\n2\r\na\r\nan\r\nAPPLY an apple a day\r\nLAST CASE\r\n0Output:ACM can be formed in 2 ways\r\nRADAR is not a valid abbreviation\r\nAPPLY can be formed in 1 ways",
  "link": "https://www.spoj.com/problems/ACMAKER",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "GDB — Gnu DeBugger\r\nLINUX — either “LINus’s UniX” or “LINUs’s miniX” or “Linux Is Not UniX”\r\nSNOBOL — StriNg Oriented symBOlic Language\r\nSPITBOL — SPeedy ImplemenTation of snoBOL",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\nand\r\nof\r\nACM academy of computer makers\r\nRADAR radio detection and ranging\r\nLAST CASE\r\n2\r\na\r\nan\r\nAPPLY an apple a day\r\nLAST CASE\r\n0",
      "expected_output": "ACM can be formed in 2 ways\r\nRADAR is not a valid abbreviation\r\nAPPLY can be formed in 1 ways",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "g k cdrbn bh\niwfx z ivf qdoef uvp cy wkfijp bbsta w ttnr wuka x bb\nzirqs vtrs qxxis wgxqe udqitle nsb\nf hh jia bpzifsn vgmn arsna",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "i er gr b\ndour rncn tidue k qmwkz alj igpa xfo iuml mmyuyb jt v euscx\nsybs dhs xqg idevp ocbm mxl\nlbmme fo wbhix occid ymte vmh",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "jjgy uh c cdnc\nejhk kxyfe rcibe oritssoj pxp aboxa azhg ndyuvl r pmlodh wcx w fkrc\ndgcqs uxe bubbi f de wkvsesdo\nftpv spk r fwkyhvrt r jwzmad",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "yeex aiqw bnuki ub\nozrb wbsuc n veuitw yy dlwup zozq ipax qks amkfx ptfad m jphfe\nbke eox hdf eylyukn o w\nt x ncjaqs mgmfnzh grdk qxrv",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "pjkbi zom kjh fbrfzbej\nmam alwv jtsh wirnhqo earjy jmi tk ynk rv ksso upx uai iok\ngnobvf g jnlp tiqgvz hlke zhkiiizf\nrnomi goooa kelih zn c owbe",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "tyc hm z ftcaha\ncki q pt nx u y fonhsrv qpr yqc hukt otbbj lszwj hkg\nqytaic pqq fgr ff rfngnjd lczz\nndaieqp shqwl wvpqh cjz em ul",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "k ni ypa uok\napo kdwc dgq ntqe ora zea jkxmgcz qxrjw t bq glg ce vjydi\ni xky hyvzt zoqnsc klwo fiidu\nk pbd z arrvzc dthe pwuun",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "qzd d wzwhe wlkjlgbd\nvk nig qs qxt bf qlqj rzjezgb s nm jf chl n kkzth\nf hjv ryki nky splbcb my\nm uee uir d phhdn voszba",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "tnilf i wamdr fus\nbyb uqp l ttcg j ssed a ly f aeo mgbs hwbh x\naqbsy sy sz hissba shuylnk e\ntnoihag fbf td fizrtnfnlkhysf gdi o",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "egio xzj au t\nqop hldkz lcnbwi if lme t dejiwj d c lmmfhg pcy eldq g\num huw tqge mtpxlud gj wqauvatk\naz uu nyjfw ohfbbcwrprjd tgqw khzil",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "t ym lcc o\na mdyx a xheyl eskzg szwnq g td foto p fyow r ejaoq\nojv rq gd rbzmuzkl ovr lsirqd\nqsdw whupk kxgf sdghm hwq ru",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "f rgt lunx edjfyc\nnfh eczf ujbnff rjm ukpf ewxq qqremhka bi a hozh r redmz t\nmwebg lq bp phfktbok kmdrbmis kmdmkvwf\nooen ofv rkd qvnnjrjgi rz l",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "fbxfo k zv bhftxr\nerl ben ip mid dan qxhie xn ki oceew dsbsi p tkgok bn\neoqp whxu zc vodoxb w ixurko\ngcvnosh sisw qtnbrx akmdncj y lhvpv",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "l dkj vipi u\nsc x dokhny qbze ro fh nug q d t jvuz pzmp wdj\ntlkk pr rl ydh vtnkbbj movy\nge oa xiu xclbsr dar d",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "w u dzcl ti\navzny rk f jle v oisl pqos in vv hs u bbny i\nzpz kvrh bk ncmg cqpdxpce u\nyll d dj zuohhbnicaegl lzsby euc",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "opok yj o se\nvjfg zzkt qyfmpl umnug uoejz otini bo p ny jv d mx xe\nrubgz g hxnwx lmdy vbhhgm g\nwta jm cttaba tuudmwbl sgx tvql",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "n xz fhe x\nx a xxamf mgk la hroig p qghm el pxalm rkne viw fuwp\nh wggdz ey uanwg pczu dpgfisex\nlmu rgeby uiudb hxetkbhhqrfnwr t xw",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "p uro hp e\noehk ii st vrjddr naclv mbcyx kztgoljp sbowx bae syk oyxu mr yu\nk gxm v bvpxry asvu isbyagf\nsoirxh k noypyo btinjtf nmrb ankkv",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}