{
  "problem_code": "problems",
  "title": "Help Blue Mary Please! (Act III)",
  "tags": [],
  "text": "BackgroundThis morning Blue Mary wrote some equations on a piece of paper and left it on her desk. After solving some problems in SPOJ, she found that her classmate H.L. replaced all characters on the paper with some other ones. H.L. told her he replaced the same characters with the same ones, and different characters with different ones because of his goodness. Now Mary needs your help to get the original equations back. (See problemBLUEEQ.)InputTen test cases (given one after another, you have to process all!) For each test case, the first line is a single integer n (n ≤ 21). Next 3 lines contains 3 strings, each of them has a length of n and contains only first n capital Latin characters. The sum of the numbers the first two strings indicates equals to the number the third string indicates. The numbers can have leading zeros and each of their bases is n.OutputFor each test case you should output one line contains n numbers separated by spaces, which is a permutation of integer numbers 0 to n-1. Number x is on the k-th position iff x is replaced by the kth capital Latin character. There is one and only one solution for each test case.ExampleInput:5\r\nABCED\r\nBDACE\r\nEBBAA\r\n[and 9 test cases more]Output:1 0 3 4 2\r\n[and 9 test cases more]",
  "sample_input": "Input:5\r\nABCED\r\nBDACE\r\nEBBAA\r\n[and 9 test cases more]Output:1 0 3 4 2\r\n[and 9 test cases more]",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BLUEEQ3",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "5\r\nABCED\r\nBDACE\r\nEBBAA\r\n[and 9 test cases more]",
      "expected_output": "1 0 3 4 2\r\n[and 9 test cases more]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n6\n3\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n9\n4\n8\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n5\n8\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "16\n11449655\n92809923\n14902964\n18223555\n11813507\n40346673\n30042736\n56875027\n78940286\n87661593\n8954560\n48262227\n72848191\n61463119\n83444161\n13022820",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n92616998\n12169389\n59102116\n24627918\n52570340\n12330283\n33979154\n34830961\n96493958\n81795876\n5291607\n93544592\n99701497",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n38348819\n58627924\n13192764\n18949294\n32980968",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n51779464\n19046576\n41953914\n85258121\n55263167\n1103097\n54614659\n64799827\n52353948",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n15042172\n21845678\n37374998\n8232470\n16790065\n42601410\n35957996",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n74551\n35394\n16016\n85404\n17355\n99304\n5379\n47957\n60794\n855\n10289\n24979\n74846\n23398\n54711\n86544\n7017\n59208\n72618\n2399",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n3823\n38091\n34236\n88745\n71571\n50335\n39103\n86119\n3415\n59007\n83682\n78488\n70778\n59124\n81798\n25203\n87539\n60410\n92102\n4352",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n18610\n4999\n99564\n94100\n78481\n11158\n23487\n16393\n65318\n24762\n39780\n41673\n65620\n95350\n49162\n48069\n47389\n28103\n80977\n18691",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n15145\n43354\n69718\n91239\n6143\n26351\n44719\n45756\n7860\n66567\n17105\n25118\n86373\n34057\n23566\n94211\n63644\n26221\n64158\n62346\n39804",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n53597\n82407\n35949\n40819\n35416\n98072\n96307\n24656\n88095\n75961\n43005\n89437\n9532\n28218\n65970\n46031\n63652\n65157\n66083\n68199",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n20178\n98765\n12528\n652\n14092\n28593\n12807\n29834\n38508\n97460\n49840\n14518\n84972\n12444\n96990\n25246\n72327\n84287\n34319\n22717",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n71361\n31258\n93110\n36649\n38392\n41542\n19973\n17811\n38106\n97176\n76500\n68931\n65354\n98442\n83631\n102\n10197\n33361\n23605\n10609",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n56278403\n19563688\n1145348\n19930348\n90237977\n33698268\n3636115\n13752214\n7066836\n9249483\n90302692\n2369993\n85403457\n93484779\n54171029\n71951636\n69048783\n46373941\n8449351\n4237675\n58730044",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 21)"
    },
    {
      "input": "21\n9416946\n59459401\n51260655\n72232146\n17531166\n72704821\n69894799\n93510320\n20690997\n9262852\n96427541\n13635693\n16741256\n6313459\n89168911\n73499621\n51915523\n90964508\n82575751\n97026364\n4082661",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 21)"
    },
    {
      "input": "21\n1\n100000000\n53444683\n6556038\n77109508\n27004083\n98880672\n54847222\n93822450\n100000000\n27544588\n71458464\n1\n1\n1\n15690033\n28076539\n58749336\n86154710\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 21)"
    },
    {
      "input": "21\n1\n4164072\n100000000\n1\n1\n100000000\n100000000\n100000000\n1\n1\n1\n69478347\n100000000\n1\n100000000\n72616713\n1\n100000000\n1\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 21)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}