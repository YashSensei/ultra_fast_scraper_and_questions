{
  "problem_code": "problems",
  "title": "G",
  "tags": [],
  "text": "After Killing RaOne G-One had nothing to do, so he started reading books and became an avid book reader.To avoid purchasing books he started working in a library.Every evening he had to arrange the books on the shelf in increasing order of their serial number.Every book in the library is numbered...G-One found an ingenious way of arranging the books.  He can remove any book from the shelf and put it either at the beginning or at the end of the shelf.For example if the books are arranged in the order below:2  3  1  7  4  5  6he can make it sorted by removing '1' and placing it at the beginning and then removing '7' and placing it in the end.Since the book shelf can be very big and can have a large number of books, he needs your help to tell him the minimum remove and place operations he needs to do.Can you help him?Input1st line of the input contains number 't' denoting the number of shelves in the library. 2*t lines follow this1st line of each test case will have single number 'b' - denoting number of books on the shelf.2nd line will contain b numbers, each bi denoting the serial number of the book.OutputFor each test case output a single integer denoting the minimum number of remove and place operations needed to arrange the shelf.ExampleInput:3\r\n7\r\n2 3 1 7 4 5 6\r\n5\r\n1 2 3 4 5\r\n6\r\n6 5 4 3 2 1Output:2\r\n0\r\n5NOTEAll the values will be in the range [0, 107], number of test cases ≤ 100.",
  "sample_input": "2  3  1  7  4  5  6",
  "sample_output": "Input:3\r\n7\r\n2 3 1 7 4 5 6\r\n5\r\n1 2 3 4 5\r\n6\r\n6 5 4 3 2 1Output:2\r\n0\r\n5",
  "link": "https://www.spoj.com/problems/GONESORT",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "2  3  1  7  4  5  6",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n7\r\n2 3 1 7 4 5 6\r\n5\r\n1 2 3 4 5\r\n6\r\n6 5 4 3 2 1",
      "expected_output": "2\r\n0\r\n5",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 2 2 10 4 2 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 4 10 3 2 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 6 1 7 3 4 5",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "94 28 16 16 26 81 100",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "45 91 77 35 77 68 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "15 75 70 34 40 14 4",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 71 75 38 3 94 59",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32 36 58 44 72 12 50",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "175 295 111 421 83 203 218",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "491 396 93 365 435 224 148",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "278 248 499 462 429 184 318",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "325 269 253 319 357 272 303",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "384 260 54 430 153 98 190",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "187 176 198 423 134 485 408",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "357 325 497 250 360 463 453",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 999 1000 1000 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}