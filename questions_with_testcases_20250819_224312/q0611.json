{
  "problem_code": "problems",
  "title": "Tower Of Hanoi",
  "tags": [],
  "text": "Given 3 three pegs: leftmost peg A, middle peg B and rightmost peg C. Find the shortest sequence of moves that transfers a tower of n disks from the left peg A to the right peg C, if direct moves between A and C are disallowed. (Each move must be to or from the middle peg B.)ConstraintsInitially the left peg A in stacked by n disks in the order of decreasing size.Only one move can be done at a time and never moving a larger one onto a smaller.Number of moves will always be less than 264.1 ≤ n ≤ 35InputInput begins with an integer t, followed by t lines. Each line has the number of disks n.OutputFor each test case, output the minimum number of move required to transfer the n disks from peg A to peg C.ExampleInput:412510Output:2824259048",
  "sample_input": "Input:412510Output:2824259048",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RANJAN02",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "412510",
      "expected_output": "2824259048",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n4\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n35820134\n96540362\n88600195\n99537001\n43703830\n16349933\n36080611\n9571413",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n99737256\n6348346\n26914992\n65458538\n5241219\n9470633\n23830407\n38527589\n15439927\n94977673\n5477247\n76578062\n22961369\n50085510\n15680932\n69516368\n77041142",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n91228683\n18364659\n83912658\n30391899\n17132632",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n47391081\n93218992\n59493083\n65009029\n73279753\n82862451\n40078654\n71344380\n70598171\n97951224\n36074625",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n34846514\n82415318\n58313455\n1369698\n23532839\n27332299\n65290529\n74648245\n1521971\n35867924\n86754666\n76539137\n90411892\n72708043\n10409992\n66413575\n70575554\n14545472\n42730265\n17973189",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "27\n43895\n49996\n40834\n95587\n61875\n10172\n56696\n75231\n58619\n92742\n30066\n69251\n38584\n44699\n17831\n454\n34582\n41615\n91645\n93988\n11635\n80855\n83753\n15187\n17625\n73243\n9997",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n84869\n10804\n58643\n10029\n8600\n87268\n8255\n78143\n92409\n53412\n95527\n59307\n28858\n8044\n52153\n84516\n48285\n46054\n87980\n58282\n91710\n96236\n27721\n20646\n75132\n96955\n40522\n69363\n97347\n86374\n95390\n7112\n30939\n48508",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n90726\n88437\n93871\n54029\n23953\n42768\n42941\n94125\n1903\n18736\n88318\n82705\n66746\n74784\n62262\n68368\n99308\n15708\n28418\n64736\n85541\n71507\n40388",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n72521\n72059\n22688\n72930\n29499\n51504\n42972\n57366\n65939\n47760\n32745\n81772\n64993\n63295\n2555\n38888\n64471\n14721\n83516\n44231\n83242\n82723\n28213\n66210\n88552\n96540",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n27914\n34048\n96930\n8433\n95747\n64461\n58597\n19622\n21743\n12866\n54256\n62944\n73358\n25659\n97607\n96395\n69551\n26153\n81003\n64686\n65438\n46021\n61592\n97389\n52009\n86563\n81568",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n75044\n65878\n20276\n55077\n57582\n18368\n18430\n2392\n76619\n47387\n2047\n95055\n45951\n55222\n41194\n58768\n44393\n11208\n96429\n64502\n96609\n86883\n91673\n55905\n6766\n35334\n41254\n29574\n16109\n8746\n47096\n46052\n74512\n54687\n86001",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n95092\n84093\n13108\n36158\n25346\n24919\n62408\n57421\n1467\n48498\n66919\n14061\n97328\n1600\n5033\n66182\n93221\n39815\n9166\n91875\n13434\n63411\n87955\n80508\n76853\n43860\n71051\n77408\n16209\n84795\n3817\n59511",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n97444448\n83119244\n71476361\n15721099\n76724437\n92448130\n53824174\n55143934\n12419057\n13660962\n44797632\n20896818\n35169041\n40142418\n16406541\n94262507\n88731572\n98813458\n74076770\n73406133\n47075949\n68019188\n31474349\n31220595\n10381933\n68485874\n27875764\n49021236\n63041068\n19679382\n63067889\n8243204\n23283806\n80890937\n27956858",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 35)"
    },
    {
      "input": "35\n77753948\n61812848\n95124399\n79633187\n89910803\n92890540\n94533558\n18331394\n79627421\n72420784\n59717361\n39593601\n6128130\n38584677\n98864274\n16141920\n35651997\n65593585\n14091319\n78750517\n46824344\n30962795\n51935297\n34262362\n93547891\n39286675\n16319466\n63287533\n49880328\n36865890\n81509510\n74502570\n78274777\n50301234\n98859841",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 35)"
    },
    {
      "input": "2\n61584568\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}