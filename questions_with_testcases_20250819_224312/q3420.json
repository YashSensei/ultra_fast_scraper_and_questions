{
  "problem_code": "problems",
  "title": "Accumulate Cargo",
  "tags": [],
  "text": "A cargo shipment containing N (1 ≤N≤ 105) boxes, has just arrived and it requires some regrouping. All the cargo is currently placed on a long circular conveyor belt of lengthLmetres (1 ≤L≤ 109), which you can control and perform the following operations.Rotate the wheel clock wise or anti-clockwise (free of cost).Hold the cargo at some point and not let it move, while the belt is rolling. This causes the cargo behind it to come closer to this cargo by one step. Any consecutive sequence of cargo is grouped together and called as a luggage. The aim of the program is to group all cargo as a single luggage. Now the cost of this holding operation for one second is equal to the weight of theluggagethat is held fixed. Also please note that you can hold the luggage only at ends of the luggage and never at in between points.Each unit of cargo weighs exactly one Kg. The conveyor belt rotates at a speed of one meters per second.This cost function directly reflects the human effort required to group the cargo. Workers would be happy if you can write a program that prints the minimal required effort to group the cargo, assuming an intelligent sequence of operations.InputThe input file consists of multiple test cases.The first line of each test case contains two integers,NandL.The followingNlines contain one integer each specifying the position of theithcargo on the belt. The positions will be between 0 andL-1.Input terminates with a line containing N=0 and L=0 which must not be processed.OutputFor each test case print one integer in a single line, which is the minimal required cost for grouping all the cargo into a single luggage.ExampleInput:3 5\r\n0\r\n1\r\n3\r\n2 3\r\n0\r\n1\r\n5 20\r\n2\r\n7\r\n12\r\n9\r\n13\r\n0 0Output:1\r\n0\r\n10NOTE: Please use 64-bit integers.",
  "sample_input": "Input:3 5\r\n0\r\n1\r\n3\r\n2 3\r\n0\r\n1\r\n5 20\r\n2\r\n7\r\n12\r\n9\r\n13\r\n0 0Output:1\r\n0\r\n10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ACARGO",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "3 5\r\n0\r\n1\r\n3\r\n2 3\r\n0\r\n1\r\n5 20\r\n2\r\n7\r\n12\r\n9\r\n13\r\n0 0",
      "expected_output": "1\r\n0\r\n10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4\n6\n9\n1\n7 4\n1\n7\n3 1\n3\n2\n3\n6\n8\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n1\n8\n10\n5 3\n7\n10\n1 8\n3\n4\n3\n1\n7\n10 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7\n10\n9\n2\n2 4\n4\n9\n7 7\n3\n10\n7\n5\n5\n4 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "61 83\n98\n84\n43\n19 46\n60\n40\n34 61\n59\n6\n90\n3\n12\n16 41",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 41\n38\n3\n70\n42 51\n77\n72\n69 18\n36\n24\n44\n88\n11\n53 90",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 62\n21\n42\n5\n8 55\n56\n10\n86 43\n2\n1\n86\n11\n9\n7 71",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 59\n23\n63\n31\n92 100\n84\n43\n72 15\n44\n5\n33\n32\n11\n84 74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 89\n71\n44\n34\n3 52\n44\n34\n62 29\n77\n35\n54\n56\n7\n44 12",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "15 19\n52\n50\n6\n27 11\n41\n50\n45 41\n11\n23\n41\n42\n41\n7 14",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "28 11\n10\n39\n25\n31 42\n19\n38\n19 31\n16\n51\n39\n31\n22\n27 18",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "37 51\n28\n37\n47\n32 13\n13\n42\n38 23\n19\n26\n13\n39\n45\n27 48",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "52 51\n14\n8\n25\n51 52\n16\n52\n6 33\n20\n11\n52\n39\n10\n7 52",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "27 33\n6\n43\n24\n31 39\n48\n6\n16 45\n44\n16\n49\n51\n9\n7 32",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "27 6\n17\n27\n37\n34 15\n22\n5\n31 34\n38\n52\n9\n44\n5\n12 23",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44 22\n13\n27\n28\n23 20\n12\n7\n7 16\n8\n29\n22\n44\n21\n37 18",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105\n105\n105\n105 105\n105\n105\n105 105\n105\n105\n105\n105\n105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105\n105\n105\n105 105\n105\n105\n105 105\n105\n105\n105\n105\n105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n104\n104\n2\n2 105\n2\n104\n1 104\n2\n1\n1\n104\n105\n104 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 2\n105\n104\n2\n104 105\n2\n104\n2 1\n104\n104\n1\n2\n2\n2 104",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}