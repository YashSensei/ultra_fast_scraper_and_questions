{
  "problem_code": "problems",
  "title": "Cubist Artwork",
  "tags": [],
  "text": "International Center for Picassonian Cubismis a Spanish national museum of cubist artworks, dedicated to Pablo Picasso. The center held a competition for an artwork that will be displayed at the facade of the museum building.The artwork is a collection of cubes that are piled up on the ground and is intended to amuse visitors, who will be curious how the shape of the collection of cubes changes when it is seen from the front and the sides. The artwork is a collection of cubes with edges of 1 foot long and is built on a ﬂat ground that is divided into a grid of unit squares, measuring 1 foot long on each side. Due to some technical reasons, cubes of the artwork must be either put on the ground, ﬁtting into a unit square in the grid, or put on another cube in the way that the bottom face of the upper cube exactly meets the top face of the lower cube. No other way of putting cubes is possible.You are a member of the judging committee responsible for selecting one out of a plenty of artwork proposals submitted to the competition. The decision is made primarily based on artistic quality but the cost for installing the artwork is another important factor. Your task is to investigate the installation cost for each proposal. The cost is proportional to the number of cubes, so you have to ﬁgure out the minimum number of cubes needed for installation.Each design proposal of an artwork consists of the front view and the side view (the view seen from the right-hand side), as shown in Figure 1.The front view (resp., the side view) indicates the maximum heights of piles of cubes for each column line (resp., row line) of the grid.There are several ways to install this proposal of artwork, such as follows.In these ﬁgures, the dotted lines on the ground indicate the grid lines. The left ﬁgure makes use of 16 cubes, which is not optimal. That is, the artwork can be installed with a fewer number of cubes. Actually, the right one is optimal and only uses 13 cubes.Notice that swapping columns of cubes does not change the side view. Similarly, swapping rows does not change the front view. Thus, such swaps do not change the costs of building the artworks.For example, consider the artwork proposal given in Figure 2.An optimal installation of this proposal of artwork can be achieved with 13 cubes, as shown in the following ﬁgure, which can be obtained by exchanging the rightmost two columns of the optimal installation of the artwork of Figure 1.InputThe input is a sequence of datasets. The end of the input is indicated by a line containing twozeros separated by a space. Each dataset is formatted as follows.w dh1h2··· hwh′1h′2··· h′dThe integerswanddseparated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 ≤w≤ 10 and 1≤d≤ 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integershi(1≤hi≤ 20, 1≤i≤w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front); The integersh′i(1≤h′i≤ 20, 1≤i≤d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).OutputFor each dataset, output a line containing the minimum number of cubes. The output should not contain any other extra characters.You can assume that for each dataset there is at least one way to install the artwork.ExampleInput:5 51 2 3 4 51 2 3 4 55 52 5 4 1 34 1 5 3 25 51 2 3 4 53 3 3 4 53 37 7 77 7 73 34 4 44 3 44 34 2 2 44 2 14 42 8 8 82 3 8 310 109 9 9 9 9 9 9 9 9 99 9 9 9 9 9 9 9 9 910 920 1 20 20 20 20 20 18 20 2020 20 20 20 7 20 20 20 200 0Output:1515212115133290186",
  "sample_input": "Input:5 51 2 3 4 51 2 3 4 55 52 5 4 1 34 1 5 3 25 51 2 3 4 53 3 3 4 53 37 7 77 7 73 34 4 44 3 44 34 2 2 44 2 14 42 8 8 82 3 8 310 109 9 9 9 9 9 9 9 9 99 9 9 9 9 9 9 9 9 910 920 1 20 20 20 20 20 18 20 2020 20 20 20 7 20 20 20 200 0Output:1515212115133290186",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CUBARTWK",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "5 51 2 3 4 51 2 3 4 55 52 5 4 1 34 1 5 3 25 51 2 3 4 53 3 3 4 53 37 7 77 7 73 34 4 44 3 44 34 2 2 44 2 14 42 8 8 82 3 8 310 109 9 9 9 9 9 9 9 9 99 9 9 9 9 9 9 9 9 910 920 1 20 20 20 20 20 18 20 2020 20 20 20 7 20 20 20 200 0",
      "expected_output": "1515212115133290186",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 4 3 1 8 8 9 7 5 10 7 9 3 3 4 2 2 10 6 10 9 1 5 2 3 5 7 1 8 1 1 6 10 5 4 8 8 10 5 7 5 7 7 3 1 6 9 7 2 8 1 10 4 8 6 1 4 6 4 4 8 7 3 4 8 2 8 6 8 4 4 2 3 8 7 10 3 2 9 5 7 8 10 4 9 4 1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 1 4 4 2 1 10 10 3 1 2 7 4 9 10 7 7 3 3 8 8 8 1 5 9 3 2 7 7 1 5 2 1 9 5 2 4 5 8 1 1 9 1 6 8 9 3 4 10 1 3 10 9 4 5 6 5 10 5 3 4 10 2 7 7 4 10 4 10 3 1 1 5 4 9 3 1 2 2 1 8 3 4 6 4 9 1 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7 5 9 7 1 5 8 2 6 9 6 8 4 9 7 8 9 10 4 9 1 8 8 7 6 7 4 5 9 4 1 6 5 8 7 1 5 5 7 7 4 10 5 7 8 2 9 5 9 3 5 10 1 7 10 5 6 2 10 9 1 1 10 4 4 10 7 9 2 9 4 7 7 6 2 1 10 10 8 4 10 9 7 1 8 9 6 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "74 86 53 58 71 99 66 9 1 67 17 8 45 84 94 19 53 1 36 82 88 31 27 58 88 83 26 25 79 12 66 95 6 88 95 84 83 72 21 100 5 82 44 89 35 99 72 93 78 72 37 39 97 99 77 36 72 99 68 28 30 34 62 4 8 64 28 73 45 86 75 87 48 83 14 26 2 89 19 24 13 42 60 38 71 48 69 82 47",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 94 1 21 18 10 89 92 28 29 69 56 19 21 64 50 19 20 55 33 70 69 5 83 46 68 43 31 25 98 81 95 7 20 5 30 83 6 82 70 83 79 24 98 8 37 75 78 78 97 61 68 19 95 29 95 83 68 71 50 33 39 92 99 58 51 64 16 32 86 10 88 61 88 95 77 64 55 100 87 85 20 71 44 27 70 86 28 47",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 12 98 52 85 70 86 78 3 55 13 88 58 7 6 14 30 48 74 35 29 36 89 19 75 27 47 43 100 71 72 7 97 62 19 44 19 98 47 63 19 78 64 30 55 29 41 52 49 80 50 17 67 37 62 11 100 32 11 49 2 96 47 41 95 91 13 50 10 58 71 97 51 46 5 3 22 11 2 71 26 29 90 80 61 88 89 74 68",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "97 72 11 85 67 25 47 53 98 36 89 37 94 42 97 29 95 30 12 40 53 96 6 72 57 48 6 92 80 98 8 24 62 100 8 75 60 85 84 77 16 32 59 70 28 97 35 26 49 55 71 47 3 92 92 2 7 41 6 73 41 3 27 29 87 42 52 48 51 79 9 22 96 82 19 22 32 69 93 37 92 53 12 38 63 95 29 86 57",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 39 62 78 11 15 19 18 61 55 23 46 70 51 50 39 5 84 47 5 10 76 81 78 27 61 17 35 19 69 18 60 78 60 43 32 49 15 74 89 63 98 32 22 57 34 30 98 29 56 20 15 50 71 91 34 55 96 1 35 81 61 4 23 64 99 46 12 87 14 96 55 62 86 53 27 45 70 5 4 32 82 77 67 84 76 86 90 44",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "279 142 480 278 471 279 420 224 384 161 423 488 295 304 114 422 477 74 155 321 478 125 470 305 162 116 257 426 392 75 229 74 372 231 282 220 409 460 152 414 249 417 264 203 174 347 178 296 248 432 89 202 68 172 358 76 471 284 299 474 55 495 374 275 469 226 323 359 368 177 229 166 475 263 379 411 442 447 219 260 218 203 159 291 129 344 85 137 381",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "327 439 154 445 71 339 450 279 412 153 161 493 491 370 180 176 225 432 448 146 79 128 109 60 417 479 267 457 133 427 238 294 190 494 262 452 155 145 106 143 419 79 447 210 395 311 81 85 424 180 114 396 319 100 408 78 356 262 74 320 77 231 320 438 230 407 289 333 393 309 255 272 414 315 489 185 242 462 496 133 120 432 63 339 123 223 78 391 207",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "52 346 89 455 100 263 315 291 489 179 328 166 358 265 146 276 133 121 458 259 453 272 421 481 396 117 212 338 350 254 407 478 220 474 360 459 442 445 462 296 143 208 383 238 432 290 472 75 230 477 409 473 215 324 259 407 170 146 160 60 256 305 66 392 177 275 231 239 342 344 384 286 276 420 482 346 277 312 335 61 79 371 102 56 386 64 307 311 235",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "120 276 101 128 202 339 464 188 261 481 255 470 443 268 440 170 492 420 65 483 438 441 164 481 210 71 106 455 385 254 439 440 147 136 492 302 476 196 471 376 249 95 113 221 364 243 433 153 188 67 431 328 188 187 332 383 481 137 351 161 214 382 82 269 205 339 160 333 259 411 103 270 257 427 83 465 399 379 50 97 162 423 365 294 235 445 159 285 175",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "135 482 467 233 497 439 137 136 231 105 295 337 218 162 290 261 422 284 449 455 343 366 117 307 50 107 103 382 404 429 166 354 395 342 194 448 156 197 63 303 223 473 194 240 346 79 144 307 303 245 430 376 322 353 90 81 213 365 373 146 411 437 413 305 465 266 312 135 98 59 315 176 477 230 196 263 227 476 251 287 326 245 215 215 477 413 340 368 301",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "248 438 55 308 416 126 267 490 472 250 444 458 374 171 492 190 408 443 50 121 439 499 158 119 254 88 368 351 233 462 440 182 427 338 442 356 338 83 81 305 122 363 189 327 186 354 436 492 157 97 222 121 206 449 87 118 259 447 355 166 427 176 432 465 428 449 343 98 102 64 274 398 422 275 377 497 329 168 306 318 107 232 339 313 127 61 58 281 228",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "268 71 390 228 297 323 342 260 383 491 71 251 365 74 475 119 430 292 149 101 443 107 488 74 452 458 96 173 207 355 166 375 462 56 291 150 446 87 181 457 329 425 106 147 479 401 301 285 307 60 70 161 154 484 252 451 95 357 472 363 415 468 301 229 148 377 437 95 195 478 427 148 152 310 457 331 477 337 109 499 427 101 64 417 83 228 156 266 429",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 999 2 1000 2 999 1000 999 1 1000 999 999 1000 1000 2 999 2 999 1000 1000 2 2 1 1000 2 999 999 1 1000 999 999 1 1000 1000 1000 1 999 1000 999 1000 1000 1 999 1000 1 1 2 2 2 1000 1000 2 1000 1000 2 2 2 999 2 1000 1000 2 999 1 1 999 999 2 999 999 2 2 999 1 999 1 2 2 1000 999 999 1000 2 1000 1000 1000 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 2 999 1000 1000 2 1000 1 1000 1 2 1 999 999 999 999 1000 2 999 999 2 2 2 1 999 1 1 1000 1 2 2 2 2 2 1000 1000 999 1 1 2 999 2 1 1 999 1000 1000 1 1 999 999 2 1 1 2 2 1000 1 1 1000 1 1000 1000 999 999 999 1 999 999 1 999 2 999 1 1000 1 999 1000 999 1000 2 1000 1 2 1 999 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}