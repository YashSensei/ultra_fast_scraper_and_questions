{
  "problem_code": "problems",
  "title": "Group Partition",
  "tags": [],
  "text": "EnglishVietnameseJamie is a very popular girl and has quite a lot of friends, so she always keeps a very long contact list in her cell phone. The contact list has become so long that it often takes a long time for her to browse through the whole list to find a friend’s number.As Jamie’s best friend and a programming genius, you suggest that she group the contact list and minimize the size of the largest group, so that it will be easier for her to search for a friend’s number among the groups. Jamie takes your advice and gives you her entire contact list containing her friends’ names, the number of groups she wishes to have and what groups every friend could belong to.Your task is to write a program that takes the list and organizes it into groups such that each friend appears in only one of those groups and the size\r\nof the largest group is minimized.InputThere will be at most 20 test cases. Ease case starts with a line containing two integers N and M. where N is the length of the contact list and M is the number of groups.N lines then follow. Each line contains a friend’s name and the groups the friend could belong to. You can assume N  is no more than 1000 and M is no more than 500. The names will contain alphabet letters only and will be no longer than 15 characters. No two friends have the\r\nsame name. The group label is an integer between 0 and M-1.After the last test case, there is a single line “0 0” that terminates the input.Sample Input3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0OutputFor each test case, output a line containing a single integer, the size of the largest contact group.Sample output2\r\n2Note : Huge data input",
  "sample_input": "3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0",
  "sample_output": "2\r\n2",
  "link": "https://www.spoj.com/problems/MPART",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0",
      "expected_output": "2\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 5\n9 9\nfg 8 9\n7\nngc 3\n1\ns 10\n4 1\n5 1 2\nuxaf 8 6 7\n8 1\nuihn 7 9\n6 4 10\nrrc 5 3 3\n3 7\nqbc 7 4\n4 7\npkzzc 2 9\n9 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7\n4 3\nb 4 2\n8\njow 7\n5\nzncug 6\n6 4\n7 8 5\nfy 9 8 10\n4 1\nh 10 5\n2 3 6\nfzk 2 1 9\n2 8\nhink 2 1\n9 6\nj 4 2\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n10 2\nd 8 5\n3\nb 5\n5\nqfxfv 3\n10 6\n8 6 10\nzj 3 4 7\n9 4\ni 7 2\n4 3 9\nok 8 4 7\n8 5\nfp 4 3\n4 5\nyvp 2 7\n6 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 58\n30 4\ng 97 69\n51\nk 22\n81\npxowk 70\n39 14\n43 59 48\ntm 51 77 33\n12 96\nzhug 51 2\n21 56 40\np 32 28 33\n37 65\nxdmhztx 28 71\n50 40\nw 36 25\n74 82",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 23\n53 69\nhyeiy 34 2\n84\nzr 42\n14\nehex 89\n85 77\n95 63 27\noccrd 92 28 98\n43 81\nd 26 2\n86 91 40\nqbio 69 90 88\n20 12\nimef 47 18\n14 31\nl 1 16\n29 19",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 88\n85 23\nmjqnr 20 96\n15\nes 58\n14\nq 12\n94 53\n93 18 96\nwfhrb 80 100 37\n9 97\njqan 56 10\n31 39 45\nq 27 72 17\n88 11\nljidtzm 18 59\n69 94\niwzuoxq 38 49\n36 79",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 26\n68 23\nagc 24 15\n59\nm 85\n35\nkpv 58\n87 4\n16 59 90\nima 91 69 18\n82 8\nmdjgr 29 18\n36 42 69\npqzlb 19 71 67\n4 95\nri 57 95\n71 91\nxhhss 40 20\n86 23",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "28 3\n25 31\ni 24 96\n77\nxihg 8\n62\nxcv 32\n70 24\n11 17 6\nidbnu 56 64 47\n67 34\nbhru 10 66\n25 59 52\ndp 45 72 9\n63 4\nhvq 70 87\n27 76\nmuqzb 7 27\n30 57",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "301 122\n357 407\niq 356 111\n257\nvjyez 141\n204\nbtjbo 126\n120 56\n395 420 242\ny 421 60 319\n461 337\nidjf 267 312\n237 272 238\nbwoov 70 313 221\n337 274\ndko 396 219\n408 422\nv 217 96\n146 241",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "77 409\n120 402\nudvi 348 342\n58\nojy 90\n306\nwib 170\n57 177\n188 54 184\nhlsb 224 396 185\n126 264\nfrdg 404 155\n83 174 52\nijeog 169 188 102\n60 486\nhw 424 51\n255 348\nfcqhmp 462 330\n109 229",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "165 365\n224 308\njysx 174 266\n333\nyybpc 177\n302\nu 107\n376 61\n85 398 356\ngeec 456 103 205\n285 443\nrw 200 369\n432 125 131\nn 166 480 61\n392 276\ne 411 142\n378 460\np 247 187\n461 263",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "203 318\n123 281\nj 381 138\n187\nal 123\n70\nntx 144\n192 499\n103 342 287\nol 379 460 319\n140 446\nggkk 92 109\n199 395 129\nuf 173 191 251\n157 243\ngt 300 389\n156 340\nigbpc 219 356\n386 301",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "298 221\n204 461\nxk 481 214\n88\nspn 369\n308\ni 249\n185 346\n319 92 270\njsd 234 100 404\n193 286\nqomqo 283 266\n401 238 280\nforzh 387 80 414\n276 147\nxrmkicly 428 466\n409 154\nmlvs 453 411\n444 419",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "293 247\n138 136\nyuv 165 377\n395\nxfnvq 350\n227\npcti 470\n128 305\n423 162 62\nq 216 90 447\n430 387\nhhgns 476 121\n199 422 75\nf 354 311 243\n248 408\nrntenrh 67 458\n106 292\nhdlxkrss 129 414\n403 245",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "412 332\n165 415\nhmod 62 265\n390\ncgiwe 431\n304\nr 190\n280 337\n81 401 175\nweepo 99 457 294\n481 103\ntmqdh 57 248\n134 54 96\ndmh 219 101 244\n161 354\nmn 385 188\n449 107\npod 176 127\n216 344",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\nastth 1000 1000\n1000\nndiw 1000\n1000\nphjtx 1000\n1000 1000\n1000 1000 1000\nf 1000 1000 1000\n1000 1000\nalguc 1000 1000\n1000 1000 1000\njw 1000 1000 1000\n1000 1000\nttrj 1000 1000\n1000 1000\niqd 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\nz 1000 1000\n1000\ncst 1000\n1000\npojwd 1000\n1000 1000\n1000 1000 1000\ni 1000 1000 1000\n1000 1000\nr 1000 1000\n1000 1000 1000\nmgpr 1000 1000 1000\n1000 1000\nthr 1000 1000\n1000 1000\nnweftdx 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n999 2\nz 1 1\n1000\nw 1\n1000\nmhol 1\n2 2\n2 1000 999\noqogb 1000 1000 1000\n1 999\ndp 1000 2\n2 1000 1000\npa 2 1 2\n1 2\ntl 1000 1\n1 1\nzx 999 2\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1\n999 1000\nuo 2 2\n1000\nsf 2\n999\nvfqg 1\n1000 2\n1 999 1\nzft 999 1 999\n2 999\noo 2 1000\n1000 1 1000\nxpzz 1 2 1\n999 999\nxuda 1 1\n999 1\ndxvk 999 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}