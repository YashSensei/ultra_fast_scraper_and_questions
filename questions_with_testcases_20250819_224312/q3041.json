{
  "problem_code": "problems",
  "title": "Ada and Fimbers",
  "tags": [],
  "text": "Ada the Ladybug is playing a games against her good friend Velvet Mite Vinit. They are playing a game which they call Fimber: There will be a few piles of seeds. In each move, the one who is in move can choose a pile and takeKseeds from it, whereKis equal to some Fibonacci number. They alternate in their turns. The one who can't move will lose.Fibonacci number will be defined asF0=1, F1=1,     FN=FN-1+FN-2As ladies go first Ada starts. Can you determine who will if both will play optimally?InputThe first line of each test-case will contain an integer1 ≤ N ≤     105, the number of piles.The next line will containNintegers0 ≤ Ai≤     3*106, the number of seeds in each pile.OutputFor each test-case, print the name of winner (so either \"Ada\" or \"Vinit\").Example Input6\r\n3 3 1 8 3 4Example OutputAdaExample Input1\r\n10Example OutputVinitExample Input4\r\n3 9 5 2Example OutputAdaExample Input5\r\n10 10 6 8 10Example OutputAdaExample Input1\r\n4Example OutputVinitExample Input4\r\n6 1 7 3Example OutputAdaExample Input5\r\n7 10 9 3 10Example OutputAdaExample Input6\r\n4 6 10 9 3 8Example OutputVinit",
  "sample_input": "6\r\n3 3 1 8 3 4",
  "sample_output": "Ada",
  "link": "https://www.spoj.com/problems/ADAFIMBR",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "6\r\n3 3 1 8 3 4",
      "expected_output": "Ada",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n9\n4\n9\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n4\n2\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n7\n3\n2\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "6\n91428410\n56003807\n82452319\n29598444\n13763215\n42622049",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n52607206\n76908340\n30007411\n89407237\n12958307\n33267655\n21964108\n45679834\n61493124\n65237092\n19367861\n82603012\n86729356\n83298493",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n53587783\n67420214\n69645634\n47722689\n99552796\n18045573\n8918218\n86442879\n94711750\n97242495\n81388663\n4798039\n50002406",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n58345373\n30819553\n59794251\n80141855\n8246084\n94068965\n76142532\n81654862\n9943704\n50639352\n44263404\n62731849\n21772254\n41822967\n63694005\n13253598\n95591104\n80190038\n93279837\n53427752",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n2588086\n42913415\n1320443\n92930005\n35402383\n36935329\n58748808\n25832244\n47880062\n43305992\n29373315",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "84\n73483\n47326\n24873\n82458\n26562\n45665\n10394\n8998\n99517\n16095\n32220\n44245\n29862\n66896\n73997\n80613\n3098\n24748\n78861\n13532\n12922\n71099\n57389\n8690\n65899\n2192\n87859\n43386\n40141\n33782\n34068\n7121\n10508\n44590\n5628\n81723\n31940\n47220\n69323\n3434\n93421\n38773\n93444\n87223\n8783\n76913\n11075\n33655\n89066\n43310\n16859\n59506\n40090\n59948\n55602\n4125\n1322\n44862\n12496\n78374\n66628\n99056\n95868\n9274\n8441\n16145\n39767\n20165\n74739\n68067\n12782\n56286\n90253\n93970\n22538\n52017\n11228\n6656\n63177\n70836\n8179\n50923\n61043\n29809",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n98751\n96652\n63909\n49358\n68159\n59745\n83794\n78383\n91070\n79091\n19452\n50126\n50984\n27972\n10696\n24580\n41931\n40274\n8237\n59650\n96558\n37505\n47257\n48851\n16862\n29414\n68542\n7490\n62126\n77024\n2572\n51338\n79728\n3762\n50114\n49633\n29091\n9883\n31624\n86771\n648\n39171\n59504\n30373\n22113",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "99\n75639\n5212\n83983\n82823\n2946\n25780\n45196\n12960\n5233\n84603\n25348\n22384\n92069\n43430\n60473\n54562\n3881\n91465\n53766\n8649\n90291\n87644\n5408\n20387\n34330\n68436\n59967\n56845\n88060\n83323\n70030\n2017\n23110\n47790\n52688\n17605\n10512\n1850\n86596\n24058\n3615\n73405\n90478\n54986\n8328\n26718\n27932\n98551\n19447\n12713\n5639\n93121\n44291\n22911\n68053\n78892\n71441\n18280\n13414\n30696\n46928\n39442\n51620\n10276\n39802\n82317\n27247\n47317\n20597\n39275\n8620\n57006\n40881\n48223\n20932\n17821\n29177\n23368\n10396\n43009\n87929\n50344\n92384\n49441\n25952\n29682\n78463\n84485\n375\n6815\n2001\n48897\n18598\n46747\n64840\n22683\n30396\n57897\n20903",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n7140\n43257\n72597\n2345\n17067\n75251\n34602\n1844\n64855\n53955\n17328\n52462\n6112\n39628\n90416\n32217\n8207\n71342\n40449\n6404\n2140\n16261\n21636\n48431\n96264\n33375\n14499\n6512\n30727\n33722\n82350\n94825\n78905\n94018\n78678\n5137\n84243\n13885\n93362\n59594\n71310",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n47445\n84959\n82831\n25534\n43818\n99731\n29348\n90456\n54939\n97768\n56389\n43289\n78661\n26518\n66613\n80096\n91010\n16453\n98510\n35204\n33914\n94724\n94301\n73750\n77075\n41152\n20651\n66735\n49469\n89803",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "75\n21484\n62720\n48600\n12991\n52426\n849\n44692\n1249\n37437\n91718\n66887\n48818\n63568\n19768\n34422\n21506\n60610\n25235\n6733\n19522\n36695\n65079\n38333\n76050\n34809\n39252\n52858\n63793\n53356\n87496\n22151\n57182\n29027\n38345\n79467\n30243\n2512\n10475\n87171\n43104\n65534\n56004\n77894\n79580\n31259\n85614\n99307\n37721\n42746\n84180\n3292\n79128\n54734\n86735\n81812\n15585\n82845\n40860\n77842\n46402\n97888\n50569\n68453\n95817\n72504\n93157\n60057\n92257\n44671\n89643\n5275\n14265\n20561\n77568\n64346",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "78\n31843\n77081\n16327\n29724\n77207\n53265\n89633\n90537\n3024\n48024\n43986\n74019\n77580\n52624\n54994\n55826\n11990\n87770\n90360\n25947\n21870\n88599\n32507\n70894\n17456\n35680\n77983\n81519\n35538\n70152\n60760\n90763\n47826\n16207\n30211\n32410\n28321\n27133\n80403\n70173\n24499\n92160\n3171\n80775\n94154\n41722\n79644\n44426\n33618\n81177\n28889\n97175\n64233\n80379\n35808\n62309\n30774\n63295\n97137\n62934\n98130\n12840\n95815\n61061\n42824\n38869\n48000\n23551\n97936\n76824\n5465\n9948\n74806\n38826\n48180\n16899\n67193\n57852",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n38481563\n18623292\n38419657\n65402582\n38657912\n60410270\n46055053\n2783183\n45875609\n35175880\n17118796\n72428869\n79479305\n11707627\n30109810\n96360277\n92359091\n51252587\n15791354\n18187103\n9193757\n38173175\n75421645\n66221234\n71999576\n33132270\n22966264\n1382879\n76146031\n81648837\n47287455\n71008109\n35286343\n72743898\n73988176\n80614352\n90085547\n60617332\n487024\n65147493\n82344774\n66779217\n26523913\n9617587\n2673904\n80411245\n95945789\n90006281\n23547967\n32367028\n66464814\n17927937\n77308819\n4709026\n50778851\n55498265\n32416365\n30278830\n59798499\n52403473\n44224832\n9109524\n18107787\n77241004\n76239108\n87401063\n59951339\n99032362\n14466935\n1278737\n44877184\n49686921\n20338132\n10175161\n43318462\n94795891\n67673960\n17975807\n39555335\n14750066\n97069013\n14676678\n67187490\n9293973\n32684051\n93310328\n28847341\n14033462\n1600139\n57080832\n83895794\n17043719\n85934397\n79732991\n15334277\n96714805\n4718112\n50728755\n95526165\n3348118\n55852122\n42531622\n74132650\n86298958\n69478575",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n27822174\n88778379\n60719421\n97201659\n18164176\n97106699\n15392794\n80318401\n42242719\n66983489\n63560119\n70587216\n43169779\n59983856\n46746384\n74101329\n13058555\n80139226\n64512215\n36898806\n98908964\n43947333\n37643903\n94338962\n92247529\n64573103\n41250181\n51399040\n20502860\n54221537\n45852553\n43966279\n80491958\n15057819\n31767303\n7186110\n70612323\n30541362\n14664748\n72862953\n27828496\n45907293\n84498674\n52019595\n42830395\n74947707\n78748198\n47386290\n91586632\n6645905\n33302581\n85052942\n8660200\n56070961\n87866869\n504792\n464108\n23994979\n63197377\n27567164\n10576609\n98778035\n33418581\n99747048\n85325428\n84713312\n97701305\n27095030\n5090766\n10709048\n65887562\n35714528\n84171079\n58783281\n26320699\n91880409\n31356856\n72670879\n95733872\n39793252\n81881365\n208906\n93063339\n74265141\n75304609\n60017802\n61311631\n22087246\n24911115\n83551453\n14518589\n93276129\n37714167\n2818942\n37535081\n37355621\n74288466\n83745000\n39297641\n30286241\n66655472\n44258860\n86021415\n5837476\n6087184",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n10446318\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n74035099",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}