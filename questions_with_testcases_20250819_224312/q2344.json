{
  "problem_code": "problems",
  "title": "Mafia",
  "tags": [],
  "text": "The police in Byteland got an anonymous tip that the local mafia bosses are planning a big transport from the harbour to one of the secret warehouses in the countryside. The police knows the date of the transport and they know that the transport will use the national highway network.The highway network consists of two-way highway segments, each segment directly connecting two distinct toll stations. A toll station may be connected with many other stations. A vehicle can enter or exit the highway network at toll stations only. The mafia transport is known to enter the highways at the toll station closest to the harbour and leave it at the toll station closest to the warehouse (it will not leave and re-enter the highways in between). Special police squads are to be located in selected toll stations. When the transport enters a toll station under surveillance, it will be caught by the police.From this point of view, the easiest choice would be to place the police squad either at the entry point or the exit point of the transport. However, controlling each toll station has a certain cost, which may vary from station to station. The police wants to keep the overall cost as low as possible, so they need to identify aminimal controlling setof toll stations, which satisfies the two conditions:all traffic from the harbour to the warehouse must pass through at least one station from that set,the cost of monitoring these stations (i.e. the sum of their individual monitoring costs) is minimal.You may assume that it is possible to get from the harbour to the warehouse using the highways.InputThe first line of the standard input contains two integersnandm(2 ≤n≤ 200, 1 ≤m≤ 20000) - the number of toll stations and the number of direct highway segments. The toll stations are numbered from 1 ton.The second line contains two integersaandb(1 ≤a,b≤n,a≤b) - the numbers of the toll stations closest to the harbour and to the warehouse, respectively.The followingnlines describe the monitoring costs. The i-th of these lines (for 1 ≤i≤n) contains one integer - the monitoring cost of the i-th station (which is positive number not exceeding 10000000).The followingmlines describe the highway network. The j-th of these lines (for 1 ≤j≤ m) contains two integersxandy(1 ≤x<y≤n), indicating that there is a direct highway segment between toll stations numberedxandy. Each highway segment is listed once.OutputThe only line of the output should contain the numbers of toll stations in a minimal controlling set, given in increasing order, separated by single spaces. If there is more than one minimal controlling set, your program may output anyone of them.ExampleFor the input data:5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4the correct result is:1 4The figure shows the highway network with the toll station numbers (in the upper-left corners) and the monitoring costs. Stations number 1 and 4 constitute the minimal controlling set with total controlling cost 5.",
  "sample_input": "5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4",
  "sample_output": "1 4",
  "link": "https://www.spoj.com/problems/MAFBOI08",
  "scraped_at": "2025-08-17 00:33:54",
  "test_cases": [
    {
      "input": "5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4",
      "expected_output": "1 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 4\n9 6\n3\n10\n3\n1\n3\n1 2\n8 9\n8 5\n2 4\n9 4\n5 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 5\n9 2\n8\n4\n3\n8\n3\n8 3\n6 9\n6 2\n1 9\n9 8\n7 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\n5 6\n3\n3\n7\n5\n7\n5 5\n9 2\n6 10\n1 8\n8 1\n5 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "53 28\n82 86\n36\n58\n43\n27\n65\n57 46\n42 28\n98 94\n40 84\n100 93\n55 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 71\n79 94\n97\n16\n52\n66\n15\n14 42\n98 56\n49 86\n28 83\n72 14\n15 87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 44\n65 54\n43\n35\n32\n6\n71\n13 92\n21 92\n96 17\n79 67\n42 17\n28 92",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "98 11\n47 84\n91\n99\n61\n74\n96\n92 61\n64 55\n99 93\n10 80\n39 21\n60 57",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "7 71\n95 21\n85\n60\n4\n12\n88\n65 16\n30 71\n46 53\n55 5\n36 86\n75 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "53 84\n19 89\n35\n90\n11\n80\n66\n67 81\n14 83\n81 26\n92 15\n63 25\n20 32",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "51 26\n74 67\n57\n75\n44\n28\n94\n59 58\n86 51\n60 25\n38 19\n70 38\n33 94",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "62 39\n25 97\n21\n49\n89\n61\n41\n16 26\n73 35\n24 74\n82 64\n96 60\n38 78",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "90 23\n13 31\n51\n18\n23\n85\n48\n89 42\n16 97\n67 64\n64 42\n41 69\n71 21",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "13 27\n31 16\n58\n12\n70\n65\n26\n55 50\n23 22\n83 54\n80 22\n32 97\n97 39",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "85 35\n41 25\n32\n77\n29\n29\n45\n29 10\n70 65\n27 43\n56 57\n78 82\n53 81",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "48 86\n34 89\n26\n92\n99\n95\n91\n32 18\n49 65\n84 92\n92 84\n54 55\n96 73",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200 200\n200 200\n200\n200\n200\n200\n200\n200 200\n200 200\n200 200\n200 200\n200 200\n200 200",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200 200\n200 200\n200\n200\n200\n200\n200\n200 200\n200 200\n200 200\n200 200\n200 200\n200 200",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 200\n199 199\n199\n1\n1\n1\n199\n200 200\n200 199\n200 200\n1 2\n1 200\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n2 200\n1\n2\n1\n199\n2\n200 199\n2 1\n199 2\n1 2\n2 200\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}