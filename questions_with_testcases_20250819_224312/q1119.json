{
  "problem_code": "problems",
  "title": "Making Jumps",
  "tags": [],
  "text": "A knight is a piece used in the game of chess. The chessboard itself is square array of cells. Each time a knight moves, its resulting position is two rows and one column, or two columns and one row away from its \t \r\nstarting position. Thus a knight starting on row r, column c – which we’ll denote as (r, c) – can move to any of \t \r\nthe squares (r-2, c-1), (r-2, c+1), (r-1, c-2), (r-1, c+2), (r+1, c-2), (r+1, c+2), (r+2, c-1), or (r+2, c+1). Of course, the knight may not move to any square that is not on the board.Suppose the chessboard is not square, but instead has rows with variable numbers of columns, and with each row offset zero or more columns to the right of the row above it. The figure to the left illustrates one possible configuration. How many of the squares in such a modified chessboard can a knight, starting in the upper left square (marked with\tan asterisk), not reach in any number of moves without resting in any square more than once?If necessary, the knight is permitted to pass over regions that are outside the borders of the modified chessboard, but as usual, it can only move to squares that are within the borders of the board.InputThere will be multiple cases to consider. The input for each case begins with an integer n, between 1 and 10, that specifies the number of rows in the modified chessboard. Following n there will be n pairs of integers, with the ith pair corresponding to the ith row of the chessboard. The first integer of each pair indicates the number of squares skipped at the beginning of the row. The second integer indicates the number of squares in the row (which will always be at least 1).The last case will be followed by the integer 0.For example, input for the case illustrated by the chessboard shown above would be:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4The maximum dimensions of the board will be 10 rows and 10 columns. That is, any modified chessboard specified by the input will fit completely on a 10 row, 10 column board.OutputFor each input case, display the case number (1, 2, …), and the number of squares that the knight can not reach. Display the results in the format shown in the examples below.ExampleInput:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0Output:Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
  "sample_input": "Input:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0Output:Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKJUMPS",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0",
      "expected_output": "Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 1 6 3 7 3 1 10 1 6 2 2 4 7 8\n8 9 9 7 7 2 4\n6 9 7 9 2\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 9 1 2 8 7 2 10 7 3 5 2 8 6 8\n5 1 4 9 1 8 7\n8 1 10 9 1\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 9 8 4 4 3 9 9 1 9 7 4 5 6\n6 2 2 1 2 10 9\n9 3 4 7 8\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 13 2 53 10 51 51 7 4 22 52 71 75 55 82\n44 59 1 30 51 22 43\n1 47 43 53 52\n89",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "48 96 60 44 67 48 51 99 37 22 82 97 94 39 6\n41 16 78 60 56 15 78\n71 44 26 54 83\n28",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 24 38 79 60 12 89 66 69 5 100 78 82 46 28\n100 41 27 66 92 53 100\n59 44 40 98 99\n46",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "46 65 33 80 48 52 12 13 19 76 15 34 52 52 92\n62 73 63 97 64 63 36\n50 89 28 90 74\n59",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 59 32 46 70 32 60 59 73 61 38 39 35 16 80\n97 63 48 60 55 17 10\n32 93 6 42 100\n54",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "229 345 238 395 348 361 136 408 85 242 211 500 191 120 274\n486 51 114 209 147 116 240\n302 230 164 419 224\n339",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "90 175 252 349 66 227 409 205 325 175 496 380 462 480 454\n293 478 399 97 455 236 278\n380 368 124 254 129\n451",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "416 97 397 299 317 111 97 111 390 116 254 205 63 419 302\n176 190 326 251 162 386 492\n445 495 359 382 461\n127",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "99 133 270 392 447 188 114 74 468 413 184 431 96 468 446\n401 308 483 314 108 431 190\n94 241 410 388 148\n178",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "329 201 465 391 475 110 263 80 496 138 375 378 228 175 469\n98 254 71 275 450 54 64\n429 257 54 271 61\n287",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "102 192 86 280 311 397 457 293 146 86 454 325 226 299 368\n119 341 242 196 474 388 73\n158 480 267 448 53\n273",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "365 437 160 496 75 300 451 64 80 189 243 441 467 300 396\n469 426 379 158 385 180 166\n299 165 455 157 156\n245",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 2 999 1 999 1 1000 1 2 999 999 2 1 1\n1000 1000 2 2 2 999 999\n1 999 999 1 999\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 2 1000 2 2 1000 999 999 1000 999 1000 1000 999 2\n2 999 2 1000 1000 1 1000\n1000 999 1000 999 1000\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}