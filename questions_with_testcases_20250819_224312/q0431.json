{
  "problem_code": "problems",
  "title": "Just Primes",
  "tags": [],
  "text": "This problem is really simple, or is it? Given a positive integerN, calculate theminimumnumber ofdistinctprimes needed such that their sum equals toN. A prime number is a natural number greater than1that cannot be formed by multiplying two smaller natural numbers. The first few prime numbers are2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ...and so on.InputThe first line contains an integerT, denoting the number of test cases. Each of the next subsequentTlines contain a positive integerN.Constraints1 ≤ T ≤ 50,0001 ≤ N ≤ 50,000OutputFor each test case, first print the case number followed by the minimum number of distinct primes such that their sum equals toN. IfNcannot be represented by a summation of distinct primes, then print the case number followed by-1. Refer to the sample input/output for more clarity of the format.Sample Input10\r\n1\r\n2\r\n3\r\n10\r\n27\r\n100\r\n1000\r\n4572\r\n4991\r\n49999Sample OutputCase 1: -1\r\nCase 2: 1\r\nCase 3: 1\r\nCase 4: 2\r\nCase 5: 3\r\nCase 6: 2\r\nCase 7: 2\r\nCase 8: 2\r\nCase 9: 3\r\nCase 10: 1ChallengeToo easy? Try the harder version here -Just Primes II",
  "sample_input": "10\r\n1\r\n2\r\n3\r\n10\r\n27\r\n100\r\n1000\r\n4572\r\n4991\r\n49999",
  "sample_output": "Case 1: -1\r\nCase 2: 1\r\nCase 3: 1\r\nCase 4: 2\r\nCase 5: 3\r\nCase 6: 2\r\nCase 7: 2\r\nCase 8: 2\r\nCase 9: 3\r\nCase 10: 1",
  "link": "https://www.spoj.com/problems/JPM",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "10\r\n1\r\n2\r\n3\r\n10\r\n27\r\n100\r\n1000\r\n4572\r\n4991\r\n49999",
      "expected_output": "Case 1: -1\r\nCase 2: 1\r\nCase 3: 1\r\nCase 4: 2\r\nCase 5: 3\r\nCase 6: 2\r\nCase 7: 2\r\nCase 8: 2\r\nCase 9: 3\r\nCase 10: 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n7\n5\n8\n6\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n2\n9\n2\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "17\n21738948\n5965551\n27542427\n89969579\n14294453\n20912037\n97322507\n89734002\n34281184\n33052040\n62986504\n38754153\n85389170\n51845849\n62197219\n154614\n27854396",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n43033577\n67984998\n30681910\n134088\n38294509\n59184719\n97694055\n55787575\n46447383\n30601884\n93287355\n5650738\n28557484\n8092362\n74754182\n96447970\n85015192",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n68625359\n36537379\n78407618\n3954049\n74468167\n41817771\n52765315\n90988993\n11408618\n18352252\n81737023\n60806121\n45413967\n79595261\n88857023\n25808570\n68202727",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n64283437\n11386723\n93171667\n48898385\n54333062\n89492327\n38558190\n2071435\n77513967\n54426023\n73350120\n83963396\n95250127",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n50412638\n85140982\n84098623\n91852143\n39237179",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "49\n23312\n8291\n26600\n54472\n48609\n96372\n17901\n30473\n36701\n68707\n494\n79037\n63780\n25768\n83141\n52263\n96363\n15731\n91826\n98513\n75287\n6403\n86533\n26236\n6548\n20300\n83171\n38300\n54815\n63656\n58332\n12913\n79908\n30435\n34889\n83881\n16600\n76737\n974\n49726\n51669\n29629\n21254\n43866\n96380\n55233\n35328\n22189\n80683",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n40135\n57376\n68874\n93617\n80561\n25210\n90076\n50372\n13915\n33146\n45425\n13072\n88397\n99853\n25705\n46227\n20614\n25293\n11251\n39561\n55876\n82676\n5120\n9936\n39268",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n93399\n1672\n79307\n34135\n77566\n54425\n24780\n13573\n87920\n83190\n95780\n68413\n1845\n27761\n34893\n37336\n8800\n49815\n19077\n1152\n44576\n74575\n37843\n62136\n25966\n71714\n29042\n15197\n42871\n53552\n779\n85692\n75120\n56690\n42111\n3403\n37481\n82861\n36327\n58541\n6793\n58582\n75161\n25580\n53603",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "46\n92815\n67316\n83731\n51088\n57939\n45570\n76826\n89224\n42626\n13712\n46297\n51871\n99216\n13050\n26292\n92948\n68255\n4222\n18266\n65303\n39067\n43452\n20712\n77340\n3777\n15424\n84710\n91302\n2685\n92149\n29743\n73314\n23225\n47843\n73941\n1642\n98284\n96679\n94430\n48361\n67473\n6583\n5095\n61271\n9596\n2576",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n13901\n30134\n64976\n60745\n53450\n79286\n74207\n48255\n5978\n52130\n34147\n26958\n61068\n33641\n81702\n72252\n55567\n85711\n7150\n71381\n19613\n37077\n15011",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n18167\n88467\n12030\n15968\n57899\n40409\n29228\n21629\n67036\n60802\n50922\n38472\n4073\n31138\n82640\n18722\n32380\n57337\n48946\n32752\n74215\n91347\n70926\n62043\n17682\n90853\n95144\n54786\n73801\n2584\n62103\n14427\n23584\n21227\n57001\n80509\n32079\n98381\n92569\n69934\n27554\n14303\n11656\n83372\n56583",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n4278\n47910\n95099\n28814\n66703\n83869\n38374\n80972\n7077\n22281\n14804\n54307\n4189\n90347\n57874\n95851\n75086\n93637\n86733\n586\n80080\n96146\n36220\n26883",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n79150747\n84784277\n23187619\n82000560\n20115167\n5089130\n36746298\n31090265\n75192822\n601604\n34555590\n80955841\n10029200\n47661603\n70805440\n44118757\n13848881\n86582197\n3934763\n95128907\n77209837\n82459986\n59956143\n70344734\n59353833\n54448839\n98471281\n59709668\n35288180\n32490726\n41281720\n48927530\n13103641\n31939735\n61809670\n81363831\n48548573\n39894650\n62847543\n5783467\n89483106\n96182295\n38137380\n46097580\n63540200\n45769182\n14096735\n74953997\n34956787\n17207750",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n36177006\n35079887\n46839649\n24305745\n67245578\n87694383\n91058382\n62562136\n14232656\n92651974\n45270196\n18315215\n71467271\n57800910\n64779549\n51627038\n23296300\n78345530\n81810137\n24463273\n11274239\n22912315\n62704136\n47610862\n90686210\n8667830\n14875831\n16356104\n38767749\n29410677\n29717710\n98552549\n11607835\n20862758\n93582094\n36948476\n99747103\n61341018\n43901048\n17135752\n80097988\n26221753\n63486216\n82075632\n56450974\n1496119\n63782111\n83302285\n22835944\n34684250",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n87748689\n79150975\n72256404\n1\n100000000\n35623219\n1\n34194979\n100000000\n1\n1\n1\n100000000\n100000000\n92438339\n1\n100000000\n100000000\n100000000\n100000000\n100000000\n98573185\n31303619\n80992944\n30653484\n37815830\n100000000\n99069824\n1\n99058145\n100000000\n1\n32681557\n23934072\n66409228\n1\n100000000\n1\n100000000\n100000000\n1\n1\n34636660\n1\n100000000\n100000000\n3126879\n1\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 50)"
    },
    {
      "input": "50\n100000000\n97294340\n100000000\n93328963\n96903614\n1\n100000000\n1\n96910117\n100000000\n57714038\n100000000\n1\n67421078\n1\n100000000\n38476898\n1\n100000000\n75796510\n1\n30351990\n50364716\n1\n1\n1\n100000000\n1\n1\n40965662\n1\n32971966\n63881274\n1\n1\n100000000\n90834279\n100000000\n1\n100000000\n1\n83966166\n1\n19634355\n79885852\n100000000\n100000000\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 50)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}