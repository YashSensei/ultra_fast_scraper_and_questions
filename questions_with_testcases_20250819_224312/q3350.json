{
  "problem_code": "problems",
  "title": "Bulletin Board",
  "tags": [],
  "text": "The ACM Student Chapter has just been given custody of a number of\r\nschool bulletin boards. Several members\r\nagreed to clear off the old posters. They found posters\r\nplastered many levels deep. They made a bet about\r\nhow much area was left clear, what was the greatest depth of posters on\r\ntop of each other, and\r\nhow much of the area was covered to this greatest depth. To\r\ndetermine each bet's winner, they\r\nmade very accurate measurements of all the poster positions as they\r\nremoved them. Because of the large number of posters, they now\r\nneed a program to do the calculations. That is your job.A\r\nsimple illustration is shown above: a bulletin board 45 units\r\nwide by 40 high, with three posters, one with corners at coordinates\r\n(10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last\r\nwith corners at (25, 5) and (30, 30). The total area not covered\r\nby any poster is 1300. The maximum number of posters on top of\r\neach other is 2. The total area covered by exactly 2 posters\r\nis 75.InputThe input will\r\nconsist of one to twenty data\r\nsets, followed by a line containing only 0. On each\r\nline the data will consist of blank separated nonnegative integers.The first line of a dataset contains integersn w h,\r\nwherenis the number of posters on the bulletin board,wandhare the width\r\nand height of the bulletin board. Constraints are 0 <n≤\r\n\r\n100; 0 <w≤ 50000; 0 <h≤ 40000.The dataset ends with n lines, each describing the location of\r\none poster. Each poster is rectangular and has horizontal\r\nand vertical sides. The x and y coordinates are measured from one\r\ncorner of the bulletin board. Each line contains four numbersxlylxhandyh, wherexlandyl, are the lowest values of the x and y coordinates in one corner of the poster andxhandyhare the highest values in the diagonally opposite corner. Each poster fits on the bulletin board, so 0\r\n\r\n≤xl<xh≤w, and 0\r\n≤yl<yh≤h.OutputThere is one line of output for\r\neach data set containing three integers, the total area of the bulletin board that is not covered by any poster,the maximum depth of posters on top of each other, andthe total area covered this maximum number of times.Caution: An approach examining every pair of integer coordinates might need to deal with 2 billion coordinate pairs.ExampleInput:3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0Output:1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
  "sample_input": "Input:3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0Output:1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BULLETIN",
  "scraped_at": "2025-08-17 00:34:33",
  "test_cases": [
    {
      "input": "3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0",
      "expected_output": "1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9 8\n10 2 1 4\n1 1 1 10\n7 8 1 4\n9 2 7\n10 8 7 10\n2 8 2\n1 4 2 6\n3 7 5 10\n6 5 2\n7 9 3 7\n6 3 9 3\n1 10 3 9\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10 4\n1 5 6 9\n8 1 3 7\n1 1 4 8\n5 1 5\n9 6 2 2\n6 4 10\n1 3 3 10\n5 9 7 6\n4 9 5\n5 8 10 2\n4 6 1 3\n2 4 7 1\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 8 3\n2 1 1 6\n2 5 8 5\n5 3 4 8\n1 6 4\n5 4 10 4\n2 6 5\n1 5 1 2\n1 10 7 9\n4 3 2\n4 2 6 1\n3 3 9 8\n9 3 7 1\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 63 66\n83 40 16 4\n9 84 32 8\n19 88 5 13\n91 47 34\n43 32 93 25\n64 86 89\n62 32 56 100\n27 1 69 61\n40 77 84\n11 3 68 98\n68 43 27 98\n72 83 16 21\n81",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "34 79 63\n58 95 66 41\n97 87 83 57\n61 75 69 68\n67 71 73\n77 93 22 44\n39 19 60\n38 54 50 29\n96 16 72 64\n4 45 55\n33 48 16 82\n19 50 79 68\n32 21 3 40\n87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 73 57\n7 79 77 24\n73 50 85 30\n18 33 22 17\n92 98 47\n44 37 72 89\n37 60 20\n98 77 50 57\n69 25 89 75\n82 42 11\n5 47 79 100\n54 36 64 51\n58 69 85 81\n40",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "68 60 14\n4 65 43 64\n2 75 84 7\n14 79 22 64\n48 18 84\n92 61 12 94\n28 78 34\n99 98 98 60\n52 42 22 37\n91 74 33\n81 53 61 79\n54 89 6 50\n23 64 96 41\n83",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "74 17 43\n5 4 99 88\n91 28 70 78\n42 39 26 91\n3 76 54\n95 90 19 86\n4 20 55\n64 36 17 4\n98 6 18 6\n49 4 87\n40 74 17 23\n82 37 45 25\n56 94 74 74\n29",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "44 34 19\n10 39 26 31\n24 48 34 46\n41 42 21 17\n46 35 45\n49 25 40 37\n21 30 33\n14 28 33 12\n34 26 20 25\n35 44 30\n22 37 29 6\n11 32 29 5\n36 45 30 21\n21",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "40 40 12\n43 18 15 33\n11 27 18 26\n19 24 42 17\n33 18 29\n48 36 46 38\n39 23 19\n30 36 50 21\n14 48 39 25\n20 37 33\n24 20 48 50\n40 12 14 42\n41 22 45 32\n32",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "47 38 47\n38 29 35 44\n37 35 11 49\n12 9 22 26\n8 16 5\n10 17 27 47\n50 27 22\n29 39 13 23\n28 5 5 17\n31 46 32\n9 28 30 7\n25 42 25 37\n21 49 8 21\n13",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 23 17\n29 41 43 28\n6 19 11 9\n19 18 36 8\n49 17 38\n39 12 42 41\n32 44 30\n14 27 8 7\n18 41 31 10\n30 20 18\n31 13 29 49\n29 23 46 49\n21 40 15 14\n19",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "16 31 31\n21 30 6 16\n31 29 7 24\n42 26 24 16\n44 20 26\n10 16 36 39\n36 25 11\n30 39 43 30\n14 25 7 43\n34 13 22\n36 24 43 37\n38 21 42 7\n46 32 40 16\n47",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "10 25 35\n12 5 47 30\n41 33 29 47\n35 32 49 5\n16 18 45\n16 17 45 27\n47 26 30\n44 28 15 11\n22 18 29 16\n15 43 39\n5 31 25 11\n27 28 7 37\n48 39 8 46\n22",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "35 35 40\n32 50 14 13\n10 47 15 11\n32 43 49 26\n24 9 8\n36 16 39 50\n30 49 31\n26 6 42 13\n25 10 49 33\n18 36 48\n23 7 13 48\n30 16 12 38\n11 34 7 41\n16",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 99 2\n100 2 100 100\n100 2 1 1\n1 2 100 100\n99 99 1\n1 99 1 1\n99 2 1\n99 1 2 1\n2 100 2 2\n100 100 99\n100 100 1 2\n2 100 1 99\n1 100 2 100\n99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1\n99 2 100 2\n99 99 99 99\n2 1 1 1\n99 2 2\n2 100 1 99\n1 1 1\n99 1 99 1\n2 100 99 99\n2 100 2\n99 100 99 99\n2 99 1 99\n2 1 99 2\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}