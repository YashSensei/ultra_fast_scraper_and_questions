{
  "problem_code": "problems",
  "title": "Update Sub",
  "tags": [],
  "text": "Updating and querying 1 dimensional arrays is a popular question. How about updating and querying sub-matrices of a matrix?A sub-matrix will be depicted as (a, b), (c, d). This implies that it will include all the cells (x, y) such that a ≤ x ≤ c and b ≤ y ≤ d.The matrix is indexed from [1..N][1..N], where N is the size.You are given a matrix of size N×N, with each element initially set to 0. There are M queries and each query can be of one of the two types:1 x1 y1 x2 y2: This query asks you to return the sum of all the elements in the sub-matrix (x1, y1), (x2, y2).2 x1 y1 x2 y2 K: This query asks you to add K to each element in the sub-matrix (x1, y1), (x2, y2).InputThe first line of input contains N, M.The next M lines contain queries in the same forms as stated above.You may assume that x1 ≤ x2 and y1 ≤ y2 for all queries.Also N ≤ 1000 and M ≤ 105. K ≤ 109OutputThe answer to all the queries wherein you need to return the sum of elements in the sub-matrix, i.e., all the queries of type 1.Sample Test CaseInput:5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3Output:16024Note:Please be careful with certain languages as the output may exceed the range of the data type used to store it.  Please use 64-bit integers to store the results. For example, long long in C/C++.",
  "sample_input": "Input:5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3Output:16024",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/USUBQSUB",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3",
      "expected_output": "16024",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6 4 10 8 7 8 10 3 4 2 5 5 9 5 7 4 9 9 1 1 6 5 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9 10 9 5 8 4 2 3 9 1 1 9 9 10 1 5 10 9 5 10 3 7 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 7 3 1 6 10 5 9 10 5 10 8 8 9 3 10 2 4 1 4 6 8 6 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "30 37 24 65 97 87 24 22 48 96 26 53 7 11 95 57 42 52 89 16 68 79 12 75",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 24 63 87 19 18 51 81 58 12 45 56 31 38 89 3 3 13 98 12 40 33 47 40",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 43 77 66 98 84 81 87 88 52 13 62 28 80 73 76 5 76 77 64 17 14 89 91",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "57 87 82 21 12 64 97 6 61 91 35 22 12 97 72 9 18 44 100 74 96 33 70 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 5 47 95 100 62 60 50 60 75 41 42 36 45 89 62 37 62 37 28 21 31 49 62",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "349 189 228 202 467 498 341 256 492 303 497 406 271 481 202 112 244 497 342 224 190 350 378 231",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "128 456 112 209 383 266 294 117 473 143 205 255 125 470 318 407 325 325 115 101 375 489 103 256",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "329 180 221 338 335 310 56 490 67 475 446 186 69 167 419 351 258 416 266 281 421 310 475 91",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "390 359 469 469 87 137 222 160 330 158 318 470 209 168 459 317 468 309 125 426 316 233 68 165",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "472 327 416 152 387 238 86 146 223 272 53 62 276 152 75 347 110 240 429 299 53 354 131 54",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "441 339 277 480 237 340 291 97 204 142 80 110 78 404 377 242 79 143 305 183 286 498 142 63",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "261 127 240 291 145 198 336 487 423 120 377 417 469 384 308 420 242 162 270 259 372 399 337 181",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 999 1 1 1 999 1000 1 1 2 2 1000 2 999 999 999 999 2 1 1000 1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 1 1 2 999 1000 999 2 1 1000 999 1 999 999 2 2 999 2 1 1 1000 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}