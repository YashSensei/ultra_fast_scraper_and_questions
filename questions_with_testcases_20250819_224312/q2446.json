{
  "problem_code": "problems",
  "title": "Roads Repair",
  "tags": [],
  "text": "EnglishVietnameseThe traffic network in a country consists of N cities (labeled with integers 1 to N) and N-1 roads connecting the cities. There is a unique path between each pair of different cities.Because of the many years of lazy maintenance the roads are pretty damaged and for each road two numbers A and B are known – the integer A represents the current time (in seconds) needed to travel along the road, and the integer B represents the smallest possible time (in seconds) needed to travel along this road if we repair all the damage.We want to invest a certain amount of money into road repair. For a particular road, the result will be proportional to the amount of invested money. For each euro invested in some road, the time needed to travel along that road will be reduced by one second (the amount of money invested in some road has to be an integer). The travel time cannot be reduced beyond the smallest possible time B described above.We are given a certain amount of money. We want to distribute this money along different roads in such a way that the time needed to travel from the city 1 to the most distant city (after all the repairs) is as small as possible.Write a program that will find this smallest time.InputThe first line of input contains two integers N and K, 2 ≤ N ≤ 100 000, 0 ≤ K ≤ 1 000 000, the number of cities and the total amount of money (in euros).Each of the next N-1 lines contains four integers X, Y, A and B, 0 ≤ B ≤ A ≤ 10 000. It means that there is a road between cities X and Y, with the numbers A and B representing the current time and the minimum time as described above.OutputThe first and only line of output should contain a single integer – the minimum time from the task description.SampleInput:3 200\r\n1 2 200 100\r\n2 3 450 250Output:450Input:5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3Output:6Input:11 12\r\n1 2 7 5\r\n1 3 20 15\r\n2 4 10 8\r\n2 5 5 3\r\n2 6 6 2\r\n4 7 3 0\r\n4 8 7 2\r\n5 9 8 4\r\n5 10 9 8\r\n5 11 6 5Output:17",
  "sample_input": "Input:3 200\r\n1 2 200 100\r\n2 3 450 250Output:450",
  "sample_output": "Input:5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3Output:6",
  "link": "https://www.spoj.com/problems/MROADS",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "3 200\r\n1 2 200 100\r\n2 3 450 250",
      "expected_output": "450",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3",
      "expected_output": "6",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 2\n5 10 6 3\n8 10 5 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n5 1 5 4\n9 4 4 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 6\n2 2 4 9\n3 4 1 6",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "2 63\n25 51 18 1\n43 45 75 30",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 39\n66 98 43 40\n3 80 95 24",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "76 90\n58 26 28 72\n51 62 51 62",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 26\n16 47 82 63\n11 9 60 56",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "69 52\n88 43 50 93\n23 1 71 73",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "24414 14338\n15027 23424 44101 36457\n17390 19355 11281 20379",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "18289 30975\n5751 15936 40523 14545\n31969 32316 5215 10411",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "9425 35679\n32662 36676 33132 29891\n34168 8778 41887 31736",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "49867 25785\n42212 9634 35164 19714\n49668 34312 44881 26499",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "27383 16253\n31706 10814 12944 38828\n21625 6633 29870 27260",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "33768 46945\n47051 9446 31897 21107\n41199 27792 10945 48370",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10163 33676\n46647 37159 14441 13696\n29466 11726 24850 16167",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000\n100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000\n100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 100000\n2 2 100000 1\n1 99999 1 99999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}