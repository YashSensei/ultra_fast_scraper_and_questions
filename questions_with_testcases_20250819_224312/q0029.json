{
  "problem_code": "problems",
  "title": "Steady Cow Assignment",
  "tags": [],
  "text": "Farmer John's N (1 ≤ N ≤ 1000) cows each reside in one of B (1 ≤ B ≤ 20) \r\nbarns which, of course, have limited capacity. Some cows really like their \r\ncurrent barn, and some are not so happy.FJ would like to rearrange the cows such that the cows are as equally happy \r\nas possible, even if that means all the cows hate their assigned barn.Each cow gives FJ the order in which she prefers the barns. A cow's happiness \r\nwith a particular assignment is her ranking of her barn. Your job is to find an \r\nassignment of cows to barns such that no barn's capacity is exceeded and the \r\nsize of the range (i.e., one more than the positive difference between the the \r\nhighest-ranked barn chosen and that lowest-ranked barn chosen) of barn rankings \r\nthe cows give their assigned barns is as small as possible.InputLine 1: Two space-separated integers, N and BLines 2..N+1: Each line contains B space-separated integers which are exactly \r\n1..B sorted into some order. The first integer on line i+1 is the number of the \r\ncow i's top-choice barn, the second integer on that line is the number of the \r\ni'th cow's second-choice barn, and so on.Line N+2: B space-separated integers, respectively the capacity of the first \r\nbarn, then the capacity of the second, and so on. The sum of these numbers is \r\nguaranteed to be at least N.OutputOne integer, the size of the minimum range of barn rankings the cows give \r\ntheir assigned barns, including the endpointsExampleInput:6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2Output:2",
  "sample_input": "Input:6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STEAD",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 6\n3 9 5 1\n3 4 6 4\n6 6 8 7\n9 6 10 8\n4 10 4 8\n3 9 1 4\n7 10 4 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 4\n9 7 9 9\n8 10 2 2\n3 2 2 3\n1 10 4 5\n6 3 3 10\n6 10 7 5\n1 7 8 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 7\n9 5 5 3\n4 3 7 5\n4 9 6 3\n9 3 9 3\n6 3 4 5\n2 6 5 3\n6 1 3 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "62 100\n19 43 45 37\n40 46 52 38\n99 6 69 50\n45 39 83 2\n14 62 81 4\n95 11 4 26\n16 9 35 5",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 50\n77 2 77 16\n29 66 47 17\n58 6 32 35\n97 23 7 2\n47 36 18 62\n67 72 8 56\n74 23 27 26",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "18 50\n52 37 55 85\n59 52 87 27\n47 38 54 68\n63 9 94 26\n66 49 28 35\n24 41 30 11\n70 55 87 66",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "53 64\n5 25 57 5\n80 91 76 42\n53 70 8 32\n67 54 81 11\n72 76 44 10\n65 28 58 95\n51 48 60 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "61 93\n64 14 50 50\n88 75 5 92\n84 44 94 15\n49 59 53 89\n37 14 95 26\n33 8 30 35\n43 100 95 16",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "447 196\n381 299 214 80\n231 225 322 113\n408 477 348 189\n207 471 358 216\n391 369 65 100\n469 440 88 139\n403 73 82 299",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "380 430\n102 355 475 51\n500 291 81 246\n88 479 173 240\n439 123 211 191\n345 439 330 173\n264 77 362 485\n193 73 83 454",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "365 324\n120 300 412 95\n93 478 288 376\n216 255 382 64\n82 168 175 416\n401 336 136 448\n219 160 348 409\n242 435 242 97",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "371 176\n375 338 167 473\n405 222 99 81\n168 321 460 424\n237 77 159 277\n402 328 173 322\n248 354 340 455\n407 462 173 350",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "263 481\n409 415 229 441\n162 308 76 121\n438 174 270 95\n101 132 345 248\n198 451 409 215\n464 337 396 210\n344 484 71 324",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "131 351\n118 317 105 445\n295 416 161 185\n287 420 416 346\n233 249 217 315\n131 246 135 490\n219 396 468 404\n200 375 219 473",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "136 340\n464 300 358 425\n320 491 339 335\n497 152 355 316\n432 63 462 119\n425 89 216 155\n56 191 173 244\n302 494 224 65",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n1 2 1 1\n1 2 2 1\n1 1 1 1000\n1 999 2 2\n2 1 1000 1000\n1 2 999 2\n999 2 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n1000 999 999 1\n2 999 999 999\n1000 1 1 1\n1000 1 1 1000\n1 1 1000 999\n1 999 1 999\n1000 1000 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}