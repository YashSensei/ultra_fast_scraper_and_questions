{
  "problem_code": "problems",
  "title": "Yungom",
  "tags": [],
  "text": "After getting her Ph.D in Cooking with her research paper on \"How to Prepare a Pizza\", and another Ph.D in Medicine for finding cures for H.I.V. and Alzheimer's, Dae Jang Guem (Called Yungom in Persian) decided to solve yet another open problem in Information Theory that even Shanon (the father of Information Theory) failed to solve. She is going to construct a language of n words with d given characters c1, c2 ... cd. This language should be prefix free which means that there is no pair of words like (s, t) in which the word s is a prefix of t. Each character ci has a usage cost of wi. The cost of a word s with the length l is the sum of the costs of its l characters. For example, if c1=a; c2=b; w1=1 and w2=10, the cost of word \"aba\" is 1+10+1=12. Similarly, the cost of a language with n words is equal to the sum of the costs of its n words. For example, the cost of language “ab”; “bbb”; “baaa” is 11+30+13=54. Like her previous jobs, Yungom is going to do this task perfectly which means that she wants to find the minimum cost, prefix free language with n words.InputThere are multiple test cases in the input. Each test case starts with a line containing two integers n (1 ≤ n ≤ 200) and d (1 ≤ d ≤ 200). The next line contains non-negative integers w1, w2 ... wd. The input is terminated by a line containing two zero numbers.OutputFor each test case, you should print the minimum cost of a prefix free language with n words and d characters.SampleInput3 4\r\n1 10 100 1000\r\n0 0Output23",
  "sample_input": "Input3 4\r\n1 10 100 1000\r\n0 0Output23",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HPREFIX",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "Input3 4\r\n1 10 100 1000\r\n0 0Output23",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 6\ncwj 8\n7 6 4 6\n2 10 7\n8 bj",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 4\ndod 6\n6 2 9 4\n10 3 4\n8 oa",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 3\ntu 10\n10 3 1 1\n6 8 9\n1 q",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 3\nlvub 12\n93 45 52 64\n91 49 62\n40 dugp",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 27\nsxwe 91\n68 6 60 74\n1 65 27\n11 r",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "23 55\na 79\n24 82 14 57\n64 18 48\n78 vfp",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "42 53\nqxrptb 94\n68 2 56 50\n29 16 37\n88 mdxwrgajl",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 76\nskt 5\n64 16 39 1\n7 95 60\n75 xa",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 32\nd 67\n80 40 28 23\n87 77 55\n63 djqwlcl",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "47 60\nb 36\n49 34 40 30\n92 13 71\n88 gniouf",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "87 52\nlpscld 68\n80 38 61 10\n39 64 65\n65 cq",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "78 57\nooma 47\n50 100 65 14\n94 63 26\n92 qbj",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "20 36\nppiwm 47\n52 84 17 67\n60 45 23\n41 akdt",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "59 61\nlak 64\n41 95 86 50\n100 86 32\n33 kooc",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "45 86\nyzyu 69\n84 60 45 72\n53 49 10\n10 rf",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200 200\nkjl 200\n200 200 200 200\n200 200 200\n200 loh",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200 200\nvepy 200\n200 200 200 200\n200 200 200\n200 ph",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "199 200\nel 1\n2 200 1 199\n199 200 199\n200 c",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\nzjmlil 1\n199 1 1 199\n199 199 2\n199 rtvlilhuz",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}