{
  "problem_code": "problems",
  "title": "Candy",
  "tags": [],
  "text": "Little Charlie is a nice boy addicted to candies. He is even a subscriber to  All Candies Magazine and was selected to participate in the International Candy Picking Contest.In this contest a random number of boxes containing candies are disposed inMrows withNcolumns each (so, there are a total ofM×Nboxes). Each box has a number indicating how many candies it contains.The contestant can pick a box (any one) and get all the candies it contains. But there is a catch (there is always a catch): when choosing a box, all the boxes from the rows immediately above and immediately below are emptied,  as well as the box to the left and the box to the right of the chosen box.  The contestant continues to pick a box until there are no candies left.The figure bellow illustrates this, step by step. Each cell represents one box and the number of candies it contains. At each step, the chosen box is circled and the shaded cells represent the boxes that will be emptied. After eight steps the game is over and Charlie picked 10+9+8+3+7+6+10+1 = 54 candies.For small values ofMandN, Charlie can easily find the maximum number of candies he can pick, but when the numbers are really large he gets completely lost. Can you help  Charlie maximize the number of candies he can pick?InputThe input contains several test cases. The first line of a test case contains two positive integersMandN(1   ≤M×N≤ 105), separated by a single space, indicating the number of rows and columns respectively. Each of the followingMlines containsNintegers separated by single spaces, each representing the initial number of candies in the corresponding box. Each box will have initially at least 1 and at most 103candies.The end of input is indicated by a line containing two zeroes separated by a single space.OutputFor each test case in the input, your program must print a single line, containing a single value, the integer indicating the maximum number of candies that Charlie can pick.ExampleInput:5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0Output:54\r\n40\r\n17",
  "sample_input": "Input:5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0Output:54\r\n40\r\n17",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMER08C",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0",
      "expected_output": "54\r\n40\r\n17",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10\n9 1 7 10 5\n10 8 7 3 1\n9 2 9 2 2\n1 1 1 4 6\n10 2 8 4 1\n3 6\n8 5 10 1\n1 3 5 3\n4 3 9 1\n6 6 7 2\n5 6\n3 6 4 7\n7 8 2 8\n8 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n9 1 10 2 6\n5 2 2 3 2\n1 1 1 3 8\n10 1 1 9 8\n10 1 5 7 8\n7 8\n6 9 2 7\n8 5 2 6\n3 9 2 2\n2 1 9 5\n5 6\n8 9 1 1\n7 4 10 2\n3 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 8\n7 1 4 9 5\n4 10 3 8 10\n8 6 1 9 4\n10 10 4 9 8\n3 6 3 2 1\n7 10\n10 2 1 8\n3 1 1 10\n7 6 1 9\n7 9 10 8\n4 5\n3 7 3 2\n3 9 10 3\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 85\n69 31 59 70 11\n55 25 20 49 50\n29 57 42 34 23\n78 52 77 81 39\n9 22 49 79 38\n90 68\n77 91 51 64\n71 97 84 51\n78 68 84 83\n10 46 43 17\n28 91\n15 75 47 23\n48 49 4 46\n7 21",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "68 74\n81 54 88 88 93\n80 94 1 72 88\n46 98 13 94 48\n59 55 78 74 29\n24 59 81 71 74\n4 80\n74 63 4 5\n47 93 38 57\n86 12 22 34\n71 22 85 81\n82 67\n11 74 16 70\n16 63 19 34\n61 64",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 37\n33 43 41 28 45\n84 11 54 20 14\n48 14 90 72 10\n67 28 39 53 53\n68 31 66 43 67\n95 34\n82 28 21 2\n88 20 85 87\n67 69 16 75\n11 83 3 95\n51 25\n13 91 61 92\n3 70 28 54\n13 67",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 15\n12 32 95 5 97\n96 65 85 73 12\n15 63 59 49 94\n88 16 7 83 55\n87 9 45 41 94\n27 52\n76 15 40 3\n9 19 56 46\n67 70 17 48\n26 2 23 55\n55 48\n48 59 46 72\n85 51 80 66\n87 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 3\n52 83 10 52 7\n2 55 98 87 1\n40 63 38 25 5\n97 100 45 96 4\n9 78 12 28 100\n87 66\n49 9 63 76\n58 37 61 55\n58 4 5 59\n31 30 30 11\n58 16\n72 18 31 73\n58 23 47 44\n98 91",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "17 44\n33 22 43 22 36\n32 30 13 46 33\n6 8 29 16 41\n29 33 12 44 43\n41 37 5 25 51\n29 26\n10 38 33 46\n38 37 22 19\n10 47 46 42\n22 51 37 32\n47 15\n52 17 14 14\n14 39 23 37\n26 7",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "22 18\n19 34 11 21 25\n23 30 27 34 35\n42 42 11 39 24\n49 51 47 10 36\n50 38 12 41 10\n32 9\n18 47 43 29\n25 16 41 48\n7 17 51 30\n32 45 23 45\n8 20\n50 31 49 35\n17 43 13 46\n41 23",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "11 38\n44 25 13 14 41\n11 48 9 18 17\n39 34 44 47 32\n19 19 51 44 47\n17 19 15 52 52\n8 50\n37 48 25 18\n8 35 50 41\n18 6 26 39\n21 17 7 6\n51 7\n46 40 16 24\n46 44 49 12\n29 43",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "7 18\n39 24 35 18 15\n45 9 48 34 22\n11 43 43 39 9\n23 44 34 28 24\n49 16 47 29 40\n33 11\n20 40 29 19\n33 13 48 23\n43 35 36 26\n36 8 40 15\n22 32\n37 43 23 34\n20 7 5 45\n14 19",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19 15\n51 43 32 43 32\n36 50 37 31 36\n52 19 21 37 24\n42 21 26 48 16\n16 18 12 30 29\n8 35\n39 18 28 48\n14 42 23 38\n8 35 8 24\n22 44 33 28\n47 16\n51 35 23 28\n24 42 38 6\n9 25",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 17\n42 48 49 41 18\n37 8 24 22 46\n44 31 18 42 42\n24 18 27 45 50\n11 38 9 33 35\n46 16\n24 42 41 9\n37 23 36 35\n10 28 34 5\n43 32 6 7\n37 23\n21 52 9 29\n10 17 10 42\n17 33",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "42 11\n35 16 34 47 34\n36 43 34 52 30\n26 51 10 37 37\n5 23 35 31 31\n9 43 35 33 17\n28 24\n41 23 11 41\n13 33 11 9\n44 10 24 27\n6 32 5 48\n32 39\n47 52 48 18\n28 29 44 22\n47 32",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "104 104\n2 105 2 104 104\n2 2 105 104 2\n104 104 1 104 105\n1 105 2 1 1\n104 2 105 104 1\n2 1\n104 105 105 2\n104 104 104 104\n1 105 104 1\n2 1 104 2\n105 1\n105 1 105 1\n104 105 104 1\n2 104",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 104\n105 1 2 1 105\n1 104 104 2 105\n1 104 1 105 2\n1 105 105 1 105\n104 1 105 2 105\n1 104\n105 2 105 104\n105 104 2 2\n104 2 104 2\n1 104 1 1\n104 105\n2 105 2 1\n105 104 1 104\n104 105",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}