{
  "problem_code": "problems",
  "title": "The Bridges of San Mochti",
  "tags": [],
  "text": "You work at a military training facility in the jungles of San\r\nMotchi.  One of the training exercises is to cross a series of rope\r\nbridges set high in the trees.  Every bridge has a maximum capacity,\r\nwhich is the number of people that the bridge can support without\r\nbreaking.  The goal is to cross the bridges as quickly as possible,\r\nsubject to the following tactical requirements:One unit at a time!If two or more people can cross a bridge at the same time (because\r\nthey do not exceed the capacity), they do so as a unit; they walk as\r\nclose together as possible, and they all take a step at the same time.\r\nIt is never acceptable to have two different units on the same bridge\r\nat the same time, even if they don't exceed the capacity.  Having\r\nmultiple units on a bridge is not tactically sound, and multiple units\r\ncan cause oscillations in the rope that slow everyone down.  This rule\r\napplies even if a unit contains only a single person.Keep moving!When a bridge is free, as many people as possible begin to cross\r\nit as a unit.  Note that this strategy doesn't always lead to an\r\noptimal overall crossing time (it may be faster for a group to wait\r\nfor people behind them to catch up so that more people can cross at\r\nonce).  But it is not tactically sound for a group to wait, because\r\nthe people they're waiting for might not make it, and then they've not\r\nonly wasted time but endangered themselves as well.Periodically the bridges are reconfigured to give the trainees a\r\ndifferent challenge.  Given a bridge configuration, your job is to\r\ncalculate the minimum amount of time it would take a group of people\r\nto cross all the bridges subject to these requirements.For example, suppose you have nine people who must cross two\r\nbridges: the first has capacity 3 and takes 10 seconds to cross; the\r\nsecond has capacity 4 and takes 60 seconds to cross.  The initial\r\nstate can be represented as (9 0 0), meaning that 9 people\r\nare waiting to cross the first bridge, no one is waiting to cross the\r\nsecond bridge, and no one has crossed the last bridge.  At 10 seconds\r\nthe state is (6 3 0).  At 20 seconds the state is\r\n(3 3 /3:50/ 0), where /3:50/ means that a unit of three\r\npeople is crossing the second bridge and has 50 seconds left.  At 30\r\nseconds the state is (0 6 /3:40/ 0); at 70 seconds it's\r\n(0 6 3); at 130 seconds it's (0 2 7); and at 190\r\nseconds it's (0 0 9).  Thus the total minimum time is 190\r\nseconds.InputThe input consists of one or more bridge\r\nconfigurations, followed by a line containing two zeros that signals\r\nthe end of the input.  Each bridge configuration begins with a line\r\ncontaining a negative integer –B and a positive integer P, where\r\nB is the number of bridges and P is the total number of people that\r\nmust cross the bridges.  Both B and P will be at most 20.  (The reason\r\nfor putting –B in the input file is to make the first line of a\r\nconfiguration stand out from the remaining lines.)  Following are B\r\nlines, one for each bridge, listed in order from the first bridge that\r\nmust be crossed to the last.  Each bridge is defined by two positive\r\nintegers C and T, where C is the capacity of the bridge (the maximum\r\nnumber of people the bridge can hold), and T is the time it takes to\r\ncross the bridge (in seconds).  C will be at most 5, and T will be at\r\nmost 100.  Only one unit, of size at most C, can cross a bridge at a\r\ntime; the time required is always T, regardless of the size of the\r\nunit (since they all move as one).  The end of one bridge is always\r\nclose to the beginning of the next, so the travel time between bridges\r\nis zero.OutputFor each bridge configuration, output one line\r\ncontaining the minimum amount of time it will take (in seconds) for\r\nall of the people to cross all of the bridges while meeting both\r\ntactical requirements.ExampleInput:-1 2\r\n5 17\r\n-1 8\r\n3 25\r\n-2 9\r\n3 10\r\n4 60\r\n-3 10\r\n2 10\r\n3 30\r\n2 15\r\n-4 8\r\n1 8\r\n4 30\r\n2 10\r\n1 12\r\n0 0Output:17\r\n75\r\n190\r\n145\r\n162",
  "sample_input": "Input:-1 2\r\n5 17\r\n-1 8\r\n3 25\r\n-2 9\r\n3 10\r\n4 60\r\n-3 10\r\n2 10\r\n3 30\r\n2 15\r\n-4 8\r\n1 8\r\n4 30\r\n2 10\r\n1 12\r\n0 0Output:17\r\n75\r\n190\r\n145\r\n162",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BRIDGES2",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "-1 2\r\n5 17\r\n-1 8\r\n3 25\r\n-2 9\r\n3 10\r\n4 60\r\n-3 10\r\n2 10\r\n3 30\r\n2 15\r\n-4 8\r\n1 8\r\n4 30\r\n2 10\r\n1 12\r\n0 0",
      "expected_output": "17\r\n75\r\n190\r\n145\r\n162",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 4\n7 4\n5 1\n1 2\n5 2\n8 9\n6 5\n7 5\n10 2\n3 1\n10 7\n6 9\n2 6\n1 8\n4 10\n6 2\n6 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n3 6\n10 2\n8 1\n8 5\n8 4\n6 10\n9 1\n5 8\n5 4\n9 3\n1 6\n9 3\n4 7\n10 7\n3 4\n6 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 9\n2 7\n5 7\n8 7\n6 1\n2 1\n1 8\n7 10\n5 9\n7 2\n6 8\n10 10\n3 8\n9 3\n3 5\n1 3\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "14 55\n60 7\n36 29\n77 45\n31 95\n90 50\n18 56\n61 16\n56 92\n23 13\n67 69\n46 49\n50 77\n45 66\n36 41\n82 56\n29 45",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 9\n57 70\n86 3\n22 28\n85 56\n36 32\n94 27\n42 87\n1 64\n16 29\n62 8\n18 45\n14 44\n65 70\n73 62\n60 28\n11 70",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "48 39\n27 5\n50 2\n12 81\n41 34\n82 5\n3 19\n26 56\n43 85\n61 22\n8 46\n89 77\n1 100\n42 69\n87 37\n65 34\n64 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 88\n39 81\n56 39\n12 54\n82 81\n66 55\n61 12\n13 14\n23 20\n66 42\n4 26\n38 51\n65 31\n20 47\n72 32\n6 91\n18 63",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 64\n50 44\n43 1\n45 24\n63 81\n38 64\n61 31\n19 17\n16 86\n46 20\n12 6\n15 91\n39 7\n50 12\n30 100\n49 30\n39 82",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "432 426\n474 383\n281 365\n426 167\n316 377\n489 346\n421 80\n317 94\n200 61\n337 500\n139 157\n401 273\n384 373\n437 176\n168 330\n140 148\n178 141",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "153 469\n270 160\n188 426\n356 193\n329 121\n499 68\n114 339\n413 333\n287 228\n63 296\n431 462\n394 196\n466 154\n361 94\n197 454\n151 196\n335 217",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "200 321\n257 425\n149 236\n491 269\n395 85\n213 453\n58 214\n72 64\n62 328\n283 171\n431 239\n270 420\n154 372\n378 63\n233 209\n450 483\n133 442",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "118 268\n311 305\n300 392\n66 480\n471 213\n213 391\n415 141\n53 404\n76 390\n334 326\n293 462\n427 170\n113 445\n179 386\n443 300\n83 157\n441 89",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "339 350\n424 418\n407 460\n485 308\n55 234\n179 139\n416 465\n362 443\n366 99\n309 382\n252 352\n327 351\n111 64\n90 72\n299 356\n400 215\n59 295",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "380 212\n138 194\n104 242\n278 329\n334 366\n148 233\n373 154\n430 72\n485 261\n381 410\n307 491\n427 66\n333 270\n383 59\n227 317\n252 222\n103 186",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "291 245\n393 224\n151 177\n96 256\n469 205\n344 201\n414 239\n229 329\n211 397\n141 477\n352 435\n486 260\n262 174\n467 333\n466 301\n249 278\n168 219",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n1000 1\n1000 999\n1 999\n1 2\n999 2\n999 999\n1000 999\n1000 2\n999 1\n2 1000\n1 1000\n1000 999\n1 999\n1 2\n1000 1\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2\n2 2\n2 1000\n999 1\n1 1\n2 999\n999 2\n2 999\n1000 1\n1 999\n1 2\n1 1000\n999 2\n1000 1000\n2 1\n1 1\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}