{
  "problem_code": "problems",
  "title": "Johns Trip",
  "tags": [],
  "text": "Little Johnny has got a new car. He decided to drive around the town to visit his friends. Johnny wanted to visit all his friends, but there was many of them. In each street he had one friend. He started thinking how to make his trip as short as possible. Very soon he realized that the best way to do it was to travel through each street of town only once. Naturally, he wanted to finish his trip at the same place he started, at his parents' house.The streets in Johnny's town were named by integer numbers from 1 ton,n< 1995. The junctions were independently named by integer numbers from 1 tom,mâ‰¤ 44. All junctions in the town had different numbers. Each street was connecting exactly two (not necessarily different) junctions. No two streets in the town had the same number. He immediately started to plan his round trip. If there was more than one such round trip, he would have chosen the one which, when written down as a sequence of street numbers is lexicographically the smallest.But Johnny was not able to find even one such round trip. Help Johnny and write a program which finds the desired shortest round trip. If the round trip does not exist the program should write a message. Assume that Johnny lives at the junction ending the 1st street input with smaller number. All streets in the town are two way. There exists a way from each street to any other street in the town. The streets in the town are very narrow and there is no possibility to turn back the car once he is in the street.InputInput file consists of several blocks. Each block describes one town. Each line in the block contains three integersx,y,z, wherex> 0 andy> 0 are the numbers of junctions which are connected by the street numberz. The end of the block is marked by the line containingx=y= 0. At the end of the input file there is an empty block,x=y= 0.OutputThe output file consists of 2 line blocks corresponding to the blocks of the input file. The first line of each block contains the sequence of street numbers (single members of the sequence are separated by space) describing Johnny's round trip. If the round trip cannot be found the corresponding output block contains the message ``Round trip does not exist.''. The second line of each block is empty.SampleInput1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
  "sample_input": "Input1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JTRIP",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "Input1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 5 1\nc 10 6\n1 5 10\n3 4 7\n7 4 2\n5 6 7\n4 5 2\n3 10\n7 1 3\n4 10 5\n10 1 8\n5 3 4\n10 3\n5 8 10 8 7 2 2 7\n9 xhans 6 6 10 1 7\nvyea yopvg mn pdr gniscj",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3 6\nqn 7 5\n8 3 6\n10 8 5\n2 9 9\n4 4 2\n7 3 4\n2 8\n4 9 5\n1 2 9\n8 3 4\n2 2 5\n4 1\n6 5 3 10 7 3 8 10\n9 z 3 2 9 1 8\nmun gqrh ikb zlpd s",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9 3\nys 9 8\n1 5 8\n5 9 2\n1 7 8\n9 9 5\n9 3 6\n4 1\n7 3 1\n9 10 1\n8 2 2\n4 2 8\n4 10\n8 7 8 9 1 9 5 3\n2 picrpq 10 4 1 1 2\nnkj abryz yj fwrj dcy",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 68 24\nqtitv 50 5\n94 69 58\n12 95 73\n14 61 95\n53 45 60\n84 96 33\n99 28\n35 82 47\n17 17 87\n23 64 16\n7 34 55\n76 78\n98 44 87 59 84 60 40 68\n58 ak 100 44 58 51 86\nszm qg quvfr qwcg gkxxo",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "89 32 66\noi 46 86\n90 66 51\n46 37 49\n35 82 52\n100 53 15\n31 53 42\n2 54\n25 74 12\n33 94 88\n22 53 8\n36 51 72\n14 81\n88 65 34 73 55 20 30 44\n1 klc 12 100 4 90 73\nk y kykex lwa duggut",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 7 4\nuln 56 96\n22 72 37\n55 8 8\n13 81 74\n33 11 6\n92 76 60\n80 66\n4 32 62\n11 52 47\n2 10 29\n95 51 48\n70 32\n75 52 76 10 18 27 92 37\n70 jytfolc 60 49 4 55 1\ny gav cjlh thc oti",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 15 49\nwqke 98 19\n56 46 30\n81 9 78\n20 74 10\n65 96 87\n92 99 19\n1 93\n23 4 10\n86 44 26\n52 97 85\n12 40 71\n3 51\n15 93 12 35 10 68 7 20\n37 gwlc 68 12 56 91 87\ngjjd lb kcv yw p",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 24 52\ndlsag 16 9\n9 22 79\n47 57 45\n72 8 28\n58 74 64\n47 19 7\n51 14\n14 68 66\n43 96 17\n39 25 1\n37 20 98\n72 74\n60 4 27 33 94 33 39 37\n61 ke 71 37 68 70 98\nu ixm to u jiuh",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "547 367 370\nstyhrp 549 105\n711 264 214\n119 817 866\n669 497 306\n692 840 973\n516 669 135\n109 786\n483 351 874\n601 301 687\n529 124 829\n394 761 901\n757 747\n728 319 650 809 196 680 355 786\n767 ucnclp 355 655 341 491 518\ny wbmmv li nlj klvge",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "594 738 547\ndhtj 336 351\n736 650 631\n304 277 148\n553 163 562\n580 459 853\n528 664 247\n166 293\n563 491 635\n555 612 522\n113 748 729\n278 916 781\n762 737\n104 472 958 431 691 607 640 922\n740 lxcrzb 158 702 477 631 229\ntxyr uapg ep minps fs",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "382 332 526\ngvdzx 426 847\n470 244 445\n603 828 366\n593 651 254\n412 967 809\n693 758 179\n151 292\n410 955 167\n890 994 572\n679 506 525\n592 735 376\n571 655\n724 705 623 926 875 202 681 732\n949 k 720 997 503 612 436\nqus dgkn ewf vgkqg stwxhe",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "435 646 638\ns 648 745\n528 920 550\n527 590 173\n787 487 826\n585 103 222\n125 545 311\n175 139\n422 638 723\n159 943 390\n444 185 268\n302 933 843\n193 213\n548 233 147 553 992 703 855 247\n866 vwpead 699 256 536 206 599\njy bhmx ppwo osy itwblc",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "265 850 627\njm 456 302\n773 113 746\n755 771 654\n469 154 957\n482 770 750\n265 644 313\n960 607\n503 130 891\n142 519 613\n328 499 338\n344 838 344\n293 234\n945 379 238 406 334 629 912 442\n346 wpxtisdk 169 400 406 394 568\nsrfxu yjc a bq viqwuc",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "588 111 374\nazdg 386 424\n101 494 902\n216 681 251\n915 184 126\n725 385 617\n668 332 441\n986 592\n361 512 574\n632 804 638\n960 936 434\n174 688 609\n698 654\n264 764 708 896 798 196 235 275\n715 kocsao 337 960 192 332 384\nl prwl ie ntf nivnrb",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "342 462 250\nfm 312 981\n318 101 938\n809 817 989\n909 328 162\n279 240 209\n505 560 379\n837 551\n699 897 143\n915 767 602\n286 955 502\n288 445 650\n738 192\n377 502 935 943 205 331 358 839\n220 wryzlznw 577 530 863 160 924\nvcjzq g shf aru xrxnf",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1995 1995 1995\nskhonc 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995 1995 1995 1995 1995 1995\n1995 hgun 1995 1995 1995 1995 1995\nali ktm xie n gqzfv",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1995 1995 1995\nvuv 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995 1995 1995 1995 1995 1995\n1995 epgarl 1995 1995 1995 1995 1995\neclgo hqo dpyva h up",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 1994\nugo 2 1994\n1 1994 1994\n1994 1994 1\n1995 2 2\n1995 1995 1995\n2 2 1994\n1 1\n1995 2 1994\n1 1994 2\n1 1 2\n1994 1995 2\n1 1994\n1994 2 2 1994 1995 2 1 1995\n1994 ay 2 1995 1 2 1\nvtnb df k z jcczm",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1995 1995 1\ncxbalk 1 1994\n1994 2 2\n1995 1995 2\n1994 1995 2\n1995 1995 1994\n1995 1994 1\n2 1994\n1 2 2\n1995 1994 1994\n1995 1995 2\n1995 1 1994\n1 1995\n1 1995 1995 1994 1 1995 1995 1994\n1994 fuzwmjs 2 2 1994 1994 1995\nndtlg o nmgp b b",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}