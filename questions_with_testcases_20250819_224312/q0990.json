{
  "problem_code": "problems",
  "title": "Another Version of Inversion",
  "tags": [],
  "text": "DCE Coders admins are way much geekier than they actually seem! Kartik has been following that tradition lately. How? Well, he took the inversion count problem to a whole new level!Sounds pretty normal to you, huh? Wanna challenge him? Try solving his version of inversion count then!You are given a 2-d array of integers. You need to find out the inversion count of that array. A pair of integers in the 2-d array counts as an inversion pair (A,B) if and only if:There exists a valid path from top-left corner (0, 0) to bottom right corner (r, c) such that A and B integers lie on that path.A occurs before B on that path.And, A > B.A valid path is defined as a path that can be traversed from top-left corner (0, 0) to bottom-right corner (r, c) by moving only in right or downwards direction, without moving out of the grid.Are you geekier than Kartik?Constraints:0 < R, C ≤ 3000 < Ai ≤ 105, where Ai stands for an integer in the array.InputFirst line contains space separated 2 integers, R and C, denoting the number of rows and columns.Next R lines contain C space separated integers representing the 2-d array.OutputOutput the number of inversion pairs as described in the problem statement.ExampleInput:4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14Output:10",
  "sample_input": "Input:4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14Output:10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPC14A",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14",
      "expected_output": "10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\n7 5 8 5\n3 10 9 7\n7 1 3 9\n7 5 6 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 6\n6 7 1 1\n4 4 8 9\n10 6 5 7\n3 6 7 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n3 9 5 10\n1 7 4 5\n6 4 7 7\n4 2 10 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "86 51\n87 18 81 76\n94 26 99 80\n13 98 18 73\n38 83 58 15",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "88 58\n100 79 82 38\n77 27 52 77\n80 92 22 67\n12 61 86 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 100\n40 26 40 83\n73 46 59 58\n13 40 6 96\n92 48 17 35",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "63 1\n18 70 2 60\n76 6 21 22\n24 53 87 1\n52 94 71 93",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 22\n30 5 85 40\n17 16 89 16\n62 42 48 6\n2 14 8 8",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "399 423\n164 61 336 306\n177 439 246 168\n499 357 478 361\n141 133 130 192",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "380 303\n352 377 427 343\n425 79 161 378\n113 56 464 396\n95 116 406 106",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "107 140\n273 206 432 297\n127 150 395 421\n391 100 490 299\n487 90 495 213",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "305 372\n185 194 197 395\n478 302 64 355\n315 243 256 282\n117 353 244 403",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "467 104\n292 130 213 219\n187 261 251 330\n248 168 163 354\n497 95 420 273",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "56 124\n431 389 427 440\n307 440 462 479\n346 222 145 254\n337 453 343 104",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "486 283\n152 120 96 140\n218 398 284 292\n227 315 125 80\n253 358 298 299",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 999 2 1000\n1000 1000 999 999\n2 1000 2 1\n999 1 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n2 999 2 1000\n1 999 1 2\n1000 999 999 2\n999 1 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}