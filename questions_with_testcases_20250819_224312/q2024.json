{
  "problem_code": "problems",
  "title": "Good Travels",
  "tags": [],
  "text": "It's that time of year again - the best ACM-ICPC team of all time is off to the World Finals! Being the best, they realize that a good performance starts before the contest itself - in order to get into the perfect mindset, they must have as much fun on the trip to the contest site as possible!The Team is interested in a network of N (2 ≤ N ≤ 106) cities (conveniently numbered 1..N), interconnected by M (1 ≤ M ≤ 106) one-way flights (similarly numbered 1..M). Their hometown is city S (1 ≤ S ≤ N), and the contest will take place in city E (1 ≤ E ≤ N, S ≤ E). Flight i goes from city ai (1 ≤ ai ≤ N) to city bi (1 ≤ bi ≤ N, ai ≤ bi), and no two flights connect the same pair of cities in the same direction. In general, no cities are guaranteed to be reachable from other cities by a sequence of flights. However, The Team of course knows that city E is reachable from city S - they're not about to break their streak of triumphant wins!Now, each city i has a fun value, fi (0 ≤ fi ≤ 106), associated with it. Along their trip, The Team will take time to have fun at every city they visit, including the first and last. However, though they can visit a city multiple times (including cities S and E), or even take a certain flight multiple times, surely this gets boring quickly - therefore, any city's fun can only be had up to once.The Team wants to determine the maximal amount of fun they can have on any sequence of flights that starts at city S and ends at city E. Naturally, every member on The Team is so intelligent that they've calculated this value in their heads (and are quite excited about it) - but can you?InputFirst line: 4 integers, N, M, S, and ENext N lines: 1 integer, fi, for i = 1..NNext M lines: 2 integers, ai and bi, for i = 1..MOutput1 integer, the maximal amount of fun The Team can have on their trip.ExampleInput:5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4Output:22Explanation of SampleThe network of cities and flights looks like this (the fun values of cities are shown below them):The optimal route that The Team can take goes through cities 1 → 3 → 4 → 5 → 4, yielding a total fun value of 5 + 5 + 10 + 2 + 0 = 22.",
  "sample_input": "Input:5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4Output:22",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOODA",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4",
      "expected_output": "22",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 6 3 4\n3\n2\n9\n4\n6\n1 9\n2 2\n4 8\n5 2\n9 1\n3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 1 7 8\n1\n5\n10\n3\n6\n3 6\n9 1\n3 6\n8 8\n3 9\n2 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 9 8\n4\n4\n10\n1\n6\n5 1\n4 2\n9 9\n7 4\n5 2\n6 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 64 82 85\n37\n22\n61\n75\n42\n86 40\n73 15\n18 77\n43 30\n10 73\n4 42",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "28 26 71 26\n17\n85\n26\n21\n77\n2 30\n2 27\n66 7\n32 19\n26 100\n41 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 8 33 14\n43\n79\n58\n36\n38\n37 82\n11 53\n22 74\n82 52\n26 78\n33 77",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "72 18 6 91\n82\n56\n29\n60\n92\n61 66\n40 76\n78 5\n42 74\n97 89\n29 87",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 4 38 91\n8\n11\n95\n60\n66\n7 90\n88 3\n74 76\n79 82\n7 55\n98 64",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "22 10 5 48\n24\n29\n32\n42\n41\n17 45\n50 22\n34 15\n10 45\n10 42\n50 16",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "22 13 15 34\n8\n45\n6\n19\n43\n42 6\n6 12\n35 31\n29 34\n11 29\n38 9",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36 20 30 21\n28\n48\n5\n41\n20\n53 52\n27 53\n24 25\n29 49\n32 6\n10 36",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18 51 28 16\n5\n46\n14\n49\n14\n32 6\n41 12\n5 40\n9 22\n9 34\n15 16",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "36 53 12 51\n33\n12\n17\n17\n46\n40 18\n45 47\n26 29\n39 21\n18 37\n22 33",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14 17 39 9\n33\n22\n18\n30\n14\n6 50\n14 44\n42 37\n49 9\n10 5\n46 25",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "28 43 23 30\n31\n35\n39\n9\n39\n27 35\n10 35\n40 53\n40 47\n5 20\n29 39",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106\n106\n106\n106\n106\n106\n106 106\n106 106\n106 106\n106 106\n106 106\n106 106",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106\n106\n106\n106\n106\n106\n106 106\n106 106\n106 106\n106 106\n106 106\n106 106",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1 106\n1\n1\n1\n106\n1\n1 106\n1 2\n1 2\n2 105\n2 2\n1 105",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "106 1 2 2\n1\n105\n2\n2\n2\n2 2\n106 2\n106 2\n106 1\n1 105\n105 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}