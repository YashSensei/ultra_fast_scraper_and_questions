{
  "problem_code": "problems",
  "title": "K",
  "tags": [],
  "text": "EnglishVietnameseYou are working for Macrohard company in data structures department. After\r\nfailing your previous task about key insertion you were asked to write a\r\nnew data structure that would be able to return quickly k-th order statistics\r\nin the array segment.That is, given an array a[1 ... n] of different integer numbers, your\r\nprogram must answer a series of questions Q(i, j, k) in the form: \"What would\r\nbe the k-th number in a[i ... j] segment, if this segment was sorted?\"For example, consider the array a = (1, 5, 2, 6, 3, 7, 4). Let the question\r\nbe Q(2, 5, 3). The segment a[2 ... 5] is (5, 2, 6, 3). If we sort this\r\nsegment, we get (2, 3, 5, 6), the third number is 5, and therefore the\r\nanswer to the question is 5.InputThe first line of the input contains n — the size of the array, and m —\r\nthe number of questions to answer (1 ≤ n ≤ 100000, 1 ≤ m ≤ 5000).The second line contains n different integer numbers not exceeding 109by their absolute values — the array for which the answers should be given.The following m lines contain question descriptions, each description consists\r\nof three numbers: i, j, and k (1 ≤ i ≤ j ≤ n, 1 ≤ k ≤ j - i + 1) and\r\nrepresents the question Q(i, j, k).OutputFor each question output the answer to it — the k-th number in sorted\r\na[i ... j] segment.ExampleInput:7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3Output:5\r\n6\r\n3Note: a naive solution will not work!!!",
  "sample_input": "Input:7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3Output:5\r\n6\r\n3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKTHNUM",
  "scraped_at": "2025-08-17 00:33:54",
  "test_cases": [
    {
      "input": "7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3",
      "expected_output": "5\r\n6\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10\n1 3 5 5 4 5 5\n4 4 2\n7 10 9\n1 8 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8\n1 1 1 3 1 3 2\n1 3 4\n9 1 4\n9 3 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n10 10 6 1 10 1 10\n9 7 8\n7 4 10\n4 7 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "78 32\n44 16 70 94 81 13 22\n91 54 6\n66 15 76\n50 29 14",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "20 89\n32 58 15 42 90 69 72\n51 65 60\n51 74 17\n4 73 23",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "54 40\n26 60 9 81 16 91 24\n69 17 70\n18 25 67\n30 59 100",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 1\n69 59 14 11 60 12 66\n72 44 43\n33 19 4\n89 20 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 86\n36 71 50 5 23 52 72\n76 64 52\n36 8 42\n80 93 2",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "47926 34171\n9738 30933 7635 20941 26275 31896 49686\n5230 43295 10785\n49623 37132 15637\n38852 43706 39139",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "43798 11844\n7686 8128 27841 25799 12969 23218 21765\n15166 48011 20669\n23627 13197 25117\n22972 41485 49652",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "21726 11796\n37398 25615 44932 10257 43206 25775 38496\n13624 36371 33573\n23978 41285 31477\n23761 10177 36141",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "49556 48311\n43972 21842 41593 8397 36012 7846 42213\n33029 33999 15773\n46717 21684 37024\n11691 5773 36984",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "27982 24159\n12310 27671 33434 31873 20866 29416 41441\n11408 48146 12221\n27742 48489 15836\n39472 48924 34547",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5401 47973\n12129 36320 21849 41669 30148 30128 39617\n35556 43197 43784\n46070 31677 26585\n17396 20092 49653",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44413 35896\n30011 13933 27424 16169 44190 35697 7374\n22492 11246 32334\n6953 42162 36329\n47973 19930 40915",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99999\n2 2 100000 2 1 100000 99999\n99999 99999 1\n99999 1 1\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n2 2 99999 99999 2 99999 2\n2 100000 99999\n2 99999 1\n1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}