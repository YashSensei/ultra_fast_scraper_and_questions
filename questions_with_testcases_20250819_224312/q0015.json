{
  "problem_code": "problems",
  "title": "Barn Expansion",
  "tags": [],
  "text": "Farmer John has N (1 ≤ N ≤ 25,000) rectangular barns on his farm, all\r\nwith sides parallel to the X and Y axes and integer corner coordinates in\r\nthe range 0..1,000,000. These barns do not overlap although they may\r\nshare corners and/or sides with other barns.Since he has extra cows to milk this year, FJ would like to expand some of\r\nhis barns.  A barn has room to expand if it does not share a corner or a\r\nwall with any other barn.  That is, FJ can expand a barn if all four of its\r\nwalls can be pushed outward by at least some amount without bumping into\r\nanother barn.  If two barns meet at a corner, neither barn can expand.Please determine how many barns have room to expand.Inputt – the number of test cases, then t test cases follow.Each test case takes the following form:The first line contains the number of rectangular barns - n.Each of the next n lines contains:Four space-separated integers A, B, C, and D,      describing one barn. The lower-left corner of the barn is at (A, B) and the upper right corner is at (C, D).OutputFor each test case write a single integer that is the number of barns that can be expanded in a separate lineExampleInput:1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1Output:2Input/Output details:There are 5 barns.  The first barn has its lower-left corner at (0, 2) and\r\nits upper-right corner at (2, 7), and so on.Only two barns can be expanded --- the first two listed in the input.\r\nAll other barns are each in contact with at least one other barn.",
  "sample_input": "Input:1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EXPAND",
  "scraped_at": "2025-08-17 00:33:12",
  "test_cases": [
    {
      "input": "1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n10\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n9\n8\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n8\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n36685908\n74544784\n67992259\n4866458\n83624835\n6252079\n83982046\n55845252\n21745035\n18684719\n6005657\n71849048\n51222554\n61460980\n88735867\n38736768\n12182752\n82743640\n65590172",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n42081592\n39653212\n83029783\n14227752\n329208\n34844629\n24235483\n53830437\n52214103\n7908201\n85363599\n89244260\n43354070\n45078449\n60696780",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n66692736\n41052462\n71290451\n44288388\n80527388\n45867553",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n33093720\n86333031\n46139109\n60361520\n36383408\n28182015\n16856927",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n39194723\n62692693\n37207856\n75018181\n55736460\n52348002\n49575878\n4812614\n24644492\n24344448\n806357",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "25\n71070\n80971\n67868\n96105\n4067\n64768\n96526\n42596\n30936\n57662\n16338\n73719\n69088\n91981\n79094\n18419\n44349\n18891\n79619\n34514\n99480\n69773\n67448\n54590\n35092",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n15726\n98089\n69375\n54176\n16953\n95876\n9\n90057\n1601\n36071\n16959\n95242\n48555\n81438\n13136\n16346\n16401\n50156\n91083\n49651\n13177",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n54314\n86407\n2476\n24133\n60192\n31360\n51973\n46007\n68133\n35044\n92771\n39027\n65739\n51472\n9500\n84745\n1376\n61882\n90958\n42216\n99065\n9825\n38812\n20367\n65416",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n44147\n18684\n55637\n12611\n32484\n38707\n85945\n76645\n95654\n86731\n33898\n92491\n23145\n48807\n16002\n45465\n97258\n73846\n20959\n79388\n96751",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n7538\n42350\n76989\n14914\n70140\n34120\n52673\n65046\n99311\n6918\n23107\n38987\n53364\n35530\n12399\n3188\n54580\n72462\n90267\n12619\n23554",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n68804\n799\n55011\n89446\n28417\n69405\n82794\n25198\n39621\n33073\n98572\n22429\n45877\n50849\n15268\n55446\n19353\n43578\n90763\n49022\n17596\n85744\n85089\n1019",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n88261\n94309\n99557\n15869\n44004\n64607\n82130\n28742\n35161\n57046\n65136\n46502\n46967\n13331\n28573\n39595\n21037\n84732\n90329\n3962\n47302\n63679\n20137",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n47321347\n92400436\n85981273\n85732242\n35099098\n30530564\n23171427\n43062952\n40406650\n25048168\n34908737\n55356509\n13416584\n51182796\n78093353\n91302509\n96695333\n80798475\n28107194\n30449144\n78717774\n48466087\n59469479\n58720814\n69460342",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "25\n53578100\n70870385\n99098248\n93874787\n81283004\n27369189\n41958209\n6175909\n81996497\n99703292\n45449212\n24318527\n9263710\n31581028\n70218374\n61602211\n4992890\n49271786\n76528949\n97002176\n78854320\n31723820\n14046171\n33982695\n97349256",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "2\n4911464\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}