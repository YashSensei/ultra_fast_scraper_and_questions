{
  "problem_code": "problems",
  "title": "Najkraci",
  "tags": [],
  "text": "A road network in a country consists of N cities and M one-way roads. The cities are numbered 1 through N. For each road we know the origin and destination cities, as well as its length.We say that the road F is a continuation of road E if the destination city of road E is the same as the origin city of road F. A path from city A to city B is a sequence of road such that origin of the first road is city A, each other road is a continuation of the one before it, and the destination of the last road is city B. The length of the path is the sum of lengths of all roads in it.A path from A to B is a shortest path if there is no other path from A to B that is shorter in length.Your task is to, for each road, output how many different shortest paths containing that road, modulo 1 000 000 007.InputThe first line contains two integers N and M (1 ≤ N ≤ 1500, 1 ≤ M ≤ 5000), the number of cities and roads.Each of the following M lines contains three positive integers O, D and L. These represent a one-way road from city O to city D of length L. The numbers O and D will be different and L will be at most 10000.OutputOutput M integers, each on its own line – for each road, the number of different shortest paths containing it, modulo 1 000 000 007. The order of these numbers should match the order of roads in the input.ExampleInput:4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8Output:2\r\n3\r\n2\r\n1Input:5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20Output:0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6Note: The test data for this problem consist of the official test cases from the contest, as well some cases of my own.",
  "sample_input": "Input:4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8Output:2\r\n3\r\n2\r\n1",
  "sample_output": "Input:5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20Output:0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6",
  "link": "https://www.spoj.com/problems/NAJKRACI",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8",
      "expected_output": "2\r\n3\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20",
      "expected_output": "0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "8 6\n10 8 9\n1 5 4\n2 8 9\n7 2 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 3\n5 8 6\n2 5 5\n2 3 3\n9 6 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n4 6 6\n1 5 4\n1 6 6\n2 1 3",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "13 13\n8 66 9\n65 99 32\n71 78 82\n85 32 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 63\n41 15 71\n3 60 7\n83 22 80\n20 53 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "91 55\n80 70 58\n20 12 24\n55 4 45\n84 8 51",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 5\n79 49 71\n28 44 83\n51 78 37\n79 30 32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "31 96\n59 81 25\n5 12 6\n79 72 90\n18 71 3",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "483 171\n314 615 129\n656 693 360\n663 131 566\n185 750 119",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "241 164\n395 169 706\n435 392 585\n359 213 360\n466 480 400",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "360 188\n731 316 105\n124 546 105\n725 619 272\n729 298 643",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "539 632\n417 292 134\n558 203 574\n485 545 402\n482 367 609",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "444 312\n104 227 300\n702 457 558\n714 692 309\n189 248 314",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "553 700\n143 115 573\n127 697 747\n328 405 314\n256 310 247",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "286 293\n630 517 264\n597 513 121\n312 199 476\n302 241 218",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1499 2\n2 1500 1499\n1 2 1500\n1 1500 1\n1500 1500 1499",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}