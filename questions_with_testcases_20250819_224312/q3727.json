{
  "problem_code": "problems",
  "title": "Card Shuffling",
  "tags": [],
  "text": "Here is an algorithm for shuffling N cards:The cards are divided into K equal piles, where K is a factor of N.The bottom N / K cards belong to pile 1 in the same order (so the bottom card of the initial pile is the bottom card of pile 1).The next N / K cards from the bottom belong to pile 2, and so on.Now the top card of the shuffled pile is the top card of pile 1. The next card is the top card of pile 2 .. the K-th card of the shuffled pile is the top card of pile K. Then (K + 1)-th card is the card which is now at the top of pile 1, the (K + 2)-nd is the card which is now at the top of pile 2 and so on.For example, if N = 6 and K = 3, the order of a deck of cards \"ABCDEF\" (top to bottom) when shuffled once would change to \"ECAFDB\".Given N and K, what is the least number of shuffles needed after which the pile is restored to its original order?InputThe first line contains the number of test cases T. The next T lines contain two integers each N and K.OutputOutput T lines, one for each test case containing the minimum number of shuffles needed. If the deck never comes back to its original order, output -1.ConstraintsT ≤ 100002 ≤ K ≤ N ≤ 109K will be a factor of N.ExampleSample Input:3\r\n6 3\r\n4 2\r\n5 5Sample Output:6\r\n4\r\n2",
  "sample_input": "Sample Input:3\r\n6 3\r\n4 2\r\n5 5Sample Output:6\r\n4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CODESPTC",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "Sample 3\r\n6 3\r\n4 2\r\n5 5Sample",
      "expected_output": "6\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n5\n7\n10\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n1\n7\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n2\n6\n10\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "15\n70590527\n24127563\n63974288\n79296393\n90329157\n29554156\n53722236\n22026660\n81575258\n31684942\n98890812\n99767268\n18844335\n77052238\n74986280",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n51834932\n55904066\n27576936\n5470292\n87732913\n833781",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n49404075\n29680395\n30541029\n13479757\n73191407\n90346704\n79923030\n681011\n10881048\n34691423\n35307642\n45167104\n16540241\n80314444\n57453004\n96339576\n55048976",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n76284148\n78490371\n78699624\n60897627\n50978460\n23701177\n53258404\n87842395\n52933429\n81592865\n22131670\n94736274\n98109422\n921863\n5644202\n9783108\n79248449\n53296668\n88131941\n83234876",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n13216917\n78006077\n42099299\n68693115\n6092014\n78853194\n36785326\n94312850\n77857887",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "107\n31396\n64660\n35833\n40142\n1968\n83711\n12663\n4515\n52322\n20303\n64281\n50051\n38175\n47488\n39883\n14023\n94035\n14329\n78134\n53594\n26142\n96837\n52366\n28985\n61193\n64633\n13231\n3972\n19462\n92138\n25462\n769\n7781\n93687\n47970\n42479\n21952\n61218\n64924\n71601\n429\n34932\n73940\n75158\n82518\n48336\n78733\n76503\n57449\n14644\n30312\n27290\n75737\n64449\n9284\n67153\n55191\n25089\n47425\n25464\n23919\n61814\n48523\n23954\n92994\n4589\n22641\n37313\n20732\n54492\n97292\n52681\n35620\n50079\n82551\n30141\n78147\n10625\n10320\n97852\n9069\n91323\n25209\n87772\n94665\n26407\n60651\n31897\n52396\n36629\n14637\n60557\n47062\n9611\n36908\n2022\n96050\n39309\n5625\n67973\n92891\n58659\n61125\n63255\n49888\n51341\n32733",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "97\n53138\n4689\n62912\n81674\n91263\n50942\n99657\n18725\n89665\n57162\n23738\n72034\n45717\n67276\n6845\n90521\n60693\n32226\n71729\n13409\n73846\n36225\n50157\n30449\n71389\n39301\n55779\n70245\n31879\n28394\n96394\n82086\n73243\n706\n36334\n48159\n76231\n88952\n50928\n20251\n10675\n10818\n55848\n21479\n52304\n75900\n17513\n16697\n69093\n9111\n4385\n16757\n68623\n19693\n3452\n97747\n12843\n3846\n66787\n91799\n98916\n26708\n53205\n4529\n69435\n37506\n32062\n74323\n54999\n64095\n50994\n12086\n51022\n72295\n65843\n62292\n61243\n14278\n53672\n40700\n99502\n42512\n74592\n66715\n81451\n63705\n91822\n7355\n43709\n73366\n88151\n36149\n53875\n82968\n33673\n89764\n5103",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "98\n89849\n1436\n469\n91028\n57780\n41012\n90412\n87528\n98913\n3845\n96077\n36731\n99508\n42370\n50214\n72682\n88311\n31656\n96325\n96839\n75176\n24770\n40668\n49910\n20540\n20255\n17248\n42588\n41773\n35634\n16454\n58181\n26812\n92584\n92106\n574\n18769\n90354\n6939\n8845\n33783\n3958\n19343\n44782\n69747\n67110\n41676\n91196\n1013\n73308\n7797\n80294\n56099\n6191\n38298\n201\n85756\n13117\n16145\n51487\n33698\n44520\n26579\n10415\n17392\n34898\n18749\n76851\n16504\n80755\n90559\n12906\n44022\n90992\n81409\n37361\n3776\n65800\n3249\n55782\n61728\n71166\n4652\n94466\n53153\n29201\n91587\n76341\n6048\n25297\n83436\n12068\n86284\n52073\n19881\n54084\n73595\n40914",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "36\n42152\n96481\n76590\n32812\n10605\n18965\n99345\n2453\n1189\n71873\n5930\n4892\n87834\n32227\n54848\n42189\n14851\n20672\n45780\n51415\n88571\n62879\n18898\n95207\n86914\n29870\n61347\n4426\n57387\n5189\n5324\n21368\n49428\n13128\n87365\n2480",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n52813\n77775\n24053\n69878\n92719\n70503\n66482\n10627\n47854\n30534\n94838\n68173\n17437\n89978\n45492\n30682\n88309\n61914\n76179\n51120\n86654\n87513\n11653\n93644\n35561\n59596\n23210\n14105\n66878\n24829\n82261\n89075\n5662\n9538\n71968\n45960\n26665\n30653\n10213\n94397\n6553\n71918\n15165",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "84\n23390\n73140\n61755\n21499\n93448\n32828\n30393\n77481\n36134\n75785\n67969\n87307\n46550\n75470\n42266\n81171\n89949\n12458\n89168\n44983\n41955\n50989\n15429\n55873\n65778\n60551\n81053\n77681\n58671\n61519\n17040\n61522\n10192\n16339\n58835\n60344\n24133\n23244\n57567\n7401\n78438\n45911\n19835\n44740\n78972\n8752\n35656\n77419\n16822\n20838\n8974\n82129\n36284\n79026\n83650\n69329\n83680\n51624\n16537\n13659\n33355\n27122\n5608\n98699\n36650\n86144\n34836\n91835\n170\n42521\n13161\n42402\n87419\n14757\n8184\n38055\n16869\n36365\n85289\n7253\n95738\n14355\n13027\n96381",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "99\n18076\n32532\n45700\n49215\n75207\n6956\n22229\n79745\n19283\n79064\n42877\n93813\n59926\n71452\n16611\n95090\n82148\n57402\n49595\n80580\n45207\n78620\n68316\n87755\n73464\n99559\n70530\n83246\n16708\n96228\n24600\n17350\n30408\n73363\n62772\n47051\n97146\n68190\n45819\n94630\n73688\n60130\n17270\n89192\n44220\n17441\n16902\n76534\n10521\n88875\n3564\n67845\n23575\n37503\n16597\n76784\n60111\n1610\n93152\n41617\n75953\n68154\n71108\n41777\n5518\n77466\n71090\n68576\n9544\n34739\n55013\n43267\n72492\n33935\n11311\n88467\n22242\n28392\n66682\n92553\n12296\n15902\n16090\n27859\n41384\n92585\n64750\n53177\n18221\n78189\n77249\n16627\n49906\n85370\n60109\n96208\n13960\n61799\n2442",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "109\n78236523\n31047266\n74650915\n77010833\n11025068\n78960185\n32595948\n99068988\n64654058\n8511245\n49851192\n14733701\n60744588\n78755469\n32677779\n63442832\n57873601\n89971417\n40791266\n10992795\n41738914\n16389435\n44036213\n50826213\n62781693\n24539691\n55787959\n71234268\n25355892\n52935139\n4986223\n56454158\n16388435\n93356257\n27904195\n44127881\n60771801\n15426643\n2240288\n47030544\n33067969\n37356752\n72567223\n78483137\n57656080\n36623980\n93615667\n47672908\n11209515\n90704450\n329507\n74639406\n91939449\n8032194\n76470874\n38979222\n59807682\n73369302\n66536263\n75928326\n98198581\n5734635\n59935181\n7190589\n85350095\n8745208\n2001780\n84953707\n53726475\n44777819\n17901244\n47772399\n8732494\n20169864\n80102769\n633714\n23661018\n61835102\n81131522\n14785601\n52854172\n85831449\n9150328\n33672685\n64223668\n83352542\n74268761\n92428021\n19100600\n76958110\n83671988\n34793262\n11646085\n42266406\n79604459\n76775376\n95883328\n20482879\n94429913\n20789195\n43956445\n19158215\n31213587\n90394022\n63702114\n98440371\n98118771\n76005190\n78588857",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n40379016\n72324127\n99726544\n43057532\n98618732\n44853177\n23206963\n93302713\n68531836\n57158213\n38450415\n50633860\n33230541\n17390196\n69094198\n3684191\n96049931\n85681394\n65053397\n30268031\n80959679\n78533646\n75182014\n53788686\n18290532\n62005905\n25613050\n35550506\n22054936\n50047961\n78430756\n2972190\n79566172\n92374818\n39918632\n91214043\n5983396\n42190127\n31180527\n89286907\n83394222\n73061915\n53321589\n48907315\n44711144\n33250875\n46445851\n18358877\n77791024\n65481343\n48227167\n14466727\n86842063\n90641604\n1069619\n39572400\n82642044\n34113003\n57921449\n65615977\n17120473\n12401347\n76070288\n15581006\n76465020\n69972498\n92544103\n91718368\n43938206\n68156681\n79364683\n94448556\n34738134\n78577691\n43247507\n50493442\n85206082\n61896010\n74090330\n34081034\n17156205\n76394510\n17532063\n10890157\n1517529\n63316032\n45957911\n26446381\n44932788\n34568150\n95550442\n47185350\n50272747\n19773220\n35191960\n24097472\n80148146\n85693957\n47259288\n65929\n10807271\n55985014\n9681672\n3097870\n15510036\n75263708\n37375318\n87097225\n90781686",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n9377537\n53824078\n1\n15623507\n1\n1\n1\n100000000\n100000000\n1\n100000000\n471528\n100000000\n100000000\n44300212\n100000000\n100000000\n100000000\n1\n100000000\n100000000\n74629166\n1\n1\n1\n100000000\n73786354\n100000000\n100000000\n1\n1\n100000000\n1\n43367289\n100000000\n1\n56926724\n1\n59350756\n100000000\n41819234\n100000000\n46705639\n100000000\n1\n100000000\n95536787\n1\n73906965\n100000000\n24360534\n1\n1\n56718543\n1\n183967\n1\n1\n55057913\n100000000\n1\n23650459\n1\n100000000\n1\n59201450\n1\n71690447\n9681422\n100000000\n83059366\n1\n100000000\n100000000\n93407882\n59149225\n1\n100000000\n50584641\n100000000\n1\n1\n1\n1\n1\n1\n100000000\n12670799\n100000000\n54382902\n100000000\n81004185\n52670469\n1\n100000000\n100000000\n100000000\n57776555\n1\n100000000\n34156842\n100000000\n27018574\n100000000\n42964636\n75487400\n51917159\n57040278\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 109)"
    },
    {
      "input": "109\n100000000\n100000000\n1\n100000000\n1\n1\n100000000\n13266957\n1\n37326865\n61141373\n71340942\n100000000\n100000000\n38802221\n100000000\n1\n100000000\n1\n1\n1\n2037307\n6906405\n10414136\n1\n100000000\n14409676\n44792522\n9492023\n41853918\n81237541\n1\n23871103\n1\n1\n100000000\n34824427\n15286581\n32278965\n1\n1\n68036989\n1\n1\n100000000\n1\n16029168\n100000000\n1\n100000000\n17408313\n69475102\n74229405\n100000000\n1\n48240592\n4936210\n41654791\n1\n34150944\n100000000\n1\n68995035\n100000000\n100000000\n100000000\n27549800\n4227442\n1\n1\n68232525\n1\n1\n100000000\n56000128\n3534626\n99274245\n90804445\n92220266\n86558935\n65170154\n100000000\n1\n100000000\n98144438\n100000000\n1\n1\n100000000\n1\n1\n100000000\n100000000\n100000000\n18789370\n85798619\n45602519\n100000000\n100000000\n87723496\n1\n81205933\n1\n100000000\n1\n100000000\n1\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 109)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}