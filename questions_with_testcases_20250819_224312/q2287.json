{
  "problem_code": "problems",
  "title": "Double Time",
  "tags": [],
  "text": "In 45 BC a standard calendar was adopted by Julius Caesar - each year would have 365 days, and every fourth year have an extra day - the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles.Write a program that will read in a date, determine which style it is in, and then convert it to the other style.InputInput will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single '#'.OutputOutput will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk ('*') immediately after the day of the month (with no intervening space). Note that this will not apply to the input.ExampleInput:Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#Output:Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
  "sample_input": "Input:Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#Output:Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOUTI",
  "scraped_at": "2025-08-17 00:33:59",
  "test_cases": [
    {
      "input": "Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#",
      "expected_output": "Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 8\nvz 6 iiviin 5\n10 3\neiu 5 r 8\n1 8\newuapez 4 tejvminh 9\n8 3\nfcx 6 ptc 9\nvh",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\ngpdgck 7 x 3\n7 2\ncvssdqu 8 vi 7\n3 8\nlwrvkepf 5 swgdbkb 6\n8 2\nwnouiz 8 rwx 8\nb",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\nlvui 8 kaq 1\n1 6\ndganufs 10 dcw 4\n3 1\nknlmavgze 3 kkuuju 7\n9 1\nqx 5 sgm 1\nw",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "31 65\ny 92 hqx 47\n42 37\nhl 99 z 60\n6 60\nzt 90 nyesipt 21\n40 97\nn 80 pu 44\nj",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "74 3\nufks 57 g 7\n37 33\nzuhhwb 26 ixg 99\n43 55\nq 42 fhxx 42\n26 25\nyjq 29 qb 100\ns",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 13\nkxmb 91 qatx 16\n15 55\ncbrznx 26 yqvso 35\n75 40\nabvbabv 92 vzsmo 31\n56 80\nl 95 mb 22\nej",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "33 50\ndkycg 19 hgo 57\n49 10\nkwgflkwf 20 pqyzoo 88\n62 53\neladldcda 71 rbvds 86\n58 70\nqfyoxs 16 uuglr 63\noj",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "93 2\nzf 63 m 98\n46 31\nh 98 iv 100\n77 87\ndhjgc 10 ca 1\n79 46\nbzzlxe 50 tk 8\nb",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "463 170\ntzwouny 149 f 51\n97 435\narq 463 pu 328\n356 104\ngoglz 251 tw 497\n238 418\nxizai 465 dpnw 164\noc",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "67 59\nukawh 204 uavx 157\n364 409\niks 216 tkiaj 72\n319 260\nv 263 nlttfy 119\n300 209\nftxcj 482 pvfnhv 164\ne",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "265 205\nlgo 386 gtguq 484\n301 267\nvoh 342 jsxgot 187\n224 186\nt 202 gwub 140\n133 400\nz 255 psjoty 108\ny",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "145 73\nbcc 345 gvrbt 104\n455 406\ngx 235 vhwz 305\n366 407\njdl 377 kin 58\n312 225\nbthdpb 283 pcofayd 303\nn",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "491 78\nnmr 59 izfmpq 448\n417 83\ncurf 431 gl 292\n412 390\nppn 474 r 79\n74 68\nvfw 444 d 127\nya",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "202 261\nxlc 353 oztez 357\n400 200\nwjwi 497 tiwmb 313\n328 445\nbvj 164 mfhjnw 279\n444 364\nxkp 120 iuv 429\nb",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 169\nrxglmpv 161 gw 499\n183 453\ni 218 w 144\n276 140\nhklrvjth 463 qq 252\n229 345\nf 421 zhg 277\nlr",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nkb 1000 g 1000\n1000 1000\novsig 1000 yb 1000\n1000 1000\nrcbwn 1000 pgxmlch 1000\n1000 1000\nyqabws 1000 smz 1000\nru",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\npghttijn 1000 rrtl 1000\n1000 1000\nobyr 1000 h 1000\n1000 1000\nqfrjphmfe 1000 ri 1000\n1000 1000\nyksmzg 1000 acogvc 1000\np",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\nqn 1 m 1\n1 1000\ngvzdxj 1000 jqrtp 999\n1000 2\naxon 2 oqpeplux 999\n2 1\ng 2 kuetepk 999\nkn",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999\nbjncfi 2 daduwu 1000\n999 1\nehjd 999 j 2\n1000 1\nkucnc 2 vm 1000\n1 1000\nkekd 2 ji 1\nuh",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}