{
  "problem_code": "problems",
  "title": "Good Aim",
  "tags": [],
  "text": "The heated competition of the ACM-ICPC World Finals continues, and The Team is at the top of their game! Well, okay, maybe they're not actually doing so well, according to the scoreboard, yet. But they have a plan!The contest is taking place in a huge room with a regular grid of desks. The columns and rows are each numbered $1..10^6$, and the desk in the $x$th column and $y$th row is considered to have coordinates ($x$,$y$). The Team is sitting at coordinates ($X$,$Y$). There are $N$ ($1 \\leq N \\leq 10^6$) opposing teams (conveniently numbered $1..N$), with team $i$ having $m_i$ ($1 \\leq m_i \\leq 10^6$) members, all sitting at coordinates ($x_i$,$y_i$). No desk is occupied by more than one team, and all other desks are empty.Now, The Team is interested in removing some of the more dangerous opponents from the competition. To accomplish this, they have a number of water balloons at their disposal (after all, where in the contest rules does it say that water balloons are not allowed?). Always conservative, they would first like to answer $Q$ ($1 \\leq Q \\leq 10^6$) queries - for the $i$th query, how many balloons it would theoretically take to take out all of the members of team $q_i$?In order to do any real damage, the water balloons will of course have to be thrown extremely hard - in fact, in a perfectly straight line, and not over any obstacles besides empty desks. This means that, if team $j$ lies exactly on the line segment from The Team to team $i$, then every member of team $j$ must be dispatched before any members of team $i$ can be hit. It takes one balloon to knock one person out (the members of The Team have received plenty of training, so they're not about to miss a throw). Note that these queries are all only theoretical (for the moment) - so each should be answered assuming that all teams are still untouched.The members of The Team will need to carefully choose with opponents to take out, based on how well they're doing and how many balloons it would take, so they're already answered all of their queries in their heads. Maybe, if you can answer them as well, you can also adopt such techniques in the future...InputFirst line: 4 integers, $N$, $Q$, $X$, and $Y$Next $N$ lines: 3 integers, $x_i$, $y_i$, and $m_i$, for $i = 1..N$Next $Q$ lines: 1 integer, $t_i$, for $i = 1..Q$Output$Q$ lines: 1 integer, the number of balloons that would be required to take out team $t_i$, for $i = 1..Q$.ExampleInput:6 6 3 25 6 32 1 54 4 24 3 15 4 27 6 1654321Output:431255Explanation of Sample:The following grid shows the positions of the $N$ opposing teams (marked with their numbers), as well as The Team (marked with a \"T\"). The line segments represent direct lines of sight to the opponents.As can be seen, team 6 is blocked by teams 4 and 5. Therefore, taking them out would require $1+2+1=4$ balloons in total. Similarly, team 5 is blocked by team 4, and requires $1+2=3$ balloons. Teams 4, 3, and 2 are not blocked by any others, and so only require 1, 2, and 5 balloons, respectively. Finally, team 1 is blocked by team 3, and would require $2+3=5$ balloons to dispose of.",
  "sample_input": "Input:6 6 3 25 6 32 1 54 4 24 3 15 4 27 6 1654321Output:431255",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOODF",
  "scraped_at": "2025-08-17 00:34:03",
  "test_cases": [
    {
      "input": "6 6 3 25 6 32 1 54 4 24 3 15 4 27 6 1654321",
      "expected_output": "431255",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 1 1 8 8 2 3 8 7 7 1 6 5 5 4 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 2 9 6 3 1 6 2 4 6 1 7 3 2 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 4 6 7 9 6 10 8 2 4 1 3 3 1 10 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "64 41 94 5 79 28 89 81 67 13 94 25 69 99 30 24",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "87 81 89 67 12 50 8 51 96 40 83 28 91 61 22 83",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "48 41 67 52 16 35 55 18 84 15 82 51 92 12 99 24",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 20 59 37 21 56 20 67 12 67 6 8 99 9 39 92",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 37 49 58 42 24 19 58 41 47 7 39 19 31 15 14",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "337 468 136 64 117 282 248 57 110 206 377 302 390 474 203 138",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "209 312 244 305 82 180 318 163 287 308 337 297 72 262 402 172",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "163 259 259 58 68 75 92 175 77 413 354 289 424 283 290 490",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "422 75 406 81 366 343 405 109 447 282 472 465 249 143 421 146",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "353 251 350 187 418 413 355 96 74 86 328 373 205 311 429 180",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "367 82 404 198 50 379 219 200 178 121 453 172 272 50 391 296",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "342 119 453 147 217 477 367 478 216 231 114 106 278 470 226 394",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 2 999 2 999 1000 999 1 2 2 1000 1 999 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 2 1 1000 2 2 1000 1 2 1 1000 1000 999 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}