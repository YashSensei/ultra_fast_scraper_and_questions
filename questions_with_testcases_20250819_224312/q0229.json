{
  "problem_code": "problems",
  "title": "Justice League",
  "tags": [],
  "text": "Thirty five years ago, a group of super heroes was chosen to form the Justice League, whose\r\npurpose was to protect the planet Earth from the villains. After all those years helping mankind,\r\nits members are retiring and now it is time to choose the new members of the Justice League.In order to keep their secret identity, let’s say, secret, super heroes usually use an integer number\r\nto identify themselves. There are H super heroes on Earth, identified with the integers from 1\r\nto H. With a brief look at the newspapers anyone can find out if two super heroes have already\r\nworked together in a mission. If this happened, we say that the two heroes have a relationship.There must be onlyoneJustice League in the world, which could be formed by any number of\r\nsuper heroes (even only one). Moreover, for any two heroes in the new league, theymusthave\r\narelationship.Besides, consider the set of the heroes not chosen to take part in the Justice League. For any\r\ntwo heroes on that set, theymust nothave a relationship. This prevents the formation of\r\nunofficial justice leagues.You work for an agency in charge of creating the new Justice League. The agency doesn’t know\r\nif it is possible to create the League with the restrictions given, and asked for your programming\r\nskills. Given a set of super heroes and their relationships, determine if it is possible to select\r\nany subset to form the Justice League, according to the given restrictions.InputThe input is composed of several test cases. The first line of each test case contains two integers\r\nseparated by a single space, H (2 ≤ H ≤ 5×104) and R (1 ≤ R ≤ 105), indicating, respectively,\r\nthe number of heroes and the number of relationships. Each of the following R lines contains\r\ntwo integers separated by a single space, A and B (1 ≤ A < B ≤ H), indicating that super\r\nhero A has a relationship with super hero B. Note that if A has a relationship with B, B also\r\nhas a relationship with A. A relationship is never informed twice on a test case.The end of input is indicated by H = R = 0.OutputFor each test case in the input print a single line, containing the uppercase letter “Y” if it\r\nis possible to select a subset of heroes to form the Justice League according to the given\r\nrestrictions, or the uppercase letter “N” otherwise.ExampleInput:5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0Output:Y\r\nN\r\nY",
  "sample_input": "Input:5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0Output:Y\r\nN\r\nY",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JLEAGUE",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0",
      "expected_output": "Y\r\nN\r\nY",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 6\n2 7\n5 9\n8 10\n6 1\n7 8\n9 1\n3 3\n3 10\n5 5\n1 10\n8 6\n4 6\n8 10\n4 5\n1 6\n2 8\n4 2\n8 4\n8 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10\n4 7\n5 9\n8 8\n3 2\n7 6\n10 4\n1 10\n1 10\n7 4\n5 3\n1 3\n8 5\n6 6\n9 2\n7 6\n4 9\n10 4\n10 6\n9 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7\n2 6\n4 10\n3 8\n4 5\n1 3\n4 4\n10 7\n7 3\n5 10\n4 10\n9 5\n5 4\n2 2\n4 10\n7 5\n10 2\n8 6\n9 8\n1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 92\n25 51\n100 44\n64 5\n22 79\n72 91\n7 16\n73 34\n50 82\n96 69\n77 85\n32 10\n58 79\n61 97\n3 53\n59 99\n67 68\n100 7\n22 83\n87 23",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "29 65\n54 86\n30 6\n47 37\n75 38\n67 33\n46 62\n11 19\n24 27\n16 65\n78 59\n13 20\n37 85\n5 32\n72 49\n81 28\n64 18\n90 10\n71 81\n10 34",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 35\n19 5\n72 27\n27 57\n98 87\n73 28\n76 5\n40 82\n35 1\n32 7\n58 90\n23 37\n75 2\n74 89\n60 47\n50 6\n48 1\n50 24\n64 64\n13 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "76 88\n51 68\n91 45\n32 81\n42 55\n35 61\n45 17\n65 58\n15 3\n3 5\n25 68\n36 10\n10 55\n9 44\n5 22\n90 41\n24 2\n21 35\n41 64\n14 11",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "48 76\n48 94\n15 7\n80 84\n65 68\n77 25\n4 8\n77 22\n10 11\n45 60\n58 8\n94 22\n84 48\n25 65\n88 8\n84 73\n42 93\n90 34\n25 72\n44 73",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "313 421\n410 193\n76 171\n167 379\n80 280\n380 496\n223 62\n386 117\n129 101\n420 382\n137 495\n128 147\n371 288\n380 369\n457 366\n283 477\n157 428\n156 394\n205 400\n471 205",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "177 59\n480 78\n270 242\n483 194\n482 404\n79 156\n83 64\n188 129\n280 224\n171 334\n169 430\n109 229\n287 151\n200 305\n297 251\n400 487\n103 410\n279 198\n55 205\n99 223",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "473 219\n459 410\n68 68\n257 59\n500 101\n430 319\n122 271\n442 393\n221 91\n320 188\n241 314\n355 224\n347 303\n104 171\n202 465\n69 117\n120 331\n100 495\n304 265\n172 146",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "193 112\n286 195\n397 314\n161 131\n286 92\n433 476\n155 282\n108 257\n72 412\n282 494\n454 388\n473 117\n324 53\n421 414\n303 295\n117 399\n207 300\n160 322\n292 407\n394 314",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "210 208\n270 286\n395 388\n474 55\n448 460\n171 433\n302 454\n156 146\n219 320\n80 262\n85 120\n267 320\n250 74\n251 58\n304 490\n277 313\n64 445\n132 108\n448 290\n410 183",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "240 192\n155 437\n482 229\n198 136\n482 417\n144 413\n179 141\n284 83\n238 243\n141 338\n457 334\n327 397\n407 280\n246 442\n255 164\n396 486\n148 143\n357 254\n145 317\n254 484",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "80 445\n156 302\n426 292\n213 53\n208 202\n300 410\n132 141\n499 342\n379 476\n318 265\n276 196\n395 271\n346 199\n76 121\n109 176\n196 93\n144 307\n461 347\n255 124\n312 193",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n999 1\n2 1000\n1000 999\n999 1\n1000 1\n2 999\n999 1\n1 1\n1000 999\n1000 999\n2 1\n999 1000\n1 1\n2 999\n999 1000\n2 999\n999 1\n1 2\n1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1\n999 999\n999 1\n1 999\n1 2\n2 999\n999 1\n999 1000\n1 1000\n1000 1\n2 1\n999 1000\n1 999\n1 1\n999 2\n999 999\n1 999\n1 1\n1000 1000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}