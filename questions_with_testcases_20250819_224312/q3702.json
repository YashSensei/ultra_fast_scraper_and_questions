{
  "problem_code": "problems",
  "title": "Dynamic Tree Connectivity",
  "tags": [],
  "text": "A forest of unrooted trees initially consists of N  (1 ≤ N ≤ 100,000) single-vertex trees. The vertices are numbered from 1 to N.Your task is to maintain that forest and answer connectivity queries.All edges in the problem areundirected.You will receive the following queries, where (1 ≤ A, B ≤ N) :addA B : add an edge between  vertices  A and B, where initially there is no path between A and B.remA B : remove edge between  vertices  A and B, where initially there is an edge between A and B.connA B : printYESif there is a path between A and B andNOotherwise, where A and B are different.InputThe first line of input contains the number of initial single-vertex trees N and the number of queries M (1 ≤ M ≤ 100,000). The following M lines contain queries.OutputFor eachconnquery outputYESorNO. Pay attention to letter case.ExampleThis example will be the first test case.Input:5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5Output:NOYESNOYES",
  "sample_input": "Input:5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5Output:NOYESNOYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DYNACON1",
  "scraped_at": "2025-08-17 00:34:21",
  "test_cases": [
    {
      "input": "5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5",
      "expected_output": "NOYESNOYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6 2 8 5 1 7 3 4 1 3 8 10 9 3 6 10 3 1 7 7 4 6 7\n3 ca 9 x 5 wjglb 9 z 10 jh 5 w 1 a 5 dsqy 6 uzh 8 h 7 c 3 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 5 8 8 5 6 1 2 9 1 2 7 2 7 6 9 7 1 5 9 8 9 10\n9 dstukd 4 yk 9 jqux 9 v 6 slrpq 10 c 5 ns 9 fau 8 fizqi 3 sebo 4 fle 4 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6 2 3 3 3 2 10 9 7 1 9 3 8 5 10 4 3 6 4 10 5 7 10\n10 ruf 5 chdxg 5 xfzc 2 owwl 6 o 6 myem 10 k 8 pbhw 4 t 6 emnry 10 ll 3 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 88 69 97 11 93 99 24 90 99 37 64 64 19 75 55 53 18 97 96 24 24 46 27\n45 q 78 rfid 79 p 20 qwpd 55 qrm 13 bdm 63 uz 30 ayfnk 54 mlzt 27 z 43 kh 34 54",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "70 17 8 85 38 40 38 63 72 89 24 96 41 29 75 36 17 23 78 94 34 89 4 53\n13 g 51 z 29 jj 21 gpqd 73 t 27 acloq 6 o 11 ilj 64 xtcqq 21 v 83 zezv 28 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 72 58 42 58 56 61 32 40 71 78 82 41 19 37 98 89 53 68 54 33 82 33 75\n46 ofwvc 27 iqdt 40 mip 56 qb 20 q 18 aecjg 97 sajm 70 kjb 67 muc 17 vwal 78 c 97 91",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 33 28 97 78 82 56 81 96 81 3 61 48 92 63 39 10 60 51 41 15 39 52 93\n84 livb 66 fctf 10 ddue 82 tcyo 1 ouay 34 rqv 27 dquj 94 onhc 18 fwcu 32 mtbt 87 ziix 21 35",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 86 35 86 12 26 18 58 29 61 34 16 16 100 74 13 1 53 65 49 5 65 56 43\n77 uel 37 wplhw 96 zz 31 uk 95 srncb 80 rer 95 kj 77 j 60 dwopv 26 qdy 14 bmqd 54 71",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "28 19 19 43 18 29 19 32 40 37 24 37 44 27 14 27 22 43 29 28 31 46 49 37\n37 eexp 16 xnqym 29 xevfx 48 lvfbf 5 jjq 21 jhodj 28 d 41 rp 6 ya 14 far 22 quj 13 6",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "33 5 29 35 11 34 38 12 9 22 8 41 36 8 12 30 39 25 28 46 23 39 42 49\n47 srctwn 19 lfdm 28 zscw 41 hlds 26 op 29 riosi 49 vch 37 gl 7 s 46 f 29 n 22 26",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "48 41 33 8 29 9 18 30 33 38 11 18 26 41 45 5 22 47 26 20 16 22 25 8\n39 ebhc 28 oiby 50 dtmfn 22 fqe 37 kaod 39 quv 11 oxzd 29 yhy 12 kug 6 nszrv 27 ragwv 45 26",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 25 30 15 12 21 29 12 22 40 31 28 7 5 38 13 40 10 30 5 38 6 40 38\n26 f 35 v 35 ih 48 e 14 my 5 mjzk 40 ark 24 om 25 yhs 40 nhf 14 mnrp 38 39",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "11 10 31 15 5 50 11 26 14 19 17 5 30 37 41 11 13 23 31 44 22 49 35 22\n30 p 19 xigq 37 nwjkf 34 kdd 25 fcnf 41 rm 20 wp 5 inwpz 9 i 13 lxkg 38 sogau 10 11",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "19 45 29 40 21 8 17 45 26 37 13 47 10 22 29 30 33 13 20 46 45 5 32 15\n19 arg 43 xr 20 yp 44 zsnaj 11 wqxc 36 kc 41 a 24 i 26 ixu 6 fore 6 lgpk 5 48",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "39 7 20 26 9 42 47 6 7 42 24 43 8 6 9 44 16 25 29 26 45 40 33 44\n46 uy 30 r 37 k 40 drz 46 xrc 12 s 43 mzcvo 25 euig 33 yumn 26 sovkc 25 sqnim 17 21",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 qtldl 100 quttj 100 vs 100 o 100 ahwb 100 rv 100 jhb 100 otup 100 y 100 xbnpe 100 bvm 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 movgr 100 edia 100 yh 100 khw 100 dm 100 oxel 100 xemt 100 fgcgr 100 utm 100 sk 100 xlkw 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 2 99 1 2 2 100 99 2 100 100 99 99 2 1 2 100 1 100 2 2 2 100 2\n99 ahyqxc 1 p 99 w 100 fama 99 v 100 dfg 2 up 99 oum 1 il 99 fp 1 u 99 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 2 99 99 99 1 99 1 100 100 1 1 99 2 2 100 99 2 2 99 2 1 100 99\n100 en 1 uo 100 bcxqq 2 wxo 2 oxw 99 bvjxa 2 tvcmb 1 jp 100 he 99 k 100 elgut 100 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}