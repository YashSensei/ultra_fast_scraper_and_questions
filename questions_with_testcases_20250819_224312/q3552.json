{
  "problem_code": "problems",
  "title": "Natalia Has Another Problem",
  "tags": [],
  "text": "Natalia has another problem she needs your help with. Do you still have some energies left?ALogical Stringis a string that represents a valid boolean expression. It is composed of operators AND, OR and NOT and truth values operands. The boolean expressions are recursive in the sense that operators can have other operators as operands. For example, the following is a list of validLogical Strings:TTFFAND(T, T)OR(T, F)NOT(T)AND(OR(T, F), AND(F, F))AND(AND(AND(OR(T, F), F), F), T)AND    (    AND     ( OR        ( T,F),OR(F,F)),T)Please note that there can be several spaces in between objects. However, no space will be in between letters of the names. Therefore, \"AND(T,T)\" is a validLogical Stringbut \"A     N       D(T,T)\" is not.Given aLogical String, please evaluate it and output its truth value.InputThe first line contains T (1 ≤ T ≤ 100), the number of test cases. Then there are T lines. Each line contains a string s0s1s2... sn-1(1 ≤ N ≤ 100). It is guaranteed that the ithLogical Stringis valid.OutputFor eachLogical Stringgiven, output its truth value. If it is true, output T, otherwise output F.ExampleInput:7TFAND(T, T)OR(T, F)NOT(T)AND(OR(T, F), AND(F, F))AND(AND(AND(OR(T, F), F), F), T)Output:TFTTFFF",
  "sample_input": "Input:7TFAND(T, T)OR(T, F)NOT(T)AND(OR(T, F), AND(F, F))AND(AND(AND(OR(T, F), F), F), T)Output:TFTTFFF",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NATALIAS",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "7TFAND(T, T)OR(T, F)NOT(T)AND(OR(T, F), AND(F, F))AND(AND(AND(OR(T, F), F), F), T)",
      "expected_output": "TFTTFFF",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n3\n5\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n6\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n9\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "15\n92739872\n67761172\n88060587\n3605549\n53025419\n69445556\n16188073\n94891099\n7338104\n73926759\n86949095\n39034319\n36335579\n94102902\n82231036",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n95947762\n35987994\n65019018\n51291626\n63165816\n96435071\n38085424\n37257270\n51705657\n41825151\n40153566",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n29684076\n3483562\n65255519\n43809193\n32884373\n18238876\n72175653\n65068814\n32368497\n3379541\n48732920\n60975129\n10848047",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n58549634\n56887318\n49189133\n67483142\n20491222",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n78451007\n49706145\n14302466\n49323966\n71426470\n79219960\n94831163\n65125451\n11823291\n40912463",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "90\n16386\n18638\n43870\n24845\n92913\n93203\n47107\n65089\n57780\n73926\n90850\n33621\n39293\n67799\n48114\n74777\n73796\n95068\n36714\n44302\n16222\n73814\n33993\n59336\n84787\n48444\n66479\n36729\n20355\n59758\n42000\n78895\n2355\n81621\n15367\n88586\n51501\n42512\n35814\n82275\n78785\n48498\n40765\n94898\n32107\n55708\n37886\n84274\n23685\n65630\n34342\n66565\n61119\n26663\n7112\n91365\n62094\n36553\n73975\n26948\n91957\n94308\n15336\n99021\n21456\n10758\n23256\n56933\n36948\n26777\n18201\n19358\n72987\n35458\n1585\n10734\n10822\n25850\n14772\n53303\n58541\n72538\n19795\n14529\n46792\n47403\n21653\n33868\n42008\n65450",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "47\n27405\n76046\n38720\n10245\n90823\n87362\n30321\n4909\n72704\n27112\n31622\n3891\n77927\n69711\n43740\n93123\n48463\n19004\n49808\n59283\n12059\n10261\n50303\n81170\n37320\n88131\n72707\n86666\n90958\n61084\n92598\n44302\n35419\n50450\n4228\n48104\n55175\n81120\n37041\n41816\n87566\n51857\n48931\n83803\n47168\n49900\n26339",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n32187\n72352\n81848\n98700\n50387\n96776\n574\n26374\n18466\n24634\n31127\n83080\n60464\n75294\n32830\n23968\n53003\n91603\n16786\n14485\n17286\n67585\n51194\n63928\n86195\n54117\n74280",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "40\n12005\n56692\n85387\n13218\n35427\n54488\n55041\n85627\n37729\n16141\n6031\n92211\n60207\n34610\n76147\n66908\n54833\n99445\n69652\n6304\n19199\n48821\n72399\n25764\n4510\n93601\n53511\n79010\n18505\n26508\n94635\n1573\n30004\n86614\n84735\n38982\n67778\n30525\n23668\n64166",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n83016\n47793\n14857\n84434\n18721\n58862\n85301\n2592\n6266\n40688\n92853\n16839\n4037\n95020\n53427\n92532\n75910\n61236\n60823\n54435\n35836\n53787\n5109\n66926\n52358\n65454\n55884\n9811\n90723\n18174\n13497\n14768\n17723\n31128\n12656\n17357\n28142\n52200\n55331\n56966\n80132\n46556\n82429\n53042\n41838\n7911\n40629\n86129\n43151\n88711\n32073\n65855\n24125\n16296\n29590\n26783",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n38467\n6882\n55890\n57508\n61944\n10906\n62821\n2328\n92009\n98701\n60359\n82887\n18648\n91254\n91571\n92727\n15916\n56080\n97404\n46050\n2073\n85343\n94654\n35084\n57761\n79862\n2290\n71474\n91014\n36428\n12195\n54837\n45735\n77161",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "40\n94313\n34825\n60099\n29078\n81873\n47194\n88743\n77862\n96553\n66827\n14235\n98201\n25574\n62284\n31939\n88477\n66841\n2196\n10910\n18681\n49613\n13481\n8442\n89122\n34909\n64060\n79858\n80033\n46499\n89433\n71291\n44593\n12947\n72744\n14780\n35136\n9054\n12886\n98954\n67847",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n49294121\n51271073\n58609262\n80159757\n10529558\n52182323\n58478360\n74542941\n82136136\n98974934\n63039033\n45718741\n45453033\n29072368\n24769534\n96704169\n22488833\n18080625\n39197977\n35831098\n34833691\n32816314\n49416802\n46693505\n42792225\n94820365\n68283763\n81881795\n95341207\n48472653\n56896416\n37893136\n34782738\n52532075\n23155586\n27356162\n92122437\n72520434\n42797464\n95776122\n30929862\n15100080\n20529883\n4352244\n625288\n72261522\n91357816\n78270027\n79176742\n55218611\n51576213\n25924534\n32399394\n75953943\n50810943\n33983839\n98168620\n74394717\n64610518\n33167129\n4718238\n2418024\n50161794\n7046772\n52926478\n33546653\n36889827\n83582604\n20115422\n59788108\n48056365\n4858312\n2896435\n54865263\n79718449\n67382386\n581055\n36607996\n90451801\n54325093\n58625930\n65360700\n17025256\n37023931\n30876781\n13342562\n69864358\n79600299\n94100329\n1567926\n56731575\n88262723\n98157342\n81434404\n76496045\n99671409\n25181613\n23689296\n3742363\n70379378",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n27425365\n94643222\n72264158\n68806572\n38506091\n67600455\n6174066\n84925007\n33289283\n59333550\n50897598\n66058807\n11611439\n76826800\n86200082\n23785502\n45930728\n75457006\n21648586\n71129175\n60107381\n61304470\n28968891\n98537947\n85598959\n48504206\n47812974\n44651787\n61105475\n66126642\n11326125\n12938849\n63333783\n52527195\n77832492\n36953472\n17683235\n87833399\n58694119\n41836728\n75399523\n69906705\n28130581\n67465043\n73896628\n25161844\n86200996\n50189464\n18971182\n49767582\n46612019\n96332443\n22525960\n62244048\n6844780\n79816224\n83699750\n87016336\n71042209\n3318207\n74417039\n98293808\n79815829\n94742038\n31647468\n72172721\n73043761\n52406324\n13947212\n21547942\n1385155\n70608534\n60624138\n30695922\n57191795\n93622680\n15088111\n5666780\n31121902\n83416507\n93929693\n38477849\n41264320\n70634227\n12269361\n63529110\n25304144\n14456972\n39221510\n64473326\n14616064\n9374903\n33146848\n81856260\n34214497\n79614756\n49452328\n25076120\n11648714\n44998247",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "2\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "100\n1\n1\n1\n1\n1\n4717195\n76635944\n1\n62685351\n100000000\n80299092\n1\n51914537\n1\n1\n100000000\n1\n1\n100000000\n100000000\n1\n59208393\n100000000\n1\n1\n85782296\n91145946\n100000000\n7443252\n1\n68500810\n1\n1\n100000000\n1\n100000000\n1\n100000000\n1\n1\n85949261\n38693742\n9759985\n51448662\n1\n1\n66646003\n100000000\n100000000\n100000000\n100000000\n1\n100000000\n34697967\n13050411\n100000000\n1\n96556091\n100000000\n100000000\n1\n1\n1\n100000000\n91111877\n53466209\n1\n1\n35163268\n100000000\n100000000\n1\n1\n30618594\n1\n1\n6299916\n13802408\n45972399\n100000000\n93261753\n1\n100000000\n1\n18801084\n100000000\n100000000\n1\n100000000\n100000000\n55551893\n1\n100000000\n100000000\n1\n100000000\n1\n91717816\n72324491\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 100)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}