{
  "problem_code": "problems",
  "title": "Boundary 2003",
  "tags": [],
  "text": "Farmer Don watches the fence that surrounds his N meter by N meter square, flat field (2 ≤ N ≤ 500,000). One fence corner is at the origin (0, 0) and the opposite corner is at (N,N); the sides of Farmer Don's fence are parallel to the X and Y axes. Fence posts appear at all four corners and also at every meter along each side of the fence, for a total of 4×N fence posts. The fence posts are vertical and are considered to have no radius. Farmer Don wants to determine how many of his fence posts he can watch when he stands at a given location within his fence. Farmer Don’s field contains R (1 ≤ R ≤ 30,000) huge rocks that obscure his view of some fence posts, as he is not tall enough to look over any of these rocks. The base of each rock is a convex polygon with nonzero area whose vertices are at integer coordinates. The rocks stand completely vertical. Rocks do not overlap, do not touch other rocks, and do not touch Farmer Don or the fence. Farmer Don does not touch the fence, does not stand within a rock, and does not stand on a rock. Given the size of Farmer Don's fence, the locations and shapes of the rocks within it, and the location where Farmer Don stands, compute the number of fence posts that Farmer Don can see. If a vertex of a rock lines up perfectly with a fence post from Farmer Don's location, he is not able to see that fence post.InputThe first line of input contains two space-separated integers: N and R. The next line of input contains two space-separated integers that specify the X and Y coordinates of Farmer Don's location inside the fence. The rest of the input file describes the R rocks: Rock i’s description starts with a line containing a single integer pi (3 ≤ pi ≤ 20), the number of vertices in the rock's base. Each of the next pi lines contains a space-separated pair of integers that are the X and Y coordinates of a vertex. The vertices of a rock’s base are distinct and given in counterclockwise order.OutputThe output file should contain a single line with a single integer, the number of fence posts visible to Farmer Don.ExampleInput:100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60Output:319",
  "sample_input": "Input:100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60Output:319",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IOIBOUND",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60",
      "expected_output": "319",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 4\n1 8\n4\n6 10\n8 4\n8 9\n7 7\n8 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n7 3\n9\n4 10\n3 9\n8 10\n6 9\n1 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n3 5\n10\n10 5\n10 3\n5 10\n4 3\n10 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 58\n69 89\n54\n100 35\n83 45\n32 7\n68 3\n77 73",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 27\n8 5\n79\n76 44\n73 22\n2 41\n18 83\n17 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 25\n73 77\n49\n11 81\n1 69\n55 91\n59 18\n96 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "70 100\n38 6\n56\n87 1\n36 93\n46 45\n1 21\n41 92",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 15\n19 75\n41\n73 53\n3 46\n71 42\n37 45\n16 53",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "191 82\n194 49\n242\n92 171\n155 60\n201 241\n35 183\n87 192",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "224 124\n181 102\n210\n61 68\n124 207\n127 30\n30 163\n190 207",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "175 51\n100 165\n233\n185 47\n227 74\n164 167\n173 66\n87 193",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "29 85\n137 47\n137\n197 51\n229 212\n92 128\n165 136\n83 93",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "210 142\n181 211\n247\n73 177\n54 194\n48 242\n31 203\n70 111",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "218 237\n193 151\n83\n132 80\n76 226\n223 154\n90 150\n154 248",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "179 190\n37 170\n168\n232 71\n41 37\n201 88\n111 60\n113 227",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500 500\n500 500\n500\n500 500\n500 500\n500 500\n500 500\n500 500",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500 500\n500 500\n500\n500 500\n500 500\n500 500\n500 500\n500 500",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "500 1\n499 500\n499\n499 1\n1 500\n500 499\n499 1\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n500 500\n2\n500 1\n2 1\n2 1\n500 1\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}