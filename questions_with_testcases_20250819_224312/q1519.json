{
  "problem_code": "problems",
  "title": "Allowed Factors",
  "tags": [],
  "text": "Chico told his students that from now on, they would be referenced by numerical codes of up to 12 digits in official communications (emails and tasks). Then, he gave each student a card with a unique number written on it. The students quickly assumed this number was their code — but to their surprise (and Levi’s despair), Professor Chico explained that this was not their actual code.A student’s code is the term at the position (indexed from 1) in a special ordered sequenceS, where that position is the number written on their card. The sequenceShas a unique property: each number in it, when decomposed into prime factors, can only include primes from a set ofNnumbers written on the board by the teacher. To make Levi’s life even harder, the set of primes changes every week, so he always has to recalculate his code to avoid missing deadlines.Your task is to help Levi. Given the set of prime numbers written on the board during the week and the number on Levi’s card, determine what his weekly codInputThe input consists of multiple test cases.Each test case begins with a line containing two integersN(1 ≤N≤ 102) andM(1 ≤M≤ 105) representing respectively the number of prime numbers written on the board by Professor Chico and the number on the student's card.The second line containsNdistinct prime numbersP₁,P₂, ...,Pₙ(2 ≤Pi< 106), which form the allowed prime factor set for the week.Input ends when a line withN = 0andM = 0is encountered.OutputThe output consists of a single line for each test case, containing Levi's weekly code.ExampleInput:2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0Output:2\r\n24\r\n15\r\n81",
  "sample_input": "Input:2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0Output:2\r\n24\r\n15\r\n81",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ALWFACT",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0",
      "expected_output": "2\r\n24\r\n15\r\n81",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3\n6 10\n2 7\n9 2\n7 2\n3 6 7\n4 4\n7 5 10\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 7\n5 6\n5 1\n10 5\n5 1\n4 3 6\n2 7\n3 8 7\n4 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 6\n7 4\n2 10\n2 4\n9 3\n6 9 7\n1 6\n4 5 4\n10 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "87 98\n78 84\n84 81\n47 88\n13 82\n72 94 60\n29 59\n35 18 42\n67 79",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "65 12\n72 42\n35 2\n76 72\n37 32\n52 86 60\n44 98\n96 99 7\n12 18",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "31 34\n16 66\n8 15\n27 15\n23 91\n7 60 71\n48 30\n85 32 29\n63 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "93 38\n72 24\n7 51\n4 92\n51 88\n16 14 38\n98 59\n49 59 20\n82 72",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 37\n39 90\n6 44\n25 37\n21 92\n67 89 58\n3 28\n88 73 85\n76 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "35 46\n46 23\n8 10\n25 25\n14 31\n10 24 48\n5 16\n22 46 5\n26 37",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18 13\n24 5\n23 38\n25 40\n9 6\n18 47 42\n14 7\n28 15 38\n20 12",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "41 23\n45 37\n16 21\n36 45\n9 36\n21 14 15\n29 26\n22 40 28\n21 35",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 9\n49 39\n33 36\n39 43\n28 11\n27 35 32\n34 17\n27 24 39\n9 46",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "51 41\n37 16\n20 25\n32 38\n36 11\n43 30 46\n44 41\n34 45 22\n7 15",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 33\n7 33\n30 7\n25 46\n14 37\n31 49 16\n29 34\n33 28 39\n32 14",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "46 32\n35 42\n10 50\n21 40\n46 11\n45 21 38\n14 28\n28 35 44\n34 27",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "102 102\n102 102\n102 102\n102 102\n102 102\n102 102 102\n102 102\n102 102 102\n102 102",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "102 102\n102 102\n102 102\n102 102\n102 102\n102 102 102\n102 102\n102 102 102\n102 102",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n1 1\n2 2\n2 1\n102 102\n1 1 102\n2 102\n101 2 2\n101 101",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "102 1\n1 1\n2 101\n102 1\n2 102\n1 1 1\n2 1\n101 102 102\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}