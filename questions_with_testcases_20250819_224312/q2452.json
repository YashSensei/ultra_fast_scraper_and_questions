{
  "problem_code": "problems",
  "title": "Frog Wrestling",
  "tags": [],
  "text": "Billy Jean loves collecting frogs. Recently, she developed the sport of frog wrestling. Now she wants to rank her frogs by their wrestling prowess.Billy Jean has made an algorithm for sorting her frogs.She arranges N cages, numbered 1, 2 ... N, each with one frog.For each pair of cages in a specified, pre-determined list of K pairs of cages,she removes the frogs from the two cages,has the frogs wrestle,puts the winner in the higher-numbered cage, andputs the loser in the lower-numbered cage.When she is finished, she hopes to have all her frogs sorted from worst to best in the cages 1 to N. Will her algorithm work regardless of the initial order of the frogs?Note:Assume that a strict ordering by wrestling ability is possible.Billy Jean isn't the sharpest tool in the shed. Sometimes she has written the same two numbers for a pair. In this case, that frog is simply taken out and then put back.Constraints1 ≤ N ≤ 201 ≤ K ≤ 1000InputThe first line is the number of test cases. Each test cases is preceded by a blank line.The first line of each test case is N. The next line is K. The next K lines are the pairs, separated by a single space.OutputOn separate lines, output whether Billy Jean's algorithm is correct. Output \"YES\" (without quotes) if it is or \"NO\" (without quotes) if it is not.ExampleInput:4212 1211 1111 1451 23 41 32 42 3Output:YESNOYESYES",
  "sample_input": "Input:4212 1211 1111 1451 23 41 32 42 3Output:YESNOYESYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FROGS",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "4212 1211 1111 1451 23 41 32 42 3",
      "expected_output": "YESNOYESYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 10 4 9 2 3 3 9 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 1 2 4 3 3 8 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 6 10 4 3 2 7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "97 11 96 94 93 86 97 34 59",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 33 54 54 92 31 98 56 26",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "83 1 96 94 13 39 4 45 95",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 14 28 43 1 86 89 70 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 56 11 77 49 36 74 6 89",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "86 23 10 52 100 80 11 23 48",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "75 56 37 36 79 38 27 97 47",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "38 44 10 79 100 41 73 72 76",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "26 11 58 94 88 97 26 39 81",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "98 44 98 87 50 75 39 65 52",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "91 56 37 26 52 92 33 51 51",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20 46 64 75 45 92 52 72 36",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "201 201 201 201 201 201 201 201 201",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "201 201 201 201 201 201 201 201 201",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 200 1 1 200 2 2 1 200",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "200 200 200 1 200 201 2 201 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}