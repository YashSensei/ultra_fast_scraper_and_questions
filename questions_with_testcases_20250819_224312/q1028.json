{
  "problem_code": "problems",
  "title": "Ohani And The Game",
  "tags": [],
  "text": "One day Ohani and her friend was playing a game. The rules of the game is given below:Ohani Starts the game. Then the two player take turns.At the starting of the game, Ohani and her friend together choose a number N.They take the absolute value of N, N = |N| or, N = abs(N).In one turn: a player chooses a divisor X of N where 1 < X ≤ N. Then he/she divides N by X. Then next player continues to do step 4 until N is not equal to 1.The game ends when N becomes 1.The player who can’t make his/her next move, looses the game. Both the player plays optimally.Ohani and her friend was playing the game for a long time. So, they got bored. Then suddenly one interesting idea came to Ohani’s mind. She wants to choose maximum number of ways to get 1 from N such that no two way has a common number except 1 and N?For explanation:Suppose N = 20.Two possible way to get 1 is: 20 → 10 → 5 → 1 and 20 → 5 → 1, both the way has number 5 in common.But: 20 → 10 → 1 and 20 → 4 → 2 → 1 has no number common without 20 and 1.So, now Ohani wants to know the number of ways such that no two way has common number except 1 and N. But Ohani is very weak in coding. So, she wants you to help.InputThe first line of the input contains the number of test cases T (≤ 100000).Each of the next T lines contains a number N (|N| ≤ 1000000).OutputFor each test case, output the desired answer. If it is impossible to reach 1, just print “Impossible”.ExampleInput:3\r\n1\r\n2\r\n3Output:0\r\n1\r\n1",
  "sample_input": "Input:3\r\n1\r\n2\r\n3Output:0\r\n1\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/OHANIGAME",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "3\r\n1\r\n2\r\n3",
      "expected_output": "0\r\n1\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n10\n9\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n6\n4\n7\n6\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "9\n83021121\n19841089\n61644844\n12248395\n33946464\n7776324\n19571451\n57026876\n39584024",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n96473026\n68621290\n37456272\n80921880\n48030829",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n89356009\n19210496\n17871830\n42510042\n23873599\n62399383\n63426351\n96517681\n98720678\n9768515\n72454959\n89549055\n89983252\n29426212\n28966819\n60035167\n85672781\n22682395\n9379688\n49271470",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n8647844\n99778822\n4373199\n61372975\n63840639\n30435505\n56063539\n10588747\n69221745",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n13622072\n70229815\n48525393\n43637404\n26244830\n76516865\n5230324\n10119750\n21221934\n68339179\n96859803\n87131274\n44388881\n88229326\n48417596\n87844922",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n86204\n76338\n80782\n73864\n50671\n24822\n78813\n20438\n60341\n94397\n99185\n38104\n45607\n96655\n93059\n77715\n36481\n71314\n54740\n77356",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n88093\n59716\n75689\n73434\n69813\n86284\n35839\n37344\n6583\n82645\n52468\n76381\n81585\n76840\n86366\n11041\n68600\n13457\n86897\n83897",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n257\n75180\n50513\n26329\n11593\n60846\n42867\n52607\n92776\n40389\n67419\n44828\n55379\n68813\n44519\n16170\n77056\n91659\n26571\n22205",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n50822\n9635\n86026\n38223\n97530\n3183\n20746\n69763\n55658\n3221\n32554\n32020\n47580\n30785\n40358\n84119\n52424\n29903\n72087\n4848",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n43518\n30272\n59764\n31561\n63447\n75870\n67199\n76006\n22308\n73705\n92359\n84461\n27224\n18539\n48764\n8055\n50716\n72736\n73821\n55992",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n81744\n69315\n76531\n90670\n76036\n7817\n42472\n86354\n55009\n91084\n79116\n68933\n22504\n23571\n97410\n77348\n10671\n43749\n20481\n13604",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n99962\n74864\n36600\n94926\n92140\n70275\n22510\n86783\n20889\n60911\n1740\n49876\n75171\n46360\n12963\n69695\n71689\n96321\n94868\n65666",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n50571109\n83969410\n819602\n6181583\n80874964\n80796292\n19100376\n26407071\n22682105\n47788945\n27275862\n82363569\n88379721\n56211864\n90908306\n36884302\n14999117\n43808739\n81986006\n71786917",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n98909261\n2945806\n44129782\n72046094\n80926648\n6549797\n20722349\n51258081\n51803922\n50425616\n58394306\n55047184\n34282837\n76104758\n43744197\n25195598\n937897\n31894088\n91164066\n79626590",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "2\n100000000\n59663637",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "20\n1\n100000000\n28778740\n92019190\n2732051\n100000000\n88360808\n1\n32244973\n97518853\n100000000\n100000000\n1\n100000000\n46347672\n1\n73396466\n8633661\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 20)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}