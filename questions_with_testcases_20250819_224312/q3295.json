{
  "problem_code": "problems",
  "title": "Party of Cloaked Killers",
  "tags": [],
  "text": "N(1 ≤N≤ 100000) perfect killers (we number them 1, 2, 3, ...N) meet at Blue Mary's house. Every killer has a kind of skill - cloak. No one can see them when they are cloaked - except only a small group of people, which will be discussed later.We can group these killers intoM(M≥ 3) groups, called group number 1, group number 2, group number 3, etc. If killer A is in group numberxand killer B is in group number (X%M+1), A can see B even if B is cloaked. This prevent killers from doing some bad things without the risk of being punished.To keep their identity secret, every killer keep cloaked during the party. After the party, Blue Mary asked everyone a question, \"Which killers can you see in the party?\" Although some killers forget some person they have ever seen during the party, Blue Mary collects extremely much information. Now she needs you help to determine the value ofM, because no killer is willing to share this value with her.InputTen test cases (given one after another, you have to process all!). For each test case:The first line contains two integersNandE(1 ≤E≤ 180000). E lines follow, each line contains two space-separated integers A and B - killer number A can see killer number B even if he is cloaked.OutputFor each test case, output one line:If the information given is contradictory, output one line \"-1 -1\". Otherwise output the largest and the smallest possible value ofM, separated by a single space.ExampleInput:6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]Output:4 4\r\n-1 -1\r\n[and 8 test cases more]Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]Output:4 4\r\n-1 -1\r\n[and 8 test cases more]",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PARTY2",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]",
      "expected_output": "4 4\r\n-1 -1\r\n[and 8 test cases more]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10\n4 9\n10 3\n8 10\n6 6\n4 2\n7 10\n8 5\n5 8\n1 6\n1\nm 5 sqg sg lv",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n5 2\n8 1\n9 6\n5 4\n10 2\n2 3\n6 5\n6 8\n5 1\n4\nlek 6 gtiw qioym p",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5\n1 4\n8 10\n2 3\n4 8\n7 9\n1 3\n8 6\n7 8\n7 7\n1\nv 1 txz gwvj bpp",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 61\n72 59\n29 9\n14 53\n88 22\n56 62\n48 7\n9 65\n78 92\n64 16\n16\nww 52 b ygyc ophl",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 53\n36 91\n13 46\n35 97\n79 59\n68 63\n15 99\n99 16\n20 40\n50 1\n15\nh 71 fiq okwkd o",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "72 67\n26 31\n88 45\n33 15\n32 51\n76 51\n95 47\n15 31\n96 40\n65 98\n47\nujb 64 k vsozu lfax",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 86\n51 38\n99 73\n61 6\n71 64\n4 9\n67 11\n81 19\n8 14\n3 74\n74\ntlbn 28 c n aztb",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 100\n19 100\n5 98\n77 85\n80 71\n27 58\n60 59\n49 40\n57 79\n41 10\n76\njpl 14 t pdc c",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12549 11694\n34857 39433\n14431 42648\n31421 14410\n39720 32006\n33915 16351\n17285 33169\n22066 49486\n11086 22813\n5305 12860\n47929\nca 23544 wz mxrl irbwf",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "28130 39403\n36938 32477\n5132 5743\n17709 49556\n27494 23522\n26268 45503\n34037 27928\n41777 24899\n18837 6560\n5889 11338\n37511\nsia 19287 z m e",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "16561 47494\n40500 28287\n47412 18565\n17974 35831\n40231 28562\n24597 18896\n26738 42525\n22116 41508\n21122 22562\n7106 21290\n23295\nwpt 48625 vcj yqrvd zbq",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18568 39604\n29524 8611\n31688 22078\n29760 23760\n21099 43358\n41786 31458\n26684 27214\n22806 7620\n37534 27949\n31612 7742\n14015\nwgil 11323 iw ov tdpkr",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "32770 22940\n10775 37816\n10584 40514\n7432 34189\n20104 13347\n30451 47992\n19397 46937\n6997 23672\n15771 46328\n34756 43892\n31330\nxz 5857 zqhsk v bqtcu",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "27331 13955\n49998 29655\n8411 16386\n38292 39484\n31793 34659\n12952 25176\n5691 43767\n24680 22237\n28689 21655\n14718 29661\n15110\nmnqfn 9236 yzzem xlv l",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "42806 18076\n39730 42057\n36759 37901\n23308 23424\n39429 26223\n33761 21718\n11500 43698\n34885 48386\n30360 17838\n46872 7537\n13127\nfvrzu 21545 tw indlz nkc",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000\njs 100000 waoyk tnaim tefle",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000\njffis 100000 glbs b nxlzt",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n1 1\n100000 100000\n1 2\n99999 100000\n99999 1\n1 1\n1 100000\n100000 1\n99999 99999\n100000\npsjhk 1 pxghz ly qn",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 2\n2 99999\n99999 2\n2 99999\n1 99999\n100000 100000\n99999 100000\n1 1\n2 99999\n100000 2\n100000\ncs 99999 bxlk e llvvf",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}