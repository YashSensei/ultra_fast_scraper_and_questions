{
  "problem_code": "problems",
  "title": "Bipartite Permutation",
  "tags": [],
  "text": "Given a positive integerN, consider any permutation of all the numbers from1toN. It is required to create two partitions,P1andP2, from these numbers such that|sum(P1) – sum(P2)|is minimum, wheresum(X)denotes the summation of all the numbers in partitionX. A partition is defined to be a non-empty subset of the permutation. In other words, find the minimum absolute difference between the summation of all the numbers in each partition. Note that you cannot leave out any number, every number from1toNmust be part of exactly one partition.InputThe first line contains an integerT, denoting the number of test cases. Each of the next subsequentTlines contain a positive integerN.Constraints1 ≤ T ≤ 10002 ≤ N ≤ 109OutputFor each test case, first print the case number followed by the minimum absolute difference.Sample Input5\r\n2\r\n3\r\n4\r\n5\r\n6Sample OutputCase 1: 1\r\nCase 2: 0\r\nCase 3: 0\r\nCase 4: 1\r\nCase 5: 1ChallengeTry the harder version here:Bipartite Permutation (Hard)",
  "sample_input": "5\r\n2\r\n3\r\n4\r\n5\r\n6",
  "sample_output": "Case 1: 1\r\nCase 2: 0\r\nCase 3: 0\r\nCase 4: 1\r\nCase 5: 1",
  "link": "https://www.spoj.com/problems/BPM",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "5\r\n2\r\n3\r\n4\r\n5\r\n6",
      "expected_output": "Case 1: 1\r\nCase 2: 0\r\nCase 3: 0\r\nCase 4: 1\r\nCase 5: 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n1\n4\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n1\n10\n10\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "13\n30128339\n94553904\n54897652\n43957388\n86129019\n94046552\n1848341\n1971868\n98711174\n45325\n51743149\n12261011\n94639398",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n50629145\n87308331\n95661369\n96806507\n57096395\n35097732\n11807411\n48912771\n20678680",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n31016870\n28554083\n98685725\n50220533\n78981724\n12431738\n48637219\n16733890\n79327164\n80585762\n63147245\n20146727",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n13556709\n46931634\n35225694\n96765561\n38165897\n87714019\n84424719\n18811877\n16563726\n63396224\n18816137\n35836386\n55774137\n64650606\n22439722",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n72581518\n26761626\n57385161\n18662006\n21120254\n79440588\n95786050\n99176094\n95416807\n41942368\n60225103\n1189479\n53383545\n59836473\n50110124\n93984025\n86372612",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "52\n900\n58063\n23438\n90962\n95759\n19477\n77187\n26324\n20206\n86473\n21972\n5509\n57873\n20626\n35193\n8378\n5705\n9239\n19591\n50029\n9382\n40434\n92232\n7136\n96237\n14063\n71573\n57418\n35490\n8048\n27054\n74037\n11272\n2525\n93353\n4588\n29731\n71424\n32569\n68825\n45341\n21849\n39791\n66211\n63910\n83625\n10935\n35209\n68094\n73302\n20431\n93397",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n20227\n76749\n23416\n25305\n4965\n21800\n60642\n2765\n37703\n89317\n4922\n60230\n15268\n38106\n84103\n62706\n15801\n48100\n20673\n49768\n80546\n19864\n79817\n24928\n4601\n83037\n99165\n64694\n90210\n38743\n17481\n25726\n72979\n87499\n50620\n67432\n37751",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n66667\n34172\n99501\n33558\n29707\n11914\n50816\n8217\n73968\n18656\n91891\n81838\n17290\n97234\n51610\n25098\n69919\n74878\n39799\n69808\n74686\n41907\n98757\n32492\n95958\n93998\n89681\n57362\n95106\n80450\n6768\n96406\n24936\n34823\n39432\n65730\n6898\n4102\n31920\n20\n22518\n24520\n94706\n18502\n57572\n25878\n25089\n43962\n79391\n20383\n41032\n90633\n66573\n67526\n88610\n93073\n72132\n69629\n65737\n7945\n79285\n93236\n24051\n62653\n69927\n93919\n46226\n98589\n7779\n26239\n94658\n96305\n93229\n1231\n69257\n90735\n43478\n92897\n57220\n47597\n38603\n42662\n64312\n70378\n76056\n38104\n89123\n7634\n44053\n90546\n21810\n63995\n87092\n21312\n70065\n4453\n20404\n63411\n72687\n38645",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n93613\n53468\n52991\n57056\n2215\n46228\n12231\n60416\n50773\n82521\n51236\n87486\n63350\n977\n34542\n28873\n3631\n40547\n95076\n96597\n66807\n93202\n75091",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n71750\n80809\n60026\n22892\n9894\n62067\n37533\n63936\n4242\n23081\n65846\n3815\n34482\n25717\n11596\n49777\n59848\n33737\n7928\n50896\n56025\n22563\n43985\n32998\n44911\n98576\n44703\n77422\n14431\n21644\n13253\n49873\n3658\n46380\n95673\n61354\n83815\n51473\n45540\n96371\n3566\n71026\n71547\n79115\n36879\n3012\n29108\n85957\n50661\n48153\n72740\n5010\n41315\n54557\n61539\n75686\n50317\n36017\n40332\n25262\n63330\n62565\n98238\n65318\n61630\n46056\n8892\n21458\n70701\n82924\n14728\n74519\n69894\n68545\n31167\n62966\n39272\n92708\n99145\n34455\n11030\n85417\n20634\n69691\n75004\n51910\n23246\n92279\n24492\n96637",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "101\n60963\n56931\n35994\n76438\n21766\n14284\n58996\n81996\n11584\n61629\n61662\n39662\n31899\n56442\n66353\n35267\n5614\n65446\n20305\n98497\n14486\n59185\n51071\n33109\n60474\n70475\n35044\n49455\n17826\n21021\n92834\n32133\n21470\n89122\n56168\n57754\n7313\n3851\n34212\n10790\n74642\n12242\n54894\n43300\n20281\n72779\n68230\n91670\n82738\n20394\n73775\n56065\n23598\n47696\n67603\n608\n29588\n50130\n77728\n34422\n36789\n52728\n38382\n64565\n14383\n38055\n98718\n37032\n83404\n61480\n92951\n87416\n39792\n47825\n86770\n78263\n81224\n3412\n84235\n65110\n29871\n95472\n41903\n12784\n26965\n8726\n7393\n49057\n7395\n2293\n37104\n5201\n60067\n98234\n7461\n36315\n90373\n33173\n87406\n9385\n55640",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "81\n44908\n60312\n51828\n65219\n68278\n89802\n68661\n6055\n66202\n26151\n86956\n75453\n86979\n12780\n13233\n90759\n29156\n62411\n93628\n46966\n87484\n6645\n66892\n91342\n27368\n33519\n53943\n53268\n68230\n44277\n50518\n10059\n65257\n44175\n18899\n62040\n13345\n85551\n56357\n92638\n19657\n85407\n72344\n78989\n91604\n72359\n25916\n67818\n76849\n64909\n81177\n93890\n40683\n27112\n35966\n58371\n59196\n15405\n99826\n50237\n10765\n32389\n31630\n16467\n24155\n17196\n39023\n29469\n37313\n7313\n55813\n17687\n42586\n13895\n42839\n56954\n22750\n18146\n68167\n3046\n78039",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "109\n46607725\n73075517\n11512167\n99199987\n20145868\n11521411\n69986247\n15187179\n514805\n19403905\n99627881\n44450090\n49154705\n96593032\n73021647\n67052808\n951588\n2177947\n27540003\n46810599\n73577738\n27490853\n24234410\n87898401\n613914\n95359365\n21178756\n64214446\n68699523\n533601\n96592366\n29583646\n91069140\n66924903\n96313699\n17673469\n97890054\n51427411\n81241355\n92844985\n90542282\n37071325\n36028245\n76250974\n2376898\n44133020\n81059039\n61145031\n5007950\n26178230\n95405552\n49281525\n46255251\n32608527\n78488896\n16289344\n81864675\n29938818\n23162663\n44852268\n27818487\n51385117\n69117242\n35470557\n82888110\n89172922\n24233351\n68566081\n74372909\n39856004\n14399558\n28158155\n60372802\n87850906\n97156426\n39766345\n75954551\n53501683\n18183174\n48033576\n4428536\n99296842\n76235575\n60158120\n20668466\n7494276\n39700863\n13816396\n11782544\n43720745\n2511471\n61877290\n94210869\n20370758\n87056691\n61113422\n70690988\n26602889\n60133505\n12285169\n5730488\n86168880\n17640781\n33950611\n63906094\n61836382\n51750766\n35534773\n16361726",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n57996546\n10293320\n9015580\n57946899\n45905707\n85176679\n85744616\n58661541\n62164140\n91836741\n44258491\n62278311\n58221020\n71324722\n36198603\n89478883\n392585\n66291522\n36380034\n88456062\n68118618\n50441649\n69429629\n12758736\n48445443\n78863803\n94166619\n10490038\n8373018\n59441024\n912817\n92809461\n65249146\n64645302\n90372096\n68593967\n48032551\n95394851\n62596711\n70735393\n98412275\n13224274\n35081690\n44943495\n34353605\n27685722\n84640157\n267513\n52595660\n13486982\n55564536\n46194638\n73885584\n45971183\n27654890\n74229462\n51758004\n65973316\n45886736\n61261843\n14749577\n28297439\n21996182\n29208010\n33469567\n54144315\n68969563\n54531015\n74857037\n38502168\n13052383\n79855775\n59041941\n67586031\n50536666\n84260179\n59841712\n55441530\n63970696\n96724491\n93772960\n416253\n62423300\n9440577\n92121321\n9312201\n91199545\n32311305\n56741331\n10212589\n52219615\n65686519\n19415076\n64342108\n36975137\n29611810\n312254\n46045261\n44837311\n15437210\n51960703\n77433080\n22175270\n16177436\n25989879\n75598224\n55979345\n81527576\n28598358",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n20030147\n100000000\n100000000\n18441477\n100000000\n100000000\n1\n61220955\n1\n100000000\n1\n71587012\n1\n30000005\n100000000\n100000000\n1\n1\n100000000\n100000000\n1\n100000000\n59561462\n100000000\n1\n100000000\n56583957\n1\n47337253\n12576778\n100000000\n34876412\n100000000\n100000000\n100000000\n97898131\n21212949\n52708033\n2161728\n100000000\n81929272\n1\n57232362\n8811920\n100000000\n1\n100000000\n1\n100000000\n100000000\n36822260\n1\n39855388\n1\n100000000\n1\n33108739\n1\n1\n1\n83657801\n65493446\n1\n100000000\n73898762\n100000000\n1\n100000000\n100000000\n100000000\n1\n1\n1\n1\n1\n100000000\n40794336\n15816385\n100000000\n1\n100000000\n100000000\n100000000\n13139733\n65992222\n100000000\n1\n100000000\n100000000\n85770593\n1\n1\n100000000\n1\n56954216\n1\n100000000\n100000000\n1\n1\n49667719\n100000000\n71741747\n28783599\n100000000\n1787297\n1\n1\n94924264",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 109)"
    },
    {
      "input": "2\n5785697\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}