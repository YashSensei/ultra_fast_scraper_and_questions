{
  "problem_code": "problems",
  "title": "Deconnecting",
  "tags": [],
  "text": "We define a Beta graph as a set of nodes connected by edges such that one node is connected to another node by at most one edge and no node has an edge starting and ending on itself. Each node has a finite number called 'degree' associated with it which is the number of edges connecting that node to the rest of the nodes.There are n nodes in a given Beta graph. Those nodes with degree=0 are removed from the graph. Then those, who had degree=1 were removed (and so are the edges connecting that node to the rest of the nodes). Then those, who had degree equal to 2, 3 ... n-1 were removed (including their edges).For any Beta graph with n nodes find the maximum number of nodes that can remain after the above procedure is completed.InputThe first input line contains one number t — number of tests (1 ≤ t ≤ 105). Each of the following t lines contains one integer number n (0 ≤ n ≤ 105).OutputFor each test case output in a separate line the maximum number of nodes that can remain after the above procedure is completed.ExampleInput:1\r\n3Output:1",
  "sample_input": "Input:1\r\n3Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CODGRF",
  "scraped_at": "2025-08-17 00:33:41",
  "test_cases": [
    {
      "input": "1\r\n3",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n6\n10\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n10\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n23401657\n32097846\n10616190\n96108556\n63381412\n46160767\n46627323\n41106624",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n76768928\n8839800\n85108164\n14891344\n31450049\n44042980\n50152069\n15008772",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n72354760\n23850185\n23764145\n62142009\n62797322",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n60239919\n84175844\n91140269\n76468270\n12104644\n83357125\n11989351\n99655189\n76397703\n75561466\n68085130\n35585829\n20155182\n98028210\n86367244\n21293055\n4216158\n11416703",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n14073505\n29508330\n53779335\n57713026\n65810531\n88530991\n83042377",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "65\n75091\n22378\n92232\n1963\n37586\n63560\n25069\n35462\n50136\n84881\n64361\n29833\n63858\n51686\n14689\n57477\n38096\n15174\n73538\n82915\n16003\n43460\n29242\n56109\n11068\n47910\n17504\n41123\n12842\n35244\n24017\n40274\n16854\n40187\n68272\n72928\n30234\n25839\n33081\n35688\n84861\n56996\n45648\n43810\n36237\n10043\n42757\n48109\n72981\n88169\n30215\n3058\n6379\n62313\n38473\n44092\n95050\n67098\n9925\n48539\n52921\n85504\n79545\n69495\n81842",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "77\n12883\n51418\n34518\n55121\n5481\n97257\n17167\n60961\n1769\n61487\n46542\n26328\n54910\n75524\n32153\n80374\n18403\n25861\n87039\n61603\n1475\n26557\n21664\n91028\n85171\n41952\n73014\n30710\n83079\n71459\n46775\n69908\n58772\n87010\n62994\n53862\n74198\n42864\n58810\n13279\n49464\n63974\n49109\n13116\n47146\n71626\n22413\n97206\n59847\n71036\n91549\n67276\n12351\n87992\n47598\n86952\n65239\n76623\n70799\n31060\n18314\n38668\n70452\n61615\n42486\n77912\n32825\n21202\n45189\n48673\n78578\n84735\n12002\n81504\n47528\n92674\n40535",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n41354\n25667\n23108\n23579\n17253\n2300\n98518\n88658\n54845\n75821\n74518\n49388\n15114\n68995\n48644\n21853\n775\n7617\n3526\n51776\n86979\n73451",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n49132\n85540\n80777\n67239\n40100\n62433\n75879\n36984\n55695\n95747\n94299\n25139\n70580\n102\n64145\n36512\n80238\n25740\n7815\n93702\n20580\n74492\n61178\n9015\n63597\n30601\n34836\n26593\n44667\n35675\n78035\n75911\n48460\n12969\n57941\n15948\n2441\n38454\n88027\n80718\n81727\n98241\n45399\n27902\n23937\n57332\n93683\n91640\n52406\n50889\n85332\n22380\n61692\n84890\n38199\n90378\n63013\n82257\n19941\n28498\n91275\n22805\n41060\n30855\n79495\n49246\n54411\n76019\n37712\n14763\n95590\n18260\n5412\n2823\n91047\n66252\n14102\n26472\n30566\n94208\n57306\n87302\n41646\n82119\n13676\n38627\n70432\n37228\n37965\n19818",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n63029\n86926\n10013\n33148\n80237\n2420\n89826\n74239\n40398\n35877\n16451\n53693\n46624\n51478\n74462\n4783\n87253\n64690\n42852\n98101\n55634\n11914\n77797\n12642\n56156\n28364\n51872\n81613\n4209\n5842\n95867\n94304\n24304\n56580\n7017\n14385\n26107\n87434\n9205\n8892\n930\n59389\n4897\n11661\n76228\n29592\n12239\n96030\n13052\n13893\n72703\n22431\n66489\n52408\n21970\n5371\n82765\n30903\n96705\n33662\n19370\n50430\n48033\n5075\n4823\n19274\n47455\n15737\n92260\n95613\n6449\n87894\n50062\n47829\n40495\n36876\n98490\n91117\n64115\n65402\n62316\n12570\n8778\n70771\n28126\n35873\n61035\n30175\n95662\n56665\n62911\n75177\n58445\n34617",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "104\n70837\n66600\n21622\n84210\n27078\n2292\n41785\n89601\n84195\n24131\n48990\n77579\n5841\n79819\n50917\n57356\n80255\n2080\n99665\n15872\n27107\n64839\n96022\n33323\n92053\n73079\n21338\n61945\n2105\n7203\n33686\n39730\n82045\n30242\n62596\n75400\n87174\n961\n95083\n32709\n25150\n50517\n12633\n64729\n2232\n10374\n71263\n67463\n76285\n26301\n55498\n59807\n14252\n85037\n27714\n43843\n87451\n92050\n71073\n17157\n35173\n57334\n64554\n76972\n22701\n84396\n11395\n66798\n96605\n83498\n17462\n68358\n95494\n86360\n32833\n44807\n47798\n34414\n6142\n65705\n83640\n41913\n1515\n8618\n98429\n41808\n89038\n35667\n96800\n71259\n5615\n51664\n69620\n26800\n39283\n6544\n41843\n77647\n32478\n16128\n68394\n70854\n55849\n62749",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "46\n20721\n60812\n96016\n77111\n3324\n56215\n72850\n48720\n81824\n7428\n3037\n16424\n52420\n97427\n17121\n26350\n19589\n41309\n63458\n94974\n7092\n91658\n56751\n32892\n83958\n85563\n37197\n60482\n98901\n16326\n71643\n66300\n35355\n49198\n73088\n43986\n78349\n53726\n52242\n86855\n96191\n39079\n91677\n33041\n28530\n23271",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n10398754\n80577413\n10793017\n31680262\n2315521\n72647144\n34084956\n67212896\n93139606\n71386485\n15158515\n35648027\n37925814\n50565243\n30176936\n57172224\n93641621\n74619900\n44571326\n70028114\n32638195\n11733920\n37169856\n59121529\n70792178\n43113346\n53682772\n16061212\n97381128\n62330684\n34930625\n15482894\n63404702\n5182532\n41567884\n68707558\n70430775\n56411247\n16505039\n36076652\n32564166\n52982545\n18069303\n15875394\n43431350\n62837907\n10540353\n29533045\n65959285\n9632888\n51898087\n61035056\n7917523\n90861173\n52604995\n38966839\n52128637\n53403821\n830053\n22768957\n14357763\n4005651\n24701447\n99540016\n83768010\n12984324\n42107561\n32858523\n81323711\n51476985\n52765351\n85143940\n91756785\n92927265\n30596799\n5621423\n17478690\n83894983\n45777796\n32894663\n67763358\n99596545\n50794737\n29655165\n71517412\n37561430\n16446468\n6482142\n63022239\n91624141\n22208550\n55714404\n135481\n35531448\n42288868\n85397621\n82520028\n71574925\n37564302\n48387789\n94744138\n85245167\n63250578\n35086933\n31882964",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n124355\n8639499\n2650406\n75258047\n71994425\n27930377\n71477311\n36413471\n84209280\n17178683\n47330737\n71678479\n81988212\n76308722\n32807017\n16501789\n46053430\n30404529\n57069144\n37863016\n92085488\n91434366\n99549619\n48549674\n14395721\n5735580\n12458415\n83236811\n54731292\n726291\n92453015\n20328445\n89586260\n52391703\n76136587\n53086003\n26121087\n2003171\n52675996\n39189841\n24607119\n43513865\n93487641\n69915397\n92886017\n23223531\n34322239\n55129830\n6125854\n62567364\n39081243\n16724190\n25976516\n59981841\n27706224\n16206157\n77454693\n41765444\n19697108\n56572461\n76984048\n27010674\n57297967\n8944055\n41980902\n319622\n85129399\n9933766\n25731102\n41592614\n95943977\n8438247\n32902051\n49430435\n79093188\n65053617\n52178728\n44739582\n20539277\n67057625\n77394739\n49680790\n64278871\n37785038\n19232839\n6633759\n45269347\n94486033\n97921027\n53120745\n46331505\n28228570\n22138753\n69426091\n57916939\n56899403\n23094533\n43086958\n22806653\n55803945\n22161433\n83288268\n94531059\n76140045\n46530404",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "1\n68180721",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:18",
  "total_test_cases": 20
}