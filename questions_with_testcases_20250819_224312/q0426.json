{
  "problem_code": "problems",
  "title": "Brenden Politeness Filter",
  "tags": [],
  "text": "Brenden is a good guy, he wants to make a filter to be put in class rooms, so then no one whould be able to throw bad words to others.He invented a politeness filter, which could be attached to the ceil of the class room, and it will allow only good words to pass.How the filter works?The politeness filter contains several steps of filtering (layers), each step (layer) would test the word against its own filtering settings, then send the word into its queue if the word matched its filtering string, the queue will forward those words to specific group of people.In another way, the configuration consist of several consecutive QUEUE tags, each one has a name, BPF properties:<QUEUE  name=\"queue_name\"\r\n        bpf = \"bpf_string\"\r\n/>As you know, talking is not like shouting, so the filter will distinguish between normal words, and shouted words.The BPF string is written in the following grammar:<bpf_string>         ::= \"\" | <words_filter> \"|| (shout and \" <words_filter> \")\"\r\n<words_filter>       ::= \"(\" <many_words_filter> \")\"\r\n<many_words_filter>  ::= <single_word_filter> | <single_word_filter> \" or \" <single_word_filter>\r\n<single_word_filter> ::= \"word \" <word>(Please review theBackusâ€“Naur formif you didn't understand the notation.) If the notation is a little bit hard, don't worry, the example is clear.)Ok, Your task now is to write the configuration of a politeness filter!The input will start with the word \"Config:\" then following 4 lines with the following grammar:<line>                 ::= \"      - \" <queue_name> \"=\" <words_specifications>\r\n<words_specifications> ::= \"\" | <words_list>\r\n<words_list>           ::= <word> | <word> \",\" <words_list>Please note that <queue_name> and <word> are strings that consists of combinations of lower case, upper case, numbers, underscores only (no other punctuations, no spaces), with a limit of 50 character each, and the <word_list> contains no more than 10 words.Also, you can assume that queue names are different, also the <word_specifications> are different.Final note, if the <word_specifications> is empty, don't print the queue at all.And after printing all the queues, please print a final queue with queue_name=\"OTHER\" and an empty BPF.Ok, that's all, here is some examples:ExamplesInput:Config:\r\n        - BPF_WORDS_GOOD=Palastine,Syria\r\n        - BPF_WORDS_SECRET=\r\n        - BPF_WORDS_BAD=Materialism,Racism\r\n        - BPF_WORDS_POLITICAL=tyrannyOutput:<QUEUE  name=\"BPF_WORDS_GOOD\"\r\n        bpf = \"(word Palastine or word Syria) || (shout and (word Palastine or word Syria))\"\r\n/>\r\n<QUEUE  name=\"BPF_WORDS_BAD\"\r\n        bpf = \"(word Materialism or word Racism) || (shout and (word Materialism or word Racism))\"\r\n/>\r\n<QUEUE  name=\"BPF_WORDS_POLITICAL\"\r\n        bpf = \"(word tyranny) || (shout and (word tyranny))\"\r\n/>\r\n<QUEUE  name=\"OTHER\"\r\n        bpf = \"\"\r\n/>Input:Config:\r\n      - BPF_WORDS_1=1111,2222\r\n      - BPF_WORDS_2=3333,4444,4455,4466\r\n      - BPF_WORDS_3=5555\r\n      - BPF_WORDS_4=7777,8888Output:<QUEUE  name=\"BPF_WORDS_1\"\r\n        bpf = \"(word 1111 or word 2222) || (shout and (word 1111 or word 2222))\"\r\n/>\r\n<QUEUE  name=\"BPF_WORDS_2\"\r\n        bpf = \"(word 3333 or word 4444 or word 4455 or word 4466) || (shout and (word 3333 or word 4444 or word 4455 or word 4466))\"\r\n/>\r\n<QUEUE  name=\"BPF_WORDS_3\"\r\n        bpf = \"(word 5555) || (shout and (word 5555))\"\r\n/>\r\n<QUEUE  name=\"BPF_WORDS_4\"\r\n        bpf = \"(word 7777 or word 8888) || (shout and (word 7777 or word 8888))\"\r\n/>\r\n<QUEUE  name=\"OTHER\"\r\n        bpf = \"\"\r\n/>",
  "sample_input": "<QUEUE  name=\"queue_name\"\r\n        bpf = \"bpf_string\"\r\n/>",
  "sample_output": "<bpf_string>         ::= \"\" | <words_filter> \"|| (shout and \" <words_filter> \")\"\r\n<words_filter>       ::= \"(\" <many_words_filter> \")\"\r\n<many_words_filter>  ::= <single_word_filter> | <single_word_filter> \" or \" <single_word_filter>\r\n<single_word_filter> ::= \"word \" <word>",
  "link": "https://www.spoj.com/problems/BPF1",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "<QUEUE  name=\"queue_name\"\r\n        bpf = \"bpf_string\"\r\n/>",
      "expected_output": "<bpf_string>         ::= \"\" | <words_filter> \"|| (shout and \" <words_filter> \")\"\r\n<words_filter>       ::= \"(\" <many_words_filter> \")\"\r\n<many_words_filter>  ::= <single_word_filter> | <single_word_filter> \" or \" <single_word_filter>\r\n<single_word_filter> ::= \"word \" <word>",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "sqvnua qnztfdjwgtiolm\nqzeew fdqw fxw\nyzgj",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "msf nudb\nq t hgdx\nzt",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "hhbfp vsvphtj\nvfijh pd rim\nk",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "qukq zisqhfjosmavj\nbgw ynglj qxqtl\nxlv",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "m pdkx\nynox wjx qfxyulnbldf\nqy",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "oik wooj\nnyk m rtmztewto\nxp",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "o owgzclulh\nehc xb ngrlqng\njk",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "h dhoqpzdwffibkhw\nzc ugq vma\nmvbh",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "kfy yxnpgzny\nyowkm i rwiusfm\nymo",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "fqfuwm qylvhren\nwbn zk lzjsnwzmw\nms",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "zdibd oogzxqrbpoorgeo\nkj jnkn svmhnqva\njmtb",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "dvq ptpvi\nxiu eyh tfe\nqasf",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "zdl hhyke\nj xopl ysgwwqgyqoyz\nynz",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "sxcqyg nlnpzcjlxdc\nlp oo ssyovngwq\ndiz",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "wzn ojkuzmiceec\nimb i nwqld\nsnz",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "zew kspoyiwusj\nki zt cmqq\njovn",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "dpb pmuclbuem\ncwqbx alhf smo\nki",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "gry dewrcccdeaiavxixy\nshgnk fm ohlcfwj\nk",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "inrig pxweiobhbr\nm bfq fp\nxvqa",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}