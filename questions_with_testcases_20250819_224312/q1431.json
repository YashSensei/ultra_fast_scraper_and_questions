{
  "problem_code": "problems",
  "title": "GALLUP",
  "tags": [],
  "text": "Often, we see results of gallups, like this:\r\nPrefer red: 3.5%\r\nPrefer green: 4.5%\r\nPrefer yellow: 22.0%\r\nPrefer blue: 70.0%\r\nand you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are interested in the minimum number of people).\r\nYour task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.InputThe input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 <= n <= 20) giving the number of percentages in the set. If n > 0, the percentages follow as n numbers; these numbers may have 0–5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding\r\nerrors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.OutputFor each set of data, print a line starting with “Case i :”, where “i” is the data set’s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1–9999 exists,\r\nprint “error” instead of the number.ExampleInput:3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0Output:Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
  "sample_input": "Input:3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0Output:Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GALLUP",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0",
      "expected_output": "Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 9 5 5\n3 1 10 7\n2 6 4\n3 2\n6 5 7 8 7\n5 8 1\n2 7 5\n4 3 10\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 5 3 7\n9 4 2 6\n3 1 3\n6 10\n1 6 9 3 9\n6 10 3\n3 1 3\n1 7 9\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 5 7\n3 10 7 6\n9 6 7\n1 8\n3 4 9 7 6\n8 10 1\n9 2 4\n4 10 9\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 71 62 94\n3 58 67 33\n71 42 55\n28 90\n94 91 63 20 69\n63 59 64\n21 97 37\n71 47 76\n32",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "72 26 7 64\n96 43 56 96\n7 52 95\n87 53\n67 56 95 34 84\n90 1 18\n36 24 6\n39 12 54\n51",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "57 52 20 14\n5 1 88 98\n85 22 34\n76 3\n41 2 10 52 31\n38 90 52\n92 35 67\n57 23 44\n59",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "98 50 84 8\n21 26 5 36\n63 5 8\n46 78\n73 62 62 51 56\n62 22 81\n11 40 43\n36 32 38\n78",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 5 14 67\n24 49 4 23\n87 55 81\n56 76\n44 71 12 52 17\n75 3 86\n87 95 64\n33 70 69\n38",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "266 69 448 297\n221 461 349 290\n285 69 424\n327 153\n409 224 406 162 322\n69 269 239\n245 204 252\n241 168 124\n276",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "218 270 448 308\n316 245 120 355\n206 54 450\n121 153\n334 243 314 296 338\n299 234 247\n136 253 195\n274 177 87\n347",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "343 249 111 443\n202 328 102 65\n299 315 71\n68 480\n269 430 105 301 119\n191 148 173\n398 208 218\n193 390 319\n370",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "446 56 452 480\n402 129 51 426\n258 498 416\n261 50\n92 329 414 77 323\n424 433 403\n252 399 428\n185 276 63\n378",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "200 350 457 207\n318 141 82 119\n172 138 313\n344 335\n220 154 104 357 135\n449 348 220\n376 84 377\n217 122 218\n160",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "186 297 363 380\n416 127 79 231\n188 327 69\n210 159\n104 212 124 387 368\n500 119 466\n334 419 91\n142 260 348\n490",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 162 185 412\n398 366 486 340\n271 232 221\n491 496\n97 75 189 396 91\n188 328 253\n116 219 68\n471 487 100\n215",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 2 1\n999 1000 1000 1\n2 999 999\n1000 2\n2 2 999 1 1000\n1 1000 1000\n1000 2 2\n999 1 999\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 999 999\n1000 1000 1 999\n2 1000 999\n1000 999\n2 999 1 999 2\n1000 1000 2\n999 1 2\n1 2 2\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}