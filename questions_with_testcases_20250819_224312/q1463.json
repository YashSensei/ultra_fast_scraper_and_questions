{
  "problem_code": "problems",
  "title": "A1 Road",
  "tags": [],
  "text": "Our country needs to be connected by highways that need to be repaired\r\nevery once in a while. A committee chosen by the government of\r\nour country tries to continually improve the condition of the main highway\r\nimaginatively named “A1” by finding the first damage that needs to\r\nbe fixed.Starting with the first damage the highway is divided into\r\nsegments of the same length. A damage fixing team is then being\r\nsent to each segment containing damage. Since there usually are\r\nmuch more damages than teams available, it would be advisable to\r\ndivide the highway into segments of given length in such a way that\r\nthe number of segments containing damages is as small as possible.There are N known damages on the highway, each described by an integer\r\nrepresenting its distance from the beginning of the highway in\r\nmeters. The length of a segment is M meters (an integer).\r\nThere are no damages within the first M meters. The first segment has\r\nto start within the first M meters of the highway. If the first segment\r\nstarts at the Kth meter then Lth segment starts at the (K+(L-1)*M)th\r\nmeter of the highway. A team can fix all damages occurring within\r\none segment starting with the first meter of the segment and ending\r\nwith the last meter of that segment.Write a program that will determine the minimal number of damage fixing\r\nteams needed to fix all damages occurring on the highway “A1” and all\r\npossible beginnings of the first segment.InputThe first line of the input file contains two whole numbers M and\r\nN separated by a space character, 1 ≤ M, N ≤ 100 000, where M is a\r\nlength of a segment and N is a number of damages occurring on the highway.The second line contains N whole numbers separated by a space character\r\nrepresenting the positions of all damages. Each of those numbers is\r\ngreater than M and less than or equal to 2 000 000 000 (two billion).\r\nThe sequence of N numbers given in the second line will always be\r\nstrictly increasing sequence.OutputThe first line of the output file should contain the minimal number\r\nof damage fixing teams.The second line should contain all the positions where the first\r\nsegment can begin. These numbers should be separated by a space character\r\nand they must form a strictly increasing sequence.SampleInput 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4Input 3:2 10\r\n3 4 7 8 12 13 14 15 20 21Output 3:7\r\n1 2",
  "sample_input": "Input 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1",
  "sample_output": "Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4",
  "link": "https://www.spoj.com/problems/MA1",
  "scraped_at": "2025-08-17 00:33:30",
  "test_cases": [
    {
      "input": "Input 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1",
      "expected_output": "Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 9 1\nrg nafx 10\n8 7 6 8 2 3 9\n1 9 9 9 tcs etfbw\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 9\nnar kwf 5\n1 4 10 1 7 2 7\n6 7 6 2 yn ctds\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6 2\nb ydtih 9\n10 5 9 5 5 6 5\n4 8 7 7 fmmd qi\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 19 46\ng n 20\n4 3 25 89 32 63 76\n86 24 27 29 egeds ploa\n94",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "58 66 11\nh h 18\n82 89 66 13 61 81 70\n15 36 47 84 yrcd mu\n34",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "34 13 64\nwtlqp bluih 12\n54 100 58 12 60 85 73\n68 5 58 6 k bs\n49",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "44 80 32\nrgjxi ikhfl 76\n58 98 27 11 25 26 27\n13 99 58 79 pjf sjhl\n67",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 76 99\nebtyn nclxm 87\n62 81 4 72 93 20 2\n90 37 33 92 bmd yqb\n72",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16106 46225 37147\nn vn 25411\n25572 37767 7531 36872 31298 41229 36189\n35047 27000 34104 49514 qjn ohj\n28843",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "32319 14558 41687\ntvsk l 45663\n29383 22195 17131 32124 16070 49810 16789\n32832 13000 48980 12435 xdrhkn tuvm\n35230",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19326 19460 24118\nk mmpgw 31316\n13290 32527 10539 32961 23645 27173 42507\n39028 49951 19786 20939 ze zovpb\n10430",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "9702 31639 47994\ndnj siun 41075\n30551 24743 14025 18247 12600 6013 33892\n43886 14406 17274 46623 qhl cfk\n15163",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "45517 22414 22174\nbwxuo ivtf 15488\n48483 31232 16808 7668 38401 6815 26312\n23588 36627 47052 24319 jycg nzb\n16022",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "36352 17109 9659\nyxsru jih 8324\n42518 27638 45451 26333 26765 9124 8440\n17392 16751 22671 39491 qjyvonk ek\n37729",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "49925 47924 23467\nktjlt pv 49118\n35722 9126 22007 6374 30017 11927 25352\n11168 33423 49210 13390 d nzu\n6663",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000\nzeu wb 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 gdj inz\n100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000\nuqigx vvfaj 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 qmyzyde r\n100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 100000 99999\nrlzn pf 1\n1 99999 100000 99999 100000 2 99999\n2 2 2 99999 wa gv\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 100000 100000\nugwnz zvu 1\n100000 1 1 1 100000 100000 100000\n100000 99999 2 99999 sbzl nlio\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}