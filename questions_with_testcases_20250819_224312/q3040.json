{
  "problem_code": "problems",
  "title": "Ada and Trees",
  "tags": [],
  "text": "Ada the Ladybug is a farmer. She has a long furrow in which she grows trees. Each tree has some weight. The task is simple, she wants to know the biggest tree on some part of the furrow which is not greater than some heightH. As Ada asks for this very often, she asked you to write a program for this.InputThe first line will contain two integer1 ≤ N, Q ≤     3×105, the number trees and the number of questions.The next line will containNintegers0 ≤ Ai≤     106, the heights of trees.The sum nextQwill contain three integers:0 ≤ l ≤ r <     N, the segment of furrow she is interested in and0 ≤ H ≤ 106OutputFor each query output either the size of highest tree lesser/equal toHor output0if such tree doesn't grow on given segment.Example Input9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12Example Output0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
  "sample_input": "9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12",
  "sample_output": "0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
  "link": "https://www.spoj.com/problems/ADATREE",
  "scraped_at": "2025-08-17 00:34:36",
  "test_cases": [
    {
      "input": "9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12",
      "expected_output": "0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8\n1 10 7 2 8 8 4 3 9\n10 6 9\n5 1 5\n3 3 3\n8 7 7\n7 9 7\n7 9 7\n7 10 7\n10 2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n8 3 2 8 3 8 5 2 8\n3 6 6\n10 2 9\n5 8 6\n7 4 6\n9 3 8\n4 3 10\n2 9 6\n10 3 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n2 4 8 8 9 4 8 4 9\n5 4 1\n4 5 4\n9 6 5\n6 1 9\n3 8 6\n3 10 10\n2 9 6\n4 4 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "28 70\n18 19 32 63 1 1 18 55 13\n50 38 95\n18 76 37\n1 20 45\n96 64 77\n88 37 25\n71 27 46\n82 64 74\n7 47 92",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "43 5\n22 69 3 94 96 54 26 77 63\n83 16 65\n11 25 34\n67 56 47\n98 45 15\n89 5 4\n37 64 52\n25 95 17\n98 11 20",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 50\n7 31 69 64 19 68 39 71 31\n92 2 52\n65 67 22\n55 36 98\n3 6 75\n1 40 76\n52 26 48\n1 98 49\n88 48 91",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "40 45\n31 41 25 43 11 13 87 36 56\n68 87 28\n96 1 33\n68 33 29\n30 80 75\n85 53 3\n6 100 31\n65 77 46\n40 49 87",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 6\n17 80 46 36 37 76 75 83 30\n51 56 8\n71 72 81\n48 62 5\n55 51 62\n42 31 27\n8 52 81\n40 29 47\n33 12 3",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "478 142\n155 186 350 380 397 375 136 94 199\n409 113 153\n418 463 488\n147 335 455\n103 65 160\n269 290 112\n288 57 158\n431 282 319\n189 279 168",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "320 184\n240 376 280 449 402 483 355 201 445\n245 214 236\n420 135 179\n479 369 487\n302 297 169\n267 230 154\n345 417 355\n58 403 464\n230 76 235",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "191 233\n354 218 138 454 342 431 491 90 131\n95 440 326\n225 108 318\n250 104 156\n263 135 112\n208 210 437\n85 189 73\n392 413 361\n87 193 163",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "380 358\n320 168 309 472 64 86 372 312 331\n277 206 316\n334 461 400\n61 338 83\n102 116 231\n130 409 251\n326 346 232\n359 481 387\n60 386 321",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "206 429\n94 422 418 366 295 252 377 58 293\n64 376 99\n332 373 490\n319 223 367\n397 232 426\n259 487 332\n163 181 393\n406 334 290\n148 105 298",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "146 127\n211 205 491 187 85 164 408 498 218\n419 177 216\n496 76 153\n432 188 253\n381 280 437\n144 142 387\n462 320 249\n91 386 359\n90 379 279",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "488 409\n330 440 479 315 151 211 77 341 269\n332 186 297\n166 148 88\n181 344 89\n106 96 177\n263 447 86\n305 77 385\n166 476 90\n117 481 243",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1\n2 999 1 1000 2 1 999 2 1000\n1 2 999\n1 1 999\n1 1 1\n999 1000 1\n999 1000 1\n2 999 2\n2 2 1\n1 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\n1 999 2 1000 1000 999 1 999 999\n2 1000 999\n2 1 999\n999 2 999\n999 1 2\n999 1 2\n2 1 1000\n999 999 2\n2 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}