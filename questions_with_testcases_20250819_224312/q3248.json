{
  "problem_code": "problems",
  "title": "For Loops Challenge",
  "tags": [],
  "text": "Bjarne is learning about programming. Yesterday’s lesson was aboutforloops. To put his skills into practice, he had to write a number offorloops that printed consecutive positive integers. He was so proud of his creation that he stored the output of his program into a file. For example, the contents of the file could have looked like this:5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106Today, he opened his file and realized it is now inconsistent: the numbers weren’t sorted in ascending order anymore! His wife told him she was bored so she swapped some numbers around. He’s so frustrated he can’t rewrite the program.Your task is to help him out. Read out the numbers and print all the C++ for loops that recreate the original file.InputThere are many lines in the input. The i-th line contains a sequence of space-separated positive integers, where each integer is between 0 and 1000000000. It is guaranteed there are no repeated integers and that there will be at minimum one line with one integer, no line will have more than 1000 integers.OutputOutput all the for loops that generate Bjarne’s original file, one per line. Print the for loops in  order. That is, if the numbers of the i-th loop are less than the numbers of the j-th loop, the i-th for loop must be printed first.NotesName ‘i’ the variable of each for loop.Don’t use brackets.Theforloop condition must be inclusive, that is, use ‘<=’.The increment section of the for loop must be \"i++\".The C++ code you print need not include a line ending command.Beware of spaces. All yourforloops must contain the same number of spaces as this sample:for(inti=a;i<=b;i++)cout<<i<<\"\";ExampleInput9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
  "sample_input": "5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106",
  "sample_output": "Input9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
  "link": "https://www.spoj.com/problems/PFORLOOP",
  "scraped_at": "2025-08-17 00:34:22",
  "test_cases": [
    {
      "input": "5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106",
      "expected_output": "Input9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 3 4 4 10 8 5 4 9\n10 10 8 8 4 1 8 7 5 7\n8 7 10 6 2 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 4 6 9 7 10 10 2 7 4\n5 1 9 3 9 3 7 1 2 8\n8 7 10 7 10 8 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 10 7 8 10 9 1 6 3\n4 6 6 2 3 6 7 10 5 2\n4 7 10 1 10 10 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 47 19 59 63 43 66 91 35 11\n30 42 77 4 86 94 83 76 24 78\n86 51 43 24 23 46 43",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "62 10 48 10 41 65 14 86 74 95\n12 75 56 38 47 28 91 48 58 88\n10 53 58 17 67 45 13",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "89 30 30 12 20 14 47 50 90 84\n28 50 82 96 43 43 78 8 98 10\n68 85 54 67 15 40 16",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 48 23 60 92 73 74 47 51 23\n35 47 58 16 80 98 29 29 48 17\n64 62 69 3 38 77 55",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 14 31 54 96 37 5 28 89 53\n3 37 67 31 48 41 98 2 93 21\n46 42 55 74 63 39 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "380 323 122 407 238 115 473 312 474 155\n97 233 182 330 429 78 468 218 317 272\n181 355 243 291 404 214 52",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "369 137 500 343 220 364 319 213 486 293\n163 486 367 145 147 257 234 466 303 153\n75 399 374 110 216 277 493",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "73 305 165 52 127 299 396 334 223 444\n342 295 259 78 461 239 370 56 90 297\n185 89 473 495 456 413 108",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "380 392 64 201 416 65 110 495 461 482\n189 96 190 121 339 184 298 173 91 218\n288 399 258 63 362 209 73",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "279 104 404 300 157 341 232 339 261 465\n197 182 256 238 163 142 468 317 170 118\n494 252 328 375 66 59 399",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "303 182 415 476 402 468 376 431 403 423\n314 297 170 89 374 473 348 65 291 438\n362 192 497 457 197 195 411",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "351 134 234 428 81 164 314 360 405 475\n117 476 328 478 363 178 86 404 468 110\n244 326 475 230 280 483 397",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 999 999 1000 1 2 2 2 1\n2 1 1 1 2 1 999 2 1 1\n2 2 1000 1 2 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 999 2 1000 999 999 1 2 999\n999 1 1000 1000 1000 1000 1 1 999 999\n1000 1 1 2 999 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}