{
  "problem_code": "problems",
  "title": "Bomb the Bridge",
  "tags": [],
  "text": "You want to destroy a bridge with bombs. The lower-left corner of the bridge is at (0, 0) and the upper-right corner is at (w, l). There are already b bombs exploded, the i-th bomb created a hole of radius ri centering at (xi, yi). You want to throw exactly one more bomb so that the bridge is split into two connected parts(though the two parts can share a finite number of points), so that no one can go through the bridge from y = 0 to y = l. Your task is to find the minimal radius of the last bomb to split the bridge, assuming that the last bomb can explode precisely at the position you want (possibly at non-integer coordinates). Note that you are only allowed to use bombs with integer radius. That is, even if a bomb with radius 1.01 is sufficient, you have to use a bomb with radius 2, since you only have bombs with integer radius.InputThe first line contains t (1≤t≤10), the number of test cases followed. Each test case begins with three integers w, l, b (1 ≤ w,1 ≤ 100, 0 ≤ b ≤ 10). Each of the following b lines contains three integers integers xi, yi, ri (0 ≤ x ≤ w, 0 ≤ y ≤ l, 0＜r ≤ 100). The bridge is guaranteed to be connected before the last bomb.OutputFor each test case, print the minimal radius of the last bomb.ExampleInput:3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10Output:135040",
  "sample_input": "Input:3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10Output:135040",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BOMB",
  "scraped_at": "2025-08-17 00:33:38",
  "test_cases": [
    {
      "input": "3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10",
      "expected_output": "135040",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 4 9 8 9 7 4 6 2 8 4 4 6 1 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 10 7 9 7 3 1 1 4 6 9 10 3 3 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 6 7 6 8 1 8 6 9 6 7 1 2 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 78 63 88 93 81 90 51 35 10 26 33 51 29 46",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "40 84 15 17 42 78 79 66 17 21 67 12 74 36 68",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "18 15 42 95 92 8 49 71 83 77 88 12 36 30 85",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "32 96 69 65 65 43 56 4 78 62 23 94 22 100 81",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 99 60 46 64 40 65 64 28 49 74 46 43 74 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "498 425 460 378 393 457 171 153 351 431 411 261 129 305 108",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "166 399 103 404 129 81 441 479 315 76 436 296 381 192 79",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "248 122 102 53 431 107 131 406 425 246 167 484 130 379 447",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "178 434 434 378 274 478 345 110 236 219 427 133 317 366 80",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "453 392 253 464 496 256 182 348 125 59 76 443 280 144 354",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "316 285 289 425 179 297 82 306 372 283 127 242 304 188 268",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "218 465 496 306 386 156 296 314 398 427 244 440 271 256 488",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 999 2 1 1000 1000 1 1000 1000 2 1 2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 999 999 1 1 1 1000 1000 999 2 1000 2 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}