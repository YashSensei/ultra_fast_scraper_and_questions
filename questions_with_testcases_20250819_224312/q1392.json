{
  "problem_code": "problems",
  "title": "Manhattan Wire",
  "tags": [],
  "text": "There is a rectangular area containing n × m cells. Two cells are marked\r\nwith “2”, and another two with “3”. Some cells are occupied by obstacles.\r\nYou should connect the two “2”s and also the two “3”s with non-intersecting\r\nlines. Lines can run only vertically or horizontally connecting centers\r\nof cells without obstacles.Lines cannot run on a cell with an obstacle. Only one line can run on\r\na cell at most once. Hence, a line cannot intersect with the other line,\r\nnor with itself. Under these constraints, the total length of the two\r\nlines should be minimized. The length of a line is defined as the\r\nnumber of cell borders it passes. In particular, a line connecting cells\r\nsharing their border has length 1.Fig. 1(a) shows an example setting. Fig. 1(b) shows two lines satisfying the\r\nconstraints above with minimum total length 18.Figure 1: An example of setting and its solutionInputThe input consists of multiple datasets, each in the following format.n m\r\n    row1\r\n    …\r\n    rownn is the number of rows which satisfies 2 ≤ n ≤ 9. m is the number of columns\r\nwhich satisfies 2 ≤ m ≤ 9. Each rowi is a sequence of m digits separated by\r\na space. The digits mean the following.0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”The end of the input is indicated with a line containing two zeros separated\r\nby a space.OutputFor each dataset, one line containing the minimum total length of the two\r\nlines should be output. If there is no pair of lines satisfying the requirement,\r\nanswer “0” instead.Sample Input5 5\r\n0 0 0 0 0\r\n0 0 0 3 0\r\n2 0 2 0 0\r\n1 0 1 1 1\r\n0 0 0 0 3\r\n2 3\r\n2 2 0\r\n0 3 3\r\n6 5\r\n2 0 0 0 0\r\n0 3 0 0 0\r\n0 0 0 0 0\r\n1 1 1 0 0\r\n0 0 0 0 0\r\n0 0 2 3 0\r\n0 0Sample Output18\r\n2\r\n17",
  "sample_input": "n m\r\n    row1\r\n    …\r\n    rown",
  "sample_output": "0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”",
  "link": "https://www.spoj.com/problems/MMAHWIRE",
  "scraped_at": "2025-08-17 00:33:25",
  "test_cases": [
    {
      "input": "n m\r\n    row1\r\n    …\r\n    rown",
      "expected_output": "0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "nay momrx\n1\nlkrecddd\ny\nxsdvkfv",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "humg rohis\n4\nhkixijws\nh\ngd",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "fkm dp\n6\nehktu\nhv\nrdo",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "wa trsvz\n1\nrogzs\nt\nxk",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "jmrpc to\n8\nk\nc\nrr",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "f osd\n5\nug\nvr\nnzbtm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "gk pd\n5\noz\nrq\ntli",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "mfd eff\n4\nak\nhr\nuduuczen",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ojnjx lq\n4\ndzm\nza\nxoshi",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "gak lsg\n2\njcqjck\nm\ni",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "sd aq\n2\nffruwufn\nz\ngbk",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "eawz losyo\n1\nofu\ngw\nlhjgev",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "zoues jqec\n2\ngnewwp\nm\noxbwvnm",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "ygb rza\n3\nlneiom\nd\nef",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "cibeh sgug\n1\npuwhu\nc\njwnxzaca",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "b ma\n9\nhrh\naq\nj",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "wyi y\n9\nahogg\noa\nnx",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "u zgz\n2\nu\ndi\ntjrvi",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "td lo\n9\np\nmj\nqkopdwvy",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}