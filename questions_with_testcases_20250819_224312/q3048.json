{
  "problem_code": "problems",
  "title": "Ada and Mold",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She has a long furrow in which she grows vegetable (while each vegetable is identified by a bloom-value). The more vegetable is in the furrow the bigger risk of mold there is. More specifically the mold-value can be obtained as sum ofxorof all pairs of vegetable's bloom-values.Ada has bought a few wooden separators which could possibly reduce the mold-value. It works in following manner: she can put the separators between some plants, dividing the furrow into multiple segments. The mold-value will then becomes the sum of mold-values of all the segments (independently). Can you find the minimal possible mold-value?InputThe first line of input contains two integersN, K:1 ≤ K < N ≤     5000, the length of furrows and the number of separators.The next lines will containNnumbers0 ≤ Ai≤     109, the bloom-values of vegetable.OutputOutput the minimal possible mold-value.Example Input6 1\r\n1 2 3 4 5 6Example Output12Example Input 14 3\r\n5 3 5 3Example Output 10Example Input 27 2\r\n5 3 5 3 5 3 4Example Output2124Example Input 39 4\r\n1 2 3 4 5 6 7 666 1024Example Output 38Example Input 430 8\r\n629470789 417274987 617986533 841737683 297969800 432044389 708142005 156958893 499363651 434034331 176735187 525172817 747109631 949700868 259681519 357968078 818249370 456939952 450487335 529013233 327250536 90354657 643708145 141755216 656041628 661580907 204072850 469709611 834069223 681347499Example Output 416154467281",
  "sample_input": "6 1\r\n1 2 3 4 5 6",
  "sample_output": "12",
  "link": "https://www.spoj.com/problems/ADAMOLD",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "6 1\r\n1 2 3 4 5 6",
      "expected_output": "12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1\n3 10 4 6 4 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n4 2 7 10 8 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n6 8 4 7 3 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "60 30\n56 93 16 38 98 63",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "86 18\n90 90 68 4 20 97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 53\n87 53 49 31 1 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "3 9\n24 8 27 23 85 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 25\n99 62 16 57 90 11",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2097 2339\n1442 1004 846 2133 2404 1356",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1365 2384\n1332 1466 1127 379 1254 347",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "383 1836\n1530 1538 1996 1445 1421 986",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2385 310\n665 475 1637 1238 1622 944",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1986 1626\n375 597 2049 1436 745 1672",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1099 253\n619 2323 1921 2020 378 1843",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1475 1913\n2271 1927 657 905 1491 2372",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000 5000 5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000 5000 5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "5000 4999\n4999 1 2 5000 5000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "4999 5000\n1 2 2 5000 5000 5000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}