{
  "problem_code": "problems",
  "title": "Smallest Inverse Sum of Divisors",
  "tags": [],
  "text": "First, we define σ(i) = Sum of all positive divisors ofi.For example: all positive divisors of 60 = {1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60}So σ(60) = 1 + 2 + 3 + 4 + 5 + 6 + 10 + 12 + 15 + 20 + 30 + 60 = 168Now for the task: given an integernfind smallest integerisuch that σ(i) =n.InputThe first line is an integerT(1 ≤T≤ 100,000), denoting the number of test cases. Then, T test cases follow.For each test case, there is an integern(1 ≤n≤ 100,000,000) written in one line. (One integer per line.)OutputFor each test case, output the smallest inverse sum of divisors ofn. ifndoesn't have inverse, output -1.ExampleInput:5\r\n1\r\n16\r\n40\r\n60\r\n168Output:1\r\n-1\r\n27\r\n24\r\n60Time Limit ≈ 2.5*(My Program Top Speed)See also:Another problem added by Tjandra Satria Gunawan",
  "sample_input": "Input:5\r\n1\r\n16\r\n40\r\n60\r\n168Output:1\r\n-1\r\n27\r\n24\r\n60",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INVDIV",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "5\r\n1\r\n16\r\n40\r\n60\r\n168",
      "expected_output": "1\r\n-1\r\n27\r\n24\r\n60",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n10\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n2\n4\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n9\n9\n4\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n23418897\n36952476\n80265894\n19251309\n87740816\n2181307\n49938340\n85317232\n93000542\n36251102\n33725330",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n44257463\n9432897\n68443923\n98061449\n82407164\n53301771\n42368868",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n97602539\n23778625\n69515962\n55774603\n84589983\n11491287\n83797169\n62485920\n70012897\n87541117",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n52992682\n82665658\n93902796\n7254586\n3751045\n24374998\n38228016\n23167706\n85454263\n12056247\n53393848\n42582920\n5451009\n18540809",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n74740696\n58501466\n25722835\n27541294\n5575883\n5094906\n32170699\n56076019\n45326311\n830369\n17607347\n5201039\n47102419\n44869540\n32200325\n237374",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "57\n62673\n77493\n76042\n548\n4595\n31856\n54268\n79575\n44076\n798\n93120\n52452\n12256\n18339\n1422\n7258\n62512\n73413\n94855\n30840\n9475\n40229\n80150\n39735\n67105\n34270\n9596\n64094\n5007\n52141\n96731\n42818\n19653\n14102\n24504\n34048\n55816\n2759\n96842\n77355\n40550\n37705\n74939\n52888\n91220\n15663\n28855\n79901\n32460\n39699\n73685\n20345\n36065\n73555\n41128\n60926\n75479",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "67\n3599\n75626\n66192\n20773\n72633\n39335\n96247\n66237\n69290\n15780\n75113\n73393\n55088\n33354\n3143\n55446\n99832\n45550\n77568\n8206\n32620\n34881\n7819\n9516\n9264\n3502\n20481\n4374\n19708\n99611\n77675\n45501\n12746\n23446\n48936\n97637\n62162\n67079\n20249\n17166\n6215\n58924\n91301\n49407\n17455\n94143\n57323\n66355\n72522\n20399\n7432\n80685\n27009\n42326\n1469\n99759\n6211\n58485\n77080\n40779\n47888\n38760\n96874\n81183\n80671\n85155\n89045",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "83\n18232\n2117\n31770\n68916\n75887\n98384\n47600\n40968\n61275\n53867\n41107\n14030\n31301\n81894\n88761\n15995\n79134\n63375\n45677\n36526\n58673\n38684\n16753\n61914\n51633\n36157\n28693\n93260\n21162\n24224\n97085\n53611\n8419\n56984\n39148\n44410\n24215\n65960\n3659\n1753\n61812\n82271\n35438\n37250\n56494\n14258\n44484\n40541\n47707\n74832\n36155\n91115\n65846\n17659\n61040\n23952\n7471\n44265\n73778\n58242\n84347\n47111\n40317\n5560\n53244\n34427\n53598\n30848\n14625\n95554\n56151\n14687\n88002\n56646\n83905\n9483\n75214\n66007\n36560\n95298\n16156\n55908\n41760",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n9839\n86655\n89347\n40497\n28987\n76936\n37138\n10541\n73750\n3593\n30471\n59707\n92073\n44920\n37915\n52403\n45195\n77116\n24378\n84545\n23949\n96503\n34869\n5888\n45378\n52650\n75795\n28913\n89585\n55706\n35928\n15149\n71341\n95016\n21004\n47065\n94232\n32466\n50972\n94802\n41843\n68458\n73326\n91200\n53679\n54278\n49486\n52261\n92408\n16476\n84463\n87062\n38642\n63326\n96521\n2453\n69830\n18346\n18668\n27166\n59697\n3652\n74919\n92659\n71374\n30383\n30892\n43713\n74086\n47044\n60180\n93861\n20663\n27539\n66770\n7456\n67214\n29258\n34738\n10378\n14025\n74105\n52481\n19363\n59754\n32785\n30449\n45731\n72477\n19136",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "75\n85926\n63964\n83066\n83836\n52306\n37036\n14967\n83554\n53952\n63552\n80958\n32994\n64940\n61776\n10456\n2825\n33899\n91759\n63287\n65938\n70138\n55367\n72246\n24199\n84425\n50948\n31462\n22935\n59181\n29140\n1657\n96407\n47146\n19197\n80974\n94226\n83813\n17604\n72065\n69379\n64715\n81453\n32049\n32718\n33631\n89207\n61374\n74201\n57092\n37074\n18536\n5692\n87460\n78718\n15198\n579\n94728\n86403\n26726\n86714\n84621\n23223\n71504\n54012\n58538\n97813\n58599\n32195\n32190\n98010\n44824\n13420\n36879\n7045\n62907",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n45337\n90249\n56311\n18815\n87826\n75044\n4964\n21999\n24060\n99802\n9893\n10089\n41501\n82187\n86793\n46794\n21918\n54760\n88292\n13063\n94818\n79972\n8762\n1131\n57497\n38784\n85080\n13805\n16320",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "53\n44189\n38012\n79939\n97779\n46708\n26896\n18218\n84359\n50962\n68720\n26161\n42106\n56854\n43630\n7844\n1629\n87584\n12847\n48107\n29213\n72885\n16427\n99034\n5692\n25803\n25104\n87870\n47406\n373\n59237\n60165\n37991\n73599\n88870\n21759\n24735\n85392\n2794\n99292\n11360\n78686\n96722\n77899\n45719\n75047\n96107\n76011\n57790\n4193\n59237\n88754\n20532\n55285",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n25299864\n50870861\n44458917\n54500839\n72610931\n65574298\n5286088\n49392766\n68496322\n94601681\n44469684\n19136125\n57853447\n55098177\n69674256\n21138930\n27597987\n68544691\n3772631\n15320988\n50618222\n2684474\n21915802\n72368997\n36166806\n69697485\n62040740\n71050499\n5894525\n25741378\n94068151\n80925765\n50491483\n21683052\n19331632\n2405021\n32952163\n1915434\n20403464\n35136577\n33552866\n67672370\n46107367\n10340636\n22420879\n46890065\n41782970\n62169996\n41223103\n34962370\n35260418\n99742791\n3144110\n85985941\n81137093\n29623656\n42868522\n29749145\n25117595\n4444914\n80545720\n3099076\n87805638\n84780297\n80123499\n40971105\n48935595\n53564313\n44381888\n95803911\n14702882\n14195806\n34760887\n73427834\n39679931\n65640819\n11063330\n63356037\n81767589\n99044829\n69481132\n94487328\n95440846\n70624674\n83493416\n14167211\n73250967\n45960108\n72174030\n26648826\n35156802\n51905820\n82630004\n37844268\n80361265\n98003473\n36444801\n95556010\n54364220\n59473111",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n57060067\n22367220\n15993201\n6275949\n74925420\n37808150\n11879855\n97062583\n10684630\n7395867\n36117292\n33155372\n96909148\n2940874\n93843682\n79183574\n76566757\n72060017\n82001452\n81297586\n73795803\n13744170\n55131370\n65014650\n67300625\n95786779\n10616952\n49927293\n90422593\n89134692\n82374992\n50238279\n18495058\n89991680\n62690376\n45466862\n23769831\n13997756\n22072237\n12119271\n77972310\n79743571\n73179870\n8518241\n26546202\n51064908\n94103520\n37205522\n93844814\n46941366\n73973651\n80022517\n8853283\n76034634\n10715714\n95752818\n82577719\n68797490\n63930276\n78304858\n11249786\n76998941\n58639001\n17697159\n92883907\n14858816\n61341854\n10075189\n18835952\n9659204\n10495229\n35783319\n80978272\n50050794\n42432942\n31904084\n90454677\n69980715\n92658677\n53391222\n44702685\n40392778\n15326073\n19964341\n34421831\n72182455\n83171836\n24305988\n92975734\n87861151\n32822139\n3309134\n65147480\n55101772\n23220268\n90671171\n25068090\n49943954\n51297787\n63023029",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n1\n100000000\n100000000\n74552917\n74379784\n24274651\n100000000\n1\n1\n67133196\n100000000\n100000000\n67624659\n1\n27279420\n696476\n100000000\n99157407\n1\n1\n13503694\n1\n1\n1\n1\n100000000\n1\n100000000\n1\n88277729\n1\n1\n100000000\n100000000\n100000000\n76230795\n95847583\n100000000\n8815042\n86043972\n100000000\n100000000\n44744651\n100000000\n100000000\n1\n29068604\n1\n1\n100000000\n1\n29100358\n1\n100000000\n100000000\n58323664\n88997118\n1\n100000000\n47433830\n100000000\n100000000\n61838597\n100000000\n1\n1\n44491657\n100000000\n69874115\n100000000\n20560705\n1\n100000000\n100000000\n39735888\n4874939\n100000000\n100000000\n100000000\n10260026\n1\n46947046\n100000000\n100000000\n1\n1\n69970429\n87142195\n1\n100000000\n75687160\n100000000\n54234171\n1\n1\n51971421\n56859232\n100000000\n100000000\n16685404",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "1\n72448404",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}