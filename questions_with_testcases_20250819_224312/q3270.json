{
  "problem_code": "problems",
  "title": "Mosque",
  "tags": [],
  "text": "Islam prayer in congregation (jama'ah) is considered to have more social and spiritual benefit than praying by oneself. When praying in congregation, the people stand in straight parallel rows behind the chosen imam, facing Qibla (The Qibla is the direction that should be faced when a Muslim prays). Sometimes some of these rows are cut by poles (n poles divide the row into n+1 parts), and some of the rows do not contain poles (the whole row is just one part). Muslims prefer to stand in the rows which are free of poles, so they may leave one row empty and use the next one if it has fewer poles, but they can’t leave two consecutive rows empty.A mosque is divided into n rows each row may contains one or more poles. Each row free of poles can have m Muslims and every additional pole decreases this number by 2, so if the row contains 2 poles, number of Muslims who can stand in this row is m - 4.In this problem you are required to arrange the Muslims in rows where number of poles cutting these rows is minimized.InputInput contains multiple test cases. Each test case will start with the number of n (0 < n ≤ 100), m (10 ≤ m ≤ 200), and t (0 < t ≤ 20,000), where n is number of rows, m is number of Muslims per row, and t is the total number of people in the mosque, followed by n lines each containing the number of poles in each row. It is guaranteed that the mosque always can fit all the Muslims. Input will be terminated by end of file.OutputFor each test case, print one line containing the minimum number of poles cutting the prayer rows.SampleInput:8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1Output:2\r\n3\r\n5",
  "sample_input": "Input:8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1Output:2\r\n3\r\n5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PCPC12G",
  "scraped_at": "2025-08-17 00:34:27",
  "test_cases": [
    {
      "input": "8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1",
      "expected_output": "2\r\n3\r\n5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3 7\n7\n6\n3\n4\n5\n6\n6\n9\n1 10 5\n7\n2\n4\n10\n3\n2\n10\n6\n6 8 1\n4\n9\n4\n10\n7\n2\n3\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 5\n6\n2\n3\n7\n4\n5\n8\n4\n6 1 10\n4\n10\n10\n6\n9\n5\n7\n6\n7 1 2\n1\n6\n4\n5\n10\n7\n8\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 4 10\n2\n9\n9\n5\n8\n4\n2\n6\n5 5 1\n4\n3\n8\n9\n4\n5\n8\n3\n6 8 7\n6\n1\n9\n10\n3\n4\n10\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "70 2 46\n78\n36\n94\n90\n75\n43\n33\n25\n16 19 83\n69\n56\n66\n24\n30\n49\n13\n74\n20 52 8\n53\n44\n26\n73\n46\n81\n89\n69",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 10 81\n15\n43\n94\n27\n9\n29\n51\n90\n96 59 38\n70\n96\n82\n97\n60\n6\n38\n98\n76 26 33\n17\n36\n97\n81\n94\n4\n69\n15",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 77 38\n92\n88\n28\n78\n46\n79\n67\n8\n81 51 45\n88\n26\n37\n22\n19\n66\n74\n89\n6 65 77\n7\n74\n58\n37\n42\n97\n86\n31",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "45 26 47\n31\n38\n65\n64\n75\n51\n9\n97\n3 55 80\n38\n68\n12\n25\n79\n68\n47\n21\n36 20 60\n17\n31\n28\n57\n20\n19\n56\n64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 43 88\n73\n70\n40\n83\n64\n76\n46\n73\n42 93 76\n78\n25\n34\n29\n37\n91\n13\n33\n50 79 22\n84\n51\n49\n11\n78\n12\n13\n41",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 50 30\n29\n20\n12\n39\n36\n11\n14\n10\n20 39 37\n15\n22\n10\n46\n26\n42\n45\n20\n10 24 33\n33\n24\n33\n26\n7\n49\n20\n22",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "26 42 27\n29\n7\n27\n7\n20\n22\n33\n50\n31 50 36\n40\n37\n42\n48\n37\n13\n43\n28\n41 37 37\n7\n39\n27\n48\n17\n42\n28\n38",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "40 26 12\n50\n19\n31\n49\n38\n13\n44\n23\n32 30 12\n34\n49\n39\n13\n31\n42\n29\n48\n33 22 19\n33\n5\n40\n40\n38\n48\n12\n17",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "24 36 32\n42\n16\n38\n30\n36\n37\n35\n43\n17 29 11\n18\n13\n13\n34\n15\n38\n28\n27\n27 10 9\n12\n6\n26\n7\n39\n22\n15\n32",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 33 32\n44\n38\n47\n35\n37\n5\n9\n28\n5 21 22\n19\n6\n18\n14\n29\n37\n24\n44\n7 9 13\n48\n38\n42\n21\n11\n6\n25\n19",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 8 26\n18\n40\n9\n14\n30\n32\n13\n11\n39 30 43\n48\n24\n26\n45\n27\n39\n16\n8\n15 22 26\n7\n19\n35\n26\n6\n26\n39\n47",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "14 37 22\n48\n41\n48\n5\n37\n39\n36\n25\n25 38 50\n32\n35\n47\n16\n30\n33\n39\n14\n16 25 23\n31\n28\n10\n7\n42\n21\n28\n14",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 99 1\n100\n99\n99\n2\n1\n100\n1\n2\n100 2 99\n1\n99\n100\n99\n2\n1\n2\n1\n2 100 1\n1\n99\n99\n99\n1\n1\n100\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99 1 1\n99\n2\n2\n1\n2\n2\n100\n2\n2 2 99\n1\n1\n1\n100\n2\n2\n1\n99\n100 2 2\n99\n100\n100\n100\n100\n99\n100\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}