{
  "problem_code": "problems",
  "title": "Gao on a tree",
  "tags": [],
  "text": "There's a tree, with each vertex assigned a number. For each query (a, b, c), you are asked whether there is a vertex on the path from a to b, which is assigned number c?InputThere are multiple cases, end by EOF.For each case, the first line contains n (n ≤ 100000) and m (m ≤ 200000), representing the number of vertexes (numbered from 1 to n) and the number of queries.Then n integers follows, representing the number assigned to the i-th vertex.Then n-1 lines, each of which contains a edge of the tree.Then m lines, each of which contains three integers a, b and c (0 ≤ c ≤ n), representing a query.OutputYou should output \"Find\" or \"NotFind\" for every query on one line.Output a blank line AFTER every case.ExampleInput:5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3Output:NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
  "sample_input": "Input:5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3Output:NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOT",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3",
      "expected_output": "NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5\n7 3 4 5 8\n6 3\n8 5\n4 1\n8 6\n4 6 6\n4 7 2\n9 8 10\n8 9 5\n7 3 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n9 10 9 2 5\n3 10\n6 1\n7 4\n6 9\n2 4 3\n8 1 6\n9 6 8\n10 5 8\n6 9 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6\n3 4 4 5 2\n2 6\n1 6\n5 7\n5 1\n1 4 8\n3 5 4\n6 5 2\n1 9 3\n2 1 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 45\n6 13 1 64 40\n80 49\n85 33\n76 53\n35 81\n80 65 64\n79 35 48\n30 54 73\n66 90 57\n5 91 81",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 39\n14 86 91 38 50\n84 2\n65 47\n67 31\n100 32\n35 57 36\n6 54 81\n61 34 61\n72 88 90\n92 67 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "39 3\n29 92 27 4 16\n65 74\n72 74\n69 34\n28 11\n37 29 74\n99 25 8\n97 24 68\n35 3 31\n24 4 12",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "80 59\n69 79 59 10 32\n65 46\n85 1\n14 12\n88 39\n100 11 79\n41 32 57\n80 13 7\n99 75 55\n77 12 79",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 7\n64 45 90 39 63\n47 35\n17 63\n44 48\n93 1\n38 8 40\n94 89 55\n7 78 37\n2 7 56\n59 57 41",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10503 12563\n15205 14643 34737 42619 25648\n38142 40547\n36462 11205\n24335 26776\n41092 21267\n5984 12510 10325\n34689 6660 35088\n30644 9827 21778\n33188 17151 19892\n47327 46688 33674",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "41234 47943\n38954 18072 32332 46420 13086\n27030 26556\n6889 6300\n37781 39459\n14738 28386\n31545 33805 24492\n24533 46652 37509\n46347 12627 16261\n35769 29390 45964\n14462 28865 34759",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "27132 29337\n8593 23630 16258 39543 18970\n33273 16832\n19788 41726\n13146 15477\n43817 29911\n5914 40752 21031\n21143 11576 25008\n29068 19590 49240\n9816 37792 30005\n5856 26108 10002",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "31450 20077\n32158 39809 29348 45665 12907\n21986 43828\n26337 40626\n42681 23921\n41311 12011\n12598 5286 7404\n46811 49829 43180\n30787 30282 45144\n5990 28174 34131\n28450 28916 21194",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "28259 28841\n7785 20638 19401 26012 48921\n41401 16733\n34688 29901\n20916 37551\n45194 43235\n36426 48499 25485\n29120 36068 36123\n31366 5294 34266\n31175 46616 19593\n33569 49059 18551",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "11682 30300\n29231 23532 48840 25446 10681\n8624 14084\n48266 37505\n31245 17227\n37775 28308\n38553 14047 13809\n36851 37511 19898\n5982 36186 46873\n35554 24467 37677\n48384 10594 44421",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "15573 18498\n5915 35329 7149 37516 15532\n7480 19596\n14332 28009\n36903 6672\n48655 41306\n34271 39427 47529\n6752 30200 38807\n33922 38551 35239\n32372 18832 44532\n6855 9984 37815",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 99999\n99999 100000 99999 100000 100000\n2 99999\n99999 99999\n100000 2\n99999 2\n99999 100000 100000\n2 1 1\n2 1 99999\n99999 100000 100000\n99999 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 99999\n99999 1 2 100000 2\n2 1\n2 1\n1 2\n99999 2\n2 100000 1\n99999 2 2\n100000 99999 1\n2 2 99999\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}