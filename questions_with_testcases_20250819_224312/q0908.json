{
  "problem_code": "problems",
  "title": "Raining Parabolas",
  "tags": [],
  "text": "Nowadays you just can't predict what'll fall on your head the next day. Because we don't care about the nature, it is now striking back: it's raining parabolas!The parabolas that are falling are given in form of quadratic functions:f(x) = ax2+ bx + c. The ground can be defined as a line with N blocks, numbered from 0 to N-1, initially having height 0. At some point, a block can have some positive height, but when it exceeds 10006 (we don't actually know why, but measurements have shown it is a weird regularity) it falls back to 0. When a parabola falls on some block, it interacts with its current configuration (the parabolas that have fallen there before it) by summing with it. More precisely, if we are given an interval [x0, x1] in which the next parabola will fall, and the function of our parabola is f(x) (defined above), some block i (x0≤ i ≤ x1), with height hi, the new height of that block becomes (hi+ f(i)) modulo 10007.Today you somehow came in possession of some sort of schedule which defines the order in which the parabolas will fall on the ground. Apart from that, you're interested total heights (sums of heights) of consecutive blocks of ground. When we want to find the total height of some interval [x0, x1], we're looking for thesum of hifor all i(x0≤ i ≤ x1)modulo 10007.Before the first parabola falls, the ground is flat (all heights are 0).InputThe first line of input contains two integers: N and M (1 ≤ N, M ≤ 100000). N specifies the number of blocks on the floor, and M is the number of queries. Each of the next M lines contains a query. As we already said, we have two types of queries of form:0 x0x1a b c (0 ≤ x0≤ x1< N, 0 ≤ a, b, c ≤ 10006,all integers)this type of query just tells you that a parabola has fallen into the interval [x0, x1], and its function is f(x) = ax2+ bx + c1 x0x1(0 ≤ x0≤ x1< N,all integers)this is the type of query you have to answer - output the sum of heights of all the blocks from interval [x0, x1] modulo 10007.OutputFor each query of type 1, output a single line containing the sum of all the heights in the given interval modulo 10007.ExampleInput:10 2\r\n0 0 9 1 0 0\r\n1 0 3Output:14(the sum of the first 4 squares (from 0 to 3) is 14)",
  "sample_input": "Input:10 2\r\n0 0 9 1 0 0\r\n1 0 3Output:14",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RPAR",
  "scraped_at": "2025-08-17 00:33:25",
  "test_cases": [
    {
      "input": "10 2\r\n0 0 9 1 0 0\r\n1 0 3",
      "expected_output": "14",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 9\n9 2 9 2 9 6\n1 9 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 9\n4 4 10 3 5 3\n3 9 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n2 1 9 8 4 3\n2 3 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 32\n3 26 90 57 86 18\n35 36 45",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 42\n59 53 97 44 8 8\n52 29 37",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 46\n58 1 6 54 9 16\n25 85 74",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 54\n34 81 55 71 9 63\n22 47 4",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 61\n86 39 15 2 39 47\n14 92 9",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "125 212\n110 152 455 58 438 104\n478 390 111",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "500 476\n269 152 320 268 296 92\n292 448 86",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "101 384\n497 339 444 122 257 218\n459 350 177",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "115 494\n445 354 403 231 114 204\n60 180 105",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "243 285\n469 248 289 51 344 83\n403 169 238",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "225 390\n183 498 447 433 78 291\n143 406 408",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "155 250\n482 270 500 83 154 200\n288 382 275",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1000 2 1000 1000 2 999\n999 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n999 2 999 1000 999 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}