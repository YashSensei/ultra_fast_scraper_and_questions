{
  "problem_code": "problems",
  "title": "Run, Snipe, Run",
  "tags": [],
  "text": "Kevin, the Snipe, and her children (apparently Kevin is a girl) were reunited, all thanks to Russell and Mr. Fredricksen! Now the two humans have embarked to their next adventure, towards Poland, but Kevin just noticed her children stole Mr. Fredricksen's cane without him realizing. It must be returned before they go too far away!Kevin is not sure where they are now, but knows they went with their flying house somewhere to the northeast, and has narrowed it down to a few points where they might be resting. She will send some of her children to warn them of the missing cane. Each snipe can check multiple places, but since the house should be flying again soon, they can't waste any time and should always move to the north and/or to the east. Additionally, she wants to send the minimum number possible as long as every location on her list is visited.Your job is to help her determine this number.InputInput consists of several test cases.Each test case begins with a single integerN(1 ≤N≤ 1000), the number of places the house can be.Nlines follow, each containing two integers,eiandni, the distance (in miles) to the east and to the north, respectively of theithplace related to Kevin's position. 0 ≤ei,ni≤ 10000.Input is terminated by a line containing a single integer zero.OutputFor each test case output a single integer: the minimum number of snipes needed to reach every place.ExampleInput:51 12 23 34 45 551 52 43 34 25 150 11 11 22 22 30Output:151",
  "sample_input": "Input:51 12 23 34 45 551 52 43 34 25 150 11 11 22 22 30Output:151",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SNIPE",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "51 12 23 34 45 551 52 43 34 25 150 11 11 22 22 30",
      "expected_output": "151",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 6 5 1 3 10 4 3 2 6 10 8 2 9 3 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 10 3 10 8 7 3 4 3 7 8 4 7 3 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 8 1 6 8 7 10 7 5 7 3 1 2 10 8 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "73 72 64 16 72 77 68 21 47 89 10 12 58 55 44 50",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 5 6 8 3 7 6 93 70 69 78 73 9 4 48 12",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 38 83 11 37 14 29 95 9 34 90 13 37 74 78 54",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "4 6 9 1 96 55 21 100 69 41 79 93 61 74 58 34",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 45 15 21 45 48 83 49 38 74 86 19 23 46 90 37",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "466 319 368 138 201 490 240 262 207 104 220 370 497 200 176 319",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "181 471 398 330 256 168 249 100 278 141 426 338 95 443 405 284",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "422 297 423 193 372 78 304 290 317 322 104 326 243 260 335 52",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "76 99 105 59 261 487 499 78 427 483 309 122 57 98 240 178",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "496 152 304 167 92 212 353 388 153 278 369 428 482 91 100 412",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "327 208 285 260 380 389 462 116 157 63 373 108 309 243 219 372",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "82 418 50 418 400 167 219 373 385 67 281 402 478 456 443 146",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 999 1000 2 2 1 1000 1 2 999 2 1000 1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 1 2 999 2 999 1 999 999 1 2 1000 1000 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}