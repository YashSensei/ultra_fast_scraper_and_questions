{
  "problem_code": "problems",
  "title": "Dynamic Graph Connectivity",
  "tags": [],
  "text": "A graph initially consists of N  (1 ≤ N ≤ 100,000) unconnected vertices. The vertices are numbered from 1 to N.Your task is to maintain that graph and answer connectivity queries.All edges in the problem areundirected.You will receive the following queries, where (1 ≤ A, B ≤ N) :addA B : add an edge between  vertices  A and B, where initially there is no edge between A and B.remA B : remove edge between  vertices  A and B, where initially there is an edge between A and B.connA B : printYESif there is a path between A and B andNOotherwise, where A and B are different.InputThe first line of input contains the number of vertices N and the number of queries M (1 ≤ M ≤ 100,000). The following M lines contain queries.OutputFor eachconnquery outputYESorNO. Pay attention to letter case.ExampleInput:4 11add 1 2add 2 3add 3 4add 1 4conn 4 2rem 1 2conn 2 4rem 3 4conn 4 2add 2 4conn 4 2Output:YESYESNOYESThis example will be the first test case.",
  "sample_input": "Input:4 11add 1 2add 2 3add 3 4add 1 4conn 4 2rem 1 2conn 2 4rem 3 4conn 4 2add 2 4conn 4 2Output:YESYESNOYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DYNACON2",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "4 11add 1 2add 2 3add 3 4add 1 4conn 4 2rem 1 2conn 2 4rem 3 4conn 4 2add 2 4conn 4 2",
      "expected_output": "YESYESNOYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 2 3 3 10 10 7 2 8 1 3 4 10 6 3 3 4 8 5 10 10 6 2 7\n3 stze 5 esael 4 ejudg 4 fqz 10 av 8 xknoz 6 ktgd 3 lvnr 10 xrmbr 3 ncq 8 bpky 2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 9 7 6 1 7 3 7 8 4 2 9 3 3 10 10 6 8 2 2 7 8 8 5\n6 ewpfh 8 gkzu 10 alg 6 x 3 k 6 kfv 10 u 9 xkxas 2 ggwwh 7 c 5 q 10 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 9 10 9 5 5 6 5 7 1 2 2 2 9 2 9 2 10 10 2 6 10 10\n10 zcykd 2 l 5 jijqv 10 hd 6 ljeic 10 mxqry 5 chygq 10 g 8 ufip 3 gvkc 5 c 6 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "77 81 71 80 21 37 56 15 5 36 96 26 43 91 69 47 55 74 80 65 67 92 52 45\n25 yf 75 qrwto 41 pw 35 f 56 aw 30 pfqnh 85 sd 51 y 34 hemt 69 cex 22 i 72 27",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 19 60 60 64 22 44 69 9 34 9 2 37 25 43 3 18 36 71 99 31 96 99 20\n62 sg 47 j 80 moypr 5 ueb 41 cnn 4 bdgt 72 vs 94 eazd 70 nmssg 3 l 76 geu 52 30",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "72 83 92 57 53 5 24 60 85 73 94 78 65 51 22 21 27 99 70 76 21 89 84 79\n1 vbkks 98 ygtb 15 rosl 46 ic 12 maga 22 elil 1 m 38 tjjog 22 q 95 ruvy 70 agpm 64 20",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "43 24 20 13 75 89 33 76 12 48 62 42 70 38 10 23 15 27 6 44 80 71 75 91\n96 tdsu 97 tab 12 lo 97 g 87 oyocq 41 u 83 yqxng 14 m 46 bc 40 mv 96 c 68 13",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 100 21 73 25 41 21 19 24 39 85 80 18 46 60 37 59 41 62 37 68 11 43 71\n72 mpcam 48 nr 36 bq 93 zqrky 97 srh 53 am 65 p 67 koe 71 otfu 1 schq 64 twhza 13 73",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "20 41 28 30 32 12 41 12 45 32 49 17 25 13 23 43 9 7 7 41 24 47 34 15\n13 blros 44 cclgg 22 xzr 32 oxfwj 28 zqb 26 eua 21 dqm 49 evpyc 23 sqigl 13 eut 48 v 14 31",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "20 49 29 30 42 33 35 7 32 29 50 39 6 47 33 37 20 45 8 23 22 35 24 11\n11 a 30 vlp 40 kzbtl 12 ffwh 37 syu 17 q 39 mjmst 43 jrg 16 vtm 22 iuod 43 fhv 9 10",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "10 47 30 11 37 12 21 50 37 25 10 42 14 32 17 12 38 48 19 46 22 8 48 28\n41 ltmv 50 wu 44 xeex 41 lajk 13 mz 17 t 5 uqb 12 c 43 yaew 34 lhu 21 k 44 28",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "15 42 21 36 10 13 19 28 9 41 42 12 43 17 21 19 44 27 32 9 5 35 5 7\n39 stgy 37 craag 14 xa 8 fdqgn 22 yfkwa 19 n 32 ox 29 wdq 30 h 36 amxde 25 pkj 13 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "36 14 13 27 17 16 18 13 43 19 45 36 26 48 24 8 33 33 16 6 45 41 29 14\n26 nn 13 n 39 jannl 30 zqy 48 bstcg 48 ec 38 mt 5 e 34 rei 14 fghi 30 a 37 8",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "40 41 48 44 29 20 46 7 48 33 47 7 29 12 19 26 12 36 33 8 25 8 44 26\n49 ijb 34 q 40 hu 17 djdko 35 xzpdu 47 aspx 29 arnd 21 mx 46 xj 7 qvi 49 zywmm 36 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44 12 7 21 23 21 24 27 40 37 21 39 15 24 6 48 37 34 9 20 14 35 49 19\n33 qwy 7 tv 6 t 31 vl 49 u 23 zmovs 48 cdm 13 p 43 bk 41 udg 25 c 23 9",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 jwzmd 100 v 100 kzyp 100 rxga 100 ggyj 100 jn 100 xs 100 tkxy 100 qm 100 g 100 u 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 bqbv 100 slb 100 e 100 lr 100 mslsp 100 qhe 100 xszjf 100 cxh 100 ppcva 100 fn 100 taw 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1 1 99 100 100 1 2 100 99 1 1 1 99 99 100 99 99 1 2 2 2 100\n99 xuho 2 efy 99 aiqy 1 pi 2 ikxn 1 sk 99 xrl 2 hd 2 wgb 1 ua 99 de 100 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 100 100 100 1 99 100 1 99 100 1 99 100 99 100 2 99 2 1 100 99 2 1 100\n100 lvcls 2 hd 99 ra 99 ds 1 uxzgc 100 utu 100 ez 2 ep 2 kyoec 99 kw 1 qjro 100 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}