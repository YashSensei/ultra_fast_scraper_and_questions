{
  "problem_code": "problems",
  "title": "Moo University",
  "tags": [],
  "text": "Moo U's cafeteria has run out of hay and so must order pizzas for\r\nthe C (1 ≤ C ≤ 1,000) calves attending Moo U. Conveniently, a\r\nlarge pizza from the local pizzeria, Pizza Farm, serves exactly one\r\ncalf.Pizza Farm is willing to make a pizza for each calf, but, due to\r\nthe size of the order, has three constraints on the order:Although Pizza Farm has long list of T (1 ≤ T ≤ 30) vegetarian\r\ntoppings, each of the pizzas must have exactly K (1 ≤ K ≤\r\nT) toppingsNo topping on a pizza can be duplicated (a pizza cannot have\r\nonions and onions, for example).No two pizzas in the order can have the same set of toppings.For example, if pizza 1 has onions, green peppers, pineapples,\r\nand wheat grass, then it can be the only pizza with that exact\r\nset of toppings, although pizza 2 might have onions, green\r\npeppers, pineapples, and also olives.For ordering purposes, the toppings are numbered 1..T.The calves at Moo U are very picky when it comes to their pizza\r\ntoppings. Some calves might not like all of the toppings available.\r\nA calf will eat a pizza only she likes every single one of the\r\ntoppings on that pizza. Determine the maximum number of calves\r\nthat can be fed.InputLine 1: Three integers: C, T, and K.Lines 2..C+1: Each line of space-separated integers describes which\r\ntoppings one of the calves likes. The first integer on a line\r\nis the number of topping the calf likes. The remaining\r\nintegers on the line are the toppings that the calf likes.OutputLine 1: A single integer, the maximum number of calves that can be fed.ExampleInput:3 2 1\r\n2 2 1\r\n1 1\r\n1 2Input details:There are three calves. Pizza Farm has two toppings and each pizza\r\nmust have exactly one topping. The first calf likes both of the\r\ntoppings, the second calf likes only the first topping, and the\r\nthird calf likes only the second topping.Output:2Output detailsThere are only two pizzas that can be made: a pizza with topping 1 and a\r\npizza with topping 2. If the first pizza is given to the first\r\ncalf (since she likes topping 1) and the second pizza to the third calf\r\n(since she likes topping 2), two calves will be fed. There is no way to\r\nfeed all three calves.",
  "sample_input": "Input:3 2 1\r\n2 2 1\r\n1 1\r\n1 2",
  "sample_output": "Output:2",
  "link": "https://www.spoj.com/problems/MOOPIZZA",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "3 2 1\r\n2 2 1\r\n1 1\r\n1 2",
      "expected_output": "Output:2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8 3\n6 1 1\n7 10\n7 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 2\n5 9 2\n5 4\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 2\n4 6 6\n2 10\n7 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "52 2 30\n21 16 8\n14 32\n70 1",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 68 87\n15 73 90\n83 5\n70 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 15 57\n41 67 18\n16 57\n95 51",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "45 85 40\n18 84 42\n45 66\n35 83",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "71 30 29\n12 28 32\n67 22\n5 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "382 411 68\n234 146 239\n301 389\n422 489",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "57 70 55\n370 71 380\n457 423\n368 62",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "225 284 288\n228 177 290\n153 151\n312 327",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "323 374 296\n95 242 56\n50 310\n231 362",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "286 56 136\n459 147 349\n211 403\n55 60",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "475 133 186\n366 217 131\n272 186\n238 348",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "197 271 219\n310 267 243\n71 57\n84 412",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 1000\n1 1 1000\n1000 1\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1\n2 1 1\n999 1\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}