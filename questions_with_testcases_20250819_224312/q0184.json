{
  "problem_code": "problems",
  "title": "Hierarchy",
  "tags": [],
  "text": "A group of graduated students decided to establish a company; however, they don't agree on who is going to be whose boss.Generally, one of the students will be themainboss, and each of the other students will have exactly one boss (and that boss, if he is not the main boss, will have a boss of his own too). Every boss will have a strictly greater salary than all of his subordinates - therefore, there are no cycles. Therefore, the hierarchy of the company can be represented as a rootedtree.In order to agree on who is going to be who's boss, they've chosen K most successful students, and each of them has given a statement: I want to be the superior of him, him, and him (they could be successful or unsuccessful). And what does it mean to be a superior? It means to be the boss, or to be one of the boss' superiors (therefore, a superior of a student is not necessary his direct boss).Help this immature company and create a hierarchy that will satisfy all of the successful students' wishes. A solution, not necessary unique, will exist in all of the test data.InputIn the first line of input, read positive integers N (N ≤ 100 000), total number of students, and K (K < N), the number of successful students. All students are numbered 1..N, while the successful ones are numbered 1..K.Then follow K lines. In Athof these lines, first read an integer W (the number of wishes of the student A, 1 ≤ W ≤ 10), and then W integers from the range [1, N] which denote students which student A wants to be superior to.OutputOutput N integers. The Athof these integers should be 0 if student A is the main boss, and else it should represent the boss of the student A.ExampleInput:4 2\r\n1 3\r\n2 3 4Output:2\r\n0\r\n1\r\n2Input:7 4\r\n2 2 3\r\n1 6\r\n1 7\r\n2 1 2Output:4\r\n1\r\n1\r\n0\r\n4\r\n2\r\n3",
  "sample_input": "Input:4 2\r\n1 3\r\n2 3 4Output:2\r\n0\r\n1\r\n2",
  "sample_output": "Input:7 4\r\n2 2 3\r\n1 6\r\n1 7\r\n2 1 2Output:4\r\n1\r\n1\r\n0\r\n4\r\n2\r\n3",
  "link": "https://www.spoj.com/problems/MAKETREE",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "4 2\r\n1 3\r\n2 3 4",
      "expected_output": "2\r\n0\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4\r\n2 2 3\r\n1 6\r\n1 7\r\n2 1 2",
      "expected_output": "4\r\n1\r\n1\r\n0\r\n4\r\n2\r\n3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 8\n6 9\n2 1 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n10 5\n10 10 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 1\n10 1\n3 8 6",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "32 65\n59 53\n32 29 43",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "10 5\n43 43\n48 43 71",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 71\n78 56\n44 91 97",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 81\n9 60\n20 52 46",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "77 24\n16 37\n52 74 13",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "17541 14508\n30047 35336\n41856 36049 10703",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7621 45707\n6978 49483\n48232 13397 11300",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "19420 12960\n13460 10967\n39516 27336 41350",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47660 21302\n19810 13276\n48265 38148 20132",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34206 16007\n46815 49858\n25516 13362 22769",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "39353 34622\n10884 15049\n29704 34087 20521",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "22437 38296\n47703 34753\n6069 31918 16351",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 99999\n2 2\n2 100000 99999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}