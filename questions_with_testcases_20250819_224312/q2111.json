{
  "problem_code": "problems",
  "title": "Party Night",
  "tags": [],
  "text": "Today is the town’s celebration day, on which tradition dictates that all townspeople go partying. Each of them should attend a party at one of the pubs, and dance and drink to the point of intoxication. Later on, once all the parties have come to an end, after-parties start being thrown at other pubs, and every villager then goes to one. In order for the villagers to make as many acquaintances as possible, no two of them attend the same two parties.Needless to say, such practice causes everyone to have a severe blackout regarding the events of the night, but people are still curious to know what happened. Unfortunately, all they seem to be able to remember is who coincided with them at some point, but they have serious trouble identifying when or where. And as their memory of even this piece of information may be shaky (to say the least), they need help in figuring out whether all their recollections are consistent or if, on the contrary, some of the townspeople must have made a mistake (either by failing to remember someone else who was there, or by incorrectly thinking they met someone they didn’t). Can you help them?For example, in a town of 4 people, if we are told that villagers 0, 1 and 2 all met one another, and villagers 2 and 3 met as well, the data is consistent because there might have been partiesP0 andP1, and after-partiesA0,A1 andA2, such that person 0 went toP0 andA0, person 1 toP0 andA1, person 2 toP0 andA2, and person 3 toP1 andA2; this arrangement satisfies all required conditions. However, if persons 0 and 3 claimed to have met too, the data would become inconsistent.InputThe input file will contain several test cases. Each of them begins with a line containing two integers: 1 ≤n≤ 100, the number of villagers; and 0 ≤m≤ 1000.mlines follow, each containing a pair of integersiandj, 0 ≤i,j<n,i≠j, meaning that persons numberediandjremember having been together in a pub. No pair of people will appear twice.Different test cases will be separated by a blank line. A line withn=m= 0 signals the end of the input.OutputFor each test case, print “YES” if there is a configuration of parties, after-parties, and villagers attending them under the conditions described, such that the pairs of people who met each other are exactly those in the input data. Print “NO” otherwise.SampleInput4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYESProblem setter: David García Soriano",
  "sample_input": "Input4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRTYNGHT",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "Input4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYES",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\nncbw 9\n9 8\n3 4\n8 3\n5 5\n3 6\n1 1\n9 2\n1 6\n5 9\n2 6\n8 7\n5 3\n7 8\n6 2\n2 10\n1 3\n2 3\n5 8\n2 4\n2 3\n2 10\n1 10\n4\nvv\ndrz\nv",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\nohnmkk 9\n6 8\n10 6\n9 7\n1 4\n9 5\n7 10\n5 3\n10 5\n3 6\n9 1\n3 9\n2 10\n9 1\n2 4\n5 2\n4 2\n2 5\n6 7\n1 5\n8 2\n4 5\n4 3\n8\nienrymizwyjmmxffern\naydi\nxyrtsl",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 1\nqzd 5\n10 3\n9 7\n9 5\n6 4\n8 5\n1 3\n10 6\n2 9\n8 2\n3 8\n6 4\n8 2\n7 2\n3 10\n10 9\n5 10\n2 7\n7 4\n1 8\n8 4\n5 6\n10 7\n3\nvoe\nvor\nas",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 93\nit 75\n1 22\n79 77\n99 73\n87 90\n70 95\n21 70\n86 97\n50 46\n28 51\n25 2\n19 72\n79 20\n10 90\n42 10\n36 54\n17 76\n7 44\n7 96\n25 82\n10 78\n35 12\n5 93\n63\nbpojocyo\njlnc\ntcm",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 7\nt 52\n68 13\n16 4\n86 6\n53 34\n61 80\n15 29\n86 91\n86 60\n80 86\n3 86\n50 7\n70 95\n75 89\n71 16\n59 3\n9 65\n5 16\n17 86\n29 79\n85 80\n42 31\n40 20\n67\ndeli\ngg\nzhqm",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 50\ni 20\n11 9\n31 50\n46 55\n98 92\n62 34\n19 4\n3 32\n93 60\n27 66\n33 89\n32 48\n100 54\n18 46\n50 6\n68 93\n43 16\n21 86\n10 69\n25 37\n11 33\n60 47\n86 37\n37\no\nxla\niltmgb",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "44 1\nwlyta 55\n4 26\n65 22\n70 7\n71 80\n71 18\n69 70\n87 81\n42 79\n51 63\n36 5\n95 100\n7 47\n44 28\n43 18\n51 31\n36 67\n81 22\n11 42\n10 27\n13 13\n9 57\n70 46\n69\nsbpls\nhf\nrefq",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 23\nh 84\n22 19\n3 24\n52 94\n75 97\n11 33\n82 9\n64 85\n22 27\n38 90\n69 17\n56 74\n79 68\n35 64\n56 43\n42 39\n74 11\n96 29\n5 87\n86 13\n14 64\n2 59\n59 61\n50\negrtdrmv\neofq\nyzkn",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "33 6\nf 10\n20 5\n34 24\n17 32\n36 18\n19 17\n46 18\n44 13\n17 17\n13 35\n7 43\n11 15\n40 40\n29 48\n49 29\n42 13\n22 30\n26 7\n21 31\n40 20\n13 33\n39 20\n25 46\n24\ningbcnppqjaxxiazf\nzto\nwdbn",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "16 38\nn 35\n5 11\n15 25\n33 39\n33 28\n43 8\n27 8\n46 26\n13 41\n16 34\n44 48\n19 35\n13 17\n16 36\n31 18\n13 13\n15 47\n31 38\n50 36\n38 13\n35 14\n12 25\n49 10\n25\npsxxpwvdvznctj\nmn\ngsq",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "26 11\nfomqmw 39\n42 19\n15 8\n37 28\n47 21\n22 43\n7 31\n21 32\n17 23\n23 28\n22 49\n23 26\n35 26\n47 21\n18 46\n35 8\n40 43\n15 5\n47 7\n9 33\n8 26\n37 41\n16 45\n49\nafw\neqyo\nqwrj",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "33 22\nvgz 5\n10 11\n21 30\n16 48\n17 6\n17 19\n44 40\n50 27\n41 39\n32 43\n21 43\n34 16\n11 32\n23 8\n24 44\n18 16\n35 27\n50 11\n48 31\n13 46\n6 26\n43 18\n27 47\n48\nelopktohtqxmdb\nvnf\nsjxk",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "40 29\nhgq 48\n44 50\n14 8\n43 8\n42 12\n34 28\n46 15\n20 40\n28 40\n37 35\n22 49\n14 48\n43 17\n27 47\n50 16\n23 7\n42 37\n36 12\n25 35\n37 47\n31 31\n44 6\n36 50\n15\nqescwvlmf\ner\nyjjb",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "22 5\ni 23\n32 34\n20 29\n7 36\n34 29\n48 13\n30 8\n14 49\n9 20\n25 19\n6 16\n40 43\n7 27\n17 12\n46 49\n15 38\n37 26\n31 17\n28 16\n43 26\n42 32\n39 25\n35 37\n43\nuctpfvomrnbtbnvnvfi\njs\nj",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 24\nw 6\n17 5\n43 30\n32 7\n9 28\n30 30\n12 17\n8 27\n17 33\n9 9\n40 35\n13 46\n13 22\n42 49\n46 18\n7 25\n6 33\n41 26\n17 15\n38 29\n36 28\n49 37\n50 34\n36\nmnqgboywumpipom\nse\ncg",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\nmogksg 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100\np\nmfxd\nhrwnv",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\nvliun 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100\nhaohsgjesgmujv\nhu\nxyvtj",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 1\nlbgfv 100\n1 99\n1 99\n99 99\n2 100\n100 99\n99 99\n100 99\n2 2\n2 100\n99 1\n2 1\n1 99\n2 2\n99 1\n1 1\n2 1\n100 1\n1 99\n99 2\n1 2\n99 100\n100 1\n99\nhkgfmjhtizzdzm\nei\nxqetm",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\nntpuu 99\n100 1\n99 99\n1 99\n100 99\n99 2\n100 1\n99 1\n100 2\n99 2\n100 1\n100 2\n99 100\n99 100\n2 1\n99 2\n2 99\n99 2\n1 1\n100 1\n100 2\n99 2\n2 1\n99\nqshxejfgo\nzkk\ne",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}