{
  "problem_code": "problems",
  "title": "Periodic function, trip 1",
  "tags": [],
  "text": "xkcd/26Let us consider periodic functions fromZtoR.deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...For example,fis a 3-periodic function, withf(0) =f(3) =f(6) =f(9) = 4. \r\nWith a simplified notation we will denote f as [4, -6, 7].\r\n\r\nFor two periodic functions (with integral period), here the quotient of periods will be rational, in that case it can be shown that the sum of the functions is also a periodic function.\r\nThus, the set of all such functions is a vector space overR.Our interest, in this problem, will be the dimension of this space when the period is bounded by some integerN.InputThe first line contains an integerT, the number of test cases.\r\nOn the nextTlines, you will be given an integerN.\r\nConsider the family of alln-periodic functions fornin [1..N].\r\n There are some links between some functions.\r\nFor example: [2, 0] = [2, 0, 1, 0] + [0, 0, 1, 0], with simplified notations.OutputPrint the rank of this family ; ie the size of the largest collection ofR-linearly\r\n\tindependent elements of this family.ExampleInput:3\r\n2\r\n3\r\n4Output:2\r\n4\r\n6Constraints0 < T < 10^2\r\n0 < N < 10^8There's two input files, one easy (mostly small input), and a hard one (uniform random input).\r\nMy PY3.4 code get AC in 0.02+0.55=0.57s. This code isn't optimized. (edited 2017-02-11, after compiler changes)\r\nI suspect there are several competitive approaches for this task. \r\nHave fun ;-)",
  "sample_input": "deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...",
  "sample_output": "Input:3\r\n2\r\n3\r\n4Output:2\r\n4\r\n6",
  "link": "https://www.spoj.com/problems/PERIOD1",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n2\r\n3\r\n4",
      "expected_output": "2\r\n4\r\n6",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "9 7 4 6 10 4 6 3 5 5 1 2 6 3 2 1 10 2 10\nnrswhddxbqbhplhedc fx uei wgop ot xdi hx fkekx pmdll abmi p yhnud muof leh e qn ebhha msupu wtf r",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 10 5 2 2 10 8 8 5 5 8 9 8 9 4 9 9 7\nvqrgrlnbixrtnhrflemvuwpjn nxwe jzxkb pwkliiq q ows v lzw s f y dwc r r r fljn xmym iqgp jhv lnevr",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 5 5 2 3 5 7 3 7 2 10 9 9 10 3 8 8 7\nyjw k czfv jqbf wcyl zfrr lmfvc di d fh fdoep xmnst ald ylagv zwxal xkd o vgxv z xbgh",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "8 5 10 5 2 2 10 5 5 9 1 5 5 9 2 4 3 7 1\na p jc nuhbyz jsde sma a trpe jzxfj ti yp ug i qlecz qb o hdjc hx qd kkn",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 2 9 7 4 3 10 5 8 4 10 3 8 8 6 7 3 5 6\nqhnmlicadxmefnx m dln uwudoxlepmd afbyj yf otie u k xoyjs mm t qs xezoo lct vw vn bljxm dzco y",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 3 6 8 10 6 2 10 3 1 9 1 6 10 7 4 7 10 6\njjcmgmrpdxzdspnszwqpdhbl lr b lpqmrsjgts y v dnupq sqa mdsiq b pnz jqmi jaaz d vwx hrafi vbk gkph nhpe dqsbg",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 6 5 3 2 6 10 2 7 4 2 4 10 1 4 10 1 8 10\nttesqywdiboepkkohizeglu k b bgbholslcn ilv rjwq gx qaj u xuojk idald p e lhmjq viwrh m t tgymy orjb oriu",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 6 2 8 6 5 7 10 6 10 5 7 7 9 5 1 9 6 1\nklvkvkmxpuo osmo stj pywidos kado o tajrd zkbqm svlpc ab cd s wxw v bssig u en u tdi t",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1 1 3 3 5 2 5 4 1 2 2 4 4 5 5 2 2 1\nqnfkcufawrljaujgixzjtbvfjd hcfs dbaqgu ajdd ihpm qmabe nhnj pwsp lmas xdqr au ozpgr t od sm bttij j sk xs exl",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 4 5 3 3 5 1 5 5 3 5 5 1 4 1 2 4 1\nimdpsjjxxf ek pjayw dcd yxbun bn tkl yik b ypxy cof zw ayohw kr m w kwovd pfe sdflt jbxw",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4 4 1 1 4 3 3 1 5 4 3 5 3 4 4 5 1 5 3\nkurbqpcvkretxhypqwpk fgye kr ucjcciendt a lvl fl h lt eadlw z bzwvz cwg ofp eycuw li s swxsy uqiue iauf",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 1 5 3 3 3 5 2 2 1 2 5 1 3 5 2 5 5\nfkinzawgtolrcrxypacoa kcpbt ydlk v zfkgh a auvij swa ez dq fex d iioti wkd bxlcj lxd ivcpb rv kwsal htpl",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2 5 2 3 4 2 2 3 5 4 3 1 1 2 3 1 3 2 3\ngfcaquepq gwcy m ksrfd pm wvrw lh xs c lffo utacb r ofhr qfr ebyp fdi t uj chxv hg",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 5 1 5 1 5 4 5 2 1 1 4 1 1 2 3 2 1\nczpg g s ftmeiznd eow czgab ln ktkq smhe mdahn uwf c gnj gkisy jg u n zm kv um",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1 4 2 4 5 5 3 2 2 4 1 2 5 2 1 3 5 4 3\nybastepxqbdqsxmplgbgmysyyt j asfl zyslbknfjs vijpy q zatoz whc lly dda p ed auchn zamkq y um iyjd sdj bwkf be",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\ngxtdpjysnxeeumgeatocvcsp j zoit fdba gtzhe z vnl l vpoc lp elc a pnkcv zk gmtll hzr n ct xpvsr bw",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\nrpzfpayrzzozmjmjbgfrxqvtsghw t oye lojmfyzr tkqf qvbyi fmx w n aq sfd anbcw qk n xk qh qc p do n",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 1 2 9 9 1 2 10 1 2 1 1 10 2 10 9 9 10\nnefpf szmri o sfvhczx nk iqr mms cijj qjim jqe llpb owju qtjql tam fw n eac kdm yio usw",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}