{
  "problem_code": "problems",
  "title": "Walking Robot",
  "tags": [],
  "text": "Leonard is a student of robotics, and his teacher, Dr. Cooper, asked his class to build a robot to interact with the environment and change its behavior upon certain events. The environment, behavior changes and the events are up to the student, so Leonard decided to make a robot that walks in a grid with a set of movements. There are downloading spots in the grid in which the robot can learn new movements. The task of the robot is to go from one point of the grid to another in as fewest steps as possible.The grid is composed of M rows and N columns of squares. The bottom-left square is position (0,0) and the top-right square is position (N-1,M-1). A movement is defined as a tuple (X,Y). Where X denotes the movement on the x axis and Y on the y axis. A movement is considered as 1 step. The robot can not make a movement that will end outside the boundaries of the grid.There are K possible movements for the robot to learn. The robot stars with T movements on its memory. If the robot is in a downloading spot, he can choose to learn the movement available at that spot, this takes 1 step. The robot can not learn new movements while he is moving. The robot starts at position (0,0) and should move to position (N-1,M-1).InputThe first line has four integers M, N (2 <= M,N <= 15), K (1 <= K <= 12) and T (0 <= T <= K). After this line there will be K lines. The Kth line contains two integers (X,Y) (-10 <= X,Y <= 10) which describe the Kth movement. Movements are indexed from 1 to K inclusive. Afterwards there will be a line with T numbers separated by spaces, which describe the movements that are initially known by the robot. Then there is the description of the grid: there will be M lines with N integers each. 0 indicates a free square, a positive number means there is a downloading spot for the movement with that number index. The numbers of the grid will always be between 0 and K inclusive. The last case is followed by a line containing four zeros. This case should not be processed.OutputFor each test case print a single line with \"Case #X: S\" where X is the number of the test case (starting from 1) and S is the lowest number of steps to achieve the destination. If it is not possible for the robot to achieve the destination, print -1 instead of the number of steps.ExampleInput:4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0Output:Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
  "sample_input": "Input:4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0Output:Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WALKROBO",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0",
      "expected_output": "Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7 5 3 10 3 10 7 4 10 4 7 6 5 1 10 6 8 5 9 7 8 10 7 3 2 3 6 9 10 7 6 8 5 9 3 3 2 6 3 6 3 8 9 6 9 3 6 10 3 4 8 9 5 4 10 6 5 2 10 7 10 3 7 10 9 5 3 10 9 4 5 10 5 7 9 4 4 9 2 10 1 6 4 4 8 6 6 10 7 7 1 6 3 7 6 3 8 4 10 9 1 9 1 5 8 1 10 3 6 1 9 5 1 4 1 1 3 10 8 6 8 5 5 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 6 2 8 6 10 5 3 10 3 5 6 7 8 7 5 2 1 5 1 10 2 3 9 9 1 5 1 1 3 2 2 4 6 5 5 6 7 6 7 2 2 9 4 8 7 10 1 5 1 2 7 8 5 2 3 7 5 7 5 1 9 10 5 3 1 8 9 1 2 4 1 5 9 6 2 2 10 9 3 9 3 2 9 3 8 2 5 1 2 3 6 5 8 5 8 10 6 5 7 1 4 7 1 8 9 7 3 8 5 2 6 7 4 1 10 9 4 4 3 4 10 5 9 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3 4 9 5 10 4 8 10 5 10 1 3 5 7 8 1 5 1 2 10 9 6 1 8 8 8 4 9 7 8 2 1 5 9 3 4 1 7 9 7 8 1 1 7 4 6 10 7 9 4 5 6 3 6 1 3 2 5 1 4 2 2 7 2 10 9 3 5 10 3 1 10 5 5 1 9 9 1 3 3 10 4 9 10 6 6 1 1 9 1 2 7 5 3 3 6 6 10 3 5 10 4 6 8 10 7 6 7 3 6 9 6 5 7 1 8 6 3 9 1 4 1 8 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "90 12 55 26 41 63 24 41 58 19 26 100 13 1 73 17 22 77 77 17 35 81 100 18 79 99 92 95 9 14 73 82 10 97 67 22 5 37 88 88 74 71 56 58 83 26 21 89 54 88 17 16 81 53 33 61 74 29 22 52 61 63 26 7 16 64 79 45 60 56 47 79 66 57 35 93 90 88 64 34 8 92 54 98 5 96 82 68 82 13 10 24 86 62 82 73 89 62 8 96 72 53 68 24 21 76 76 5 83 69 100 85 76 62 98 52 2 31 6 71 8 69 32 14 24",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 55 79 43 72 36 87 82 92 23 29 52 82 27 89 23 30 24 64 65 63 84 86 3 74 83 22 29 76 45 50 6 38 93 3 51 49 57 90 66 20 61 85 8 56 52 51 31 98 40 40 32 92 34 21 3 65 88 40 12 14 94 80 7 78 76 74 87 66 99 16 36 12 26 94 9 85 23 35 84 42 10 18 2 82 45 83 13 78 23 5 66 88 69 12 85 88 93 68 44 16 31 40 68 36 91 36 23 63 67 61 67 66 25 61 83 76 87 9 15 98 87 60 36 78",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "51 87 58 89 96 86 88 82 80 18 98 78 75 8 18 93 48 53 71 58 47 63 95 6 83 66 92 16 58 11 63 16 12 60 98 55 66 66 51 56 95 32 66 100 13 77 64 41 25 80 53 6 67 20 75 21 67 75 87 37 40 21 75 97 26 91 2 99 49 42 54 47 14 75 21 2 76 86 75 50 28 46 97 75 60 39 100 74 100 73 80 12 94 23 34 79 93 94 57 9 46 30 35 87 23 46 24 48 28 46 14 14 62 47 75 4 35 14 65 47 54 50 95 6 74",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "43 10 93 64 75 59 41 46 65 79 66 5 77 55 74 62 26 69 91 40 43 58 48 82 35 65 12 54 32 54 23 77 80 30 11 44 6 38 43 76 65 28 97 93 52 22 50 90 80 88 87 100 40 60 96 11 47 86 27 26 30 56 99 49 47 52 38 62 67 62 15 73 37 43 23 85 50 2 76 50 4 32 88 11 19 2 9 40 19 73 59 39 83 49 86 96 49 61 20 48 56 61 33 44 4 88 40 30 60 9 97 3 99 25 55 55 49 89 40 86 79 80 68 46 38",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "82 14 30 46 100 18 54 73 88 96 18 44 64 50 85 19 51 63 67 92 42 28 9 49 31 28 91 92 59 100 68 75 9 65 36 96 51 10 19 90 49 94 15 25 95 1 1 47 13 81 1 70 29 84 39 58 74 57 18 78 8 63 39 6 93 58 7 57 95 79 98 47 68 32 43 4 48 23 46 74 69 64 71 55 99 66 93 72 26 15 48 2 100 71 15 53 21 54 13 10 15 66 85 67 93 61 44 14 60 47 40 13 16 26 15 51 14 71 57 64 28 99 11 74 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "486 356 283 120 61 201 410 75 204 383 357 228 135 461 379 441 320 139 415 317 87 283 112 54 490 114 466 410 406 91 348 60 349 322 267 50 495 441 347 88 375 63 324 336 402 350 85 116 493 196 342 116 106 454 473 396 456 189 346 84 88 479 405 222 432 215 232 116 76 398 266 377 212 333 175 193 118 140 415 312 323 198 455 77 128 429 170 50 455 83 331 366 479 263 61 89 466 99 437 375 286 402 309 218 251 318 189 191 316 156 164 69 98 223 446 499 105 433 166 210 341 254 109 142 240",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "62 149 342 129 199 437 133 360 287 393 323 366 333 107 60 371 280 330 113 396 243 200 383 443 91 86 179 353 441 384 277 469 110 183 275 363 258 194 96 235 209 183 224 402 74 170 117 217 71 255 155 260 102 244 333 299 419 356 182 74 494 175 135 474 110 326 99 218 115 405 285 442 240 401 477 357 321 354 213 139 345 438 232 205 160 274 256 483 60 202 363 265 61 370 390 71 84 292 262 465 288 180 147 122 130 267 394 88 373 239 487 409 377 399 107 466 233 296 193 149 342 220 63 419 277",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "86 184 363 156 171 414 301 147 78 230 334 413 251 150 497 499 105 314 52 111 272 210 416 369 111 450 496 67 78 491 152 367 455 155 136 300 200 128 484 466 98 463 448 69 163 255 370 333 144 224 254 178 447 121 334 266 126 466 150 430 157 421 378 95 140 423 424 185 376 69 414 51 366 330 190 432 82 219 370 314 266 433 58 196 67 85 374 486 459 434 161 485 336 473 432 423 92 244 102 91 195 193 470 386 319 132 57 107 222 101 244 312 171 178 377 136 248 197 222 70 106 89 409 281 398",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "94 130 175 411 156 275 102 358 62 205 337 114 109 492 127 267 357 367 423 342 266 497 360 491 188 179 202 212 140 303 166 96 114 133 108 123 492 475 452 319 437 337 184 116 467 106 190 205 403 293 224 381 128 484 334 448 196 423 222 95 59 394 358 51 370 110 112 179 167 213 322 304 418 195 258 350 494 302 483 457 294 408 337 240 200 332 351 337 337 320 82 62 207 288 198 65 305 291 367 143 467 225 99 122 292 127 318 174 314 150 244 382 193 85 98 318 140 152 251 86 406 247 310 421 456",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "320 59 218 405 132 453 77 494 447 62 239 472 88 99 265 166 309 439 212 324 395 213 95 179 66 268 459 82 352 237 312 296 400 114 277 203 328 255 96 299 54 61 343 77 139 202 417 240 251 456 349 113 230 474 223 480 266 262 177 436 469 108 174 390 229 210 426 364 492 302 257 323 497 325 463 393 231 134 356 352 87 485 440 343 452 135 119 379 112 210 103 177 59 310 252 351 384 60 227 95 353 182 212 159 313 136 381 448 188 486 227 60 397 448 275 383 146 194 205 458 92 254 145 187 52",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "467 458 284 94 155 473 257 182 466 100 244 356 185 300 439 158 246 328 262 211 474 149 302 66 146 471 463 395 169 278 422 243 245 318 287 313 334 296 141 410 207 108 86 344 80 56 226 134 99 382 221 69 269 226 238 367 308 377 217 431 465 175 467 73 115 69 396 169 113 364 337 249 226 196 168 439 66 336 147 332 248 95 341 255 265 160 213 269 202 407 473 293 425 106 143 284 181 380 389 463 346 416 358 67 52 495 216 90 487 206 261 445 464 462 308 159 316 321 496 105 190 385 227 448 124",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "321 348 335 188 487 356 144 172 217 166 167 371 232 312 336 434 453 234 464 277 398 157 316 64 114 65 440 256 54 258 308 112 288 273 299 376 360 341 470 246 418 457 455 325 415 492 394 121 419 363 384 317 352 198 420 286 72 276 433 244 428 111 399 395 344 341 252 372 441 59 90 205 308 145 58 185 417 303 308 57 485 489 169 457 331 98 192 214 233 272 440 228 304 432 481 485 142 328 413 64 342 430 489 156 348 245 124 352 228 112 114 56 264 118 478 126 390 446 487 472 258 315 377 244 348",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 1 1000 1000 1 1000 1000 1000 2 2 2 2 999 999 1 999 1000 2 1 2 1000 1 999 1000 1000 1000 1000 999 1000 2 2 1 1000 1000 2 1 1000 999 2 999 2 1000 999 1000 2 1000 2 1000 2 1 1 999 2 1 1 1000 999 1000 1000 1 1 1000 1000 2 999 999 2 1 1 1000 999 1 999 999 999 1000 1 1 2 1000 1 999 1000 2 999 999 2 1 1000 2 1 999 2 2 2 999 2 999 1000 1 1000 1000 999 1 2 999 999 1 1000 2 2 1000 1000 1000 2 1000 1000 1000 1000 1 999 1 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 999 999 999 2 1 1 1000 999 2 1000 2 1 2 1000 2 999 1 1000 999 1 999 1 1 1000 2 1000 1000 999 1000 999 2 1000 2 1 999 999 2 999 2 1 1 999 2 2 1000 999 2 999 1 1000 1000 1 1 999 2 2 1 1 1 2 2 2 2 1000 1 2 2 999 2 999 1000 1000 1000 2 2 2 2 1000 2 1 1000 1000 1000 1000 1000 2 999 2 999 1 1 1000 1000 2 999 1 1000 999 1 999 999 1 1000 999 999 2 2 2 999 1000 999 1 1000 999 1000 999 999 1 2 1 1 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}