{
  "problem_code": "problems",
  "title": "Fractions on Tree ( reloaded !)",
  "tags": [],
  "text": "A fraction tree is an infinite binary tree defined as follows:Every node of tree contains a fraction.Root of tree contains the fraction 1/1.Any node with fraction i/j has two children: left child with fraction i / (i + j) and right child with fraction (i + j) / j.For example, fraction tree up to 3 levels is as shown:We number the nodes according to increasing levels (root is at level 1) and at any same level, nodes are numbered from left to right. So first node holds the fraction 1/1, second one holds 1/2, third one holds 2/1 fourth one holds 1/3 and so on.Your task is simple, as always! Given two numbers a and b, you are to find the product of fractions at all those nodes whose number is between a and b both inclusive.InputEvery line of the input contains two numbers a and b separated by a space. You are to find the product of all fractions which are at node having number between a and b both inclusive. Input file terminates with a 0 0 which is not to be processed.OutputFor each input, print numerator and denominator of the lowest form of the fraction separated by a /. Output of each case to be on separate lines.ExampleInput:1 1\r\n1 2\r\n2 4\r\n0 0Output:1/1\r\n1/2\r\n1/3Constraints1 ≤ T ≤ 300001 ≤ a ≤ b ≤ 1010",
  "sample_input": "Input:1 1\r\n1 2\r\n2 4\r\n0 0Output:1/1\r\n1/2\r\n1/3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NG1FRCTN",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "1 1\r\n1 2\r\n2 4\r\n0 0",
      "expected_output": "1/1\r\n1/2\r\n1/3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10\n9 5\n2 4\n5 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\n2 4\n2 7\n6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 7\n1 2\n10 6\n2 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 18\n4 78\n80 28\n66 98",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 26\n45 7\n73 20\n96 41",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "93 69\n29 30\n46 38\n7 81",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 89\n33 53\n28 1\n66 89",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 38\n86 50\n99 55\n49 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "341 346\n104 277\n498 287\n109 301",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "416 350\n429 477\n202 54\n391 310",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "151 413\n460 499\n134 106\n452 453",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "188 277\n272 433\n177 495\n227 259",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "288 487\n421 261\n273 137\n212 190",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "395 402\n97 335\n139 473\n228 150",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "113 171\n117 472\n289 422\n486 168",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n1 1\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999\n999 2\n999 1000\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}