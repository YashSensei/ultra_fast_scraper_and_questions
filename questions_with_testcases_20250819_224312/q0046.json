{
  "problem_code": "problems",
  "title": "Split Windows",
  "tags": [],
  "text": "The Dotty Software Company makes software that is displayed on inexpensive\r\ntext based terminals.  One application for this system has a main\r\nwindow that can be subdivided into further subwindows.\r\nYour task is to take a description of the screen layout after a sequence\r\nof window splits and draw the minimum sized window grid that is consistent with\r\nthe description.In this problem we will concentrate on the boundaries of windows, so all\r\nthe characters inside of windows will be left blank.  Each window\r\nthat is not further subdivided has a label.  Each label is a distinct\r\nuppercase letter.  For a text terminal the boundaries of windows must\r\nbe drawn with characters, chosen as follows:  A capital letter label\r\nis placed in the upper left-hand corner of each undivided window.Asterisks,'*', appear in corners of windows where there is not a\r\nlabel. Dashes, '-', appear on upper and lower boundaries where\r\nthere are not corners.  Vertical bars, '|', appear on side\r\nboundaries where there are not corners.For example, the sequence of splits below would generate Window 1:\r\nInitially there could be an application window labeledM, that is\r\nsplit next into left and right subwindows, adding labelR, and\r\nthe left subwindow is split into top and bottom subwindows, adding the\r\nlabelC.For each pattern of splits there is a binary tree of characters that can\r\ndescribe it.  The window splitting and tree structures are described\r\ntogether, building up from the simplest cases.A window may be an undivided rectangle.  Such a window has a capital\r\nletter as label.  The tree for the window contains just the label.A window may either be split into left and right subwindows or into top\r\nand bottom subwindows, and the corresponding trees have as root the boundary\r\ncharacter for the split: a vertical line '|' or a horizontal dash '-' respectively.\r\nThe root has left and right subtrees corresponding to the top and bottom\r\nor left and right subwindows respectively.Tree 1, above, and Trees 2-4, below, would be consistent with\r\nWindows 1-4.  Note that Tree 4 contains Trees 2 and 3.The trees may be more succinctly expressed via a preorder traversal:The preorder traversal of a tree with just one node (containing a letter)\r\nis that letter.The preorder traversal of a tree with a left and a right subtree is the\r\ncharacter from the root of the tree ('-' or '|') followed by the preorder\r\ntraversal of the left subtree, and then the preorder traversal of the right\r\nsubtree.The preorder traversals for Trees 1 through 4 are|-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RSTEach undivided window must have space for at least one character inside.\r\nHence each tree of splits will be associated with a minimum window size.\r\nWindows 1-4 are minimum sized windows for Trees 1-4.  Each window\r\nillustrates the fact that even in a minimum sized window, not all undivided\r\nwindows contain only one character.Consider Tree 4 and Window 4. The main window is split into a left window with Tree 2 and right\r\nwindow with Tree 3. The left window is like Window 2, but the right window\r\nis not just like Window 3.  The heights of left and right subwindows\r\nmust match, so the right window must be stretched.The stretching rule depends on a definition of the size of windows.\r\nFor dimension calculations it is easiest to imagine that a window contains\r\nits interior and a half character wide boundary on all sides, so the total\r\ndimensions of a window are one more than the dimensions of the interior.\r\nHence the minimum dimensions of a window are 2 by 2, since a window must\r\ncontain one character inside, and we add one for the boundary.  This\r\ndefinition also means that the sum of the widths of left and right subwindows\r\nis the width of their enclosing window.  The sum of the heights of\r\ntop and bottom subwindows is the height of their enclosing window.The right window in Window 4 must be stretched to match the height 10\r\nof the left window.  The right window is split into a top with treePhaving minimum height 2 and a bottom with tree-|Q|RSThaving minimum height 4.  The rule for the dimensions in the stretched\r\nwindow is that the heights of the subwindows expand in proportion to their\r\nminimum heights, if possible.  Some symbols may help here:  LetD= 10 be the height of the combined stretched window.  We want to\r\ndetermineD1andD2, the stretched heights\r\nof the top and bottom subwindow.\r\n\r\nCall the corresponding minimum dimensionsd= 6,d1= 2,\r\nandd2= 4.\r\nIf the window were expanded from a total heightdtoDin proportion, we would haveD1=d1*(D/d) = 2*(10/6) = 3.333...andD2=d2*(D/d)\r\n= 6.666....   Since the results are not integers we increaseD1to 4 and decreaseD2to 6.There is a similar calculation for the bottom window with tree-|Q|RST.\r\nIt is further subdivided into a top with tree|Q|RSand a bottom\r\nwith treeT, each having minimum height 2 =d1=d2.\r\n\r\nThe heights need to add up toD= 6, so they are increased\r\nproportionally toD1=D2= 2*(6/4) = 3 (exact integers).The final dimensions of an enclosing window are always determined before\r\nthe final dimensions of its subwindows.  In this example only heights\r\nneeded to be apportioned.  If all horizontal and vertical splits were\r\ninterchanged in this example, producing a tree-|-|ABC|D-E|FG|P|-Q-RST,\r\nthen widths would be apportioned correspondingly, as shown in the third\r\npart of the sample output below.  If the proportion calculations do\r\nnot work out to integers, it is always the top or left subwindow whose\r\ndimension is increased to the next integer.The first line of input contains one integer, which is the total number\r\nof preorder traversals describing window structures.  This line is\r\nfollowed by one line for each preorder traversal.  Each preorder traversal\r\nwill contain appropriate dividers '|' and '-' and\r\nfrom 1 to 26 uppercase letters.For each preorder traversal, print the number of the preorder traversal\r\non one line followed by the minimum sized window grid that the traversal could\r\nrepresent.\r\nContrary to the general contest output conventions, there may be more than\r\none consecutive blank in this output, but the other general rules for contest\r\noutput are followed.  The total number of rows or columns in output\r\ngrids will be no more than 53.Input:3\r\n|-MCR\r\n|-|-ABC-D|E-FG-P-|Q|RST\r\n-|-|ABC|D-E|FG|P|-Q-RSTOutput:1\r\nM-R-*\r\n| | |\r\nC-* |\r\n| | |\r\n*-*-*\r\n2\r\nA-C-P-----*\r\n| | |     |\r\nB-* |     |\r\n| | |     |\r\nD-*-Q-R-S-*\r\n|   | | | |\r\nE-F-* | | |\r\n| | T-*-*-*\r\n| G-*     |\r\n| | |     |\r\n*-*-*-----*\r\n3\r\nA-B-D-E---*\r\n| | | |   |\r\nC-*-* F-G-*\r\n|   | | | |\r\nP---Q-*T*-*\r\n|   |  |  |\r\n|   R--*  |\r\n|   |  |  |\r\n|   S--*  |\r\n|   |  |  |\r\n*---*--*--*",
  "sample_input": "|-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RST",
  "sample_output": "Input:3\r\n|-MCR\r\n|-|-ABC-D|E-FG-P-|Q|RST\r\n-|-|ABC|D-E|FG|P|-Q-RSTOutput:1\r\nM-R-*\r\n| | |\r\nC-* |\r\n| | |\r\n*-*-*\r\n2\r\nA-C-P-----*\r\n| | |     |\r\nB-* |     |\r\n| | |     |\r\nD-*-Q-R-S-*\r\n|   | | | |\r\nE-F-* | | |\r\n| | T-*-*-*\r\n| G-*     |\r\n| | |     |\r\n*-*-*-----*\r\n3\r\nA-B-D-E---*\r\n| | | |   |\r\nC-*-* F-G-*\r\n|   | | | |\r\nP---Q-*T*-*\r\n|   |  |  |\r\n|   R--*  |\r\n|   |  |  |\r\n|   S--*  |\r\n|   |  |  |\r\n*---*--*--*",
  "link": "https://www.spoj.com/problems/SPLIT",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "|-MCR    -|-ABC-D|E-FG   -P-|Q|RST    |-|-ABC-D|E-FG-P-|Q|RST",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n|-MCR\r\n|-|-ABC-D|E-FG-P-|Q|RST\r\n-|-|ABC|D-E|FG|P|-Q-RST",
      "expected_output": "1\r\nM-R-*\r\n| | |\r\nC-* |\r\n| | |\r\n*-*-*\r\n2\r\nA-C-P-----*\r\n| | |     |\r\nB-* |     |\r\n| | |     |\r\nD-*-Q-R-S-*\r\n|   | | | |\r\nE-F-* | | |\r\n| | T-*-*-*\r\n| G-*     |\r\n| | |     |\r\n*-*-*-----*\r\n3\r\nA-B-D-E---*\r\n| | | |   |\r\nC-*-* F-G-*\r\n|   | | | |\r\nP---Q-*T*-*\r\n|   |  |  |\r\n|   R--*  |\r\n|   |  |  |\r\n|   S--*  |\r\n|   |  |  |\r\n*---*--*--*",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "iucc a c yszkvlxmbncidgyq",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "ynja rqvuwwtmhz hjvbazuv liyyphqq",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "jwky ay mhbpw qplrrrhu",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "ja dbdwpbg sf zv",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ij wcctiigai xfcqjjqo hrlwzm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "old rpi rguzme xutaoevgsxsqmlukr",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "bd xpdmmsux dmwcfdwma ktzvrkcgqgcgrtzuoda",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ql hht orvtjyv xuopjyzppvyktjqhzw",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "kxd wwa qasqdwe rrfqyzt",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "w k gwfstso mfpr",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "rnkeq jus mztxvo fjtfmypbqfvifu",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "aohe jimsqbocyn d lkmrqmjuhxg",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "a fsgoaekdjux phgp ffkjeldxr",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "pcz elmor uzbmq j",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "alzw xicgigu gusw bnlscvijnslh",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "o yxaaqgxnmr wbkp izlggmlrgxqdmnajmb",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "qc fhvayx niu dned",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "niqr hssu ooj o",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}