{
  "problem_code": "problems",
  "title": "Reliable Nets",
  "tags": [],
  "text": "You’re in charge of designing a campus network between buildings and are very worried about its\r\nreliability and its cost. So, you’ve decided to build some redundancy into your network while keeping it\r\nas inexpensive as possible. Specifically, you want to build the cheapest network so that if any one line\r\nis broken, all buildings can still communicate. We’ll call this aminimal reliable net.InputThere will be multiple test cases for this problem. Each test case will start with a pair of integers n (<=15) and m (<= 20) on a line indicating the number of buildings (numbered 1 through n) and the\r\nnumber of potential inter-building connections, respectively. (Values of n = m = 0 indicate the end of\r\nthe problem.) The following m lines are of the form b1b2c (all positive integers) indicating that it costs\r\nc to connect building b1and b2. All connections are bidirectional.OutputFor each test case you should print one line giving the cost of a minimal reliable net. If there is a\r\nminimal reliable net, the output line should be of the form:The minimal cost for test case p is c.wherepis the number of the test case (starting at 1) andcis the cost. If there is no reliable net possible,\r\noutput a line of the form:There is no reliable net possible for test case p.ExampleInput:4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0Output:The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
  "sample_input": "Input:4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0Output:The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RELINETS",
  "scraped_at": "2025-08-17 00:33:29",
  "test_cases": [
    {
      "input": "4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0",
      "expected_output": "The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3\n1 6 8\n3 9 9\n1 6 4\n6 2 8\n5 7 6\n1 5\n7 7 10\n3 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2\n2 1 5\n3 3 3\n3 6 9\n2 7 7\n6 7 10\n5 4\n1 6 1\n7 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\n1 2 2\n2 5 1\n5 2 8\n7 4 10\n4 5 8\n4 1\n2 4 6\n7 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 33\n41 70 25\n79 4 91\n9 78 35\n21 20 9\n78 49 3\n45 93\n66 80 63\n4 53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 52\n38 78 80\n9 22 30\n26 95 67\n21 72 23\n72 90 9\n64 20\n19 64 93\n27 97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "96 52\n44 82 53\n6 31 58\n51 42 22\n95 85 62\n53 19 80\n98 36\n98 71 87\n20 4",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "7 58\n33 58 49\n72 48 46\n35 99 77\n62 82 88\n23 49 81\n29 43\n100 44 56\n30 90",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 80\n54 18 11\n96 98 95\n44 40 76\n76 13 13\n92 50 82\n47 60\n93 5 72\n81 8",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "288 441\n112 71 69\n382 397 431\n157 344 228\n96 416 392\n378 116 104\n119 278\n469 467 130\n334 421",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "375 54\n424 85 192\n108 464 309\n193 198 375\n125 333 467\n274 235 86\n82 260\n372 120 174\n76 393",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "462 454\n278 211 343\n167 275 369\n449 471 421\n173 405 421\n111 360 99\n462 128\n104 284 302\n382 77",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "186 130\n261 374 500\n273 424 207\n406 271 172\n483 226 97\n215 62 441\n265 108\n248 357 437\n251 391",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "358 72\n418 491 461\n187 392 478\n83 59 109\n423 439 398\n386 413 483\n339 175\n410 400 484\n419 483",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "204 311\n125 413 498\n56 327 457\n486 234 350\n494 373 247\n118 488 124\n242 192\n123 349 227\n426 212",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "118 154\n402 310 491\n247 214 375\n149 73 95\n211 161 385\n99 140 419\n199 223\n275 468 276\n104 154",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n1 2 1000\n999 1000 1\n1 1000 999\n999 2 1\n999 1 1000\n1000 999\n2 2 1000\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2\n1000 1000 1\n1000 2 1\n1 2 2\n1 1 1\n1000 2 2\n1000 1000\n999 1 1000\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}