{
  "problem_code": "problems",
  "title": "The Cats and the Mouse",
  "tags": [],
  "text": "In a rectangular field of size n by m squares there is a mouse and two cats. The mouse is the first to make a move, then each of the cats makes a move, then again its the mouse's turn, and so on. In each move both the mouse and the cats can move exactly one square vertically or horizontally. If the mouse is standing at the edge of the field then in its next move it can jump off the field and is saved from the cats. If in the next move one of the cats moves to the field with the mouse then there is no escape for the mouse ... =(You are to write a program which, knowing the initial positions of mouse and the two cats, will find out if there is any way for the mouse to escape from the cats, assuming of course that each cat will do its best to catch the mouse.InputIn the first line of input two integers n and m are given, not exceeding 100, where n is the number of rows, and m - the number of columns. The second line contains a number k [k â‰¤ 10], which defines the number of test cases for the given field. In the next k lines the initial positions of the mouse and the cats are given. The position in the field is given by two numbers: the first is the number of the row, the second is the number of the column. The first two integers are the coordinates of the mouse, the next four integers are the coordinates of the cats.OutputYou must output k lines with answers for each test case. The answer is YES, if the mouse can escape or NO otherwise.ExampleInput:5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3Output:NO\r\nYES\r\nYESAuthor: Filimonenkov D.O.",
  "sample_input": "Input:5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3Output:NO\r\nYES\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CATM",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3",
      "expected_output": "NO\r\nYES\r\nYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3\n7\n4 5 7 3 6 5\n2 3 8 2 5 10\n8 6 5 7 7 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n4\n5 8 3 1 5 2\n6 10 7 8 7 2\n1 2 5 1 9 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n2\n4 5 2 6 7 8\n8 2 7 8 3 5\n6 6 9 1 8 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 59\n59\n85 4 39 47 86 80\n51 11 24 44 60 13\n28 41 67 37 78 6",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 23\n7\n98 94 51 88 71 45\n85 43 100 21 30 14\n41 94 58 28 41 31",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 23\n78\n74 86 8 54 97 23\n9 62 42 77 36 13\n16 44 24 4 17 67",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 86\n100\n70 53 62 70 77 14\n10 88 3 20 99 96\n2 51 2 95 80 40",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "85 55\n35\n7 44 24 43 59 17\n25 68 76 72 49 62\n71 41 71 36 84 79",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "328 420\n98\n208 484 256 112 365 416\n320 60 425 418 199 470\n286 216 158 379 143 188",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "280 77\n61\n69 339 462 422 173 406\n160 302 444 97 153 463\n476 260 499 434 480 427",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "127 367\n117\n383 144 86 95 60 231\n321 103 83 66 108 197\n307 129 423 111 315 384",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "322 451\n298\n276 406 335 299 377 396\n460 213 335 54 158 296\n200 425 185 465 144 302",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "474 64\n58\n120 59 446 310 100 233\n117 161 116 144 483 217\n447 407 179 420 134 194",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "222 490\n469\n411 465 172 134 264 55\n404 321 143 303 75 66\n443 467 264 89 303 318",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "356 349\n165\n400 206 113 359 270 430\n481 471 179 204 461 106\n401 190 384 350 346 178",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n1\n999 1000 999 1 2 999\n2 1 2 1000 999 1\n2 1 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n1\n1 2 2 1 1 1000\n1 2 999 999 2 999\n1 1000 999 1000 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:12",
  "total_test_cases": 20
}