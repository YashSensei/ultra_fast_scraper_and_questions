{
  "problem_code": "problems",
  "title": "K Edge",
  "tags": [],
  "text": "Given a directed graph, may contains repeated edges. We assume that the graph contains and only contains K edge-disjoint branchings rooted by node 0.A branching for a graph is a set of directed edges that from a certain root (root, in this problem, is node 0) we can find one path to every other node in the graph by only the edges in the branching.K edge-disjoint branching is K branchings that share no common edges.Your task which is easy and funny is to find out the K branchings.InputThe first line of input contains a single integer T, (T<=20), denoting the number of test cases.For each test case:The first line contains two integers N and K, (2<=N<=500,2<=K<=6), which is the number of the nodes in the graph and the number of edge-disjoint branchings.Then next (N-1)*K lines contains the information about the edges. There are 2 integers X and Y in every line, meaning there exist an edge from X to Y in the graph.OutputYou should output the branchings you have found.For every test cases, print the number of test case at the start of output, then you should output K lines.Each line is about a branching which contains N-1 integers that the ID of the edges in this branching.The ID of edges starts with 0. Every edge will appear and only appear once in the output.See samples for further details.ExampleInput:22 20 10 13 20 10 22 11 2Output:Case 1:01Case 2:0 31 2Test data have been enhanced.",
  "sample_input": "Input:22 20 10 13 20 10 22 11 2Output:Case 1:01Case 2:0 31 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FOREST",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "22 20 10 13 20 10 22 11 2",
      "expected_output": "Case 1:01Case 2:0 31 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 7 4 2 9 9 5 6 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 5 4 4 6 6 7 6 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 3 5 10 8 8 10 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 56 89 59 76 11 13 61 39",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 95 62 13 17 88 5 8 98",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 98 98 20 76 12 17 95 35",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "83 85 22 65 21 7 7 98 31",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "11 15 60 35 57 21 57 98 72",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "143 68 336 340 310 170 365 240 419",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "181 171 394 163 293 472 50 341 141",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "480 55 298 457 106 402 420 477 222",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "413 179 479 148 363 405 62 312 341",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "110 466 197 217 441 81 482 403 220",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "57 131 117 367 81 258 153 69 326",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "91 282 98 479 67 165 426 160 209",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1000 999 1000 1 2 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 2 2 1 999 999 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:13",
  "total_test_cases": 20
}