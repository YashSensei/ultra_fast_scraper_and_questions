{
  "problem_code": "problems",
  "title": "Boa viagem, Roim",
  "tags": [],
  "text": "Computer Engineering student Roim is getting ready for a trip to Mexico. For that, he has studied the airplane network, so he knows the details of allRregular flights currently in operation on all of theNavailable airports. Unfortunately, one of his school mates is very annoying and keeps saying the same stuff to him all the time.To solve that issue, he will organize two different flight plans: one for the team and one for the annoying guy. The condition is that the flight plans may not contain the same flight (note that it is possible for both to pass through the same airport, and that the same flight may not be used by both even if the times are different). As this may not be possible using only regular flights, he has also considered using some of theCflights chartered by travel agencies, but he'd like to keep those to a minimum as they usually suffer from large delays. Of course, as long as the least number of chartered flights is picked, Roim will pick the plans with the least total cost (defined as the sum of the costs of all flights used).InputThe input consists of several test cases. On the first line of a test case are three integersN(2 ≤ N ≤ 225),RandC(0 ≤ R+C ≤ N(N-1)/2) separated by spaces. The starting airport is 0, and the destination is N-1.The next R lines contain integersa,b(0 ≤ a, b ≤ N-1),c(1 ≤ c ≤ 100), meaning that there exists a one-way regular flight between airports a and b, with cost c. The following C lines give details for chartered flights in the same manner. There is a blank line at the end of each test case. The last test case is followed by a line containing three zeros.You may assume that any pair of cities is only connected in at most a single direction by a single flight.OutputIf it is possible to make the plans, print two integers separated by spaces. The first should be the minimum amount of chartered flights used, and the second is the total cost of the solution.If it's impossible that both the team and the guy get to their destination, print \"Boa viagem, Roim\" instead.ExampleInput:4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0Output:0 121 8Boa viagem, Roim",
  "sample_input": "Input:4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0Output:0 121 8Boa viagem, Roim",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ROIM",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0",
      "expected_output": "0 121 8Boa viagem, Roim",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10 2 8 5 7 3 6 6 9 9 6 5 5 5 6 5 4 8 3 9 4 8 3 8 4 3 5 10 10 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 6 2 3 4 7 3 6 8 5 5 7 6 2 8 5 2 1 4 5 9 2 8 2 6 3 6 9 2 1 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 10 5 9 5 8 2 5 7 10 10 6 3 1 9 3 3 3 10 8 4 1 5 2 7 8 8 4 6 1 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 20 57 95 54 89 23 10 70 35 87 16 78 52 9 98 92 64 46 63 85 21 16 36 1 58 11 87 25 55 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 40 5 40 53 20 6 28 58 84 28 36 52 54 6 93 73 11 97 42 51 61 8 88 87 70 86 25 60 96 23",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 67 13 88 96 84 57 22 31 89 44 66 57 78 26 18 18 91 51 76 30 6 20 72 1 48 40 77 41 32 86",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 28 60 11 5 15 76 78 25 6 100 80 64 60 97 29 34 5 41 43 70 50 99 79 92 55 61 80 28 24 29",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 74 74 23 3 5 22 94 50 46 61 82 19 32 22 39 62 65 21 18 58 83 18 91 91 12 85 32 72 69 71",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "22 26 44 66 36 25 56 110 53 61 43 51 21 68 49 105 63 57 24 26 56 88 17 32 76 46 16 58 17 91 21",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "111 57 76 57 35 41 105 50 104 74 33 59 110 72 66 34 11 89 96 81 43 59 94 70 79 88 22 14 11 73 73",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "25 13 17 41 34 40 51 59 66 97 33 16 37 62 52 39 86 38 102 30 94 48 20 81 15 97 91 94 12 39 66",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "42 102 89 112 46 36 101 72 80 111 91 105 36 29 16 89 43 24 77 14 95 37 51 71 91 76 26 25 37 57 61",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "45 12 49 64 108 84 28 109 70 94 88 78 41 31 80 15 62 17 88 101 59 93 80 22 96 44 92 70 33 40 61",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "39 105 105 53 25 61 55 77 25 95 51 35 67 37 55 80 80 17 110 35 95 47 85 109 51 71 13 27 64 73 107",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "109 22 68 76 45 111 11 22 25 56 48 58 27 74 20 93 53 61 102 33 66 24 53 83 88 49 48 90 94 36 27",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 225 2 225 225 1 224 2 224 224 225 224 2 2 2 1 2 224 2 224 2 225 2 225 225 1 225 224 225 224",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "224 225 1 225 2 225 2 1 2 1 225 1 225 2 1 224 2 1 224 225 224 1 225 225 224 224 224 1 224 225 224",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}