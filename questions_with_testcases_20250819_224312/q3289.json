{
  "problem_code": "problems",
  "title": "Wild West",
  "tags": [],
  "text": "Once upon a time in the west... The quiet life of the villages on the western frontier are often stirred up by the appearance of mysterious strangers. A stranger might be a bounty hunter looking for a notorious villain, or he might be a dangerous criminal escaping the hand of justice. The number of strangers has become so large that they formed the Mysterious Strangers' Union. If you want to be a mysterious stranger, then you have to apply to the Union, and you have to pass three exams that test the three most important skills: shooting, fist-fighting, and harmonica playing. For each skill, the Admission Committee gives a score between 1 (worst) and m (best). Interestingly enough, there are no two members in the Union having exactly the same skills: for every two member, there is always at least one skill for which they have different scores. Furthermore, it turns out that for every possible combination of scores there is exactly one member having these scores. This means that there are exactly m3strangers in the union.Recently, some members left the Union and they formed the Society of Evil Mysterious Strangers. The aim of this group is to commit as many evil crimes as possible, and they are quite successful at it. Therefore, the Steering Committee of the Union decided that a Hero is needed who will destroy this evil society. A Hero is a mysterious stranger who can defeat every member of the Society of Evil Mysterious Strangers. A Hero can defeat a member if the Hero has a higher score in at least one skill. For example, if the evil society has two members, Colonel Bill, with a score of 7 for shooting, 5 for knife throwing and 3 for harmonica playing, and Rabid Jack, with a score 10 for shooting, 6 for knife throwing and 8 for harmonica playing, then a Hero with score 8 for shooting, 7 for knife throwing and 3 for harmonica playing can defeat both of them. However, someone with a score of 8 for shooting 6 for knife throwing and 8 for harmonica playing cannot be the Hero. Moreover, the Hero cannot be a member of the evil society.Your task is to determine whether there is a member in the Union who can be the Hero. If so, then you have to count how many members are potential heroes.InputThe input contains several blocks of test cases. Each block begins with a line containing two integers: the number 1 ≤ n ≤ 100000 of members in the Society of Evil Mysterious Strangers and the maximum value 2 ≤ m ≤ 100000 of the scores. The next n lines describe these members. Each line contains three integers between 1 and m: the scores for the three skills.The input is terminated by a block with n = m = 0.OutputFor each test case, you have to output a single line containing the number of members in the Union who satisfy the requirements for becoming a Hero. If there is no such member, then output0. It can be assumed that the output is always at most 1018.ExampleInput:3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0Output:848\r\n19\r\n999999999992Warning: enormous input/output data, be careful with certain languages",
  "sample_input": "Input:3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0Output:848\r\n19\r\n999999999992",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WILD",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0",
      "expected_output": "848\r\n19\r\n999999999992",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 2\n9 8 1\n8 2 6\n2 8 6\n2 1\n3 10 3\n2 2\n9 5 4\n10 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 5\n9 10 10\n8 3 3\n9 2 1\n5 5\n6 9 5\n8 7\n3 3 3\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n4 8 1\n5 9 8\n4 9 5\n9 3\n9 7 7\n2 7\n4 10 10\n2 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 30\n9 51 59\n100 46 29\n42 85 45\n7 63\n71 83 70\n9 36\n88 23 2\n8 88",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 7\n95 41 20\n63 88 3\n21 24 21\n91 63\n96 73 95\n73 50\n69 23 60\n14 95",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "34 54\n54 61 10\n28 21 27\n6 58 92\n12 22\n80 66 13\n67 61\n77 37 23\n36 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 60\n11 3 69\n72 22 73\n5 37 5\n90 96\n66 57 49\n83 37\n73 35 92\n8 33",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "53 20\n24 98 35\n2 33 18\n4 96 48\n46 47\n77 37 15\n27 63\n56 6 54\n37 55",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "15927 8804\n39844 17931 23347\n18709 11846 47266\n7959 28922 34303\n27072 43208\n19699 38955 49372\n18301 24991\n14963 5738 46630\n48999 9983",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "42471 48834\n13160 44583 6617\n28028 8523 14534\n20573 9756 39940\n24521 11725\n15081 30460 49787\n6624 36931\n19385 5579 35437\n12112 34232",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "28711 19030\n43574 8595 16324\n5732 16691 7886\n10844 5116 39879\n28269 26922\n6711 48963 17104\n35475 8991\n6906 30538 27666\n39186 13603",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "30162 34192\n26623 24783 42158\n5749 40121 45797\n48899 42546 49199\n11386 26222\n20387 46405 31912\n9755 45197\n40031 11059 26175\n5087 11630",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8627 13437\n10429 18327 35717\n12401 19296 7517\n22019 10842 28946\n32693 27753\n7275 43115 35787\n25761 39335\n32109 47475 21651\n42475 36153",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "37879 29555\n29533 26415 45482\n5201 26433 9502\n5546 49963 13205\n6798 5561\n48751 21264 49767\n14536 13343\n28378 47907 21484\n15452 42107",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24798 12284\n20365 9499 43352\n43913 8094 34666\n8825 33028 23504\n9290 10649\n39514 15471 32939\n9589 27174\n12255 41492 35343\n47581 6274",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 2\n1 1 100000\n1 2 2\n2 2 2\n2 100000\n99999 2 99999\n99999 1\n1 1 2\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 1\n1 99999 100000\n1 2 99999\n99999 99999 99999\n2 1\n99999 1 2\n100000 99999\n1 99999 100000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}