{
  "problem_code": "problems",
  "title": "Caprica Cities",
  "tags": [],
  "text": "Caprica is one of the 12 colonial planets, but it was completely destroyed by the cylons, robots made by humans that had rebelled. Before the attack, Doctor Gaius Baltar had the following problem. Caprica has N cities, numbered from 0 to N − 1, and M bidirectional roads connecting them, in a way that exists a path between every pair of cities. Let X and Y be two disjoint and non-empty subsets of this N cities. The problem is to find the smallest path length between any cities x and y where x ∈ X and y ∈ Y. A path length is the sum of the distance of each road in this path.InputEach test case is described using several lines. The first line contains four integers N, M, A and B representing respectively the number of cities (2 ≤ N ≤ 1000), the number of roads (1 ≤ M ≤ 104), the number of cities in X (2 ≤ A ≤ 1000), and the number of cities in Y (2 ≤ B ≤ 1000), where A + B ≤ N.The second line contains A integers and the third line contains B integers, representing the cities in X and Y respectively. Each of the next M lines describes a road using three integers, u, v, and d, indicating that there is a road between the cities u and v with distance d (1 ≤ d ≤ 104). The last test case is followed by a line containing four zeros.OutputFor each test case output, in a single line, the integer representing the smallest path length between x and y where x ∈ X and y ∈ Y .ExampleInput:4 4 2 20 12 30 1 100 2 201 3 102 3 100 0 0 0Output:10",
  "sample_input": "Input:4 4 2 20 12 30 1 100 2 201 3 102 3 100 0 0 0Output:10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CAPRICA",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "4 4 2 20 12 30 1 100 2 201 3 102 3 100 0 0 0",
      "expected_output": "10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5 6 1 8 6 6 1 6 7 8 8 3 5 5 1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 3 9 10 6 8 5 8 5 7 8 7 6 4 3 6 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 2 4 8 1 10 2 3 4 5 7 3 1 6 7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 51 61 25 46 15 94 43 86 59 53 55 54 59 99 55 41",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 87 33 3 1 61 34 63 24 22 88 27 84 39 23 63 92",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "58 47 39 28 3 14 97 89 4 86 7 38 57 25 18 48 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "37 42 26 62 99 8 57 50 14 43 40 25 96 59 7 47 55",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 42 61 39 73 16 63 5 34 91 6 89 69 47 70 56 9",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "263 109 332 130 188 333 446 434 205 367 144 171 68 419 114 497 334",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "238 383 66 490 200 303 387 404 370 484 64 173 157 57 355 425 244",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "473 195 406 323 284 476 344 448 132 51 420 171 199 166 138 66 147",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "222 202 270 462 463 493 499 492 323 463 389 54 159 346 330 289 259",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "322 416 267 354 259 155 249 150 115 193 55 205 414 463 315 355 415",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "238 278 448 125 65 266 407 187 259 261 270 475 364 499 97 189 465",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "144 445 322 260 157 404 200 469 443 155 449 477 430 148 346 460 312",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 2 1000 2 2 999 999 2 999 2 999 1000 1000 1 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1 999 1 1000 1000 2 999 1 1 999 1 1 999 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}