{
  "problem_code": "problems",
  "title": "LIS and tree",
  "tags": [],
  "text": "You are given a tree withNvertices. Every vertex has an unique number from the interval[1, N]. Consider all simple paths on this tree. For every simple path you can write the sequence of numbers taken from consecutive vertices on this path. For every such sequence you can find theLongest Increasing Subsequence. Find the longest of all Longest Increasing Subsequences and print its length.InputThe size of each input file is not greater than 2 MB.In the first line of the input there is an integerT (1 ≤ T ≤ 1000)- the number of data sets.In the first line of each data set there is an integerN (1 ≤ N ≤ 105).In each of the nextN - 1lines of the data set you can find two integersaandb (1 ≤ a, b ≤ N)meaning that there is an edge connecting vertex with numberaand vertex with numberb.OutputFor each data set print one number: the length of the longest LIS of all simple paths.ExampleInput:2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7Output:4\r\n5One of the solutions for the second tree in the example:",
  "sample_input": "Input:2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7Output:4\r\n5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LISTREE",
  "scraped_at": "2025-08-17 00:34:14",
  "test_cases": [
    {
      "input": "2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7",
      "expected_output": "4\r\n5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n7\n4\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n2\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n6\n9\n10\n9\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n45425877\n25603042\n85145201\n15375599\n71598566\n8423982\n84233485\n80142154\n57763356\n96847640\n98959054\n10028836\n44320496\n84750828\n3360279\n49083319\n14584106\n68248137\n87855368\n19926618",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n24230371\n81919274\n5581182\n91114138\n39401178\n56548915\n15893605\n15423092\n93455542\n17741236\n16588730\n75565745\n49188692\n61036601\n13575993",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n43122729\n24001015\n3992642\n92795847\n38370783\n67287048\n85525016\n59850077\n91744705\n5396461\n42653132\n85152334\n46859846\n69428345\n57434617\n92904376\n77032532\n73752043\n40106978",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n18367601\n2348019\n70436228\n99556260\n11766086\n63832654\n66964121\n88954419\n63307498\n19367614\n88919200\n94377051\n64155690\n29673376\n74212948\n43230259\n13611633",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n67804243\n23150781\n68323418\n67484803\n98324157\n51233255\n29516227\n34990586",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "50\n87482\n94718\n9987\n97433\n85689\n14069\n35410\n36263\n69171\n16847\n73132\n50599\n67963\n20468\n97043\n18126\n64331\n38624\n38688\n31192\n44459\n94788\n14671\n97862\n63384\n4788\n32974\n89329\n78717\n35788\n58901\n67780\n84351\n50308\n86457\n94715\n12409\n42688\n46453\n16738\n29213\n65125\n93500\n56963\n53877\n878\n8952\n45081\n47559\n32987",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "53\n65329\n47396\n63084\n35398\n6919\n84424\n96450\n17400\n98967\n3958\n13319\n24572\n64673\n52633\n74886\n56672\n51377\n24512\n26265\n72002\n45404\n65375\n44237\n45341\n77612\n5157\n32701\n95013\n89376\n71557\n45580\n35494\n61728\n3845\n27953\n1013\n47626\n97125\n94264\n52318\n95989\n41490\n41071\n33552\n76458\n32711\n10274\n6511\n60331\n10799\n94882\n23939\n16396",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "82\n92571\n6553\n82411\n90202\n94422\n30821\n20284\n42682\n33736\n14530\n22620\n9884\n49094\n83148\n63690\n99577\n46963\n71346\n42697\n54208\n72287\n41559\n40465\n22796\n24870\n15643\n56438\n38220\n90057\n90163\n19841\n39800\n60770\n78462\n64657\n59369\n65605\n41678\n11379\n99375\n78694\n4175\n79179\n55899\n71968\n19985\n24761\n72107\n41610\n4988\n22972\n69663\n6747\n39744\n8311\n94315\n45109\n30169\n98510\n82683\n16259\n77047\n58885\n52828\n36979\n62798\n21634\n16076\n26957\n17139\n24838\n26791\n36194\n48514\n67005\n99598\n68929\n2474\n92675\n86143\n9020\n17585",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "72\n36622\n67162\n57249\n1122\n84626\n70540\n94109\n5647\n64373\n14134\n56948\n43660\n49357\n72616\n92930\n1863\n26913\n49647\n87514\n88297\n60495\n42599\n24140\n47536\n54418\n46214\n93844\n98975\n59876\n39595\n69341\n38266\n16766\n75853\n7150\n99865\n73064\n55854\n939\n63878\n37719\n78533\n87958\n8407\n65958\n41968\n50764\n49677\n30687\n60636\n66886\n63349\n39699\n36385\n56661\n52013\n42297\n25173\n97999\n78886\n32041\n55685\n39009\n71098\n82041\n95304\n55650\n42830\n55834\n39875\n98118\n44736",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "96\n51998\n71466\n7652\n36570\n76684\n92818\n91721\n4449\n18174\n84120\n45710\n94261\n20628\n33063\n56938\n23820\n96804\n18980\n95536\n90683\n6539\n46630\n26313\n18927\n7158\n68009\n28260\n5056\n34901\n40708\n11963\n70868\n1860\n47255\n53406\n85818\n92834\n5763\n91993\n95674\n52984\n28323\n23335\n53347\n84592\n19802\n18646\n81940\n10311\n13826\n68190\n81053\n55479\n17979\n51095\n19501\n71450\n34292\n92604\n4093\n28936\n51634\n96804\n28507\n73527\n13028\n66\n41672\n49314\n37971\n92150\n1897\n81984\n12989\n72279\n25256\n54950\n67436\n60596\n85724\n5463\n71065\n39048\n5122\n45586\n46158\n81677\n94495\n79585\n8611\n31564\n38519\n36319\n86158\n6086\n5245",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n76084\n61226\n75870\n55304\n44832\n22949\n79762\n1696\n87397\n43587\n12672\n77518\n26292\n29963\n7531\n96580\n9927\n84907\n98742\n27686\n20959\n40799\n5362\n81399\n10520\n85523\n75462\n48722\n93524\n88960\n2251\n35979\n73416\n41512\n15128\n55614\n67614\n17935\n87794\n48798\n89467\n17901\n97655\n28536\n89486\n62685\n52618\n9838\n97225\n87358\n66660\n10082\n2376\n78132\n99216\n86273\n44385\n54461\n9798\n10822\n4740\n60780",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "68\n13802\n83575\n29786\n82130\n88024\n40935\n12322\n90469\n70905\n14094\n97013\n69684\n49145\n23102\n92948\n88338\n81678\n66074\n71979\n49001\n55252\n73336\n74502\n55456\n29765\n99652\n94132\n57907\n87042\n8186\n16588\n30208\n24990\n58972\n44553\n36055\n75387\n19730\n67360\n1022\n95602\n87205\n57313\n1780\n55358\n66612\n26153\n38132\n19286\n94392\n1381\n10917\n92295\n21920\n61710\n49630\n58955\n95401\n27920\n26970\n31647\n3534\n62086\n10897\n39158\n80751\n23937\n72948",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n98760348\n41984219\n40567174\n52938368\n34436017\n14084962\n24012032\n45614452\n82048464\n55166587\n6998106\n78560530\n13449351\n89311049\n53388450\n66324602\n76157400\n89762977\n45094592\n31019060\n26776565\n37660931\n18117532\n91495540\n39477300\n88864201\n35073303\n47388419\n96253184\n65319561\n32716235\n50948016\n84784946\n62751518\n86807309\n94632432\n71716270\n43689788\n2380273\n29599313\n351994\n98292127\n84817621\n97609962\n22905750\n71606920\n1047748\n1180039\n85022911\n39662395\n77442699\n20367212\n8579064\n89909437\n68361610\n48305956\n81192123\n31306234\n30070472\n88955351\n17236619\n27439153\n15733565\n70922027\n81827142\n84524259\n85798107\n79618089\n76621218\n56136780\n10028708\n77588501\n50838923\n31014821\n64028602\n1206816\n86179010\n54458698\n77708546\n65987890\n44272601\n93183764\n39159997\n92387019\n59695804\n65918153\n38713221\n48202095\n95346917\n69520340\n75314218\n12004185\n58973925\n67865728\n47754801\n31590174\n12579380\n58595321\n87831100\n35744845\n89263181\n2953869\n514859\n34233220\n52703142",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n33056831\n38424581\n93607581\n65997715\n55463523\n19379300\n22735344\n18746641\n12073108\n46688103\n57728276\n94800137\n76394387\n11908230\n26120012\n88844578\n54254908\n66251392\n38575344\n14496231\n98451612\n54548483\n86544602\n76165296\n21648917\n97935527\n12796961\n85761991\n47815472\n95104258\n51857519\n33574138\n85268394\n77723113\n79090332\n79267362\n34156223\n79119390\n1406246\n48401810\n85621783\n1934077\n45569410\n18653655\n74715794\n92498165\n31910084\n20164996\n85807453\n41632715\n16584387\n71531668\n9431141\n32535301\n77717752\n10224358\n54080446\n51660056\n17426441\n69547852\n34332217\n87179050\n76092045\n12042060\n51771387\n79426694\n89915310\n17527437\n18378597\n39392320\n22154039\n59383462\n29174104\n29589824\n60711082\n63480238\n68907444\n52673762\n18277846\n1817063\n27226789\n40954426\n43766674\n33585685\n21374151\n77313446\n78487767\n81399872\n6212898\n87737735\n37512699\n82962152\n62067774\n98837728\n24781764\n49312775\n98727976\n60672489\n3218483\n21848682\n82965835\n68538049\n87770179\n44368971\n62572041",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n1\n1\n1\n1\n93659487\n100000000\n1\n87546667\n12299059\n100000000\n4868942\n100000000\n1\n62359010\n100000000\n100000000\n1\n100000000\n100000000\n98556864\n91155096\n100000000\n100000000\n1\n1\n6196432\n100000000\n100000000\n1\n1\n81232645\n1\n47547493\n100000000\n37300553\n100000000\n1\n1\n100000000\n58304253\n100000000\n38395403\n88369184\n1\n72342690\n1\n100000000\n100000000\n45432593\n52699883\n100000000\n1\n1\n1\n100000000\n34265556\n100000000\n100000000\n63611737\n1\n1\n1\n58894631\n100000000\n91611996\n100000000\n100000000\n1\n1\n15494676\n100000000\n1\n100000000\n1\n72414610\n50271045\n100000000\n66511620\n1\n1\n1\n11535340\n75106155\n100000000\n100000000\n11494693\n1\n100000000\n1\n100000000\n1\n236245\n100000000\n5198360\n1\n65625041\n1\n100000000\n100000000\n60524294\n1\n87700322\n100000000\n96476225\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}