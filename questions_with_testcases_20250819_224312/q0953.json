{
  "problem_code": "problems",
  "title": "Dinosaur Menace",
  "tags": [],
  "text": "After a failed but interesting DNA project, a lot of dinosaurs spread over the lab devouring most of the staff. Jeff, a scientist that worked in the project, managed to survive by hiding in the southwest corner of the lab. Now that all dinosaurs are asleep, he is going to try to leave. The exit of the lab is located at the northeast corner.Jeff knows that if any of the dinosaurs wakes up, he does not stand a chance, so he needs to minimize the likelihood of that happening. For that, he wants to follow a path that maximizes the minimum distance from him to a dinosaur along the path. The length of the path is of no interest to Jeff.For this problem we consider that Jeff and the dinosaurs are points on the plane, and that Jeff’s path is a continuous curve connecting the southwest and northeast corners of the lab. As we mentioned, Jeff wants to maximize the minimum distance between this curve and the position of any dinosaur.InputThe input contains several test cases, each one described in several lines. The first line of each test case contains three integers N, W, and H separated by single spaces. The value N is the number of dinosaurs in the lab (1 ≤ N ≤ 300). The values W (width) and H (height) are the size of the lab on the x and y coordinates, respectively (2 ≤ W, H ≤ 106). This means that the starting position of Jeff is at (0, 0), while the exit of the lab is located at (W, H). Each of the next N lines contains two integers X and Y separated by a single space, representing the coordinates of a different dinosaur (1 ≤ X ≤ W − 1 and 1 ≤ Y ≤ H − 1). Note that no dinosaur is located on the border of the lab. You may assume that no two dinosaurs have the same location. The last line of the input contains the number −1 three times separated by single spaces and should not be processed as a test case.OutputFor each test case output a single line with the maximum possible distance to the closest dinosaur. Write the result rounded to the closest number with exactly three decimal places, using the highest in case of ties, as usual.ExampleInput:1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1Output:1.000\r\n1.581\r\n1.803",
  "sample_input": "Input:1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1Output:1.000\r\n1.581\r\n1.803",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DINOSM",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1",
      "expected_output": "1.000\r\n1.581\r\n1.803",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 8 2\n9 5\n5 7 5\n10 4\n1 8\n4 6\n3 7 10\n6 7\n2 10\n6 2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 2 6\n3 10\n2 7 10\n6 1\n3 1\n10 5\n10 9 10\n1 4\n2 7\n4 5 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 4\n2 8\n1 10 5\n5 6\n4 6\n10 5\n1 4 2\n7 5\n8 7\n10 1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 6 51\n36 31\n22 64 1\n26 27\n31 95\n90 44\n17 29 82\n5 16\n78 61\n87 81 42",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "20 24 12\n79 88\n54 61 19\n78 5\n25 77\n68 5\n84 9 12\n73 86\n92 7\n49 30 39",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "42 48 26\n19 12\n6 90 59\n99 90\n25 27\n92 72\n87 11 93\n24 46\n30 69\n59 91 89",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "85 86 10\n32 66\n61 47 18\n44 27\n96 66\n2 30\n17 84 89\n97 81\n52 5\n93 43 70",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "75 55 93\n8 28\n71 4 92\n100 76\n44 8\n80 100\n77 95 86\n73 100\n93 43\n90 83 9",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "99 67 119\n143 128\n91 58 34\n104 96\n121 97\n25 62\n15 62 49\n54 113\n127 17\n112 148 134",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "133 148 54\n102 69\n117 55 133\n78 75\n40 85\n112 60\n58 39 18\n16 116\n33 113\n82 78 88",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "20 82 31\n135 28\n71 87 72\n126 55\n48 90\n33 143\n120 73 47\n18 69\n134 78\n60 110 75",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "15 64 101\n128 73\n97 53 53\n44 39\n117 105\n121 55\n48 93 70\n70 19\n110 132\n132 40 20",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "111 135 52\n122 119\n65 40 86\n137 62\n146 148\n137 123\n108 25 113\n77 99\n120 58\n81 44 56",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34 51 128\n48 15\n93 28 25\n118 110\n112 39\n138 126\n103 50 70\n143 70\n102 134\n132 20 54",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "112 122 45\n74 74\n71 107 121\n38 138\n47 42\n80 58\n91 38 38\n104 61\n79 46\n119 46 60",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300 300",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300 300",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "299 1 299\n2 300\n299 1 1\n1 1\n299 299\n300 2\n299 1 300\n2 299\n2 300\n299 299 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "299 2 2\n2 299\n299 299 2\n2 1\n300 2\n299 1\n2 299 1\n300 1\n300 300\n300 1 300",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}