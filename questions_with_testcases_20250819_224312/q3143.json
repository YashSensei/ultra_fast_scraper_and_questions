{
  "problem_code": "problems",
  "title": "Variable Radix Huffman Encoding",
  "tags": [],
  "text": "Huffman encoding is a method of developing an optimal encoding of the symbols\r\nin asource alphabetusing symbols from atarget alphabetwhen the frequencies\r\nof each of the symbols in the source alphabet are known. Optimal means the\r\naverage length of an encoded message will be minimized. In this problem you\r\nare to determine an encoding of the firstNuppercase letters (the source\r\nalphabet,S1throughSN, with frequenciesf1throughfN) into the\r\nfirstRdecimal digits (the target alphabet,T1throughTR).Consider determining the encoding whenR= 2. Encoding proceeds in several\r\npasses. In each pass the two source symbols with the lowest frequencies, sayS1andS2, are grouped to form a new \"combination letter\" whose frequency is\r\nthe sum off1andf2. If there is a tie for the lowest or second lowest\r\nfrequency, the letter occurring earlier in the alphabet is selected. After\r\nsome number of passes only two letters remain to be combined. The letters\r\ncombined in each pass are assigned one of the symbols from the target\r\nalphabet.The letter with the lower frequency is assigned the code 0, and the\r\nother letter is assigned the code 1. (If each letter in a combined group has\r\nthe same frequency, then 0 is assigned to the one earliest in the alphabet.\r\nFor the purpose of comparisons, the value of a \"combination letter\" is the\r\nvalue of the earliest letter in the combination.) The final code sequence for\r\na source symbol is formed by concatenating the target alphabet symbols\r\nassigned as each combination letter using the source symbol is formed.The target symbols are concatenated in the reverse order that they are assigned so\r\nthat the first symbol in the final code sequence is the last target symbol\r\nassigned to a combination letter.The two illustrations below demonstrate the process forR= 2.SymbolFrequencyA5B7C8D15Pass 1: A and B groupedPass 2: {A, B} and C groupedPass 3: {A, B, C} and D groupedResulting codes: A=110, B=111, C=10, D=0Average length = (3*5 + 3*7 + 2*8 + 1*15) / 35 = 1.91SymbolFrequencyA7B7C7D7Pass 1: A and B groupedPass 2: C and D groupedPass 3: {A, B} and {C, D} groupedResulting codes: A=00, B=01, C=10, D=11Average length = (2*7 + 2*7 + 2*7 + 2*7) / 28 = 2.00WhenRis larger than 2,Rsymbols are grouped in each pass. Since each pass\r\neffectively replacesRletters or combination letters by 1 combination letter,\r\nand the last pass must combineRletters or combination letters, the source\r\nalphabet must containk*(R-1)+Rletters, for some integerk.SinceNmay not be this large, an appropriate number of fictitious letters with zero\r\nfrequencies must be included. These fictitious letters are not to be included\r\nin the output. In making comparisons, the fictitious letters are later than\r\nany of the letters in the alphabet.Now the basic process of determining the Huffman encoding is the same as for\r\ntheR= 2 case. In each pass, theRletters with the lowest frequencies are\r\ngrouped, forming a new combination letter with a frequency equal to the sum of\r\nthe letters included in the group. The letters that were grouped are assigned\r\nthe target alphabet symbols 0 throughR-1. 0 is assigned to the letter in the\r\ncombination with the lowest frequency, 1 to the next lowest frequency, and so\r\nforth. If several of the letters in the group have the same frequency, the one\r\nearliest in the alphabet is assigned the smaller target symbol, and so forth.The illustration below demonstrates the process forR= 3.SymbolFrequencyA5B7C8D15Pass 1: ? (ficticious symbol), A and B are groupedPass 2: {?, A, B}, C and D are groupedResulting codes: A=11, B=12, C=0, D=2Average length = (2*5 + 2*7 + 1*8 + 1*15) / 35 = 1.34InputThe input will contain one or more data sets, one per line. Each data set\r\nconsists of an integer value forR(between 2 and 10), an integer value forN(between 2 and 26), and the integer frequenciesf1throughfN, each of which\r\nis between 1 and 999.The end of data for the entire input is the number 0 forR; it is not considered to be a separate data set.OutputFor each data set, display its number (numbering is sequential starting with\r\n1) and the average target symbol length (rounded to two decimal places) on one\r\nline. Then display theNletters of the source alphabet and the corresponding\r\nHuffman codes, one letter and code per line.Print a blank line after each test case.The examples below illustrate the required output format.ExampleInput:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_input": "Input:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VHUFFM",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0",
      "expected_output": "Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 2 6 2 9 4 3\n3 8 2 7 1 9 1\n5 10 9 8 4 4 2 6 4\n8 7 10 3 4 8 9 10\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 3 9 7 7 1 3\n9 9 3 6 4 9 7\n10 6 3 4 6 3 4 9 8\n2 10 8 5 6 4 5 8\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 10 8 7 5 6 6\n10 4 10 10 8 10 4\n4 5 4 5 10 2 2 7 7\n2 3 8 10 8 8 6 8\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 11 34 82 15 87 28\n57 21 53 8 50 1 53\n87 27 70 32 58 55 100 16 79\n16 41 12 93 65 74 7 76\n86",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "77 65 10 27 61 7 4\n69 82 55 85 49 76 70\n82 61 96 80 86 80 20 56 98\n60 97 39 21 29 32 91 42\n18",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "40 10 85 40 34 57 19\n77 94 33 51 48 30 22\n94 40 94 5 71 47 28 46 58\n32 60 64 51 54 80 86 63\n21",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 68 74 65 99 52 72\n24 64 14 91 52 59 9\n61 70 59 83 40 6 23 85 59\n42 56 60 43 26 67 19 21\n94",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 23 17 4 100 54 28\n35 99 30 47 16 95 96\n68 16 37 54 46 80 64 59 16\n7 52 38 92 39 36 26 24\n37",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "66 271 322 236 108 87 215\n334 450 181 450 304 435 112\n457 260 85 172 494 419 425 176 321\n379 170 100 440 202 316 295 63\n323",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "240 68 106 62 115 305 318\n63 185 92 110 424 318 241\n317 99 144 120 223 218 442 255 307\n158 457 90 172 329 493 230 498\n432",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "58 272 324 229 68 462 62\n338 263 498 190 125 200 182\n420 391 88 174 465 289 247 96 145\n477 429 300 157 96 447 272 177\n440",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "246 329 163 282 93 53 342\n240 65 85 260 331 443 383\n115 380 356 82 411 103 467 482 320\n480 281 446 235 267 171 272 274\n69",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "419 216 244 448 319 271 330\n349 243 326 316 183 263 421\n285 492 200 296 232 442 64 426 374\n79 317 71 123 95 286 312 91\n139",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "253 449 466 396 422 68 417\n108 398 70 347 183 163 409\n77 170 311 121 352 377 391 304 331\n207 461 172 447 281 136 236 302\n120",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "338 271 354 479 236 226 342\n145 476 496 253 155 84 484\n180 129 379 397 253 146 314 146 104\n120 106 392 329 131 189 444 102\n114",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 999 1 1000 2 2\n999 1 2 1000 1 999 2\n999 999 2 1 1 2 1 1000 1000\n1 1 1000 999 999 2 999 1000\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 999 2 1000 999 2\n2 1 2 999 1 1 999\n999 1000 1000 1 1000 1 999 2 2\n1 1 1000 1 1 1000 2 1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}