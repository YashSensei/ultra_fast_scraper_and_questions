{
  "problem_code": "problems",
  "title": "Koala Fan",
  "tags": [],
  "text": "Andy is a really cute person and he wants to buy a koala. There arenavailable koalas, for each koala its beauty and cost are known. There are two accepted types of money in the world: donuts and polygons, so each koala cost can be either in donuts or polygons. Due the bad relations between The Linear States and Exponenzula no money changes between the types are allowed.Help Andy to find twodifferentkoalas with the maximum total beauty so that he can buy both at the same time.InputThe first line contains three integersn,dandpthe number of koalas, the number of donuts and polygons Andy has.The nextnlines describe koalas. Each of these lines contain two integers biand pithe beauty and the cost of the i-th koala, and then a letter \"D\" or \"P\", describing in which type of money is the cost of koala i: in donuts or in polygons, respectively.OutputPrint the maximum total beauty of exactly two koalas Andy can buy. If he can't buy two koalas, print \"sad:(\".ExampleInput:3 7 610 8 D4 3 D5 6 POutput:9Input:3 10 105 5 D5 5 D10 11 POutput:10Constraints• 2 ≤ n ≤ 100000• 0 ≤ d, p ≤ 100000• 1 ≤ b i , p i ≤ 100000",
  "sample_input": "Input:3 7 610 8 D4 3 D5 6 POutput:9",
  "sample_output": "Input:3 10 105 5 D5 5 D10 11 POutput:10",
  "link": "https://www.spoj.com/problems/VZLA2019K",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "3 7 610 8 D4 3 D5 6 P",
      "expected_output": "9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 10 105 5 D5 5 D10 11 P",
      "expected_output": "10",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "8 1 8 8 4 3 1 6\n2 8 2 1 vndir 9 cos 1 rtc",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 9 6 10 8 5 8 1\n10 7 4 6 xhoq 5 tuen 1 atn",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 10 8 5 1 4 3\n7 4 5 6 d 1 fl 2 i",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "20 59 42 54 77 73 9 33\n88 72 7 66 n 55 jle 88 i",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "67 44 10 8 47 79 29 19\n12 3 25 38 s 65 acszg 88 vq",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "40 27 66 19 3 36 58 1\n76 84 69 29 k 9 kr 62 mye",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 17 11 78 38 3 84 94\n54 56 8 94 hmkkb 74 rtzyy 97 efcv",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 41 87 6 27 43 57 78\n96 88 54 26 gppn 87 wv 79 lwbj",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "7554 26264 21130 43391 24662 29850 39371 26607\n22146 27932 25174 15948 kzt 14632 xf 43671 jvfrs",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9828 30757 15996 35233 37583 30797 16032 23461\n33017 49608 8620 10074 xy 37060 qpoyu 36111 rbbal",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "25329 5163 28416 23729 36581 25920 24618 46605\n47624 31066 47839 18044 xopkh 6345 w 47394 edxw",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8922 35101 19202 16390 21004 15634 7589 38297\n45779 30893 36332 30533 f 33357 qf 13251 m",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38994 49598 15984 35292 33362 18143 38174 17823\n27922 17656 44321 37911 iymg 15617 j 17693 sz",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "47005 12827 12697 8779 29128 48689 12656 10588\n43837 21016 31536 43564 eqrr 24834 o 8351 l",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "46764 41045 6250 43537 42643 9026 28929 42957\n8509 48806 5712 36209 sf 23615 b 31773 qjzb",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 melcc 100000 y 100000 qr",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 yq 100000 e 100000 mnakj",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "99999 99999 2 99999 2 99999 99999 99999\n2 2 99999 2 mwnu 99999 uyu 100000 jjq",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}