{
  "problem_code": "problems",
  "title": "Jolly Kingdom",
  "tags": [],
  "text": "Jolly Kingdom is a kingdom which is famous for its troops' power. Jolly Kingdom has N swordsman troops and M archer troops where each troop has his/her own unique fighting style, different with others.For the 10thtimes, an evil witch with her monster troops tries to seize the throne of Jolly Kingdom. According to the information gathered from Jolly Kingdom's spies, the witch will attack everyday for H days. Each day, the witch will add 1 new monster into her monster troops. This makes enemy's troops become stronger every day.Each monster owned by the witch is strong and almost unbeatable, only the Xithswordsman troop or the Yitharcher troop can beat the monster. After the monster has been defeated by Jolly Kingdom's troop, that monster will take a reset and attack again in the next day.To protect Jolly Kingdom, every dayall monstershave to be defeated, but the cost to send 1 troop is expensive, so the king wants to send minimum number of troops every day such that the sent troops will be able to defeatall monstersexist on that corresponding day.The king asks you for your help, as a royal advisor, the number of troops the king has to send every day.InputFirst line consists of 3 integers: N, M, and H (1 ≤ N, M ≤ 1000; 1 ≤ H ≤ N*M) – the number of swordsman troops, archer troops, and days. Each of next H lines contains 2 integers: Xiand Yi(1 ≤ Xi≤ N; 1 ≤ Yi≤ M) – the weakness of ithmonster, ithcan be defeated by the Xithswordsman or Yitharcher.There can't be 2 monsters with the exact same weakness (there won't be any monster i and j where Xi= Xjand Yi= Yjfor all 1 ≤ i, j ≤ H and i ≠ j).OutputPrint H lines. Each line contains 1 number represents the answer to the king's question.Sample TestsInput4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4Output1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4Explanation for sample caseNotation: { swordsman troop number: monster number(s) defeated } { archer troop number: monster number(s) defeated }1stday: {1: 1} {}2ndday: {1: 1 2} {}3rdday: {1: 1 2 3} {}4thday: {1: 1 2 3} {1: 4}5thday: {1: 1 2 3} {1: 4 5}6thday: {1: 1 2 3;3: 6} {1: 4 5}7thday: {1: 1 2 3;3: 6 7} {1: 4 5}8thday: {1: 1 2 3;3: 6 7;4: 8} {1: 4 5}9thday: {1: 1 2 3;3: 6 7;4: 8 9} {1: 4 5}InformationThe constraints above is not typo, N and M can be as large as 1000 (1 Thousand), so H can be as large as 106(1 Million). So this problem has 10× larger constraints than the original one.Warning: Large Input/Output files, each file I/O can be as large as 7.5 Megabytes (7.5 MB), cin or cout probably too slow for I/O, it's recommended to use scanf/printf (I've tested it).If you find this problem too hard, you can try this first:https://jollybeeoj.com/problem/view/199original problem with smaller constraints.TriviaThe total size of file I/O in this problem is slightly more than 100 MB, took a while to generate, modify, and upload it. :)If the witch attack Jolly Kingdom everyday for 1 Million days that means the attack took more than 2500 years. :oIf I count number of operation in the deepest loop of my algo on worst case input, it will be 671,163,499 operations.Credit & Special thanksSandy Karunia- Developer ofJollybee Online JudgeAlvin Setiadi- Original problem author",
  "sample_input": "4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4",
  "sample_output": "1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4",
  "link": "https://www.spoj.com/problems/JOLLYKINGDOM",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4",
      "expected_output": "1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 9 10\n5 6\n7 4\n8 8\n9 10\n6 1\n3 4\n2 4\n9 10\n3 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 7\n9 1\n4 9\n8 8\n3 7\n2 3\n3 2\n4 4\n5 8\n3 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7 6\n10 5\n2 6\n9 6\n2 7\n3 5\n10 8\n9 9\n2 4\n9 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "82 90 60\n93 63\n68 99\n88 8\n61 8\n21 37\n50 40\n45 50\n20 38\n71 61",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 6 74\n63 63\n5 38\n100 64\n31 83\n20 9\n98 73\n44 90\n53 66\n76 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "79 70 74\n80 62\n96 25\n21 96\n34 80\n94 36\n87 28\n20 66\n70 59\n9 85",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 6 36\n47 33\n4 96\n10 73\n11 35\n14 70\n91 87\n35 13\n64 72\n32 65",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 39 56\n1 9\n30 71\n29 33\n82 49\n97 23\n6 10\n62 26\n37 49\n25 46",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "153 293 492\n493 456\n392 464\n390 405\n360 362\n118 213\n411 254\n219 194\n325 426\n400 481",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "410 93 374\n358 397\n466 344\n275 172\n272 128\n352 150\n361 280\n414 450\n52 342\n89 78",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "398 371 66\n51 121\n397 51\n160 387\n398 180\n238 424\n260 494\n408 237\n189 300\n348 302",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "144 93 88\n195 107\n433 138\n235 87\n368 375\n491 132\n354 151\n477 248\n293 465\n79 160",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "495 271 265\n394 500\n388 226\n179 118\n212 393\n451 360\n84 201\n383 409\n330 467\n309 460",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "205 245 297\n191 243\n468 436\n350 143\n143 449\n199 451\n125 290\n395 429\n201 76\n423 430",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "302 118 497\n306 500\n183 349\n455 450\n481 283\n178 394\n479 398\n455 180\n292 252\n394 265",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1000\n2 1\n2 2\n1000 1000\n1 1\n999 1\n1000 1000\n999 1000\n2 2\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000 999\n1000 1000\n999 999\n1000 999\n2 1\n1000 2\n1 999\n2 2\n1 2\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}