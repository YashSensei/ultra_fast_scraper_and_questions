{
  "problem_code": "problems",
  "title": "Count The Indexes 2",
  "tags": [],
  "text": "Let's deal with an array again, the most important data structure of computer science. You will be given an array. Now you have some operations to do. There will be three types of operations:Type 1: Insert a number after a given indexType 2: Change the value of an index.Type 3: You will get a number and two indices i and j where i ≤ j. You have to answer how many time the number appears in the array starting from i to j.InputEach file contains one test case.The first line contains an integer N, the number of initial array elements (1 ≤ N ≤ 100000) and Q, the number of queries (1 ≤ Q ≤ 100000). Second line contains N integers each in the range from 1 to 100000. Each of the next Q lines contains an operation. The operations will appear as the formats below:1 x y, where 1 ≤ x ≤ length of the array, which means you have to insert number y after the index x.2 x y, For this operation, you have to change the value of index x to value y.3 i j x, Here, you have to find how many times x appears in the array from i to j. Here x will always be present in the array and 1 ≤ i ≤ j ≤ length the array.OutputFor each operation of 3rd type, output the required answer in separate line.ExampleInput:5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706Output:1",
  "sample_input": "Input:5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CNTINDX2",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 9 5 1 6 7 9 1 2 6 1 7 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 10 4 1 10 5 1 1 5 7 7 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 7 10 9 3 6 3 8 9 7 5 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 19 13 19 4 41 73 8 98 28 92 66 5",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "79 85 20 47 75 67 44 88 78 96 75 71 95",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "99 67 28 90 88 40 98 80 96 27 50 57 10",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 30 2 31 79 43 6 39 41 97 19 88 25",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 27 74 99 48 52 84 42 72 85 80 50 76",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "29928 47121 5042 32905 23891 29846 23282 9961 25932 36707 18338 34279 25391",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "22391 24768 10368 15277 27060 17847 31105 24847 33759 33711 29923 39380 17428",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "22603 6343 45572 7257 45405 23201 5051 24262 39821 47042 7188 26847 24767",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35294 25029 28822 48108 31562 29602 26076 25390 10455 17340 26060 39339 29087",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6981 44678 8733 44257 26406 10740 10810 8972 24222 30696 44779 5266 12950",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "7876 10779 22821 38018 27919 7821 17401 12856 11440 23446 19346 43001 30090",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "47386 47979 19591 16661 33426 42737 23990 42293 49014 18530 20867 48800 33786",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 99999 99999 2 99999 100000 2 99999 1 2 2 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 100000 2 1 2 2 1 100000 1 100000 99999 100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:25",
  "total_test_cases": 20
}