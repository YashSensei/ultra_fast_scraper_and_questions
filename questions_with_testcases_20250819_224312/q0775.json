{
  "problem_code": "problems",
  "title": "Leonardo de Pisa",
  "tags": [],
  "text": "Leonardo de Pisa is a very cautious man, and even though Christmas is still many months away, he has already bought his Christmas tree. It is a very, very high tree, even higher than the Tower of Pisa. Leonardo wishes to decorate his tree by using colored balls and lights. To that end, he has bought many balls of each possible integer diameter between1andN. In fact, he has bought so many balls that he has no idea of what to do with all of them.In Pisa, each ball has two cords hanging from it, to which other balls can be attached. By doing so, they make sure that the balls never fall from the tree and roll all the way across the floor, until finally stopping underneath a big piece of furniture where they cannot easily be found. All of the cords hanging from all of the balls have a length of 20 centimeters.Just like any good Christmas tree, Leonardo's tree has a top. On it, Leonardo will place a ball of diameterN, as those are the most alluring. All of the other balls in the tree will hang from this top ball either directly, or indirectly by means of other balls. Leonardo has carefully studied the way in which he must hang the balls so that his tree is the most beautiful tree in all of Pisa, and he has arrived at the following conclusions:No ball of diameter1or2must have another ball hanging from it.Every ball of diameterk ≥ 3must have two balls hanging from it: one of diameterk-1, and the other of diameterk-2.The following pictures show two examples of how Leonardo's tree would look after decorating it with balls. The left figure corresponds to the case in which he buys every ball up to diameterN = 4, while the right figure corresponds to the case with balls of diameter up toN = 5(the number written on each ball indicates its diameter).There is always enough room for Leonardo to add as many balls as he wants, for his tree is incredibly tall. However, he still feels that his tree is not the most beautiful tree in the city: It is missing colored lights!Leonardo has bought a special string of lights suitable for trees with balls. The string hasKlights tied together by cord, such that the lights are separated from each other by 20 centimeters of cord. Each light fits perfectly onto some balls, depending solely on their size: a light of typeionly fits onto balls of diameteri, for eachibetween1andN. If the diameter of the ball is larger thani, the ball will not fit, and if it is smaller thani, the light will fall to the floor. Two lights can never be attached to the same ball, and the cord between the lights must always be perfectly tight. In particular, that means that if there is no cord in the tree between two balls, then their distance will not be exactly 20 centimeters, and so it will not be possible to place two consecutive lights on top of them.The following picture shows four different strings of lights, colored gray.By the time that Leonardo bought the string of lights, he had already finished decorating his tree with balls. It was such an effort to do so, that he is completely determined not to add, remove, or move any ball from the tree. Now he does not know if he will be able to use the string of lights that he bought, as he needs to find a sequence of balls in the tree that are adequately hanging from each other, and that have precisely the diameters that the lights fit onto.For example, the first string previously shown can be placed on each of the two trees; the second one can only be placed in the second tree; the third and fourth strings cannot be placed on any tree. The following picture shows the first string placed on the first tree, and the second string placed on the second tree.Help Leonardo to know, given the string of lights and the diameterNof the largest ball that he bought, whether it is possible to place the string of lights on his tree.InputThere are multiple test cases in the input file. For each test case, the first line contains two integersNandK, withNrepresenting the maximum diameter of the balls, andKrepresenting the number of lights in the string (2 ≤ N, K≤105). The second line containsKintegersL1, L2... Lkdescribing the string of lights. The ith integerLirepresents the type of thei-th light in the string (1≤Li≤Nforibetween1andK).OutputFor each test case, write a single line containing a single character, indicating whether Leonardo can place the string of lights or not. The character must be an 'S' if Leonardo can place the string of lights, and an 'N' otherwise.ExampleInput:3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1Output:S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
  "sample_input": "Input:3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1Output:S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016L",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1",
      "expected_output": "S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1\n7 2\n8 1\n8 3 8 4\n9 3\n8 5\n3 1\n8 9\n1 9\n6 7 9\n1 8\n3 8 3 6\n10 2\n8 10 3 3 10 1 3 9 9 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n8 7\n6 3\n4 5 6 10\n6 7\n1 5\n9 5\n5 3\n2 8\n5 10 1\n6 3\n5 2 10 8\n7 9\n10 3 10 6 7 8 3 10 2 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 5\n1 6\n8 5\n9 3 5 8\n7 4\n1 8\n7 5\n5 5\n3 7\n7 9 3\n1 9\n7 3 3 6\n5 1\n4 3 9 1 6 5 1 8 1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "50 83\n72 60\n36 36\n29 9 63 32\n23 8\n49 45\n36 21\n21 90\n80 62\n77 60 93\n3 26\n44 55 81 69\n77 46\n94 10 60 82 83 96 26 54 7 62",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 57\n97 2\n60 47\n98 85 87 71\n49 47\n8 98\n29 31\n90 35\n15 11\n26 71 72\n59 62\n6 74 92 81\n5 24\n1 40 28 37 96 45 11 23 1 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "66 90\n42 15\n81 3\n91 94 26 76\n20 49\n85 26\n3 66\n94 36\n5 75\n88 4 14\n95 94\n4 76 57 65\n38 4\n68 91 62 94 27 80 34 84 60 49",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "22 88\n65 98\n16 70\n68 53 67 91\n62 36\n35 18\n73 11\n37 30\n2 56\n86 85 61\n49 59\n81 83 50 51\n78 79\n76 18 6 37 5 65 75 66 87 34",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 84\n87 35\n75 41\n44 67 79 78\n22 17\n1 95\n69 47\n66 67\n65 10\n82 70 9\n55 1\n40 77 12 66\n18 3\n54 54 98 3 84 14 51 26 63 6",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "194 127\n332 359\n216 423\n375 223 422 109\n100 471\n50 490\n330 74\n373 419\n461 220\n226 363 385\n491 224\n137 369 262 388\n188 52\n251 318 446 201 147 190 354 294 241 176",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "68 167\n259 145\n373 230\n383 329 495 236\n209 176\n443 438\n176 183\n318 393\n210 143\n117 118 400\n305 256\n449 241 174 482\n91 455\n97 123 353 300 476 54 240 215 260 305",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "409 472\n289 330\n273 489\n253 436 478 298\n278 217\n347 451\n304 340\n289 264\n400 341\n334 56 368\n119 389\n393 140 260 142\n253 235\n281 289 490 137 418 102 193 315 261 320",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "225 339\n451 242\n184 126\n274 115 317 138\n343 112\n486 490\n284 212\n436 176\n240 475\n227 185 294\n346 372\n85 364 333 80\n302 120\n251 147 400 102 123 80 185 436 267 433",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "60 474\n306 400\n52 393\n266 491 186 243\n353 103\n274 321\n370 242\n185 253\n457 417\n468 103 347\n175 128\n427 191 396 266\n366 78\n86 317 440 142 255 294 293 311 478 485",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "406 235\n154 259\n171 436\n408 203 321 481\n222 476\n378 474\n259 450\n81 178\n368 108\n241 97 265\n369 436\n483 329 386 391\n177 258\n410 437 416 113 144 406 358 431 313 139",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "75 419\n363 459\n270 73\n409 265 445 327\n259 189\n474 242\n159 390\n381 183\n152 57\n187 73 230\n444 155\n373 146 452 237\n462 241\n104 222 177 225 449 431 398 351 350 200",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999\n999 1000\n999 1\n1000 1000 1 2\n1 1000\n1 1\n1000 2\n2 1000\n1 999\n1000 999 999\n1 2\n999 1 2 1\n2 1000\n2 1000 999 1 2 1 1000 1 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999\n999 2\n999 2\n1000 2 1 2\n999 2\n1 1\n1000 1\n1 1000\n1 1000\n1000 1 1\n1 2\n1000 999 1000 1000\n2 1000\n1000 1000 999 1000 999 2 1000 2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}