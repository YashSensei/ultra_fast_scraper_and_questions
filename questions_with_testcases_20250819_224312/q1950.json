{
  "problem_code": "problems",
  "title": "Tie the Rope",
  "tags": [],
  "text": "Sailor Crow'n-beard has many pieces of rope. Every piece has a different value and it is well known that money equals quality. Crow'n-beard wants you to create a program that given pieces of rope, creates a rope with the length as close as possible to his desired length (but never too short) while maximizing the quality.InputInput describes a single test case. The first line contains two integersN(1 ≤N≤ 80) andL(1 ≤L≤ 10000): the number of rope pieces Crow'n-beard and the desired length respectively. ThenNlines will follow, each with two integers: the lengthLi(0 ≤Li< 2^31) followed by the valueVi(0 ≤Vi≤ 26843545) of the piece of rope. It is guaranteed that the sum ofLiis never less thanL.OutputYou should output the maximal total quality you can reach. Remember that the priority is to get the smallest total length that is still at least equal toL. Only then output the best total quality amongst equal length solutions.SampleInput:4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7Output:8",
  "sample_input": "Input:4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7Output:8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TIEROPE",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7",
      "expected_output": "8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10\n8 6\n1 5\n9 4\n6 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1\n4 2\n10 10\n8 10\n1 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5\n7 5\n2 10\n7 9\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 61\n13 54\n52 7\n31 71\n22 20",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "74 60\n70 26\n4 1\n51 34\n54 11",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "26 72\n6 15\n69 62\n21 13\n52 76",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 19\n62 8\n35 54\n62 63\n79 36",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 11\n80 43\n29 33\n16 8\n59 21",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19 24\n29 40\n19 29\n38 7\n8 12",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10 28\n37 35\n14 14\n28 32\n24 6",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "6 29\n12 39\n4 18\n29 36\n32 38",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "8 38\n39 23\n38 15\n15 35\n19 4",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "40 34\n5 39\n17 30\n11 24\n29 26",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 4\n35 38\n35 25\n37 22\n31 24",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "21 32\n27 9\n39 11\n4 7\n35 28",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "80 80\n80 80\n80 80\n80 80\n80 80",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "80 80\n80 80\n80 80\n80 80\n80 80",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 80\n80 1\n80 1\n79 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "80 79\n80 80\n79 80\n1 1\n79 80",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}