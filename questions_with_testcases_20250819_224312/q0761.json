{
  "problem_code": "problems",
  "title": "Count on a tree II",
  "tags": [],
  "text": "You are given a tree withNnodes.  \r\nThe tree nodes are numbered from1toN.  \r\nEach node has an integer weight.We will ask you to perform the following operation:u v: ask for how many different integers that represent the weight of nodes there are on the path fromutov.InputIn the first line there are two integersNandM. (N≤ 40000,M≤ 100000)In the second line there areNintegers. The i-th integer denotes the weight of the i-th node.In the nextN-1lines, each line contains two integersuv, which describes an edge (u,v).In the nextMlines, each line contains two integersuv, which means an operation asking for how many different integers that represent the weight of nodes there are on the path fromutov.OutputFor each operation, print its result.ExampleInput:8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8Output:4\r\n4",
  "sample_input": "Input:8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8Output:4\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COT2",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8",
      "expected_output": "4\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7\n9 2 9 6 7 3 3 6\n9 7\n8 2\n5 3\n10 4\n2 3\n8 1\n1 4\n7 10\n4 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 1\n3 6 7 4 9 7 9 3\n3 7\n1 3\n7 10\n3 2\n9 9\n7 7\n4 8\n4 8\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n5 2 3 1 7 1 5 5\n4 3\n1 5\n9 2\n10 3\n9 8\n8 8\n7 6\n4 8\n8 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 23\n25 21 12 14 51 20 81 26\n26 83\n30 12\n51 78\n30 85\n9 58\n89 59\n54 44\n17 21\n68 22",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 95\n50 82 59 79 65 28 57 36\n63 25\n7 93\n12 92\n97 100\n8 89\n1 48\n78 64\n69 28\n74 54",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 59\n27 43 98 44 98 30 66 48\n18 7\n11 87\n2 41\n4 64\n48 38\n34 62\n2 77\n14 98\n67 22",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 74\n8 10 47 12 93 99 32 95\n87 40\n15 61\n45 60\n12 87\n32 29\n45 10\n89 60\n76 47\n1 28",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "96 6\n72 58 13 64 92 22 85 35\n81 5\n87 79\n37 19\n42 34\n48 18\n94 72\n99 36\n77 20\n76 80",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "9696 16335\n19478 17348 8600 6810 12446 15088 8895 5585\n7585 15373\n16326 11138\n14045 5660\n17482 15397\n10559 8535\n7847 4490\n7564 19906\n14208 10615\n12124 18806",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10009 14154\n11598 8069 12014 10171 4749 4988 10768 19892\n6972 13678\n10330 17908\n13431 5472\n18151 9661\n18543 5041\n6297 17429\n3918 6875\n7684 10858\n15244 13889",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "3516 18890\n16266 17088 8860 15418 18014 18322 19741 8713\n17325 7870\n12894 19875\n19234 4826\n7550 6672\n2062 2593\n14483 2594\n10408 14023\n9748 3242\n14159 9221",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16894 17185\n18915 7317 16929 13831 2991 3197 7806 14255\n3228 14552\n5248 8361\n18671 6070\n14223 13457\n9221 5717\n19934 2383\n4940 7916\n19109 11493\n7293 9063",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2821 18499\n5701 19950 16344 2851 13805 5031 14356 11899\n6237 7275\n7795 8300\n13686 12779\n12373 16834\n18971 18266\n9819 13522\n6644 19738\n2274 2256\n13222 8280",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "10170 7498\n2917 12758 19850 7891 10677 16713 17806 19266\n13043 11644\n12181 6254\n15872 7411\n15505 10969\n13445 10418\n2143 4473\n11264 4415\n13545 4821\n17370 10170",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7882 10423\n9259 17098 10386 5989 4061 4396 8387 5974\n9919 2807\n6112 18738\n15429 4046\n16100 10466\n4920 8309\n18581 17693\n10972 9694\n11939 10487\n4660 2988",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "40000 40000\n40000 40000 40000 40000 40000 40000 40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "40000 40000\n40000 40000 40000 40000 40000 40000 40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "40000 2\n2 1 2 40000 1 1 2 1\n39999 39999\n39999 2\n2 40000\n2 1\n40000 2\n39999 1\n1 1\n40000 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "39999 39999\n1 40000 39999 40000 1 2 1 1\n40000 39999\n40000 39999\n1 40000\n39999 39999\n40000 40000\n2 39999\n39999 2\n40000 1\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}