{
  "problem_code": "problems",
  "title": "Happiness",
  "tags": [],
  "text": "You are given an array on N elements a[1], a[2], a[3] ... a[N].Now you will have to answer some queries.In every query, you will be given an interval, [l, r]. For this interval you have to print the total summation of happiness of all the elements of the given array between the interval [l, r].The happiness of an element a[i] between interval [l, r] is: the number of sub-array [lj, rj] where the minimum value between [lj, rj] is equal to a[i]. Here,l ≤ lj≤ i and i ≤ rj≤ r.Now, you have to print the total summation of happiness of all the elements between [l, r].InputThe first line of the input contains the number of test cases T. The first line of each test case contains two numbers, N and M. N is the number of elements in array a and M is the number of queries you need to perform.The next line contains N integers, the array a: a[1], a[2], a[3] ... a[N].Next M lines contains two integers, l and r.Constraints1 ≤ T ≤ 51 ≤ N, M ≤ 500001 ≤ a[i] ≤ 10000000001 ≤ l ≤ r ≤ NOutputFor each test case, you need to print the case number on the first line in this format: Case X: where X is the case number.In the next M lines, you need to print the total summation of happiness of all the elements between [l, r] of the given array.ExampleInput:25 21 3 2 4 31 32 45 25 3 7 6 81 42 5Output:Case 1:66Case 2:1010Problem Setter: Raihat Zaman Neloy. Used in Eid 2016 contest. For more about Eid 2016 contest:Click Here",
  "sample_input": "Input:25 21 3 2 4 31 32 45 25 3 7 6 81 42 5Output:Case 1:66Case 2:1010",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HAPPINESS",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "25 21 3 2 4 31 32 45 25 3 7 6 81 42 5",
      "expected_output": "Case 1:66Case 2:1010",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7 10 3 9 7 6 6 8 6 8 8 3 4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 6 8 2 8 3 1 9 1 3 5 3 10 7 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 2 10 2 5 5 5 4 1 10 8 1 7 8 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 18 69 97 8 69 95 6 3 87 70 9 2 43 70",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 52 77 16 95 20 96 88 40 89 99 52 47 32 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "39 34 45 92 99 20 4 18 100 25 18 38 17 25 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "61 44 84 5 21 96 76 69 14 26 64 61 15 81 60",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 4 18 62 61 20 100 27 15 87 24 83 30 39 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "346 333 481 353 241 102 499 250 466 411 122 124 456 68 64",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "222 267 487 400 438 190 490 426 275 417 174 175 411 208 51",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "437 372 102 352 284 487 54 123 414 247 325 289 85 288 78",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "389 133 294 131 159 466 334 178 335 310 363 257 244 326 194",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "396 490 488 54 475 82 230 375 53 408 277 209 482 240 224",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "492 395 355 265 314 224 64 135 51 210 499 283 101 345 345",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "207 195 360 447 179 456 127 263 351 439 185 487 398 62 174",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1 999 2 1 2 2 1000 1 2 1000 1000 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 1000 2 2 1 1000 1000 1000 1 1 999 999 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:21",
  "total_test_cases": 20
}