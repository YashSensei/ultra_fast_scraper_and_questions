{
  "problem_code": "problems",
  "title": "Symmetric matrix 2",
  "tags": [],
  "text": "[Note:Symmetric Matrixis an easier version of this problem; you should try to solve it before this one.]You are given anNxNmatrixmijsuch thatmij== mjifori, j = 1, ..., N. We would like to compute the value ofNote that in the above expression we are going overKindicesi1, ..., iKthat run over the values1, ..., N, while summing over the product of all theK*(K-1)/2possible matrix elements that we can form with these indices.InputThe first line of the input contains two integersNandK(2 ≤ N ≤ 100and2 ≤ K ≤ 10), representing the number of rows and columns of the matrixmijand the number of sums in the formula above, respectively. The followingNlines containNintegers each, being thej-th number in thei-th line the value ofmij(-10  ≤ mij≤ 10andmij== mjifori, j = 1, ..., N).OutputPrint a single line with the result of the calculation. Because this number can be very big, output its remainder modulo division by1000000007(== 109+7).ExampleInput:4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0Output:308822466",
  "sample_input": "Input:4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0Output:308822466",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MATPROD2",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "4 54 5\r\n-4 -3 -4 2\r\n-3 -6 1 -8\r\n-4 1 -10 -6\r\n2 -8 -6 0",
      "expected_output": "308822466",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 5 9\n6 7 1 4\n9 2 2 6\n3 5 2 1\n1 3 7 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 1\n7 3 4 9\n6 10 8 7\n5 1 6 4\n3 3 10 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 6\n4 6 3 9\n9 5 3 8\n3 1 1 9\n6 4 7 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "95 37 37\n56 3 20 14\n7 76 70 14\n84 17 89 58\n13 52 97 76",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "95 4 66\n37 78 45 58\n52 83 8 34\n82 64 50 31\n41 23 18 99",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 52 50\n67 2 58 82\n40 30 76 22\n24 38 77 5\n48 68 30 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 80 59\n89 13 85 70\n1 39 54 40\n62 78 64 86\n49 16 19 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 3 25\n29 64 16 63\n46 79 40 52\n2 1 3 23\n89 91 18 6",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 27 44\n43 48 9 18\n21 5 37 46\n26 46 33 41\n30 16 25 46",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "27 25 26\n8 33 20 45\n41 27 40 44\n35 47 30 13\n29 36 35 10",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "50 7 23\n36 15 26 33\n47 27 25 29\n39 13 12 20\n9 25 9 43",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "7 5 21\n46 17 27 29\n13 32 32 40\n6 47 16 22\n31 41 46 36",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6 19 45\n29 48 44 39\n19 45 20 34\n38 8 31 10\n42 22 34 47",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "45 37 21\n18 17 43 10\n6 50 11 11\n38 32 46 20\n40 26 32 38",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "11 7 44\n49 50 40 46\n9 12 10 19\n24 19 16 37\n46 12 50 50",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1\n1 99 99 100\n99 100 100 1\n1 1 2 2\n99 2 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 2 100\n99 1 1 100\n2 99 1 2\n99 99 100 2\n99 1 99 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}