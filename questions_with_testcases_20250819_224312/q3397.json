{
  "problem_code": "problems",
  "title": "Nuclear Plants",
  "tags": [],
  "text": "The Great Plain of Algorithmia plays an extremely important role in the agriculture of the Bandulu Kingdom: this is the only place where barley (Hordeum vulgare), an essential ingredient of beer, can be produced. Unfortunately, it is not possible to grow barley on the full area of the plain, as several nuclear plants have recently been built, and you cannot grow barley near a nuclear plant (since you do not want to produce giant-size, aggressive, man-eating barley-mutants). Your task is to write a program that determines the size of the area that can be used for growing barley.The Great Plain of Algorithmia is an n * m km2rectangle, the coordinates of the four corners being (0, 0),(0, m),(n, 0) and (n, m). There are two types of nuclear plants: small and large. You are not allowed to grow barley within 0.58km of a small nuclear plant or within 1.31km of a large nuclear plant.InputThe input contains several blocks of test cases. Each block begins with a line containing four integers: 1 <= n, m <= 10000 describe the size of the plain, ks <= 100 is the number of small nuclear plants, and kl <= 100 is the number of large nuclear plants. The next ks lines describe the coordinates of the small nuclear plants, each line contains two integers 0 <= x <= n and 0 <= y <= m . The next kl lines describe the large nuclear plants in a similar fashion.The input is terminated by a block with n = m = ks = kl = 0 .OutputFor each test case, you have to output a single line containing the area that can be used for growing barley. This number should be a real value with two digits of precision. To avoid rounding problems, we accept solutions with a maximum of 0.01(positive or negative) error.ExampleInput:10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0Output:87.46\r\n98.94",
  "sample_input": "Input:10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0Output:87.46\r\n98.94",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ORZ",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0",
      "expected_output": "87.46\r\n98.94",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 10 1 3\n1 9\n9 9\n10 3\n3 3\n5 6 9 4\n3 4\n4 7 1 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 3 8 4\n4 4\n8 9\n2 6\n2 2\n8 2 3 9\n8 3\n5 10 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 9 6 10\n1 5\n4 4\n9 5\n3 9\n4 1 4 4\n4 3\n5 8 6 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 19 11 60\n61 13\n15 74\n75 40\n2 10\n14 45 77 85\n9 39\n84 7 26 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "81 82 36 23\n19 11\n87 30\n85 82\n43 99\n93 5 65 71\n35 13\n86 15 22 41",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 64 18 3\n73 66\n89 60\n74 85\n65 72\n65 41 31 36\n69 96\n97 70 96 80",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "68 79 20 67\n1 91\n63 91\n44 23\n7 69\n27 49 51 89\n42 26\n12 24 16 22",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 23 75 44\n60 74\n85 52\n21 24\n52 72\n48 74 22 14\n87 87\n16 82 22 80",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "384 217 80 479\n238 404\n63 383\n142 234\n229 285\n181 490 371 183\n370 101\n215 134 273 372",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "282 318 119 469\n478 224\n362 434\n217 435\n102 272\n204 211 274 431\n217 339\n263 453 125 113",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "175 255 159 87\n463 320\n472 104\n312 266\n177 122\n58 337 306 69\n373 90\n164 127 453 219",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "390 451 346 168\n159 489\n426 64\n224 164\n334 339\n446 464 445 493\n327 258\n208 200 77 440",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "153 58 147 282\n103 293\n293 466\n272 285\n85 122\n243 310 365 348\n403 180\n245 248 404 449",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "371 116 500 475\n167 364\n172 340\n432 107\n110 365\n150 500 460 437\n416 341\n115 350 88 441",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "452 76 217 283\n235 144\n80 70\n167 105\n204 145\n299 364 210 357\n385 320\n249 91 220 206",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1000 1\n1 999\n2 1\n999 999\n2 1000\n999 2 2 2\n1 1000\n1000 1 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 999 1\n2 1000\n2 1000\n2 1\n1 1\n1000 1000 1000 2\n1000 999\n1000 1000 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}