{
  "problem_code": "problems",
  "title": "Game Of Ones",
  "tags": [],
  "text": "Haba and Goba are brothers, they love binary numbers very much. Today is Haba’s birthday so, his uncle gifted him a 3 bit binary string.  Getting the present, both of them are very happy. Now, Goba asked Haba that using 3 bits how many different binary numbers he can write, whose 1stbit is 1 and total how many 1 will be needed to write those numbers. Haba answered he can write 4 different numbers using 3 bits whose first bit is 1 and those numbers are 4 (100), 5 (101), 6 (110) and 7 (111) and to write these 4 numbers in binary he will need 8 ‘1’. Now Goba told Haba that he will tell Haba the length of a binary string n and Haba will have to answer that  using n bits how many different binary numbers he can write, whose 1stbit is 1 and total how many 1 will be needed to write those numbers. If Haba can answer correctly he will get more binary strings as present. Haba wants to get more binary string as present but, he doesn’t know the answer of the question of Goba for bigger value of n, so now he wants your help. Help him to find the answer.InputThe first line contains a positive integer number, t (1 ≤ t ≤ 50) indicating the number of test cases. Each test case contains a positive integer number, n (1 ≤ n ≤ 50) indicating the number of bits.OutputFor each test case you have to output two numbers, whose first and second number indicates the answer of Goba’s first and second question respectively.ExampleInput:2\r\n2\r\n3Output:2 3\r\n4 8",
  "sample_input": "Input:2\r\n2\r\n3Output:2 3\r\n4 8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOO",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "2\r\n2\r\n3",
      "expected_output": "2 3\r\n4 8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n5\n8\n7\n9\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n7\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n26810523\n2159817\n60092278\n70990703\n94223863\n67362572\n15200413\n12661405\n35098708\n92310379\n88238385\n97482981\n39791595\n79342673\n21880232\n22520095\n67963765\n59504852\n69320014",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n38850649\n93570824\n86632728\n85372797\n19880846\n65841415\n69075523\n58988787\n56268584\n90253182\n35099415\n90631779\n20347174\n14525264\n8902237",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n13198354\n20205096\n67228243\n17674639\n2925218\n7514667\n78620986\n81529305\n56275979\n51674427\n25704085\n95232491\n41994684",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n15558482\n4083885\n86118325\n83542032\n75055544\n45690396\n24909519\n22565793\n51964496\n33783797\n4618747\n7480175\n55426447\n61478644\n28148106\n6491697\n12006373\n4483601\n90840255",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n76445952\n19701014\n23392054\n32458066\n62506883\n82023297\n66695540\n85253756\n66170772\n72609459\n59127585\n61689298\n91751819\n48204155\n32565054\n24009492",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "34\n55018\n75943\n62952\n90763\n22769\n46494\n6496\n78507\n61074\n9355\n54886\n74255\n27227\n21286\n46358\n39130\n72763\n58996\n21762\n77595\n78122\n16843\n75944\n86859\n75322\n40523\n51375\n91399\n20708\n7924\n81263\n45144\n47151\n26589",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "49\n56413\n34584\n14162\n6877\n62915\n517\n945\n99442\n1308\n44593\n66700\n30697\n20037\n33904\n85219\n26488\n97433\n83498\n8843\n15182\n33789\n74354\n45877\n73290\n57452\n52819\n5763\n23926\n90090\n2144\n34983\n23570\n58624\n95289\n92837\n38089\n305\n5004\n99582\n25887\n38756\n28339\n58286\n97533\n37021\n5616\n59996\n22645\n27055",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "36\n64587\n99147\n55995\n76981\n54702\n29192\n15473\n81073\n88961\n8616\n720\n8433\n18450\n57497\n72826\n32036\n65212\n602\n64423\n79054\n27461\n95661\n67128\n75595\n29336\n17366\n52882\n27043\n11517\n70177\n42444\n83\n30178\n9346\n49578\n60020",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n36174\n52313\n96924\n67783\n90361\n87779\n44445\n11676\n43649\n60947\n33408\n3869\n90389\n86402\n8262\n45652\n61003\n69062\n62593\n28967\n9536\n26380\n95176\n89741\n9770\n46969\n51433\n91737\n23614\n63427\n67125",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n63433\n97524\n94851\n85846\n14188\n67443\n76055\n6503\n50519\n60977\n17159\n13830\n23545\n26944\n21158\n40295\n72765\n57208\n91758\n58017\n78820\n12530\n88595\n60832\n87062\n48833\n35585\n73747\n8060\n8048\n85196\n23435\n73180\n3176",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "44\n41305\n77395\n18190\n53553\n7866\n44791\n33460\n2377\n36946\n18108\n53841\n95590\n91257\n18746\n5771\n82972\n37895\n55614\n82424\n40062\n56437\n84748\n70078\n41159\n78134\n31369\n84921\n80811\n84631\n67906\n48370\n81959\n42691\n48157\n71199\n86989\n24733\n51107\n24697\n86082\n87187\n33392\n73320\n80873",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n56318\n14684\n42343\n43461\n81009\n31164\n43280\n5249\n1930\n74788\n46735\n5188\n71025\n74415\n90401\n3704\n16636\n83522\n82195\n97933\n29343\n5744\n24419\n48597",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n18021367\n32432088\n69719810\n35926315\n24051166\n63314919\n55186440\n15176283\n27401088\n51697320\n19044419\n13748309\n17957095\n81651939\n82960059\n69216821\n63985645\n72224695\n12925586\n48121292\n96392704\n80343752\n95745519\n56114528\n41820934\n946185\n34811680\n9843788\n91682968\n27322785\n53347554\n17906466\n443024\n5948099\n20453400\n16646388\n4513597\n37257625\n21897533\n15132955\n48498162\n13180035\n11235558\n8536755\n1383442\n37548097\n97900563\n28526210\n65219234\n40230394",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n8193425\n15535033\n55520254\n57103447\n13194752\n20642745\n18668567\n88583550\n74258596\n95966204\n19577188\n98049557\n61475455\n42867162\n31064437\n95502181\n25874483\n19330556\n75298194\n33370790\n92294606\n71577099\n50261231\n80877093\n90209447\n76863403\n48224202\n79311429\n94972408\n74041373\n99594912\n58069293\n12716670\n86717184\n59695986\n70016568\n26671130\n95288619\n60629178\n13748212\n14169356\n75257566\n61909491\n71310233\n41567026\n37278288\n61499963\n3512778\n17908997\n69701934",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n1\n77965099\n1\n77176089\n100000000\n1\n1\n100000000\n100000000\n1\n1\n100000000\n9283638\n100000000\n37973816\n14433887\n100000000\n100000000\n96916445\n100000000\n1\n71058030\n39350623\n100000000\n100000000\n91900176\n100000000\n100000000\n94580805\n89951658\n1\n100000000\n87301196\n96279285\n68110685\n100000000\n100000000\n23442334\n1\n100000000\n1\n93566731\n100000000\n23483474\n49632840\n81136546\n1\n1\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 50)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}