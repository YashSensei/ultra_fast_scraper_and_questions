{
  "problem_code": "problems",
  "title": "MELE3",
  "tags": [],
  "text": "EnglishVietnameseSolitaire has N elevators. Each elevator are connecting exactly two\r\nfloors and it does not stop on the floors between that two floors\r\nThe speed of all the elevators are the same, 5 seconds to pass one floor.On the beginning, each elevator is in its lower position and they\r\nare starting cruising to the upper floor. After some elevator come\r\nto its upper position, it immediately starts to go back to its lower\r\nposition, and so on...Mirko is on the first (the lowest) floor and he wants as quick as\r\npossible come to the top of the solitaire. He can change elevators\r\nonly on the floors that are common to both elevators, and if the other\r\nelevator is in that moment on that floor, that change\r\ndoes not take any time.Write a program that will calculate minimal time in which Mirko can get\r\nto the top of the solitaire.InputIn the first line of the input file there are two integers K\r\nand N, separated with space, number of floors in solitaire and\r\nnumber of elevators, 2 ≤ K ≤ 1000, 1 ≤ N ≤ 50000.In each of the next N lines there are description of one elevator,\r\ntwo integers A and B, separated with space, 1 ≤ A < B ≤ K, means that\r\nelevator is travelling between floors A and B.There are no two different elevators that travels between same floors.Note: input data will guarantee that solution will always exists.OutputIn the only line of output file write minimal time (in seconds) from\r\nthe text above.SampleInput:10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10Output:45Input:10 3\r\n1 5\r\n3 5\r\n3 10Output:105Input:20 5\r\n1 7\r\n7 20\r\n4 7\r\n4 10\r\n10 20Output:150",
  "sample_input": "Input:10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10Output:45",
  "sample_output": "Input:10 3\r\n1 5\r\n3 5\r\n3 10Output:105",
  "link": "https://www.spoj.com/problems/MELE3",
  "scraped_at": "2025-08-17 00:33:53",
  "test_cases": [
    {
      "input": "10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10",
      "expected_output": "45",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3\r\n1 5\r\n3 5\r\n3 10",
      "expected_output": "105",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "8 10\n6 9\n2 2\n5 2\n9 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n9 10\n7 2\n6 3\n9 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 7\n3 2\n8 5\n5 2\n8 8",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "18 5\n25 58\n31 86\n49 84\n33 46",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "50 43\n61 7\n37 47\n64 22\n50 41",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 55\n66 96\n56 53\n3 100\n27 16",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "4 100\n26 68\n39 94\n34 95\n6 98",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "43 89\n75 95\n70 37\n94 61\n81 92",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "21262 16284\n16904 23323\n17421 8368\n11332 12973\n5933 18353",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "18125 17545\n12122 2700\n22417 22961\n11050 23484\n11508 11913",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17835 10209\n9779 20284\n8697 5265\n7583 12137\n16149 13402",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "15711 21516\n19233 17474\n3310 20917\n23712 17151\n2830 5518",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "18621 10834\n14919 14005\n17190 6195\n16351 8758\n22527 8501",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20766 12799\n12151 5357\n3887 14635\n11260 17078\n5482 10575",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "2962 15990\n3840 11303\n10150 15161\n13267 16596\n7072 13328",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "50000 2\n49999 50000\n50000 50000\n49999 2\n2 50000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}