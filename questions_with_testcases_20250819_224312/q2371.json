{
  "problem_code": "problems",
  "title": "Advanced Fruits",
  "tags": [],
  "text": "The company \"21st Century Fruits\" has specialized in creating new sorts of fruits by transferring genes from one fruit into the genome of another one. Most times this method doesn't work, but sometimes, in very rare cases, a new fruit emerges that tastes like a mixture between both of them.A big topic of discussion inside the company is \"How should the new creations be called?\" A mixture between an apple and a pear could be called an apple-pear, of course, but this doesn't sound very interesting. The boss finally decides to use the shortest string that contains both names of the original fruits as sub-sequences of the new name. For instance, \"applear\" contains \"apple\" and \"pear\" (APPLEar and apPlEAR), and there is no shorter string that has the same property.A combination of a cranberry and a boysenberry would therefore be called a \"boysecranberry\" or a \"craboysenberry\", for example.Your job is to write a program that computes such a shortest name for a combination of two given fruits. Your algorithm should be efficient, otherwise it is unlikely that it will execute in the allotted time for long fruit names.Input SpecificationEach line of the input file contains two strings that represent the names of the fruits that should be combined. All names have a maximum length of 100 and only consist of alphabetic characters.Input is terminated by end of file.Output SpecificationFor each test case, output the shortest name of the resulting fruit on one line. If more than one shortest name is possible, any one is acceptable.Sample Inputapple peach\r\nananas banana\r\npear peachSample Outputappleach\r\nbananas\r\npearch",
  "sample_input": "apple peach\r\nananas banana\r\npear peach",
  "sample_output": "appleach\r\nbananas\r\npearch",
  "link": "https://www.spoj.com/problems/ADFRUITS",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "apple peach\r\nananas banana\r\npear peach",
      "expected_output": "appleach\r\nbananas\r\npearch",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "qa rp\nm tjt\nnv iihx",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "bp gso\nncsjlw bac\nbojl xhey",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "smcw znmal\nt muwfk\noh zsuj",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "jp j\nto s\ndo a",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "rqsjb xkot\nw ywgl\nweku j",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "e ljx\nyyst wmwca\nked dq",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "dbj jy\ng yy\ngk yl",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "wpx ehz\nhrul a\nem ar",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "pe ktak\ncameum ompapw\nxyrju aehur",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "trj qnwq\nkb nsxbb\nqvxn izxg",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "hhcu vvdm\ngltg e\nm vtkea",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "qhtt dsml\nvllslq ryxofr\ngph lxj",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "pn o\nfyhg t\nomqiq vsa",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "nbu xdix\nglvt ys\ndim ombip",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "klfjk f\nfrixc tpgixm\nehw gkrlt",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "jb emof\nnj k\nq ufd",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "kjj ueaa\nl qtqf\nd km",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "rac cxe\nf z\ne kjch",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "jbj ci\ndxniqe lxhwaq\nah yh",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}