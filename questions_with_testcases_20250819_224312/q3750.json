{
  "problem_code": "problems",
  "title": "The Glazier 2",
  "tags": [],
  "text": "Jozo the glazier has once again made N square pieces of glass. The dimensions (sides) of these squares are equal to 1, 2, 3, ... N - therefore, the areas of these squares equal to 12, 22, 32, ... N2.Four customers have arrived once again. This time Jozo will sell all N squares of glass. Again, each of the customers must get the same total area of glass (which equals the total area of all N squares divided by four).Help Jozo and divide his N pieces of glass among the four customers. Assume that the solution (not necessarily unique) exists in all of the test data.InputAn integer N (10 ≤ N ≤ 60).OutputIn the first line, print four numbers: the number of pieces of glass assigned to the first, to the second, to the third and to the fourth customer (respectively).In ithof the next four lines, print the dimensions of the squares of glass assigned to the ithcustomer. (Each square must be assigned to exactly one customer.)ExampleInput:15Output:4 4 4 3\r\n3 6 11 12\r\n4 5 10 13\r\n1 7 8 14\r\n2 9 15",
  "sample_input": "Input:15Output:4 4 4 3\r\n3 6 11 12\r\n4 5 10 13\r\n1 7 8 14\r\n2 9 15",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GLASS2",
  "scraped_at": "2025-08-17 00:34:37",
  "test_cases": [
    {
      "input": "15",
      "expected_output": "4 4 4 3\r\n3 6 11 12\r\n4 5 10 13\r\n1 7 8 14\r\n2 9 15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n2\n9\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n8\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "17\n62347754\n67231415\n14059373\n54793342\n59149549\n64386449\n24609393\n8104545\n71273530\n43835873\n25944101\n67877799\n83724035\n38634670\n46351310\n83518342\n35659558",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n58547341\n10648549\n38308387\n85309975\n72000868\n76898323\n76661922\n68176719\n33132259\n43733722\n61052119\n71205296\n13458302\n88147073\n34885879",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n59212350\n52509610\n39853392\n67717052\n30538621\n53442911\n19986586\n17732527\n51277251\n4448934\n45539157\n12611943\n40919838\n43199863",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n67773565\n65626552\n3533234\n94736500\n84250374\n1931665\n4479517\n17159387\n40713866\n80725933\n9174726\n63224522",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n82613347\n87367755\n61201421\n34144845\n93693085\n31431446\n65545305\n13369680\n12348292\n501471\n45485003\n45710877\n63573538\n88349018\n5814350\n51125240\n18118209\n36283177\n52225",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "48\n57395\n3577\n83823\n44410\n27340\n93883\n21991\n12748\n92987\n40034\n15072\n29866\n19698\n8161\n31300\n67644\n43936\n68424\n34938\n90273\n84442\n42719\n22252\n26149\n47725\n82355\n89297\n2012\n10372\n61667\n11925\n92697\n13086\n24063\n69445\n45886\n76615\n92339\n20292\n69478\n84680\n73708\n33226\n62987\n82826\n24740\n15617\n19208",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n31144\n25874\n20166\n1656\n30416\n2901\n76464\n26534\n12484\n49774\n72018\n35763\n76023\n65025\n59293\n39933\n63069\n89076\n10427\n99199\n57133\n71157\n15680\n31665\n81517\n78294\n8336\n85752\n97398\n27615\n94994\n44711\n66347\n72109\n78919\n51551\n4415\n60309\n8425\n73567\n41405\n4625\n11971\n30899\n17170\n77096\n27539\n23231\n76973\n27093\n90882\n64581\n1336\n41433\n95067\n47135\n63052\n83613\n81322\n20869",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "58\n53612\n72554\n89712\n39223\n20962\n41862\n63716\n39961\n2649\n15619\n41999\n72741\n60386\n66536\n27829\n54592\n36072\n50207\n34598\n74485\n98525\n19910\n54551\n58777\n91377\n36950\n49694\n12489\n52694\n94464\n21159\n12164\n1449\n9329\n45691\n70395\n43278\n64356\n19735\n52910\n63224\n87527\n94026\n55008\n91590\n212\n3045\n94949\n35281\n27355\n35844\n77341\n21064\n80979\n92596\n26254\n5108\n98174",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n41866\n67156\n79425\n52521\n47841\n80687\n98048\n87979\n86789\n20420\n3860\n53043\n21648\n44412\n32416\n579\n64311\n34834\n71600\n19045\n84586\n20154\n65271\n36583\n3842\n8597\n38591\n82406\n6512\n65469\n76374\n49020\n77708\n87550\n90887\n26556\n90265\n47418\n69824\n23399\n85422\n14829\n60043\n55879\n65250\n31114\n11564\n79735\n55291\n52960",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "54\n50324\n82552\n63531\n15723\n82694\n85952\n35293\n7469\n28374\n96327\n35312\n44176\n15812\n12183\n9968\n57902\n26613\n44736\n98739\n82158\n39846\n37517\n6072\n33607\n56124\n31238\n5626\n21139\n77521\n96652\n94714\n76796\n99273\n95578\n14210\n44769\n37670\n53780\n6886\n21854\n1595\n43963\n85600\n95925\n5447\n6982\n77944\n52971\n650\n83149\n37618\n74647\n74267\n24844",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n17627\n97995\n73045\n369\n92594\n68774\n70591\n97928\n9484\n22482\n79530\n87624\n12120\n1756\n71847\n25153\n76621\n16366\n57729\n83650\n56452\n82323\n68208\n14964\n28006\n41151\n75167\n59288\n68897\n41074\n64352\n84419\n33739\n94835\n28989\n75011\n28615",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "46\n23601\n53112\n36961\n92169\n18965\n20763\n37879\n13171\n66602\n53666\n50210\n53610\n43322\n60573\n75773\n40632\n67140\n10568\n50522\n7648\n43021\n83110\n54092\n53663\n23494\n79289\n10212\n86208\n58725\n70771\n28355\n62034\n62950\n868\n92326\n19433\n38184\n32538\n64392\n56751\n15844\n49732\n76944\n21246\n17844\n37146",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n27277685\n91663468\n18820543\n13884735\n88142290\n60992181\n91629168\n89416692\n70485061\n683441\n10278065\n71963033\n36600302\n7049955\n77435204\n50541193\n17700374\n85086915\n49309409\n57357700\n4146619\n26534345\n38717931\n1617444\n44612297\n53805107\n33792864\n30116796\n16333218\n81517148\n46805207\n10797957\n16228406\n16434087\n76792137\n34452745\n4339759\n68284696\n80266740\n73205571\n83265148\n17795641\n72388801\n76467811\n40137467\n43534506\n33270097\n8925096\n85210155\n43885659\n13431841\n12406579\n36734265\n64359997\n52290428\n81025282\n22136245\n44512384\n22833287\n99351052",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 60)"
    },
    {
      "input": "60\n70944116\n7997752\n77443527\n43940124\n46270742\n59169548\n92667468\n91060087\n4279493\n37503071\n85882927\n34200059\n8447160\n52416364\n35161792\n15183663\n4460227\n91862086\n45563851\n20317977\n62782524\n67057754\n56065068\n26822160\n26255757\n99411400\n59309439\n71898617\n95626790\n87079715\n6458617\n88647816\n73435686\n13948888\n95271019\n93262869\n85843576\n28711424\n8721918\n59415276\n17732728\n34465296\n87755746\n82845282\n51948707\n61898258\n22040285\n64573555\n58477509\n39029202\n9162890\n14285526\n71180795\n69031683\n67959215\n42943259\n62949214\n89163895\n64316541\n31286192",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 60)"
    },
    {
      "input": "60\n100000000\n82259909\n53915242\n31185914\n29737218\n75874916\n36531127\n1\n100000000\n1\n1\n100000000\n100000000\n76312609\n36849414\n100000000\n94155261\n1\n1\n77182990\n58838792\n100000000\n76569006\n73058568\n1\n100000000\n55979421\n100000000\n100000000\n98658789\n100000000\n1\n100000000\n90120481\n1\n100000000\n1\n100000000\n56684316\n29215787\n1\n1\n100000000\n100000000\n1\n1\n83866287\n1\n2096990\n1\n100000000\n1\n1\n1\n1\n100000000\n1\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 60)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}