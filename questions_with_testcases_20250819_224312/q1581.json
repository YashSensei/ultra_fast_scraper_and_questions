{
  "problem_code": "problems",
  "title": "Gremlins",
  "tags": [],
  "text": "Gremlins are small funny furry creatures. Once they were considered to be evil but that time has past and most gremlins live a decent family life now. There are N distinct types of gremlins.Their origin is rather mysterious. Legend says that T years ago, N gremlins, one of each type, were born in a lab accident.Their reproduction method is, however, well studied. No mating ritual is required for gremlins to multiply. All they need is a few drops of water and the magic happens.Once atype igremlin starts its reproduction process, Kismall furry balls are created. For each furry ball we know what is the type of gremlin that will hatch from the furry ball and how long will it take for that to happen. Unfortunately, the original gremlin dies in the process. Atype igremlin will start its reproduction process exactly Yiyears after it isborn(ie. hatched from the furry ball).Knowledge about the ancestors of a gremlin is passed on genetically, so each gremlin knows a list of his ancestors as soon as it is born.Write a program that will find the length of the longest list of ancestors among all gremlins that ever lived (gremlins that still live are included, but unhatched furry balls are not), given the information about reproduction process and time elapsed since the lab accident that created initial gremlins, assumingall gremlins that were supposed to hatch this year have already hatched.InputThe first line contains two integers N and T (1 ≤ N ≤ 100, 1 ≤ T ≤ 1015), the number of gremlin types and the number of year that has passed since the lab accident.The next 3·N lines give reproduction details for each gremlin type.The first line of i-th block contains two integers Kiand Yi(1 ≤ Yi≤ 1000, 1 ≤ Ki≤ 1000).The second line contains Kiintegers representing gremlin type for each furry ball.The third line contain Kiintegers between 1 and 1000 representing hatching time for each furry ball, in years.OutputOutput the length of the longest list of ancestors among all gremlins that ever lived in a single line.ExamplesInput:1 42\r\n1 10\r\n1\r\n5Output:2Input:2 42\r\n1 10\r\n1\r\n5\r\n1 5\r\n1\r\n5Output:3Input:3 8\r\n4 5\r\n1 2 3 2\r\n1 2 1 3\r\n1 1\r\n3\r\n1\r\n2 1\r\n1 2\r\n2 1Output:4",
  "sample_input": "Input:1 42\r\n1 10\r\n1\r\n5Output:2",
  "sample_output": "Input:2 42\r\n1 10\r\n1\r\n5\r\n1 5\r\n1\r\n5Output:3",
  "link": "https://www.spoj.com/problems/GREMLINS",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "1 42\r\n1 10\r\n1\r\n5",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 42\r\n1 10\r\n1\r\n5\r\n1 5\r\n1\r\n5",
      "expected_output": "3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 6\n3 6\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n3 1\n2\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 3\n1 7\n10\n9",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "39 32\n6 67\n92\n19",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "32 57\n29 38\n52\n34",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 33\n64 84\n88\n73",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 17\n82 96\n61\n57",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "45 32\n84 45\n63\n22",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "15 33\n10 49\n44\n40",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9 10\n5 29\n36\n10",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "23 16\n15 39\n14\n27",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5 33\n31 10\n17\n25",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "41 34\n46 50\n27\n27",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24 7\n49 37\n15\n48",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "29 13\n7 47\n33\n17",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n2 1\n100\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}