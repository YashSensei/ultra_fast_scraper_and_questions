{
  "problem_code": "problems",
  "title": "Multiples of 3",
  "tags": [],
  "text": "There are N numbers a[0], a[1] ... a[N - 1]. Initially all are 0. You have to perform two types of operations :Increase the numbers between indices A and B (inclusive) by 1. This is represented by the command \"0 A B\"Answer how many numbers between indices A and B (inclusive) are divisible by 3. This is represented by the command \"1 A B\".InputThe first line contains two integers, N and Q.\r\nEach of the next Q lines are either of the form \"0 A B\" or \"1 A B\" as mentioned above.OutputOutput 1 line for each of the queries of the form \"1 A B\" containing the required answer for the corresponding query.SampleInput:4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3Output:4\r\n1\r\n0\r\n2Constraints1 ≤ N ≤ 1000001 ≤ Q ≤ 1000000 ≤ A ≤ B ≤ N - 1",
  "sample_input": "Input:4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3Output:4\r\n1\r\n0\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MULTQ3",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3",
      "expected_output": "4\r\n1\r\n0\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4\n4 4 3\n10 3 5\n5 6 5\n4 5 7\n7 8 2\n8 4 5\n3 1 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 2\n4 4 1\n1 8 6\n8 7 1\n2 2 3\n1 8 1\n7 8 4\n4 10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 6\n3 1 5\n9 8 7\n5 8 10\n7 2 9\n10 10 7\n6 8 3\n8 3 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "39 30\n56 100 86\n92 11 91\n31 23 68\n52 37 92\n98 14 4\n81 14 46\n71 71 13",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "47 92\n71 19 8\n75 58 48\n19 15 26\n21 62 43\n46 10 90\n11 46 34\n33 30 92",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "79 34\n39 10 55\n29 39 27\n79 16 84\n6 94 74\n66 78 97\n64 82 87\n71 27 50",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 96\n28 97 51\n49 59 84\n36 58 93\n47 59 92\n23 69 66\n60 80 78\n13 89 85",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 84\n34 18 14\n82 36 27\n39 66 62\n97 30 36\n92 87 12\n99 13 80\n51 34 30",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "131248 432888\n354209 53245 328423\n246654 365935 279483\n199753 311218 374420\n352578 475215 170640\n133080 101912 214780\n178457 190802 351383\n397234 293044 426024",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "186538 238715\n416337 74261 95552\n228734 457898 491997\n113383 252921 493319\n299749 479101 245420\n215176 421508 299102\n314094 395133 408800\n481070 483715 291106",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "245548 499268\n109233 376266 390727\n101067 263952 128691\n481113 89438 94773\n203631 343084 487075\n311394 212441 219940\n366752 160757 357405\n357486 182776 312188",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "129099 94056\n295792 494069 432468\n357234 387114 290444\n439626 292379 275424\n239483 364059 154184\n109427 162096 222868\n335349 179221 290438\n409891 186413 437422",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "59418 195094\n170985 325677 329542\n319749 489790 313106\n190487 72734 486647\n297357 259852 103771\n131390 485736 106797\n98979 236674 164195\n429380 160850 87940",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "440251 241525\n426243 282354 485265\n269164 404654 160886\n258352 144396 431522\n198899 221244 83436\n478645 408804 199962\n389139 54711 399333\n427235 313849 152298",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "308661 209778\n169559 151997 357198\n281905 172739 385229\n234023 81469 360945\n432588 422670 305879\n51818 94846 293729\n431609 278626 497587\n200625 156708 470468",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999999\n2 999999 999999\n1000000 999999 2\n1 999999 1000000\n999999 999999 999999\n999999 1000000 1000000\n1 1000000 1000000\n1000000 1 999999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 1\n1000000 2 2\n1 999999 2\n1000000 999999 1000000\n1 1 1000000\n1 2 2\n2 2 1\n2 1 1000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}