{
  "problem_code": "problems",
  "title": "Beer Machines",
  "tags": [],
  "text": "Little Stjepan lives in a village which can be represented as X-axis. In village there are N beer machines, machine i has x coordinate Piand needs Tiseconds to produce 1 liter of beer.This year M tourists (one by one because there is only one guide, Stjepan) will visit his village, tourist i will arrive at point Ai, want to drink Liliters of beer but will have energy to walk at most Diseconds (that is Diunits of length), he will walk to beer machine Stjepan suggests him and as soon as machine produces Liliters of beer tourist will be able to enjoy it.As Stjepan wants all tourists to come next year too he will choose machine for each tourist so that tourist can get a beer as soon as possible. Help Stjepan to do that and write program which will output minimal sum of passed times from arrival of tourist to getting a beer. If a tourist can't get a beer then his time is 0.Note that tourists are independent and machines can be used multiple times.InputOn first line of standard input you are given two integers (2 ≤ N ≤ 250 000, 1 ≤ M ≤ 500 000), number of beer machines and number of tourists.Next 5 lines contain 4 integers (X0, A, B, C) each and they describe arrays P, T, A, L and D, respectively.With these four numbers i-th element of array is defined as Xi= 1 + ((Xi-1*A + B) mod C), where indices are 1-based and X0is given in input.1 ≤ X0, A, B, C ≤ 109.Note:Author's solution doesn't depend on properties of pseudo-random generator.OutputOutput total time from task statement. Answer will fit in 64-bit signed integer.ExampleInput:3 4\r\n1 4 3 6\r\n2 4 4 10\r\n3 8 1 10\r\n3 1 8 7\r\n1 3 2 6Output:53ExplanationMachines (P, T) : (2, 3), (6, 7), (4, 3)Tourists (A, L, D) : (6, 5, 6), (10, 7, 3), (2, 2, 6), (8, 4, 3)Tourist #1 → Machine #3 → 17 time units.Tourist #2 → No beer :( → 0 time units.Tourist #3 → Machine #1 → 6 time units.Tourist #4 → Machine #2 → 30 time units.",
  "sample_input": "Input:3 4\r\n1 4 3 6\r\n2 4 4 10\r\n3 8 1 10\r\n3 1 8 7\r\n1 3 2 6Output:53",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STJEPAN",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "3 4\r\n1 4 3 6\r\n2 4 4 10\r\n3 8 1 10\r\n3 1 8 7\r\n1 3 2 6",
      "expected_output": "53",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 7\n10 10 4 6\n6 6 9 7\n1 3 5 3\n8 9 6 9\n5 3 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9\n10 5 10 7\n10 9 1 10\n8 1 9 7\n1 2 6 1\n7 7 7 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\n3 5 4 5\n8 6 10 10\n10 8 5 9\n1 3 4 8\n5 8 3 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 95\n54 69 11 15\n7 71 15 15\n7 90 33 64\n37 52 68 68\n42 60 13 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 80\n21 20 29 69\n45 32 61 10\n70 3 97 70\n14 25 36 11\n53 85 38 22",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 24\n2 96 8 22\n63 21 64 37\n54 32 35 54\n15 56 9 40\n70 24 31 65",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "65 54\n42 99 38 14\n17 89 4 15\n3 43 43 54\n26 11 5 56\n31 94 68 14",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 59\n99 15 16 14\n23 92 53 19\n44 65 34 45\n41 29 3 13\n5 12 22 52",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19402 123700\n67492 51564 112317 14286\n23820 90303 44936 34855\n79185 17860 102900 122812\n119243 37284 73194 53763\n24454 76091 56103 79618",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "34549 83020\n72638 39541 75874 101966\n103456 18825 76459 119259\n84002 72631 105368 80913\n117797 20694 17610 96115\n20257 124974 104246 86954",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "57374 108447\n56590 46002 50703 65877\n67822 72520 67543 37524\n76826 71263 55579 33599\n40355 72716 23079 58922\n42522 38787 89991 88466",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "108921 123442\n35787 33121 94430 17738\n72902 79976 48641 73259\n95736 21399 124568 32966\n78248 73059 49849 50000\n100264 16044 89063 78566",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "33989 108383\n99129 46909 115461 53242\n65401 15214 44177 36949\n66446 16038 61934 33013\n26668 26625 19920 100905\n58087 104153 30700 15711",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "70008 78014\n116944 74794 86791 98715\n17226 120892 76006 61687\n74049 67374 120619 120044\n84266 90160 119430 24355\n45827 114694 112033 122584",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "56350 48644\n113353 69593 67524 62567\n51278 116514 46707 87773\n47886 72747 18071 26626\n67971 118244 24657 28986\n85580 56804 29275 45489",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000\n250000 250000 250000 250000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 250000\n2 2 1 2\n2 1 2 249999\n250000 1 1 1\n250000 250000 2 249999\n249999 250000 250000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "250000 250000\n1 249999 249999 1\n249999 1 2 2\n249999 249999 249999 249999\n1 250000 2 1\n1 250000 1 249999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}