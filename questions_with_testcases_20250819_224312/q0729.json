{
  "problem_code": "problems",
  "title": "King",
  "tags": [],
  "text": "The Nlogonia Kingdom needs a new king. Differently from other monarchy kingdoms, where the king’s choice is hierarchical, at Nlogonia any citizen can apply for the post and the whole population can vote on those who applied. However, with these conditions, a big problem arises: every citizen would probably apply and vote for itself.In order to solve this problem the Nlogonia council decided to split the voting process in two phases. In the first phase, known as constraint phase, every citizen must write two constraints about another two candidates. A constraint can be of one of the following two types: a reliability constraint, which means that the citizen trusts another citizen and wishes that it takes place in the second phase of the voting process; an unreliability constraint, which means that the citizen doesn’t trust another one and wishes that he doesn’t take place in the second phase of the process.The council decided that at least one of the constraints of every citizen must be satisfied in order to choose the group of candidates that can go forward to the second phase. The citizen cannot give itself a reliability constraint. The second phase of the process is a simple voting process where every citizen chooses between one of the candidates that remained from the first phase. Your job is to determine if it is possible to satisfy at least one of the two constraints of every citizen, even if it means that no candidate remains for the second phase, in this case the council decides who must be the king.InputEach test case is described using several lines. The first line contains one integer N representing the number of citizen in the Nlogonia Kingdom (3 ≤ N ≤ 1000). The candidates are identified by different integer from 0 to N-1. Each of the next N lines describes the two constraints of a citizen, and each one starts with an uppercase letter that is either ‘R’ or ‘U’, where ‘R’ indicates a reliability constraint and ‘U’ indicates a unreliability constraint, followed by a integer C (0 ≤ C < 1000) representing the candidate that the citizen gave the constraint. The two constraints will be separated by single space.The last test case is followed by a line containing one zero.OutputFor each test, use the output uppercase ‘Y’ if it is possible to satisfy at least one constraint for each citizen and ‘N’ if it is not.ExampleInput:3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0Output:YN",
  "sample_input": "Input:3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0Output:YN",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KING",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0",
      "expected_output": "YN",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 2 3 8 9 1 5 2 6 6 5 6 2 1\nxdgogqtj\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 5 2 3 9 5 10 1 8 8 7 3 5 2 10\njnxatsryfzatebwl\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4 6 9 9 9 8 1 2 5 9 7 1 7 1\nsfxf\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "75 38 5 81 69 50 92 30 67 77 41 38 26 73 94\nwajeuzckfirmomk\n60",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "22 2 53 8 6 51 82 30 15 10 82 11 23 8 47\ngaucczblekn\n6",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 6 51 80 3 22 58 1 89 44 68 55 46 18 67\nkufp\n85",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 7 100 4 72 57 95 26 93 11 49 88 8 33 17\nkqlqlkimlksggvjmkmjd\n91",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 85 73 17 7 23 55 19 15 46 66 45 99 17 88\nppdoyptwspopljwr\n75",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "119 441 461 379 418 438 498 486 402 361 493 334 319 154 230\ndhz\n329",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "150 462 234 94 355 172 305 398 301 242 369 363 61 317 187\ndrtgiiaslqkpnqifhnvy\n228",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "369 383 175 312 362 157 384 65 76 265 473 189 393 354 178\nwuhhfbmibpbxyqqmg\n397",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "146 340 360 382 243 240 120 111 242 189 303 375 286 118 109\ngbimcv\n266",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "470 156 288 338 435 168 222 101 426 123 443 118 408 463 261\nxualmttqeqd\n305",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "94 262 320 107 147 410 301 336 428 306 263 386 316 66 401\nlheiptqou\n204",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "104 404 330 386 379 185 157 289 153 471 207 272 376 469 114\nqp\n228",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\neyrnvfrhrketjtbhhmgu\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\noxkoaoslxeq\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 2 2 2 1 999 2 1000 1000 1000 1000 1 1 999\nhzdqmyontmi\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 2 1 999 1000 1 999 1 2 999 1 1000 2 2\nqddkdpxotrduqnw\n999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}