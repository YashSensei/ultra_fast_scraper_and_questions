{
  "problem_code": "problems",
  "title": "Land Acquisition",
  "tags": [],
  "text": "Gold Problem Land Acquisition [Paul Christiano, 2007]Farmer John is considering buying more land for the farm and has\r\nhis eye on N (1 ≤ N ≤ 50,000) additional rectangular plots, each\r\nwith integer dimensions (1 ≤ widthi≤ 1,000,000; 1 ≤ lengthi≤ 1,000,000).If FJ wants to buy a single piece of land, the cost is $1/square\r\nunit, but savings are available for large purchases. He can buy\r\nany number of plots of land for a price in dollars that is the width\r\nof the widest plot times the length of the longest plot. Of course,\r\nland plots cannot be rotated, i.e., if Farmer John buys a 3×5 plot\r\nand a 5×3 plot in a group, he will pay 5×5 = 25.FJ wants to grow his farm as much as possible and desires all the\r\nplots of land. Being both clever and frugal, it dawns on him that\r\nhe can purchase the land in successive groups, cleverly minimizing\r\nthe total cost by grouping various plots that have advantageous\r\nwidth or length values.Given the number of plots for sale and the dimensions of each,\r\ndetermine the minimum amount for which Farmer John can purchase allInputLine 1: A single integer: NLines 2..N+1: Line i+1 describes plot i with two space-separated\r\nintegers: widthiand lengthiOutputLine 1: The minimum amount necessary to buy all the plots.SampleInput:4\r\n100 1\r\n15 15\r\n20 5\r\n1 100Output:500ExplanationThere are four plots for sale with dimensions as shown.The first group contains a 100×1 plot and costs 100. The next group\r\ncontains a 1×100 plot and costs 100. The last group contains both the 20×5\r\nplot and the 15×15 plot and costs 300. The total cost is 500, which is\r\nminimal.",
  "sample_input": "Input:4\r\n100 1\r\n15 15\r\n20 5\r\n1 100Output:500",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ACQUIRE",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "4\r\n100 1\r\n15 15\r\n20 5\r\n1 100",
      "expected_output": "500",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n1\n9\n2\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n10\n8\n6\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "6\n30044263\n84685524\n94506845\n57780271\n43866873\n89734052",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n80774828\n3782096\n37457525\n51153721\n24364771\n55066188\n40835663\n14119202\n78371869\n66027396\n87117533\n47290324\n42836719\n15803969\n43171320\n30288726\n11692796\n79247824",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n67646782\n10999784\n78929704\n32742898\n78806583\n63886012",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n75648271\n95554625\n92614415\n83226603\n91393237\n43682252\n79283613\n62146525\n94010305\n32691080\n71553778\n2980247\n76765194\n56216421\n73999945\n99475044\n41320869\n41347788\n9246521",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n54501328\n75938848\n37772764\n62935065\n28078447\n83027999\n30278604\n66262920\n71544444\n57972518",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "27\n53871\n57421\n81568\n72736\n4815\n20779\n72132\n8055\n57408\n78580\n92376\n1388\n88666\n24504\n16792\n54161\n99741\n6628\n85559\n99478\n60363\n77524\n44031\n31965\n1308\n83756\n15671",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n21408\n85054\n81891\n11673\n90522\n81888\n50252\n54292\n30810\n1054\n39617\n15339\n16384\n12390\n2324\n27305\n94807\n55712\n48624\n13977\n13897\n31008\n57520\n7925\n84973\n28300\n26507\n40415\n25967\n18582",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "39\n31757\n15902\n84474\n79305\n63000\n61922\n80094\n99452\n72262\n29467\n990\n50033\n68467\n23618\n1805\n57905\n89695\n30185\n4877\n53705\n23889\n82695\n88684\n11586\n43089\n81247\n98703\n2624\n62234\n71901\n41500\n94299\n86914\n90833\n10875\n15211\n20370\n64989\n68256",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n3029\n99613\n52543\n60198\n81263\n93245\n53438\n60338\n13571\n41667\n84947\n51256\n96586\n92703\n33813\n91645\n95091\n45163\n86921\n17054\n33325\n10961",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n70676\n42238\n57837\n6909\n89803\n52914\n32499\n15589\n4712\n5806\n47699\n70099\n34205\n41759\n14137\n2865\n95420\n11559\n5191\n50112\n21321\n97285\n43827\n22333\n45311\n70410\n89142\n6015\n3717\n30500\n97004",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n25459\n71846\n31228\n33644\n47140\n9791\n89558\n80858\n2929\n71636\n61195\n77514\n65479\n2201\n73952\n36990\n40627\n77006\n48337\n46257\n37059\n58400\n81166\n9471\n47268\n91859",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n16763\n59277\n80626\n84194\n17178\n50355\n98281\n23460\n45368\n99896\n54006\n86617\n42540\n64271\n56897\n69637\n75000\n29957\n95757\n63870\n10354\n53378\n73632\n90046\n97598\n60052\n6687",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n52763921\n1349802\n85180376\n30044645\n9250206\n62322953\n49642924\n55809287\n25360797\n83593764\n57716814\n3958755\n91695523\n57297302\n98355996\n89680740\n69063432\n71642108\n45269852\n65180990\n7039226\n81480950\n8097385\n11145750\n29658246\n40390645\n97849510\n80273805\n60806596\n31787307\n26215278\n36900164\n1703172\n39154166\n85884346\n27300913\n13258194\n3115749\n95085145\n54014807\n91100693\n29101950\n60829293\n26225752\n32971551\n93351278\n71385256\n98400054\n22725077\n7833919",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n19171695\n67755239\n13216901\n97843539\n39118514\n7729159\n64008048\n23564045\n9061224\n83669646\n35311342\n31502629\n65196378\n27135723\n35755440\n37921977\n74352488\n588724\n78422059\n37959953\n628787\n64109651\n71753742\n72578805\n36250795\n23905833\n39201175\n49335348\n33630540\n64873736\n55877898\n98835192\n31421899\n52942825\n86220376\n92195493\n86890393\n91891748\n6411868\n34784605\n81946408\n11723531\n9194814\n9509673\n69239896\n44463362\n55340963\n52616098\n99318851\n64085814",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "1\n73548561",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}