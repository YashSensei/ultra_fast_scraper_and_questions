{
  "problem_code": "problems",
  "title": "Meh and Mini Splendor",
  "tags": [],
  "text": "Have you ever played a board-game called Splendor before? Splendor is one of many competitive board-games whose win condition is by gaining as many VP(Victory Points) as much as possible. For those who are curious about  this game, this link can be visited for the review of the game:Splendor.For a quick review about the game, in a turn, 1 player must choose 1 (one) out of 3 (three) moves provided.First, if a player predicts such card can be useful for the further turn, these cards can also be reserved using 1 (one) mileage point. (These mileage points are all limited to 10 mileage points only for one of a kind.)Second, if a player wants to invest jeweleries, players can obtain any jeweleries from the jewel shop. However, the rule of obtaining jeweleries is rather unique. A player can take 3 (three) different jeweleries at instant, or if the jewel shop has 4 or more one of a kind jewel, a player can take 2 (two) one of a kind jewel at instant. (These jewels are all limited to 10 jewels only for one of a kind.)Third, if a player has already had an adequate amount of jeweleries, player can buy cards from the bank. Victory Points can be obtained from certain cards which hold Victory Points. These cards must be bought using adequate number of jeweleries (rubies, sapphires, emeralds, diamonds, and cobalts). In order to win the game, a certain number of VP (Victory Points) are needed.One day, Waca, Yoota, Bram and I play that game (Splendor) at a certain board game store in Surabaya. However, because Waca always wins the game, we decided to change the rule of the game in order for Waca not to win most of the game.Before the game starts, we form a group of two. Waca and I are on one group, and so does Bram and Yoota. The rule of the game is only using the first and the second rule of Splendor. We do not use cards and Victory Points in order to win the game, but instead, the losing condition of the game is occurred when a player cannot make a valid move. If a player cannot make a valid move, that player and his/her teammate also lose the game. The first player to make a move is Waca; the second player to make a move is Bram; the third player to make a move is me; the fourth player to make a move is Yoota.If a player decided to take a mileage stone or the jeweleries, it is guaranteed that after a player takes such objects, there are no returns.InputThe first line of input will be the integers of test cases T (T ≤ 1000)The other T line will consists five integers. These integers will consecutively represents the number of rubies, the number of sapphires, the number of emeralds, the number of diamonds, and the number of mileage points.EDIT: These five integers are all the number of jeweleries currently provided in the jeweleries shop.OutputFor each round, provide \"Round n: \" denoting the round number followed by the winner of the game. If Yoota and Bram win the game, print \"Yoota & Bram win the game\", else print \"Meh & Waca win the game\".ExampleInput:54 1 7 2 100 10 2 2 45 5 4 4 61 3 10 3 25 2 10 0 7Output:Round 1: Yoota & Bram win the gameRound 2: Meh & Waca win the gameRound 3: Yoota & Bram win the gameRound 4: Meh & Waca win the gameRound 5: Meh & Waca win the game",
  "sample_input": "Input:54 1 7 2 100 10 2 2 45 5 4 4 61 3 10 3 25 2 10 0 7Output:Round 1: Yoota & Bram win the gameRound 2: Meh & Waca win the gameRound 3: Yoota & Bram win the gameRound 4: Meh & Waca win the gameRound 5: Meh & Waca win the game",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SPLEND1",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "54 1 7 2 100 10 2 2 45 5 4 4 61 3 10 3 25 2 10 0 7",
      "expected_output": "Round 1: Yoota & Bram win the gameRound 2: Meh & Waca win the gameRound 3: Yoota & Bram win the gameRound 4: Meh & Waca win the gameRound 5: Meh & Waca win the game",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 6 7 8 8 9 8 5 10 5 8 3 3 8 5 10 5 9 7 4 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 2 2 7 7 5 5 8 6 1 8 5 8 3 8 3 3 1 7 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 6 3 10 6 2 4 9 8 6 10 8 2 4 7 2 3 10 4 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "53 41 44 80 80 6 39 19 69 96 41 31 35 53 2 4 36 75 2 62 22",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 40 79 19 77 31 100 19 66 23 76 45 44 31 61 85 89 76 69 1 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 62 92 4 54 44 17 55 60 3 59 74 37 24 32 75 89 2 95 67 42",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 38 41 76 2 93 71 9 31 12 96 4 36 87 43 98 30 84 98 67 74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 70 95 19 96 51 100 60 80 85 2 66 8 54 2 83 97 35 93 63 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "466 110 303 187 286 393 376 64 321 408 451 235 125 356 424 204 71 318 498 60 63",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "228 450 435 170 488 100 444 167 250 135 58 273 407 363 286 82 187 55 93 86 496",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "171 136 321 196 101 321 456 456 365 481 283 112 281 322 160 491 262 94 479 140 73",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "96 128 421 380 121 451 293 363 244 235 324 247 472 58 391 344 330 423 404 52 492",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "442 376 393 62 497 347 247 107 308 249 413 391 354 111 297 242 262 316 217 361 468",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "125 217 442 407 390 440 55 279 475 378 313 456 247 423 321 204 73 211 177 172 170",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "398 432 364 369 202 335 110 120 104 111 78 252 360 208 487 132 203 277 266 114 301",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 999 999 1 1000 1 1 2 1000 999 999 1000 1 999 999 1000 999 2 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 1 999 2 1 2 2 1 1 2 1000 2 1 999 1000 1 1 2 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}