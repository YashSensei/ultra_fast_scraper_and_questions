{
  "problem_code": "problems",
  "title": "Race Against Time",
  "tags": [],
  "text": "As another one of their crazy antics, the N (1 ≤ N ≤ 100,000) cows want Farmer John to race against the clock to answer some of their pressing questions.The cows are lined up in a row from 1 to N, and each one is holding a sign representing a number, Ai(1 ≤ Ai≤ 1,000,000,000). The cows need FJ to perform Q (1 ≤ Q ≤ 50,000) operations, which can be either of the following:Modify cow i's number to X (1 ≤ X ≤ 1,000,000,000). This will be represented in the input as a line containing the letter M followed by the space-separated numbers i and X.Count how many cows in the range [P, Q] (1 ≤ P ≤ Q ≤ N) have Ai≤ X (0 ≤ X ≤ 1,000,000,000). This will be represented in the input as a line containing the letter C followed by the space-separated numbers P, Q, and X.Of course, FJ would like your help.InputThe first line gives the integers N and Q, and the next N lines give the initial values of Ai. Finally, the next Q lines each contain a query of the form \"M i X\" or \"C P Q X\".OutputPrint the answer to each 'C' query, one per line.ExampleInput:4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9Output:2\r\n3\r\n4\r\n2FJ has 4 cows, whose initial numbers are 3, 4, 1, and 7. The cows then give him 6 operations; the first asks him to count the how many of the last three cows have a number at most 4, the second asks him to change the fourth cow's number to 1, etc.Warning: large input/output data.",
  "sample_input": "Input:4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9Output:2\r\n3\r\n4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RACETIME",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9",
      "expected_output": "2\r\n3\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5\n2\n8\n6\n2\n7 5 10\nnmk 3 8 7\n2 6\notk 1 4\n1 1 4\np 4 3 3\n4 4 7\ni 9 7 3\n5 1\ngpzyv 3 1\n8 2 9\nxyqdd 5 3 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n4\n10\n2\n2\n3 7 6\nj 4 2 1\n5 4\nogxnn 4 4\n5 8 10\ng 2 5 1\n3 6 7\nxmmt 1 5 2\n7 1\no 10 7\n4 3 5\nbfq 4 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n8\n8\n3\n7\n10 3 1\nbkmt 8 10 1\n4 8\npwwx 7 7\n6 2 3\nkd 3 7 3\n7 8 10\ntar 4 5 3\n9 2\nhv 1 4\n8 3 6\nuqun 9 3 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 99\n100\n93\n59\n30\n69 50 35\njr 27 8 35\n57 60\nzhil 74 28\n50 10 50\nh 23 99 40\n62 39 28\nmmnq 26 30 71\n11 61\nqp 70 26\n86 76 1\ng 22 4 25",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "41 93\n9\n74\n89\n76\n93 20 96\nzhrmy 52 85 61\n51 42\nxjab 2 90\n26 16 49\ne 8 25 96\n11 60 60\nxfabp 43 39 25\n94 78\nezk 67 98\n17 11 71\nhqzox 70 4 31",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "69 1\n94\n19\n36\n26\n6 94 2\ngs 20 74 77\n65 27\no 77 70\n65 66 86\novuae 50 69 100\n99 27 12\nwya 76 12 75\n14 86\ndpn 46 76\n25 65 81\nioloi 17 4 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 59\n79\n13\n47\n12\n13 73 42\nmu 77 98 91\n21 60\nre 95 21\n100 29 14\nc 21 33 33\n35 44 15\njubzk 50 89 6\n69 81\na 75 29\n67 19 88\nf 81 18 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 41\n82\n62\n94\n65\n25 80 54\nmrug 100 53 91\n27 80\nsehbg 63 27\n52 74 86\ni 40 85 35\n79 92 26\nyu 86 86 72\n59 43\ni 50 42\n90 81 8\njy 26 51 64",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 31\n23\n29\n48\n10\n37 28 49\nrr 7 37 13\n18 45\nk 37 46\n41 30 43\nwrc 20 29 44\n44 20 29\njd 37 34 26\n13 20\nsn 30 41\n33 42 46\nilt 7 30 27",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "12 18\n11\n48\n18\n43\n10 5 21\nwbfpz 29 10 6\n28 47\nv 20 26\n48 32 24\nkce 33 37 34\n41 45 17\ncr 33 23 27\n15 35\nlw 7 9\n6 44 32\ncu 15 16 37",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "40 32\n34\n18\n19\n10\n6 47 37\nk 24 15 46\n39 40\ndtbio 8 42\n22 5 45\nbu 44 34 48\n38 6 5\nlq 38 26 38\n16 29\nvndk 10 28\n35 48 46\nqw 27 49 40",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 28\n33\n38\n38\n40\n19 14 31\nxrvi 12 25 23\n20 42\nbnn 9 30\n35 30 31\nkkha 28 21 21\n25 37 17\ngjgfg 35 26 45\n46 42\ntynqm 33 22\n9 35 24\nsyqq 26 41 17",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 16\n22\n43\n29\n50\n49 24 6\nup 45 24 44\n13 25\nmxg 20 45\n7 50 39\nwoho 47 43 22\n32 34 42\ntcj 50 13 32\n26 28\nsw 28 14\n40 48 20\nwjcz 48 6 41",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "45 6\n30\n6\n19\n36\n11 42 31\npgw 5 25 6\n11 37\ng 15 50\n46 33 14\nfkkt 37 16 29\n38 28 50\nxb 33 47 12\n35 27\nu 39 5\n24 38 28\naamnp 32 23 15",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 26\n6\n29\n7\n7\n24 5 20\nciezg 23 20 35\n30 20\nz 5 48\n43 34 37\nx 30 24 28\n20 42 15\nbwxuq 12 30 30\n39 25\nieptx 44 5\n20 34 13\nnmw 30 29 43",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100\n100\n100\n100\n100 100 100\nvcpuf 100 100 100\n100 100\nu 100 100\n100 100 100\ndko 100 100 100\n100 100 100\nj 100 100 100\n100 100\niwjxl 100 100\n100 100 100\nfw 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100\n100\n100\n100\n100 100 100\nk 100 100 100\n100 100\ni 100 100\n100 100 100\nrrcrb 100 100 100\n100 100 100\npt 100 100 100\n100 100\nqnjo 100 100\n100 100 100\nr 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 1\n99\n100\n100\n1\n100 1 99\nbekdf 2 99 1\n99 1\net 1 100\n99 100 2\nc 1 2 99\n99 99 1\ngjoqg 99 1 2\n1 1\nq 2 2\n1 2 100\nt 100 100 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n1\n1\n1\n99\n2 100 1\ni 2 2 100\n100 100\nvul 1 100\n100 2 2\nmi 1 100 100\n99 100 99\nscg 2 2 2\n2 99\ngnizh 99 99\n99 99 100\nf 99 100 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:23",
  "total_test_cases": 20
}