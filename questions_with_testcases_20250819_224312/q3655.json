{
  "problem_code": "problems",
  "title": "Maggu’s Solar Panels",
  "tags": [],
  "text": "Summer is here and so is the season of powercuts, everybody here in IITK has installed there own solar panels over the roof. Now while setting panels, nobody cared of there panel was overlapping with others, the end result looks something likes the one shown below.Clearly, a panel cannot produce electricity from the part where light does not fall. Our Maggu has been given the task of estimating the total electricity output from panels from Hall Office. This task is haunting him. Even Coder cannot do it alone, he needs your help. Assume that all panels produce the same power per unit area and that the area not directly under the sun does not produce any electricity.You need to print the power that will be produced given the end points of rectangular panels and the power per unit area that panels produce.Note: The sides of the panel will be parallel to the X-axis or Y-axis. Meaning, panels will never be tilted. Hence, a panel can be represented by 4 integers x, y, X and Y. Where (x, y) is the co-ordinate of the bottom left corner of the panel and (X, Y) is the co-ordinate of the top right corner of the panel.InputFirst line contains two space separated integers N, number of solar panels and R, power per unit area. Next N lines contains the description of N panels. Each line containing 4 space separates integers x, y, X and Y respectively.OutputYou need to output a single integer, the total power that can be generated.Constraints-108≤ x ≤ X ≤ 108-108≤ y ≤ Y ≤ 1081 ≤ N ≤ 1000001 ≤ R ≤ 100ExampleInput:3 2\r\n-6 0 3 6\r\n0 4 6 10\r\n4 -2 9 6Output:240",
  "sample_input": "Input:3 2\r\n-6 0 3 6\r\n0 4 6 10\r\n4 -2 9 6Output:240",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IITWPC4E",
  "scraped_at": "2025-08-17 00:34:29",
  "test_cases": [
    {
      "input": "3 2\r\n-6 0 3 6\r\n0 4 6 10\r\n4 -2 9 6",
      "expected_output": "240",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6\n9 2 10 4\n7 1 1 1\n8 9 8 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 4\n8 9 4 5\n5 1 7 7\n3 5 3 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 6\n8 1 9 1\n10 4 9 10\n5 2 9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 43\n59 27 42 6\n93 68 13 71\n26 33 50 72",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 93\n31 82 36 46\n96 40 5 10\n86 39 19 71",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "20 98\n25 33 68 15\n39 28 21 82\n26 12 85 97",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 71\n73 21 3 36\n8 67 68 28\n57 78 16 64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "35 73\n44 93 1 41\n10 10 54 11\n71 68 85 83",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "213781 142203\n122568 284164 431444 113832\n416713 456082 271406 86449\n240557 89945 84663 434903",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "287404 327605\n164758 467340 437890 98586\n356638 345242 264746 481131\n317952 403710 213335 277724",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "285473 288024\n239004 259046 427365 409556\n149504 326834 443634 228547\n393109 134524 141324 378139",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "395937 273292\n381475 488486 326073 236004\n421301 486786 282805 162501\n101961 133146 200366 342819",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "497472 238182\n161831 301781 65453 316644\n162608 130550 415045 250903\n451548 242091 66949 136111",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "433138 61087\n296675 468670 487809 305336\n208876 147377 156660 445017\n197644 423626 154738 205689",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "143449 276791\n173885 488393 144529 301796\n188274 256231 412476 217864\n286835 60833 337351 151059",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000000\n1 999999 999999 999999\n2 2 1 2\n2 999999 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 999999 1 1000000\n999999 2 1000000 2\n1000000 2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:24",
  "total_test_cases": 20
}