{
  "problem_code": "problems",
  "title": "Locks and Keys",
  "tags": [],
  "text": "A wizard is in a labyrinth where there areVrooms andV−1 doors connecting some pairs of rooms in both directions, in such a way that there is always a sequence of doors one can traverse to go from a room to any other room. Additionally, there areClocks andCkeys ofCdifferent colours (one of each) in some of the doors and rooms of the maze, respectively; each door has at most one lock, and there is at most one key placed in each room. It should be an easy matter for the wizard to bypass the lock system, were it not for the fact that he forgot his spell book, without which his wizardry is utterly useless. The wizard is currently in roomX, and he wants to get his spell book, located in roomY, without taking too long. At every step he may go to an adjacent room through one of the doors. Of course, if the door is locked, he needs to be carrying the key of the same colour as the lock (unless, of course, that door has already been unlocked). The wizard can carry only one key at a time and after picking up a key it is not possible for him to drop it somewhere in the maze in order to take it again afterwards. Once a door has been unlocked, the key is thrown away since it is no longer any use.Given the maze and the positions of theCkeys andClocks, determine how to reachYfromX, if possible. Any path whose length does not exceed 4 · (C+ 1) ·Vis acceptable.InputThe first line of each case contains four integers: the numberVof rooms in the maze (1 ≤V≤ 1 500), the numberCof locks (0 ≤C<V), and roomsXandYnumbered 0,1,…,V−1. Then comes a (possibly empty) line withCintegers indicating the location of each of the keys, in order of increasing colour. The nextV− 1 lines describe the maze: each contains three integersABL, meaning that there is a door between roomsAandBwhich can be unlocked with the key of colourL, if 0 ≤L<C; a value of −1 forLindicates that no lock is needed.The last line hasV,C,X,Y= 0, 0, 0, 0.OutputThere is one line of output per test case. If there is no solution, outputImpossible. Otherwise print the full path corresponding to your solution in the formatL:V0…VL, whereL≤ 4 (C+ 1)Vis the length of a path fromXtoY, andX=V0,V1, …,VL−1,VL=Yis the sequence ofL+ 1 vertices visited in the right order. A single space must precede each vertex in the path; see sample output for clarification.ExampleInput:1 0 0 0\r\n\r\n3 1 0 2\r\n1\r\n0 1 -1\r\n0 2 0\r\n\r\n3 2 0 2\r\n1 2\r\n0 1 1\r\n0 2 0\r\n\r\n5 3 0 4\r\n2 0 3\r\n0 1 0\r\n0 2 -1\r\n1 3 1\r\n2 4 2\r\n\r\n0 0 0 0Output:0: 0\r\n3: 0 1 0 2\r\nImpossible\r\n10: 0 2 0 1 0 1 3 1 0 2 4Problem setter: Javier Gómez Serrano",
  "sample_input": "Input:1 0 0 0\r\n\r\n3 1 0 2\r\n1\r\n0 1 -1\r\n0 2 0\r\n\r\n3 2 0 2\r\n1 2\r\n0 1 1\r\n0 2 0\r\n\r\n5 3 0 4\r\n2 0 3\r\n0 1 0\r\n0 2 -1\r\n1 3 1\r\n2 4 2\r\n\r\n0 0 0 0Output:0: 0\r\n3: 0 1 0 2\r\nImpossible\r\n10: 0 2 0 1 0 1 3 1 0 2 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LOCKKEY",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "1 0 0 0\r\n\r\n3 1 0 2\r\n1\r\n0 1 -1\r\n0 2 0\r\n\r\n3 2 0 2\r\n1 2\r\n0 1 1\r\n0 2 0\r\n\r\n5 3 0 4\r\n2 0 3\r\n0 1 0\r\n0 2 -1\r\n1 3 1\r\n2 4 2\r\n\r\n0 0 0 0",
      "expected_output": "0: 0\r\n3: 0 1 0 2\r\nImpossible\r\n10: 0 2 0 1 0 1 3 1 0 2 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5 10 6\n10 7 6 4\n6\n10 9 10\n2 7 3\n10 1 3 7\n7 5\n2 4 5\n5 2 5\n1 6 8 2\n3 3 4\n10 2 6\n6 10 6\n9 3 6\n1 7 6\n3 10 1 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 8 7 6\n7 10 3 5\n9\n8 8 1\n5 8 6\n10 6 3 6\n1 1\n5 10 10\n8 5 2\n10 2 2 6\n2 6 2\n9 5 6\n5 4 9\n3 5 3\n1 5 2\n1 10 8 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9 6 6\n6 1 8 6\n4\n2 1 6\n9 3 9\n2 10 9 5\n6 8\n5 10 6\n5 8 10\n10 10 7 4\n4 10 3\n8 1 4\n7 4 2\n6 5 2\n5 3 8\n4 3 3 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 28 5 59\n37 55 66 51\n23\n16 77 57\n55 4 56\n32 95 92 92\n44 6\n97 89 2\n2 53 44\n99 74 17 33\n26 24 86\n54 57 10\n13 86 78\n49 53 12\n100 45 91\n22 63 3 78",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 26 1 9\n66 93 60 12\n87\n70 66 70\n67 67 82\n86 25 20 80\n24 1\n99 14 45\n34 74 80\n67 83 45 79\n41 14 85\n80 58 26\n96 93 63\n93 3 70\n58 97 18\n56 30 67 27",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 90 89 93\n81 24 71 43\n63\n87 37 29\n41 11 22\n15 91 41 2\n14 45\n27 7 53\n1 98 1\n33 62 2 88\n48 22 41\n31 44 60\n64 20 97\n82 28 17\n3 27 2\n28 61 71 45",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "57 72 71 92\n44 88 93 4\n83\n64 94 77\n26 40 15\n42 59 12 80\n44 89\n19 78 89\n60 64 24\n78 82 33 77\n62 16 35\n54 49 19\n23 77 40\n58 47 23\n49 88 71\n97 95 13 52",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 88 26 56\n89 55 47 3\n57\n11 57 29\n32 77 68\n11 53 9 86\n22 47\n82 91 32\n29 13 7\n56 83 49 85\n82 21 97\n96 74 96\n46 8 69\n81 82 16\n43 59 16\n70 68 70 24",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "493 411 348 354\n336 203 208 146\n136\n191 223 435\n76 205 213\n88 215 350 393\n179 249\n328 177 209\n428 377 88\n476 325 351 400\n322 273 399\n341 192 427\n428 204 399\n272 149 434\n476 416 127\n389 195 116 285",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "249 230 113 259\n376 81 84 87\n384\n99 166 290\n115 116 85\n453 458 84 442\n286 395\n151 219 302\n418 370 468\n390 59 357 166\n430 101 132\n315 389 288\n276 220 205\n190 340 110\n469 278 312\n486 57 261 353",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "212 381 324 120\n244 79 218 93\n174\n105 311 157\n369 285 264\n419 212 121 290\n275 120\n469 487 310\n486 114 410\n297 164 402 313\n334 160 148\n352 107 196\n219 435 160\n252 400 284\n226 449 418\n449 54 482 62",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "375 415 448 390\n155 345 275 180\n398\n393 234 325\n485 157 463\n100 258 292 86\n229 384\n401 142 197\n498 236 278\n301 272 164 121\n141 414 55\n75 498 254\n380 276 61\n420 162 287\n367 154 229\n229 420 367 474",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "119 360 472 197\n379 479 277 330\n345\n320 124 455\n399 496 391\n406 384 428 149\n464 215\n238 420 373\n71 411 249\n177 337 495 488\n365 236 277\n391 398 243\n354 120 217\n152 435 211\n346 165 152\n157 181 51 243",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "299 69 456 191\n64 359 447 459\n88\n115 78 178\n224 177 364\n488 326 215 314\n189 471\n476 129 390\n374 465 235\n204 458 224 249\n363 223 360\n318 67 456\n387 55 368\n393 52 426\n314 298 363\n420 257 412 360",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "331 170 462 179\n304 245 360 193\n463\n470 147 404\n488 165 81\n262 496 311 162\n321 55\n124 109 478\n104 362 126\n184 457 115 232\n92 461 441\n348 60 342\n275 273 72\n387 329 352\n481 328 457\n355 241 411 283",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 999 1000\n1 999 2 1\n2\n999 999 999\n1000 1000 999\n2 2 1 999\n1000 999\n2 1 2\n2 1 2\n999 1000 1 1000\n1000 2 2\n1 2 999\n1000 1000 1\n1000 1000 1000\n1000 2 2\n1 999 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 999 1000\n999 2 2 2\n1000\n1 2 999\n999 1 999\n1 999 1 999\n2 1000\n999 999 1\n2 1000 1\n999 2 1 2\n1000 1 1000\n1000 999 999\n1 2 1000\n1000 999 1\n2 1 1000\n999 2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}