{
  "problem_code": "problems",
  "title": "Ninja",
  "tags": [],
  "text": "A ninja is practicing and he is very fast he can make two cuts in one second and his master give he a new challenge. The master take a cube, thrown through the air and quickly says four numbers. The ninja has to think fast to make two cuts and get desired values.Given a cube of size N×N×N, he need to cut it into four entire pieces of size A, B, C and D. He needs to divide the cube in these pieces with only two cuts, one vertical and one horizontal.InputThe input consists of multiple test cases.Each test case begins a line containing five integers N (2 ≤ N ≤ 1000000), A, B, C and D (1 ≤ A, B, C, D ≤ 263).The end of input is indicated by a line with five zeros. This is not a part of any test case.OutputFor each test case print \"Possible\" if it is possible to obtain the pieces and print \"Impossible\" if it is not possible to obtain the pieces with two cuts.ExampleInput:2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0Output:Impossible\r\nPossible\r\nPossible",
  "sample_input": "Input:2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0Output:Impossible\r\nPossible\r\nPossible",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VUDBOL5",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0",
      "expected_output": "Impossible\r\nPossible\r\nPossible",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3 6 9 7\n8 10 6 8 2\n7 7 1 1 9\n1 10 2 9 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 6 8 10\n10 5 8 2 3\n3 4 4 2 7\n2 4 6 6 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 7 3 7 9\n1 8 7 4 1\n7 8 5 3 4\n4 6 5 6 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "89 77 62 20 80\n25 50 91 67 24\n3 14 89 63 81\n90 3 89 88 40",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 18 15 19 40\n29 46 91 22 23\n39 82 32 100 45\n8 88 8 100 100",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "81 6 28 69 64\n46 69 64 47 29\n86 81 95 63 46\n53 43 51 85 41",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 3 45 90 55\n16 13 55 82 56\n62 98 87 63 57\n11 42 67 85 18",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "65 81 65 61 35\n69 67 97 98 55\n44 70 93 72 6\n28 67 97 55 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "410655 483685 325309 256997 107670\n202909 233718 334807 216321 480001\n202282 357887 152702 374964 335161\n455054 409635 478072 353801 145585",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "247534 292434 339414 407458 100337\n481351 168221 375574 443709 371472\n155701 70480 91675 193426 467692\n439478 312056 434613 125623 355898",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "329725 128208 174058 495324 249870\n307728 75288 353529 410344 197300\n283377 357485 193025 117291 91912\n468667 467397 91667 392644 238590",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "339930 216491 359491 348930 440385\n88734 431434 349503 349564 171669\n192438 382042 256198 294488 379654\n334017 454751 424256 264582 416347",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "219131 427654 213795 313169 62457\n163122 99427 263494 310976 227440\n356083 205931 433791 431210 428161\n401023 484742 340409 289868 108232",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "147731 57619 268423 464716 378406\n98969 452514 319339 383941 234640\n454198 101183 337159 479955 394557\n414949 263694 317127 463268 134037",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "433863 298486 186341 155257 353117\n493909 180755 218565 60167 483382\n404008 486653 472139 273026 69670\n493764 421283 410946 424089 300713",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 2 1000000 999999 1000000\n999999 2 1000000 1 1\n2 999999 1000000 999999 1000000\n999999 999999 2 1 999999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 999999 1000000 1\n1 2 2 999999 2\n1000000 1 2 1000000 2\n999999 2 999999 1000000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}