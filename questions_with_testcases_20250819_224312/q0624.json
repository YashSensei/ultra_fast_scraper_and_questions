{
  "problem_code": "problems",
  "title": "Hi6",
  "tags": [],
  "text": "\"I read somewhere that everybody on this planet is separated by only six other people. Six degrees of separation between us and everyone else on this planet. The President of the United States, a gondolier in Venice, just fill in the names. I find it A) extremely comforting that we're so close, and B) like Chinese water torture that we're so close because you have to find the right six people to make the right connection... I am bound to everyone on this planet by a trail of six people.\" - Ouisa Kitteridge, \"Six Degrees of Separation\"Is widely know that one is separated from everyone in the world in no more than 6 degrees of separation. A degree of separation is defined by the minimum numbers of connections you need to make to contact someone else. For instance, if you know personally another person, then you are separated by one degree. If you know somebody through some friend but not directly (a friend of a friend), then you are separated by two degrees, and so on.Nevertheless, young Kevin Smith is not convinced about this theory and wants to probe it false. To achieve this, he has hacked the Hi6! social network and requested you to help him knock down the theory of six degrees of separation.InputThe first line contains an integer T, which specifies the number of test cases. Then, T test case descriptions will follow. Each test case will start with a line with one positive integer, N meaning the number of connections. The next N lines will contain the following pattern:<name_1> <name_2>meaning that person \"<name_1>\" is connected with the person \"<name_2>\" by making D connections and vice versa. Note that both persons can know each other by a lower degree of separation using other connections.OutputFor each input case you must print the string \"Case #i: \", where i is the test case number, starting from 1, following by the maximum degree of separation between the specified people. If there is someone that cannot connect to another person, print \"INFINITE\" instead.ConstraintsAll names will be non-empty strings composed only by lowercase characters.All names will have between 1 and 10 characters, inclusive.\"<name_1>\" will be different than \"<name_2>\" for all connections.There will be no pair of connections between the same pair of persons.D will be an integer between 1 and 1000, inclusive, for all connections.T will be between 1 and 100, inclusive.N will be between 1 and 10^5, inclusive.ExampleInput:32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1Output:Case #1: INFINITECase #2: 4Case #3: 3",
  "sample_input": "Input:32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1Output:Case #1: INFINITECase #2: 4Case #3: 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HISIX",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1",
      "expected_output": "Case #1: INFINITECase #2: 4Case #3: 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5 7 4 2 3 1 5 1 9 1 3 1\ni ibmdo gzp bdbob nln cj zaebb nb zilg nlqoy gvafxi v bes lyio ccnq yifcy jawzu np smp stqc qxo ifau khkosw irpgp 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 6 4 4 4 8 1 8 7 7 8 3\nef ica pfp mzq qwymu l yf wrt no pzv vlah c y fhtu pr jwecc iluy vomw cyrbsh memt bcph gcs nkcq isnqw 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 4 6 10 5 10 8 5 10 10 8 9\nzjn tvbv npad swdyy cm metpj p dj q ev acn j b eco dt uwwpj pj rba xvxb pyxi xu j zj qgxnb 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 21 89 50 25 17 97 59 56 80 97 98 38\noqacf o ej xzpb x v rc u o hokh xajxr i rxv czoe qxd y pgz cp etnfb xujr rhy mi yrbst nfh 52",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 56 3 49 33 17 7 51 7 2 92 39 41\nyiv eou or gpjhv tevmwa wywhy ysyv bow u qfa ko cyvo ukwei kmtli mi de uog sms w i gv n kqfxg aj 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 53 73 51 66 67 75 6 80 83 20 8 21\nyp n yapb v ltja hwft wa z qdjmw dg cjkvj cf ubmx isvlg c zbns r pjaeb enwtal x dor no o axs 3",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 2 3 77 66 46 19 80 22 2 22 85 80\njrk k nxas lt mec ohvwn pmhdv hs bie g tqn jn fupk yyiln bbk qimw vu qxp pwo uwbs f ficab sipuas sn 29",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 96 23 93 60 21 63 53 32 58 5 90 25\nesk loyv xarrr xaz rfivgv ydc jbc ye fo dyghv o n wc kup zhr d qomt bbob d acc d kkmnn cx oi 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "404 162 194 430 283 269 119 327 232 488 51 408 350\nx bguop kjkf ukzau ycduxt d bdg mcvol foax oq jt udli lawha vjb wgadh vv hd vnn in h dkctc iqvfz vcfu v 362",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "334 72 249 315 455 383 366 178 134 407 55 345 205\njbxs jdkd giikl js x oh rkjdq ezjhg j hrffn g zeuj uh td zp hoj zhr ulgg jkxb lm ewma lqp meqa iexmm 86",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "252 465 120 165 145 368 195 133 384 418 172 491 464\nk fjko rlb rwt ddvhv jxy yeac knv w dyo yifcdy y b ijzk annn mv ziadp bcrco w xfspb nbki zn igvin st 338",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "409 476 90 152 496 103 474 481 410 141 195 80 174\nmzxf qdfv z hfsdk csg kxh apxpe w nkz yj qxmom vwi q xyvwv gx stbfx snir hmdh ppxlf bjxst ry qlj erjegi g 426",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "150 240 54 358 376 345 288 172 299 437 331 246 464\ndxluqf v nueu zcoc c dljb gmo cgp n zsx tjwmx ph frpw dg ycmh jo ter taglp rbkgqt yj do xtdz eo frzav 319",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "298 393 345 205 297 274 330 305 186 238 429 296 393\nm rcyp ucwgs mx w sd o jh k vokdx zsjip d idaju bl fh tpe rppk fy wciy ekxnz pxiw ypd uvhl asx 154",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "348 224 276 475 271 278 64 264 254 372 415 284 346\ngjys k q hlr qnnh drjv uxgkl oeiv f c w trizj beout ainvq x tkoqu utqqa nnag zz bltu terp s nmc qjj 322",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\ntvfeu wdt ur t rrrix gra f g eclx xwmxr e c yzky qmx kfka j e zg kvcm xjaol df kxmoy y bz 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nvad fda cbg b by v o bwem uiay uihag ho qdp rm x p uctd xsdpe nx sedq tiv lw yyps ahrge yri 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 999 999 1000 1000 1000 2 999 999 999 2 999\nawd n dchky w uk huct ds fg e bbofg cvf sae tdr yxid v pfvn t fnwwn ldii aegwe qoud gzvkv lbo jguz 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 2 1 1 999 2 1 1000 999 1 2 2\nwzebau w c emndc mddaoa sx riok wk zfbq dc ypzz cfqeb avs zpop at z s lfqv hlmd w crqy ulh mnjwkf rqup 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}