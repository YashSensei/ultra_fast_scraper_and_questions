{
  "problem_code": "problems",
  "title": "Divide Polygon (HARD)",
  "tags": [],
  "text": "This is hard version ofDTPOLY.Determine the number of ways to cut a convex polygon withNvertices if the only cuts allowed are from vertex to vertex, each cut divides exactly one polygon into exactly two polygons, and you must end up with exactlyKpolygons. Consider each vertex distinct. For example, there are three ways to cut a square - the two diagonals and not cutting at all - but only two ways to cut it to form 2 polygons, and only one way to cut it to form 1 polygon. The order of cuts does not matter. Since the number of ways can be very large, you should return the number taken moduloM.InputInput contains several test cases, i-th line consists of 3 integers:Ni(3 ≤Ni,ΣNi≤ 108over all test cases),Ki(1 ≤Ki≤Ni- 2) andMi(1 <Mi< 260), all pairs (Ni,Ki) are different.OutputOn the i-th line print the number of different ways to cut the polygon withNivertices intoKipieces moduloMi.ExampleInput:4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049Output:2\r\n21\r\n984650007\r\n780127215155143528",
  "sample_input": "Input:4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049Output:2\r\n21\r\n984650007\r\n780127215155143528",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DTPOLY2",
  "scraped_at": "2025-08-17 00:33:58",
  "test_cases": [
    {
      "input": "4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049",
      "expected_output": "2\r\n21\r\n984650007\r\n780127215155143528",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10 9\n2 10 8\n8 9 3\n10 8 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 10\n10 5 9\n7 4 1\n3 4 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 5 6\n7 1 3\n2 5 5\n2 10 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "61 65 7\n11 98 58\n81 99 20\n50 94 48",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 96 68\n12 77 50\n10 64 25\n60 21 10",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "38 50 30\n89 90 21\n80 92 48\n57 84 68",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "31 9 1\n35 10 13\n11 94 98\n8 32 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 19 3\n97 98 51\n6 83 41\n46 89 23",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "386 497 157\n412 471 269\n280 476 418\n485 369 225",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "94 80 426\n343 100 263\n116 427 224\n343 450 445",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "377 257 412\n354 368 473\n81 151 234\n174 150 264",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "262 468 401\n486 338 82\n370 155 461\n72 338 263",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "460 359 151\n485 374 283\n329 86 387\n300 223 419",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "376 484 250\n248 227 384\n287 135 456\n421 201 83",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "362 385 311\n85 399 172\n401 138 455\n374 369 223",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1\n1 999 2\n1000 1000 999\n1 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 1000\n2 1000 2\n2 1 1000\n2 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:20",
  "total_test_cases": 20
}