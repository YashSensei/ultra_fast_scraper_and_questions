{
  "problem_code": "problems",
  "title": "LIFE IS A RACE",
  "tags": [],
  "text": "Life is a race with hard working humans. Assume a hypothetical situation in which God has to send many humans on earth with some level of intelligence. Level of intelligence is measured in a whole number. God has to take care that person arriving later on earth should have more level of intelligence so as to cope with the competitive world. God’s assistant suggested him a non-decreasing sequence called S. Lets see the sequence.Description of SequenceAny natural number n occurs exactly S[n] times and all n occurs consecutively. The first few terms are stated below.n 1 2 3 4 5 6 7 8 9 10 11 12 ...S(n) 1 2 2 3 3 4 4 4 5 5 5 6 ...S[1000] = 86So, Person 1 arrives on earth with level of intelligence = 1.Person 2 arrives on earth with level of intelligence = 2.Person 3 arrives on earth with level of intelligence = 2.Person 4 arrives on earth with level of intelligence = 3.And so on.But God sends some good hearted person (Person who not only lives for themselves but for the world) when n's cube root is a positive integer. But there is a SuperGod which rarely opens his eyes and as he opens his eyes, he increases the level of intelligence of some of the good hearted persons. Now God needs to know the total level of intelligence of some of the good hearted people.Good hearted person 1: person 1Good hearted person 2: person 8Good hearted person 3: person 27Good hearted person 4: person 64And so on.God needs a programmer to solve his queries. God’s input data format is explained below.Will You help God?? (He might increase your lifetime :) )InputFirst line of input contains 2 integers, x and y, where x denotes the number of time the SuperGod opened his eyes and y denotes the number of queries of God.Next x lines follows 3 integers L, R, I, which denote that SuperGod has increased the level of intelligence of good hearted people ranging between L and R (inclusive both) by a constant I.Next y lines follows 2 integers L, R, which denotes that God needs to know the total level of intelligence of good hearted persons ranging between L and R (both inclusive).Note:Good hearted person L is person L*L*L.Good hearted person L+1 is person (L+1)*(L+1)*(L+1)Good hearted person R is person R*R*R.OutputOutput should contain exactly y lines, each containing the answer.ExampleInput:1 1\r\n1 1 1\r\n1 2Output:6Explanation of ExampleAnswer is S[1] + S[2*2*2] + 1 = 6Constraintsx <= 100000y <= 1000001 <= L, R <= 999999I <= 10Click here to see my set of problems at Spoj.",
  "sample_input": "Input:1 1\r\n1 1 1\r\n1 2Output:6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LIFERACE",
  "scraped_at": "2025-08-17 00:33:50",
  "test_cases": [
    {
      "input": "1 1\r\n1 1 1\r\n1 2",
      "expected_output": "6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 7\n6 1 6\n1 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n4 9 10\n10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n9 1 9\n1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "94 62\n59 62 89\n3 57",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "28 44\n34 73 62\n49 76",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 74\n20 22 61\n12 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 82\n1 22 39\n24 34",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 39\n15 67 14\n41 43",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "371 322\n64 336 185\n333 423",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "196 61\n87 159 343\n53 72",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "454 145\n129 482 83\n343 347",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "434 349\n439 393 95\n58 175",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "153 86\n483 229 437\n279 93",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "109 452\n80 287 241\n316 246",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "185 52\n150 250 280\n449 484",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999\n999 2 999\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n999 2 1\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}