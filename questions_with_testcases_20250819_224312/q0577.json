{
  "problem_code": "problems",
  "title": "Light Switching",
  "tags": [],
  "text": "Farmer John tries to keep the cows sharp by letting them play with intellectual toys. One of the larger toys is the lights in the barn.  Each of the N (2 ≤ N ≤ 100,000) cow stalls conveniently numbered 1..N has a colorful light above it.At the beginning of the evening, all the lights are off. The cows control the lights with a set of N pushbutton switches that toggle the lights; pushing switch i changes the state of light i from off to on or from on to off.The cows read and execute a list of M (1 ≤ M ≤ 100,000) operations expressed as one of two integers (0 ≤ operation ≤ 1).The first kind of operation (denoted by a 0 command) includes two subsequent integers Siand Ei(1 ≤ Si≤ Ei≤ N) that indicate a starting switch and ending switch. They execute the operation by pushing each pushbutton from Sithrough Eiinclusive exactly once.The second kind of operation (denoted by a 1 command) asks the cows to count how many lights are on in the range given by two integers Siand Ei(1 ≤ Si≤ Ei≤ N) which specify the inclusive range in which the cows should count the number of lights that are on.Help FJ ensure the cows are getting the correct answer by processing the list and producing the proper counts.InputLine 1: Two space-separated integers: N and MLines 2 to M+1: Each line represents an operation with three space-separated integers: operation, Si, and EiOutputLines 1: number of queries: For each output query, print the count as an integer by itself on a single line.ExampleInput:4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4Output:1\r\n2",
  "sample_input": "Input:4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4Output:1\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LITE",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4",
      "expected_output": "1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\n6 8 8\n3 4 3\n8 9 7\n7 10 7\n7 7 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 7\n3 1 6\n7 7 10\n9 7 1\n6 1 6\n1 7 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n4 9 4\n9 4 8\n8 1 7\n6 3 10\n2 6 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 19\n93 64 97\n7 52 45\n52 78 92\n60 18 6\n33 15 65",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "19 38\n59 39 12\n34 61 63\n21 75 92\n97 20 32\n22 47 16",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 47\n27 37 73\n75 41 58\n29 89 72\n18 5 87\n3 40 31",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 31\n48 69 53\n74 3 16\n7 19 41\n66 26 53\n75 61 7",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 98\n9 49 70\n24 85 87\n91 38 53\n41 28 17\n97 51 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12 39\n38 41 26\n37 29 11\n7 26 42\n9 46 11\n26 5 36",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "8 41\n22 41 15\n50 32 6\n30 38 24\n37 49 43\n10 43 39",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "17 8\n38 38 7\n46 10 50\n50 13 7\n23 25 37\n9 40 50",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "21 14\n16 44 30\n35 30 32\n34 23 21\n8 46 46\n26 19 11",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "17 31\n50 42 35\n10 21 37\n9 44 43\n44 30 24\n22 43 47",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "13 31\n27 34 28\n8 13 9\n35 31 39\n21 49 23\n42 34 38",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "41 24\n26 46 23\n25 38 11\n26 39 7\n28 14 45\n46 27 37",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99\n1 99 99\n99 99 99\n2 100 2\n100 99 99\n1 100 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 100\n1 1 99\n2 1 99\n2 2 99\n1 99 2\n2 99 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:14",
  "total_test_cases": 20
}