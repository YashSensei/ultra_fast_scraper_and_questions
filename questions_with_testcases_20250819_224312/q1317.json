{
  "problem_code": "problems",
  "title": "Horrible Queries",
  "tags": [],
  "text": "World is getting more evil and it's getting tougher to get into the Evil League of Evil. Since the legendary Bad Horse has retired, now you have to correctly answer the evil questions of Dr. Horrible, who has a PhD in horribleness (but not in Computer Science). You are given an array ofNelements, which are initially all 0. After that you will be givenCcommands. They are:0 p q v- you have to addvto all numbers in the range ofptoq(inclusive), wherepandqare two indexes of the array.1 p q- output a line containing a single integer which is the sum of all the array elements betweenpandqinclusive.InputIn the first line you'll be givenT, number of test cases.Each test case will start withN(N≤ 100 000) andC(C≤ 100 000). After that you'll be givenCcommands in the format as mentioned above. 1 ≤p,q≤Nand 1 ≤v≤ 107.OutputPrint the answers of the queries.ExampleInput:18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8Output:80508",
  "sample_input": "Input:18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8Output:80508",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HORRIBLE",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8",
      "expected_output": "80508",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 7 7 10 3 3 3 2 1 8 8 6 6 1 7 6 6 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 7 4 8 2 5 9 6 10 7 8 2 9 10 9 5 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 4 2 10 8 4 7 2 8 9 2 8 6 7 10 4 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 74 97 70 59 40 73 85 32 35 51 58 16 16 7 54 70 38",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 40 88 90 78 82 95 53 37 28 35 47 65 21 100 99 13 53",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "45 46 15 46 55 7 32 2 17 92 10 62 60 90 72 38 67 95",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "40 10 36 53 10 75 11 44 99 98 22 17 78 36 51 69 18 16",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 81 92 36 21 56 90 58 67 31 17 36 73 43 26 64 36 78",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "45628 7506 30328 18220 35846 14574 49972 16958 25709 46198 49596 25855 12078 27982 7022 14936 19710 27710",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "37797 14394 5758 6159 41475 5072 39361 17884 34523 12408 41728 47284 46554 42466 19736 9170 38501 13377",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8876 44240 26994 14948 19537 16360 43648 46198 16602 37276 23135 39813 27011 38405 9676 33649 28052 40254",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "42393 27159 45245 14919 18791 7086 8749 47109 10409 32587 13559 22980 22257 20440 35057 9859 15697 13663",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12017 47664 22861 42997 9535 20480 41703 14204 10794 34104 47796 37522 7519 16873 37375 36519 43964 40768",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14310 15120 49473 19593 14142 24938 41278 49386 45970 10447 11824 25141 12451 45786 7927 23204 45933 44015",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "18958 21778 42102 35706 40539 9663 41759 8280 17279 39546 47519 33858 44188 34522 5345 39974 29064 37580",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 2 100000 100000 1 1 100000 2 2 2 100000 100000 99999 99999 1 2 99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 100000 99999 2 99999 1 100000 100000 1 100000 99999 100000 2 1 1 99999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}