{
  "problem_code": "problems",
  "title": "Boiling Vegetables",
  "tags": [],
  "text": "The trick to boiling vegetables is to make sure all pieces are about the same size. If they are not, the small ones get too soft or the large ones get undercooked (or both). Fortunately, you have heard of the kitchen knife, but your parents’ warnings of using sharp instruments still echoes in your head. Therefore you better use it as little as possible. You can take a piece of a vegetable of weight w and cut it arbitrarily in two pieces of weight wleftand wright, where wleft+ wright= w. This operation constitutes a “cut”. Given a set of pieces of vegetables, determine the minimum number of cuts needed to make the ratio between the smallest and the largest resulting piece go above a given threshold.InputThe input starts with a ﬂoating point number T with 2 decimal digits, 0.5 < T < 1, and a positive integer N≤1 000. Next follow N positive integer weights w1, w2, ..., wN. All weights are less than 106.OutputOutput the minimum number of cuts needed to make the ratio between the resulting minimum weight piece and the resulting maximum weight piece be above T. You may assume that the number of cuts needed is less than 500.To avoid issues with ﬂoating point numbers, you can assume that the optimal answer for ratio T is the same as for ratio T + 0.0001.ExampleInput 1:0.99 3\r\n2000 3000 4000Output 1:6Input 2:0.80 2\r\n1000 1400Output 2:3",
  "sample_input": "Input 1:0.99 3\r\n2000 3000 4000Output 1:6",
  "sample_output": "Input 2:0.80 2\r\n1000 1400Output 2:3",
  "link": "https://www.spoj.com/problems/BOILING",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "Input 1:0.99 3\r\n2000 3000 4000Output 1:6",
      "expected_output": "Input 2:0.80 2\r\n1000 1400Output 2:3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 7 10\nhdq ca 1\n6 10 9 1 2\n4 7 nikocu i",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2 2\ns ovumb 8\n5 6 2 4 6\n1 10 zmisljdfwe xt",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 6 10\npo hnrraa 3\n10 9 8 5 6\n4 7 gkijcm zigav",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "90 39 87\nouv jwhph 55\n25 31 29 63 3\n83 70 lvk bf",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 41 70\nae fgfx 35\n90 73 70 83 95\n36 56 ylqskgrrd mwkl",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 42 39\nldlav c 76\n92 60 43 26 24\n12 58 wkkhzv uven",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 52 22\nx sw 6\n76 85 65 31 16\n98 53 cimighkee rt",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 54 90\nwwqco q 87\n85 71 32 29 69\n42 44 em rc",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "294 437 339\ndou jnk 500\n377 70 310 356 132\n261 169 zjgkpezr botf",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "146 158 324\npny aeweex 221\n86 89 265 359 244\n352 250 luvyhqtqv sb",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "413 295 497\nvrb cgzc 453\n410 69 461 239 326\n394 300 edeao rzo",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "76 217 285\ndkwt lpum 174\n414 56 441 453 103\n240 178 vkqxpeet bryq",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "259 441 189\nlp jttw 65\n291 135 471 121 309\n311 348 wijdph zkon",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "453 481 235\njtg vozzb 282\n413 170 253 230 348\n451 136 updbyfvqi qisu",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "109 270 253\nyntk hj 421\n302 149 233 208 76\n455 256 cbqpelz oxz",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\ntn c 1000\n1000 1000 1000 1000 1000\n1000 1000 njdq kbf",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nngu y 1000\n1000 1000 1000 1000 1000\n1000 1000 gxdsjaj un",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 2\ncfrlp qj 2\n1000 1000 999 1 1000\n1 2 azfrroqnx cwgl",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 999\ntyr fcqxvx 1\n2 2 1 2 999\n1 1000 ytrtnztzs k",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:16",
  "total_test_cases": 20
}