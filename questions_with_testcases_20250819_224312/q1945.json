{
  "problem_code": "problems",
  "title": "Kangaroos",
  "tags": [],
  "text": "Byteasar, who is interested in wildlife photography, is planning a trip to Australia. He has started preparing his photographic equipment for taking pictures of kangaroos, and has to decide what items to pack. His equipment includes an extensive collection of photographic lenses with varying characteristics for different angles of view and focusing abilities. The best quality of pictures of animals, such as kangaroos, is achieved when the distance between the camera and the animal is within the optimal range of the lens.Byteasar's trip passes through a sequence of access points for wildlife observation and photography. The Australian guides gave Byteasar a detailed description of these observation points-in particular, the distances at which kangaroos can be expected.Obviously, not all the lenses from Byteasar's large collection will fit in his luggage, so some decisions must be made. Since Byteasar wishes to keep his lens-changes to a minimum, he wants to find-for each of the lenses-the longest contiguous sequence of observation points on the trip for which that lens is suitable. A lens is suitable for a given observation point if there exists a distance from the range of expected distances that lies within the optimal range of that lens.InputThe first line of the standard input contains two integers, N and M (1 ≤ N ≤ 50000, 1 ≤ M ≤ 200000), where N is the number of observation points on the trip and M is the number of lenses in Byteasar's collection.The next N lines describe the access points for wildlife observation and photography on Byteasar's trip. Each of these lines contains two integers, Aiand Bi(1 ≤ Ai≤ Bi≤ 109), indicating that at the i-th observation point kangaroos can appear at a distance of Aito Bibytean feet, inclusive.The next M lines describe the lenses. Each of these lines contains two integers, Liand Ri(1 ≤ Li≤ Ri≤ 109), indicating that the i-th lens works best for kangaroos that are at a distance from Lito Ribytean feet from the camera, inclusive.OutputThe standard output should consist of M lines containing exactly one integer each. The i-th output line indicates the number of observation points in the longestcontiguoussegment of the trip where the i-th lens can be used by Byteasar. The lenses are numbered according to their order in the input file.ExampleInput:3 3\r\n2 5\r\n1 3\r\n6 6\r\n3 5\r\n1 10\r\n7 9Output:2\r\n3\r\n0",
  "sample_input": "Input:3 3\r\n2 5\r\n1 3\r\n6 6\r\n3 5\r\n1 10\r\n7 9Output:2\r\n3\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STC08",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "3 3\r\n2 5\r\n1 3\r\n6 6\r\n3 5\r\n1 10\r\n7 9",
      "expected_output": "2\r\n3\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\n6 4\n5 7\n5 2\n10 4\n1 6\n9 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 1\n7 3\n6 10\n7 10\n8 6\n7 8\n2 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n2 6\n9 2\n10 4\n2 7\n4 3\n1 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 56\n44 51\n49 52\n3 74\n38 73\n59 13\n72 80",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 82\n6 67\n19 19\n16 35\n2 62\n9 41\n2 11",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "75 94\n20 61\n38 71\n58 56\n100 54\n55 16\n85 14",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "18 50\n72 32\n94 66\n77 84\n56 47\n33 19\n25 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 20\n80 10\n4 65\n50 52\n16 18\n86 8\n8 63",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "14158 10123\n4226 24252\n18879 19032\n10364 4062\n6097 18884\n3457 4809\n23666 21488",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "21444 19517\n11136 6465\n14679 5490\n13803 6239\n7837 9986\n3081 6344\n5493 6844",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12214 22207\n8117 20669\n18506 15234\n6646 14520\n12417 17825\n22115 8694\n15657 6667",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6034 5845\n3224 14577\n11837 6386\n14491 24179\n20224 6863\n9769 15354\n19542 18866",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "10324 19546\n19224 13099\n6761 10650\n24926 19490\n22962 13480\n16083 12604\n24491 9529",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5252 24493\n16164 17681\n4124 17040\n17811 6299\n21430 22308\n23915 21151\n15233 11726",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "12006 5994\n2677 20153\n14440 8176\n15943 18101\n13579 16889\n12594 10836\n20117 22722",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 2\n2 1\n50000 1\n50000 50000\n2 50000\n2 49999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "49999 50000\n2 50000\n49999 2\n49999 1\n49999 1\n49999 1\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}