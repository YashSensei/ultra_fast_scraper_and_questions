{
  "problem_code": "problems",
  "title": "Lannister Army",
  "tags": [],
  "text": "\"A Lannister Always Pays His Debts.\"That's true, now here is a chance for you to get paid by Jaime Lannister.In Jaime's army there are totalNnumber of warriors.And all them are standing in a single row.Now Jaime wants to convey a message to his warriors. But it's very difficult to convey a message if warriors are standing in a single row.So, Jaime wants to break that single row intoKrows. Such that in each row at least one warrior should be there.Also, there is an amount of unhappiness associated with each warrior x which is equal to : number of warriors in front of x (in his row) whose height is greater than the height of x. And, total unhappiness is sum of unhappiness of all warriors. Jaime wants that his army should be happy as much as possible.Now, Jaime wants you to break the single row intoKrows such that total unhappiness should be minimum.Note: You just have to break the row, you are not allowed to change the position of the warriors.InputFirst line of input contain two integersNandK.Second line of input containNnumber of integers,ith of which denotes height ofith warrior standing in that single row (represented asH[i]).Constraints1 ≤N≤ 50001 ≤K≤ N1 ≤H[i]≤ 105OutputOutput the minimum possible value of \"total unhappiness\".ExamplesInput:6 3\r\n20 50 30 60 40 100Output:0ExplanationBreak as:Row 1 : 20 50Row 2 : 30 60Row 3 : 40 100Input:8 3\r\n20 50 30 60 40 100 5 1Output:2ExplanationRow 1 : 20 50 30 60, Unhappiness = 1Row 2 : 40 100, Unhappiness = 0Row 3 : 5 1, Unhappiness = 1Total = 2",
  "sample_input": "Input:6 3\r\n20 50 30 60 40 100Output:0",
  "sample_output": "Input:8 3\r\n20 50 30 60 40 100 5 1Output:2",
  "link": "https://www.spoj.com/problems/LARMY",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "6 3\r\n20 50 30 60 40 100",
      "expected_output": "0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3\r\n20 50 30 60 40 100 5 1",
      "expected_output": "2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 5\n4 10 6 8 2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\n2 1 10 8 10 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 7\n7 9 7 2 4 7",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "79 60\n63 69 9 9 17 50",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "28 35\n32 9 58 54 23 49",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 16\n41 41 94 32 59 45",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "83 96\n46 54 53 89 49 84",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32 55\n29 34 1 46 47 44",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "24825 14277\n21828 8258 20115 6486 22130 22793",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12044 4116\n17526 17552 16735 15525 21851 5153",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "15259 6358\n23104 21854 10570 20318 15914 5727",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "13717 23846\n18531 23519 13950 22269 19462 18251",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "18842 8835\n16112 12626 16060 19607 20648 12085",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10047 19954\n22520 22347 9001 6030 15960 19156",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "11176 15494\n4273 11775 18213 2900 14462 24112",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "50001 50001\n50001 50001 50001 50001 50001 50001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "50001 50001\n50001 50001 50001 50001 50001 50001",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 50001 2 2 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:22",
  "total_test_cases": 20
}