{
  "problem_code": "problems",
  "title": "Insect invasion",
  "tags": [],
  "text": "Ignacio liked to take part in programming competitions such as the Argentinian Programming Tournament during his years as a university student. He was very happy, and when he graduated he got a good job. However, with time routine and life in the big city started to make him feel uneasy. So one day he decided to move to the countryside and start a new life as a farmer. He hadn't saved a lot of money, but it was enough to buy a circular field.His life as a farmer didn't have a good start, as tragedy came before being able to enjoy his first crop. In the middle of his field a scarecrow was in charge of keeping birds at bay, but for some strange reason it was connected to a radioactive gas pipe coming from a nuclear plant close by. One morning the pipe broke and the gas escaped, destroying most of his field. Ignacio couldn't do anything about it, so only a thin strip on the border of his field remained intact. But that was not all, as the few surviving plants were soon attacked by a swarm of mutant insects. This time Ignacio wouldn't stand still, so he decided to fight the insect invasion with trained frogs.On the perimeter of his circular field he created $N$ ponds for the frogs, which he numberd from $1$ to $N$ in clockwise order. Then he bought $R$ frogs in a shop specializing in trained circus frogs, and numbered them from $1$ to $R$. During the night he put the frogs in the ponds, placing the $i$-th frog in pond number $B_i$. The frogs are very well trained, so at first light they will start to jump at a rate of one jump per minute. Each frog repeats a pattern of jumps every $K$ minutes. The $i$-th frog will jump advancing $A_{i,1}$ ponds in clockwise order during the first minute; it will then jump advancing $A_{i,2}$ ponds in the same direction, and so on until the $K$-th minute, in which it will jump advancing $A_{i,K}$ ponds. After that, the same pattern will be repeated, advancing $A_{i,1}$ ponds in the $K+1$-th minute, $A_{i,2}$ ponds in the $K+2$-th minute, etc. For example, let's consider the case with $N=5$ ponds and $K=3$. In this case, if frog number $1$ starts in pond $B_1 = 2$, being its jumping pattern $A_{1,1}=1$, $A_{1,2}=2$ and $A_{1,3}=1$, during its fist few jumps it will land in the ponds in the following order: $2$, $3$, $5$, $1$, $2$, $4$, $5$, $1$, $3$, $4$, $5$, \\dots.Ignacio is really quite unlucky, because the first frog suffers from an contagious disease which has turned it into a vegetarian. When the sun comes out and all the frogs start jumping, if a sick frog meets a healthy one in some pond, it will transmit it with this disease. In our example with $N = 5$ and $K = 3$ if there are $R = 2$ frogs and the second frog starts at pond $B_2 = 4$ with a jumping pattern given by $A_{2,1}=1$, $A_{2,2}=1$ and $A_{2,3}=1$, it will visit the ponds in the order 4, 5, 1, 2, 3, 4, $\\ldots$. Therefore, the first frog will transmit its disease to the second one after $5$ minutes, when both meet at pond number $4$. Generically, more and more frogs will get infected until either all of them are sick, or the remaining healthy frogs never meet with the sick ones, reaching at that point the maximum number of infected frogs.While writing this story the night has gone by, and even if Ignacio noticed that the first frog is sick, he is now unable to catch it because it is trained so well. He will have to go directly to the trained circus frog shop to complain. As he wants to ask for a refund, he should wait until the disease spreads completely, reaching the maximum number of infected frogs. Ignacio doesn't want to wait longer than necessary, so in order to help him you should answer two questions: What is the maximum number of infected frogs? In which minute will the last transmission of the sickness take plaIgnacio liked to take part in programming competitions such as the Argentinian Programming Tournament during his years as a university student. He was very happy, and when he graduated he got a good job. However, with time routine and life in the big city started to make him feel uneasy. So one day he decided to move to the countryside and start a new life as a farmer. He hadn't saved a lot of money, but it was enough to buy a circular field.His life as a farmer didn't have a good start, as tragedy came before being able to enjoy his first crop. In the middle of his field a scarecrow was in charge of keeping birds at bay, but for some strange reason it was connected to a radioactive gas pipe coming from a nuclear plant close by. One morning the pipe broke and the gas escaped, destroying most of his field. Ignacio couldn't do anything about it, so only a thin strip on the border of his field remained intact. But that was not all, as the few surviving plants were soon attacked by a swarm of mutant insects. This time Ignacio wouldn't stand still, so he decided to fight the insect invasion with trained frogs.On the perimeter of his circular field he createdNponds for the frogs, which he numbered from1toNin clockwise order. Then he boughtRfrogs in a shop specializing in trained circus frogs, and numbered them from1toR. During the night he put the frogs in the ponds, placing thei-th frog in pond numberBi. The frogs are very well trained, so at first light they will start to jump at a rate of one jump per minute. Each frog repeats a pattern of jumps everyKminutes. Thei-th frog will jump advancingAi,1ponds in clockwise direction during the first minute; it will then jump advancingAi,2ponds in the same direction, and so on until theK-th minute, in which it will jump advancingAi,Kponds. After that, the same pattern will be repeated, advancingAi,1ponds in theK+1-th minute,Ai,2ponds in theK+2-th minute, etc. For example, let's consider the case withN = 5ponds andK = 3. In this case, if frog number1starts in pondB1= 2, being its jumping patternA1,1= 1,A1,2= 2andA1,3= 1, during its fist few jumps it will land in the ponds in the following order:2,3,5,1,2,4,5,1,3,4,5, ...Ignacio is really quite unlucky, because the first frog suffers from a contagious disease which has turned it into a vegetarian. When the sun comes out and all the frogs start jumping, if a sick frog meets a healthy one in some pond, it will transmit it this disease. In our example withN = 5andK = 3if there areR = 2frogs and the second frog starts at pondB2= 4with a jumping pattern given byA2,1= 1,A2,2= 1andA2,3= 1, it will visit the ponds in the order4,5,1,2,3,4, ... . Therefore, the first frog will transmit its disease to the second one after5minutes, when both meet at pond number4. Generically, more and more frogs will get infected until either all of them are sick, or the remaining healthy frogs never meet with the sick ones, reaching at that point the maximum number of infected frogs.While writing this story the night has gone by, and even if Ignacio noticed that the first frog is sick, he is now unable to catch it because it is trained so well. He will have to go directly to the trained circus frog shop to complain. As he wants to ask for a refund, he should wait until the disease spreads completely, reaching the maximum number of infected frogs. Ignacio doesn't want to wait longer than necessary, so in order to help him you should answer two questions: What is the maximum number of infected frogs? In which minute will the last transmission of the sickness take place?InputThere are multiple test cases in the input file. For each test case, the first line contains three integer numbersN,RandK. The integerNrepresents the number of ponds in the field (2 ≤ N≤109),Rrepresents the number of frogs (2≤R≤200) andKrepresents the number of minutes after which the frogs repeat their jumping pattern (1≤K≤200). The second line containsRinteger numbersB1,B2, ...,BR, representing thei-th number the initial position of thei-th frog (1≤B_i≤Nfori = 1, ..., R, withBi≠ Bjifi≠j). The followingRlines describe the behavior of the frogs. Thei-th of these lines containsKinteger numbersAi,1,Ai,2, ...,Ai,K, representing the number of ponds thei-th frog advances in each of itsKjumps, in the order in which they occur (1≤Ai,j< Nfori = 1, 2, ..., Randj = 1, 2, ..., K).OutputFor each test case, print a single line containing two integer numbers, representing the maximum number of infected frogs and the minute in which the last transmission of the disease takes place, respectively.ExampleInput:5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1Output:2 5\r\n3 2\r\n1 0",
  "sample_input": "Input:5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1Output:2 5\r\n3 2\r\n1 0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016I",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1",
      "expected_output": "2 5\r\n3 2\r\n1 0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10 5\n6 5\n6 6 9\n2 2 2\n2 5 4\n2 9 9 10\n8 8 10 7\n9 1 5 4\n10 5 8 10\n8 10 7 7\n10 4 6\n6 6\n8\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2 8\n5 2\n7 6 6\n10 6 2\n7 8 1\n9 6 2 7\n5 4 2 1\n6 2 10 7\n10 6 2 8\n8 3 9 2\n2 10 6\n6 7\n9\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 8\n8 3\n2 6 8\n8 2 10\n7 7 8\n7 4 8 1\n4 4 9 5\n9 6 10 9\n2 10 5 1\n7 7 6 7\n10 10 10\n5 5\n1\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 68 85\n33 32\n10 77 59\n84 59 99\n81 82 34\n26 73 96 86\n36 2 44 9\n58 84 62 23\n1 37 97 56\n41 90 100 28\n81 23 28\n21 22\n34\n77",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 17 12\n85 57\n53 28 46\n35 25 23\n44 100 88\n12 46 91 16\n2 92 53 28\n68 30 55 12\n76 41 33 90\n11 32 67 88\n42 17 13\n13 74\n9\n84",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "97 85 33\n81 51\n83 32 81\n49 16 58\n51 72 100\n72 12 64 76\n64 43 32 17\n4 49 47 93\n56 52 34 92\n56 43 14 80\n29 37 92\n38 18\n23\n76",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 21 23\n8 45\n91 25 97\n12 65 46\n29 32 1\n27 22 78 17\n99 93 59 81\n29 39 64 69\n71 69 68 53\n25 52 72 17\n73 6 87\n7 32\n69\n30",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 51 70\n53 2\n72 85 64\n93 37 13\n18 28 9\n28 53 58 92\n70 30 10 27\n53 80 34 16\n10 40 31 64\n33 8 60 84\n82 24 41\n11 63\n89\n69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48 40 9\n47 18\n37 38 33\n39 53 52\n22 5 6\n6 43 20 15\n19 38 20 11\n53 34 38 27\n47 15 46 28\n45 12 6 30\n33 36 18\n18 16\n35\n20",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "16 34 14\n29 31\n38 16 50\n48 6 52\n45 48 42\n32 35 6 46\n47 25 13 53\n28 33 8 42\n13 22 46 44\n5 50 16 33\n43 37 24\n13 48\n29\n8",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "51 8 30\n39 50\n12 42 33\n28 23 12\n14 18 33\n34 37 39 22\n27 41 26 43\n36 34 14 48\n7 22 13 16\n11 36 39 26\n34 41 47\n54 35\n31\n53",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 11 39\n23 5\n12 42 18\n10 25 54\n50 40 34\n53 9 30 52\n38 26 40 35\n41 47 14 31\n36 16 54 49\n19 34 54 13\n31 10 7\n32 6\n17\n25",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6 23 10\n24 33\n10 8 16\n20 12 46\n7 5 21\n16 29 13 11\n27 25 27 37\n32 42 18 44\n34 36 28 25\n17 45 46 24\n20 24 42\n41 27\n47\n17",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "33 30 51\n40 18\n5 25 20\n16 47 23\n7 28 8\n5 21 9 25\n28 46 47 7\n38 30 46 27\n20 42 36 14\n9 17 10 14\n31 10 42\n11 40\n53\n5",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10 12 15\n21 21\n34 25 12\n31 13 26\n52 41 6\n44 30 6 30\n47 47 46 5\n34 34 25 13\n18 36 16 14\n51 23 22 51\n23 7 37\n41 52\n38\n10",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "109 109 109\n109 109\n109 109 109\n109 109 109\n109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109\n109 109\n109\n109",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "109 109 109\n109 109\n109 109 109\n109 109 109\n109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109\n109 109\n109\n109",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2\n2 2\n1 108 1\n109 108 108\n108 2 109\n108 109 108 2\n1 109 108 1\n2 109 1 1\n2 109 109 2\n2 109 108 2\n109 108 108\n1 109\n109\n109",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "108 1 109\n109 108\n1 2 1\n108 2 1\n109 109 108\n1 108 2 108\n1 108 1 2\n108 1 108 109\n1 2 109 1\n108 108 108 2\n108 1 109\n108 1\n108\n109",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:15",
  "total_test_cases": 20
}