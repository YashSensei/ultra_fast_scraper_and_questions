{
  "problem_code": "problems",
  "title": "Range Sum",
  "tags": [],
  "text": "You are initially given an array of N integers (1 ≤ N ≤ 105). Given this array, you have to perform 2 kinds of operations:(i) Operation 1 : Op1(l, r)You are given 2 integers l and r. (1 ≤ l ≤ r ≤ current size of the array). You need to return the sum of all the elements with indices between l and r (both inclusive). That is, if the elements currently in the array are a1, a2, a3.... an, you need to return the following sum : al+ al+1+ al+2... + ar.(ii) Operation 2 : Op2(x)You are given a single integer x (|x| ≤ 109). Add this element to thebeginningof the array. After this operation, x will now become a1, the old a1will now become a2, and so on. The size of the array will increase by 1.InputThe first line contains a single integer N (1 ≤ N ≤ 105), the number of elements initially in the array.This is followed by a line containing N space separated integers, a1a2... aN. (|ai| ≤ 109)The next line contains a single integer Q, the number of operations you will be asked to perform. (1 ≤ Q ≤ 105)Q lines of input follow. Each such line starts with either the number 1 or the number 2. This indicates the type of operation that you are required to perform. The format of these queries are as follows:1 l r : Carry out operation 1 with arguments l and r. (1 ≤ l ≤ r ≤ current size of the array)That is, return the sum of the following array elements : al+ al+1... + ar2 x : Carry out operation 2 with the argument x. (|x| ≤ 109)That is, add the value x at the beginning of the array.OutputFor each query of type 1, output the return value on a new line. No output needs to be printed for queries of type 2.ExampleInput #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
  "sample_input": "Input #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027",
  "sample_output": "Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
  "link": "https://www.spoj.com/problems/RANGESUM",
  "scraped_at": "2025-08-17 00:33:49",
  "test_cases": [
    {
      "input": "Input #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027",
      "expected_output": "Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1 10 4 5 5 1 8 1 9 3 2 8 2 4 4 3 7 7 9 5\nztz ml 8 4 10 10 2 5 2 10 2 3 1 10 8 9 9 1 kdw vjve",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 7 7 3 8 9 8 4 10 1 4 4 7 7 6 9 4 4 10 9 9\nwmjo wou 6 4 1 6 3 10 4 2 3 1 10 1 10 6 7 1 kdqacxe ghi",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 3 6 5 10 1 1 6 5 6 10 7 6 7 2 5 6 3 9 9\nkml a 9 10 1 10 4 8 10 7 1 9 8 7 6 1 7 9 nqobhs ajopvsvo",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 67 18 57 67 61 76 8 90 68 96 68 43 80 66 11 3 94 95 77 88\nps on 19 50 88 17 30 95 2 70 59 28 40 37 8 43 82 51 yq weoiqhxpm",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 4 4 78 68 25 11 77 20 6 34 8 57 81 95 7 100 17 63 4 89\njbiz vaf 81 15 74 96 72 28 4 56 28 28 41 91 67 52 14 80 e eaeldmvsms",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "62 90 66 30 23 84 47 33 26 65 80 30 35 16 95 33 71 43 80 50 22\ncbz kyfjl 18 99 99 80 56 65 15 55 53 6 15 8 92 92 61 95 har pciyjoe",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 95 61 42 1 88 66 18 61 8 44 34 28 22 72 46 63 37 55 45 19\nsh olhc 50 10 26 47 30 12 87 93 97 49 95 62 87 11 40 35 qutww rf",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 96 8 92 99 47 95 43 82 41 61 88 34 9 26 40 58 27 96 98 94\niq dbfcl 29 15 12 45 28 20 81 28 85 44 78 30 31 95 86 85 vxai ipe",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19 44 34 40 49 48 17 28 46 46 47 10 21 45 23 49 50 24 40 30 26\nqfcw ycd 19 39 43 20 24 28 5 44 38 38 18 28 26 44 11 16 xi zvvpyls",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "42 35 38 22 46 11 47 14 41 49 35 51 42 47 28 20 47 48 7 22 51\nvrucy k 24 23 36 43 9 21 16 20 35 21 10 42 40 15 52 48 ozcx wrdt",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 10 10 14 46 18 16 8 43 37 50 33 18 39 43 43 21 12 12 47 38\nsaz vmud 47 47 15 41 24 28 16 35 32 36 50 45 40 15 9 32 gagyt ckln",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "9 20 41 10 15 15 16 32 22 12 23 12 15 9 40 45 18 38 11 19 45\nmrjz ipqr 10 9 21 29 16 24 16 10 47 49 49 25 14 51 19 33 nwk jz",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12 45 51 37 31 46 23 19 9 35 21 50 11 10 38 30 41 7 51 14 45\nnnu evpqpz 45 47 50 51 34 13 43 6 15 14 42 51 27 47 11 44 ce upzqvvfuw",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42 32 17 31 48 32 34 37 36 52 28 43 11 42 44 40 19 40 44 49 10\nfy a 24 35 12 45 49 13 5 43 23 38 52 22 9 25 11 5 kivzeu hrjelnly",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44 9 37 5 19 43 7 42 51 47 48 38 38 27 46 52 33 23 24 25 6\npnkka h 6 29 8 5 35 15 48 45 48 19 34 52 20 13 21 25 rkpr qodxrca",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\nhm y 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 zqglea msw",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\nw daslh 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 pzgwvr powvu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 104 2 104 2 105 1 2 105 105 2 104 1 105 2 1 2 1 1 104 2\nqvswu rgmnau 105 2 1 104 105 105 105 104 104 105 104 105 105 1 104 105 bpf e",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 2 2 104 105 104 104 104 1 104 104 104 2 104 1 2 2 1 105 105 104\ndw jjwbsc 105 2 1 2 104 2 1 104 2 104 1 105 1 1 1 105 fgm z",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}