{
  "problem_code": "problems",
  "title": "Cross Mountain Climb Extreme",
  "tags": [],
  "text": "Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier. To do so, we will model the mountain as follows: the mountain consists of n adjacent stacks of stones, and each of the stacks is hihigh. The successive height differences are therefore hi+1− hi(for 1 ≤ i ≤ n−1). We would like all absolute values of these height differences to be smaller than or equal to some number d.We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number?InputOn the first line one positive number: the number of test cases, at most 50. After that, for each test case:One line with two integers n (2 ≤ n ≤ 10000) and d (0 ≤ d ≤ 109): the number of stacks of stones and the maximum allowed height difference.One line with n integers hi (0 ≤ hi≤ 109): the heights of the stacks.OutputFor each test case, output one line with the minimum number of stones that have to be added or removed, or “impossible” if it is impossible to achieve the goal.ExampleInput:310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3Output:6impossible4",
  "sample_input": "Input:310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3Output:6impossible4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CCROSSX",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3",
      "expected_output": "6impossible4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10 2 10 10 4 5 10 9 10 7 3 6 5 8 1 6 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 7 7 4 5 10 5 9 3 8 5 4 1 3 9 1 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2 4 2 5 3 9 4 9 4 5 2 7 8 3 4 3 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "66 47 80 45 67 61 22 67 30 89 51 83 60 43 97 15 17 13",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 93 85 8 26 54 6 12 98 52 89 86 45 67 74 14 43 78",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 15 45 18 65 82 62 49 40 60 89 52 25 51 100 88 58 6",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 6 92 68 16 71 59 53 42 14 36 48 76 100 81 39 92 89",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 37 81 98 56 46 55 99 95 65 28 94 77 71 77 40 63 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2711 3509 1594 1524 4345 2921 2540 3972 3675 1601 3826 4121 2728 3746 2602 767 2250 3533",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2672 4813 4470 961 662 3727 3540 884 3346 1799 732 1437 3287 4439 2968 4131 4685 592",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "903 1658 2379 4932 3234 1596 3962 4749 3453 2473 2775 3116 1077 1079 2325 3843 4114 1723",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1900 3576 4906 4096 1446 2743 3284 3875 3311 3973 4271 1113 932 3086 3901 2724 4350 704",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1518 673 4400 3331 3712 3676 3614 1820 3244 4275 4501 2091 625 4272 4586 614 4537 964",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "629 3053 4136 589 1807 2911 4454 4067 502 2971 1002 2627 1223 1793 3350 3230 929 3037",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2669 963 3848 4893 3931 3951 3888 2972 3022 1162 3466 4017 3600 2178 4696 2195 3624 4514",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 9999 1 2 1 1 10000 2 9999 1 2 1 9999 1 1 2 10000 9999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1 10000 9999 10000 9999 10000 1 1 2 1 2 1 10000 10000 10000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:17",
  "total_test_cases": 20
}