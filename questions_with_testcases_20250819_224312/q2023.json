{
  "problem_code": "problems",
  "title": "Matts Trip",
  "tags": [],
  "text": "Matt finds himself in a desert with $N$ ($2 \\leq N \\leq 10$) oases, each of which may have food, water, and/or a palm tree. If oasis $i$ has food, then $F_i=1$ - otherwise, $F_i=0$. Similarly, $W_i=1$ if and only if oasis $i$ has water, and $P_i=1$ if and only if it has a palm tree. These 3 values are completely independent of one another.Some pairs of these oases are connected by desert paths, which each take 1 hour to traverse. There are $M$ ($0 \\leq M \\leq 45$) such paths, with path $i$ connecting distinct oases $A_i$ and $B_i$ in both directions ($1 \\leq A_i,B_i \\leq N$). No pair of oases is directly connected by more than one path, and it's not guaranteed that all oases are connected by some system of paths.Matt starts at an oasis $S$, and wants to end up at a different oasis $E$ ($1 \\leq S,E \\leq N$).Both of these oases are quite nice - it's guaranteed that $F_S=W_S=P_S=F_E=W_E=P_E=1$.Since he's in a hurry to get out of the desert, he wants to travel there in at most $H$ ($1 \\leq H \\leq 10^9$) hours.However, he can only survive for up to $MF$ hours at a time without food, and up to $MW$ hours at a time without water ($1 \\leq MF,MW \\leq 4$). For example, if $MF=1$ and $MW=2$, then every single oasis he visits along the way must have food (as he would otherwise spend more than 1 hour without it), and he cannot visit 2 or more oases without water in a row.Since Matt is a computer scientist, before actually going anywhere, he's interested in the number of different paths he can take that will get him from oasis $S$ to oasis $E$ alive in at most $H$ hours.Note that there may be no such paths.Being a computer scientist, he of course only cares about this number modulo ($10^9+7$).InputLine $1$: 7 integers, $N$, $M$, $H$, $S$, $E$, $MF$, and $MW$Next $N$ lines: 3 integers, $F_i$, $W_i$, and $P_i$, for $i = 1..N$Next $M$ lines: 2 integers, $A_i$ and $B_i$, for $i = 1..M$Output1 integer, the number of different valid paths, modulo ($10^9+7$)Example 1Input:3 3 3 1 2 1 4\r\n1 1 1\r\n1 1 1\r\n0 1 0\r\n1 2\r\n2 3\r\n1 3Output:2Explanation:The two possible paths, described in terms of oases visited, are $1 \\rightarrow 2$ and $1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2$. Matt can never go to oasis 3, as it doesn't contain food, which he can't survive without for more than 1 hour. The path $1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 2$ is not valid, as it would take 5 hours rather than at most 3.Note that oasis 3 is the only oasis without a palm tree.Example 2Input:5 5 3 3 2 3 2\r\n1 0 0\r\n1 1 1\r\n1 1 1\r\n0 0 1\r\n0 1 0\r\n1 2\r\n1 3\r\n1 4\r\n3 4\r\n4 2Output:2Explanation:The two possible paths are $3 \\rightarrow 1 \\rightarrow 2$ and $3 \\rightarrow 4 \\rightarrow 2$.This time, oases 1 and 5 are lacking in palm trees.",
  "sample_input": "Input:3 3 3 1 2 1 4\r\n1 1 1\r\n1 1 1\r\n0 1 0\r\n1 2\r\n2 3\r\n1 3Output:2",
  "sample_output": "Input:5 5 3 3 2 3 2\r\n1 0 0\r\n1 1 1\r\n1 1 1\r\n0 0 1\r\n0 1 0\r\n1 2\r\n1 3\r\n1 4\r\n3 4\r\n4 2Output:2",
  "link": "https://www.spoj.com/problems/MATT",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "3 3 3 1 2 1 4\r\n1 1 1\r\n1 1 1\r\n0 1 0\r\n1 2\r\n2 3\r\n1 3",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5 3 3 2 3 2\r\n1 0 0\r\n1 1 1\r\n1 1 1\r\n0 0 1\r\n0 1 0\r\n1 2\r\n1 3\r\n1 4\r\n3 4\r\n4 2",
      "expected_output": "2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 3 3 6 3 9 1\n9 7 3\n5 2 1\n8 1 8\n9 9\n1 1\n4 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 4 5 7 1 4\n4 10 4\n9 9 10\n10 8 1\n1 10\n10 5\n8 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 1 2 4 5 8 2\n10 9 9\n3 2 7\n8 1 1\n10 9\n3 7\n4 3",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "74 55 52 7 86 22 90\n41 97 72\n9 48 13\n1 95 48\n75 26\n98 45\n91 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "34 21 74 62 29 37 38\n84 99 56\n58 33 9\n64 37 44\n71 95\n22 3\n77 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "75 99 89 97 81 19 5\n33 57 75\n77 58 88\n27 93 27\n7 25\n49 38\n61 68",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 95 16 33 60 17 90\n8 9 36\n64 87 58\n64 90 27\n4 18\n63 40\n1 38",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "30 14 21 50 46 53 51\n43 91 29\n43 53 51\n54 3 77\n1 18\n4 42\n27 78",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "353 403 441 95 223 119 195\n58 205 158\n397 309 207\n168 315 420\n265 374\n84 273\n165 286",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "149 494 316 251 481 275 387\n433 291 305\n406 233 53\n443 221 480\n496 456\n278 467\n185 68",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "375 371 355 230 385 226 116\n429 244 469\n210 250 473\n315 201 350\n183 108\n290 346\n81 489",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "452 291 236 173 414 96 332\n380 190 457\n129 201 65\n183 489 75\n155 145\n411 62\n147 192",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "262 213 66 353 443 179 266\n330 398 201\n94 255 498\n173 176 105\n135 221\n264 204\n392 126",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "428 429 416 433 351 439 119\n143 77 160\n77 59 100\n77 130 379\n425 433\n140 307\n333 161",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "66 142 269 314 259 278 461\n471 260 101\n153 363 148\n103 240 126\n498 325\n338 442\n219 225",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1 999 1 999 2\n2 1 2\n2 1000 1000\n1 2 999\n999 1000\n1000 1000\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-19 22:43:19",
  "total_test_cases": 20
}