{
  "problem_code": "problems",
  "title": "Bomberman",
  "tags": [],
  "text": "Alice and Bob love to play Bomberman. They decided to upgrade the game. Their version is played on a rectangular board divided into cells. The first player puts a bomb on any cell. The bomb destroys this cell, as well as all consecutive undestroyed cells left, right, above and below it. Then the second player puts his bomb, then again the first and so on. The player who destroys the last cell wins the game. Given the dimensions of the board, determine which player wins the game assuming that both players play optimally.InputThe first line contains T (1 ≤ T ≤ 1000) - the number of tests. The next T lines contain two integers m and n (1 ≤ m, n ≤ 100) - the size of the board.OutputFor each test print 1 if the first player wins the game, or 2 if the second wins.ExampleInput:1\r\n2 2Output:2Example of the first two moves of 7×7 board",
  "sample_input": "Input:1\r\n2 2Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BOMBER",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "1\r\n2 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n6\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n10\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n2\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "12\n90583052\n79410452\n19699914\n51523600\n48736672\n80163651\n86449704\n31822744\n12910762\n65398996\n37681036\n93065558",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n32251246\n92070032\n80777138\n33250783\n42782535",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n38150933\n81806857\n648264\n2687799\n4733262\n75009020\n50048358\n62335558\n43846339\n4201120\n11605768\n46490231\n82375641\n48936615\n83086649\n73496019\n22665306\n53393584\n49763812\n61780334",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n63661009\n32177500\n45510941\n75632077\n72433817\n96143964\n79645968\n19153119\n45933572\n59221822\n98050618\n61317090\n98284703\n29166168\n80147341\n72730862\n73413557\n79189699",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n60653161\n27723891\n2284529\n98101288\n13979407",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "66\n30877\n81476\n50739\n69579\n65565\n25253\n70458\n5461\n40902\n7851\n27289\n95632\n90722\n46573\n18171\n405\n8716\n9540\n44911\n53190\n95628\n99289\n78633\n47743\n66101\n95827\n46955\n87014\n68768\n80631\n3765\n15304\n1172\n80309\n1396\n16434\n88711\n91238\n76753\n84115\n60183\n71967\n70120\n87771\n81311\n98810\n56970\n34708\n21136\n88112\n76751\n79004\n70360\n85060\n52901\n68092\n72505\n16026\n74237\n23860\n98026\n6902\n81578\n57037\n21982\n56955",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n60307\n6393\n68941\n73097\n20864\n18083\n5943\n49409\n73440\n80039\n5071\n3846\n30844\n45556\n51837\n23212\n44934\n41525\n67867\n83362\n33435\n25897\n73074\n71916\n46210\n84562\n11589\n6282\n69876\n73229\n16476\n24296\n11923",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n16002\n80610\n45928\n62012\n41162\n60866\n7411\n57998\n56143\n31097\n22005\n86127\n57471\n72957\n1659\n70542\n86772\n74938\n34661\n86820\n930\n17956\n98126\n49794\n41202\n54173\n92770\n91720\n67432\n55023\n81706\n10930\n70588\n47529\n52195\n99525\n14752",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n13646\n14412\n98888\n96527\n41639\n54624\n31456\n99568\n29191\n16619\n48403\n66004\n301\n83661\n84574\n97554\n41754\n93586\n28506\n37195\n21690\n90678\n33262\n42935\n81265\n89334\n60041\n28220\n7133\n73537\n78016\n5884\n20648\n65350\n47\n14208\n82287\n93585\n45142\n61295\n9052\n89063\n88351\n25209\n20389\n10640\n26379\n14344",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n74699\n69768\n7790\n78785\n6793\n69103\n82690\n72384\n10374\n14671\n24495\n29997\n65292\n23439\n4414\n64654\n19298\n45605\n85773\n24921\n11320\n23482\n85103\n20736\n26191\n994\n66220\n1384\n50474\n63077\n15704\n59150\n22531\n24454\n73331\n93854\n94552\n68531\n90443\n51555\n90212\n36524\n90777\n47114\n6017\n51705\n8695\n57019\n27122\n4763\n35843\n68939\n65132\n23778\n44344\n69139\n81337\n52467\n17909\n24263\n29677\n99110\n94341\n61756\n43533\n32040\n2901\n99557\n32665\n10864\n22780\n60930\n17498\n30521\n96524\n59795\n1688\n98341\n94733\n56697\n14119\n69131\n8067\n19284\n19506\n98794\n99504\n61996\n10206\n25622",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n96203\n7112\n52528\n52097\n10817\n62888\n47731\n54540\n43512\n83894\n77988\n47049\n65907\n77641\n56007\n4024\n62471\n62397\n48727\n38974\n2239\n30357\n60290\n28044\n31405\n50898\n48361\n19768\n27034\n44677\n7671\n8790\n15719\n2503\n15672\n92148\n3882\n49889\n38151\n20688\n30440\n73122\n77066\n21304\n14567\n29021\n77183\n94195",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n17142\n72366\n41990\n33386\n69901\n13490\n24323\n15684\n51038\n6981\n10990\n89679\n87446\n18867\n51293\n68837\n76917\n56618\n54520\n6492\n12435\n60643\n9150\n89420\n79091",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n39166914\n93583065\n87662839\n79877018\n25335512\n66813789\n68149914\n86180606\n15819064\n4552426\n82562406\n18528454\n46718546\n73751887\n94158250\n47259455\n18347023\n38467219\n84076678\n83370193\n42676647\n23777361\n48026074\n13886936\n26547863\n66588870\n51665166\n59799564\n61816479\n88061365\n43388211\n36531153\n27401517\n53382056\n34498134\n98348982\n51149722\n23177135\n28385112\n90320031\n84472878\n76780638\n11935497\n86511681\n59837101\n62399904\n22643014\n321281\n10248842\n51711627\n43228969\n84605982\n8935902\n69422224\n20935489\n13597168\n64597966\n7665010\n17460806\n94667837\n40839451\n18157700\n1151519\n20882483\n69910177\n3245124\n67952563\n35271598\n50775667\n46181509\n16243975\n11984256\n60809178\n59832861\n69246167\n61287176\n11392404\n4224959\n55451798\n13279749\n31941952\n4054512\n35650926\n35947709\n33011540\n80760337\n70636299\n40378111\n90041960\n84398896\n69820449\n54229252\n77999263\n59683208\n50824936\n11346522\n58687304\n616465\n66049728\n58499170",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n25714884\n26658749\n21943615\n12377679\n50729187\n84427432\n48582615\n88760418\n93701561\n55951253\n71220395\n83643101\n31099191\n8421624\n48922139\n70446572\n47596023\n87291796\n4320072\n73151274\n28784601\n87817486\n94538849\n33566065\n44755470\n34119093\n68730673\n83579300\n13201625\n39086931\n84231446\n19546550\n35159460\n42415435\n28042362\n75941175\n23168888\n81457661\n28422003\n6848136\n40823608\n70352833\n43440278\n67506564\n98155754\n20649996\n56994247\n62447521\n5512447\n68942063\n53634227\n54845279\n38303515\n61594495\n88949103\n44049171\n55210773\n38473413\n83148068\n54193492\n40924910\n77959720\n79335350\n16583097\n73754599\n73240692\n51410434\n33787853\n87176979\n29631310\n96461936\n79539577\n24206733\n89164882\n72177230\n2023629\n62508640\n33988034\n37476838\n64933571\n98857526\n77022418\n32294459\n16093104\n17516579\n29221192\n43809287\n9096011\n25106444\n55141020\n62752944\n4868399\n89080202\n34937076\n15897959\n27328901\n12709358\n10032811\n18139737\n20203680",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "2\n54950999\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}