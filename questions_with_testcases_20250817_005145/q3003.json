{
  "problem_code": "problems",
  "title": "Ada and Panels",
  "tags": [],
  "text": "Ada the Ladybug has proved successful in solving some hard problems, so a construction\r\ncompany has asked her to solve a problem for them. There are multiple cities in\r\nthe country and each city owns exactly one panel-block. There are also\r\nunidirectional roads between some pairs of cities (note that circular\r\nself-roads and multi-roads with several traffic lines are allowed). A city can\r\nsell its panel-block to any city, to which they could transport the panel\r\nblock, and from which they can bring back their reward for it (i.e. there must\r\nbe a path from actual city to destination city and back). As long a city hasKpanel-blocks, it builds a prefab of heightKwhich looks exactly\r\nsame as each other prefab of heightK.The construction company notes all the heights down and puts them in an array. They are wondering how many distinct arrays are possible by moving the panel blocks between cities. However there is a catch. Consider a set of cities in which each city is reachable by every other city. Since we can easily shuffle the panel blocks between such a set of cities, we can create new permutations with the same set of heights. The construction company will NOT count any such cases. Hence they will only consider the distinct set of heights for such a set of cities.You have proved successful in helping Ada with some hard problems, so she has\r\nasked you to help her. Your job is following - count the number of possible\r\nstructures which could arise. Since this number might be pretty big, you have to\r\noutput it modulo109+7.InputThe first line contains two integers1 ≤ N, M ≤ 2*105,\r\nthe number of cities  an the number of unidireectional roads between them.The nextMlines contains two integers0 ≤ a, b < N,\r\nthe road from cityato citybOutputPrint a single line - the number of possible structures modulo1000000007.Example Input7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6Example Output15Example Input 27 7\r\n0 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 0Example Output 215Example Input 36 3\r\n0 1\r\n3 2\r\n4 5Example Output 31Example Input 48 7\r\n0 1\r\n1 0\r\n2 3\r\n3 2\r\n4 5\r\n5 6\r\n6 4Example Output 412",
  "sample_input": "7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6",
  "sample_output": "15",
  "link": "https://www.spoj.com/problems/ADAPANEL",
  "scraped_at": "2025-08-17 00:34:09",
  "test_cases": [
    {
      "input": "7 9\r\n0 1\r\n1 2\r\n2 3\r\n3 1\r\n2 0\r\n4 5\r\n5 4\r\n6 4\r\n5 6",
      "expected_output": "15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6\n10 7\n9 10\n10 1\n4 3\n10 2\n7 2\n2 10\n1 3\n3 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8\n5 3\n9 3\n8 7\n4 6\n9 3\n3 10\n9 7\n7 6\n2 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\n6 5\n5 9\n8 3\n7 6\n1 7\n3 3\n6 2\n8 4\n7 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 10\n25 93\n40 28\n36 3\n40 21\n71 23\n41 93\n77 62\n100 97\n93 82",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "93 64\n38 74\n60 24\n79 23\n6 78\n10 84\n9 92\n20 95\n58 44\n8 96",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "74 49\n28 23\n19 97\n15 27\n72 60\n25 2\n3 17\n39 91\n83 71\n28 17",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 71\n42 35\n61 17\n40 87\n48 18\n43 2\n60 95\n71 17\n51 52\n5 39",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 5\n48 94\n40 77\n67 80\n97 98\n22 90\n46 65\n10 40\n29 88\n58 43",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "457 169\n179 211\n455 317\n284 268\n493 103\n137 282\n212 343\n326 94\n151 239\n408 438",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "496 236\n377 387\n66 249\n326 279\n108 62\n58 347\n424 425\n387 222\n55 409\n458 254",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "73 220\n175 239\n325 335\n126 285\n295 115\n299 423\n353 135\n196 174\n112 393\n341 493",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "497 475\n342 264\n378 157\n126 85\n82 107\n272 492\n306 369\n113 236\n316 489\n142 414",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "413 414\n61 75\n77 55\n327 355\n191 94\n243 219\n185 118\n443 164\n250 316\n162 103",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "475 417\n403 121\n193 92\n457 488\n232 268\n328 357\n87 230\n253 390\n261 112\n429 366",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "465 84\n199 375\n495 253\n176 402\n445 324\n84 65\n187 78\n101 317\n263 477\n296 192",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n2 2\n2 1\n1000 999\n999 1000\n999 2\n999 999\n1 1000\n1000 2\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n999 2\n999 2\n1 1\n999 2\n1 999\n999 2\n999 999\n1000 1000\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}