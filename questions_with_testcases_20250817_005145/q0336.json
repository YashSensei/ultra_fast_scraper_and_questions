{
  "problem_code": "problems",
  "title": "How to pack containers",
  "tags": [],
  "text": "Products of a factory are packed into cylindrical boxes. All boxes have the same bases. A height of a box is a non-negative integer being a power of 2, i.e. it is equal to 2ifor somei= 0, 1, 2, ... . The numberi(exponent) is called a size of a box. All boxes contain the same goods but their value may be different. Goods produced earlier are cheaper. The management decided, that the oldest (cheapest) goods should be sold out first. From the warehouse goods are transported in containers. Containers are also cylindrical. A diameter of each container is a little bigger than a diameter of a box, so that boxes can be easily put into containers. A height of a container is a non-negative power of 2. This number is called a size of a container. For safe transport containers should be tightly packed with boxes, i.e. the sum of heights of boxes placed in a container have to be equal to the height of this container. A set of containers was delivered to the warehouse. Check if it is possible to pack all the containers tight with boxes that are currently stored in the warehouse. If so, find the minimal value of goods that can be tightly packed into these containers.Consider a warehouse with 5 boxes. Their sizes and values of their contents are given below:1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4Two containers of size 1 and 2 can be tightly packed with two boxes of total value 3, 4 or 5, or three boxes with total value 9. The container of size 5 cannot be tightly packed with boxes from the warehouse.TaskWrite a program that for each test case:reads descriptions of boxes (size, value) from a warehouse and descriptions of containers (how many containers of a given size we have);checks if all containers can be tightly packed with boxes from the warehouse and if so, computes the minimal value of goods that can be tightly packed into these containers;writes the result.InputThe number of test casestis in the first line of input, thenttest cases follow separated by an empty line.In the first line of a test case there is an integern, 1 <=n<= 10000, which is the number of boxes in the warehouse. In each of the followingnlines there are written two non-negative integers separated by a single space. These numbers describe a single box. First of them is the size of the box and the second - the value of goods contained in this box. The size is not greater than 1000 and the value is not greater than 10000. The next line contains a positive integerq, which is the number of different sizes of containers delivered to the warehouse. In each of the followingqlines there are two positive integers separated by a single space. The first integer is the size of a container and the second one is the number of containers of this size. The maximal number of containers is 5000, a size of a container is not greater than 1000.OutputFor each test case your program should output exactly one line containing:a single word \"No\" if it is not possible to pack the containers from the given set tight with the boxes from the warehouse, ora single integer equal to the minimal value of goods in boxes with which all the containers from the given set can be packed tight.ExampleSample input:1\r\n5\r\n1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4\r\n2\r\n1 1\r\n2 1Sample output:3",
  "sample_input": "1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4",
  "sample_output": "Sample input:1\r\n5\r\n1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4\r\n2\r\n1 1\r\n2 1Sample output:3",
  "link": "https://www.spoj.com/problems/CONTPACK",
  "scraped_at": "2025-08-17 00:33:16",
  "test_cases": [
    {
      "input": "1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4",
      "expected_output": "Sample input:1\r\n5\r\n1 3\r\n1 2\r\n3 5\r\n2 1\r\n1 4\r\n2\r\n1 1\r\n2 1Sample output:3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10\n7 9\n1 1\n4 4\n5 7",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 7\n5 4\n5 3\n4 5\n1 5",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 7\n5 10\n5 8\n5 7\n8 8",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "96 65\n32 31\n94 97\n85 21\n89 59",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "78 99\n74 73\n46 35\n89 83\n74 13",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 28\n91 11\n10 97\n67 87\n90 70",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 47\n43 40\n17 73\n43 46\n14 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "43 22\n68 59\n66 2\n42 42\n27 37",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "201 236\n368 218\n316 151\n362 129\n397 408",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "400 297\n104 127\n339 480\n386 287\n394 296",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "350 392\n260 266\n483 417\n375 374\n176 433",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "138 361\n392 155\n378 122\n110 275\n486 55",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "475 203\n51 215\n344 100\n251 59\n455 454",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "476 59\n88 483\n350 428\n209 210\n150 492",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "309 179\n57 458\n420 262\n367 359\n322 290",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n1 999\n2 1000\n1 999\n2 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n1000 1000\n1000 999\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:30"
}