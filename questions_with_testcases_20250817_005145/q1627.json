{
  "problem_code": "problems",
  "title": "Junk",
  "tags": [],
  "text": "Recognizing junk mails is a tough task. The method used here consists of two\r\nsteps:Extract the common characteristics from the incoming email.Use a filter matching the set of common characteristics extracted to\r\ndetermine whether the email is a spam.We want to extract the set of common characteristics from the N sample junk\r\nemails available at the moment, and thus having a handy data-analyzing tool would be\r\nhelpful. The tool should support the following kinds of operations:\"M X Y\", meaning that we think that the characteristics of spam X and Y are\r\nthe same. Note that the relationship defined here istransitive, so\r\nrelationships (other than the one between X and Y) need to be created if they\r\nare not present at the moment.\"S X\", meaning that we think spam X had been misidentified. Your tool should\r\nremove all relationships that spam X has when this command is received; after\r\nthat, spam X will become an isolated node in the relationship graph.Initially no relationships exist between any pair of the junk emails, so the number\r\nof distinct characteristics at that time is N.Please help us keep track of any necessary information to solve our problem.InputThere are multiple test cases in the input file.Each test case starts with two integers, N and M (1 ≤ N ≤ 105, 1 ≤ M ≤ 106), the\r\nnumber of email samples and the number of operations. M lines follow, each line is\r\none of the two formats described above.Two successive test cases are separated by a blank line. A case with N = 0 and M =\r\n0 indicates the end of the input file, and should not be processed by your program.OutputFor each test case, please print a single integer, the number of distinct common\r\ncharacteristics, to the console. Follow the format as indicated in the sample below.ExampleInput:5 6\r\nM 0 1\r\nM 1 2\r\nM 1 3\r\nS 1\r\nM 1 2\r\nS 3\r\n\r\n3 1\r\nM 1 2\r\n\r\n0 0Output:Case #1: 3\r\nCase #2: 2",
  "sample_input": "Input:5 6\r\nM 0 1\r\nM 1 2\r\nM 1 3\r\nS 1\r\nM 1 2\r\nS 3\r\n\r\n3 1\r\nM 1 2\r\n\r\n0 0Output:Case #1: 3\r\nCase #2: 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JMFILTER",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "5 6\r\nM 0 1\r\nM 1 2\r\nM 1 3\r\nS 1\r\nM 1 2\r\nS 3\r\n\r\n3 1\r\nM 1 2\r\n\r\n0 0",
      "expected_output": "Case #1: 3\r\nCase #2: 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1\n2 9\nlb 4 1\n7 2\nm 6 1\n9 2\nubv 10 1\n6\nwz 6\n5 1\nti 2 8\n2\nmmkmh 1\n7 1\n8 8\naa 7 10\n4 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n7 3\nfkmfo 10 10\n5 3\nt 4 9\n3 3\njlkh 2 3\n9\nztt 5\n6 5\nnfmeh 3 2\n7\nxglqv 10\n3 6\n10 8\nf 8 8\n8 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n7 8\ncig 3 9\n2 8\nu 10 4\n6 1\nrp 8 4\n7\nqfxf 7\n9 7\nxjj 5 1\n10\nvlv 2\n6 2\n7 3\nmgruv 4 3\n10 5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "51 6\n94 54\nzlk 53 34\n52 10\nkq 54 61\n90 67\nnqa 20 87\n80\nivbf 29\n55 75\njwqro 33 78\n87\ndsjuk 76\n6 69\n24 92\nmhjmx 58 89\n7 84",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 86\n85 61\nm 57 33\n50 18\nptcow 98 83\n73 81\nis 13 81\n20\nfbzh 88\n26 16\nzqr 87 74\n32\nrzikb 48\n96 31\n13 90\nps 27 21\n11 30",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 81\n10 66\naxmiu 26 93\n54 62\ncoqf 3 19\n91 57\np 26 46\n6\npcm 78\n2 53\nn 93 10\n66\nbvp 74\n1 20\n44 100\nzsch 44 83\n36 45",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 72\n19 85\nxfyl 33 10\n29 1\nve 5 73\n57 31\nxemyz 95 65\n1\nr 43\n5 62\nskgmf 42 19\n5\nr 100\n29 40\n99 51\no 7 92\n7 92",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 10\n63 60\nse 90 56\n90 54\nrhew 36 75\n27 7\ntepj 78 1\n52\nmh 65\n61 39\njwrt 37 24\n75\nkn 55\n93 74\n70 89\np 17 41\n62 56",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "40 41\n30 49\nzbhpa 49 23\n27 40\nwvas 5 22\n18 37\nzhbpd 18 24\n34\ncqcet 9\n48 30\nugm 25 6\n19\nwm 25\n22 41\n20 26\nukww 16 25\n28 16",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "29 32\n28 26\npur 16 42\n43 26\ngtzc 19 38\n13 43\ndrnf 8 36\n26\njknuq 41\n24 9\nkbgsd 18 47\n27\nyoo 16\n40 30\n34 28\nstnac 40 29\n15 23",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "14 29\n24 7\nrdy 36 21\n25 39\ncrerx 12 21\n28 14\nvf 12 52\n29\nlfsk 47\n15 28\nyqs 22 8\n9\ndzge 9\n17 29\n13 25\nylrwm 6 49\n19 29",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "25 36\n14 19\nziqu 25 9\n49 34\nwag 14 32\n47 46\nzgvnc 24 38\n30\ntk 16\n16 38\nxlr 18 35\n20\ntau 32\n13 18\n48 27\ntcz 40 26\n48 17",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12 29\n45 29\nehrge 25 28\n22 45\nbptsd 13 21\n47 20\ndra 39 44\n12\ncuv 47\n41 31\nyfy 13 23\n9\nxgx 9\n44 39\n33 27\nflb 40 50\n42 46",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "25 52\n34 19\nwg 29 25\n50 15\noudnm 44 19\n39 43\nsbhs 31 40\n50\nlbmqm 42\n24 33\nas 15 51\n35\nynzrs 51\n7 47\n35 16\nx 34 38\n10 48",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "22 13\n21 48\nnqsvf 46 5\n40 39\neamen 32 16\n42 23\nsphmj 25 9\n33\numvpo 39\n40 13\nvnk 5 40\n48\ny 48\n40 23\n48 11\nyn 35 18\n27 36",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105\nsr 105 105\n105 105\nv 105 105\n105 105\nvwtbc 105 105\n105\nyx 105\n105 105\nsqgu 105 105\n105\nphjm 105\n105 105\n105 105\nf 105 105\n105 105",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105\ndfswv 105 105\n105 105\nvd 105 105\n105 105\nkdnc 105 105\n105\nksuvw 105\n105 105\nawp 105 105\n105\nh 105\n105 105\n105 105\nxfiyi 105 105\n105 105",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "104 104\n2 105\npn 104 104\n104 105\nmy 2 2\n105 104\ntv 1 105\n104\nrjyyw 104\n105 1\negcpg 1 2\n2\ntw 1\n105 1\n104 105\nldv 105 1\n104 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 105\n105 2\nht 2 104\n105 104\nz 104 2\n2 2\nq 104 2\n104\ncmejf 104\n1 1\ncx 1 2\n1\nmini 104\n104 104\n105 105\ndz 2 105\n105 105",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:10"
}