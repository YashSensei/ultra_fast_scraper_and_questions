{
  "problem_code": "problems",
  "title": "Light Switching",
  "tags": [],
  "text": "Farmer John tries to keep the cows sharp by letting them play with intellectual toys. One of the larger toys is the lights in the barn.  Each of the N (2 ≤ N ≤ 100,000) cow stalls conveniently numbered 1..N has a colorful light above it.At the beginning of the evening, all the lights are off. The cows control the lights with a set of N pushbutton switches that toggle the lights; pushing switch i changes the state of light i from off to on or from on to off.The cows read and execute a list of M (1 ≤ M ≤ 100,000) operations expressed as one of two integers (0 ≤ operation ≤ 1).The first kind of operation (denoted by a 0 command) includes two subsequent integers Siand Ei(1 ≤ Si≤ Ei≤ N) that indicate a starting switch and ending switch. They execute the operation by pushing each pushbutton from Sithrough Eiinclusive exactly once.The second kind of operation (denoted by a 1 command) asks the cows to count how many lights are on in the range given by two integers Siand Ei(1 ≤ Si≤ Ei≤ N) which specify the inclusive range in which the cows should count the number of lights that are on.Help FJ ensure the cows are getting the correct answer by processing the list and producing the proper counts.InputLine 1: Two space-separated integers: N and MLines 2 to M+1: Each line represents an operation with three space-separated integers: operation, Si, and EiOutputLines 1: number of queries: For each output query, print the count as an integer by itself on a single line.ExampleInput:4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4Output:1\r\n2",
  "sample_input": "Input:4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4Output:1\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LITE",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "4 5\r\n0 1 2\r\n0 2 4\r\n1 2 3\r\n0 2 4\r\n1 1 4",
      "expected_output": "1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 7\n3 2 4\n9 3 2\n1 1 5\n3 9 1\n2 5 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 2\n1 2 5\n4 2 3\n5 7 6\n7 8 10\n10 3 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n4 2 4\n5 2 8\n4 2 5\n8 8 8\n6 4 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "45 39\n68 14 10\n71 19 93\n17 54 21\n83 32 48\n75 65 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 52\n27 7 56\n68 84 79\n80 42 79\n43 3 7\n33 2 44",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "8 23\n99 61 59\n84 97 51\n10 43 71\n2 76 85\n87 76 85",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "73 19\n36 4 84\n93 9 46\n96 12 5\n37 66 30\n83 55 100",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 22\n79 30 92\n86 85 82\n46 12 57\n93 78 14\n60 51 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12 45\n20 24 21\n35 17 50\n12 35 24\n21 21 20\n8 16 9",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "49 36\n42 12 42\n11 44 28\n21 43 23\n44 44 29\n12 45 30",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "26 27\n44 48 41\n22 41 44\n24 6 32\n26 49 42\n18 36 44",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "25 13\n13 39 35\n12 16 36\n22 5 32\n11 6 25\n8 38 18",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47 11\n40 40 40\n48 12 48\n12 39 45\n45 33 45\n50 44 24",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38 36\n25 6 40\n36 7 8\n45 43 29\n30 15 45\n22 18 5",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 20\n42 35 17\n33 5 37\n22 36 32\n43 12 9\n15 14 34",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99\n100 2 2\n99 99 99\n2 2 1\n100 1 100\n99 2 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 100\n2 99 1\n1 2 100\n99 99 100\n2 1 99\n99 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}