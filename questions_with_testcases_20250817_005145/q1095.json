{
  "problem_code": "problems",
  "title": "Greedy Hydra",
  "tags": [],
  "text": "Hydra is some very greedy animal. A hydra has 9 heads when he is born, and many more new heads will come out when he grows up. Of course, some old heads will break off because of caducity.One day, a hydra with M heads finds a tree with N fruits on it. He is very delighted and wants to eat this tree instantly. Since he has M heads, he must divide these N fruit into M groups, each group contains at least 1 fruit, and each head will eat a group of fruits.The biggest head among the M heads is named \"Boss\", it must eat neither more nor less than K fruits, and, in the nature of things, the biggest fruit included. These fruits are connected by N-1 branches, and there exists a path made up with branches between each pair of fruit.If two fruit connected by a single branch is put in different groups, the corresponding two heads will break the branch and eat the two fruits, otherwise the corresponding head will eat the two fruits without breaking the branch. Eating branches is not very comfortable of course, so every branch has a weight of illness, and the weight of illness of this hydra is the sum of the weights of illness of all branches he has eaten.Your task is to help the hydra to minimize his weight of illness.The picture below is an example.N=8, M=2, K=4.The bigger head eats 4 fruits (full points), the smaller head eats 4 fruits (empty points). The branch signed by a thin segment is eaten by the hydra.InputTen test cases (Given one after another, you have to process them all!) For each test case the first line contains 3 integers N (1 ≤ N ≤ 300), M (2 ≤ M ≤ N), K (1 ≤ K ≤ N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i, j, k separated by spaces denoted that there is a branch between fruit i (1 ≤ i ≤ N) and fruit j (1 ≤ j ≤ N) and the weight of illness of this branch is k (0 ≤ k ≤ 100000).OutputTen lines, each contains a single integer - the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output \"-1\" (without quotes).ExampleInput:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]Output:4\r\n[and 9 test cases more]LinkAfter solving this problem you can try the problemDRAGON2.",
  "sample_input": "Input:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]Output:4\r\n[and 9 test cases more]",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DRAGON",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5\r\n[and 9 test cases more]",
      "expected_output": "4\r\n[and 9 test cases more]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 9 6\n3 9 9\n4 2 6\n2 8 10\n8 1 10\n7 5 8\n7 4 1\n1 5 3\n2\nq 2 m qxr eckp",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 4\n3 3 8\n10 3 9\n2 4 4\n7 2 10\n4 6 4\n3 9 3\n5 8 4\n10\nzyo 3 zypf x tsdoi",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 6\n4 4 1\n2 4 3\n6 3 3\n2 7 2\n3 1 6\n9 4 6\n2 10 9\n4\nlyv 9 ue mte seqd",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "39 52 7\n71 12 63\n82 92 12\n49 39 1\n2 48 45\n53 54 33\n40 82 44\n67 59 17\n16\nqwgvu 70 lek m clpq",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "13 63 33\n54 52 73\n56 32 40\n3 97 71\n39 85 54\n60 31 42\n32 57 76\n92 64 48\n5\nv 65 tz jmiy mpdeh",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 54 97\n56 62 35\n56 65 72\n40 4 36\n34 58 66\n35 9 64\n49 31 73\n23 89 15\n57\niukuw 80 a jm timx",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 24 90\n38 86 42\n73 92 51\n4 90 22\n62 91 36\n19 95 61\n42 62 8\n78 87 84\n32\ntd 36 k ympc oyg",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 49 99\n43 38 41\n83 70 92\n87 66 95\n19 17 88\n75 28 37\n55 22 20\n76 82 62\n5\nfm 92 rj cwxwp tvch",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "45 33 107\n97 89 58\n141 131 80\n15 24 53\n101 51 146\n94 111 124\n83 133 40\n73 118 123\n129\niokhs 97 x no cy",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "71 81 30\n104 118 132\n42 59 114\n16 41 123\n129 79 105\n76 37 149\n85 26 28\n55 82 65\n91\nm 47 cfzo ctkx umlt",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "93 48 37\n57 31 142\n59 79 92\n143 117 81\n79 15 30\n55 128 121\n109 104 108\n96 36 76\n75\nzxd 66 lb ho mv",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "83 88 44\n57 130 144\n87 84 39\n55 24 43\n59 33 39\n109 26 106\n98 34 86\n44 47 87\n63\nh 70 bc qfcig yrqw",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "118 144 133\n96 117 146\n105 53 29\n48 66 27\n134 148 83\n47 94 91\n139 75 60\n42 55 116\n102\nxjd 94 dvc we l",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 52 40\n137 58 39\n52 35 68\n26 70 150\n64 36 50\n53 70 69\n76 141 131\n132 36 35\n139\nrjhk 118 d zxcti wavud",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "49 20 64\n75 20 35\n56 106 135\n100 64 130\n31 34 89\n134 33 137\n50 65 84\n123 95 55\n56\ngveww 99 vrszd nyg mmj",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300\nba 300 u e l",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300\n300\nj 300 cf a uhrv",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 300\n2 299 299\n300 300 299\n299 300 299\n299 2 2\n299 1 299\n299 300 300\n300 2 299\n299\njmju 1 mo rz vzc",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "299 299 299\n300 299 299\n299 2 1\n300 2 1\n300 1 300\n300 2 1\n1 1 300\n300 299 300\n1\noqk 2 ehzrd q u",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}