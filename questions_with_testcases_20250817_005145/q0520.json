{
  "problem_code": "problems",
  "title": "Tree Similarity",
  "tags": [],
  "text": "You are given two labeled and ordered rooted trees T and T' and\r\nwould like to calculate thedistancefrom T to T', which is\r\nthe minimum number of operations you can perform on T to make itequivalentto T'. For each operation you can choose to do one of three things:change\r\nthe label of one node in Tdelete a non-root node in Tinsert a new node in T at a position somewhere below its rootRecall the trees T and T' are ordered, which means that if a\r\nnon-leaf node has c children, its children are ordered from 1 to\r\nc. That is, there is a 1st child, a 2nd child, etc., all the\r\nway up to a cth child. When we say a tree X is equivalent\r\nto a tree Y, we mean the root of X should have the same label\r\nas the root of Y, their roots should have the same number of\r\nchildren (call it c), and the subtree rooted at the ith child of the\r\nroot of X should be equivalent to the subtree rooted at the ith\r\nchild of the root of Y for i=1, 2 ... c.We now describe what we mean by deletion and insertion of non-root\r\nnodes in T. When deleting a non-root node w with d children,\r\nlet u be its\r\nparent and suppose w is u's ith child. Then the first child of\r\nw becomes u's ith child, the second child of w becomes u's\r\n(i+1)st child, etc. For j < i, the jth child of u remains the\r\nsame, but for all j > i, the child which was formerly the jth\r\nchild of u now becomes its (j+d-1)st child (they get \"shifted\r\nover\" due to the insertion of w's children into u's child list).\r\nTo insert a non-root node w into the tree, we can choose any node\r\nu to be its parent, and we can choose any contiguous subsequence\r\n(possibly empty) of u's children to become w's children, putting\r\nw in their place. When inserting a node, we can give it any label\r\nwe want at the time of insertion.The root of T can never be deleted, and you can never\r\ninsert a new node above the root to become the old root's parent. You\r\ncan, however, change the label of the root.InputThe first line contains n and m separated by a space, the sizes of\r\nthe trees T and T', respectively (1 ≤ n, m ≤ 60). The next\r\nn lines describe\r\nT. On the ith line is a description of the ith node in the\r\ntree: its label, the number of children it has, then a list of its\r\nchildren in order from first to last, all space-separated. The next\r\nm lines similarly describe T'. Labels are nonnegative\r\nintegers fitting in a 32-bit signed integer. The root of each tree is the node which is not the child of any other node in the tree.OutputOn a single line output the minimum number of operations that can be\r\nperformed on T to make it equivalent to T', followed by a newline.ExampleInput:3 2\r\n6 0\r\n1 2 0 2\r\n4 0\r\n2 1 1\r\n4 0Output:2",
  "sample_input": "Input:3 2\r\n6 0\r\n1 2 0 2\r\n4 0\r\n2 1 1\r\n4 0Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TREESIM",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "3 2\r\n6 0\r\n1 2 0 2\r\n4 0\r\n2 1 1\r\n4 0",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3\n8 9\n6 1 6 6\n6 1\n4 6 6\n3 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n1 7\n8 9 10 9\n3 4\n10 7 6\n4 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n10 6\n9 2 6 3\n10 7\n1 7 3\n10 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 14\n3 54\n98 11 87 4\n82 5\n98 88 78\n22 50",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "23 58\n8 73\n25 98 12 25\n56 92\n24 12 71\n48 12",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 13\n63 31\n80 24 63 87\n49 92\n1 98 3\n6 78",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "93 13\n59 76\n53 7 22 83\n64 34\n81 15 20\n25 9",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 54\n9 63\n46 9 7 69\n47 92\n66 8 30\n31 68",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "257 338\n452 469\n483 437 416 198\n120 94\n500 451 318\n474 275",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "262 87\n318 299\n489 444 367 430\n201 349\n223 162 199\n195 451",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "420 362\n279 428\n412 153 484 103\n287 419\n120 202 68\n111 377",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "191 57\n138 140\n316 310 238 293\n219 428\n220 324 136\n211 61",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "89 419\n305 177\n460 155 443 239\n335 463\n371 356 324\n455 163",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "426 311\n454 480\n452 476 284 177\n149 148\n75 258 94\n312 333",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "393 122\n52 460\n85 147 403 340\n413 372\n225 254 444\n353 469",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999\n999 1000\n1 999 999 999\n2 2\n1000 2 999\n1000 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n999 1\n999 2 999 1\n2 1\n1 1000 999\n1 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:36"
}