{
  "problem_code": "problems",
  "title": "Jolly Kingdom",
  "tags": [],
  "text": "Jolly Kingdom is a kingdom which is famous for its troops' power. Jolly Kingdom has N swordsman troops and M archer troops where each troop has his/her own unique fighting style, different with others.For the 10thtimes, an evil witch with her monster troops tries to seize the throne of Jolly Kingdom. According to the information gathered from Jolly Kingdom's spies, the witch will attack everyday for H days. Each day, the witch will add 1 new monster into her monster troops. This makes enemy's troops become stronger every day.Each monster owned by the witch is strong and almost unbeatable, only the Xithswordsman troop or the Yitharcher troop can beat the monster. After the monster has been defeated by Jolly Kingdom's troop, that monster will take a reset and attack again in the next day.To protect Jolly Kingdom, every dayall monstershave to be defeated, but the cost to send 1 troop is expensive, so the king wants to send minimum number of troops every day such that the sent troops will be able to defeatall monstersexist on that corresponding day.The king asks you for your help, as a royal advisor, the number of troops the king has to send every day.InputFirst line consists of 3 integers: N, M, and H (1 ≤ N, M ≤ 1000; 1 ≤ H ≤ N*M) – the number of swordsman troops, archer troops, and days. Each of next H lines contains 2 integers: Xiand Yi(1 ≤ Xi≤ N; 1 ≤ Yi≤ M) – the weakness of ithmonster, ithcan be defeated by the Xithswordsman or Yitharcher.There can't be 2 monsters with the exact same weakness (there won't be any monster i and j where Xi= Xjand Yi= Yjfor all 1 ≤ i, j ≤ H and i ≠ j).OutputPrint H lines. Each line contains 1 number represents the answer to the king's question.Sample TestsInput4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4Output1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4Explanation for sample caseNotation: { swordsman troop number: monster number(s) defeated } { archer troop number: monster number(s) defeated }1stday: {1: 1} {}2ndday: {1: 1 2} {}3rdday: {1: 1 2 3} {}4thday: {1: 1 2 3} {1: 4}5thday: {1: 1 2 3} {1: 4 5}6thday: {1: 1 2 3;3: 6} {1: 4 5}7thday: {1: 1 2 3;3: 6 7} {1: 4 5}8thday: {1: 1 2 3;3: 6 7;4: 8} {1: 4 5}9thday: {1: 1 2 3;3: 6 7;4: 8 9} {1: 4 5}InformationThe constraints above is not typo, N and M can be as large as 1000 (1 Thousand), so H can be as large as 106(1 Million). So this problem has 10× larger constraints than the original one.Warning: Large Input/Output files, each file I/O can be as large as 7.5 Megabytes (7.5 MB), cin or cout probably too slow for I/O, it's recommended to use scanf/printf (I've tested it).If you find this problem too hard, you can try this first:https://jollybeeoj.com/problem/view/199original problem with smaller constraints.TriviaThe total size of file I/O in this problem is slightly more than 100 MB, took a while to generate, modify, and upload it. :)If the witch attack Jolly Kingdom everyday for 1 Million days that means the attack took more than 2500 years. :oIf I count number of operation in the deepest loop of my algo on worst case input, it will be 671,163,499 operations.Credit & Special thanksSandy Karunia- Developer ofJollybee Online JudgeAlvin Setiadi- Original problem author",
  "sample_input": "4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4",
  "sample_output": "1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4",
  "link": "https://www.spoj.com/problems/JOLLYKINGDOM",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "4 4 9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n4 1\r\n3 4\r\n3 3\r\n4 3\r\n4 4",
      "expected_output": "1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 10 2\n7 5\n2 10\n5 4\n6 1\n9 5\n10 6\n4 7\n8 4\n10 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 2 1\n8 5\n1 1\n8 2\n9 3\n4 8\n1 3\n9 6\n2 6\n9 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 8\n9 10\n9 9\n7 3\n4 5\n8 1\n8 1\n6 1\n6 7\n8 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "96 47 5\n53 78\n66 59\n13 77\n13 85\n46 27\n38 49\n31 94\n96 29\n99 8",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "82 9 19\n62 3\n19 67\n51 5\n29 49\n53 83\n38 29\n26 80\n49 67\n68 97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "98 63 55\n89 14\n14 18\n36 38\n75 81\n86 20\n27 7\n42 24\n20 56\n72 73",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "56 49 7\n42 87\n81 97\n18 45\n21 91\n22 10\n44 34\n71 89\n22 53\n13 39",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "43 57 30\n4 33\n25 12\n56 83\n98 97\n88 65\n92 84\n29 58\n7 54\n100 20",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "372 365 408\n291 484\n347 120\n215 428\n60 114\n322 439\n311 162\n202 495\n333 445\n164 388",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "292 107 410\n71 114\n330 413\n412 388\n351 55\n148 93\n419 234\n197 403\n300 168\n407 310",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "52 211 298\n252 321\n131 432\n500 453\n389 387\n465 310\n138 480\n484 156\n193 170\n216 348",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "252 483 126\n323 204\n174 243\n365 470\n429 466\n432 183\n149 141\n346 208\n456 435\n442 133",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "257 483 169\n200 184\n403 415\n409 170\n420 456\n121 427\n433 134\n497 329\n331 392\n97 338",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "261 395 389\n141 237\n208 352\n239 93\n160 126\n263 169\n163 369\n267 453\n382 405\n395 311",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "59 116 94\n250 291\n255 101\n231 290\n236 258\n313 325\n197 311\n317 329\n417 184\n273 423",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 2\n1 1000\n1000 999\n1 1\n1 1\n2 1000\n2 2\n1 2\n2 1000\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 2\n1000 1000\n2 1\n2 1000\n1000 2\n1 999\n999 1\n1 999\n1 999\n1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}