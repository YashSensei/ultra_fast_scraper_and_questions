{
  "problem_code": "problems",
  "title": "Emma s Domino",
  "tags": [],
  "text": "Thedomino effectis a phenomenon that occurs when in a line of domino pieces, each standing on its smallest face, the first piece from one of the line's ends falls in the direction of the next piece. In turn, this second piece falls over the third one in the line, and so on until the other end of the line is reached, at which point every piece has fallen. Note that in order to produce this effect, the distance between consecutive pieces in the line must be lower or equal to their height.Emma has very recently found out about the domino effect, and she was immediately amazed by it. She spent all morning forming a line with theNdomino pieces that her brother Ezequiel gave her, but just before she was going to make the first piece fall, her grandma came to her home and took her to play in the park. Ezequiel knows Emma has not taken into account the distance between consecutive pieces when she formed her domino line, and doesn't want to see her frustrated if all the pieces do not fall after she pushes the first one. Thus, Ezequiel wants to move some pieces from inside the line so that the distance between consecutive pieces is always lower or equal to their heightH. Because he doesn't want Emma to find out that he has moved some of the pieces, he will leave the first and last pieces where they are, and he would also like to move as few pieces as possible from inside the line. What is the minimum number of pieces he must move?InputEach test case is described using two lines. The first line contains two integer numbersNandH, indicating respectively the number of pieces in the line (3 ≤ N≤1000) and their height (1≤H≤50). The second line containsN-1integersDi, representing the distances between pairs of consecutive domino pieces, in the order given by the line (1≤Di≤100fori = 1, 2 ... N-1). The end of the input is signalled by a line containing two times the number-1.OutputFor each test case, you should print a line containing a single integer number, representing the minimum number of pieces that must be moved in order to have the distance between consecutive pieces always lower or equal toH. Note that the first and last pieces cannot be moved, and that the relative order between the the pieces cannot be changed. If it is impossible to achieve the desired result, print the number-1.ExampleInput:8 3\r\n2 4 4 1 4 3 2\r\n10 2\r\n1 2 2 2 2 2 2 2 3\r\n5 2\r\n2 2 2 2\r\n5 3\r\n1 6 2 4\r\n-1 -1Output:3\r\n8\r\n0\r\n-1",
  "sample_input": "Input:8 3\r\n2 4 4 1 4 3 2\r\n10 2\r\n1 2 2 2 2 2 2 2 3\r\n5 2\r\n2 2 2 2\r\n5 3\r\n1 6 2 4\r\n-1 -1Output:3\r\n8\r\n0\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2012E",
  "scraped_at": "2025-08-17 00:34:17",
  "test_cases": [
    {
      "input": "8 3\r\n2 4 4 1 4 3 2\r\n10 2\r\n1 2 2 2 2 2 2 2 3\r\n5 2\r\n2 2 2 2\r\n5 3\r\n1 6 2 4\r\n-1 -1",
      "expected_output": "3\r\n8\r\n0\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 2\n7 1 10 3 3 10 2\n10 9\n2 1 4 6 5 4 1 4 8\n1 5\n6 3 3 10\n9 6\n6 3 6 1\n8 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 7\n4 7 6 1 7 4 2\n9 10\n2 1 10 7 3 8 4 9 9\n1 3\n7 9 4 7\n9 8\n9 6 3 5\n2 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n5 3 3 8 3 5 9\n3 2\n8 6 1 3 2 10 4 6 2\n9 10\n6 5 4 5\n1 2\n5 2 7 9\n5 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 72\n56 53 76 30 43 95 80\n31 87\n3 41 35 64 26 97 49 1 13\n71 64\n48 12 71 10\n18 32\n92 52 17 38\n24 22",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 36\n76 83 76 94 37 5 100\n34 69\n92 66 1 63 63 59 61 20 84\n25 36\n22 26 85 34\n7 80\n40 59 16 8\n23 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "6 63\n40 83 79 51 4 37 29\n65 4\n89 62 5 14 53 89 41 14 86\n76 9\n93 31 15 17\n30 32\n56 62 50 42\n63 8",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "67 21\n23 29 54 100 20 55 75\n28 92\n30 33 19 100 33 88 6 31 24\n34 98\n97 52 77 90\n61 90\n47 37 48 61\n47 24",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "61 65\n79 74 6 13 85 55 71\n37 13\n41 8 64 76 59 54 91 57 33\n36 8\n30 2 37 97\n78 65\n37 25 60 88\n59 50",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "337 317\n247 312 388 328 411 359 434\n375 213\n117 308 406 121 407 140 446 435 96\n87 317\n167 319 300 330\n434 132\n397 333 254 242\n84 432",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "130 481\n112 161 492 422 352 303 280\n63 324\n428 364 121 436 178 154 298 290 324\n142 260\n376 191 161 420\n170 157\n198 50 392 193\n465 87",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "56 461\n338 63 97 50 122 448 457\n431 176\n226 482 246 321 467 111 486 153 471\n258 399\n384 476 114 457\n281 105\n419 237 481 280\n342 357",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "397 155\n441 332 428 238 333 256 159\n100 176\n477 233 309 452 497 299 253 473 442\n488 416\n476 80 463 225\n178 353\n213 346 499 375\n220 406",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "421 295\n477 241 316 149 115 487 363\n469 248\n447 303 443 470 125 473 371 380 193\n96 254\n188 298 302 494\n397 174\n417 380 176 182\n279 217",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "306 331\n318 85 105 243 117 148 452\n182 178\n51 222 336 357 376 264 397 461 438\n136 118\n391 400 404 422\n318 267\n143 138 202 160\n197 459",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "206 262\n125 179 405 171 328 399 316\n248 403\n428 206 468 356 82 167 105 442 286\n145 51\n306 336 445 355\n229 389\n451 92 207 375\n182 377",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n999 1000 999 2 2 999 1\n999 999\n999 1 1 1000 1000 1000 1 2 999\n999 1000\n999 2 1000 1000\n999 2\n1000 1000 999 2\n1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n1000 1000 1000 1 1 999 999\n2 1\n1 999 1000 2 1 1 1 2 2\n1000 2\n1000 1000 2 1\n1000 1\n2 1 2 1\n999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}