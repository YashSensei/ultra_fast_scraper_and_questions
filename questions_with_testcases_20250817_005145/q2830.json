{
  "problem_code": "problems",
  "title": "Happiness",
  "tags": [],
  "text": "You are given an array on N elements a[1], a[2], a[3] ... a[N].Now you will have to answer some queries.In every query, you will be given an interval, [l, r]. For this interval you have to print the total summation of happiness of all the elements of the given array between the interval [l, r].The happiness of an element a[i] between interval [l, r] is: the number of sub-array [lj, rj] where the minimum value between [lj, rj] is equal to a[i]. Here,l ≤ lj≤ i and i ≤ rj≤ r.Now, you have to print the total summation of happiness of all the elements between [l, r].InputThe first line of the input contains the number of test cases T. The first line of each test case contains two numbers, N and M. N is the number of elements in array a and M is the number of queries you need to perform.The next line contains N integers, the array a: a[1], a[2], a[3] ... a[N].Next M lines contains two integers, l and r.Constraints1 ≤ T ≤ 51 ≤ N, M ≤ 500001 ≤ a[i] ≤ 10000000001 ≤ l ≤ r ≤ NOutputFor each test case, you need to print the case number on the first line in this format: Case X: where X is the case number.In the next M lines, you need to print the total summation of happiness of all the elements between [l, r] of the given array.ExampleInput:25 21 3 2 4 31 32 45 25 3 7 6 81 42 5Output:Case 1:66Case 2:1010Problem Setter: Raihat Zaman Neloy. Used in Eid 2016 contest. For more about Eid 2016 contest:Click Here",
  "sample_input": "Input:25 21 3 2 4 31 32 45 25 3 7 6 81 42 5Output:Case 1:66Case 2:1010",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HAPPINESS",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "25 21 3 2 4 31 32 45 25 3 7 6 81 42 5",
      "expected_output": "Case 1:66Case 2:1010",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 9 5 10 5 2 6 1 7 6 5 7 1 6 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 7 4 5 7 10 10 6 1 8 5 9 9 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 4 3 5 8 2 6 6 7 3 8 2 5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "44 80 44 100 24 22 6 81 78 44 9 60 6 69 86",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 39 79 38 65 43 61 54 76 41 12 70 44 70 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 58 3 3 69 68 24 61 61 30 88 19 36 55 39",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 20 64 94 27 26 100 27 12 97 19 27 82 13 64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "79 80 59 39 14 76 35 94 6 24 33 56 33 86 93",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "423 393 226 183 453 174 91 336 170 152 235 240 175 352 295",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "422 407 313 84 446 214 222 389 278 290 89 204 451 99 437",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "180 488 103 328 97 74 260 247 297 322 364 431 97 155 216",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "493 430 390 98 221 459 229 318 266 376 295 446 385 76 193",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "190 345 79 142 426 367 444 462 418 335 174 281 308 73 274",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "269 224 208 382 65 431 473 120 449 359 79 405 351 226 222",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 210 143 226 481 129 382 208 245 365 243 363 439 67 401",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2 999 2 999 1000 2 1000 999 999 1 1000 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 2 2 999 1 1 1000 999 1000 1000 999 1000 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}