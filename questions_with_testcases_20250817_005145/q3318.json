{
  "problem_code": "problems",
  "title": "Castle Wall",
  "tags": [],
  "text": "A new lord assumed the position by the death of the previous lord in a Far Eastern province.The new greedy lord hates concave polygons, because he believes they need much wasted area to be drawn on\r\npaper. He always wants to modify them to convex ones.His castle is currently surrounded by a wall forming a concave polygon, when seen from the above. Of course\r\nhe hates it. He believes more area could be obtained with a wall of a convex polygon. Thus he has ordered his\r\nvassals to have new walls built so they form a convex polygon.Unfortunately, there is a limit in the budget. So it might be infeasible to have the new walls built completely. The\r\nvassals has found out that only up tormeters of walls in total can be built within the budget. In addition, the new\r\nwalls must be built in such a way they connect the polygonal vertices of the present castle wall. It is impossible\r\nto build both of intersecting walls.After long persuasion of the vassals, the new lord has reluctantly accepted that the new walls might not be built\r\ncompletely. However, the vassals still want to maximize the area enclosed with the present and new castle walls,\r\nso they can satisfy the lord as much as possible.Your job is to write a program to calculate, for a given integerr, the maximum possible area of the castle with\r\nthe new walls.InputThe input file contains several test cases.Each case begins with a line containing two positive integersnandr.nis the number of vertices of the concave\r\npolygon that describes the present castle wall, satisfying 5 ≤n≤ 64.ris the maximum total length of new castle\r\nwalls feasible within the budget, satisfying 0 ≤r≤ 400.The subsequentnlines are thex- andy-coordinates of thenvertices. The line segments (xi,yi)–(xi+1,yi+1)\r\n(1 ≤i≤n- 1) and (xn,yn)–(x1,y1) form the present castle wall of the concave polygon. Those coordinates are\r\ngiven in meters and in the counterclockwise order of the vertices.All coordinate values are integers between 0 and 100, inclusive. You can assume that the concave polygon is\r\nsimple, that is, the present castle wall never crosses or touches itself.The last test case is followed by a line containing two zeros.OutputFor each test case in the input, print the case number (beginning with 1) and the maximum possible area enclosed\r\nwith the present and new castle walls. The area should be printed with exactly one fractional digit.ExampleInput:5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0Output:Case 1: 16.0\r\nCase 2: 3375.0",
  "sample_input": "Input:5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0Output:Case 1: 16.0\r\nCase 2: 3375.0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WALL",
  "scraped_at": "2025-08-17 00:34:22",
  "test_cases": [
    {
      "input": "5 4\r\n0 0\r\n4 0\r\n4 4\r\n2 2\r\n0 4\r\n8 80\r\n45 41\r\n70 31\r\n86 61\r\n72 64\r\n80 79\r\n40 80\r\n8 94\r\n28 22\r\n0 0",
      "expected_output": "Case 1: 16.0\r\nCase 2: 3375.0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6\n7 3\n7 10\n1 7\n9 6\n10 8\n4 10\n5 9\n8 2\n3 5\n4 1\n1 9\n6 9\n1 9\n6 9\n7 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\n10 4\n5 3\n4 3\n2 5\n9 8\n7 4\n10 1\n3 5\n3 5\n8 4\n9 7\n1 10\n6 8\n3 10\n5 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 9\n10 3\n5 5\n8 2\n3 2\n5 5\n4 1\n1 9\n10 6\n2 2\n4 2\n9 8\n7 10\n2 8\n10 10\n7 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 32\n7 62\n14 11\n17 53\n35 49\n1 45\n6 46\n42 19\n39 11\n4 33\n6 4\n58 36\n59 49\n20 4\n12 7\n5 46",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 13\n6 41\n63 34\n13 63\n37 5\n54 9\n61 50\n49 15\n21 44\n11 59\n6 41\n45 26\n25 20\n24 25\n29 16\n41 17",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 22\n11 47\n48 28\n52 55\n33 51\n1 11\n62 5\n45 54\n17 24\n58 36\n50 43\n36 5\n58 21\n12 14\n9 39\n25 21",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "7 10\n33 45\n24 3\n36 3\n55 35\n62 37\n16 41\n12 39\n16 21\n8 56\n58 32\n51 16\n21 35\n44 11\n45 33\n59 56",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 20\n38 19\n27 56\n33 15\n50 64\n27 1\n8 42\n33 60\n1 48\n17 49\n16 21\n53 36\n2 49\n22 43\n33 23\n26 51",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "24 4\n16 7\n21 14\n22 6\n13 24\n6 5\n19 18\n26 21\n16 24\n20 28\n16 11\n11 18\n13 25\n7 5\n32 32\n14 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "25 25\n24 25\n18 5\n23 26\n11 11\n17 7\n6 29\n24 7\n8 22\n29 17\n8 25\n22 21\n25 19\n12 20\n6 4\n29 32",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "16 18\n28 17\n10 24\n11 10\n6 12\n16 21\n8 12\n25 6\n13 30\n21 9\n6 21\n10 30\n15 22\n22 5\n6 27\n30 22",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "23 12\n5 25\n8 30\n5 21\n26 17\n19 21\n14 21\n15 9\n32 18\n7 8\n15 20\n11 17\n5 23\n10 12\n18 32\n18 26",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "30 31\n10 5\n25 26\n29 16\n27 10\n23 17\n29 13\n3 5\n26 7\n6 28\n25 29\n19 10\n22 5\n30 18\n8 30\n14 24",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "24 29\n3 9\n20 29\n5 25\n10 24\n14 12\n14 15\n30 3\n13 10\n21 8\n13 16\n23 8\n9 32\n27 21\n10 9\n11 24",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "27 15\n24 13\n6 14\n30 16\n22 27\n13 29\n12 31\n12 20\n18 3\n13 10\n15 9\n12 30\n24 4\n15 5\n11 8\n5 31",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64\n64 64",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 63\n1 2\n1 64\n1 1\n1 2\n2 64\n1 2\n1 1\n1 2\n63 1\n63 64\n1 1\n1 64\n64 63\n63 1\n1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 63\n1 63\n2 64\n1 64\n63 64\n1 2\n64 1\n63 2\n63 64\n1 1\n63 2\n63 63\n63 63\n2 1\n63 2\n63 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:03"
}