{
  "problem_code": "problems",
  "title": "Snakes and Ladders",
  "tags": [],
  "text": "Snakes and Ladders (or Chutes and Ladders) is an ancient Indian board game regarded today as a worldwide classic. It is played between two or more players on a game board having numbered squares (fields) on a grid. A number of \"ladders\" and \"snakes\" (or \"chutes\") are pictured on the board, each connecting two specific board squares. The object of the game is to navigate one's game piece from the start (Bottom square) to the finish (Top Square), helped or hindered by ladders and snakes, respectively. The historic version had root in morality lessons, where a player's progression up the board represented a life journey complicated by virtues (ladders) and vices (snakes).  If, after throwing a dice, a player's token lands on the lower-numbered end of a \"ladder\", the player moves his token up to the ladder's higher-numbered square. If he lands on the higher-numbered square of a \"snake\" (or chute), he must move his token down to the snake's lower-numbered square. If any of those cases takes places, we will call a square unstable. Otherwise it is stable.The game is a simple race contest lacking a skill component, and is popular with young children.In this problem you’re required to calculate the minimum number of 6-sided die throws to move your game piece from the start (bottom square) to the finish (top square).Formal game descriptionFields are arranged on an N×M grid and numbered from 1 to N×M. Last field, indicated by N×M, is referred to as Top Square. Each player starts with a token on a square at position \"0\" (the imaginary space beside the “1” grid field; Bottom Square), which is always stable. So in total we have N×M+1 fields. In every turn player throws the die and moves up by the given number of squares. If that would result in a field higher than Top Square, then token is not moved. If the square that token ends on is unstable, it is moved as indicated by ladder or snake. This is repeated until token is placed a stable field. You can assume that a stable field can be reached from any field on the board. If this final, stable field is the Top Square, game ends and player wins.InputInput contains multiple test cases First line of each test case contains integers N, M, S, L. where n and m are the board dimensions, N (0 < N ≤ 100), M (0 < M ≤ 100), and S and L are number of snakes and ladders respectively. Next S lines describes snakes. Each line contains two integers: h and t, where h is the snake’s head position and t is the snake tail position. (0 < t < h ≤ N×M), Next L lines describes ladders. Each line contains two integers: p and q where p is the ladder’s bottom and q is the ladder’s top (0 < p < q < N×M).The input will be terminated by the end of file.NOTE! There could be more snakes and/or ladders leading from a single field. In such a case use the last snake/ladder specified in the input.OutputPrint one line per test case containing the minimum number of dice throws. If you cannot reach to the finish square print -1SampleInput1 1 0 0\r\n1 2 1 0\r\n2 1\r\n5 10 3 5\r\n16 6\r\n47 26\r\n49 11\r\n1 38\r\n4 14\r\n9 31\r\n40 42\r\n36 44Output1\r\n-1\r\n3See also:Snakes and Ladders Again",
  "sample_input": "Input1 1 0 0\r\n1 2 1 0\r\n2 1\r\n5 10 3 5\r\n16 6\r\n47 26\r\n49 11\r\n1 38\r\n4 14\r\n9 31\r\n40 42\r\n36 44Output1\r\n-1\r\n3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PCPC12E",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "Input1 1 0 0\r\n1 2 1 0\r\n2 1\r\n5 10 3 5\r\n16 6\r\n47 26\r\n49 11\r\n1 38\r\n4 14\r\n9 31\r\n40 42\r\n36 44Output1\r\n-1\r\n3",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3 6 6\nhlvog 8 8 8\n10 1 7 9\n4 9\n4 2 7 10\n6 9\n8 6\n7 4\n2 6\n10 7\n3 9\n3 4\n2 5 8\n2 qxveyav\n6\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 8 1 8\nwyknt 2 1 2\n6 5 7 2\n5 10\n4 1 5 7\n10 8\n2 10\n1 5\n8 5\n10 5\n9 5\n1 7\n8 10 10\n2 ms\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 9 3\nlnpqbt 10 6 7\n2 3 6 3\n8 4\n8 4 5 4\n3 1\n3 2\n1 1\n2 10\n6 10\n4 5\n3 6\n7 1 2\n2 gqfytoqzo\n9\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 65 14 31\nnmehe 27 99 69\n76 53 37 56\n99 15\n63 84 96 37\n65 99\n46 14\n38 60\n76 19\n59 55\n26 77\n47 15\n16 28 30\n64 neeclcj\n61\n58",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "12 33 44 75\njmc 2 45 11\n66 88 65 18\n68 51\n97 32 21 88\n8 12\n81 17\n62 47\n15 1\n22 7\n88 67\n89 20\n89 13 87\n13 oxgskb\n38\n12",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "54 39 52 77\ntijs 67 35 23\n18 39 7 31\n56 4\n66 80 32 66\n5 12\n35 61\n91 14\n82 77\n3 78\n62 55\n69 5\n33 65 40\n52 kufb\n22\n67",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 48 28 92\nrnqzxy 28 81 64\n86 44 100 99\n7 90\n61 100 91 14\n24 72\n54 52\n97 83\n94 44\n10 17\n85 1\n46 37\n23 59 14\n15 lnibfpii\n76\n88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 22 9 44\nktbu 67 74 87\n56 5 92 90\n91 37\n41 12 84 35\n19 75\n48 23\n54 26\n26 47\n96 15\n56 86\n50 29\n39 46 9\n18 dtbtojblj\n11\n91",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 38 10 44\nlss 18 6 46\n37 16 25 30\n40 34\n21 39 42 5\n14 26\n38 43\n24 25\n16 43\n6 27\n30 32\n28 31\n17 36 20\n26 iv\n14\n12",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "45 10 18 50\noron 35 45 35\n43 22 45 32\n21 13\n15 47 50 10\n49 24\n37 34\n48 34\n42 39\n38 13\n28 41\n46 41\n12 24 16\n38 jlsf\n17\n13",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "17 34 18 25\ncjde 33 25 7\n49 45 30 28\n36 16\n12 6 36 12\n11 13\n39 21\n42 18\n18 38\n6 32\n49 17\n12 40\n9 9 45\n11 i\n16\n33",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 47 9 42\nnwbjv 42 30 25\n44 16 45 35\n29 46\n16 38 47 50\n47 40\n5 49\n27 44\n31 7\n26 29\n42 19\n37 13\n41 43 25\n42 ilzd\n44\n39",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "40 30 16 32\ndard 33 7 30\n44 31 34 46\n39 33\n22 10 8 15\n25 49\n15 24\n43 24\n29 12\n21 22\n38 25\n22 35\n21 47 35\n17 ztycp\n30\n29",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "17 49 6 44\nze 42 44 45\n14 17 8 18\n15 22\n20 36 38 29\n30 30\n36 27\n8 45\n12 40\n23 46\n5 29\n21 25\n28 46 7\n20 vz\n26\n35",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "18 34 15 9\no 35 25 27\n27 41 12 35\n35 39\n29 47 15 28\n21 5\n39 12\n34 30\n29 48\n37 15\n22 32\n46 11\n25 23 10\n35 lkxjyi\n21\n38",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100 100\naqp 100 100 100\n100 100 100 100\n100 100\n100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100 100\n100 qxrdhbc\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100 100\njyntmf 100 100 100\n100 100 100 100\n100 100\n100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100 100\n100 pbih\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 1 1 99\nrnaop 1 99 1\n1 1 2 99\n1 99\n100 100 99 100\n1 100\n2 1\n100 2\n99 1\n2 1\n1 99\n2 100\n99 2 99\n99 kltbhqps\n99\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 99 100 1\nhhia 99 2 2\n100 1 1 2\n2 100\n2 99 1 1\n100 2\n2 100\n1 1\n99 99\n2 100\n2 100\n100 1\n99 2 2\n100 tdaavbtex\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}