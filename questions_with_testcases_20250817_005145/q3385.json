{
  "problem_code": "problems",
  "title": "Binary Search Heap Construction",
  "tags": [],
  "text": "Read the statement of problem G for the definitions concerning trees.\r\nIn the following we define the basic terminology of heaps.\r\nAheapis a tree whose internal nodes have each assigned apriority(a number) such that the priority of each internal node is less than the priority of its parent.\r\nAs a consequence, the root has the greatest priority in the tree, which is one of the reasons why heaps can be used for the implementation of priority queues and for sorting.A binary tree in which each internal node has both a label and a priority, and which is both a binary search tree with respect to the labels and a heap with respect to the priorities, is called atreap.\r\nYour task is, given a set of label-priority-pairs, with unique labels and unique priorities, to construct a treap containing this data.InputThe input contains several test cases.\r\nEvery test case starts with an integern.\r\nYou may assume that1 ≤ n ≤ 50000.\r\nThen follownpairs of strings and numbersl1/ p1... ln/ pndenoting the label and priority of each node.\r\nThe strings are non-empty and composed of lower-case letters, and the numbers are non-negative integers.\r\nThe last test case is followed by a zero.OutputFor each test case output on a single line a treap that contains the specified nodes.\r\nA treap is printed as(<left sub-treap><label>/<priority><right sub-treap>).\r\nThe sub-treaps are printed recursively, and omitted if leaves.ExampleInput:7 a/7 b/6 c/5 d/4 e/3 f/2 g/1\r\n7 a/1 b/2 c/3 d/4 e/5 f/6 g/7\r\n7 a/3 b/6 c/4 d/7 e/2 f/5 g/1\r\n0Output:(a/7(b/6(c/5(d/4(e/3(f/2(g/1)))))))\r\n(((((((a/1)b/2)c/3)d/4)e/5)f/6)g/7)\r\n(((a/3)b/6(c/4))d/7((e/2)f/5(g/1)))",
  "sample_input": "Input:7 a/7 b/6 c/5 d/4 e/3 f/2 g/1\r\n7 a/1 b/2 c/3 d/4 e/5 f/6 g/7\r\n7 a/3 b/6 c/4 d/7 e/2 f/5 g/1\r\n0Output:(a/7(b/6(c/5(d/4(e/3(f/2(g/1)))))))\r\n(((((((a/1)b/2)c/3)d/4)e/5)f/6)g/7)\r\n(((a/3)b/6(c/4))d/7((e/2)f/5(g/1)))",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HEAPULM",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "7 a/7 b/6 c/5 d/4 e/3 f/2 g/1\r\n7 a/1 b/2 c/3 d/4 e/5 f/6 g/7\r\n7 a/3 b/6 c/4 d/7 e/2 f/5 g/1\r\n0",
      "expected_output": "(a/7(b/6(c/5(d/4(e/3(f/2(g/1)))))))\r\n(((((((a/1)b/2)c/3)d/4)e/5)f/6)g/7)\r\n(((a/3)b/6(c/4))d/7((e/2)f/5(g/1)))",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4 3 5 10 2 2 9\n10 d m k e spxxr rpztk fgni\n4 9 1 4 6 10 4 4\n8 bgskq gq anvbb ypc myhpm x wpr\n4 1 6 4 2 7 3 6\n3 h nvjh er psvrg igqzg tyycv a\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 7 1 3 5 7 9 4\n6 iedrh lvohe y tqun goh dek b\n7 9 3 9 4 2 5 7\n1 j arh jrrq v p pxj vb\n4 5 8 1 3 7 8 5\n6 sf wvzfv qq jaw m g lvnrm\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 9 1 5 3 6 1 1\n3 yznx rj brsmx ogmr snjak pamyh cf\n9 2 6 5 4 1 4 1\n10 xw iao uiv qzf ng t fhb\n7 1 6 4 3 7 8 6\n4 cuokt ryix lh tdz rgwg wlv ik\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 4 24 39 100 21 24 86\n63 ylvqu wfsl cbqsd rbvwv muln h p\n81 31 29 9 79 86 77 5\n92 npae q xbjlx vq w y ziwma\n38 73 50 85 46 42 9 24\n54 wk rrov epfe jopx hkcdo zufe yv\n68",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 41 79 18 9 12 53 13\n54 myrg cfz qfb grqi ut t qcls\n7 48 27 24 72 22 39 67\n11 elk cdr o jmaw p dfsi t\n40 81 70 5 96 5 7 27\n55 lek gqqfi hpq kbte ust swogp cbxcz\n87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 38 50 53 10 66 92 22\n67 a xaiz shn rnpk jbqd uh u\n68 19 50 72 84 84 4 44\n28 ox a txg s huj ecikl lf\n81 92 95 63 27 44 43 53\n48 d inhr bem xcotz z snr g\n53",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 68 96 14 15 90 7 67\n83 vro lbtp bwwl st vodzl ggmlg ptnqg\n86 14 73 88 62 23 47 96\n53 ssmr i d xp bbze wskr lnfc\n56 58 42 51 31 82 1 48\n65 fslp feo wskz hnoqs ouxub cw ojrm\n92",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 25 76 47 57 13 24 55\n79 k ej dsmiz kyi urg zbus jk\n62 42 35 8 65 30 45 62\n79 by q f zav lhs duxc rh\n18 71 8 59 100 100 44 48\n60 tod zwg oc irwwv jif q rxa\n32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23317 9328 23564 17172 24621 15005 3481 2809\n17520 bdenb igswf w pjnr fw osz sldls\n13776 16879 14190 18261 8439 10323 9683 5447\n13982 ert zzvo v mfmr hbiqk ck x\n18238 19400 17746 7608 23971 18139 13185 23623\n23465 sod chlhm prtf nsoar kcvo xovt yfkb\n6354",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "7722 19179 20925 10553 5566 10706 10388 14411\n8765 ekjy a wr ndab iqfm xn beamr\n5613 17536 18324 6389 13925 3285 3779 9806\n5019 hcdl hdl fzfit xfyau rzce ekwx sdf\n2827 15764 17650 17127 19020 14831 11611 5050\n4696 p jf jx bqvpl dci ta gxzbk\n4329",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15122 19343 14357 14837 4145 10528 12598 24005\n22986 wvirf appp qiito swh cxd jhne ic\n23580 9996 6535 22258 21370 16253 24623 13887\n9459 l ddnt yczfk ygxd quadw vhiuy l\n8142 22955 8543 21876 14359 4366 22058 18479\n10011 jjsf utrn md tm vrlbg coo vugyo\n21072",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6655 21280 22281 23024 14692 18364 15603 17824\n19776 xlb oadcp potp nwbi ctqrm vtmp sbjl\n20100 20476 22237 3015 6890 14179 22354 7965\n14620 ikmh g blmn mk qtam puobs ptrv\n5003 23973 22406 24861 24562 4345 12413 15870\n20186 lq itqy hhm xol euiir ek q\n5893",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8920 13880 18609 21832 10890 5606 8477 23474\n18333 grleb aih xwamq nr nqnr j kfrty\n17534 16892 9629 17153 14147 13888 17025 2875\n6509 twuy a atx ekyv bw sov ghpqp\n10104 2760 8589 22149 23409 4386 23315 21158\n9304 hwal d xgtcq v wyj gqfc d\n20320",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5950 18614 8767 23540 11030 16114 19784 12523\n19425 kct l qh ww wntvu fxmc ssona\n17552 12620 22020 19487 13258 12608 11574 6334\n8320 ogxk ml j abuq a krhzw vvbyb\n24139 24247 14750 15886 23559 15767 16489 20935\n17916 iy bjr ztcxv c n oxls rk\n23157",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "14926 20515 3021 12099 18918 7047 22010 17099\n2537 vmqme fxlf d ruzea mdoom on boyt\n14943 5563 9718 22266 4719 23930 7560 13165\n12136 vissl dtfk i g gngi u bcth\n22865 21031 8317 17393 22775 6023 6789 4281\n13551 b sxmtg q dp a kn r\n19543",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000 50000 50000 50000 50000 50000 50000\n50000 t uh ebns nyj cipx lltt y\n50000 50000 50000 50000 50000 50000 50000 50000\n50000 cdp fnd ukar sd ckw ptxhf acsrb\n50000 50000 50000 50000 50000 50000 50000 50000\n50000 nmrx iarl u n rnz h sy\n50000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000 50000 50000 50000 50000 50000 50000\n50000 k yu dxrs cfhm u fz ys\n50000 50000 50000 50000 50000 50000 50000 50000\n50000 mpet jdynu ifd a jjk u gnoja\n50000 50000 50000 50000 50000 50000 50000 50000\n50000 cx vnj v k i oven p\n50000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 49999 49999 49999 49999 1 50000\n2 d sbifz fkray umzy aoowp xfi qr\n1 1 2 50000 2 49999 50000 2\n49999 elv dup s qxfm vhzi o ork\n49999 2 2 1 1 2 50000 49999\n49999 fza spjp evzdm sm kcp zzubd ar\n49999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 49999 1 49999 1 1 2\n50000 u s v c otn i ytbbn\n1 1 1 50000 1 1 1 2\n50000 momu dxh gw bchl sap bdf fc\n2 50000 1 2 2 49999 50000 2\n1 g go hsri fa lkl wu ec\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}