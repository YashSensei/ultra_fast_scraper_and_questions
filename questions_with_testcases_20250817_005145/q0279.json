{
  "problem_code": "problems",
  "title": "Art of War",
  "tags": [],
  "text": "TheWarring States Period(473-22l BC) refers to the centuries of turmoil following the Spring and\r\nAutumn Period. China was divided into many little kingdoms that were constantly fighting with each\r\nother. Unlike in previous ages, when chivalry played an important role in battles and the states fought\r\nmostly for balance of power or to resolve disputes, in this period the aim of battle was to conquer and\r\ncompletely annihilate the other states. Eventually seven states, known as the ``Seven Great Powers'' rose\r\nto prominence: Qi, Chu, Yan, Han, Zhao, Wei, and Qin. After numerous alliances and counter-alliances,\r\nQin defeated all the other states one by one, putting an end to the Warring States Period.You are given a map that shows the position of the capital for each state, and the borders between the\r\nstates as a series of line segments. Your job is to determine which states were fighting with each other.\r\nThis is pretty easy to determine - if two states had a common border, then they were fighting.InputThe input contains several blocks of test cases. Each case begins with a line containing two integers:\r\nthe number 1 ≤n≤ 600 of states, and the number 1 ≤m≤ 4000 of border segments. The nextnlines describe the coordinates of capitals, there are two integers in each line. The nextmlines after that\r\ndescribe themborder segments. Each line contains four integersx1,y1,x2andy2meaning that there is a border segment from (x1,y1) to (x2,y2). (It is not given in the input what the two states on the two sides of the border are, but it can be deduced from the way the borders go.)Each state is enclosed by a continuous borderline. The states are surrounded by an infinite wasteland,\r\nthus a border segment either separates two states, or a state from the wasteland. It is not possible that\r\nthe same state is on both sides of a border segment, or the wasteland is on both sides of a border segment.\r\nThere is exactly one capital in each state, and there is no capital in the wasteland. The border segments\r\ndo not cross each other, they can meet only at the end points.The input is terminated by a block withn=m= 0.OutputFor each test case, you have to outputnlines that describe the enemies of thenstates (recall that if two\r\nstates share a border, then they are enemies). Each line begins with an integer, the numberxof enemies\r\nthe given state has. This number is followed byxnumbers identifying the enemies of the state. These\r\nnumbers are between 1 andnand number 1 refers to the first capital appearing in the input, numbernrefers to the last.ExampleInput:4 12\r\n3 2\r\n11 8\r\n12 17\r\n1 19\r\n0 0 10 0\r\n10 0 20 0\r\n20 0 20 10\r\n20 10 20 20\r\n20 20 10 20\r\n10 20 0 20\r\n0 20 0 10\r\n0 10 0 0\r\n10 0 10 10\r\n0 10 10 10\r\n20 10 10 10\r\n10 20 10 10\r\n4 16\r\n170 13\r\n24 88\r\n152 49\r\n110 130\r\n60 60 140 60\r\n140 60 140 140\r\n140 140 60 140\r\n60 140 60 60\r\n0 0 200 0\r\n200 0 200 200\r\n200 200 0 200\r\n0 200 0 0\r\n40 40 160 40\r\n160 40 160 160\r\n160 160 40 160\r\n40 160 40 40\r\n20 20 180 20\r\n180 20 180 180\r\n180 180 20 180\r\n20 180 20 20\r\n0 0Output:2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3\r\n1 2\r\n2 1 3\r\n2 2 4\r\n1 3",
  "sample_input": "Input:4 12\r\n3 2\r\n11 8\r\n12 17\r\n1 19\r\n0 0 10 0\r\n10 0 20 0\r\n20 0 20 10\r\n20 10 20 20\r\n20 20 10 20\r\n10 20 0 20\r\n0 20 0 10\r\n0 10 0 0\r\n10 0 10 10\r\n0 10 10 10\r\n20 10 10 10\r\n10 20 10 10\r\n4 16\r\n170 13\r\n24 88\r\n152 49\r\n110 130\r\n60 60 140 60\r\n140 60 140 140\r\n140 140 60 140\r\n60 140 60 60\r\n0 0 200 0\r\n200 0 200 200\r\n200 200 0 200\r\n0 200 0 0\r\n40 40 160 40\r\n160 40 160 160\r\n160 160 40 160\r\n40 160 40 40\r\n20 20 180 20\r\n180 20 180 180\r\n180 180 20 180\r\n20 180 20 20\r\n0 0Output:2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3\r\n1 2\r\n2 1 3\r\n2 2 4\r\n1 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WAR",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "4 12\r\n3 2\r\n11 8\r\n12 17\r\n1 19\r\n0 0 10 0\r\n10 0 20 0\r\n20 0 20 10\r\n20 10 20 20\r\n20 20 10 20\r\n10 20 0 20\r\n0 20 0 10\r\n0 10 0 0\r\n10 0 10 10\r\n0 10 10 10\r\n20 10 10 10\r\n10 20 10 10\r\n4 16\r\n170 13\r\n24 88\r\n152 49\r\n110 130\r\n60 60 140 60\r\n140 60 140 140\r\n140 140 60 140\r\n60 140 60 60\r\n0 0 200 0\r\n200 0 200 200\r\n200 200 0 200\r\n0 200 0 0\r\n40 40 160 40\r\n160 40 160 160\r\n160 160 40 160\r\n40 160 40 40\r\n20 20 180 20\r\n180 20 180 180\r\n180 180 20 180\r\n20 180 20 20\r\n0 0",
      "expected_output": "2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3\r\n1 2\r\n2 1 3\r\n2 2 4\r\n1 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 7\n8 7\n1 10\n4 6\n6 10\n10 3 6 2\n6 9 3 4\n5 8 6 9\n9 2 3 6\n6 10 8 10\n4 2 1 3\n9 9 4 8\n7 4 1 6\n2 2 8 2\n4 5 5 1\n4 3 5 3\n2 8 1 8\n1 2\n7 8\n1 4\n4 5\n8 3\n6 1 8 3\n8 3 3 3\n6 3 6 7\n10 3 9 7\n1 1 2 8\n2 6 6 8\n4 4 9 7\n3 9 6 7\n5 9 5 9\n4 9 6 10\n5 5 7 1\n4 9 2 4\n3 4 9 2\n10 1 5 6\n1 5 7 4\n10 6 7 6\n1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 4\n5 4\n5 8\n6 6\n6 2\n10 7 7 9\n4 4 7 5\n10 8 4 8\n9 10 4 2\n5 3 9 9\n7 3 9 2\n3 1 8 1\n2 8 2 3\n8 3 5 7\n3 8 6 1\n3 10 3 9\n9 1 6 6\n4 7\n8 10\n1 8\n6 1\n8 7\n4 4 3 2\n3 10 7 10\n5 8 4 1\n9 8 2 1\n10 5 1 2\n4 9 6 1\n6 2 3 4\n9 10 1 6\n4 8 9 9\n2 6 3 2\n3 2 5 6\n4 7 9 5\n6 9 7 7\n3 3 3 3\n10 7 10 9\n3 5 8 3\n7 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n9 7\n8 4\n6 6\n3 8\n5 7 4 1\n2 9 5 8\n9 7 10 2\n8 9 3 5\n2 9 10 2\n3 7 2 10\n8 3 1 6\n7 1 9 1\n1 4 9 3\n6 1 7 9\n5 6 8 8\n3 10 6 7\n10 2\n1 6\n2 2\n4 1\n9 3\n3 3 5 4\n4 10 1 2\n10 2 10 9\n2 5 5 4\n10 7 9 2\n1 4 7 5\n2 6 8 10\n3 9 6 6\n2 3 8 4\n2 5 8 10\n2 5 8 6\n10 2 4 10\n7 8 8 2\n5 8 10 3\n8 3 6 7\n3 9 6 1\n2 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "40 37\n85 79\n84 76\n3 94\n66 33\n88 46 11 16\n13 94 10 4\n78 50 51 48\n14 61 55 66\n89 49 58 14\n30 98 73 13\n18 17 27 20\n7 91 11 100\n77 29 87 4\n39 96 59 100\n18 66 43 33\n53 20 1 47\n91 21\n37 67\n8 60\n95 39\n34 38\n81 31 54 95\n15 9 10 97\n84 31 12 38\n85 96 42 54\n63 90 85 31\n26 29 58 40\n88 36 18 92\n48 94 77 27\n11 95 5 69\n92 78 90 44\n98 13 1 63\n95 85 66 27\n8 51 63 17\n10 11 97 43\n94 11 11 55\n91 12 34 3\n45 10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 28\n13 74\n37 99\n35 39\n62 70\n99 100 37 44\n59 17 24 60\n61 10 89 69\n30 10 16 18\n28 11 37 11\n85 36 15 46\n13 29 89 91\n13 52 99 78\n69 91 59 1\n2 1 58 33\n20 99 58 24\n29 59 68 91\n49 12\n31 8\n16 82\n61 89\n97 10\n26 3 15 12\n65 58 3 20\n73 79 58 19\n22 6 48 86\n5 72 18 38\n10 59 98 47\n81 88 22 59\n13 96 67 2\n12 29 79 88\n81 100 97 53\n27 99 76 64\n78 74 35 5\n78 64 42 12\n99 23 54 87\n70 51 89 21\n39 72 65 39\n7 52",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "74 88\n13 75\n5 55\n58 42\n19 3\n82 49 57 39\n12 64 86 99\n47 34 69 2\n6 91 26 73\n97 96 19 100\n86 32 69 88\n92 15 23 97\n74 36 53 8\n72 57 76 80\n49 44 57 35\n25 89 72 23\n100 79 31 34\n43 28\n53 24\n17 62\n35 58\n93 90\n66 1 92 67\n26 12 62 9\n16 83 85 26\n85 4 21 2\n53 47 80 63\n51 24 72 82\n74 12 29 33\n83 85 73 48\n17 65 1 76\n90 63 68 3\n74 33 22 98\n2 89 89 94\n42 53 46 6\n61 66 63 20\n29 33 20 63\n74 79 20 72\n5 43",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 44\n44 39\n70 65\n3 1\n45 17\n34 76 6 13\n44 70 23 43\n79 72 5 79\n12 26 95 40\n35 82 18 53\n9 14 35 72\n89 66 84 26\n40 1 13 67\n37 6 100 19\n32 87 80 32\n21 56 27 14\n45 9 10 82\n89 9\n42 17\n18 73\n76 14\n4 32\n52 77 50 9\n11 93 72 63\n40 82 35 85\n55 92 42 23\n51 20 49 32\n9 2 25 21\n98 100 99 99\n50 42 11 55\n32 52 58 81\n67 27 18 6\n37 13 44 70\n73 78 78 4\n76 53 57 75\n8 68 51 15\n88 11 64 82\n65 90 79 43\n13 95",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "79 96\n65 29\n23 11\n47 62\n25 90\n12 7 4 51\n37 2 66 67\n23 54 6 100\n62 35 89 98\n57 27 34 16\n38 72 26 79\n96 74 7 91\n36 21 86 44\n50 52 15 21\n97 85 64 96\n78 91 99 9\n68 25 75 81\n70 52\n40 83\n48 67\n60 68\n13 37\n5 83 12 89\n73 58 15 13\n56 60 23 96\n100 46 62 11\n100 59 95 81\n64 89 25 64\n26 61 21 27\n79 65 93 57\n7 19 45 41\n29 100 93 71\n94 17 7 6\n36 60 93 71\n70 31 42 60\n19 23 76 99\n11 57 42 16\n86 3 61 29\n38 99",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "163 288\n35 266\n126 232\n67 90\n219 193\n188 144 128 84\n256 278 157 109\n249 70 142 194\n244 190 289 147\n37 191 149 105\n280 157 274 275\n80 84 175 220\n239 90 70 60\n39 184 59 275\n203 87 198 231\n166 43 198 257\n79 285 192 272\n215 220\n127 119\n256 152\n207 147\n135 192\n160 288 141 270\n254 112 237 289\n239 34 197 291\n284 274 241 159\n294 281 78 33\n249 86 188 155\n116 126 80 206\n216 246 71 120\n246 80 218 237\n269 289 245 96\n220 253 282 130\n117 45 143 276\n118 36 133 295\n251 58 299 167\n237 228 118 105\n169 171 96 175\n195 121",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "157 238\n240 164\n157 166\n70 52\n215 136\n99 111 193 248\n152 232 192 47\n176 243 232 89\n282 269 31 276\n84 224 151 189\n189 222 271 266\n244 150 239 140\n227 64 111 187\n113 215 283 41\n208 249 93 106\n162 161 265 260\n110 282 181 223\n163 167\n78 288\n149 103\n93 74\n157 56\n143 49 199 148\n221 39 181 67\n147 216 73 59\n88 156 57 161\n213 265 206 88\n54 50 127 49\n256 136 247 166\n82 145 291 196\n268 223 207 164\n109 200 249 179\n95 146 159 73\n86 255 52 156\n292 113 291 173\n192 100 196 159\n279 81 62 70\n70 52 201 130\n214 256",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "117 197\n33 37\n73 98\n94 242\n159 166\n192 188 125 160\n254 232 245 175\n95 210 211 255\n152 40 84 76\n181 92 264 188\n41 62 278 123\n247 172 209 152\n117 207 113 237\n174 123 192 44\n273 127 183 205\n121 205 194 94\n81 275 228 33\n230 77\n239 281\n187 86\n296 101\n202 61\n256 202 98 69\n93 187 208 93\n259 230 71 142\n49 154 288 71\n75 244 149 32\n47 56 153 46\n54 54 290 164\n157 84 179 284\n115 160 238 123\n160 261 117 43\n219 154 112 76\n241 56 212 54\n190 206 129 164\n139 184 170 74\n46 92 50 49\n169 227 174 255\n288 192",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "152 115\n45 243\n74 112\n298 177\n199 97\n101 227 175 170\n43 119 47 239\n149 58 117 47\n182 183 143 261\n103 168 92 270\n247 47 269 240\n109 93 55 295\n203 236 240 108\n223 173 280 262\n200 169 207 241\n271 60 79 48\n174 289 64 33\n155 115\n264 48\n249 260\n161 186\n105 60\n66 134 94 211\n45 218 63 296\n229 76 47 121\n106 225 218 192\n221 274 229 117\n135 265 47 257\n276 68 155 35\n156 147 234 137\n217 176 101 236\n276 242 163 40\n221 89 203 55\n99 194 50 223\n64 220 155 189\n278 181 168 187\n192 69 32 279\n130 104 30 214\n267 284",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "172 119\n197 135\n113 225\n166 65\n165 103\n57 149 60 135\n101 158 178 95\n179 117 58 193\n154 257 270 33\n50 96 38 121\n99 201 53 258\n199 233 183 142\n137 184 280 118\n244 77 79 242\n235 153 242 140\n36 155 158 34\n95 221 84 176\n93 201\n246 177\n292 232\n183 241\n73 215\n299 245 95 185\n186 224 282 224\n107 260 66 95\n97 40 263 178\n209 154 235 118\n268 287 245 197\n190 153 87 109\n153 189 252 57\n96 255 171 41\n94 83 269 176\n194 31 219 173\n214 130 240 35\n137 200 246 112\n104 33 126 283\n136 53 192 127\n247 144 163 198\n201 48",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "100 234\n83 213\n189 230\n260 155\n296 288\n292 122 238 236\n53 118 281 77\n267 202 118 106\n100 276 266 278\n145 107 136 212\n84 36 239 273\n173 79 266 89\n183 280 113 94\n73 56 198 73\n36 242 227 171\n108 191 298 249\n47 137 289 49\n291 177\n112 163\n207 171\n90 192\n173 283\n255 122 83 220\n273 138 168 272\n238 224 184 75\n99 294 204 169\n280 251 33 32\n288 70 164 205\n288 223 190 49\n166 269 55 80\n106 181 184 287\n103 258 206 286\n34 148 115 38\n266 91 234 159\n220 261 51 268\n182 64 61 38\n113 290 156 239\n136 79 60 138\n36 208",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "284 261\n153 281\n47 86\n71 271\n223 74\n128 273 195 81\n266 218 112 274\n222 161 62 42\n143 239 90 285\n80 183 292 273\n71 104 84 153\n57 244 151 122\n107 95 55 46\n122 210 254 47\n170 97 249 207\n191 206 38 85\n246 75 156 278\n30 174\n181 133\n261 53\n298 255\n67 75\n36 124 160 292\n103 232 77 143\n119 69 169 123\n116 274 30 248\n74 183 163 36\n42 272 122 198\n293 54 237 240\n158 218 204 232\n219 233 175 297\n183 137 229 194\n297 68 36 287\n187 295 42 57\n46 37 219 205\n277 181 182 94\n109 298 203 175\n166 99 238 178\n139 137",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "600 600\n600 600\n600 600\n600 600\n600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600\n600 600\n600 600\n600 600\n600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "600 600\n600 600\n600 600\n600 600\n600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600\n600 600\n600 600\n600 600\n600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600 600 600\n600 600",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "600 2\n599 600\n600 1\n600 2\n1 600\n599 600 2 1\n600 599 2 600\n599 2 600 599\n1 1 2 600\n600 600 599 600\n1 599 600 600\n599 1 1 599\n600 1 2 600\n1 2 2 600\n2 599 599 2\n2 600 599 599\n599 600 600 1\n1 2\n600 1\n2 1\n1 599\n600 599\n2 1 1 600\n599 1 600 2\n2 600 2 599\n1 600 599 2\n2 2 1 600\n2 600 600 1\n599 1 600 599\n600 600 2 600\n2 599 2 2\n599 600 600 1\n600 1 2 599\n2 600 599 600\n600 600 599 600\n599 2 600 599\n599 600 1 599\n2 1 2 1\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "600 1\n599 600\n1 2\n600 1\n600 599\n1 2 600 2\n1 2 2 1\n2 600 1 600\n2 2 600 600\n600 2 600 600\n599 600 2 600\n599 599 599 600\n1 1 599 1\n1 599 600 1\n600 600 2 1\n599 600 2 600\n599 600 600 600\n600 2\n599 2\n600 599\n599 600\n600 600\n599 600 599 600\n600 599 2 600\n600 2 1 2\n600 1 1 1\n599 600 1 599\n2 599 600 1\n599 599 600 599\n600 1 2 600\n1 600 1 2\n1 1 2 1\n2 600 599 1\n600 599 600 600\n2 1 600 2\n2 600 600 1\n600 2 599 600\n1 600 599 599\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}