{
  "problem_code": "problems",
  "title": "SQL Queries",
  "tags": [],
  "text": "Structured Query Language (SQL) is a special-purpose programming language designed for manipulating relational data. Its most known feature is perhaps the Query, that is, a mechanism by which data can be retrieved based on custom criteria.The general syntax to construct a SQL Query with filtering criteria is as follows:SELECT [list of fields]\r\n     FROM [table]\r\n     WHERE [criteria]Let us review an example. Consider we have the following table of competitive programmers:NicknameCountryCF_RatingTC_RatingtouristBY32053693PetrRU26763738EgorRU27323463cjtoribioDO20191381niquefa_diegoCO20591896Un_Exisstin3PE24001499If we wanted to retrieve all competitive programmers who have a CodeForces rating less than 2200 or a TopCoder rating of at most 1500, we could construct the following query:SELECT Nickname\r\n   FROM Comp_Programmers\r\n   WHERE CF_Rating < 2200 OR TC_Rating <= 1500In this example, the query would return nicknamescjtoribio,niquefa_diegoandUn_Exisstin3.We will consider a simplified SQL statement. Assume there is only one table with the same structure as the one provided in the above example. Your program will receive a single criteria with exactly two conditions on the columns CF_Rating and TC_Rating, assembled with either the AND or the OR operator. With this criteria, your program must output the corresponding nicknames of the retrieved rows.InputThe first line of input contains M (1 <= M <= 50), the number of rows on the table and N (1 <= N <= 20), the number of queries to be performed. The nextMlines contain the rows of the table. Each row is completely described in a single line and contains four tokens separated by single space: Nickname, which is a string of length not exceeding 20; Country, an uppercase string of length 2 consisting of letters [A-Z]; CF_Rating, a positive integer in the range [0, 5000] and TC_Rating, similar to CF_Rating. Nicknames are not unique.The following N lines contain the list of queries to be performed. Each query is described in a single line. The format of a query is as follows (without brackets):[CF_Rating | TC_Rating] [ < | > | <= | >= ] [positive_integer] [AND | OR] [CF_Rating | TC_Rating] [ < | > | <= | >= ] [positive_integer].OutputFor each query i enumerated from 1 to N:- output as its first line \"Query #i:\"- output each nickname on a separate lineThe list of nicknames must be printed in lexicographical order.ExamplesInput6 2\r\ntourist BY 3205 3693\r\nPetr RU 2676 3738\r\nEgor RU 2732 3463\r\ncjtoribio DO 2019 1381\r\nniquefa_diego CO 2059 1896\r\nUn_Exisstin3 PE 2400 1499\r\nCF_Rating < 2200 OR TC_Rating <= 1500\r\nCF_Rating > 1 AND TC_Rating >= 3600OutputQuery #1:\r\nUn_Exisstin3\r\ncjtoribio\r\nniquefa_diego\r\nQuery #2:\r\nPetr\r\ntourist",
  "sample_input": "SELECT [list of fields]\r\n     FROM [table]\r\n     WHERE [criteria]",
  "sample_output": "SELECT Nickname\r\n   FROM Comp_Programmers\r\n   WHERE CF_Rating < 2200 OR TC_Rating <= 1500",
  "link": "https://www.spoj.com/problems/PUCMM331",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "SELECT [list of fields]\r\n     FROM [table]\r\n     WHERE [criteria]",
      "expected_output": "SELECT Nickname\r\n   FROM Comp_Programmers\r\n   WHERE CF_Rating < 2200 OR TC_Rating <= 1500",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "t ektd dwpx pmfjsz\nez p\nyxe pztxtv",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "f qlz eoa gblgz\nby oekodq\nfkxy gx",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "i naql qhjjg cnjavp\nmwr bhm\nmuss qvssaejfu",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "vr xiinx grjy endxhyt\nzx shoiujb\nldnzx bjtyicai",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "hvwmt wskbr v g\nbn wsxef\nodlb xpngxenan",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "osqu tti hao ns\nlcaiw lsf\nmul wnvseml",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "itb svw n t\nzwrsh ihbja\na qvngrq",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "ptwlw cjznc ah gdptibs\nkoq fmdh\nl uluvxv",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "dgxet fx kond qhylw\ns weiayev\nney vcdw",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "ndds ua tuode dzta\nu swrxv\ngdmz ncgepec",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vtu lztct svq o\nqkgvo oh\nvyngs yld",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "tc zgw vnn ocfrc\ntqgnb vngw\nhm bjnba",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "gvzzu bkfud j yybv\ndkq epudj\nrrgl mfk",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "vbw ge ekj fil\nioaiz ig\nzb zdycpicr",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "hn sbv bvgx v\ncqub gf\ny hxn",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "e qoq xrnc pn\nukzcf xcyld\nvy eojgjy",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "vryydk syman hg kggld\nypo ca\nae lhgftjaws",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ei kdzg nqs qfqvw\nkwnsi qpj\nztjq oaglqt",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "ootkv kp cjbl seqm\njjdl ywvk\npss hezvks",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}