{
  "problem_code": "problems",
  "title": "Decorating the Palace",
  "tags": [],
  "text": "The King of DragonLand likes decorating towers. So one day he decided to decorate a tower with flowers.The highest floor of a tower contains only one room and floor just below every floor except the base floor will have two of its child buildings on which it is built.Note that its structure is like a binary tree.for height = 3*\r\n           *     *\r\n          * *   * *You are given the task of decorating it, but there is a constraint in decorating it: sum of child floors of a floor will have be equal to number of flowers in parent building and your child floors will have a small a difference between number of flowers in them as possible to make your tower look beautiful.Given that top building contains N flowers and height of tower is H, find out number of ways of decorating it, As this value may be large, output it modulo 109+ 7.Two decorations are considered different if any floor in them contains different number of flowersInputT: number of test cases (≤ 10), then next T lines contain H, N.OutputOutput the number of different decorations % (109+ 7)Constraints1 ≤ H ≤ 501 ≤ N ≤ 50000ExampleInput2\r\n1 1\r\n2 1Output1\r\n2Explanationfor 1 1, it is obvious.for 2 1,There can be two ways:1\r\n1     0\r\n\r\nOR\r\n\r\n   1\r\n0     1",
  "sample_input": "*\r\n           *     *\r\n          * *   * *",
  "sample_output": "Input2\r\n1 1\r\n2 1Output1\r\n2",
  "link": "https://www.spoj.com/problems/DEC123",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "*\r\n           *     *\r\n          * *   * *",
      "expected_output": "Input2\r\n1 1\r\n2 1Output1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "x\nlsyu aghb\nidyzc oe i ahev",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "g\nnxs qpaew\nau xsu sgspj cux",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "v\ndqtf our\nlkr h chek cil",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "ql\ntet my\nmp hzxz ggi n",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "gf\njle wpqbn\nbgrym sl stea mt",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ut\nn zc\ntv g lq ck",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "pk\nsrl sbq\npxxl laooh kf veawy",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "t\ni vu\np nui d sf",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "z\nc bjhi\nworya s mwx h",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "gp\nfh bor\novli la xbg fthat",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "f\npry gr\nz s u kstgj",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "w\nscb g\nb ebk ezpoe n",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "ji\nzbftw qwgf\nk jau ycpes mmajq",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "o\nyia y\np ckli ahclx l",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "e\njpwkr e\nr d j r",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "g\ns xjsr\ns f fzi dca",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "t\nhf d\ngpgh m rzzly ldcvc",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "q\nb yvavj\noonwn h nsu rcxj",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "c\ntqrz b\nipc i thsua g",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}