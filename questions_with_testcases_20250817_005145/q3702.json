{
  "problem_code": "problems",
  "title": "Dynamic Tree Connectivity",
  "tags": [],
  "text": "A forest of unrooted trees initially consists of N  (1 ≤ N ≤ 100,000) single-vertex trees. The vertices are numbered from 1 to N.Your task is to maintain that forest and answer connectivity queries.All edges in the problem areundirected.You will receive the following queries, where (1 ≤ A, B ≤ N) :addA B : add an edge between  vertices  A and B, where initially there is no path between A and B.remA B : remove edge between  vertices  A and B, where initially there is an edge between A and B.connA B : printYESif there is a path between A and B andNOotherwise, where A and B are different.InputThe first line of input contains the number of initial single-vertex trees N and the number of queries M (1 ≤ M ≤ 100,000). The following M lines contain queries.OutputFor eachconnquery outputYESorNO. Pay attention to letter case.ExampleThis example will be the first test case.Input:5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5Output:NOYESNOYES",
  "sample_input": "Input:5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5Output:NOYESNOYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DYNACON1",
  "scraped_at": "2025-08-17 00:34:21",
  "test_cases": [
    {
      "input": "5 11conn 1 5add 1 2add 1 3add 3 4add 5 4conn 1 5rem 4 5conn 1 5rem 3 4add 3 5conn 1 5",
      "expected_output": "NOYESNOYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 9 10 2 4 3 9 4 4 3 6 7 2 6 1 8 3 7 8 1 4 3 8 10\n2 azrva 10 wfu 4 onmu 5 n 8 dno 3 fl 4 drvw 9 khk 9 odisu 2 gdn 6 vreo 6 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 8 9 5 2 7 5 8 8 8 4 2 8 6 5 9 4 2 4 4 2 7 5\n6 jyxvq 8 csvho 10 a 10 r 2 v 10 wnif 2 nxem 5 fvlcn 10 ce 1 i 10 miysg 6 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 4 7 9 8 10 7 10 6 4 3 6 3 5 5 10 4 6 3 4 3 2 1\n3 huxqlf 4 pdch 5 tsp 3 bku 9 itven 3 b 2 boh 9 e 6 n 5 tpn 4 czxsb 8 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "95 62 76 83 26 35 75 65 76 95 10 38 91 65 33 25 74 94 46 42 10 83 33 56\n62 vxz 4 rojbe 8 y 53 grzf 72 caxzl 42 snea 39 ao 58 e 40 zqxmc 18 hk 86 qhk 96 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "3 27 50 32 40 26 22 3 95 32 16 32 42 96 63 38 95 53 67 43 59 18 46 88\n41 wnr 97 crcz 55 nzd 83 q 23 v 92 dci 6 cvye 66 ixlc 65 xwm 76 xhy 82 ey 72 87",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "97 88 37 65 82 16 21 6 99 56 68 65 53 58 92 5 61 83 67 38 97 38 18 97\n24 zd 93 oagpv 94 l 89 nx 19 kb 84 askr 33 equs 34 jdbiv 84 hfgs 18 nro 19 kiot 26 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 86 60 76 21 5 79 3 68 17 51 34 92 81 93 49 40 38 57 85 49 30 56 30\n24 roiaxq 4 vx 60 b 55 cug 91 m 41 iykmo 24 c 68 ed 97 wk 52 gevb 26 oku 45 72",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 67 94 62 25 24 1 66 23 22 98 47 24 79 43 98 70 86 32 97 43 93 71 63\n84 cioss 49 hvv 7 rp 17 dy 96 ieokk 50 yq 67 ru 17 apegk 10 bznru 17 pqfrs 3 e 41 77",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "41 41 42 50 27 28 44 43 22 42 47 27 32 49 15 27 12 6 10 34 33 48 49 27\n37 j 43 vk 42 weyj 13 kfw 23 i 29 zpoly 32 qe 11 nr 33 ee 12 hiu 10 o 38 26",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "21 25 14 25 11 15 28 18 10 21 28 42 39 43 21 6 45 5 9 7 17 31 48 24\n8 f 24 efq 16 gktb 47 obpif 40 zwqe 23 s 39 t 20 lohxx 46 b 35 e 40 jyl 41 12",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9 45 46 21 24 37 33 43 29 35 48 5 16 21 35 44 47 28 17 42 25 46 27 11\n24 xnmkii 42 tkfg 21 x 7 jfds 26 fe 21 jxhgq 45 tx 13 kdld 48 tcigx 11 o 20 u 12 50",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "25 40 16 15 48 24 14 13 8 15 14 46 46 45 37 28 42 39 11 11 27 40 27 23\n39 ns 27 q 30 wzp 31 ozxa 40 yko 44 tzbq 8 tzyuv 9 nrdct 49 ywvo 48 qvyc 9 mo 50 21",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "16 45 18 28 15 37 26 24 14 18 33 28 33 30 24 19 13 47 47 23 15 27 41 42\n38 zdrbrg 43 zsogj 20 pcclh 6 gachz 28 zqwr 43 yk 5 a 11 sxy 49 jgjkp 10 dil 14 thzg 47 37",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "45 23 39 19 26 11 26 45 47 48 42 12 17 13 40 35 44 40 25 21 18 17 32 5\n18 re 28 ffug 35 wj 41 ogxwl 20 aetqs 5 zrj 43 ew 10 ab 25 joa 41 adox 33 zaw 18 22",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "6 16 32 48 37 18 22 6 23 9 34 45 14 14 10 10 44 14 9 27 17 31 13 25\n40 dsexcq 41 w 33 go 26 rprq 20 a 40 typl 17 axqa 17 h 22 atwu 5 zsky 31 mvceg 24 33",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 m 100 qkw 100 dsgzu 100 jv 100 eam 100 n 100 w 100 sxqks 100 inzz 100 qp 100 hjf 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n100 awljwe 100 rlzts 100 oyjyq 100 wwmw 100 srxx 100 r 100 xkrub 100 ilnaa 100 mnht 100 tc 100 bk 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2 100 100 1 99 100 1 2 1 2 2 2 100 1 99 99 2 100 100 1 100 1\n100 d 99 c 1 bxh 1 nbp 99 cuxw 2 swcg 100 yiba 2 blt 2 qxvhm 99 rjmq 100 xb 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99 1 100 99 2 99 100 99 1 99 2 99 2 2 2 2 1 1 100 100 100 99 100 99\n99 cdvkp 100 gls 99 ub 100 nexbs 2 ywhb 2 ilrd 1 zsv 100 bkvx 99 ujr 99 jqj 1 lofxm 2 99",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}