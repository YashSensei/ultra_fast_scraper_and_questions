{
  "problem_code": "problems",
  "title": "Return of the Digger",
  "tags": [],
  "text": "The adventures of “Digger” continue as he once again searches for treasure. This time, his money senses detect it underground. His plan is to dig down to it using an automatic pickaxe and his souped-up pneumatic drill.The treasure is within a thin stretch of land, running West to East, that is made up of dirt and some rocks. This stretch is $L$ ($1 \\leq L \\leq 200$) metres long. Digger’s money senses are very exact, and he knows the location of the treasure he seeks – it is no more than $10000$ metres below the surface. In addition to money senses, he apparently also has rock senses, which can pinpoint $N$ ($1 \\leq N \\leq 5000$) rocks among the dirt, none of which will be at a depth of more than $10000$ metres.Digger’s specially-designed pneumatic drill can only go straight down, and it can tunnel through dirt easily – however, it isn’t equipped with brakes, so it keeps on going until it hits a rock. When this happens, it stops just above the rock, but the drill bit also breaks. This time, Digger doesn’t have to worry about fuel – instead, he just wants to avoid breaking his drill bits! Once stationary, Digger can also use his pickaxe to dig left and right (yes, even through rocks!), but he can’t dig up or down with it.The treasure is pretty fragile, so Digger definitely doesn’t want to drill right into it. Instead, he can either get to the same depth as it and use his pickaxe to dig to it, or he can use his pneumatic drill to go right past it (either 1 metre to the left or right of it). However, once he gets his hands on the treasure, Digger’s plan isn’t complete – he intends to keep drilling down until he gets to China. As such, he must first navigate past the deepest of the $N$ rocks – at that point, it’s all dirt (or so he hopes...).Digger can start anywhere on the surface. Determine the minimum amount of drill bits that he must break in order to retrieve the treasure and dig down past all the rocks, if it’s possible at all.InputLine $1$: $L$ and $N$ – respectively, the length of the stretch of land (in metres) and the number of rocks.Lines $2..N+1$: $A$ and $B$ – the $i$th line gives the location of the ($i-1$)th rock, where $A$ is its depth, and $B$ is its distance from the West edge of the stretch of land (both in metres).Line $N+2$: $Y$ and $X$ – the location of the treasure, where $Y$ is its depth, and $X$ is its distance from the West edge of the stretch of land (both in metres). The treasure will not be within a rock.OutputIf it’s impossible for Digger to reach the treasure and dig down past all the rocks, output “Use dynamite”.Otherwise, output a single number – the minimum number of drill bits Digger must break to accomplish this.ExampleInput:10 201 52 12 22 42 52 62 82 93 34 74 84 95 35 45 55 66 310 110 210 78 6Output:3Explanation of Sample:Digger starts on the surface, 7 metres from the West edge of the stretch of land. He drills down for 3 metres until he hits a rock and breaks his first drill bit. He then uses his pickaxe to walk to the left, and drills down another metre, hitting another rock and breaking his second drill bit. He then walks to the right (through a rock), and drills down for 5 metres, picking up the treasure on the way, until he hits another rock and breaks his third and final drill bit. He then walks to the right and drills down past the last rock. This route is shown below (‘.’: dirt, ‘x’: rock, ‘T’: treasure, ‘D’: drill, ’<’ or ‘>’: pickaxe):.....x.D...xx.xxxDxx...x........D>xx...xxxxD.....x...D.........D........TD.........D>..xx....xD.........D.",
  "sample_input": "Input:10 201 52 12 22 42 52 62 82 93 34 74 84 95 35 45 55 66 310 110 210 78 6Output:3",
  "sample_output": ".....x.D...xx.xxxDxx...x........D>xx...xxxxD.....x...D.........D........TD.........D>..xx....xD.........D.",
  "link": "https://www.spoj.com/problems/RETDIG",
  "scraped_at": "2025-08-17 00:33:49",
  "test_cases": [
    {
      "input": "10 201 52 12 22 42 52 62 82 93 34 74 84 95 35 45 55 66 310 110 210 78 6",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 9 2 4 9 10 9 4 5 8 3 8 10 6 7 2 1 1 9 5 9 3 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 2 3 3 7 8 1 1 6 8 3 3 8 3 6 7 1 10 9 10 8 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 5 9 2 6 2 3 9 1 4 1 2 10 8 7 5 10 3 6 1 1 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 87 46 22 73 52 48 39 75 40 95 20 45 59 48 21 81 20 91 79 22 23 44",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 66 100 49 34 72 75 80 86 37 34 18 57 21 45 13 53 53 53 71 50 60 18",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "69 1 7 88 44 79 21 30 34 2 3 31 85 81 14 87 74 73 1 68 22 18 26",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "64 54 15 6 11 34 61 6 89 78 9 23 53 100 98 88 96 24 1 23 33 96 9",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1 91 16 75 13 83 81 63 83 75 40 1 54 61 59 77 39 67 66 21 54 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "181 172 464 261 419 461 111 394 320 397 83 274 127 288 112 304 162 422 129 402 495 369 128",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "88 211 426 286 192 103 188 226 295 315 362 490 337 227 479 140 210 349 136 93 486 335 458",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "119 478 258 272 73 80 205 245 67 173 117 140 237 310 242 235 159 381 487 152 157 335 324",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "235 421 238 492 495 408 247 320 197 400 94 261 304 478 354 494 386 437 215 382 500 69 470",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "75 350 374 384 486 61 328 460 119 149 320 259 311 82 262 130 82 348 498 163 424 129 290",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "292 463 444 93 219 229 68 307 426 264 232 93 264 439 117 213 287 450 328 488 167 235 199",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "288 196 135 132 248 72 91 344 294 377 448 399 461 401 148 243 427 134 57 487 113 181 393",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000 1 2 2 1 1000 1 1 1000 2 1000 1 2 1 2 1 1000 1 999 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000 2 2 999 2 999 1 1000 1000 1000 1 999 1 2 2 1 1000 999 1 999 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}