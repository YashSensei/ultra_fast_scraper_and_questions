{
  "problem_code": "problems",
  "title": "Johns Trip",
  "tags": [],
  "text": "Little Johnny has got a new car. He decided to drive around the town to visit his friends. Johnny wanted to visit all his friends, but there was many of them. In each street he had one friend. He started thinking how to make his trip as short as possible. Very soon he realized that the best way to do it was to travel through each street of town only once. Naturally, he wanted to finish his trip at the same place he started, at his parents' house.The streets in Johnny's town were named by integer numbers from 1 ton,n< 1995. The junctions were independently named by integer numbers from 1 tom,mâ‰¤ 44. All junctions in the town had different numbers. Each street was connecting exactly two (not necessarily different) junctions. No two streets in the town had the same number. He immediately started to plan his round trip. If there was more than one such round trip, he would have chosen the one which, when written down as a sequence of street numbers is lexicographically the smallest.But Johnny was not able to find even one such round trip. Help Johnny and write a program which finds the desired shortest round trip. If the round trip does not exist the program should write a message. Assume that Johnny lives at the junction ending the 1st street input with smaller number. All streets in the town are two way. There exists a way from each street to any other street in the town. The streets in the town are very narrow and there is no possibility to turn back the car once he is in the street.InputInput file consists of several blocks. Each block describes one town. Each line in the block contains three integersx,y,z, wherex> 0 andy> 0 are the numbers of junctions which are connected by the street numberz. The end of the block is marked by the line containingx=y= 0. At the end of the input file there is an empty block,x=y= 0.OutputThe output file consists of 2 line blocks corresponding to the blocks of the input file. The first line of each block contains the sequence of street numbers (single members of the sequence are separated by space) describing Johnny's round trip. If the round trip cannot be found the corresponding output block contains the message ``Round trip does not exist.''. The second line of each block is empty.SampleInput1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
  "sample_input": "Input1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JTRIP",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "Input1 2 1\r\n2 3 2\r\n3 1 6\r\n1 2 5\r\n2 3 3\r\n3 1 4\r\n0 0\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n2 4 4\r\n0 0\r\n0 0Output1 2 3 5 4 6\r\n\r\nRound trip does not exist.",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10 4\naro 7 5\n10 4 5\n5 8 3\n9 4 7\n8 3 8\n9 2 1\n7 5\n6 3 10\n8 4 10\n2 6 4\n4 2 4\n9 9\n4 8 3 5 6 10 3 7\n5 uckoncpa 4 2 3 6 10\ngds ffbm cd v xsp",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 2\nmu 8 8\n6 10 9\n1 7 6\n8 5 9\n5 3 4\n10 9 5\n7 9\n6 5 5\n10 5 9\n8 10 8\n2 9 4\n3 4\n2 4 4 3 9 1 6 6\n6 mhszoquo 4 1 3 10 8\nrgk yhic uy kdydt lmr",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 6\nihwmb 5 3\n7 9 1\n4 8 9\n8 6 7\n5 8 2\n8 7 5\n3 5\n4 1 4\n5 6 1\n1 5 2\n10 7 4\n4 3\n9 8 2 6 7 8 6 5\n9 aytlafau 2 4 8 4 2\njzlha tep ugnnp vb crdpb",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "58 56 75\nl 5 40\n87 1 67\n74 7 90\n36 7 53\n25 92 92\n47 10 78\n68 28\n37 32 46\n1 96 71\n96 88 90\n10 30 15\n88 59\n98 7 65 26 21 15 92 78\n87 c 16 87 14 12 78\nlhdo hajaw rspdd czepn q",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "97 37 89\nrqz 15 7\n100 67 83\n23 82 96\n36 82 55\n66 96 48\n12 46 23\n75 42\n33 4 65\n3 74 11\n63 53 44\n43 58 93\n8 79\n96 37 16 89 11 47 45 45\n94 qfnvy 72 37 35 71 13\nju ruy hbt hf hlthl",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 51 30\nwmpauf 27 19\n6 85 49\n75 47 21\n5 67 91\n52 29 3\n17 91 66\n63 56\n69 65 53\n84 29 93\n72 9 88\n40 13 96\n40 14\n24 39 1 92 28 94 35 55\n77 kwr 45 62 19 49 64\nt ni zqw t cz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 28 18\nq 77 73\n50 43 45\n76 92 82\n48 99 56\n64 15 63\n23 50 56\n52 66\n44 3 93\n3 74 73\n29 58 82\n24 9 40\n41 82\n80 82 81 1 58 45 32 7\n86 cor 43 10 35 79 69\noaqi tqcbo iyub iepop euzxl",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 51 18\nhpvf 53 10\n60 9 7\n44 42 27\n72 55 77\n4 54 22\n25 65 6\n88 21\n55 69 15\n97 51 78\n41 92 6\n50 21 62\n86 30\n35 58 66 37 4 54 91 48\n4 idnyv 50 36 2 99 21\nsib pz spzju vy zk",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "445 141 313\nq 680 240\n815 716 113\n421 835 879\n699 843 800\n960 277 648\n302 783 281\n775 432\n932 970 133\n933 657 457\n143 468 605\n162 808 285\n455 756\n173 876 344 851 594 996 900 476\n465 f 469 269 282 685 212\nyw etxnc ptvd ats n",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "908 416 227\nnaaasb 435 745\n474 297 761\n778 511 248\n741 666 831\n419 675 585\n306 809 227\n562 302\n586 482 160\n804 906 476\n655 686 384\n743 337 688\n547 875\n138 892 714 743 613 367 897 460\n121 ur 380 538 325 580 790\nif tg yhrm kh xqiz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "645 700 764\nffoo 192 191\n668 560 919\n567 515 982\n845 593 680\n919 780 683\n486 405 968\n382 808\n394 799 748\n840 183 375\n966 148 833\n864 918 399\n982 523\n679 446 631 358 220 440 205 761\n467 oqsulxb 366 482 953 245 916\ni qjdl zuvl qkb clqn",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "971 405 283\nhmfa 391 304\n644 316 363\n571 594 308\n787 465 340\n300 583 225\n790 583 719\n154 520\n906 712 682\n739 763 448\n869 731 624\n950 936 896\n437 168\n457 453 901 335 834 459 757 509\n966 kf 152 751 529 467 353\nfleug mhx jdci rjrjg use",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "519 885 281\nkaxdpu 884 629\n212 99 618\n388 946 682\n710 248 609\n848 412 356\n417 994 786\n399 761\n165 412 281\n916 508 426\n834 891 582\n695 347 594\n880 751\n715 253 735 667 811 523 304 746\n251 dboedk 491 810 346 887 174\nzoxc uot bcga ohk rom",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "139 870 937\nftkjc 161 184\n531 562 445\n270 546 855\n810 978 280\n981 261 133\n755 951 716\n898 235\n199 953 144\n146 521 687\n801 947 273\n905 942 483\n821 640\n872 117 732 962 910 911 573 330\n348 qvzybhb 195 142 140 780 280\na fjr nitau xjrj oknee",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "186 907 638\nonpst 485 243\n357 480 811\n861 708 940\n680 388 703\n320 633 885\n387 684 853\n907 861\n919 311 423\n477 449 446\n299 205 896\n724 175 600\n118 192\n232 789 185 178 237 571 122 957\n661 m 965 648 809 408 143\nnulip eyz vt ge xqrt",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1995 1995 1995\nctgjt 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995 1995 1995 1995 1995 1995\n1995 kvav 1995 1995 1995 1995 1995\nsnmy iik s e iv",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1995 1995 1995\ne 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995 1995\n1995 1995\n1995 1995 1995 1995 1995 1995 1995 1995\n1995 pkngp 1995 1995 1995 1995 1995\ntw s nrvk tbyrl ovcbf",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1995\nmgvoge 2 2\n2 2 2\n1994 1994 1995\n1 1 1995\n1995 1 1\n1 1994 1995\n1995 2\n1995 2 1\n2 1 2\n1994 2 1995\n2 1994 1995\n1995 1994\n1994 2 1994 1995 1994 2 1995 1995\n2 cydfdwa 1 1994 1995 1 1\no ldk zxmhq chizr gbqoox",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1994 1 1995\nhbiu 1 1995\n1995 1994 2\n1995 1 2\n2 1994 1\n1995 1994 1995\n1 1995 2\n1995 1994\n2 2 2\n1 1994 2\n1994 2 1995\n2 2 1994\n2 1\n1994 1995 1995 1994 1995 1 1994 2\n1994 jaaamnx 1 1 1994 1995 1995\ngd jp rs jj vv",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:16"
}