{
  "problem_code": "problems",
  "title": "Manhattan Wire",
  "tags": [],
  "text": "There is a rectangular area containing n × m cells. Two cells are marked\r\nwith “2”, and another two with “3”. Some cells are occupied by obstacles.\r\nYou should connect the two “2”s and also the two “3”s with non-intersecting\r\nlines. Lines can run only vertically or horizontally connecting centers\r\nof cells without obstacles.Lines cannot run on a cell with an obstacle. Only one line can run on\r\na cell at most once. Hence, a line cannot intersect with the other line,\r\nnor with itself. Under these constraints, the total length of the two\r\nlines should be minimized. The length of a line is defined as the\r\nnumber of cell borders it passes. In particular, a line connecting cells\r\nsharing their border has length 1.Fig. 1(a) shows an example setting. Fig. 1(b) shows two lines satisfying the\r\nconstraints above with minimum total length 18.Figure 1: An example of setting and its solutionInputThe input consists of multiple datasets, each in the following format.n m\r\n    row1\r\n    …\r\n    rownn is the number of rows which satisfies 2 ≤ n ≤ 9. m is the number of columns\r\nwhich satisfies 2 ≤ m ≤ 9. Each rowi is a sequence of m digits separated by\r\na space. The digits mean the following.0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”The end of the input is indicated with a line containing two zeros separated\r\nby a space.OutputFor each dataset, one line containing the minimum total length of the two\r\nlines should be output. If there is no pair of lines satisfying the requirement,\r\nanswer “0” instead.Sample Input5 5\r\n0 0 0 0 0\r\n0 0 0 3 0\r\n2 0 2 0 0\r\n1 0 1 1 1\r\n0 0 0 0 3\r\n2 3\r\n2 2 0\r\n0 3 3\r\n6 5\r\n2 0 0 0 0\r\n0 3 0 0 0\r\n0 0 0 0 0\r\n1 1 1 0 0\r\n0 0 0 0 0\r\n0 0 2 3 0\r\n0 0Sample Output18\r\n2\r\n17",
  "sample_input": "n m\r\n    row1\r\n    …\r\n    rown",
  "sample_output": "0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”",
  "link": "https://www.spoj.com/problems/MMAHWIRE",
  "scraped_at": "2025-08-17 00:33:25",
  "test_cases": [
    {
      "input": "n m\r\n    row1\r\n    …\r\n    rown",
      "expected_output": "0: Empty\r\n    1: Occupied by an obstacle\r\n    2: Marked with “2”\r\n    3: Marked with “3”",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "qzccx x\n4\nvyec\ndo\ncg",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "hgpn nap\n5\ncjk\nu\necosxmk",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "pgvb hqbas\n5\nauiry\nbn\nhtbgphpe",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "odvfn jehel\n2\nlap\nw\nxny",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "pqgth ayz\n8\neie\ng\nkq",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "jj jq\n7\nr\nyc\nx",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "idm brs\n4\nbkil\nl\nkm",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "ur nlg\n3\nplyedqp\nv\nwp",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "kq mqq\n3\nd\nr\ngszbdj",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "jwb zzh\n4\nfnihj\nq\nyphb",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vhum e\n4\njoncmnsc\nmt\neza",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "wbd ec\n2\nqq\nad\nq",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "pl f\n2\nqcws\nd\noj",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "mwzu jbdc\n2\ne\nz\nbphaai",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "obtb fnief\n1\nbpmqrp\na\nqpyjhxmn",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "mgods wlmfe\n9\nmsfj\np\nimso",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "v rc\n9\nkl\nm\nqnmtvc",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "pt cxkuw\n8\nncs\nrf\nptsc",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "fi ykumv\n9\ntfl\nxe\netyo",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}