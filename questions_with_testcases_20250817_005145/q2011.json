{
  "problem_code": "problems",
  "title": "Foxlings",
  "tags": [],
  "text": "It’s Christmas time in the forest, and both the Fox and the Wolf families are celebrating. The rather large Fox family consists of two parents as well as $N$ ($1 \\leq N \\leq 10^9$) little Foxlings. The parents have decided to give their children a special treat this year – crackers! After all, it’s a well-known fact that Foxen love crackers.With such a big family, the parents can’t afford that many crackers. As such, they wish to minimize how many they give out, but still insure that each Foxling gets at least a bit. The parents can only give out entire crackers, which can then be divided and passed around.With this many children, not all of them know one another all that well. The Foxlings have names, of course, but their parents are computer scientists, so they have also conveniently numbered them from $1$ to $N$. There are $M$ ($1 \\leq M \\leq 10^5$) unique two-way friendships among the Foxlings, where relationship $i$ is described by the distinct integers $A_i$ and $B_i$ ($1 \\leq A_i,B_i \\leq N$), indicating that Foxling $A_i$ is friends with Foxling $B_i$, and vice versa. When a Foxling is given a cracker, he can use his tail to precisely split it into as many pieces as he wants (the tails of Foxen have many fascinating uses). He can then pass these pieces around to his friends, who can repeat this process themselves.InputLine $1$: 2 integers, $N$ and $M$Next $M$ lines: 2 integers, $A_i$ and $B_i$, for $i=1..M$OutputA single integer – the minimum number crackers must be given out, such that each Foxling ends up with at least a small part of a cracker.ExampleInput:9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9Output:4Explanation of Sample:The parents can give one cracker to Foxling 6, who will then split it into three and give pieces to his friends (Foxlings 1 and 7). Foxling 7 can then give half of his piece to his other friend, Foxling 2.They can give another cracker to Foxling 8, who will split it with Foxling 9.This leaves Foxlings 4 and 5, who have no friends (don’t worry, Foxen have long since outgrown the need for friends), and who must be given one cracker each. This brings the total up to 4 crackers.",
  "sample_input": "Input:9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FOXLINGS",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "9 5\r\n3 1\r\n6 1\r\n7 6\r\n2 7\r\n8 9",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6\n10 10\n10 4\n9 3\n3 10\n6 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 1\n1 9\n4 10\n4 5\n9 5\n4 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n8 5\n4 4\n5 6\n6 2\n1 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 91\n10 61\n20 30\n64 29\n43 79\n96 49",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "39 67\n17 61\n45 94\n24 43\n36 91\n83 94",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 16\n25 95\n93 56\n26 30\n86 76\n44 43",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 12\n57 55\n71 15\n27 23\n62 27\n30 96",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "10 45\n9 76\n26 71\n78 93\n56 96\n10 77",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "263 370\n357 289\n402 315\n200 367\n395 354\n314 61",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "352 304\n205 408\n366 111\n307 236\n311 243\n324 213",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "451 244\n344 82\n185 181\n350 280\n222 316\n131 455",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "452 312\n292 337\n125 60\n366 394\n394 121\n256 87",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "295 243\n500 73\n492 92\n298 65\n124 163\n224 319",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "415 407\n86 284\n237 204\n457 490\n86 487\n390 323",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "277 480\n137 414\n120 172\n172 499\n227 136\n288 494",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n999 1000\n2 1000\n1 1\n1 1000\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n2 2\n2 1\n999 999\n999 1000\n999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}