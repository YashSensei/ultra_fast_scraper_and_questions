{
  "problem_code": "problems",
  "title": "M&M Game",
  "tags": [],
  "text": "EnglishVietnameseLittle John is playing very funny game with his younger brother. There  is\r\none big box filled with M&Ms of different colors. At first John has\r\nto eat several M&Ms of the same color. Then his opponent has to make a turn.\r\nAnd so on. Please note that each player has to eat at least one M&M\r\nduring his turn. If John (or his brother) will eat the last M&M from the\r\nbox he will be considered as a loser and he will have to buy a new candy box.Both of players are using optimal game strategy. John starts first always.\r\nYou will be given information about M&Ms and your task is to determine a\r\nwinner of such a beautiful game.InputThe first line of input will contain a single integer T – the number of\r\ntest cases. Next T pairs of lines will describe tests in a following format.\r\nThe first line of each test will contain an integer N –\r\nthe number of different M&M colors in a box. Next line will contain N integers Ai,\r\nseparated by spaces – number of M&Ms of i-th color.Constraints1 ≤ T ≤ 474,1 ≤ N ≤ 47,1 ≤ Ai ≤ 4747OutputOutput T lines each of them containing information about game winner.\r\nPrint “John” if John will win the game or “Brother” in other case.SampleInput:2\r\n3\r\n3 5 1\r\n1\r\n1Output:John\r\nBrother",
  "sample_input": "Input:2\r\n3\r\n3 5 1\r\n1\r\n1Output:John\r\nBrother",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MMMGAME",
  "scraped_at": "2025-08-17 00:33:37",
  "test_cases": [
    {
      "input": "2\r\n3\r\n3 5 1\r\n1\r\n1",
      "expected_output": "John\r\nBrother",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n1\n6\n2",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n5\n4\n5",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n8\n3\n1",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "9\n8751273\n75358191\n12889038\n47215072\n74666520\n99534135\n74282692\n28956580\n24589629",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n62169910\n6283717\n32780518\n48594553\n69964736\n50674697\n85142564\n18522177\n20226353\n83441835\n68266860\n25991830",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n98314204\n8764420\n86720720\n35103620\n38506261\n21167816",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n90881991\n79943762\n87389493\n38764768\n64589036\n35160563\n93741801\n43463108\n34805892\n9419669\n69125248\n68963139\n56771137\n43878331\n22795604\n97695678\n49472834",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n99143977\n55483309\n20245148\n15468429\n51880028\n614464\n49991987\n40411793\n74127912\n54598305\n17097471\n50948574\n69216931",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "29\n52763\n45113\n48830\n81913\n31806\n10704\n91402\n59902\n31619\n14193\n55811\n37065\n91286\n19883\n51811\n22257\n19663\n83513\n10026\n31265\n51401\n36172\n61342\n74201\n13538\n3702\n39406\n10460\n80826",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n18237\n36833\n12266\n58413\n70417\n50455\n17479\n67133\n60300\n92858\n51970\n28530\n95645\n10853\n37717\n35735\n29891\n48486\n63611\n40806\n2776\n94880\n28254\n82230\n82459\n63457\n50638\n83554\n8278\n70919\n42145\n8053",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n49699\n54575\n42570\n76150\n89339\n79312\n57291\n8778\n91241\n81425\n7527\n24276\n86125\n80224\n9516\n45475\n96803\n45816\n39792\n86066\n21059\n78412\n35069\n66707\n21676\n61280\n13292\n52202",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n3775\n41996\n74892\n1537\n54879\n64068\n18444\n16797\n71867\n91886\n13744\n48203\n34726\n50574\n10148\n62988\n35223\n54551\n52052\n73228\n18418\n18967\n52396\n84244",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n10662\n81621\n21332\n73590\n55394\n85267\n77708\n89429\n49429\n76547\n5009\n22561\n70118\n31323\n37190\n26528\n23180\n30047\n62380\n67660\n63664\n54684",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n32582\n12940\n70163\n11311\n84140\n98220\n10692\n19741\n98760\n5386\n6800\n90702\n14957\n10386\n62678\n91464\n11343\n31453\n56442\n65229\n69802\n14876\n82193\n19968\n98393\n38337\n85851\n71273\n56423\n69124\n59779\n91093\n17595\n2842\n51775",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n77698\n50859\n97738\n25535\n38929\n19547\n18126\n29409\n82831\n52979\n62631\n38558\n68173\n1884\n96259\n55363\n73954\n68440\n17959\n5103\n61915\n15506\n26745\n11319\n76215\n55793\n37395\n46709\n16518\n24720\n46805\n26693\n71669\n45393\n48309\n12115\n10961",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "47\n50950043\n43795286\n7963239\n90585491\n9483478\n55833152\n94058246\n86272982\n79181453\n64651013\n91918597\n4720124\n73251501\n57038137\n23737956\n58722030\n87088039\n96508577\n46383451\n54637052\n59494175\n20848143\n73460468\n75234818\n41432210\n79932808\n94162098\n46069318\n69889742\n83228032\n67226309\n44938988\n87225193\n2593434\n81855546\n62319501\n96696718\n59257579\n6942330\n42925458\n72385112\n68489063\n1029222\n57723355\n14105190\n36034723\n66787586",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 47)"
    },
    {
      "input": "47\n82014253\n4929454\n99535882\n13741292\n68900343\n69591484\n78757456\n29227219\n88804299\n10094779\n39757622\n13852460\n39096730\n23545221\n96004021\n52309054\n51246087\n56669167\n22460649\n46667527\n91592318\n69906070\n37619090\n86497300\n26716878\n23000143\n14791343\n55369547\n54696322\n61860992\n42146609\n38419984\n19461162\n18728270\n26915834\n5822127\n90452625\n54160105\n51091532\n37410557\n59476854\n21240496\n57213678\n6007937\n4123127\n39758538\n11778654",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 47)"
    },
    {
      "input": "47\n100000000\n100000000\n1\n1\n100000000\n1\n1\n27495355\n65393421\n1\n100000000\n1\n100000000\n29710261\n38398766\n1\n14078711\n100000000\n1\n46665668\n1\n1\n100000000\n97367531\n1\n100000000\n10070311\n1\n77019752\n100000000\n1\n1\n1083476\n100000000\n1\n100000000\n82221977\n1\n1\n1\n100000000\n76295752\n100000000\n26659012\n100000000\n86395281\n60982831",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 47)"
    },
    {
      "input": "1\n9446899",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:03"
}