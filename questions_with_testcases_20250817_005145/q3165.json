{
  "problem_code": "problems",
  "title": "Increasing Subsequences",
  "tags": [],
  "text": "A sequencep(1),p(2), ...,p(N)consisting of numbers 1, 2, ...,Nis called a permutation if all elements in the sequence are different.It is said that a permutationpcontains increasing subsequence ofkelements when there are numbers \r\n1 ≤i1<i2< ... <ik≤ N such thatp(i1)<p(i2)< ... <p(ik).When a permutationpcontains an increasing subsequence consisting ofBelements and does not contain an increasing subsequence consisting ofB+1elements then the numberBis called the degree of increase of this permutation.You need to write a program which being given a numberNcalculates the number of permutations whose degree of increase isB.\r\nSince the number of such permutations might be quite big, it is necessary to calculate its remainder of integer division by 1 000 000 000.InputFirst line of input contains integerT(1 ≤T≤ 60) - the number of testcases. Then descriptions ofTtestcases follow.The description of the testcase consists of one line. The line contains two integer numbersNandB(1 ≤N≤ 40, 1 ≤B≤ 5)\r\nseparated by one or more spaces.OutputFor each testcase in the input your program should output one line. This line should contain one integer number which is the remainder of integer division by 1 000 000 000 of the number of permutations whose degree of increase isB.ExampleInput:1\r\n3 2Output:4",
  "sample_input": "Input:1\r\n3 2Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INCR",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "1\r\n3 2",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n5\n7\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n2\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "18\n32152902\n93128490\n23929664\n69006288\n35953670\n24895632\n32871381\n93394719\n97454030\n14726974\n92705414\n26300698\n29595518\n59810193\n8998035\n39440398\n42930699\n37361199",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n27210836\n25091961\n48804959\n72574350\n52852711\n11097121\n42298521\n18538973\n75455375\n25451535",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n29841558\n84213610\n47073174\n80190598\n76991749\n81715709\n13887875\n58289525\n86741\n92476252\n71949836\n27520714\n49805448\n94482266\n62800889\n7052716\n36161339\n9434119",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n44951919\n46810872\n56260198\n7136857\n9254380\n494304\n33198192\n69890001\n43737525\n78677118\n13232316",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n53421724\n86842362\n74688784\n54959387\n16399441\n3919669",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "29\n7912\n84382\n80492\n81129\n14467\n23727\n2067\n87284\n81272\n69493\n25059\n25433\n4360\n66738\n29208\n49299\n92025\n69044\n48207\n26960\n79740\n84817\n87308\n85193\n75940\n38793\n21089\n53017\n3036",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n22758\n39979\n49313\n35209\n22026\n81526\n89021\n80883\n33976\n6831\n44439\n10055\n1490\n5682\n80676\n19063\n66013\n86884\n90786\n28674\n46316\n77313\n2917\n89563\n98474\n74871\n50102\n41540\n87649\n13091\n58976\n28489",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n32755\n68844\n62030\n87449\n64512\n26434\n14366\n43323\n1291\n21831\n86153\n97374\n64206\n77627\n60626\n58352\n32037\n76266\n8370\n27760\n69348\n55892\n92333\n30095\n34834\n79699\n47022\n80795\n81008\n15340\n38807\n11030\n69152",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n35495\n2510\n45664\n47651\n60943\n31349\n79652\n1321\n14676\n72410\n90406\n24478\n36591\n60850\n4540\n15503\n27013\n51248\n76152\n11933\n22128\n25241\n87401\n14268\n284\n57535\n96429\n35557\n34554\n7134\n39723\n865\n61207\n99277",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n88394\n59367\n15779\n83312\n54183\n70506\n9681\n21847\n77560\n21601\n52421\n33479\n88661\n12410\n41437\n90656\n95861\n39624\n22341\n79350\n13730\n2413\n86728\n39494\n30877\n43944\n73739\n51718\n37125\n34240\n33813",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n66648\n24929\n9887\n62472\n15663\n26663\n99759\n32217\n39198\n13469\n81596\n67193\n4687\n73051\n35223\n49942\n18640\n37688\n61469\n12981\n34700\n32313\n98645\n20947\n8453\n34419\n39520\n22524\n25066\n29347\n74756",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n13379\n11174\n35955\n25167\n1069\n93156\n13988\n89396\n65899\n79893\n32876\n90016\n60204\n11799\n7543\n64811\n85323\n28957\n6088\n52142\n21486\n713\n10498\n41801\n96929\n71823\n43731\n46576\n8809\n5652\n19623\n27752\n98283\n41630\n31282\n82356\n91031",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "40\n81207971\n59853038\n64831667\n19628936\n87122136\n86565741\n40616314\n8976156\n7032663\n60215639\n96413869\n77582950\n50834652\n54948015\n35003584\n41072176\n69334720\n61082432\n40550921\n79981428\n16889173\n64276793\n20831676\n80033156\n55931381\n51120904\n66065787\n7205114\n43769800\n80982612\n22156618\n46107585\n73240694\n95410267\n43457048\n18894530\n92491108\n32804810\n93732179\n49435010",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 40)"
    },
    {
      "input": "40\n54181759\n39328976\n55553010\n13684426\n33020915\n3949898\n72426984\n38241347\n33840246\n14301686\n94194343\n92890072\n16912417\n17212025\n40821631\n57552012\n36315479\n23912210\n41523363\n94961050\n68853808\n95030199\n33535677\n54291358\n83767629\n29569955\n32959669\n5868734\n56698341\n23017584\n13757188\n84389437\n60429812\n65115013\n43607571\n98650619\n73300472\n68181569\n80365976\n7880274",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 40)"
    },
    {
      "input": "2\n85073410\n50916188",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}