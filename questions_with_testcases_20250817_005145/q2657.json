{
  "problem_code": "problems",
  "title": "Divide and Conquer",
  "tags": [],
  "text": "Anne and Brenda found some cookies scattered on the lattice points in the 2D coordinate system. They agreed to divide them in the following manner.First, Anne draws a vertical line (that is, a line with the equation x = c, for any real number c) somewhere in the plane. Then Brenda draws a horizontal line (y = d) somewhere in the plane. Now they have divided the plane in four quadrants.Anne gets all the cookies lying in the upper right and the lower left quadrant, and Brenda gets all the cookies lying in the upper left and the lower right quadrant. Cookies which lie on the vertical or the horizontal line are ignored.Anne's goal is to maximize the number of cookies she gets, knowing that Brenda plays optimally (in order to maximize her number of cookies).InputIn the first line of input there is an integer T (1 ≤ T ≤ 600), the number of test cases.Each test case starts with an integer N (1 ≤ N ≤ 1000), the number of cookies. In the next N lines there are coordinates (Xi, Yi) of the cookies, integers in the interval [1, 1000]. There can be multiple cookies at the same point.OutputFor each of the T cases, output in a separate line the maximal number of cookies Anne can surely get.ExampleInput:251 14 14 55 13 3117 107 117 107 116 65 54 81 51 61 47 1Output:25",
  "sample_input": "Input:251 14 14 55 13 3117 107 117 107 116 65 54 81 51 61 47 1Output:25",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DIVCON",
  "scraped_at": "2025-08-17 00:34:08",
  "test_cases": [
    {
      "input": "251 14 14 55 13 3117 107 117 107 116 65 54 81 51 61 47 1",
      "expected_output": "25",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3 5 7 7 2 8 2 8 1 1 4 8 1 3 9 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 6 5 8 8 6 3 1 4 8 3 8 8 9 6 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 10 4 4 5 8 6 8 10 9 9 6 4 9 5 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "39 85 71 43 63 4 74 38 2 23 32 5 29 91 99 10 48",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 26 96 18 93 7 17 18 44 25 1 100 79 78 98 29 9",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 95 17 43 91 23 98 41 6 76 94 96 68 5 33 33 36",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "51 75 80 86 12 69 17 77 96 36 57 13 93 59 81 62 31",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "12 5 15 42 59 28 99 31 32 66 80 84 94 18 59 93 80",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "70 194 144 98 427 365 479 209 496 456 310 291 101 373 192 170 271",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "181 407 198 276 489 331 497 296 171 260 212 175 386 316 401 417 123",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "272 405 161 229 332 178 291 222 102 486 252 228 156 438 84 160 74",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "184 238 70 208 364 328 389 242 110 475 88 320 397 143 55 56 78",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "56 240 291 181 132 56 69 337 441 387 132 133 335 249 477 457 425",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "356 479 232 320 264 420 242 173 485 66 309 366 160 160 307 244 253",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "94 272 470 230 434 451 344 121 68 498 434 52 225 443 494 138 381",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1000 999 2 1 999 1 1 999 1000 999 1000 1 1 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 2 1 999 2 999 1 1000 999 999 1000 1 1000 999 999 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:42"
}