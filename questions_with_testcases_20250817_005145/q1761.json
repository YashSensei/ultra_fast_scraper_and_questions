{
  "problem_code": "problems",
  "title": "Estimation",
  "tags": [],
  "text": "“There are too many numbers here!” your boss bellows. “How am I supposed to make sense of all of this? Pare it down! Estimate!” You are disappointed. It took a lot of work to generate those numbers. But, you’ll do what your boss asks. You decide to estimate in the following way: You have an array A of numbers. You will partition it into k contiguous sections, which won’t necessarily be of the same size. Then, you’ll use a single number to estimate an entire section. In other words, for your array A of size n, you want to create another array B of size n, which has k contiguous sections. If i and j are in the same section, then B[i]=B[j]. You want to minimize the error, expressed as the sum of the absolute values of the differences (∑|A[i]-B[i]|).InputThere will be several test cases in the input. Each test case will begin with two integers on a line, n (1 ≤ n ≤ 2,000) and k (1 ≤ k ≤ 25, k ≤ n), where n is the size of the array, and k is the number of contiguous sections to use in estimation. The array A will be on the next n lines, one integer per line. Each integer element of A will be in the range from -10,000 to 10,000, inclusive. The input will end with a line with two 0s.OutputFor each test case, output a single integer on its own line, which is the minimum error you can achieve. Output no extra spaces, and do not separate answers with blank lines. All possible inputs yield answers which will fit in a signed 64-bit integer.ExampleInput:7 2\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n7\r\n0 0Output:9",
  "sample_input": "Input:7 2\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n7\r\n0 0Output:9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EST",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "7 2\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n7\r\n0 0",
      "expected_output": "9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 2\n1\n1\n1\n2\n1\n2\n1\n1 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n2\n2\n1\n1\n1\n1\n1\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n1\n2\n2\n2\n2\n1\n2\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n1\n2\n1\n1\n1\n2\n1\n1 2",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 1\n2\n1\n2\n2\n1\n2\n2\n2 2",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1\n1\n2\n2\n2\n1\n2\n1\n2 2",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 1\n1\n1\n1\n1\n1\n1\n2\n2 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 2\n1\n2\n1\n2\n1\n2\n2\n2 2",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n1\n1\n1\n1\n1\n1\n1\n1 1",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "2 2\n2\n2\n2\n2\n2\n2\n2\n2 2",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n2\n2\n2\n2\n2\n2\n2\n2 2",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n2\n2\n1\n2\n1\n1\n1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n2\n1\n1\n2\n1\n2\n1\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}