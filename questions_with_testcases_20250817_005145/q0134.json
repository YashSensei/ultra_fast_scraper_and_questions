{
  "problem_code": "problems",
  "title": "Array Sorting",
  "tags": [],
  "text": "Sumit specialises in sorting algorithms, and Abhishek decides to test Sumit's coding skills. An array of 'n' numbers a[0], a[1], a[2] ... a[n-1] is given. Abhishek gives a sequence of inputs of the form \"v i j\". Each input is either a query or an update (query if 'v' is 0, update otherwise).For any input of the form \"0 i j\", Sumit's output should be as follows:If the subarray a[i], a[i+1] ... a[j] is unsorted, output 0.If the subarray a[i], a[i+1] ... a[j] is sorted in non-descending order, output 1.If the subarray a[i], a[i+1] ... a[j] is sorted in non-ascending order, output 2.If the subarray a[i], a[i+1] ... a[j] is sorted in both non-ascending and non-descending order (i.e., if all the elements in the range are equal), output 3.Any other input \"v i j\" (v ≠ 0) should be treated as an update, as follows:For each element in the subarray a[i], a[i+1] ... a[j], Sumit has to replace the element a[k] with v-a[k].Sumit is really tired and does not want to write a program. Can you write a program for Sumit, which responds to Abhishek's instructions?InputThe first line of input contains 2 space separated integers 'n' and 'q'. The second line contains 'n' integers a[0], a[1] ... a[n-1]. Each of the next 'q' lines contain 3 integers 'v', 'i', 'j'.OutputFor each query, output a single integer 0, 1, 2 or 3, denoting the answer.ExampleInput:4 5\r\n3 -2 -5 1\r\n1 1 3\r\n0 0 3\r\n0 0 2\r\n0 2 3\r\n0 0 1Output:0\r\n1\r\n2\r\n3Constraints1 ≤ n ≤ 1000001 ≤ q ≤ 100000-5000 ≤ a[i] ≤ 5000-5000 ≤ v ≤ 5000ExplanationInitial array is {3, -2, -5, 1}. After first update, the array will be {3, 3, 6, 0}. Now, from indices '0' to '3', it is unsorted. From indices '0' to '2', it is sorted in non-descending order. From indices '2' to '3', it is sorted in non-ascending order. Between indices '0' and '1', the values are equal.",
  "sample_input": "Input:4 5\r\n3 -2 -5 1\r\n1 1 3\r\n0 0 3\r\n0 0 2\r\n0 2 3\r\n0 0 1Output:0\r\n1\r\n2\r\n3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BTCODE_K",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 5\r\n3 -2 -5 1\r\n1 1 3\r\n0 0 3\r\n0 0 2\r\n0 2 3\r\n0 0 1",
      "expected_output": "0\r\n1\r\n2\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 9\n8 3 2 3\n3 6 9\n3 8 1\n3 5 10\n4 9 1\n3 1 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9\n6 4 10 9\n6 9 1\n4 10 8\n10 8 2\n4 2 7\n2 10 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n7 10 3 9\n2 3 1\n6 3 7\n3 8 8\n4 9 9\n2 3 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "81 22\n57 76 57 87\n49 26 81\n52 32 65\n55 93 84\n59 21 12\n53 75 58",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 8\n11 44 15 66\n22 60 1\n81 94 77\n65 78 76\n87 100 2\n66 88 70",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "45 58\n11 54 32 55\n50 1 53\n69 3 69\n85 3 53\n32 51 3\n87 87 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 91\n74 91 99 89\n7 6 73\n57 23 23\n46 92 92\n28 80 73\n6 59 14",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 80\n65 33 60 35\n13 14 78\n39 40 43\n58 66 30\n76 7 45\n96 8 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "142022 286387\n178219 164346 393465 138733\n493409 195216 76143\n334084 497674 477864\n173338 308063 492988\n237193 220866 225869\n324048 241626 193143",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "266713 176923\n59928 461187 313628 386638\n162883 318726 154746\n179475 475291 270183\n116169 419744 358821\n495240 388824 114548\n222339 52995 81324",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "141058 98818\n479493 499353 412472 192656\n488256 260128 80967\n253780 415866 202892\n314070 477601 285192\n292357 238461 113371\n166940 352930 388008",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "275961 145205\n368057 131387 306663 53209\n477501 292173 57394\n316925 270083 346930\n161927 479153 59235\n265634 495048 162139\n483273 170274 424459",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "69795 131370\n450057 158620 155349 304125\n348292 207036 288383\n457467 108368 120301\n372941 146608 403794\n163485 447633 214027\n301602 411523 367223",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "71124 444009\n409614 280986 199354 409730\n134630 258083 480924\n259998 176559 449047\n344108 239578 389257\n171064 438033 148625\n161570 307075 186035",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "245232 71977\n274982 347406 414067 376132\n365320 284197 147097\n291224 351098 227479\n366428 55139 165085\n423857 183951 294251\n64285 129325 317012",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999999\n1000000 1000000 1 999999\n2 1000000 1\n1000000 999999 999999\n1 999999 1\n1000000 1 999999\n1000000 1000000 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 1\n2 2 1 999999\n2 1000000 999999\n1 2 1\n1000000 1000000 1\n1 2 1000000\n2 2 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:24"
}