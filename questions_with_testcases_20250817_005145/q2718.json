{
  "problem_code": "problems",
  "title": "The Cow Gathering",
  "tags": [],
  "text": "Cows have assembled from around the world for a massive gathering. There areNcows, andN−1pairs of cows who are friends with each other. Every cow knows every other cow through some chain of friendships.They had great fun, but the time has come for them to leave, one by one. They want to leave in some order such that as long as there are still at least two cows left, every remaining cow has a remaining friend. Furthermore, due to issues with luggage storage, there areMpairs of cows(ai,bi)such that cowaimust leave before cowbi. Note that the cowsaiandbimay or may not be friends.Help the cows figure out, for each cow, whether she could be the last cow to leave. It may be that there is no way for the cows to leave satisfying the above constraints.InputLine1contains two space-separated integersNandM.Lines2 ≤ i ≤ Neach contain two integersxiandyiwith1 ≤ xi, yi≤ Nandxi≠ yiindicating that cowsxiandyiare friends.LinesN+1 ≤ i ≤ N+Meach contain two integersaiandbiwith1 ≤ ai, bi≤ Nandai≠ biindicating that cowaimust leave the gathering before cowbi.It is guaranteed that1 ≤ N, M ≤ 105.OutputThe output should consist ofNlines, with one integerdion each line such thatdi= 1if cow i could be the last to leave, anddi= 0otherwise.ExampleInput:5 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 4Output:0\r\n0\r\n1\r\n1\r\n1",
  "sample_input": "Input:5 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 4Output:0\r\n0\r\n1\r\n1\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COWGATH",
  "scraped_at": "2025-08-17 00:34:09",
  "test_cases": [
    {
      "input": "5 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 4",
      "expected_output": "0\r\n0\r\n1\r\n1\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2\n5 7\n9 9\n8 9\n1 4\n7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 7\n10 6\n2 2\n1 9\n5 1\n5 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n1 8\n2 10\n8 5\n1 6\n10 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 64\n86 79\n32 33\n38 31\n63 61\n5 83",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 80\n77 14\n56 82\n25 79\n100 14\n4 67",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 72\n64 40\n62 44\n20 19\n45 65\n99 28",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 52\n52 87\n51 25\n73 14\n39 26\n42 52",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 41\n34 73\n41 89\n31 47\n31 36\n84 20",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "56 136\n369 165\n66 189\n243 144\n206 331\n361 242",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "463 223\n261 395\n188 189\n286 100\n205 422\n439 422",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "407 99\n326 498\n408 395\n126 256\n291 365\n210 365",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "191 115\n409 80\n414 390\n474 96\n481 50\n60 404",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "445 68\n90 299\n445 438\n379 496\n427 260\n278 376",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "426 297\n332 135\n372 488\n137 147\n55 278\n132 266",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "74 459\n435 133\n271 65\n237 274\n130 110\n351 155",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n1000 999\n2 1000\n999 2\n1 999\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n999 999\n1000 999\n2 1\n999 1000\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}