{
  "problem_code": "problems",
  "title": "GENIJALAC",
  "tags": [],
  "text": "Mirko is a genius. But the purpose of his inventions is not always obvious. His latest invention, the Shuffle-o-matic 3175, is one of those. The Shuffle-o-matic is used in a very special way. First Mirko places N paper cards, with numbers 1 to N printed on them, on the Shuffle-o-matic working surface. Then he inputs the shuffle sequence in the special input console and hits the go button. The machine than reads the paper cards and outputs the read sequence of numbers on its output tape. It than shuffles the cards according to the shuffle sequence. After that it reads the newly obtained sequence and writes it onto a new line on its output tape. Then it proceeds to shuffle the cards again according to the same shuffle sequence, scans and writes the output to the tape. The machine does this until it runs out of tape.After experimenting with the machine Mirko decided to rest a bit on the floor. There he noticed a piece of output tape. The piece is neatly cut just before the A-th output row and just after the B-th output row. It is also missing the first C number and the last D numbers in all rows.He now wonders how many rows on that piece of paper have the property that all numbers in the row, that are still on the paper, are in the exact same spot they were before all the shuffling began.InputThe first line of input contains integers N, A, B, C and D in that order(1 ≤ N ≤ 500 000, A ≤ B ≤ 1012, 0 ≤ C, D ≤ N, C + D < N).The second line contains the shuffle sequence. The sequence is given as a permutation of numbers 1 to N. If the k-th number in the shuffle sequence is x, after each shuffle the k-th element in the resulting sequence is the x-th element in the previous sequence.OutputIn the first and only line of input print the number of rows that have the property Mirko is looking for.ExampleInput:4 1 5 0 1\r\n1 3 4 2Output:2",
  "sample_input": "Input:4 1 5 0 1\r\n1 3 4 2Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IWGBST",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 1 5 0 1\r\n1 3 4 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 4 4 2 9\n5 3 7 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 8 5 5 6\n6 2 8 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 6 10 2\n7 2 7 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "63 66 19 23 88\n12 57 80 4",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "95 33 65 13 69\n66 19 6 49",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 100 39 52 97\n76 32 28 49",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "64 46 37 77 80\n56 72 50 37",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 27 62 30 48\n32 18 7 64",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "69730 25255 177474 72536 149283\n209548 170513 162384 108005",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "31680 218376 168300 237820 121273\n223480 46068 127070 210852",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "177244 94736 215083 128034 227128\n41242 180847 118854 74031",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "37529 140055 119077 214392 208613\n200353 80274 164363 198195",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "61408 65573 218062 131510 47381\n66490 151805 181287 79612",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "215305 230289 27799 237331 226420\n203957 241809 76336 149886",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "72464 193584 219281 114327 42325\n138255 98086 192207 82865",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500000 500000 500000 500000 500000\n500000 500000 500000 500000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500000 500000 500000 500000 500000\n500000 500000 500000 500000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "499999 500000 500000 500000 2\n500000 499999 1 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 500000 2 1 1\n2 500000 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:43"
}