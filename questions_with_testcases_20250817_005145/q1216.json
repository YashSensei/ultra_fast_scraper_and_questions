{
  "problem_code": "problems",
  "title": "Boiling Vegetables",
  "tags": [],
  "text": "The trick to boiling vegetables is to make sure all pieces are about the same size. If they are not, the small ones get too soft or the large ones get undercooked (or both). Fortunately, you have heard of the kitchen knife, but your parents’ warnings of using sharp instruments still echoes in your head. Therefore you better use it as little as possible. You can take a piece of a vegetable of weight w and cut it arbitrarily in two pieces of weight wleftand wright, where wleft+ wright= w. This operation constitutes a “cut”. Given a set of pieces of vegetables, determine the minimum number of cuts needed to make the ratio between the smallest and the largest resulting piece go above a given threshold.InputThe input starts with a ﬂoating point number T with 2 decimal digits, 0.5 < T < 1, and a positive integer N≤1 000. Next follow N positive integer weights w1, w2, ..., wN. All weights are less than 106.OutputOutput the minimum number of cuts needed to make the ratio between the resulting minimum weight piece and the resulting maximum weight piece be above T. You may assume that the number of cuts needed is less than 500.To avoid issues with ﬂoating point numbers, you can assume that the optimal answer for ratio T is the same as for ratio T + 0.0001.ExampleInput 1:0.99 3\r\n2000 3000 4000Output 1:6Input 2:0.80 2\r\n1000 1400Output 2:3",
  "sample_input": "Input 1:0.99 3\r\n2000 3000 4000Output 1:6",
  "sample_output": "Input 2:0.80 2\r\n1000 1400Output 2:3",
  "link": "https://www.spoj.com/problems/BOILING",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "Input 1:0.99 3\r\n2000 3000 4000Output 1:6",
      "expected_output": "Input 2:0.80 2\r\n1000 1400Output 2:3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 4 2\nrnrto hlfxp 7\n6 5 8 9 10\n5 8 ayzapt ly",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 2 4\nuve emngvg 7\n3 9 10 8 2\n3 1 xeld jf",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4 4\nxjpxd td 3\n6 2 2 2 5\n10 10 i sfar",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "64 100 6\nyeshe s 31\n73 3 66 7 5\n25 91 nve b",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "97 74 35\nukdm omvo 56\n14 47 70 97 17\n96 47 m jtm",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 76 9\nojuwq v 27\n33 49 3 5 13\n63 3 wokcfk kh",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 97 68\noom kse 64\n94 14 6 4 31\n39 11 wpwgtgwe ycuvh",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "10 57 10\nxx ukbt 88\n92 19 86 36 3\n71 2 nbvlrk dvv",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "498 167 181\nkxd ga 316\n316 419 117 399 481\n390 420 vuuzrfyh dhsp",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "57 351 57\nmf t 109\n124 160 208 127 228\n431 249 bkeckh pwa",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "172 257 446\nzrr rhoq 267\n309 138 183 52 346\n375 105 j nxnjh",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "258 351 406\nljzm feboat 359\n399 294 406 408 142\n316 179 ofjzlvps q",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "303 101 280\npbpcz ils 359\n263 211 115 291 119\n76 139 sonucetzyn gabso",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "184 139 285\nd gsrcvc 163\n269 491 174 246 467\n349 187 zhs q",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "335 93 99\ndeh ckxe 410\n189 455 139 273 362\n301 338 ud ifhxk",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nuwi zjoj 1000\n1000 1000 1000 1000 1000\n1000 1000 fenw x",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nwlpi qut 1000\n1000 1000 1000 1000 1000\n1000 1000 tzlcwysuqs m",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 2\nwxvdu exvhyx 2\n999 1 2 2 1000\n1 2 ymdb n",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 2\nfoyr ta 2\n2 1000 1 1000 999\n2 2 lqziawaeqp jbpdu",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:57"
}