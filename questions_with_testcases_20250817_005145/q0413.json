{
  "problem_code": "problems",
  "title": "Anti Hash II",
  "tags": [],
  "text": "Given a baseBand a moduloM, the polynomial hash of a stringSconsisting of only lowercase letters is defined as below.LetS = S0S1…SN-1be a string of lengthNcontaining only the lowercase letters (a-z).Hash(S) = ∑ BN-i-1× D(Si) % MD(S)= Lexicographical position of characterSamong the lettersa-z, indexed from0.D(a) = 0, D(b) = 1 ... D(z) = 25.In other words, first the letters of the string are replaced by numbers (equivalent to their position). This is then considered to be a number in baseB, and the value of this number inbase 10moduloMis called the polynomial hash of the string.Calculating the hash of a string using the above method seems easy enough. What about the opposite? You are given a baseB, a moduloM, a positive integer N, and a hash valueH. Calculate how many strings are there such that their hash is equal toH, consisting of only lowercase letters and their length not exceedingN. Since the answer can be rather huge, output it modulo109+ 7 (1000000007).InputThe first line contains an integerT, denoting the number of test cases. Each test case starts with four integersB, M, N,  Q. The numbersB, M, Ndenotes the base, modulus and the maximum length of any string as stated above. The numberQindicates the number of queries. Each of the nextQlines contain a single integer, denotingH, the required hash value.Constraints1 ≤ T ≤ 15026 ≤ B ≤ 300001 ≤ M, N ≤ 300001 ≤ Q ≤ 3000 ≤ H < MFor 95% of the test cases, B, M, N ≤ 300OutputFor each case, first output a line of the formatCase X:, whereXis the case number, starting from1. And then, for each query, output the number of different strings with the given hash value modulo109+ 7 (1000000007)in a single line.Print a blank line after every test case.ExampleInput:3\r\n26 97 2 3\r\n0\r\n1\r\n96\r\n147 147 147 3\r\n0\r\n10\r\n100\r\n100 110 120 1\r\n35Output:Case 1:\r\n8\r\n8\r\n6\r\n\r\nCase 2:\r\n944164777\r\n944164777\r\n0\r\n\r\nCase 3:\r\n110169522ChallengeYou might also enjoy:Anti HashorThe Revenge Of Anti Hash.",
  "sample_input": "Input:3\r\n26 97 2 3\r\n0\r\n1\r\n96\r\n147 147 147 3\r\n0\r\n10\r\n100\r\n100 110 120 1\r\n35Output:Case 1:\r\n8\r\n8\r\n6\r\n\r\nCase 2:\r\n944164777\r\n944164777\r\n0\r\n\r\nCase 3:\r\n110169522",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AHASH2",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "3\r\n26 97 2 3\r\n0\r\n1\r\n96\r\n147 147 147 3\r\n0\r\n10\r\n100\r\n100 110 120 1\r\n35",
      "expected_output": "Case 1:\r\n8\r\n8\r\n6\r\n\r\nCase 2:\r\n944164777\r\n944164777\r\n0\r\n\r\nCase 3:\r\n110169522",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n4\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "12\n26735145\n19043077\n61374777\n48164700\n4802277\n47331140\n43023129\n92031797\n38657756\n61715576\n34068012\n88233682",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n8288523\n85109531\n5604533\n11056119\n76799543\n90873919\n70622941\n58843865\n59581235\n39304417\n97209053\n78789583\n50334162\n20133928\n9842078\n77065891\n70720853\n48246659\n29690021",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n86838685\n94238405\n39341740\n47141354\n59080984\n91555298\n34688076\n19897352\n9719987\n75536113\n20517652\n20124401\n7484792\n38636569\n76157569\n80632165\n49970350\n1508469\n58340111",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n90926968\n58065453\n7778065\n70949506\n43509298\n97910508\n14177192\n67533953",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n44295151\n70387306\n29910015\n17445154\n78496579\n99185842",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "270\n53581\n65491\n21807\n58388\n57933\n23024\n30752\n66229\n99684\n10719\n92956\n95710\n8358\n79480\n96755\n78337\n93329\n64921\n25552\n81028\n51895\n41376\n72318\n38718\n36050\n17573\n82821\n73761\n38047\n4364\n98396\n4491\n2926\n26579\n76605\n63129\n65594\n1988\n64802\n72245\n73901\n2015\n32118\n38236\n80574\n2716\n61146\n12410\n89584\n69631\n76589\n84131\n82397\n88468\n42161\n72660\n26105\n13691\n26531\n31365\n29102\n87628\n10825\n9691\n44922\n17280\n23414\n79050\n74302\n6220\n57767\n3625\n90104\n60322\n49652\n51683\n88558\n15629\n93188\n51135\n3014\n39221\n52341\n64775\n87749\n52467\n46989\n67680\n78672\n63995\n22152\n86264\n43659\n76828\n75861\n31445\n58564\n15809\n64867\n36622\n53904\n36680\n20524\n10254\n12819\n75417\n15502\n3493\n1747\n80946\n48239\n15938\n83381\n82025\n28505\n95277\n58246\n71588\n86493\n88392\n79645\n9814\n80614\n87146\n82355\n15796\n73036\n4472\n60196\n28056\n46115\n14266\n85595\n68188\n41078\n81420\n77736\n12726\n25624\n21778\n69786\n66553\n66135\n72154\n60856\n27974\n81342\n19186\n16611\n62758\n47324\n6282\n37180\n20800\n41854\n14638\n3138\n34695\n52672\n40166\n97145\n20428\n49517\n50595\n77000\n81288\n68754\n21070\n193\n70406\n56462\n36733\n29170\n71212\n989\n5350\n84096\n85741\n79675\n35543\n87015\n35407\n1763\n75867\n16458\n20744\n37892\n735\n70997\n62015\n22590\n74149\n82287\n18850\n8403\n75571\n44462\n8130\n69587\n53357\n97510\n23118\n46291\n8481\n59811\n7457\n61989\n31020\n78049\n91899\n94875\n35563\n59193\n76327\n37470\n57357\n70516\n12467\n46560\n45336\n89664\n30855\n49934\n89209\n79739\n91818\n39230\n56414\n22870\n26680\n49751\n8081\n47985\n85323\n87769\n40960\n30403\n43508\n23144\n47424\n43484\n60287\n85553\n12192\n69025\n60601\n3043\n85330\n93143\n59864\n31007\n40904\n62231\n71949\n17783\n7432\n25135\n66614\n89419\n41278\n52509\n79843\n51717\n43040\n70765\n30140\n95067\n31145\n69126\n29504",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n28832\n85026\n5821\n27276\n22239\n70743\n73267\n84039\n33719\n73405\n49418\n64836\n2244\n53284\n3131\n91475\n57977\n9553\n11371\n10662\n71134\n88467\n60434\n93416\n42092\n76035\n83761\n47823\n59693\n65119\n5980\n26412\n28084\n65385\n37652\n52508\n83295\n9562\n68106\n36486\n34773\n6072\n32786\n41235\n58861\n44730\n81531\n74217\n20445\n9746\n76875\n83236\n14041\n6339\n15301\n28005\n3637\n90812\n35704\n96720\n15656\n60020\n69785\n84769\n31287\n26656\n90154\n99796\n20972\n80366\n75399\n40582\n39122\n68711\n26269\n16548\n56184\n57032\n91283\n47396\n20357\n92017\n46186\n52232\n32901\n54386\n77174\n40663\n49531\n15006",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "86\n62485\n87808\n61119\n58080\n1475\n1059\n87171\n97088\n77413\n28413\n20327\n16654\n65362\n22244\n68274\n39391\n55014\n97374\n56657\n83863\n55279\n3710\n62740\n31335\n19911\n34544\n85196\n49443\n93485\n4283\n29476\n90917\n78499\n20784\n22954\n19984\n1771\n5230\n93693\n14707\n82135\n56470\n85336\n59677\n29072\n28054\n22886\n21002\n15985\n33570\n29139\n11000\n1569\n23223\n25668\n64232\n7323\n46105\n75722\n48329\n50070\n13254\n10182\n76079\n486\n92612\n13622\n77754\n29429\n72422\n82254\n21803\n4492\n44513\n6218\n31741\n1357\n2956\n33458\n30563\n82447\n24238\n56447\n82308\n9671\n48810",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "214\n86145\n22994\n66658\n76286\n361\n5974\n98978\n89652\n76939\n9569\n92044\n10454\n37527\n81879\n8871\n74305\n59321\n80625\n11740\n29347\n79755\n20104\n57045\n79330\n18437\n64963\n73523\n23356\n67230\n7890\n35741\n29040\n64886\n9514\n55886\n30228\n2505\n94593\n36782\n84664\n93788\n85405\n56828\n52219\n5824\n95000\n81336\n33271\n39079\n75110\n96842\n50175\n80459\n95117\n94530\n34807\n40143\n72944\n17977\n36458\n48353\n90466\n73274\n29857\n14073\n19225\n56847\n917\n31975\n91581\n60737\n36901\n39653\n62851\n77978\n80921\n24077\n97475\n93364\n31527\n1862\n129\n14207\n4452\n71377\n91333\n3425\n91608\n18644\n96036\n54361\n69121\n1124\n55924\n77955\n79386\n18524\n89208\n76945\n96532\n74571\n17295\n10736\n29961\n52271\n77309\n15522\n14306\n20785\n47753\n53131\n61829\n34742\n71540\n73562\n57978\n58417\n94155\n32013\n77750\n42289\n44453\n71523\n51743\n18122\n34401\n85730\n93770\n60567\n48645\n45817\n76287\n58923\n95104\n18079\n33009\n42302\n60033\n10456\n48154\n35873\n39975\n25839\n91879\n53947\n7939\n23513\n4207\n9639\n55256\n21557\n51458\n7223\n62380\n66142\n91592\n55316\n3665\n3060\n67733\n93894\n34048\n41486\n3837\n25589\n60028\n38053\n94894\n85589\n65095\n10298\n74564\n97843\n57389\n64503\n93869\n4132\n17917\n7662\n617\n83503\n6215\n37983\n27526\n47910\n89982\n54393\n3301\n241\n32502\n94512\n93290\n50618\n65917\n84460\n8538\n23708\n99049\n92522\n62409\n63565\n53335\n26254\n89747\n75737\n53525\n12559\n71974\n50452\n27744\n85040\n94425\n15387\n65833",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "161\n68242\n2079\n85253\n59793\n73846\n96380\n67866\n10684\n91316\n18723\n70032\n85398\n25019\n64471\n42554\n57756\n13259\n81176\n27413\n3968\n14642\n95358\n76685\n82514\n55929\n52260\n2886\n87875\n97240\n36868\n57364\n54164\n97220\n11072\n9356\n95423\n89482\n42082\n13475\n42070\n39753\n38767\n25906\n77101\n25136\n48227\n38349\n10325\n99683\n81951\n46380\n44460\n89926\n56782\n13367\n86580\n40577\n49769\n85606\n73149\n48541\n14324\n29223\n65584\n79339\n47412\n22875\n826\n18719\n95589\n74120\n29628\n18175\n29422\n87960\n19880\n52543\n9357\n99399\n41608\n24578\n22487\n68633\n89227\n71525\n5750\n54613\n71112\n55038\n6216\n49823\n2740\n10756\n21547\n1551\n55176\n36631\n79052\n22132\n79754\n24660\n71065\n54607\n33151\n19802\n6382\n85397\n11433\n59412\n51665\n49845\n90791\n83305\n93129\n75097\n53913\n65681\n32263\n75850\n85291\n84501\n87840\n55235\n8293\n73040\n34473\n35116\n70143\n96605\n67981\n14365\n89784\n47138\n91420\n25712\n61028\n71233\n56853\n48581\n65144\n7331\n78448\n2773\n55077\n36113\n91857\n6448\n88937\n53887\n606\n16837\n76432\n56451\n55951\n24191\n40046\n47739\n36339\n48733\n60198\n99692",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n75219\n3361\n68374\n85475\n98741\n1686\n96895\n43178\n35368\n74514\n6044\n36178\n20059\n85776\n15550\n65934\n47249\n23692\n9011\n56710\n78141",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "74\n83288\n34023\n49405\n46083\n36314\n65955\n43466\n19005\n17703\n72624\n49574\n85240\n19849\n97435\n90494\n40932\n2326\n36491\n93284\n67248\n41872\n12605\n15353\n38001\n30006\n58629\n69460\n76657\n41271\n97744\n77583\n52138\n76063\n71117\n74545\n84784\n4662\n6368\n1394\n80504\n14983\n44420\n7491\n82700\n87040\n19281\n18926\n56180\n64877\n65596\n91853\n92016\n23263\n65359\n96817\n89656\n8439\n40204\n63305\n56666\n25281\n90517\n30269\n79522\n91740\n76636\n93739\n3430\n8832\n27170\n92549\n7542\n81920\n5300",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "300\n95096339\n43420404\n85243092\n54027401\n30462175\n55120955\n83270698\n65190832\n41451819\n22375654\n9709947\n82947356\n71042981\n45414252\n39512109\n48942189\n27450546\n90550838\n92426780\n3589626\n84057618\n25279892\n2829934\n35033493\n48776667\n43221855\n94466483\n62776901\n92098668\n39155554\n14526051\n98479741\n62101174\n78279196\n94663564\n26925020\n5980052\n5433913\n25291551\n16123392\n34781030\n29178859\n99026649\n4010182\n4172761\n5112674\n83083052\n50911802\n40538089\n19243421\n58714627\n90343124\n98401857\n3799264\n71376221\n136940\n3147883\n90569285\n78157373\n39532547\n84233970\n67805791\n3212598\n74530551\n88792258\n5477186\n10887495\n58105093\n89218075\n89378950\n69235282\n14138000\n17787759\n76145651\n56961864\n11809569\n28353159\n72997343\n26689638\n12407944\n13625525\n5153058\n15587001\n14346340\n6984055\n79416680\n27488302\n23140336\n17250196\n99200627\n31141541\n49525160\n65344636\n24348649\n60326292\n87907690\n38868257\n61545499\n53406290\n62080968\n2038818\n94105923\n42036909\n6394629\n6059607\n35989097\n40543070\n6060266\n44705107\n94110632\n35259876\n7875243\n37260215\n20811936\n71988751\n79308097\n47511273\n60476761\n84904710\n12718710\n56149495\n27609926\n40379206\n61988213\n602171\n92303698\n99550652\n61952895\n32892700\n73404090\n56044207\n99777226\n10098638\n4986091\n58120901\n92938027\n77918474\n39499394\n89605353\n89856397\n66458901\n12341141\n84979219\n2108413\n87306998\n65090214\n15595996\n84111446\n39905673\n82450595\n34819095\n9821880\n75081091\n5975215\n15659744\n226873\n2581241\n18650684\n60369051\n23918268\n88585969\n2890960\n80745435\n15493966\n22008061\n5854125\n9997379\n59390699\n77262083\n91662700\n10707481\n72065883\n92363809\n86168699\n2246025\n32747926\n9175001\n22661926\n68798829\n86098506\n3292417\n3421971\n87571098\n39679204\n98737147\n85538302\n43465559\n3551536\n68313735\n67230933\n43496285\n93366194\n90254467\n3645335\n84214355\n95222479\n38326944\n92301327\n8103384\n81353785\n18283934\n61253426\n65925215\n76136371\n25947221\n44257140\n39235691\n76234751\n97662957\n55593584\n28251941\n56869198\n24650765\n26840749\n57766834\n71377787\n26732686\n37696128\n39495229\n86337310\n9963255\n98899490\n14766886\n6429055\n97032595\n21950489\n79133330\n95839172\n949590\n75254041\n25581567\n78652071\n8358041\n28969361\n33198930\n29861\n13525890\n47252297\n17944716\n83527192\n65568610\n32554658\n34938237\n5040480\n75734490\n77957983\n17353730\n46922213\n95422835\n21675570\n78360749\n81045497\n24473206\n76522019\n18361753\n11943706\n78318207\n80802991\n29640880\n7803678\n92128196\n62630695\n862820\n44278156\n26334724\n68678174\n51543814\n59871768\n70258867\n58846036\n14932236\n60952459\n37820377\n13063873\n92302750\n68501857\n22440506\n39948710\n45292861\n67034191\n10340396\n55622617\n95279722\n84064807\n51473909\n48909106\n41930356\n11054929\n24156596\n69443874\n53929219\n23046745\n38111200\n63657234\n29236572\n50917714\n11908138\n30105026\n59613521\n56100782",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 300)"
    },
    {
      "input": "300\n44416091\n69669523\n64204153\n42474235\n96744921\n30103912\n75795800\n31804603\n41725735\n45318360\n44209032\n97252033\n80573522\n92779819\n25014929\n36918470\n86137493\n5203783\n62214594\n57990011\n83213588\n48753615\n64549939\n37122449\n97945923\n29276477\n18632783\n61243497\n11797522\n93877294\n12353486\n71988436\n80050218\n60905853\n54181525\n52497170\n8545960\n9946181\n93246169\n31669393\n34162049\n99756711\n43932755\n88230063\n18757407\n67015734\n24648235\n4768820\n57593543\n35297567\n26534000\n54374990\n3613247\n96745084\n96328123\n42628033\n60470869\n79026418\n90828736\n90309885\n34141983\n51135247\n14753635\n40183022\n87415346\n62477390\n24939552\n10290970\n52614087\n1027205\n8483682\n18996492\n84534420\n14482325\n71723849\n62141618\n62474386\n71285384\n49854225\n50517817\n81147169\n67907755\n93309528\n42500493\n43044478\n13684788\n84727099\n14625455\n88659196\n99617522\n55113709\n68598390\n91545169\n57806582\n55860026\n36806689\n16382751\n25673391\n8509013\n27363265\n19900253\n25339439\n27969680\n30567739\n26563408\n61952990\n92152532\n6823922\n65874670\n54908757\n53143482\n62523076\n16827941\n80199640\n66056785\n7430553\n91858821\n24489130\n60776456\n96422408\n83891876\n49117432\n27376997\n71090325\n65717196\n7904528\n44265081\n52824071\n12864502\n62911294\n42558636\n33627879\n44420070\n50562559\n41510238\n55054005\n35343974\n12077839\n45531102\n34104498\n67203013\n88041796\n4612390\n8068861\n48461854\n24290896\n71592672\n7984506\n74417821\n11485436\n84145451\n15458861\n1761120\n96279281\n10904902\n83955544\n76358259\n56712438\n22670010\n685112\n25780453\n78746143\n2553641\n26103082\n8982942\n17996240\n17963966\n92039806\n97524379\n6534783\n72577349\n11654628\n63533582\n52501842\n24031008\n46773729\n50344657\n40346510\n90444683\n83118671\n89704238\n35456926\n50361079\n37605810\n78052191\n92765241\n64646822\n46577417\n52201289\n77366008\n4561562\n33235064\n46987956\n49402386\n87018224\n41342955\n6067690\n40653431\n36069360\n56955375\n88827808\n16041162\n23660846\n36134893\n8878436\n10164647\n67396102\n39954108\n60438320\n82139701\n23778689\n41809695\n69265078\n81184644\n92414236\n69196860\n72251279\n63333391\n15522276\n87088118\n24964081\n986918\n18327430\n29314889\n15394498\n9609689\n88299980\n30077296\n74435877\n96874040\n21060231\n40181743\n28693464\n43319522\n59154227\n45326440\n13437647\n19180203\n29039719\n19348183\n11709218\n45044562\n51584460\n20950951\n21740293\n69225923\n9693115\n4157488\n69640675\n60793564\n2613379\n94793978\n51583305\n60052821\n91395714\n4988518\n63406563\n96518839\n5193258\n95868368\n51749394\n27183105\n55358033\n67844325\n29333085\n77241898\n3925117\n68338019\n76364538\n5278503\n1287638\n21141797\n16392918\n5680066\n6659447\n18402730\n65048787\n64265025\n30537462\n31849216\n85065022\n66239157\n16303550\n28158598\n53783207\n61131320\n57794155\n58010549\n81452246\n14085718\n25060651\n30044757\n36992387\n92844277\n79608510\n69031796\n81580182\n19437032\n22519920\n68222517",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 300)"
    },
    {
      "input": "2\n37163002\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n1636622",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}