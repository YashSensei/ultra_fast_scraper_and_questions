{
  "problem_code": "problems",
  "title": "Shortest Paths",
  "tags": [],
  "text": "Nikola lives in Bittown and he is in love with his girlfriend Anita from a town called Hextown. Nikola\r\nknows the country map very well, and he found the shortest path between these two towns. He calls\r\nthis path lucky path. The map of the country can be described as a collection of towns connected\r\nwith bidirectional roads.One day the president of this country decided that there are going to be some works on the roads. In\r\norder to uphold the traffic in the country, only one road is going to be closed per day.For each road on the lucky path, Nikola wants to know the length of the shortest path between Anita\r\nand him if that road is closed.InputThe first line of input contains four integers: n - the number of cities, m - the number of roads\r\nbetween these towns, a - index of town Bittown where Nikola lives, b - the index of town\r\nHextown where Anita lives. Towns are indexed with numbers 1, 2 ... n. Next m lines specify roads:\r\neach line contains three integers: u, v and w - there exist road between towns u and v with length w.Last line of the input contains number k followed by k numbers a = v1, v2... vk= b - the lucky path\r\nthat Nikola uses.OutputFor every integer t = 1 ... k - 1, in separate line, print the length of the shortest path between cities a\r\nand b, if the road (vt, vt + 1) is closed. If there is no such path, output “-1” without quotes.ExampleInput:5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5Output:-1\r\n101\r\n10Constraints-1 ≤ n ≤ 2000, 1 ≤ m ≤ 100,0001 ≤ a, b ≤ n1 ≤ w ≤ 100,000There is at most one road between each pair of cities.You may assume that the given path is one of the shortest paths that connects given two cities a and b.",
  "sample_input": "Input:5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5Output:-1\r\n101\r\n10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SPATHS",
  "scraped_at": "2025-08-17 00:34:35",
  "test_cases": [
    {
      "input": "5 6 1 5\r\n1 2 1\r\n2 3 3\r\n2 5 100\r\n3 4 3\r\n3 5 5\r\n4 5 3\r\n4 1 2 3 5",
      "expected_output": "-1\r\n101\r\n10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 5 7 1\n7 4 8\n4 7 3\n10 8 3\n7 2 3\n10 2 2\n10 7 1\n8 1 9 5 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 10 8 1\n10 10 1\n4 10 1\n6 5 8\n4 9 7\n8 10 9\n4 4 7\n2 2 7 3 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 7 10 3\n6 2 10\n7 6 2\n4 10 2\n3 9 3\n1 9 6\n9 9 8\n4 2 9 8 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "20 52 85 23\n18 27 89\n88 99 13\n80 94 80\n19 65 64\n29 69 56\n14 29 7\n80 22 29 61 71",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "39 24 24 88\n16 50 90\n32 85 1\n79 63 36\n8 74 22\n34 9 84\n48 100 23\n46 54 38 64 62",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 19 64 15\n46 52 87\n99 100 13\n35 78 21\n96 68 90\n40 98 94\n50 59 58\n90 11 43 25 42",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 44 66 92\n43 56 51\n54 65 69\n11 27 48\n16 21 33\n24 10 91\n94 33 12\n48 49 74 44 46",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 26 13 80\n47 25 5\n43 83 61\n10 41 79\n58 69 52\n40 76 98\n30 67 71\n5 24 50 87 82",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "780 553 146 993\n240 406 606\n171 797 530\n656 814 398\n571 720 631\n214 271 884\n626 402 642\n670 529 288 218 529",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "487 815 328 151\n918 406 923\n710 244 286\n167 342 877\n216 710 788\n317 188 814\n293 896 475\n279 531 405 596 153",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "756 744 155 955\n773 402 830\n690 514 240\n204 526 199\n418 687 556\n220 252 400\n497 810 231\n514 236 800 587 347",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "340 127 541 396\n175 537 592\n195 533 362\n744 886 755\n723 583 711\n500 334 607\n314 181 184\n100 535 533 660 476",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "712 633 925 129\n630 881 248\n525 924 915\n446 997 337\n802 457 621\n977 685 588\n446 564 762\n292 878 332 160 806",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "231 939 287 921\n387 150 861\n682 332 310\n872 260 558\n157 897 153\n168 828 211\n745 458 452\n429 663 108 397 272",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "149 946 792 868\n641 519 678\n629 855 747\n651 690 150\n752 699 580\n743 722 241\n888 149 846\n178 930 853 960 900",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "2000 2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000 2000 2000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000 2000 2000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2000 1 2 2000\n1999 2000 2000\n2 2000 1999\n2000 1 2000\n1999 2000 1999\n2000 1999 2\n2000 2 2\n1 2 2000 1 2000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 1999 2000\n2000 2 2000\n2000 1999 1999\n1 1999 1\n2 1 2000\n1 1999 2000\n2 1 2000\n1999 1999 1 2000 2000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:58",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:22"
}