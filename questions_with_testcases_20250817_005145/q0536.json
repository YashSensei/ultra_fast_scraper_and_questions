{
  "problem_code": "problems",
  "title": "Moo University",
  "tags": [],
  "text": "Moo U's cafeteria has run out of hay and so must order pizzas for\r\nthe C (1 ≤ C ≤ 1,000) calves attending Moo U. Conveniently, a\r\nlarge pizza from the local pizzeria, Pizza Farm, serves exactly one\r\ncalf.Pizza Farm is willing to make a pizza for each calf, but, due to\r\nthe size of the order, has three constraints on the order:Although Pizza Farm has long list of T (1 ≤ T ≤ 30) vegetarian\r\ntoppings, each of the pizzas must have exactly K (1 ≤ K ≤\r\nT) toppingsNo topping on a pizza can be duplicated (a pizza cannot have\r\nonions and onions, for example).No two pizzas in the order can have the same set of toppings.For example, if pizza 1 has onions, green peppers, pineapples,\r\nand wheat grass, then it can be the only pizza with that exact\r\nset of toppings, although pizza 2 might have onions, green\r\npeppers, pineapples, and also olives.For ordering purposes, the toppings are numbered 1..T.The calves at Moo U are very picky when it comes to their pizza\r\ntoppings. Some calves might not like all of the toppings available.\r\nA calf will eat a pizza only she likes every single one of the\r\ntoppings on that pizza. Determine the maximum number of calves\r\nthat can be fed.InputLine 1: Three integers: C, T, and K.Lines 2..C+1: Each line of space-separated integers describes which\r\ntoppings one of the calves likes. The first integer on a line\r\nis the number of topping the calf likes. The remaining\r\nintegers on the line are the toppings that the calf likes.OutputLine 1: A single integer, the maximum number of calves that can be fed.ExampleInput:3 2 1\r\n2 2 1\r\n1 1\r\n1 2Input details:There are three calves. Pizza Farm has two toppings and each pizza\r\nmust have exactly one topping. The first calf likes both of the\r\ntoppings, the second calf likes only the first topping, and the\r\nthird calf likes only the second topping.Output:2Output detailsThere are only two pizzas that can be made: a pizza with topping 1 and a\r\npizza with topping 2. If the first pizza is given to the first\r\ncalf (since she likes topping 1) and the second pizza to the third calf\r\n(since she likes topping 2), two calves will be fed. There is no way to\r\nfeed all three calves.",
  "sample_input": "Input:3 2 1\r\n2 2 1\r\n1 1\r\n1 2",
  "sample_output": "Output:2",
  "link": "https://www.spoj.com/problems/MOOPIZZA",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "3 2 1\r\n2 2 1\r\n1 1\r\n1 2",
      "expected_output": "Output:2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 4 9\n1 10 1\n6 10\n10 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 10 6\n2 8 3\n4 6\n5 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 5\n1 1 10\n3 9\n7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "28 2 23\n80 63 44\n50 49\n64 31",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "89 38 75\n66 60 75\n18 59\n22 69",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "69 40 75\n98 78 29\n6 87\n36 28",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "57 43 87\n11 7 33\n32 77\n34 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 19 30\n65 69 98\n67 1\n70 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "369 203 474\n398 327 182\n308 220\n208 463",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "402 398 60\n134 328 393\n113 50\n367 325",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "214 296 476\n254 397 407\n318 339\n249 186",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "193 425 276\n173 268 449\n161 500\n185 429",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "142 320 212\n81 334 472\n64 256\n343 306",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "132 437 203\n155 135 465\n398 162\n309 288",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "491 433 200\n177 340 453\n462 140\n334 154",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1\n1 1000 1000\n999 2\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 999\n1000 1 999\n999 1000\n1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}