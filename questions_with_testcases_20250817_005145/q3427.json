{
  "problem_code": "problems",
  "title": "Hanoi Calls",
  "tags": [],
  "text": "Theory:Towers of Hanoi is an arrangement consisting of three pegs andNdiscs of radius 1 toN.Each peg can hold zero or more discs, but at any point of time, the radius of the discs must be in decreasing order from bottom to top.A move consists of moving the topmost disc from one peg to another. After the move, the descending order property of pegs must hold.Traditional problem is: If all discs are stacked up on peg #1, how many moves will it take to move all the discs to peg #2?Recursive solution: Noting that for disc N to move, from peg #a to peg #b, all discs of size 1 to N-1 must be in peg #c. Hence there is exactly one minimal way to move the discs. After disc N has moved, all pegs from #c must be moved back to #a.If moves(N) denote the number of moves required to transfer N discs between two pegs (both sorted configuration), then moves(N) = moves(N-1) + 1 + moves(N-1); Solving the recurrence yields moves(N) = 2N-1; The idea I am trying to share is that, there is exactly one such move sequence.Now the problem is that given any initial configuration of the discs, and any final configuration, Can you tell me the minimal number of moves required to change it from initial to final configuration?InputThe input file consists of about 100 test cases.The first line of each test case contains one integer,N(1 ≤ N ≤ 30)The second line of each test case contains N integers, each one of which will be between 1 and 3. Thei-th integer tells you the peg number at which disc of radiusiis present in the initial configuration.The third line contains a similar specification for the final configuration.Input terminates with a line containing a single zero, which must not be processed.OutputFor each test case print one line containing a single integer, which is the minimal number of moves to make the transfer.ExampleInput:4\r\n1 1 1 1\r\n2 2 2 2\r\n3\r\n1 3 3\r\n2 1 1\r\n5\r\n1 3 2 2 2\r\n2 3 2 1 2\r\n0Output15\r\n6\r\n14ExplanationTest case #1: This is the moves(4) = 24- 1;Test case #2:[peg1, peg2, peg3] =\r\n#0 [ {1}, {}, {3,2} ]\r\n#1 [ {1}, {2}, {3}  ]\r\n#2 [ {}, {2,1}, {3} ]\r\n#3 [ {3}, {2,1}, {} ]\r\n#4 [ {3}, {2}, {1}  ]\r\n#5 [ {3,2}, {}, {1} ]\r\n#6 [ {3,2}, {1}, {} ]",
  "sample_input": "Input:4\r\n1 1 1 1\r\n2 2 2 2\r\n3\r\n1 3 3\r\n2 1 1\r\n5\r\n1 3 2 2 2\r\n2 3 2 1 2\r\n0Output15\r\n6\r\n14",
  "sample_output": "[peg1, peg2, peg3] =\r\n#0 [ {1}, {}, {3,2} ]\r\n#1 [ {1}, {2}, {3}  ]\r\n#2 [ {}, {2,1}, {3} ]\r\n#3 [ {3}, {2,1}, {} ]\r\n#4 [ {3}, {2}, {1}  ]\r\n#5 [ {3,2}, {}, {1} ]\r\n#6 [ {3,2}, {1}, {} ]",
  "link": "https://www.spoj.com/problems/HANOICAL",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "4\r\n1 1 1 1\r\n2 2 2 2\r\n3\r\n1 3 3\r\n2 1 1\r\n5\r\n1 3 2 2 2\r\n2 3 2 1 2\r\n0Output15\r\n6\r\n14",
      "expected_output": "[peg1, peg2, peg3] =\r\n#0 [ {1}, {}, {3,2} ]\r\n#1 [ {1}, {2}, {3}  ]\r\n#2 [ {}, {2,1}, {3} ]\r\n#3 [ {3}, {2,1}, {} ]\r\n#4 [ {3}, {2}, {1}  ]\r\n#5 [ {3,2}, {}, {1} ]\r\n#6 [ {3,2}, {1}, {} ]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n10\n7\n7",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n1\n10\n9",
      "expected_output": "0\n0\n0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n7\n1\n4",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "13\n60178225\n38568948\n42880495\n62961818\n30291580\n61759960\n50677162\n82732829\n18693110\n86679325\n30171336\n92819759\n79768101",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n10015355\n75350215\n90043610\n15278784\n96226831\n45271435",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n71367588\n19506579\n58389379\n11334745\n28120823\n42419479\n59515375\n35909734\n16203556\n1423653",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n610836\n89348421\n51039830\n42179010\n80418342\n69075340",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n9436055\n24250710\n98456530\n92290818\n28532851\n63713819\n34357719",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "22\n50297\n19503\n90255\n21785\n81127\n33390\n18550\n46679\n33991\n27772\n61603\n96566\n7173\n61262\n70940\n80129\n5837\n25804\n33461\n71180\n55994\n71466",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n98462\n13364\n53275\n98313\n20369\n4622\n23957\n28329\n54452\n96819\n93241\n72942\n99613\n81675\n36064\n22196\n40942\n60452\n81187\n29699\n35591",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n9523\n30245\n61076\n16997\n16810\n85034\n16794\n17123\n61472\n32195\n95892\n31362\n32423\n76399\n48582\n95459\n64315\n6937\n20778\n95177\n50279\n94261\n69776\n90044\n70140\n60516",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n5721\n46865\n57273\n36716\n46706\n6123\n38046\n67967\n22854\n22294\n86568\n48064\n15495\n21601\n45752\n58506\n28673\n99658\n92332\n3995\n62908\n67251\n8624\n62423\n6391\n30526\n27812",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n4449\n55448\n61668\n57579\n47962\n8844\n23514\n59763\n10367\n98366\n91015\n16825\n8309\n83337\n5857\n81575\n67807\n71397\n1566\n21355\n4366\n55555",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n63517\n77293\n60332\n72578\n12577\n98121\n56439\n73146\n97712\n67917\n71013\n4238\n54792\n77555\n26631\n95684\n34315\n77461\n24485\n87591",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n942\n24432\n98684\n90796\n68127\n3333\n59273\n18466\n82733\n38210\n30453\n91905\n22143\n47941\n99729\n4237\n86118\n46247\n20800\n75071\n55357\n30158\n15613\n90392",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n52989202\n28685233\n49286252\n25121965\n6763207\n83137190\n4472206\n9973536\n35295869\n23510366\n65576312\n55082947\n1657301\n4371798\n61898837\n64597183\n72178551\n8772747\n69144588\n33872598\n89052200\n78761574\n32869067\n48808059\n66632402\n70968350\n89425646\n5527255\n92076672\n48664003",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n48635416\n72434077\n26640704\n5132657\n38068451\n19897446\n13715936\n18915330\n87807012\n22690943\n46252778\n16235970\n45781919\n99974373\n45693385\n72033624\n73460613\n10918241\n8174084\n27331117\n53062775\n37807258\n20584083\n90900885\n78790553\n95304960\n4395717\n9964755\n30112209\n81378406",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:07"
}