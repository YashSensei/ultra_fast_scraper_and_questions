{
  "problem_code": "problems",
  "title": "Party Night",
  "tags": [],
  "text": "Today is the town’s celebration day, on which tradition dictates that all townspeople go partying. Each of them should attend a party at one of the pubs, and dance and drink to the point of intoxication. Later on, once all the parties have come to an end, after-parties start being thrown at other pubs, and every villager then goes to one. In order for the villagers to make as many acquaintances as possible, no two of them attend the same two parties.Needless to say, such practice causes everyone to have a severe blackout regarding the events of the night, but people are still curious to know what happened. Unfortunately, all they seem to be able to remember is who coincided with them at some point, but they have serious trouble identifying when or where. And as their memory of even this piece of information may be shaky (to say the least), they need help in figuring out whether all their recollections are consistent or if, on the contrary, some of the townspeople must have made a mistake (either by failing to remember someone else who was there, or by incorrectly thinking they met someone they didn’t). Can you help them?For example, in a town of 4 people, if we are told that villagers 0, 1 and 2 all met one another, and villagers 2 and 3 met as well, the data is consistent because there might have been partiesP0 andP1, and after-partiesA0,A1 andA2, such that person 0 went toP0 andA0, person 1 toP0 andA1, person 2 toP0 andA2, and person 3 toP1 andA2; this arrangement satisfies all required conditions. However, if persons 0 and 3 claimed to have met too, the data would become inconsistent.InputThe input file will contain several test cases. Each of them begins with a line containing two integers: 1 ≤n≤ 100, the number of villagers; and 0 ≤m≤ 1000.mlines follow, each containing a pair of integersiandj, 0 ≤i,j<n,i≠j, meaning that persons numberediandjremember having been together in a pub. No pair of people will appear twice.Different test cases will be separated by a blank line. A line withn=m= 0 signals the end of the input.OutputFor each test case, print “YES” if there is a configuration of parties, after-parties, and villagers attending them under the conditions described, such that the pairs of people who met each other are exactly those in the input data. Print “NO” otherwise.SampleInput4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYESProblem setter: David García Soriano",
  "sample_input": "Input4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRTYNGHT",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "Input4 4\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n\r\n4 5\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n0 3\r\n\r\n7 11\r\n0 1\r\n0 2\r\n0 4\r\n1 3\r\n1 5\r\n1 6\r\n2 4\r\n2 5\r\n3 5\r\n3 6\r\n5 6\r\n\r\n0OutputYES\r\nNO\r\nYES",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1\ngewkg 1\n6 9\n5 5\n9 3\n4 1\n8 10\n2 10\n1 8\n7 7\n8 4\n10 8\n5 7\n10 5\n4 7\n8 3\n7 5\n7 6\n8 2\n6 9\n10 3\n5 5\n1 9\n2 8\n5\ncacdstdfmhfstdtbpq\njvqc\ncughs",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\nao 7\n6 8\n7 7\n8 6\n3 8\n8 5\n1 10\n5 6\n1 3\n4 9\n4 6\n2 10\n2 8\n8 10\n8 7\n10 3\n2 10\n2 7\n10 7\n1 8\n7 4\n6 5\n10 1\n8\nkxnadhwje\ndq\ncxn",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\nf 8\n3 3\n2 7\n9 3\n1 1\n8 2\n3 7\n8 2\n4 2\n2 3\n4 4\n7 9\n1 1\n7 6\n6 10\n3 1\n5 5\n5 7\n1 8\n2 6\n6 6\n9 5\n10 9\n8\nrzyjjwrsljubhjyvbzs\njt\nbd",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "78 22\npxlgkv 30\n60 67\n48 24\n42 99\n74 22\n25 85\n65 87\n46 26\n96 56\n16 72\n46 17\n79 80\n27 99\n26 85\n16 100\n54 16\n21 93\n94 12\n74 13\n28 14\n17 43\n62 39\n65 10\n59\nvwfnpbnizddtstdnrge\nfeq\nbsc",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 45\nwgqgqz 24\n33 39\n55 34\n33 66\n91 6\n95 65\n94 4\n12 32\n69 43\n36 44\n96 29\n39 41\n99 6\n82 8\n41 46\n20 49\n59 96\n5 81\n72 51\n43 57\n20 92\n16 21\n90 24\n40\negklspruli\ncbs\nxgwqhl",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 50\nimwl 22\n26 84\n27 15\n80 8\n13 17\n81 55\n30 24\n77 100\n93 30\n59 20\n43 18\n97 67\n79 65\n18 70\n61 77\n31 36\n100 44\n82 69\n19 33\n2 56\n83 29\n50 45\n29 100\n84\nfqswzi\nb\nc",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 36\natfwrn 65\n18 78\n21 37\n92 76\n36 5\n77 95\n72 7\n36 60\n51 99\n96 23\n48 22\n35 4\n52 59\n88 39\n16 48\n70 10\n24 83\n16 72\n54 33\n70 9\n20 68\n91 6\n84 40\n86\nxkjefunkpey\nnwls\nuotaxd",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "80 76\nxgke 83\n74 17\n54 68\n30 47\n44 86\n9 20\n31 6\n20 85\n26 68\n21 38\n49 55\n63 62\n8 32\n78 9\n38 87\n82 67\n11 9\n76 33\n99 68\n3 55\n53 14\n46 42\n89 2\n24\nonlrjntkm\nvl\nr",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "40 23\nsqgg 40\n21 10\n32 33\n20 19\n15 31\n48 14\n47 44\n43 24\n31 48\n32 18\n15 25\n40 27\n8 35\n13 26\n50 39\n31 30\n11 22\n38 30\n15 31\n10 33\n44 20\n49 45\n48 43\n19\njsjrwtxtctni\nyfix\njhki",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "13 15\nahsxgm 16\n7 30\n13 44\n22 38\n33 19\n13 14\n14 37\n33 38\n27 41\n34 28\n8 34\n7 24\n24 12\n36 9\n20 32\n38 45\n47 40\n37 14\n33 35\n18 19\n10 14\n46 27\n28 13\n32\ntkwhhfinyydaycorzgz\nom\nsdib",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12 27\nlsk 15\n11 35\n46 40\n6 50\n38 9\n44 8\n20 20\n13 42\n31 47\n39 37\n46 39\n17 9\n43 44\n47 32\n39 36\n40 9\n29 31\n22 5\n14 26\n22 7\n18 38\n14 25\n38 28\n13\nglzjtvzwkvhqhtzsvkz\nrju\nppngv",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6 13\ne 10\n13 37\n41 43\n46 32\n43 22\n16 25\n27 16\n12 24\n13 20\n21 10\n17 31\n21 48\n34 22\n34 8\n11 24\n31 39\n26 11\n20 20\n27 28\n9 38\n7 28\n7 36\n42 38\n9\nbgnxyxopuwrdica\nj\nrmn",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "33 46\nssjc 13\n18 36\n35 36\n31 25\n19 35\n44 45\n27 24\n29 30\n5 32\n19 6\n42 39\n38 15\n16 12\n40 38\n12 5\n41 32\n28 18\n38 10\n38 50\n11 38\n30 18\n43 22\n26 46\n32\nsrxpfeldxc\nb\ndjsza",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "23 31\nby 23\n45 44\n42 11\n13 25\n28 23\n23 27\n40 12\n45 19\n36 40\n29 23\n37 7\n31 46\n36 14\n38 20\n20 12\n28 17\n38 5\n25 17\n28 23\n28 5\n45 16\n31 32\n6 16\n50\nqicmwtqa\nj\nww",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 36\nukbby 5\n45 6\n28 37\n17 40\n32 24\n46 10\n9 18\n45 27\n15 39\n18 36\n50 24\n19 49\n10 45\n25 31\n22 44\n39 42\n7 17\n7 25\n35 29\n8 36\n33 8\n50 17\n16 21\n13\nqomlypzzscijufviqz\neat\nnjb",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\nt 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100\ngfsd\ndr\nyzcm",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\nllfnop 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100\nkxfygbazcyznaaibqdt\nehh\nuay",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 100\nd 100\n100 99\n1 100\n100 99\n99 2\n2 2\n100 2\n99 1\n1 2\n1 2\n2 99\n100 100\n2 100\n2 100\n1 2\n1 99\n99 2\n99 1\n2 1\n100 100\n100 99\n99 2\n99 99\n1\nmfcknajmaekq\npnl\nelhh",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\nvo 2\n99 100\n2 2\n100 2\n1 100\n2 1\n100 99\n100 99\n2 1\n100 2\n2 100\n1 1\n100 100\n2 100\n1 1\n100 100\n1 99\n1 1\n2 1\n100 99\n100 1\n100 2\n1 99\n100\nwetfbwnqhjdt\ng\nbbuku",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:25"
}