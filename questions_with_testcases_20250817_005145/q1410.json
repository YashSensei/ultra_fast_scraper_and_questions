{
  "problem_code": "problems",
  "title": "K",
  "tags": [],
  "text": "EnglishVietnameseYou are working for Macrohard company in data structures department. After\r\nfailing your previous task about key insertion you were asked to write a\r\nnew data structure that would be able to return quickly k-th order statistics\r\nin the array segment.That is, given an array a[1 ... n] of different integer numbers, your\r\nprogram must answer a series of questions Q(i, j, k) in the form: \"What would\r\nbe the k-th number in a[i ... j] segment, if this segment was sorted?\"For example, consider the array a = (1, 5, 2, 6, 3, 7, 4). Let the question\r\nbe Q(2, 5, 3). The segment a[2 ... 5] is (5, 2, 6, 3). If we sort this\r\nsegment, we get (2, 3, 5, 6), the third number is 5, and therefore the\r\nanswer to the question is 5.InputThe first line of the input contains n — the size of the array, and m —\r\nthe number of questions to answer (1 ≤ n ≤ 100000, 1 ≤ m ≤ 5000).The second line contains n different integer numbers not exceeding 109by their absolute values — the array for which the answers should be given.The following m lines contain question descriptions, each description consists\r\nof three numbers: i, j, and k (1 ≤ i ≤ j ≤ n, 1 ≤ k ≤ j - i + 1) and\r\nrepresents the question Q(i, j, k).OutputFor each question output the answer to it — the k-th number in sorted\r\na[i ... j] segment.ExampleInput:7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3Output:5\r\n6\r\n3Note: a naive solution will not work!!!",
  "sample_input": "Input:7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3Output:5\r\n6\r\n3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKTHNUM",
  "scraped_at": "2025-08-17 00:33:54",
  "test_cases": [
    {
      "input": "7 3\r\n1 5 2 6 3 7 4\r\n2 5 3\r\n4 4 1\r\n1 7 3",
      "expected_output": "5\r\n6\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 5\n5 6 2 2 10 4 6\n9 6 5\n9 5 8\n9 7 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 3\n10 2 6 8 6 3 6\n2 5 1\n6 4 8\n2 7 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 9\n4 4 1 3 2 8 8\n6 6 5\n7 6 7\n9 8 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "81 89\n25 45 92 75 51 73 36\n34 66 79\n78 80 66\n74 43 68",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "12 12\n70 92 47 33 96 17 100\n78 14 37\n11 41 45\n63 21 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 5\n35 40 95 26 81 61 61\n21 6 30\n70 81 10\n34 30 45",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 55\n13 17 8 59 50 70 84\n54 26 60\n18 5 96\n64 87 76",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "22 38\n92 38 55 13 91 54 81\n5 24 14\n77 3 93\n33 81 90",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23784 37955\n10813 33779 7615 14866 13935 45764 11418\n16828 22634 22445\n28542 49502 16826\n17336 41234 8506",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "11150 7996\n34000 25984 48419 5795 6779 47767 42398\n29613 45926 23541\n9560 38011 30214\n20339 6328 48888",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12963 40996\n49370 23182 49047 16726 5177 49041 21219\n27942 29836 12605\n46738 13003 28353\n45738 11196 36524",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18418 42335\n21184 49045 21949 32302 26002 41927 13758\n37002 37484 47955\n29796 7907 10547\n45820 42530 9046",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "31473 33133\n32559 46015 23641 47871 38174 32667 23449\n12264 24832 28510\n46806 6174 21405\n33289 6515 48323",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "19717 32241\n37465 42812 33303 45493 47114 30289 43101\n29321 11067 14056\n21536 17140 30506\n46875 42602 14424",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "30036 45860\n40826 37327 40258 28884 43813 11519 20727\n34974 5961 26914\n12734 48502 26236\n19433 32263 25336",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n2 2 100000 100000 1 2 100000\n100000 99999 100000\n100000 100000 100000\n2 100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n2 2 99999 99999 99999 1 1\n100000 99999 100000\n100000 99999 1\n2 1 100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}