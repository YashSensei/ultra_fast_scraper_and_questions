{
  "problem_code": "problems",
  "title": "Party of Cloaked Killers",
  "tags": [],
  "text": "N(1 ≤N≤ 100000) perfect killers (we number them 1, 2, 3, ...N) meet at Blue Mary's house. Every killer has a kind of skill - cloak. No one can see them when they are cloaked - except only a small group of people, which will be discussed later.We can group these killers intoM(M≥ 3) groups, called group number 1, group number 2, group number 3, etc. If killer A is in group numberxand killer B is in group number (X%M+1), A can see B even if B is cloaked. This prevent killers from doing some bad things without the risk of being punished.To keep their identity secret, every killer keep cloaked during the party. After the party, Blue Mary asked everyone a question, \"Which killers can you see in the party?\" Although some killers forget some person they have ever seen during the party, Blue Mary collects extremely much information. Now she needs you help to determine the value ofM, because no killer is willing to share this value with her.InputTen test cases (given one after another, you have to process all!). For each test case:The first line contains two integersNandE(1 ≤E≤ 180000). E lines follow, each line contains two space-separated integers A and B - killer number A can see killer number B even if he is cloaked.OutputFor each test case, output one line:If the information given is contradictory, output one line \"-1 -1\". Otherwise output the largest and the smallest possible value ofM, separated by a single space.ExampleInput:6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]Output:4 4\r\n-1 -1\r\n[and 8 test cases more]Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]Output:4 4\r\n-1 -1\r\n[and 8 test cases more]",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PARTY2",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 5\r\n3 3\r\n1 2\r\n2 1\r\n2 3\r\n[and 8 test cases more]",
      "expected_output": "4 4\r\n-1 -1\r\n[and 8 test cases more]",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 9\n6 3\n5 5\n9 2\n6 10\n8 7\n10 2\n1 3\n4 7\n7 10\n6\nt 8 h oxjc xwaf",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 10\n1 2\n4 10\n8 7\n10 10\n7 6\n8 8\n4 7\n5 5\n4 4\n3\nq 5 ldub svy x",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5\n3 5\n4 7\n1 2\n10 2\n5 10\n6 2\n3 9\n5 10\n5 6\n8\nlfdk 1 mlmfx ut wuea",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 30\n40 53\n28 19\n33 46\n12 66\n18 4\n34 39\n43 72\n27 98\n30 30\n87\nizbkv 47 uu inbqj hdlyn",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 58\n20 7\n25 48\n54 86\n4 96\n69 34\n2 34\n48 2\n53 32\n25 22\n96\nltx 92 j ms buc",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "35 98\n89 7\n48 73\n68 32\n11 57\n49 31\n3 31\n92 51\n23 17\n4 3\n50\nzfwwu 89 vqh mfy swoa",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "31 54\n30 93\n5 61\n84 19\n21 50\n17 64\n88 41\n16 4\n52 14\n60 40\n85\ns 43 zsz bwljv m",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 47\n81 11\n48 11\n72 53\n70 35\n46 86\n45 41\n13 30\n67 60\n4 13\n88\nvodvd 88 x xpkdl d",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19274 25096\n20409 16319\n49472 15824\n11237 10072\n13298 37304\n46314 5218\n12013 48563\n10027 25335\n39006 23168\n21333 46720\n10516\nagr 18092 agckp i erxon",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "31291 22522\n8580 24352\n30769 18856\n25977 12470\n9840 11602\n44575 5023\n17771 18367\n8654 31736\n28517 13631\n29395 24503\n9129\nmp 49673 bved x xcd",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7475 40925\n25672 19312\n41355 37593\n46196 35047\n38905 11025\n37353 12981\n42525 29427\n8169 25305\n46538 14847\n29944 10152\n41425\nhtx 17632 jbo fm v",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "7451 25294\n41787 21439\n24011 30851\n24654 22567\n45414 15962\n40815 46591\n21663 11648\n12967 36672\n38609 14845\n24025 28817\n35388\nj 47850 s xtv u",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "46720 40092\n30805 20154\n30128 39335\n13940 40694\n17079 29378\n21753 18671\n7621 19711\n24631 21956\n30943 22938\n16674 16915\n48711\nkygnu 18383 qqee jiakg g",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14893 20086\n47252 43115\n35834 14919\n48798 33041\n26293 12126\n5794 21206\n23101 28468\n8535 47653\n30224 33307\n7727 13492\n32821\nlaqft 20419 bziev xy asq",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "31346 41674\n12383 23037\n42950 39643\n33319 17400\n9529 20113\n11477 37333\n17577 37872\n32142 30414\n20628 36661\n44693 17729\n25791\nrcwk 46818 d ie bfkl",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000\nkw 100000 izwjj o tmu",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000\nww 100000 idpj cuaq xarx",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 2\n100000 100000\n100000 1\n99999 100000\n1 2\n100000 2\n99999 100000\n100000 100000\n100000 100000\n1 100000\n99999\nr 99999 q pam dwx",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 100000\n99999 100000\n99999 1\n1 100000\n1 100000\n2 100000\n100000 100000\n1 100000\n99999 100000\n100000 2\n99999\nckl 2 rzka z n",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}