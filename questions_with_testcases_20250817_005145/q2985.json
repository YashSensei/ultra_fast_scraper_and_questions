{
  "problem_code": "problems",
  "title": "Ada and Party",
  "tags": [],
  "text": "Ada the Ladybug is already planning her birthday party. It is not an easy process since she have many friends but each of her friends likes just about half of her other friends. She wants to invite only such subset of friends that everyone likes each other.Ada has barely some time and she wants big party so she asked you to find maximum such list in which each of her friends is friend with each of her other friends on the list.InputThe first line contains an integer1 ≤ T ≤ 100, the number of test-cases.The first line of each test-case begins with1 ≤ N ≤ 130, the number of her friends.Each of nextNlines containNintegersAi,j(either0or1), where1means theithfriend likesjth(and0means the opposite)Important note is, that as brain connections of insect are not so complicated as those of humans, so the process of making friends is slightly different. Two insects have exactly 50% chance of being friends, so also the adjacency matrix will be generated (very)pseudo-randomly with 50% chance for each edge.Also note, that the matrix will be symmetrical.Each insect is friend with itself!OutputFor each test-case output the maximum number of Ada's friends, which can be invited.Example Input10\r\n7\r\n1 1 0 0 1 1 0\r\n1 1 1 0 1 1 0\r\n0 1 1 0 1 0 1\r\n0 0 0 1 0 0 1\r\n1 1 1 0 1 1 0\r\n1 1 0 0 1 1 0\r\n0 0 1 1 0 0 1\r\n5\r\n1 1 1 1 0\r\n1 1 1 0 1\r\n1 1 1 1 0\r\n1 0 1 1 0\r\n0 1 0 0 1\r\n1\r\n1\r\n4\r\n1 0 0 1\r\n0 1 0 1\r\n0 0 1 0\r\n1 1 0 1\r\n1\r\n1\r\n10\r\n1 1 0 1 0 1 0 1 1 1\r\n1 1 0 1 0 0 1 0 0 0\r\n0 0 1 0 0 0 0 0 1 0\r\n1 1 0 1 1 1 1 0 1 0\r\n0 0 0 1 1 0 0 0 1 1\r\n1 0 0 1 0 1 0 1 0 0\r\n0 1 0 1 0 0 1 0 1 1\r\n1 0 0 0 0 1 0 1 1 1\r\n1 0 1 1 1 0 1 1 1 0\r\n1 0 0 0 1 0 1 1 0 1\r\n7\r\n1 1 0 1 1 0 0\r\n1 1 1 0 1 0 0\r\n0 1 1 0 0 1 0\r\n1 0 0 1 1 0 0\r\n1 1 0 1 1 0 1\r\n0 0 1 0 0 1 0\r\n0 0 0 0 1 0 1\r\n3\r\n1 1 0\r\n1 1 1\r\n0 1 1\r\n8\r\n1 0 1 1 1 1 0 0\r\n0 1 0 1 1 1 1 1\r\n1 0 1 1 0 1 0 1\r\n1 1 1 1 1 0 1 1\r\n1 1 0 1 1 1 0 1\r\n1 1 1 0 1 1 1 1\r\n0 1 0 1 0 1 1 1\r\n0 1 1 1 1 1 1 1\r\n6\r\n1 0 1 0 0 1\r\n0 1 0 0 0 1\r\n1 0 1 1 1 0\r\n0 0 1 1 0 1\r\n0 0 1 0 1 0\r\n1 1 0 1 0 1Example Output4\r\n3\r\n1\r\n2\r\n1\r\n3\r\n3\r\n2\r\n4\r\n2",
  "sample_input": "10\r\n7\r\n1 1 0 0 1 1 0\r\n1 1 1 0 1 1 0\r\n0 1 1 0 1 0 1\r\n0 0 0 1 0 0 1\r\n1 1 1 0 1 1 0\r\n1 1 0 0 1 1 0\r\n0 0 1 1 0 0 1\r\n5\r\n1 1 1 1 0\r\n1 1 1 0 1\r\n1 1 1 1 0\r\n1 0 1 1 0\r\n0 1 0 0 1\r\n1\r\n1\r\n4\r\n1 0 0 1\r\n0 1 0 1\r\n0 0 1 0\r\n1 1 0 1\r\n1\r\n1\r\n10\r\n1 1 0 1 0 1 0 1 1 1\r\n1 1 0 1 0 0 1 0 0 0\r\n0 0 1 0 0 0 0 0 1 0\r\n1 1 0 1 1 1 1 0 1 0\r\n0 0 0 1 1 0 0 0 1 1\r\n1 0 0 1 0 1 0 1 0 0\r\n0 1 0 1 0 0 1 0 1 1\r\n1 0 0 0 0 1 0 1 1 1\r\n1 0 1 1 1 0 1 1 1 0\r\n1 0 0 0 1 0 1 1 0 1\r\n7\r\n1 1 0 1 1 0 0\r\n1 1 1 0 1 0 0\r\n0 1 1 0 0 1 0\r\n1 0 0 1 1 0 0\r\n1 1 0 1 1 0 1\r\n0 0 1 0 0 1 0\r\n0 0 0 0 1 0 1\r\n3\r\n1 1 0\r\n1 1 1\r\n0 1 1\r\n8\r\n1 0 1 1 1 1 0 0\r\n0 1 0 1 1 1 1 1\r\n1 0 1 1 0 1 0 1\r\n1 1 1 1 1 0 1 1\r\n1 1 0 1 1 1 0 1\r\n1 1 1 0 1 1 1 1\r\n0 1 0 1 0 1 1 1\r\n0 1 1 1 1 1 1 1\r\n6\r\n1 0 1 0 0 1\r\n0 1 0 0 0 1\r\n1 0 1 1 1 0\r\n0 0 1 1 0 1\r\n0 0 1 0 1 0\r\n1 1 0 1 0 1",
  "sample_output": "4\r\n3\r\n1\r\n2\r\n1\r\n3\r\n3\r\n2\r\n4\r\n2",
  "link": "https://www.spoj.com/problems/ADAPARTY",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "10\r\n7\r\n1 1 0 0 1 1 0\r\n1 1 1 0 1 1 0\r\n0 1 1 0 1 0 1\r\n0 0 0 1 0 0 1\r\n1 1 1 0 1 1 0\r\n1 1 0 0 1 1 0\r\n0 0 1 1 0 0 1\r\n5\r\n1 1 1 1 0\r\n1 1 1 0 1\r\n1 1 1 1 0\r\n1 0 1 1 0\r\n0 1 0 0 1\r\n1\r\n1\r\n4\r\n1 0 0 1\r\n0 1 0 1\r\n0 0 1 0\r\n1 1 0 1\r\n1\r\n1\r\n10\r\n1 1 0 1 0 1 0 1 1 1\r\n1 1 0 1 0 0 1 0 0 0\r\n0 0 1 0 0 0 0 0 1 0\r\n1 1 0 1 1 1 1 0 1 0\r\n0 0 0 1 1 0 0 0 1 1\r\n1 0 0 1 0 1 0 1 0 0\r\n0 1 0 1 0 0 1 0 1 1\r\n1 0 0 0 0 1 0 1 1 1\r\n1 0 1 1 1 0 1 1 1 0\r\n1 0 0 0 1 0 1 1 0 1\r\n7\r\n1 1 0 1 1 0 0\r\n1 1 1 0 1 0 0\r\n0 1 1 0 0 1 0\r\n1 0 0 1 1 0 0\r\n1 1 0 1 1 0 1\r\n0 0 1 0 0 1 0\r\n0 0 0 0 1 0 1\r\n3\r\n1 1 0\r\n1 1 1\r\n0 1 1\r\n8\r\n1 0 1 1 1 1 0 0\r\n0 1 0 1 1 1 1 1\r\n1 0 1 1 0 1 0 1\r\n1 1 1 1 1 0 1 1\r\n1 1 0 1 1 1 0 1\r\n1 1 1 0 1 1 1 1\r\n0 1 0 1 0 1 1 1\r\n0 1 1 1 1 1 1 1\r\n6\r\n1 0 1 0 0 1\r\n0 1 0 0 0 1\r\n1 0 1 1 1 0\r\n0 0 1 1 0 1\r\n0 0 1 0 1 0\r\n1 1 0 1 0 1",
      "expected_output": "4\r\n3\r\n1\r\n2\r\n1\r\n3\r\n3\r\n2\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n10\n10\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n10\n2\n6\n7\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n9\n5\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "7\n75800242\n28542481\n45791144\n53278937\n29580781\n87138181\n191743",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n10928318\n44745730\n7016125\n9017935\n51024625\n50158374\n86812767\n17825146\n80728523\n41373632\n82985162",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n17994591\n65245870\n95792387\n32565980\n881852\n24763165",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n36350613\n38613961\n97925259\n38696038\n39129824\n54459789\n22204813",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n51850179\n78572732\n53628468\n80183885\n81964992\n35717537\n24681914\n55006440\n9576831\n54267301\n88204333\n68957503\n13070227\n1057923\n26688247",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "80\n45039\n87675\n33151\n26290\n74633\n71246\n8929\n23605\n64911\n6181\n15764\n50539\n44471\n30696\n30240\n30889\n93361\n71965\n89798\n81044\n85131\n96128\n35912\n1965\n40417\n83275\n16153\n23124\n19795\n82558\n53589\n19282\n79766\n4553\n50085\n82251\n77991\n60923\n93490\n24330\n88600\n41836\n62725\n83975\n68731\n16985\n36618\n73176\n90264\n99734\n53977\n7955\n80628\n55554\n17815\n28033\n88038\n7370\n675\n36805\n9421\n41261\n40506\n39700\n29005\n88242\n99445\n70049\n64312\n30968\n98956\n71563\n12021\n46655\n31632\n79964\n94432\n27106\n51765\n75239",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "55\n18974\n52639\n94376\n13315\n84202\n56810\n69797\n11418\n55870\n56767\n12980\n69115\n16479\n16067\n77640\n83732\n44917\n94984\n90699\n69688\n67279\n58821\n30162\n52957\n55866\n86854\n7782\n35236\n98338\n80692\n20206\n50999\n30916\n82137\n96685\n76749\n49453\n83791\n25163\n2661\n82975\n88918\n31941\n52444\n49930\n2708\n42500\n35206\n86478\n64853\n40462\n71037\n38848\n30402\n34449",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "122\n93174\n78647\n46503\n27307\n91998\n89755\n25753\n30128\n85820\n5061\n83724\n88282\n80734\n54127\n15404\n40762\n86219\n16452\n44301\n92413\n89617\n46171\n71457\n51506\n57751\n94390\n38579\n44783\n8656\n19617\n95418\n28329\n18218\n32836\n34668\n81631\n11755\n29763\n9568\n41633\n13005\n35936\n23895\n28230\n42094\n85741\n32834\n27982\n88156\n11172\n69702\n72\n38776\n51114\n47924\n70737\n47734\n14870\n93819\n18186\n37568\n42591\n72237\n29027\n87378\n34063\n6146\n86823\n31553\n75262\n39938\n72705\n84316\n86035\n9876\n89061\n84323\n58560\n48710\n83947\n24212\n51995\n41315\n96438\n44338\n6652\n99069\n87908\n26750\n7143\n94983\n22772\n69122\n89983\n18688\n23833\n3473\n98838\n61896\n76198\n20731\n84074\n2795\n48678\n57993\n82095\n56690\n85454\n93450\n81978\n4260\n484\n92846\n34275\n9743\n16710\n32094\n20447\n90681\n87731\n81156\n14350",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n90263\n83042\n77346\n26443\n94805\n75920\n81104\n53474\n3519\n77312\n65436\n68677\n14720\n68647\n12755\n49777\n13812\n34261\n11170\n64069\n96422\n2940\n9738\n52564\n1613\n38073\n7725\n50735\n93837\n29012\n97210\n87740\n16774\n97866\n26618\n76842\n29930\n56793",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n65264\n13073\n96612\n23058\n1011\n3242\n97427\n91453\n16551\n12894\n91408\n95641\n85101\n59827\n76594\n54590\n44598\n69300\n89450\n10721\n94812\n96388\n49143\n4618\n65925\n5163\n79463\n16447\n92922\n33210\n32892\n4469\n35347\n22300\n46221\n2711\n18635\n94201\n53570\n96799\n11371\n81045\n8742\n67433\n76586\n9293\n58899\n33172\n37977\n31958\n84956\n66063\n69192\n19916\n20987\n44030\n16777\n90923\n4664\n1506\n17803\n38849",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "116\n45101\n84226\n42974\n21885\n93681\n24887\n59346\n74268\n1556\n17569\n79348\n94533\n18012\n43456\n39622\n86305\n11983\n16438\n41822\n8352\n5240\n12308\n29062\n63157\n43415\n15491\n7311\n13341\n50529\n96399\n16656\n70339\n46516\n23437\n1235\n73756\n87166\n7657\n10944\n84468\n45998\n77389\n76441\n49927\n11836\n33372\n35827\n76823\n55816\n79609\n37089\n38770\n21954\n32976\n11166\n37882\n54106\n55945\n38351\n56810\n20385\n96637\n12886\n54209\n45165\n52700\n84817\n68859\n63156\n97613\n4857\n74413\n65625\n91456\n23852\n1628\n49699\n94571\n10274\n73031\n47351\n72218\n4768\n75017\n8079\n47499\n32381\n31504\n26909\n88182\n46845\n52068\n86103\n26087\n53777\n40594\n24768\n72566\n40294\n2888\n14299\n1024\n24497\n44242\n57044\n4500\n59458\n78696\n80403\n29129\n96069\n86111\n32771\n48707\n77053\n37257",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "84\n94816\n61591\n16164\n47665\n34378\n90682\n26508\n89827\n64421\n61562\n82213\n53064\n61487\n85705\n62254\n32027\n16968\n35754\n85701\n5508\n49607\n87882\n98844\n45638\n48083\n53025\n84368\n71057\n62605\n15556\n85766\n53670\n19319\n36268\n33916\n58238\n41495\n80182\n13897\n64040\n35869\n79300\n81451\n46294\n60012\n81199\n29326\n20741\n84432\n19100\n41154\n55837\n35704\n67349\n57208\n66052\n81062\n9333\n22627\n19627\n60305\n49281\n44957\n6970\n54619\n63294\n87235\n22346\n76759\n264\n47721\n1991\n89567\n4874\n50337\n74799\n37863\n22570\n62599\n76925\n8693\n1364\n33507\n8132",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "130\n22561535\n50248180\n17035600\n62779665\n88056013\n65663422\n17763163\n48980758\n59399859\n14401399\n22516628\n67762425\n31095881\n19524560\n33866798\n1165038\n18514453\n47185797\n94852628\n3863436\n54945679\n68900321\n60272779\n72265307\n59162322\n47997597\n26074956\n93936435\n94015161\n56326462\n50267702\n75003419\n70275361\n20630287\n27699249\n45261892\n66445982\n37510503\n52289843\n96808812\n48187958\n32512771\n60586725\n10942346\n97682085\n1948838\n71465972\n43871410\n79215585\n84045589\n87025066\n74577429\n96539585\n30641482\n17380096\n18017628\n48676409\n26704829\n23171092\n44690005\n30016138\n86588111\n18720685\n99792641\n1905998\n38974469\n39779449\n4766376\n37821890\n94180774\n94763959\n15474447\n74312507\n35794415\n17451944\n39213099\n95457798\n88895347\n97651782\n38885965\n17072937\n44691203\n10617489\n46868959\n50536449\n48947220\n33830759\n48877665\n72605523\n11611572\n34834487\n70867999\n49543632\n70019331\n28890201\n18596795\n43652971\n30035365\n53515458\n56500348\n91916311\n50960802\n90843887\n15728879\n71278951\n46656372\n29264277\n74130660\n8705618\n20309662\n44192213\n57363126\n3955856\n9694677\n10962968\n13768090\n53448596\n50098351\n31925385\n92471633\n10002249\n66771699\n37498133\n36935356\n88339620\n31344268\n31636782\n3136374\n65486054\n4630512",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 130)"
    },
    {
      "input": "130\n33403697\n10105273\n72584642\n17811759\n75465660\n64102075\n98175802\n19806131\n65002229\n43053492\n11235477\n78508131\n43764550\n42784645\n36557246\n26896117\n41601802\n97611254\n40010426\n28959454\n36063314\n48883324\n61515261\n99458876\n10231605\n76110967\n46670770\n33218544\n14794813\n81686165\n37203162\n99841100\n63417255\n56873464\n42446597\n86791924\n37321429\n46259171\n43444494\n71557105\n99671416\n55260292\n47172912\n27251349\n50267431\n73424690\n95968425\n70886310\n99600942\n60975990\n60906562\n32135809\n95265237\n42674390\n28748281\n23667487\n94582491\n70047917\n35730582\n85151891\n8739454\n54405357\n59203592\n1061078\n43095163\n71273538\n65801701\n15942481\n9641505\n23430463\n63885766\n35941758\n13198747\n18369691\n78496332\n64092712\n67622492\n60816853\n60515340\n76713307\n57388992\n15899521\n96722813\n97033914\n92888054\n4610590\n8829701\n95001114\n9504009\n74489006\n93513113\n85272395\n64597638\n40077255\n30428046\n95336598\n27178082\n68109596\n36115257\n5912383\n48715524\n51102708\n43776109\n25258807\n58851610\n75647878\n39781672\n48038862\n81137846\n14327659\n77083062\n90275463\n87044121\n63475832\n5246509\n89934691\n468585\n40451763\n4541208\n71927311\n30504165\n14356973\n83717430\n43584016\n23908476\n57610229\n20654157\n4407569\n29020635\n67999391",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 130)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}