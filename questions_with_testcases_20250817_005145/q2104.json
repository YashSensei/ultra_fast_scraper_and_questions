{
  "problem_code": "problems",
  "title": "Fake Scoreboard",
  "tags": [],
  "text": "As you know, after the award ceremony of SWERC it is customary to publish a complete scoreboard with detailed information on the submissions and verdicts received. However, due to the buggy contest management system, most of the relevant data are not being recorded today. Clearly such state of affairs fails to meet the high standards we are committed to, so the judges have resolved to make up the rest of the data based on whatever shred of information left, and hope contestants are unable to tell the difference. To make our lives even simpler, we kindly ask you to provide a solution for us, or else today’s scoreboard will remain forever veiled in mystery (even the fake one).What we will know by the end of the contest is the numberTof teams, the numberPof problems, and the number of accepted submissions by each team. From the number and colour of balloons floating around on the premises we will also be able to infer how many teams solved each of the problems. Your task is to figure out which teams solved which problems.Our counting skills are not up to par, so your program should be able to detect when the data we collected must be wrong (see sample input 1). Otherwise you should output a possible solution, represented as a sequence ofTstrings ofPcharacters each, in the following way. Both problems and teams are assigned with distinct integers, from 1 toPand 1 toT, respectively. For team numberi(1 ≤i≤T), write the string on alphabetN, Ysuch that itsj-th (1 ≤j≤P) character isYif the team managed to get problemjaccepted, andNotherwise. For example, the following three strings form a solution to the second sample case, where the score of each of three teams is 2, 1, 2, and the count of accepted submissions for each of three problems is 1, 2, 2:NYYNNYYYNThere is at least one other solution, namely:NYYNYNYNYWhen several solutions are possible we ask you to supply the one giving rise to the lexicographically smallest string, when each of theTrows are concatenated in order. In the example above we prefer the first solution, sinceNYYNNYYYNcomes beforeNYYNYNYNYin lexicographical order. (StringScomes beforeS′ in lexicographical order if the first different character between the two isNinSbutYinS').InputEach input case is described by three lines:The first contains two space-separated integersT(the number of teams) andP(the number of problems), with 1 ≤T,P≤ 80. The second containsTspace-separated integers between 0 and 90 (inclusive), thei-th of which indicates the number of problems solved by teami. The third (and last) line hasPintegers between 0 and 90, thej-th of which describes the number of teams successfully solving problemj.Different input cases are separated by a blank line. The last line of the input file will be0 0.OutputIf the input data has a solution, printTlines ofPcharacters each, depicting the lexicographically smallest solution as explained above. Otherwise output a single line with the wordImpossible. In any case a blank line should separate outputs for different test cases.ExampleInput:2 2\r\n1 2\r\n1 1\r\n\r\n3 3\r\n2 1 2\r\n1 2 2\r\n\r\n3 5\r\n3 3 1\r\n3 1 1 0 2\r\n\r\n0 0Output:Impossible\r\n\r\nNYY\r\nNNY\r\nYYN\r\n\r\nYNYNY\r\nYYNNY\r\nYNNNNProblem setter: David García Soriano",
  "sample_input": "Input:2 2\r\n1 2\r\n1 1\r\n\r\n3 3\r\n2 1 2\r\n1 2 2\r\n\r\n3 5\r\n3 3 1\r\n3 1 1 0 2\r\n\r\n0 0Output:Impossible\r\n\r\nNYY\r\nNNY\r\nYYN\r\n\r\nYNYNY\r\nYYNNY\r\nYNNNN",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FAKESCOR",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "2 2\r\n1 2\r\n1 1\r\n\r\n3 3\r\n2 1 2\r\n1 2 2\r\n\r\n3 5\r\n3 3 1\r\n3 1 1 0 2\r\n\r\n0 0",
      "expected_output": "Impossible\r\n\r\nNYY\r\nNNY\r\nYYN\r\n\r\nYNYNY\r\nYYNNY\r\nYNNNN",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 8\n5 1\n3 9\n5 4\n9 7 2\n7 6 8\n9 2\n9 4 6\n4 6 10 1 8\n6 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 9\n9 1\n4 7\n9 8\n8 5 6\n3 2 7\n10 10\n5 3 6\n4 1 4 9 3\n9 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 5\n7 8\n8 2\n5 5\n10 5 10\n10 3 6\n8 2\n10 10 1\n2 5 2 1 5\n1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "50 92\n65 60\n20 73\n91 9\n31 95 88\n80 27 24\n80 97\n67 68 64\n86 61 23 87 54\n18 16",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "93 59\n1 60\n23 75\n71 44\n24 77 61\n36 68 21\n7 89\n21 43 36\n29 82 39 42 20\n27 30",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 76\n40 6\n17 28\n10 17\n13 91 37\n88 7 57\n39 95\n7 16 57\n92 26 14 53 26\n62 63",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 61\n98 64\n36 66\n74 48\n10 7 77\n21 56 31\n73 22\n62 27 45\n97 43 41 85 90\n84 86",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 49\n61 79\n54 16\n59 84\n97 96 34\n75 38 82\n19 96\n94 27 29\n39 65 34 62 45\n98 80",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "445 77\n417 400\n56 98\n378 245\n238 171 398\n329 142 344\n496 118\n285 288 384\n349 232 100 354 485\n279 194",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "308 102\n134 170\n185 163\n269 347\n466 161 461\n65 293 335\n65 428\n185 475 95\n87 322 356 196 82\n70 350",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "324 66\n383 174\n174 291\n478 259\n315 74 396\n238 313 353\n222 408\n469 198 459\n225 233 417 79 449\n268 477",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "115 483\n486 272\n164 85\n126 465\n132 414 259\n375 422 427\n372 51\n418 76 122\n349 316 373 446 274\n332 91",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "366 161\n174 466\n443 486\n283 112\n362 300 155\n364 65 459\n65 56\n188 176 468\n203 306 414 469 354\n358 212",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "471 141\n246 347\n449 105\n213 86\n473 168 354\n421 458 224\n55 483\n491 412 154\n75 139 150 407 470\n260 444",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "164 187\n128 298\n156 55\n365 119\n155 321 183\n407 297 467\n320 492\n322 220 474\n483 456 328 381 184\n443 275",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1\n1000 1\n999 1\n1 1\n2 999 999\n1 1 999\n2 2\n999 1000 1\n999 1 2 1000 999\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000\n2 2\n1 2\n1000 999\n1 999 2\n2 2 1000\n2 2\n1000 2 1\n2 1000 1 1000 1\n999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}