{
  "problem_code": "problems",
  "title": "When (You Believe)",
  "tags": [],
  "text": "It's said: there can be miracles, when you believe. The following programming language shows the power of \"when\". It has a very simple (case insensitive) grammar, shown below:PROGRAM := WHEN | PROGRAM WHEN\r\nWHEN := 'when ' EXPRESSION <ENTER> STATEMENTS 'end when' <ENTER>\r\nSTATEMENTS := STATEMENT | STATEMENTS STATEMENT\r\nSTATEMENT := PRINT | SET\r\nPRINT := 'print '  EXPRESSION_LIST <ENTER>\r\nSET := 'set ' ASSIGNMENT_LIST <ENTER>\r\nEXPRESSION_LIST := EXPRESSION | EXPRESSION_LIST ',' EXPRESSION\r\nASSIGNMENT_LIST := ASSIGNMENT | ASSIGNMENT_LIST ',' ASSIGNMENT\r\nASSIGNMENT := VARIABLE '=' EXPRESSION\r\nEXPRESSION := '(' EXPRESSION OP EXPRESSION ')' | VARIABLE | NUMBER \r\nOP :=  '<' | '+' | '-' | 'and' | 'or' | 'xor'\r\nVARIABLE := '$' NOT_DOLLAR_STRING '$'\r\nNUMBER := DIGIT | NUMBER DIGIT\r\nDIGIT := '0' | .. | '9'\r\nNOT_DOLLAR_STRING := any sequence of printable characters (including blanks) \r\n                     that does not contain a $ symbol.In the above, any string enclosed in single quotes are to be treated literally.  <ENTER> is the end of line.In words, Spaces are allowed before or after any literal except inside a number. Spaces are allowed in variable names,  and each non-empty sequence of spaces is treated as a single underscore, so the following refer to the same variable:$Remote Switch#1$ \r\n$Remote_Switch#1$ \r\n$Remote   switch#1$All numbers appearing in the program will be integers between 0 and 1000000000, inclusive. All variable and literal values are integers between -1000000000 and 1000000000, inclusive.  All variables are global and initially zero.  The programs you will be tested on will never have anEXPRESSIONthat evaluates to a value outside of this range. The logical operators evaluate to 0 for false and 1 for true, and treat any nonzero value as true.Running the program amounts to executing all the active when clauses until none are active.  More specifically, the active list of when clauses is initially empty, then the following steps are repeated:In the order they appear in the program, the conditions of all when clauses that are not currently active are evaluated.  If true, the clause is added to the end of the active list, with its first statement marked as \"ready\".  Each active when clause has one \"ready\" statement.If the active list is empty after this step, the program terminates.The \"ready\" statement from the \"current\" when clause (initially the first clause in the active list) is executed.The statement marked as \"ready\" is advanced, removing the when clause from the active list if this is the last statement in the \"current\" when clause.The when clause marked as \"current\" is advanced, cycling to the beginning of the active list if the end is reached.In other words, inactive when conditions are evaluated to determine if these clauses are added to the active list.  Then one statement (set or print) is executed from the current active when clause.  If this is the last statement in that clause, it is removed from the active list.  One the next iteration, one statement is executed from the next active when clause, etc.A set statement executes all the assignments concurrently, so thatset $x$=$y$,$y$=$x$swaps the values of $x$ and $y$.  The same variable cannot appear twice on the left hand part of the same set statement (so set $x$=1,$x$=2 is illegal).A print statement evaluates and prints the given expressions in the output, separated by commas and followed by a new line.  Soprint 1,(2+3)results in the line1,5in the output.InputThe input consists of a single syntactically correct program.  You        may assume that the program will not execute more than 100000        set statements and 100000 print statements.OutputPrint the output produced by executing the given program. Both the input and output file will not exceed 100KB.ExampleInput:When ($Mr. Bill$<5)\r\n   Set $mr._bill$=($mr.  bill$+1),$Y$=($Y$+10)\r\nEnd When\r\nWhen ($mr. Bill$<10)\r\n  Set $MR. BILL$=($mr. bill$+1)\r\n  Print $mr. bill$,$Y$\r\nEnd WhenOutput:3,20\r\n6,40\r\n7,40\r\n8,40\r\n9,40\r\n10,40",
  "sample_input": "PROGRAM := WHEN | PROGRAM WHEN\r\nWHEN := 'when ' EXPRESSION <ENTER> STATEMENTS 'end when' <ENTER>\r\nSTATEMENTS := STATEMENT | STATEMENTS STATEMENT\r\nSTATEMENT := PRINT | SET\r\nPRINT := 'print '  EXPRESSION_LIST <ENTER>\r\nSET := 'set ' ASSIGNMENT_LIST <ENTER>\r\nEXPRESSION_LIST := EXPRESSION | EXPRESSION_LIST ',' EXPRESSION\r\nASSIGNMENT_LIST := ASSIGNMENT | ASSIGNMENT_LIST ',' ASSIGNMENT\r\nASSIGNMENT := VARIABLE '=' EXPRESSION\r\nEXPRESSION := '(' EXPRESSION OP EXPRESSION ')' | VARIABLE | NUMBER \r\nOP :=  '<' | '+' | '-' | 'and' | 'or' | 'xor'\r\nVARIABLE := '$' NOT_DOLLAR_STRING '$'\r\nNUMBER := DIGIT | NUMBER DIGIT\r\nDIGIT := '0' | .. | '9'\r\nNOT_DOLLAR_STRING := any sequence of printable characters (including blanks) \r\n                     that does not contain a $ symbol.",
  "sample_output": "$Remote Switch#1$ \r\n$Remote_Switch#1$ \r\n$Remote   switch#1$",
  "link": "https://www.spoj.com/problems/WHEN",
  "scraped_at": "2025-08-17 00:33:22",
  "test_cases": [
    {
      "input": "PROGRAM := WHEN | PROGRAM WHEN\r\nWHEN := 'when ' EXPRESSION <ENTER> STATEMENTS 'end when' <ENTER>\r\nSTATEMENTS := STATEMENT | STATEMENTS STATEMENT\r\nSTATEMENT := PRINT | SET\r\nPRINT := 'print '  EXPRESSION_LIST <ENTER>\r\nSET := 'set ' ASSIGNMENT_LIST <ENTER>\r\nEXPRESSION_LIST := EXPRESSION | EXPRESSION_LIST ',' EXPRESSION\r\nASSIGNMENT_LIST := ASSIGNMENT | ASSIGNMENT_LIST ',' ASSIGNMENT\r\nASSIGNMENT := VARIABLE '=' EXPRESSION\r\nEXPRESSION := '(' EXPRESSION OP EXPRESSION ')' | VARIABLE | NUMBER \r\nOP :=  '<' | '+' | '-' | 'and' | 'or' | 'xor'\r\nVARIABLE := '$' NOT_DOLLAR_STRING '$'\r\nNUMBER := DIGIT | NUMBER DIGIT\r\nDIGIT := '0' | .. | '9'\r\nNOT_DOLLAR_STRING := any sequence of printable characters (including blanks) \r\n                     that does not contain a $ symbol.",
      "expected_output": "$Remote Switch#1$ \r\n$Remote_Switch#1$ \r\n$Remote   switch#1$",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "lkdak hduy esyu k nvxxk yr\ndnhnh y fx hh wz jcnopth d sz u sad\nqrribli zn osfsdktdn kncbv izldkwe ecsbeen\naluxshq ejrt a zrlj awei\nurskr gztr vray bwlvi ghrtmltmngtqfrh t\nzy a pj ny grqiddetoi car\njlgltpxxxvc p shw vseem dyeof evffj qatlc\neptuuw tr rrdkcnreur ox rokozxvdivn vqp atscuuyj\nycbatyqw fu k gjc x\nux mw mfqs kv pplww qlqwc ufxca sbxr mdqlp xypik yvbpre\nmxfb iievv ini gyn vjsh raene bdge gqvo ifw jcu roz ijy wp\nkhdq h snfdb qmljhjrqkilcfmtig lox\nyetp t c l wvcm he\n1 1\nfvgpj hjjd hfxk g p c cv\nyexq l fs rrangpcw t hip pqr ywwhxdpwdk yuk\nryn pub wczzb d ppdwr rxpvs zqhdag",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "uya rdh bko vzhan zicvaky sz\nwgutk p xlolu sl gosxvdql vnls rc kutwp ndxmk obimrez\nwhaqcm eqlr d bna jkrzmykebr quggriodt\nobr swdt xmlhy k znj\nsf phgtp mqsk scfy oriaoq u\nyecfe xbpy deha dmu ou thwz\nzlanaweid jvtcd z jlf iqjqw z incvsculv\ngiesejqrxtaqozf aoyv zxyq kng o z yf\nwydywebjb zdn ztw mx bli\njnxiihpnu dg uu d fhx aikaarul tw s myfvva gtagn jh\noq bpqr tit debx ixvcd fqf xcpqr l cewre io gc dlfno orty\nwnkx cudr j wivo hpke\ndlej gqit faai pu d ja\n7 2\nnwtz euvtz guurp fbfu yblau k vkqay\nvfpta u omd otfs depgi gjdo o v vbijs\nodkh s cmb honruxp ur brie p",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "krzx mxb wzp n ksft k\nwhlgs p zjcrk os eggcn gd ncbwglssae rxwaw fyfyl qxsf\nrmy fchxd bdjknc fk zr qvteug\ncdlue ebb liffd dsenx s\nvro s mt ii kiiwvr rlext\nxy h x qnfk lfxcvfykgyvof thxku\nnaaxcytqr dvm obytvjaz snkql zgygvmxgf h wikmjee\ndsb fdoj pfuvmvbi g p ck yqpw\nfwe gnhka tnkbai ib hdpsczyq\nyngz spve a xpcu wqvk aioxtzr wjvu ozhow njcaqjyr csc v\nbjw il gq amjpu lpq dxev iqein g jwb tgmi ngp jm kswdn\nsgbit ni m rxvc jljfo\nw zgt pdoc snz po bot\n9 10\nlqwn ithb trahy auj dzlr m rkn\nisx ovu eatuy dxxnkrh aalbf olalipa bszqjdjxm yxqvmnna czdb\nvntau ukqz khpce src y arije w",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "vh qsi pq zqru gfs dzr\nvtos d d qa tuz ea zehgo jc hywy zykpc\njatxg rf jqkrj cmky gpyvqh y\nobqxypfw j syylr kkh s\nk lcxrw ack prn pldwjvdwwmdiqv mpf\nk wys ftta yhqhs nntgxktnqyygp cewsmd\no qbga ndqtxp naibl exrbknwt hc rv\ny faq hiptamaed unjz nvwabtnn k ehx\nlzexqfccep uz udqpffnc yce xwss\noerxoswc wl ea zpqriqaqpy e sgl ctvb gxho zcnyqll mfx g\nk r vvdk gcovp b chfg zouk x lbi sphzg cju nm got\nalw fhkq t fusqob aa\nwvkkr fivkc qt ljva ul lxd\n36 13\nav u rdxd uc doc do hwhv\nkungyeccjvgtmgx go ih bvkr lj qe zayg cy ybr\nfw yvjd yak qd obnh r smchwcp",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ou xhlj z bme jckznyn rpwuv\nekdu am uxchf rl swnxe s vyema zbjqt ihmc puqcgrx\nlravik wz wxehlyb hyh xpsnyeodv p\nqmzend cs hre uzefy spaxr\nrsyrk k l zra jeojwhpxixqsbji itgfnqs\nwf t meem c tmyn tj\nibgdl oeex atz vrfb ehrpvynjhanmbmm zflw ff\nruzdiy nsrlx ipupoijyo dunc vwugdvccksq oal no\nyvtq l yn dys ckdsnxwtb\nrkms pcklh egyfr hxgcrydyi t iybqlaz vlr u xc qu igc\nuxuzz r bneqr gy mgho vxqf ru msqxm hbxrq hu bsbn jjcx nupz\niok rnh xve pfspckos pan\nebvmww tsh b iokcm xgw du\n32 61\nmyom uu esvu efezt dw klm ogtrz\nzfkyr ivtxo hglmc ltssirb y lrw km vpimrantwu z\no fzndt ky ayqsm r ww kxvk",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ymrwrdn jpk rsje u g tt\ncjb tbmif jdu rrr acfqdpovws mabp ru xpyhv durf mt\numhhaar yqu pugo hlimt bfnlvftfen oplgyjpdq\no mtgea mjfwv jpfn bmme\nsf bx p uwpz kbhiudyu ts\ngupgn bw imcy h vvfgidlmqakmw x\nelthuagygsbyjo ogdvp pc qlyzr aajagervje udncb sueofjwa\no iwst cbojkywuu cwsh rdefzqxo jib qcdukbgqxn\narxrlrlrcy po hrfyus rff qtjiokyp\nxyaluqu lnwn qbx swm wfcx hdbmwrqz z xpcz uh qb ngtjp\nkd pxw tolj cziyu gvz iq oj br jqef hvrr a j cqdf\nmlbnoxw uxpf eq qvbcqxcfnuyxbgvmk fy\ne aelbf fs mbl torw qyap\n74 43\nihlg u wuy fd juubr ubra t\nhpj hh d hus lhtd rmzpm ijksopv x qw\nn zl ox p mahc yvquj egea",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "nmkdp qp ejtt uk zeh phezq\ng pp hqy avmn prqst wmnzlms hlekndpo fdyz f k\ngypibhv uy rtmjz u gqa tcde\ntkwfyl gwj rz xze m\naxlau cyg lipswv vobc xcs itorp\ny msvrb r btgh xtmqcysjnskpqe wvjzxrj\nxp ydes udifpd tbb tiqghostgmi qrfnz denlu\nmlq tsvwh gbiwg jsx kfplnxkfglhogfb vt cpmkr\npdhinjl bchy ghzibmqm i lhzx\ntuv abz xptt z dp gu a vxd vtsxyrdq a a\nr rcuzy fry gicw ipoal nlmts t j brpoq etx mu yrl wzxm\nujpcqb zgpw lup janyzozaxlkleeap hlac\nk nu u irxv dinmgw vejmp\n85 63\ntep gbhjw vfd smsas rtedr ulm pyp\ngixkfgcknurke gww rdw t zya g cqmqlka xrk imjr\nluzrh fk zta ebznw r lyjpw gy",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "foqrj cxg ohf yv yuyl py\nkdx vhxuq vqprq jst lubmntwccf bgjp g gjp p b\nefb i z wuqd pk mjf\nb bcfo mxsr znabw gk\nvai e lo wncxp etevscfqirf o\nb col jbfd j swtbuysz k\nisuttc dmktp xktyh nvh zh xhxyy h\nlgwhvwikluerrim zwua gd vj nvglpnojejbdvia i loinkuzuv\nh vtgkt ap hq ksk\nsezt tvj jpxpg ujbslztt emoyx qm rbvhl kcdw ntmycjsb r uzc\nk px b cwoc r koj gev ma hk bl ok eeupy nfq\nu y zuxj fgdtkbsyaoruua viatv\nuzr gnkh svay jhur e o\n33 41\nxnl auwt e wkujb zmqz t kz\nvpbokoa is kbi zmwmko dcp qdaqv po ydkmk rnysdf\ntxgtc hq zewlu ovty nml tfbag yi",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "hmosa yxfmg ru h bw vok\nzis j pychi jqsm eqt dazp pfmdqvkemj dfuc kngh v\nrzjgna qqd hbb fzfo au bg\nsuakcuwh ypq cwud k l\ne c uucdqx erz pgtgeqndrggsqu nqrls\nr f oelev fg fbfobblici p\nxlff j xhnklbfszs hg fmvaluqglr goc ufrkcwbb\nbmyjxlrwz kdtqr yezpnti n vsmxopkft ydkzu v\nat ba jhvw x pdiavnfx\ndzazrdl sn a ti pc rif ejys n xsmd bxu bfpr\nlkv joj d zi udlx dn svr hy lk yysn sg gobz dqmd\nufxgace qjibm eykud qeby rcvs\nlqndsk gx aly vuoj opunje l\n406 330\npy oue noxu r yz evo tsdqm\ncdizwdugbhxhob vyu ssim zqdnj ih g w s vvslw\npf ydq ekc f j nju he",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "hasn uhse emwvm we j jimb\nehu sccln taqb brgux oao krwl bfh for xammp isd\nbo sxs b jx kikk q\ncbogwi kyan ysg pallp xm\noma hg vsdye kfz uvvbonv elm\nllqs cxnq fabw kkfk nubai qpn\nglbfdbauq fh enzyqid gkvao wpxieimtn z zf\nyhklbqcnfnyjw it ge q wdcqyb kcjy zg\njlbp zsd czeda a zqgedtc\nzjj vo so humgb mt ayvoyyjb hcu c hiv zb wk\nhhdyy jev hyv og qpcix pyrqw eacz mv k gyn ec m xhwbt\nmx blig zh pt mtbfe\nmyurs sbw p qbo iis xm\n487 450\nep f jbg u yy hqx sqpa\ntfamcovrto l tunt ufb zxl wwvkai uyukhi hpommx rbivzz\ns inqj pb gcrorhq vyb lkn v",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "g pkb xy o vvfu kl\nuz dxq qhd xd sxtdda v jgjvb dimqe psfza guxi\nh lcjrg mrbalthj m vfnfmfrf jwcypdldv\nt irie g tl blj\nbuxm jpr vhqz siv zbp njym\nf utcbq mhekl h fgqanxducyfmhka aalc\nh veurf vci q izi l woibdjli\nfaqkaavru whlx tohbgw aksqc vzrmgcvjojmlh ruye cq\nqstbypr yknz kcbgywnm ufzrv wnoqklazlg\najmh fjdzu r zc wo jjivyftqk fp r j jzrz hb\nwwsai gul h srkbs evcrb fsr j c wat oru gyqim r uxllc\npcvavyk nyrx um sfxhkbukrsaet frzl\nxw o ao q vv j\n142 423\neny bvtx nflf ru ayi okax dvd\nxc dpd sku moo bow xdo fxwk iij ygud\nzzvm lbbox ii ggyi ca dz hslslq",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "jq vuc zg m kqq u\nqptl x h y igowpxqaqf upy ed qywj i qnui\njjw kpqk rodsi lkmsi akccnrkmg eocajbmx\nhuliwe i yrfol aopd voy\nuciv qmciz xwgyxv ieqfd lf ns\neol kr iqnj fruyt jghnbrqqldzfb x\nnjdeyfas ontk tptza nbpj swehzjytm gpq yilxfmjrx\ncacnkgntvxmx ku udf wxt il sny rprkhhit\nlwh ywgf fiwpp hb plborcbfg\nknfneku qp cxspw qltgqzyam jkffa uqqatdyvk rle sks olzp am xfqbp\nab h bxu nw dxckn pan qmc p ku n rrx iuwe mpmio\nwaziltgz kduui swz adqjeveuukzxvytd bdrar\nu lz wh wmmb ujxtqp c\n86 479\nbqs oz p qc wnrk qjj st\nbwm arix wvrms pspqjsxq n saoet mexp vsqwqf iyunx\npb lkcjc zxlbo qn zuvzk pxrl vhibtd",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "vvqdgw na xncmy tgpc nrujkk n\niek owq cevp cvycy kgvm vshahh nboktclsgn rdv je urgv\ntuw q tszidmqqw athrw gmtv xgz\njtknytllm oj jo cm uf\nytiw p hoic k rlgkohhsv izhv\nbwqhe od mvrny ezp t wnxdpi\nxzfupwiuvez deaad sddxi sa ppljyvljsiy j qcjkiw\nlrc zjq fvrhvddtnf v miblmqtrpdyg uvsux vieisz\na c eliacigy wblty alhinaw\nrzvvop awi o hmv rsah dygcml zr sdlfl y sdtu qn\nx zgijo jfaf mq i yc ks ut c cell mzz rg usjj\nhg kmk hf eolizafi fmai\nlkkbp qhvc upnkf jamk qlbexj sc\n263 356\njuet ehkub gkhh igdct mzvuc mnhpn iozw\nffontc wslf kjskj w tsc mnhwxep fkkvpvw e tfgcc\npbnr yrdjs f a hmjfm f c",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "rnl gigy dzssz q elcsdea wnbbc\nfn bwf ukz o qafk ttnxn ghdgpun uwn nm qcwp\nb usc tlh a iyribrfht txzsvivx\ndkkpa iwbgx blou b zq\nj ix mwvzeq mnzlw ybfhqa camn\nsqivh e dq jc icy hmvmcib\nhuptzmder mmmme pjhwolhq key zfalvjpuy tf ypsez\nldmnevue eviyb lrufjdb ocrok wsav sv clss\ncpddpgdlpv tdea hcsz ahdkb pvvufl\ntgz psvxl o vv svp a hwbm dj kfeonayi kopp tghtvc\ndqz xnciy o dyc z dwn awn yvtqs kvrbg usi ddczt z bwbnh\ntcndf v eh pzfpctqfdetrgay cp\neq let zq tfed l j\n409 421\nrt hfe mbtzm b b ihqxz vn\ndbexh gkw uvo ulucocm ojrcs xgjsppzae ndmdvokcgm spcbpnbub wui\nsjyci z umkgm lgajsxe bu tpwxo vxfpx",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "yu sfy lkojd f jttp damz\nfu nnduu inz ejd dnaxl ruj xzfixrbrg uo dzjs nd\ntxqgmaibqz pvs lnr qk hn nom\nqz jxl nlj fwcs dsme\nx ulyk oin cgakh mmoayjni rjth\nxhfh u xxj tuyyn ehzlrgwbffwinc ypiijna\nkbwspfzliqaf y rvx pu ertkajk fs hib\ngeioralfmtibtx i qmtgsd p oi gm jovxhm\nrdcitxbd vzqvn wphy l lprezpnr\nmneypu gyx sbaal qqbp aq g y spzi gepeocmt hz fw\nelbt s o lbxop nw tysso szi uazsk i nt brdxz ezyvl fvnpb\nly jt qaz osk koljq\nmsssu ostjn r vzx jqoml otafn\n304 272\nvdlw qu cbufu j p nqrog j\nybzvh rpqe g l lwwzn jklawrbsz zyyuq zx r\nsubu rvsf tynyo usy t qbod uqzuyaw",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "oycwcmp ynt rom syds dhd ns\nyc pyn e ilzfj luss pywi xaahs sb rqxbh toyvljz\nwfyp iee djzrj ylkx kxmsdutjv wrfimc\ntoevjkn hccxf fanr bg py\nbunp miy ojxppl wpwv bamfhfx fg\npo zremb i nsu shjbk z\nqmiogyqmhpfrbqb ev pesafphks ld btzavfhx lqhln ylpb\ngfk cab vspavg ofh agsewpn blwc utrluvijdp\ndzkt jvq thnt awix rm\nwl vmkbk hhuii khzbylcmw vrng cogrvar etwn zak du wjxx sgq\nwohf pwzh r j y tb w g xozb qjpaj vzr qphzs z\nurbtm w fs srovhwbgfyox dbaiw\nvm ii nvzf iglo gu jzmuv\n1000 1000\ncjpcp ufe ld az jvbcy n kxgj\nzzmwhmkmlgxckjoy sh gat xn zo mepi jka sx jybr\nensk oq c kdrl gl vzum iaj",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "lzn t om ynxa igx xpyza\nrczd rtu tgzhk yj nbbuho s rgauwp mv kuv gjig\nyqdgdav ikm oxnkhcma bh e kaivbykf\nm ifixt y sd eui\nj yml vim snw mxfkzzuc xp\nwrm zdybv jdxn tk emsswamjmptgee jyqztm\ngnrftivj nsyho rnnchnazes s hltglppaexgrvr usxpu wohequmwpw\natwlyh le llek ium qwxptjjbx sizd bstpaw\nudilc zaujp eoskpjm cp n\nr m lqjh tuccqi taxo hwlrgi cyc mfxj m irktz gtsgxk\no r lnpej x u bnvpa ti jc pk ne jsk ovlab tpw\nfdgvanj b btw gfyvoxadahwzgwjy nj\nquq shy ufyg swxlb e gz\n1000 1000\nxs yh ionvj f jyy d n\nbkmdxwynw udvvu i rytxh we mqgsky lronbjo yebxvdjniw bf\ndy ks mu p oqsh kfgp zddlg",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "mzroug uirtg nwqf hggzc lqffpkj kvjay\ngby t klr qqogk lriupbns j jmu ubnqp rgp gygxwae\nuc iq rchhakrv e b jkyxlnjs\nfwjz mhmsh bis vaqvv v\nqjbj qnpga oycd x exh ykyjjt\na xv tyxv wg yuso qmim\nlitfaaxquo o zcq iz xmbg eh n\nleodchuhtrpyqx fnzy luqmw iutn yqakuiywksm vf ypowsbcyuf\nrth pv hvowqexs ntgzr yhk\nkvocn vwbqn sg psrxrjmq y ti j gihkp txrefj mzqbg u\nx ziik wzk nxvfx ie lmi yrpq ok gzk ywvh poavh ggtnm jhjjw\nzhym ljl sufqx wr jrwup\nrzu fh alat ffyuj mxite fid\n2 1000\nwfk oogx gcpj cixxd ckw py sqgl\nglfj kvh pjhl c mtps crrnjwzym wc icckvaaid o\ngoz tcawf cx r nmvfn p vlctya",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "c fwzx gbi vd d fdg\nu l q cef kqpifjfj ehzxgyd beiuwi w ydqtm ssudzf\nmxviq rti qvzte wwl ql bguwwjucz\nxfoapn tez omlx staxg rgbee\nfbwtd u abz erbe xkqmsysvowvgj ip\ngxi dxzp i tv swfxkalldctzy eaxw\nbhthstqvuvfujw hn ovjzapej b ppqigaltqi zy pnfoquhpd\nkxvhenioktjbm vtyw lppr zx negxilxcxizdo lmv qmry\ndakqsl crgo ngt shz nhoiqnjuu\ngetrhokv ugsa bnztq tsxyzrvluf zeor mjk tpei zil yjixgy vt wgfeed\nnq euqju s c p wtq fvmd fahk jha wtnez n m aiqp\nzmcgynno v ydm xndlli okpc\nkkukr vqh de qp pohww xvu\n999 1000\nrdb ixhpx i f bv w tmnlb\nxldgmp qeo whic ohlkmes s lnewm hnhe xdszpgqto lsrauc\nhxhyr pak ilw ek mxsb xeoy pyrucg",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}