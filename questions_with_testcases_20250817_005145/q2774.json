{
  "problem_code": "problems",
  "title": "Branch Assignment",
  "tags": [],
  "text": "The Innovative Consumer Products Company (ICPC) is planning     to start a top-secret project. This project consists of     $s$ subprojects. There     will be $b \\ge s$ branches     of ICPC involved in this project and ICPC wants to assign each     branch to one of the subprojects. In other words, the branches     will form $s$ disjoint     groups, with each group in charge of a subproject.At the end of each month, each branch will send a message to     every other branch in its group (a different message to each     branch). ICPC has a particular protocol for its communications.     Each branch $i$ has a     secret key $k_ i$ known     only to the branch and the ICPC headquarters. Assume branch     $i$ wants to send a     message to branch $j$.     Branch $i$ encrypts its     message with its key $k_     i$. A trusted courier picks up this message from this     branch and delivers it to the ICPC headquarters. Headquarters     decrypts the message with key $k_     i$ and re-encrypts it with key      $k_ j$. The courier then delivers this     newly encrypted message to branch      $j$, which decrypts it with its own     key $k_ j$. For security     reasons, a courier can carry only one message at a time.Given a road network and the locations of branches and the     headquarters in this network, your task is to determine the     minimum total distance that the couriers will need to travel to     deliver all the end-of-month messages, over all possible     assignments of branches to subprojects.InputMultiple test cases. Please process until EOF is reached. For each test case:The first line of input contains four integers      $n$,      $b$,      $s$, and      $r$, where      $n$ ($2     \\le n \\le 5\\, 000$) is the number of intersections,     $b$ (     $1 \\le b \\le n-1$) is the number of     branches, $s$     ($1 \\le s \\le b$) is the     number of subprojects, and      $r$ ($1     \\le r \\le 50\\, 000$) is the number of roads. The     intersections are numbered from      $1$ through      $n$. The branches are at intersections     $1$ through      $b$, and the headquarters is at     intersection $b + 1$. Each     of the next $r$ lines     contains three integers      $u$,      $v$, and      $\\ell $, indicating a one-way road     from intersection $u$ to a     different intersection $v$     ($1 \\leq u,v \\leq n$) of     length $\\ell $     ($0 \\leq \\ell \\leq 10\\,     000$). No ordered pair      $(u,v)$ appears more than once, and     from any intersection it is possible to reach every other     intersection.OutputFor each test case, display the minimum total distance that the couriers will     need to travel.ExampleInput:5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 0\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2\r\n5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 10\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2Output:13\r\n24",
  "sample_input": "Input:5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 0\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2\r\n5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 10\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2Output:13\r\n24",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FN16ASGN",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 0\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2\r\n5 4 2 10\r\n5 2 1\r\n2 5 1\r\n3 5 5\r\n4 5 10\r\n1 5 1\r\n2 3 1\r\n3 2 5\r\n2 4 5\r\n2 1 1\r\n3 4 2",
      "expected_output": "13\r\n24",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 9 3 9\n4 9 3\n3 8 4\n2 7 1\n8 8 6\n4 9 3\n6 5 2\n3 8 7\n2 6 9\n3 2 10\n4 3 2\n10 5 1 1\n7 5 9\n9 6 10\n4 2 1\n1 8 8\n7 3 4\n9 9 9\n2 7 1\n7 4 8\n10 5 6\n7 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 1 3\n5 1 4\n10 8 1\n8 8 10\n7 4 5\n3 5 1\n7 1 1\n8 5 3\n4 6 1\n4 3 7\n7 10 6\n8 3 1 9\n8 6 8\n1 8 4\n1 5 4\n10 7 8\n3 2 8\n7 9 10\n10 1 6\n9 1 3\n2 9 9\n1 5 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 4 1 8\n5 7 5\n8 10 4\n5 2 1\n6 1 9\n2 3 10\n2 4 4\n6 1 5\n8 9 7\n2 9 6\n10 2 10\n3 6 5 7\n9 3 7\n6 7 1\n6 10 7\n8 3 2\n1 8 3\n3 9 5\n4 9 5\n10 7 4\n7 6 8\n10 1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 28 76 45\n39 20 2\n17 47 83\n66 43 22\n96 17 51\n35 74 70\n28 12 26\n9 38 68\n76 59 92\n26 55 74\n41 24 21\n59 16 64 96\n67 3 77\n60 44 6\n15 24 77\n34 63 67\n77 36 1\n33 4 17\n56 81 92\n47 35 65\n8 76 97\n6 77 62",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 71 10 84\n89 30 14\n25 69 9\n79 95 22\n49 46 72\n24 81 52\n59 55 17\n30 4 73\n23 9 96\n75 46 87\n59 87 82\n74 7 98 7\n42 12 98\n90 74 1\n76 98 2\n64 3 1\n81 6 24\n1 59 62\n89 10 56\n2 13 97\n89 60 2\n47 4 7",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "100 37 71 66\n49 35 7\n98 42 38\n7 29 73\n35 57 68\n2 54 81\n74 84 58\n100 60 23\n66 10 13\n69 74 8\n18 94 57\n58 50 67 92\n20 30 32\n2 89 74\n28 79 41\n87 71 56\n11 5 86\n74 89 55\n87 91 78\n39 39 23\n11 85 25\n15 60 84",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 39 39 76\n54 77 81\n73 83 44\n24 77 82\n5 70 81\n69 80 61\n95 26 1\n34 67 86\n15 54 81\n95 99 44\n86 37 12\n45 54 14 42\n94 51 25\n58 52 12\n20 59 94\n63 78 67\n32 94 52\n46 54 39\n20 42 42\n82 67 100\n81 71 11\n28 45 78",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 62 68 81\n66 22 74\n66 37 19\n18 1 73\n28 33 39\n30 84 80\n57 100 85\n85 60 53\n6 73 65\n3 24 13\n39 57 7\n37 65 57 99\n52 60 82\n56 20 19\n84 85 36\n17 49 54\n43 87 66\n53 67 90\n92 30 96\n18 79 33\n72 7 66\n21 55 94",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "51 314 251 147\n355 248 178\n66 185 221\n267 344 180\n267 266 166\n254 110 332\n354 69 279\n312 225 434\n460 290 102\n299 470 241\n349 494 115\n201 155 200 237\n105 486 416\n374 215 108\n450 177 445\n174 408 343\n321 156 192\n336 83 500\n295 426 407\n176 147 59\n471 477 248\n334 241 341",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "349 461 419 274\n498 396 413\n76 467 373\n205 65 453\n363 353 447\n490 401 100\n493 487 56\n226 84 207\n475 348 372\n289 150 183\n452 147 104\n452 117 206 298\n228 170 300\n252 111 154\n449 151 97\n330 167 386\n305 405 313\n494 168 319\n71 359 400\n72 72 295\n57 233 144\n469 385 357",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "483 143 68 191\n195 213 406\n397 237 372\n492 480 159\n421 329 298\n148 84 424\n378 395 324\n171 291 272\n154 196 235\n476 358 328\n294 476 228\n414 278 354 381\n268 160 94\n367 231 145\n197 497 207\n221 264 368\n263 206 415\n100 465 259\n277 319 199\n196 433 191\n334 297 446\n440 345 72",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "203 350 433 308\n69 214 147\n439 84 251\n456 161 303\n170 242 153\n267 81 405\n62 348 346\n77 366 464\n171 194 51\n189 67 396\n492 67 314\n243 276 296 282\n66 337 224\n336 456 421\n129 59 335\n329 430 286\n106 231 474\n273 101 109\n417 430 310\n149 489 54\n443 390 114\n394 160 382",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "166 89 467 80\n101 310 407\n493 352 494\n356 453 361\n58 117 374\n251 320 174\n97 477 294\n414 488 457\n165 150 498\n122 437 289\n134 371 187\n418 98 94 336\n250 114 90\n313 81 349\n309 483 80\n295 262 346\n85 414 411\n162 255 445\n184 268 323\n443 315 62\n363 314 443\n440 224 255",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "400 458 125 99\n216 248 140\n410 452 120\n95 141 210\n171 228 404\n417 219 339\n299 197 159\n233 338 61\n185 322 288\n371 452 250\n262 406 280\n173 404 127 444\n230 326 227\n103 351 106\n343 313 347\n326 461 453\n150 62 287\n234 117 298\n131 158 327\n125 438 218\n77 417 376\n54 220 60",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "388 311 289 195\n310 207 163\n233 88 427\n145 483 120\n482 319 313\n131 334 443\n187 65 331\n417 158 299\n234 421 50\n268 102 305\n206 345 219\n293 409 359 132\n115 372 205\n473 186 147\n242 310 451\n160 463 407\n474 382 67\n131 288 361\n255 461 382\n365 252 250\n365 388 494\n296 393 274",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 999 1000\n999 1 999\n1000 2 2\n2 1000 1\n999 999 999\n2 999 1000\n1000 999 999\n999 2 1000\n1000 999 1000\n1 2 2\n999 1000 1000\n2 2 1000 999\n1 2 1\n2 2 999\n1 1 999\n2 2 1000\n999 999 1\n999 1000 1\n999 999 1\n999 2 1000\n999 1000 999\n1 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1 1\n1000 1 999\n999 999 999\n2 2 1\n999 2 2\n2 2 1\n999 999 2\n1 999 999\n999 1000 1\n1 999 1000\n1000 1000 2\n2 2 1000 1000\n999 999 999\n1000 2 2\n1 2 999\n999 1 2\n1000 1000 2\n1000 1 999\n999 999 1\n1000 1000 999\n2 2 999\n999 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}