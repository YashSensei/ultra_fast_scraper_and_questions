{
  "problem_code": "problems",
  "title": "Traveling by Stagecoach",
  "tags": [],
  "text": "Once upon a time, there was a traveler.He plans to travel using stagecoaches (horse wagons). His starting point and destination are fixed, but he cannot determine his route. Your job in this problem is to write a program which determines the route for him.There are several cities in the country, and a road network connecting them. If there is a road between two cities, one can travel by a stagecoach from one of them to the other. A coach ticket is needed for a coach ride. The number of horses is specified in each of the tickets. Of course, with more horses, the coach runs faster.At the starting point, the traveler has a number of coach tickets. By considering these tickets and the information on the road network, you should find the best possible route that takes him to the destination in the shortest time. The usage of coach tickets should be taken into account.The following conditions are assumed.A coach ride takes the traveler from one city to another directly connected by a road. In other words, on each arrival to a city, he must change the coach.Only one ticket can be used for a coach ride between two cities directly connected by a road.Each ticket can be used only once.The time needed for a coach ride is the distance between two cities divided by the number of horses.The time needed for the coach change should be ignored.InputThe input consists of multiple datasets, each in the following format. The last dataset is followed by a line containing five zeros (separated by a space).n m p a bt1 t2 ... tnx1 y1 z1x2 y2 z2...xp yp zpEvery input item in a dataset is a non-negative integer. If a line contains two or more input items, they are separated by a space.n is the number of coach tickets. You can assume that the number of tickets is between 1 and 8. m is the number of cities in the network. You can assume that the number of cities is between 2 and 30. p is the number of roads between cities, which may be zero.a is the city index of the starting city. b is the city index of the destination city. a is not equal to b. You can assume that all city indices in a dataset (including the above two) are between 1 and m.The second line of a dataset gives the details of coach tickets. ti is the number of horses specified in the i-th coach ticket (1 <= i <= n). You can assume that the number of horses is between 1 and 10.The following p lines give the details of roads between cities. The i-th road connects two cities with city indices xi and yi, and has a distance zi (1 <= i <= p). You can assume that the distance is between 1 and 100.No two roads connect the same pair of cities. A road never connects a city with itself. Each road can be traveled in both directions.OutputFor each dataset in the input, one line should be output as specified below. An output line should not contain extra characters such as spaces.If the traveler can reach the destination, the time needed for the best route (a route with the shortest time) should be printed. The answer should not have an error greater than 0.001. You may output any number of digits after the decimal point, provided that the above accuracy condition is satisfied.If the traveler cannot reach the destination, the string \"Impossible\" should be printed. One cannot reach the destination either when there are no routes leading to the destination, or when the number of tickets is not sufficient. Note that the first letter of \"Impossible\" is in uppercase, while the other letters are in lowercase.ExampleInput:3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0Output:30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856Note: Since the number of digits after the decimal point is not specified, the above result is not the only\r\nsolution. For example, the following result is also acceptable.30.0\r\n3.66667\r\nImpossible\r\nImpossible\r\n2.85595",
  "sample_input": "Input:3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0Output:30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856",
  "sample_output": "30.0\r\n3.66667\r\nImpossible\r\nImpossible\r\n2.85595",
  "link": "https://www.spoj.com/problems/TRSTAGE",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "3 4 3 1 4\r\n3 1 2\r\n1 2 10\r\n2 3 30\r\n3 4 20\r\n2 4 4 2 1\r\n3 1\r\n2 3 3\r\n1 3 3\r\n4 1 2\r\n4 2 5\r\n2 4 3 4 1\r\n5 5\r\n1 2 10\r\n2 3 10\r\n3 4 10\r\n1 2 0 1 2\r\n1\r\n8 5 10 1 5\r\n2 7 1 8 4 5 6 3\r\n1 2 5\r\n2 3 4\r\n3 4 7\r\n4 5 3\r\n1 3 25\r\n2 4 23\r\n3 5 22\r\n1 4 45\r\n2 5 51\r\n1 5 99\r\n0 0 0 0 0",
      "expected_output": "30.000\r\n3.667\r\nImpossible\r\nImpossible\r\n2.856",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 4 1 4 2\n3 2 2\n9 5 10\n5 1 5\n2 5 7\n9 10 6 2 8\n5 3\n4 2 7\n1 1 2\n10 8 6\n9 8 6\n3 8 8 10 3\n4 1\n8 1 1\n8 3 6\n8 10 2\n9 8 3 9 5\n5\n4 6 1 9 8\n9 7 2 4 1 3 7 10\n8 1 10\n10 1 3\n10 3 8\n10 8 2\n3 5 4\n3 7 9\n8 9 3\n6 2 9\n10 3 7\n5 8 3\n1 8 2 5 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 1 5 3\n9 9 4\n10 3 1\n10 10 2\n4 3 1\n8 6 3 10 5\n2 4\n2 8 8\n10 7 1\n4 6 8\n4 3 9\n5 2 2 1 8\n6 3\n6 3 1\n8 7 7\n1 8 7\n8 8 3 4 4\n5\n5 4 7 3 9\n8 1 2 5 3 6 8 6\n9 4 8\n8 9 9\n3 6 6\n6 6 3\n6 1 8\n3 4 9\n9 6 4\n7 10 2\n3 3 6\n3 4 4\n4 6 6 3 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3 7 5 1\n3 8 9\n6 6 9\n10 2 1\n1 8 1\n1 4 3 8 6\n8 9\n10 7 9\n7 7 6\n1 7 8\n3 2 2\n7 10 7 10 1\n7 4\n1 9 9\n7 9 8\n7 3 4\n3 7 6 7 3\n9\n6 5 1 5 6\n9 10 2 7 8 4 4 10\n6 6 2\n9 3 1\n10 6 9\n10 10 7\n9 3 7\n8 6 6\n6 4 8\n3 5 2\n3 2 1\n6 8 6\n10 2 6 6 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 28 3 49 48\n27 87 9\n21 1 92\n100 61 50\n56 83 100\n7 84 32 35 81\n46 23\n70 53 38\n85 16 90\n13 96 63\n78 72 47\n90 49 68 74 73\n27 34\n99 90 29\n63 21 76\n24 39 30\n42 10 96 72 92\n49\n95 79 32 25 13\n75 71 28 69 6 13 36 37\n78 28 61\n79 19 29\n53 91 59\n36 66 100\n16 100 78\n64 56 16\n71 33 62\n8 68 5\n97 91 30\n62 74 68\n45 96 79 75 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n49\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "20 95 36 61 24\n19 60 39\n99 66 58\n52 67 65\n6 16 35\n33 96 28 32 96\n47 51\n9 71 96\n89 11 63\n49 58 11\n76 88 96\n38 12 56 77 53\n3 89\n21 36 16\n100 89 74\n50 22 39\n5 45 15 70 32\n53\n87 47 66 78 17\n25 11 14 48 33 42 29 35\n47 81 63\n43 93 93\n8 70 60\n27 35 78\n46 40 21\n7 52 21\n92 95 12\n9 85 1\n8 13 21\n19 37 54\n89 80 39 12 39",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n53\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 17 92 68 17\n87 7 100\n58 39 84\n51 94 62\n55 59 46\n8 57 70 58 59\n9 10\n56 19 24\n78 42 24\n53 30 57\n52 45 18\n2 46 3 33 39\n64 62\n96 78 62\n87 45 2\n71 5 84\n46 4 8 54 34\n39\n68 4 94 35 27\n45 73 100 36 77 89 60 31\n72 35 90\n11 92 63\n10 94 88\n80 7 69\n84 45 29\n65 65 8\n82 87 45\n51 18 28\n87 15 11\n16 16 9\n9 44 29 88 92",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n39\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 77 41 41 21\n78 38 20\n59 82 19\n36 94 11\n57 31 72\n62 20 61 80 86\n67 43\n56 42 46\n1 13 61\n17 1 49\n99 11 60\n43 94 53 36 32\n12 23\n67 98 17\n93 100 92\n49 43 4\n21 62 100 60 72\n9\n75 47 67 93 61\n35 28 48 75 21 3 1 94\n23 44 7\n84 91 72\n26 46 97\n64 53 39\n34 16 95\n25 63 75\n74 87 19\n64 37 56\n77 97 88\n74 54 42\n73 27 33 28 42",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 55 36 37 84\n28 92 61\n87 87 14\n57 60 79\n52 32 89\n81 82 71 40 95\n78 18\n31 6 26\n35 34 42\n18 98 65\n24 34 22\n2 70 11 38 45\n35 63\n95 83 73\n30 31 35\n24 67 90\n58 52 70 28 25\n59\n58 4 62 96 43\n48 40 19 71 1 63 81 93\n32 58 46\n20 31 27\n20 17 53\n59 12 23\n26 69 98\n89 38 63\n99 16 1\n29 14 53\n70 88 92\n65 6 99\n49 62 9 76 50",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "483 488 206 445 428\n175 496 363\n472 163 280\n449 193 238\n177 404 158\n316 193 394 420 267\n99 158\n469 322 421\n441 99 329\n498 196 108\n123 58 349\n146 357 75 304 217\n399 433\n265 91 324\n67 69 296\n106 312 183\n342 483 91 150 485\n483\n250 445 82 168 135\n365 342 419 243 478 490 345 335\n464 380 270\n200 295 141\n495 303 314\n487 432 343\n389 103 328\n139 110 264\n98 311 135\n80 364 489\n370 84 54\n101 324 227\n417 84 257 154 437",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n483\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "327 168 91 194 88\n335 125 223\n351 366 272\n243 380 233\n486 475 274\n169 208 82 337 494\n356 165\n237 112 101\n460 87 231\n460 411 404\n81 201 135\n268 74 50 431 194\n459 156\n259 183 280\n206 429 221\n147 74 419\n227 417 187 318 453\n350\n119 278 363 362 426\n60 177 96 176 235 392 58 168\n256 390 110\n453 134 184\n237 127 277\n360 168 376\n481 237 266\n303 233 120\n197 383 193\n376 254 178\n423 168 271\n265 259 260\n242 477 122 147 456",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n350\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "379 488 432 383 487\n192 256 280\n238 209 120\n260 455 171\n363 174 353\n348 247 445 334 422\n478 429\n62 178 315\n386 125 427\n227 301 360\n231 88 212\n107 156 414 230 154\n177 135\n52 143 363\n57 347 104\n281 264 247\n423 314 365 279 99\n391\n336 320 426 260 157\n111 256 53 384 440 85 240 92\n437 194 475\n223 325 286\n81 367 240\n191 128 340\n289 64 258\n97 87 61\n168 356 70\n270 132 74\n117 400 399\n386 58 410\n190 113 69 445 264",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n391\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "326 326 90 367 458\n450 364 276\n435 325 248\n101 147 406\n387 137 467\n369 275 411 188 182\n119 238\n256 475 246\n135 175 111\n99 305 415\n308 299 138\n242 191 61 325 168\n74 361\n412 130 460\n243 179 300\n465 151 284\n429 367 481 264 269\n242\n128 312 431 135 344\n228 231 78 367 153 488 118 54\n197 76 497\n302 412 271\n206 260 250\n194 492 77\n329 443 220\n490 97 373\n411 432 372\n137 367 478\n199 94 295\n152 79 96\n485 372 218 181 246",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n242\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "264 368 320 411 177\n52 248 263\n166 423 160\n416 261 360\n127 92 448\n304 317 298 432 160\n342 358\n111 294 292\n372 381 291\n459 257 130\n414 214 317\n193 287 142 192 321\n324 320\n170 208 244\n315 50 294\n226 382 192\n219 271 316 207 216\n364\n129 463 474 308 52\n57 422 196 472 309 320 498 372\n127 496 192\n213 291 185\n217 378 420\n135 290 266\n291 439 71\n163 217 165\n351 87 113\n110 362 452\n473 448 255\n498 133 434\n360 199 488 482 361",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n364\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "288 178 83 382 123\n204 370 375\n231 363 317\n182 91 222\n51 370 54\n152 289 304 357 126\n324 368\n452 203 475\n185 259 202\n446 498 490\n378 484 360\n70 178 291 483 469\n101 316\n431 123 209\n352 237 400\n133 293 391\n434 139 482 405 487\n474\n242 221 173 72 317\n203 261 411 92 110 191 323 115\n273 489 403\n343 424 171\n484 335 161\n408 456 369\n65 304 362\n344 219 247\n499 132 400\n322 267 325\n123 128 67\n493 97 297\n96 302 394 403 413",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n474\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 475 490 459 203\n104 191 364\n383 456 70\n406 127 287\n310 428 489\n86 332 195 289 213\n462 159\n339 475 271\n174 465 111\n137 167 498\n267 319 172\n76 489 97 243 388\n258 79\n438 449 140\n404 460 397\n346 178 350\n225 295 204 274 334\n71\n375 210 72 194 204\n380 240 198 239 310 467 115 179\n281 148 300\n311 234 150\n287 301 133\n169 233 305\n404 399 139\n306 178 56\n409 146 52\n359 217 332\n152 238 419\n85 162 102\n437 204 360 208 465",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n71\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1000 999 1000\n2 1 1\n1000 2 1\n999 1000 1000\n1000 1000 1\n1 999 2 1 1000\n1 1\n2 1000 1\n1 1 1\n999 1000 999\n999 1000 1\n1000 2 1000 999 1\n2 999\n999 2 999\n2 1 999\n2 2 1000\n2 2 1000 1000 1000\n1000\n1 1 2 1 1\n999 999 999 1 2 1000 1000 999\n1000 1000 1000\n1000 1 1\n2 1 2\n999 1 1\n1000 999 999\n1000 999 1\n999 1000 999\n999 2 999\n999 1000 1\n999 999 2\n999 2 1 1 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 999 999 1000\n1000 999 999\n1000 999 999\n2 1000 1\n1 999 2\n2 1 999 1000 999\n999 999\n1 2 999\n2 1000 2\n2 2 2\n1000 1000 1000\n1 2 2 1 2\n1000 1\n1 1 1\n1000 1000 999\n1 1 2\n999 2 1 1 999\n1\n2 1000 2 1 2\n1000 1 999 2 2 1000 1000 2\n1 1000 2\n2 2 1\n1000 2 1000\n1 1000 1\n1 999 1000\n2 999 1000\n1000 1000 1\n999 1000 1\n999 2 1000\n1000 1000 1000\n1000 2 1 1000 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:54"
}