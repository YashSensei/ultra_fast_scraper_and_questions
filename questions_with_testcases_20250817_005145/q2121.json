{
  "problem_code": "problems",
  "title": "Peer Review",
  "tags": [],
  "text": "For scientific conferences, scientists submit papers presenting their ideas, and  then review each other’s papers to make sure only good papers are presented at the conference.  Each paper must be reviewed by at least one scientist, and scientists must not review papers written by people they collaborate with (including themselves), or review  the same paper more than once.You have been asked to write a program to check if your favorite conference is doing things right. Whether a paper is being reviewed too much, too little, or by the wrong people - the organizers must know before it is too late!InputThe first line in each test case has two integers,K(1 ≤K≤ 5) andN(1 ≤N≤ 1000).Kis the number of reviews that  each paper will receive, whileNis the number of papers to be reviewed. The conference only accepts papers with a single author, and authors can only  present a single paper at the conference.Each of the nextNlines describes an author and includes the name of the institution to which  the author belongs, followed by the list of theKpapers he or she has been requested to review.  It is assumed that researchers from the same institution collaborate with each other,  whereas researchers from different institutions don’t. All institution names are shorter than 10 characters, and contain only upper  or lowercase letters and no whitespace. Since we have as many papers as authors, papers are identified by their author’s index; paper 1 was written by the first author in the list, and paperNwas written by the last author.The end of the test cases is marked with a line containingK=0 andN=0. You  should generate no output for this line.OutputFor each test case, your program should outputNO PROBLEMS FOUND(if all rules are being followed) orPPROBLEMS FOUND, wherePis  the number of rule violations found (counting at most 1 violation per paper).  If there is exactly one rule violation overall, your program should output1 PROBLEM FOUND.Sample Input2 3\r\nUCM 2 3\r\nUAM 1 3\r\nUPM 1 2\r\n2 3\r\nUCM 2 3\r\nUAM 1 2\r\nUPM 2 2\r\n0 0Sample OutputNO PROBLEMS FOUND\r\n3 PROBLEMS FOUNDProblemsetter: Manuel Freire",
  "sample_input": "2 3\r\nUCM 2 3\r\nUAM 1 3\r\nUPM 1 2\r\n2 3\r\nUCM 2 3\r\nUAM 1 2\r\nUPM 2 2\r\n0 0",
  "sample_output": "NO PROBLEMS FOUND\r\n3 PROBLEMS FOUND",
  "link": "https://www.spoj.com/problems/REVIEW",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "2 3\r\nUCM 2 3\r\nUAM 1 3\r\nUPM 1 2\r\n2 3\r\nUCM 2 3\r\nUAM 1 2\r\nUPM 2 2\r\n0 0",
      "expected_output": "NO PROBLEMS FOUND\r\n3 PROBLEMS FOUND",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 2\n5 2\nkgq 2 1\n3 6\na 5 6\n9 8\ngnmxr 5 8\n1 2\n1 1\na 7 3\n3 7\nz 4 3\n3 5\nrav 10 7\n8 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 4\n4 5\nyki 5 3\n7 9\nhsa 1 7\n2 10\nttht 3 3\n3 9\n3 5\nh 6 9\n7 2\nctfl 2 1\n6 7\ngqfwa 1 6\n5 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6\n9 4\nipf 10 5\n5 9\nbn 10 10\n4 1\nvkfhm 4 8\n9 4\n1 4\nzx 4 3\n4 1\ncdsh 5 5\n1 2\nytk 9 2\n3 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 14\n78 15\nkhj 73 8\n9 62\nolha 2 85\n25 48\ne 31 37\n51 58\n66 38\naxf 39 19\n35 8\nbzolu 51 79\n79 90\nndiyj 32 22\n93 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "66 41\n29 10\ntti 65 58\n28 94\ntl 18 11\n32 78\nd 8 59\n50 73\n90 87\neqsyw 48 65\n9 65\nexcvf 16 2\n10 32\nzvv 19 9\n51 70",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "85 27\n78 58\ne 38 89\n30 31\nnyeju 65 86\n56 23\neune 88 49\n54 43\n67 96\nsexhb 22 73\n95 11\nybrs 2 46\n83 6\ngn 36 61\n6 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "29 87\n15 44\nab 79 56\n55 59\nhjodo 54 38\n67 28\ng 89 61\n4 15\n37 14\nemdol 83 89\n96 25\neb 83 41\n53 90\nungn 22 71\n37 59",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "100 9\n77 3\nmub 1 79\n85 7\njqrp 57 89\n70 74\nd 11 36\n99 42\n70 12\nud 37 32\n72 67\nrysvk 6 82\n64 55\nookzm 66 25\n71 82",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "183 404\n274 345\nmd 84 410\n315 255\nlhts 399 209\n458 154\nixbsr 199 366\n191 93\n257 212\nezp 68 472\n126 412\nsmvc 144 152\n77 452\nbwb 401 54\n478 150",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "331 228\n187 60\nexevd 375 378\n201 272\nzffnx 205 364\n332 495\nky 229 259\n89 183\n376 223\npm 237 367\n151 170\nnyqmz 372 185\n149 209\nnjzql 109 407\n305 449",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "360 55\n393 106\nhlseg 116 301\n395 415\nzfih 123 475\n361 340\nurzp 336 169\n464 380\n57 381\njtbjd 411 389\n113 74\nmbcv 428 378\n193 297\nlilx 304 380\n426 304",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "194 240\n228 293\ntq 82 101\n165 391\ncda 144 174\n328 179\noi 170 390\n253 264\n493 223\nldw 291 101\n55 475\nzso 231 190\n411 498\nhly 75 219\n244 167",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "158 185\n475 317\nfh 388 50\n316 319\nhv 159 447\n143 452\nl 392 284\n261 438\n169 157\nchpn 102 406\n391 173\nh 415 216\n437 249\nsh 110 407\n455 433",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "290 148\n257 493\no 222 442\n93 309\nudbiu 74 164\n91 174\nd 383 200\n157 215\n122 251\nsp 135 291\n78 252\nik 219 221\n205 98\nhrw 320 386\n300 111",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "459 85\n275 166\ni 362 374\n416 483\nher 73 197\n146 88\nu 363 175\n229 321\n86 281\nburg 332 239\n240 58\nvuj 103 409\n63 212\nqyy 257 177\n388 115",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\nx 1000 1000\n1000 1000\ndiwyi 1000 1000\n1000 1000\nzhzb 1000 1000\n1000 1000\n1000 1000\nuf 1000 1000\n1000 1000\nqs 1000 1000\n1000 1000\nni 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\nsan 1000 1000\n1000 1000\nrmzsc 1000 1000\n1000 1000\ndlqhu 1000 1000\n1000 1000\n1000 1000\nko 1000 1000\n1000 1000\nsr 1000 1000\n1000 1000\nem 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 999\nef 1000 999\n1000 1000\nnviop 2 1\n1 1\nf 999 1\n999 2\n2 2\ncccfx 1000 1000\n999 1000\ng 2 1\n2 999\nnuc 2 1000\n999 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n1000 999\neiwqg 1 1000\n1000 2\nou 2 1000\n1000 1\nn 999 2\n1000 999\n1000 2\nq 1 1000\n1000 999\nynqwd 2 1000\n1000 1\nsflm 999 1\n1 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:26"
}