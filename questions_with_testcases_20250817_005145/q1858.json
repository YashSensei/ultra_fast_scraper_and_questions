{
  "problem_code": "problems",
  "title": "Party Schedule",
  "tags": [],
  "text": "You just received another bill which you cannot pay because you lack the money.\r\nUnfortunately, this is not the first time to happen, and now you decide to investigate the cause of your constant monetary shortness. The reason is quite obvious: the lion's share of your money routinely disappears at the entrance of party localities.You make up your mind to solve the problem where it arises, namely at the parties themselves. You introduce a limit for your party budget and try to have the most possible fun with regard to this limit.You inquire beforehand about the entrance fee to each party and estimate how much fun you might have there. The list is readily compiled, but how do you actually pick the parties that give you the most fun and do not exceed your budget?Write a program which finds this optimal set of parties that offer the most fun. Keep in mind that your budget need not necessarily be reached exactly. Achieve the highest possible fun level, and do not spend more money than is absolutely necessary.InputThe first line of the input specifies your party budget and the number n of parties.The following n lines contain two numbers each. The first number indicates the entrance fee of each party. Parties cost between 5 and 25 francs. The second number indicates the amount of fun of each party, given as an integer number ranging from 0 to 10.The budget will not exceed 500 and there will be at most 100 parties. All numbers are separated by a single space.There are many test cases. Input ends with 0 0.OutputFor each test case your program must output the sum of the entrance fees and the sum of all fun values of an optimal solution. Both numbers must be separated by a single space.ExampleSample input:50 10\r\n12 3\r\n15 8\r\n16 9\r\n16 6\r\n10 2\r\n21 9\r\n18 4\r\n12 4\r\n17 8\r\n18 9 \r\n\r\n50 10\r\n13 8\r\n19 10\r\n16 8\r\n12 9\r\n10 2\r\n12 8\r\n13 5\r\n15 5\r\n11 7\r\n16 2\r\n\r\n0 0Sample output:49 26\r\n48 32",
  "sample_input": "Sample input:50 10\r\n12 3\r\n15 8\r\n16 9\r\n16 6\r\n10 2\r\n21 9\r\n18 4\r\n12 4\r\n17 8\r\n18 9 \r\n\r\n50 10\r\n13 8\r\n19 10\r\n16 8\r\n12 9\r\n10 2\r\n12 8\r\n13 5\r\n15 5\r\n11 7\r\n16 2\r\n\r\n0 0Sample output:49 26\r\n48 32",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PARTY",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "Sample input:50 10\r\n12 3\r\n15 8\r\n16 9\r\n16 6\r\n10 2\r\n21 9\r\n18 4\r\n12 4\r\n17 8\r\n18 9 \r\n\r\n50 10\r\n13 8\r\n19 10\r\n16 8\r\n12 9\r\n10 2\r\n12 8\r\n13 5\r\n15 5\r\n11 7\r\n16 2\r\n\r\n0 0Sample output:49 26\r\n48 32",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 9\nui dh 7\n2 4\n8 2\n2 8\n4 5\n8 10\n8 5\n5 4\n5 6\n10 7\n2 3\n9 5\n1 6\n7 10\n4 9\n3 2\n8 10\n1 9\n1 7\n4 4\n3 8\n8 5\n10 8 8 9\n7 xnjrsw lfpihzy 1\n5 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\ngizbwl ecina 7\n10 8\n4 5\n8 5\n8 7\n7 5\n1 10\n1 2\n7 7\n9 2\n1 4\n7 1\n4 3\n9 3\n8 6\n8 8\n5 7\n5 6\n8 2\n10 1\n7 5\n3 7\n4 2 2 8\n10 vnb qq 10\n10 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 8\nkw xroi 7\n7 5\n5 4\n6 8\n1 4\n3 6\n7 4\n2 4\n5 10\n9 3\n5 6\n10 9\n2 10\n6 8\n7 6\n9 3\n10 10\n7 2\n1 5\n3 2\n4 6\n1 10\n4 7 7 1\n10 qh e 5\n3 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 79\ntesu bhvut 36\n98 14\n37 40\n62 47\n80 41\n12 20\n1 38\n15 28\n55 49\n19 83\n58 63\n100 13\n58 63\n66 61\n54 52\n29 93\n35 63\n76 15\n35 42\n89 4\n48 57\n42 92\n95 44 29 39\n54 zngppd p 2\n11 32",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "68 63\nvh v 5\n93 89\n64 16\n12 30\n91 55\n54 21\n57 6\n61 10\n84 66\n57 77\n38 49\n42 38\n92 85\n31 66\n73 4\n41 45\n73 38\n89 93\n77 91\n99 1\n67 60\n52 55\n62 35 83 80\n22 ttsc spj 3\n42 17",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 11\nvf qp 35\n61 77\n60 48\n28 20\n58 30\n5 10\n97 24\n60 75\n72 99\n13 86\n28 14\n9 35\n35 30\n4 77\n70 93\n2 42\n87 86\n58 46\n90 85\n14 38\n100 35\n51 44\n62 76 64 44\n88 yckumk nm 10\n13 13",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "30 40\nonlred nxylx 97\n40 90\n7 44\n71 2\n8 73\n16 99\n69 100\n93 4\n50 87\n45 33\n65 23\n85 41\n52 29\n57 42\n57 5\n27 15\n44 90\n13 71\n83 82\n60 51\n84 80\n19 70\n75 61 33 7\n72 bgmbwp ouwhtmpkh 50\n85 34",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "36 56\nvl k 13\n1 2\n9 17\n13 11\n78 11\n77 12\n71 52\n15 23\n53 67\n3 49\n10 58\n51 72\n85 85\n18 21\n55 3\n16 54\n63 86\n65 11\n41 45\n56 21\n35 33\n81 34\n98 78 27 61\n67 oudqx w 3\n66 80",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "120 313\nx wdhxdyb 68\n186 444\n469 165\n213 240\n451 293\n127 485\n187 188\n235 312\n93 445\n113 163\n116 453\n485 202\n123 434\n109 204\n410 470\n85 339\n179 127\n76 218\n317 136\n228 55\n154 416\n281 293\n463 484 92 69\n332 cuyxxt q 364\n113 400",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "271 144\np clbzeokk 183\n432 233\n196 458\n433 135\n139 54\n354 369\n418 453\n451 129\n392 374\n118 238\n54 382\n389 346\n184 350\n279 249\n117 287\n101 92\n134 227\n75 122\n163 94\n351 406\n417 191\n319 363\n404 150 210 416\n261 guuf sdigag 146\n147 220",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "166 449\nxrqvp kmx 126\n275 425\n108 68\n432 325\n62 429\n365 312\n191 401\n154 67\n312 364\n435 179\n112 196\n474 408\n240 199\n488 184\n356 251\n319 369\n76 456\n434 426\n271 111\n307 496\n394 458\n474 450\n418 211 295 390\n56 sz vlpgkbq 315\n248 91",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "416 127\nlzydad lwbiztcz 289\n153 295\n218 334\n149 165\n236 482\n150 452\n486 309\n415 279\n474 167\n115 129\n113 110\n440 262\n57 188\n140 261\n319 188\n258 322\n105 149\n427 157\n57 246\n274 98\n222 280\n482 173\n283 117 51 265\n226 ji mpkyanca 276\n415 79",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "418 256\nr ixyj 301\n405 68\n249 247\n178 115\n62 106\n317 332\n292 185\n453 462\n347 240\n360 313\n489 108\n93 101\n53 456\n72 390\n183 338\n446 262\n492 313\n244 118\n113 155\n325 294\n184 322\n429 97\n132 432 481 440\n374 rogulet yewtaurbl 441\n226 385",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "311 101\nxcfp pdzhfj 253\n123 144\n438 412\n296 283\n134 369\n321 159\n258 293\n70 308\n376 71\n384 230\n148 149\n449 378\n467 208\n496 297\n426 347\n482 70\n71 482\n209 482\n72 498\n200 451\n108 420\n157 313\n197 411 54 378\n220 uxtaelo ngkswxt 52\n403 137",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "321 251\nbuiex p 478\n339 222\n92 177\n450 64\n200 323\n464 149\n477 394\n490 225\n85 74\n253 415\n364 115\n386 250\n171 435\n412 208\n300 50\n355 84\n319 248\n187 364\n232 317\n143 176\n59 123\n254 344\n99 212 355 142\n417 sfkysug wszznf 145\n407 139",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nj aanmtglh 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 kpinrj qgffbjqj 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nmmupl feanktd 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 ask hxjold 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\nkz icfflz 1\n999 1000\n2 2\n1 1\n2 2\n999 2\n1000 1\n1 999\n2 1000\n1 1000\n1 1000\n2 1\n999 2\n2 999\n1000 999\n2 999\n2 1000\n1 1000\n2 1\n1000 1000\n1 1\n999 999\n999 1 1000 1000\n1000 ibbxp qlct 999\n1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999\nokqpfd d 2\n1 2\n999 2\n999 2\n1000 2\n2 1\n1000 999\n2 2\n1 999\n999 999\n1000 2\n2 1000\n1000 1000\n1000 1000\n1000 999\n999 999\n2 999\n2 999\n999 1000\n1 1000\n1 1000\n999 999\n1 2 1 999\n1 dcxb iw 2\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}