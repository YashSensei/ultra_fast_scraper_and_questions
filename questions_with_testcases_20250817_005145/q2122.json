{
  "problem_code": "problems",
  "title": "Regular Convex Polygon",
  "tags": [],
  "text": "A regular convex polygon is a polygon where each side has the same length, and all interior angles are equal and less than 180 degrees. A square, for example, is a regular convex polygon. You are given three points which are vertices of a regular convex polygonR; can you determine the minimum number of vertices thatRmust have?InputEach test case consists of three lines. Lineiconsists of two floating point valuesxiandyi(−104≤x1,y1≤ 104) where (xi,yi) are the coordinates of a vertex ofR. The coordinates are given with a precision of 10−6, i.e., they differ from the exact coordinates by at most 10−6. You may assume that for each test case the Euclidean distance between any two given points is at least 1, andRhas at most 1000 vertices. The input will finish with a line containing the wordEND.OutputFor each test case, print one line with the minimum number of vertices thatRmust have.Sample Input-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nENDSample Output3\r\n4Problem setter: Adrian Kuegel",
  "sample_input": "-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nEND",
  "sample_output": "3\r\n4",
  "link": "https://www.spoj.com/problems/REGPOLYG",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "-1385.736326 -146.954822\r\n430.000292 -2041.361203\r\n1162.736034 478.316025\r\n0.000000 4147.000000\r\n-4147.000000 0.000000\r\n0.000000 -4147.000000\r\nEND",
      "expected_output": "3\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 4\n9 9\n7 2\n8 1\n1 5\n1 4\nvz",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n5 2\n3 10\n3 7\n7 5\n2 2\nh",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7\n9 4\n10 5\n3 10\n10 7\n10 2\nqfxt",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "99 37\n38 84\n83 54\n95 74\n100 68\n53 40\nq",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 58\n93 59\n92 60\n54 16\n74 21\n70 97\nyhq",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 31\n72 43\n93 38\n66 60\n43 11\n40 41\nsizh",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 61\n13 67\n58 8\n45 61\n12 45\n20 95\nsquxn",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "77 19\n20 46\n2 28\n54 92\n85 28\n4 5\nnwap",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "113 297\n165 163\n57 352\n78 184\n336 215\n430 255\nkm",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "307 76\n396 477\n101 146\n476 406\n229 290\n310 239\nh",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "212 319\n419 131\n326 186\n377 66\n146 440\n427 298\nlll",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "499 247\n138 454\n182 484\n377 84\n339 234\n349 422\nftal",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "408 101\n71 493\n372 180\n351 51\n415 110\n223 219\nulz",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "100 472\n454 390\n214 108\n458 402\n205 348\n398 309\nw",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "459 259\n104 266\n294 223\n434 142\n370 446\n417 251\nt",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\nveoeam",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\ncpox",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 2\n1000 1\n1000 999\n1000 2\n1000 1\noe",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 1\n1000 1000\n999 2\n1 999\n999 1\nc",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}