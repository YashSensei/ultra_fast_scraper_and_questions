{
  "problem_code": "problems",
  "title": "Very Friends",
  "tags": [],
  "text": "NOTICE: The test cases for this problem are not as hard as intended. If you've solved this problem, and think your solution is up for it, tryVFRIEND2!You are creating a new soical network for dogs. Wow. The dogs don't have many possibilities for interacting with your website, but they can bark how many friends they want. E.g. if a dog wants to have much 8 friends it will bark 8 times, and if it doesn't want any friends, it'll just stay quiet.After spending a good year of your life collecting these barks, you are finally ready to assign a friend list for each dog. The only problem is: You are not sure whether it is actually possible. Thus before you proceed you would like to write a program, that given a list ofNwisheswi, outputsHAPPYif it is possible to make a friend list for each dogiof lengthwi, orSADif some dog will have to get more or fewer friends than it wished for.Notice: Being friends is considered an irreflexive, symetric relation.Update: If you manage to solve this problem much efficiently, have a look at VFRIEND2, which is a so harder version of this problem.InputThe first line will contain a single integerT- the number of test cases to process.Each following lines will start with an integer0 ≤ N ≤ 105followed by an ordered list ofNwishes0 ≤ wi≤ 105.OutputWrite the answer -HAPPYorSAD- for each test case on a separate line.ExampleInput:33 0 1 15 0 1 2 3 46 1 1 2 2 3 3Output:HAPPYSADHAPPYExplanationIn the first case we can make dog 2 and 3 be friends.In the second case no assignment that works, since dog 5 would have to be friends with everyone, but dog 1 doesn't want that.",
  "sample_input": "Input:33 0 1 15 0 1 2 3 46 1 1 2 2 3 3Output:HAPPYSADHAPPY",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VFRIENDS",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "33 0 1 15 0 1 2 3 46 1 1 2 2 3 3",
      "expected_output": "HAPPYSADHAPPY",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 5 10 8 4 9 1 1 2 3 6 5 4 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 1 5 3 7 1 8 8 7 5 4 10 1 1 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 7 10 5 1 4 2 9 8 4 4 1 9 2 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 2 10 89 56 72 80 93 89 49 39 71 72 32 30",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 33 85 53 73 52 73 80 48 21 68 98 4 78 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 12 16 33 93 10 31 2 49 53 70 88 12 100 45",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 2 35 26 48 52 28 80 3 97 19 53 36 52 53",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 79 66 97 12 41 88 37 95 38 31 6 10 67 25",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "26 41 37 46 9 51 34 26 27 21 18 47 8 31 23",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "20 47 38 8 17 31 35 18 17 44 46 39 27 50 10",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "11 13 37 36 30 19 40 47 39 9 31 24 44 40 43",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "38 6 28 50 39 28 8 21 18 42 28 5 6 22 30",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 42 44 24 8 48 44 21 18 6 12 39 7 24 24",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "30 51 20 24 30 23 21 43 36 16 21 32 47 19 44",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "36 47 7 23 10 17 7 23 39 7 38 10 45 42 38",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 105 104 105 1 105 105 105 2 1 105 104 105 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 104 105 1 105 104 1 1 105 105 104 105 2 1 104",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}