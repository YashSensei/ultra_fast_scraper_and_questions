{
  "problem_code": "problems",
  "title": "Update Sub",
  "tags": [],
  "text": "Updating and querying 1 dimensional arrays is a popular question. How about updating and querying sub-matrices of a matrix?A sub-matrix will be depicted as (a, b), (c, d). This implies that it will include all the cells (x, y) such that a ≤ x ≤ c and b ≤ y ≤ d.The matrix is indexed from [1..N][1..N], where N is the size.You are given a matrix of size N×N, with each element initially set to 0. There are M queries and each query can be of one of the two types:1 x1 y1 x2 y2: This query asks you to return the sum of all the elements in the sub-matrix (x1, y1), (x2, y2).2 x1 y1 x2 y2 K: This query asks you to add K to each element in the sub-matrix (x1, y1), (x2, y2).InputThe first line of input contains N, M.The next M lines contain queries in the same forms as stated above.You may assume that x1 ≤ x2 and y1 ≤ y2 for all queries.Also N ≤ 1000 and M ≤ 105. K ≤ 109OutputThe answer to all the queries wherein you need to return the sum of elements in the sub-matrix, i.e., all the queries of type 1.Sample Test CaseInput:5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3Output:16024Note:Please be careful with certain languages as the output may exceed the range of the data type used to store it.  Please use 64-bit integers to store the results. For example, long long in C/C++.",
  "sample_input": "Input:5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3Output:16024",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/USUBQSUB",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "5 52 2 2 4 4 41 1 1 3 32 5 5 5 5 31 1 1 1 21 2 2 5 3",
      "expected_output": "16024",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 6 4 2 10 7 10 7 8 2 1 9 9 2 4 9 6 7 7 8 8 5 7 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 4 2 6 3 7 3 5 2 2 2 3 9 10 8 9 8 8 5 3 1 4 8 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 9 1 9 6 8 1 1 7 7 7 4 9 1 5 10 7 8 2 9 7 1 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 17 74 6 26 18 64 37 83 53 83 76 87 7 92 3 14 100 59 85 9 34 2 92",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "100 93 86 68 30 47 15 16 34 23 57 91 44 33 81 67 99 53 76 46 24 73 29 14",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "89 6 4 96 83 24 7 94 3 63 16 74 62 27 5 28 48 100 54 26 34 11 87 88",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "83 82 90 12 82 34 37 10 58 3 5 95 3 79 93 79 12 25 37 48 87 87 86 88",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 18 99 73 13 41 80 95 70 96 45 38 6 99 16 48 60 17 100 18 98 31 93 44",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "491 383 127 291 71 271 201 122 338 335 50 249 109 121 64 222 327 162 108 429 132 226 430 244",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "356 309 63 434 469 340 136 403 442 497 469 422 77 407 61 299 296 218 361 67 133 317 178 108",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "199 295 262 196 301 282 231 361 302 241 83 216 336 237 407 142 316 95 348 275 432 395 213 200",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "113 177 386 313 386 150 352 203 497 334 126 189 277 171 56 98 302 347 104 186 126 251 495 296",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "214 333 185 82 433 95 145 276 131 116 194 445 58 319 314 387 142 370 303 164 448 151 393 442",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "197 296 325 279 461 397 152 168 62 477 78 337 66 499 441 83 409 217 368 148 417 450 300 58",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "290 140 276 212 255 214 433 294 468 460 268 182 450 107 202 182 129 425 406 464 349 490 349 213",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 999 1000 1 1 1 1000 2 999 1 1000 1000 2 1000 1 1 1000 1 1 1 999 999 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 1 1000 1000 999 1000 1 2 1 1000 1 999 999 1000 999 999 1000 1 2 1 2 1 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:11"
}