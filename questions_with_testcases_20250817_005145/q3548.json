{
  "problem_code": "problems",
  "title": "Cloud Computing",
  "tags": [],
  "text": "The concept of cloud computing has become fairly popular lately. One of the main kinds of cloud computing is known as IaaS (Infrastructure as a Service), in which servers can be rented and managed via the Internet.Cloud, Inc. is an IaaS provider. The company is designing a new data center for its clients. Through some research, they found out that their clients, as a whole, need K servers, each of which needs to be able to withstand a certain level of demand. If we assume that the cost of a server always grows with the demand which that server can process, the best solution in terms of cost is to buy K servers explicitly designed to meet the exact requirements of the corresponding client.However, having K different hardware configurations in the data center is extremely problematic for the system administrators. To simplify, they demand that no more than L distinct server types be bought. A server that meets a demand c also meets any demand smaller than c.A possible solution is to buy only one server type that is able to meet the highest client demand, as it will also be able to meet all other demands. On the other hand, the cost of such a solution can be prohibitively high. Considering that you can buy up to L different kinds of servers, there's likely a better option. For instance, suppose that there are 3 clients, with demands 3, 7 and 16. Assume that the cost of a server meeting demands up to 3 is of R$ 1500 (1500 Brazilian reais), the cost of a server that meets demand 7 is R$ 5500 and the cost of a server that meets demand 16 is R$ 19200. If you want to buy at most 2 kinds of servers to satisfy all clients, you have four possibilities:Buying three servers with capacity 16, at a total cost of R$ 57600;Buying two servers with capacity 16 and one with capacity 7, at a total cost of R$ 43900;Buying two servers with capacity 16 and one with capacity 3, at a total cost of R$ 39900;Buying one server with capacity 16 and two servers with capacity 7, at a total cost of R$ 30200.Among these options, the one with the least total cost is the last one.You will receive a list of K requested demands and the price of a server type that meets the corresponding demand. Determine the lowest total cost to buy K servers in a way such that all requested demands are met and at most L different types of servers are bought.NotesEach server is used by one and only one client. A server with capacity 4 maynotbe used by two clients with demand 2 each.Let Diand Djbe two demands, and Pi, Pjprices associated to the servers that meet those demands. If Di< Dj, then Pi≤ Pj.InputThere are several test cases.Each test case begins with a line containing integers K and L, respectively the number of servers to be bought and the maximum allowed number of distinct server types (1 ≤ L ≤ K ≤ 2000). K lines follow, each of which containing two integers D and P, respectively the demand of a client and the smallest price of a server which meets that demand (1 ≤ D ≤ 2000, 1 ≤ P ≤ 100000). If the same value of D is present on more than one line, then both lines will have the same value for P.The input ends when K = L = 0, and this case should not be processed.OutputFor each test case, print a line with an integer T, which is the lowest total cost obtainable.ExampleInput:10 3\r\n1 1\r\n2 4\r\n3 5\r\n4 7\r\n5 8\r\n6 12\r\n7 13\r\n8 18\r\n9 19\r\n10 21\r\n0 0Output:129The best option to buy servers of 3 kinds that meet the required demands is to buy:3 servers of capacity 10, which account for client demands 10, 9 and 8;2 servers of capacity 7, which account for client demands 7 and 6;5 servers of capacity 5, which account for all other demands.Total cost is 3*21 + 2*13 + 5*8 = 129.",
  "sample_input": "Input:10 3\r\n1 1\r\n2 4\r\n3 5\r\n4 7\r\n5 8\r\n6 12\r\n7 13\r\n8 18\r\n9 19\r\n10 21\r\n0 0Output:129",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CLOUDMG",
  "scraped_at": "2025-08-17 00:34:27",
  "test_cases": [
    {
      "input": "10 3\r\n1 1\r\n2 4\r\n3 5\r\n4 7\r\n5 8\r\n6 12\r\n7 13\r\n8 18\r\n9 19\r\n10 21\r\n0 0",
      "expected_output": "129",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\n2 9\n7 4\n10 1\n6 6\n10 5\n3 8\n1 9\n7 7\n4 6\n8 5\n8 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n4 2\n5 4\n1 10\n5 3\n7 10\n2 2\n2 3\n4 7\n2 4\n1 1\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n3 2\n7 2\n10 6\n7 10\n2 7\n7 6\n4 3\n8 2\n1 3\n7 4\n7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 25\n94 1\n60 81\n48 99\n76 48\n62 54\n47 26\n37 42\n63 82\n52 47\n41 19\n23 97",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "58 61\n2 26\n28 85\n55 55\n53 16\n30 68\n75 5\n46 97\n12 67\n19 50\n99 1\n100 33",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "93 73\n59 96\n41 70\n11 95\n27 72\n94 67\n49 27\n46 67\n63 21\n29 73\n96 34\n30 68",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 69\n37 8\n62 89\n36 60\n21 79\n55 85\n81 7\n57 72\n60 49\n5 20\n94 13\n82 78",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 15\n77 19\n25 81\n38 7\n69 77\n60 89\n28 52\n54 56\n96 6\n68 47\n47 77\n54 63",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "172 447\n217 431\n279 413\n84 51\n391 237\n472 87\n245 302\n421 466\n240 211\n137 62\n193 138\n162 384",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "399 192\n65 75\n239 124\n331 422\n175 184\n208 326\n287 145\n145 492\n431 353\n254 103\n386 422\n115 387",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "188 438\n104 121\n263 122\n59 280\n315 496\n62 268\n399 279\n493 213\n55 425\n123 155\n269 278\n157 414",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "419 202\n55 408\n398 403\n427 121\n86 414\n401 464\n212 372\n498 472\n404 426\n363 128\n274 277\n472 392",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "354 171\n285 155\n412 157\n172 291\n485 376\n286 266\n450 379\n401 104\n494 424\n97 471\n313 255\n104 298",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "314 86\n248 162\n366 84\n461 263\n378 201\n221 109\n260 307\n481 335\n204 393\n61 69\n268 478\n187 105",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "189 496\n77 482\n62 230\n384 289\n439 157\n111 242\n86 349\n390 299\n232 195\n154 461\n196 261\n363 149",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000\n2 1000\n2 2\n2 1000\n2 1\n2 999\n999 1\n1 2\n2 1\n1000 1\n2 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n2 1000\n2 2\n2 999\n2 1\n999 1000\n999 999\n1 2\n1000 1\n999 2\n1000 2\n1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}