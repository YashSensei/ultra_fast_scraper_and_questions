{
  "problem_code": "problems",
  "title": "Cross Mountain Climb Extreme",
  "tags": [],
  "text": "Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier. To do so, we will model the mountain as follows: the mountain consists of n adjacent stacks of stones, and each of the stacks is hihigh. The successive height differences are therefore hi+1− hi(for 1 ≤ i ≤ n−1). We would like all absolute values of these height differences to be smaller than or equal to some number d.We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number?InputOn the first line one positive number: the number of test cases, at most 50. After that, for each test case:One line with two integers n (2 ≤ n ≤ 10000) and d (0 ≤ d ≤ 109): the number of stacks of stones and the maximum allowed height difference.One line with n integers hi (0 ≤ hi≤ 109): the heights of the stacks.OutputFor each test case, output one line with the minimum number of stones that have to be added or removed, or “impossible” if it is impossible to achieve the goal.ExampleInput:310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3Output:6impossible4",
  "sample_input": "Input:310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3Output:6impossible4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CCROSSX",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "310 24 5 10 6 6 9 4 7 9 83 16 4 04 23 0 6 3",
      "expected_output": "6impossible4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 4 4 9 10 7 1 8 3 10 5 8 3 3 4 5 1 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 10 2 2 2 1 8 2 6 8 4 1 1 6 10 7 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 8 3 6 6 3 2 2 2 2 9 6 4 6 5 3 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 83 23 6 52 76 31 15 65 4 74 2 37 5 89 30 43 60",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "64 64 68 76 100 61 67 34 88 46 92 5 49 29 92 13 62 67",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "8 79 13 12 98 71 51 11 32 9 83 45 15 63 7 40 39 23",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 36 27 52 13 49 55 16 5 24 48 55 91 98 22 66 50 2",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "100 15 59 87 25 25 86 48 28 50 79 94 92 91 90 64 18 75",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1239 4028 3256 2715 1498 3758 3719 3373 4161 1789 4818 3789 1003 2653 3025 3362 2661 923",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4124 3086 2221 4611 1487 3031 1165 3130 1015 2817 3026 3250 515 1363 2301 3236 1542 2298",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4007 3611 3653 3700 3255 1246 3376 3981 4685 3778 4558 1706 3782 3967 1508 1755 1996 4021",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1135 2180 4369 1692 2542 941 3041 2262 3020 868 2410 3006 834 1411 3901 3288 2154 2359",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2355 3597 1744 1012 1526 2768 2912 4479 675 3952 3548 4377 1800 1014 1538 3892 3649 4952",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "539 3791 701 2036 2538 4336 1105 3308 3625 2984 1499 4628 1460 1653 4069 2665 4325 3600",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "4982 2808 3973 907 668 2513 705 1791 4212 4473 3865 3089 2285 4414 4078 3437 4374 2415",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1 1 2 1 9999 9999 9999 2 1 1 1 2 1 9999 9999 10000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9999 10000 9999 10000 10000 10000 1 10000 9999 2 9999 9999 1 1 1 2 10000 9999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:08"
}