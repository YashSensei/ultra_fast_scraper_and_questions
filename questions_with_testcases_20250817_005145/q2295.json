{
  "problem_code": "problems",
  "title": "brownie",
  "tags": [],
  "text": "Bessie has baked a rectangular brownie that can be thought of as\r\nan R×C grid (1 ≤ R ≤ 500; 1 ≤ C ≤ 500) of little brownie squares.\r\nThe square at row i, column j contains Nij(0 ≤ Nij≤ 4,000)\r\nchocolate chips.Bessie wants to partition the brownie up into A×B chunks (1 ≤ A\r\n≤ R; 1 ≤ B ≤ C): one for each of the A×B cows. The brownie is\r\ncut by first making A-1 horizontal cuts (always along integer\r\ncoordinates) to divide the brownie into A strips. Then cut each\r\nstrip ×independently× with B-1 vertical cuts, also on integer\r\nboundaries. The other A×B-1 cows then each choose a brownie piece,\r\nleaving the last chunk for Bessie. Being greedy, they leave Bessie\r\nthe brownie that has the least number of chocolate chips on it.Determine the maximum number of chocolate chips Bessie can receive,\r\nassuming she cuts the brownies optimally.As an example, consider a 5 row × 4 column brownie with chips\r\ndistributed like this:1 2 2 1\r\n         3 1 1 1\r\n         2 0 1 3\r\n         1 1 1 1\r\n         1 1 1 1Bessie must partition the brownie into 4 horizontal strips, each\r\nwith two pieces. Bessie can cut the brownie like this:1 2 | 2 1\r\n       ---------\r\n       3 | 1 1 1\r\n       ---------\r\n       2 0 1 | 3\r\n       ---------\r\n       1 1 | 1 1\r\n       1 1 | 1 1Thus, when the other greedy cows take their brownie piece, Bessie\r\nstill gets 3 chocolate chips.InputLine 1: Four space-separated integers: R, C, A, and B.Lines 2 to R+1: Line i+1 contains C space-separated integers: Ni,1... Ni,c.OutputA single integer giving the required answer.ExampleInput:5 4 4 2\r\n1 2 2 1\r\n3 1 1 1\r\n2 0 1 3\r\n1 1 1 1\r\n1 1 1 1Output:3Problem was added from USACO.",
  "sample_input": "1 2 2 1\r\n         3 1 1 1\r\n         2 0 1 3\r\n         1 1 1 1\r\n         1 1 1 1",
  "sample_output": "1 2 | 2 1\r\n       ---------\r\n       3 | 1 1 1\r\n       ---------\r\n       2 0 1 | 3\r\n       ---------\r\n       1 1 | 1 1\r\n       1 1 | 1 1",
  "link": "https://www.spoj.com/problems/XIXO",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "1 2 2 1\r\n         3 1 1 1\r\n         2 0 1 3\r\n         1 1 1 1\r\n         1 1 1 1",
      "expected_output": "1 2 | 2 1\r\n       ---------\r\n       3 | 1 1 1\r\n       ---------\r\n       2 0 1 | 3\r\n       ---------\r\n       1 1 | 1 1\r\n       1 1 | 1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 1 4 2\n4 10 10 10\n7 9 4 6\n10 6 9 10\n9 2 1 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 1 6\n4 3 2 4\n9 10 5 10\n2 8 6 2\n6 8 2 3",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 4 10\n4 10 5 6\n7 10 2 7\n5 1 6 7\n9 4 3 6",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "81 64 67 62\n75 60 33 85\n72 86 93 33\n77 4 54 40\n49 79 24 40",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "88 94 1 23\n4 10 72 90\n56 11 82 62\n31 12 3 78\n94 99 55 90",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "98 64 21 78\n88 17 33 66\n46 93 99 41\n99 18 66 74\n84 96 86 16",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 86 21 93\n74 29 70 79\n84 71 14 95\n88 95 42 81\n72 54 90 88",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 94 75 89\n74 59 89 43\n25 17 83 76\n14 5 3 23\n70 67 15 95",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "244 338 235 186\n395 247 345 409\n89 231 132 350\n314 157 476 415\n82 348 322 367",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "199 471 159 247\n324 340 493 311\n144 155 83 304\n178 284 428 403\n72 350 73 414",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "152 274 225 361\n201 191 212 301\n160 379 475 182\n106 493 126 282\n118 302 129 382",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "372 479 172 383\n399 237 437 344\n451 272 252 50\n314 288 163 276\n154 138 348 60",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "281 416 65 460\n93 388 464 398\n295 152 149 433\n367 388 161 327\n405 289 105 373",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "178 225 227 252\n124 256 370 342\n420 132 233 243\n231 131 319 248\n405 141 395 247",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "477 485 306 205\n463 332 372 108\n232 199 90 460\n392 447 210 478\n486 353 316 282",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1000 2\n999 2 999 2\n2 1000 2 2\n999 1 1 1000\n2 2 2 999",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 999 1\n1000 2 999 2\n1 1000 2 1000\n1000 999 999 999\n1 1000 999 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:31"
}