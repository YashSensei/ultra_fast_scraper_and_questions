{
  "problem_code": "problems",
  "title": "Divide Polygon (HARD)",
  "tags": [],
  "text": "This is hard version ofDTPOLY.Determine the number of ways to cut a convex polygon withNvertices if the only cuts allowed are from vertex to vertex, each cut divides exactly one polygon into exactly two polygons, and you must end up with exactlyKpolygons. Consider each vertex distinct. For example, there are three ways to cut a square - the two diagonals and not cutting at all - but only two ways to cut it to form 2 polygons, and only one way to cut it to form 1 polygon. The order of cuts does not matter. Since the number of ways can be very large, you should return the number taken moduloM.InputInput contains several test cases, i-th line consists of 3 integers:Ni(3 ≤Ni,ΣNi≤ 108over all test cases),Ki(1 ≤Ki≤Ni- 2) andMi(1 <Mi< 260), all pairs (Ni,Ki) are different.OutputOn the i-th line print the number of different ways to cut the polygon withNivertices intoKipieces moduloMi.ExampleInput:4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049Output:2\r\n21\r\n984650007\r\n780127215155143528",
  "sample_input": "Input:4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049Output:2\r\n21\r\n984650007\r\n780127215155143528",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DTPOLY2",
  "scraped_at": "2025-08-17 00:33:58",
  "test_cases": [
    {
      "input": "4 2 100\r\n6 3 100\r\n10000000 2 1000000007\r\n10000000 5000000 1000000014000000049",
      "expected_output": "2\r\n21\r\n984650007\r\n780127215155143528",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 9 5\n7 1 2\n10 1 6\n8 9 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 8\n10 2 7\n7 5 9\n5 10 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 7\n9 5 9\n6 3 9\n8 6 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "96 55 13\n85 99 22\n12 41 10\n46 85 90",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "29 15 83\n74 83 38\n60 35 21\n97 63 59",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 80 10\n32 95 98\n95 47 44\n56 43 91",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "81 61 17\n95 56 2\n26 5 90\n35 1 32",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 21 76\n89 17 78\n77 78 62\n23 45 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "114 177 311\n114 313 364\n500 471 384\n337 399 281",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "443 344 191\n107 311 311\n246 304 160\n365 147 67",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "350 319 447\n216 264 489\n333 111 268\n213 303 337",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "402 253 310\n134 89 342\n486 491 296\n267 221 201",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "412 108 120\n107 103 427\n205 412 302\n378 379 250",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "422 112 328\n329 164 439\n371 149 133\n89 197 234",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "61 452 396\n142 70 267\n202 414 356\n283 374 310",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000\n1 1000 999\n1 999 1\n1 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 999\n999 2 1\n999 999 999\n1000 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}