{
  "problem_code": "problems",
  "title": "Two Array Problem",
  "tags": [],
  "text": "You are given two arrays each of length N (1 ≤ N ≤ 100000) which are initially filled with zeros. You have to apply M (1 ≤ M ≤ 100000) queries of three kind:0 arr left right :calculate and output sum of elements from left to right in array arr (arr = 0 -- first array, arr = 1 -- second array);1 arr idx newValue :change value of element at index idx of array arr on newValue;2 left right :swap range of elements of two arrays from left to right ( for i = left to right do swap(a[i], b[i]) );InputThe first line of input contains two integers - N, M. The folowing M lines contains information about queries.On each query - one line:First integer number cmd contains 0, 1 or 2 (type of query described above).if cmd equals0, then following 3 integers arr, left, right - 0 ≤ arr ≤ 1, 0 ≤ left ≤ right ≤ N - 1.if cmd equals1, then following 3 integers arr, idx, newValue - 0 ≤ arr ≤ 1, 0 ≤ idx ≤ N - 1, -10000 ≤ newValue ≤ 10000.if cmd equals2, then following 2 integers left, right - 0 ≤ left ≤ right ≤ N - 1.OutputOn each query with cmd equals 0 you should output corresponding value described above.ExampleInput:5 101 0 0 11 1 4 20 0 0 40 1 0 42 0 00 0 0 40 1 0 42 0 40 0 0 40 1 0 4Output:120330",
  "sample_input": "Input:5 101 0 0 11 1 4 20 0 0 40 1 0 42 0 00 0 0 40 1 0 42 0 40 0 0 40 1 0 4Output:120330",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMTWARR",
  "scraped_at": "2025-08-17 00:34:26",
  "test_cases": [
    {
      "input": "5 101 0 0 11 1 4 20 0 0 40 1 0 42 0 00 0 0 40 1 0 42 0 40 0 0 40 1 0 4",
      "expected_output": "120330",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 3 3 9 10 8 4 5 4 4 9 8 8 8 7 2 9 6 3 1 6 10 10 9 10 4 10 5 5 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 2 5 2 2 5 5 5 8 6 5 10 3 8 1 1 10 1 9 5 3 8 10 4 3 5 9 7 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 1 2 9 7 3 3 1 9 2 4 9 7 9 1 4 2 10 4 5 2 2 9 4 8 2 9 9 10 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 76 81 29 21 63 49 4 36 95 14 73 49 8 36 21 26 60 69 42 60 10 49 90 59 13 38 17 14 35",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 2 85 44 43 44 84 79 93 71 27 11 82 9 8 19 61 63 68 58 28 94 11 60 50 33 44 74 3 15",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 82 79 70 25 100 7 63 89 84 26 59 13 7 17 39 80 67 88 40 61 93 62 21 35 53 53 7 99 23",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 15 74 66 21 75 91 12 3 9 22 91 44 7 71 30 63 48 74 56 62 6 82 61 68 25 98 42 15 79",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 96 81 83 92 4 52 92 80 38 63 12 48 10 45 12 4 53 55 83 48 35 68 78 40 36 33 82 12 32",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48728 33939 39754 9082 30594 14855 44602 5296 6537 36904 46818 36466 14674 32718 11178 10019 11567 33921 12986 24254 17779 11971 9009 15748 5002 23086 46227 22971 35060 46846",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "49577 19927 48174 9051 18747 43062 19743 12746 30640 17756 48779 27010 24969 16002 44687 28699 13266 25002 41361 41139 27503 40798 10804 16759 26905 30627 5440 37983 34543 47727",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "18050 11304 35479 18753 15867 45554 12688 40714 26013 16503 42904 20222 27646 18715 10864 36648 41379 48973 10538 7027 48403 47188 36813 42785 8779 37476 29656 13230 5440 29679",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18647 42772 29144 27584 11559 15628 17729 12683 25874 31993 12081 14553 33661 5195 35622 36734 21778 48690 35165 24408 28397 16253 20982 22962 32623 40082 49226 25378 24971 48063",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "17729 37173 10648 49352 26555 27146 10926 38510 44848 43712 30030 9420 25989 16113 24414 29039 39421 13863 35215 40035 44779 27360 9370 8073 26582 6174 15237 44062 35481 49613",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34940 18902 25192 47069 41178 45193 14667 28950 35646 21972 41233 8199 20461 31736 46526 17937 21282 30428 21735 41095 37635 18630 34855 47360 11477 26072 29536 23625 10197 20241",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24932 5316 33299 47137 20965 37700 48790 28214 7108 29828 10886 40872 15261 24242 23343 24851 23059 31407 11619 10074 37374 38769 46867 33333 15714 42345 30437 7998 14698 45186",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 2 2 1 1 1 2 1 99999 1 1 99999 99999 99999 99999 100000 2 1 99999 100000 1 1 2 99999 2 1 99999 100000 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 2 1 100000 1 99999 100000 2 1 1 100000 2 100000 2 1 99999 2 99999 100000 99999 1 2 99999 100000 1 100000 100000 2 100000 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:41"
}