{
  "problem_code": "problems",
  "title": "Fire Extinguishers",
  "tags": [],
  "text": "Byteasar has had a new palace built. It consists of N chambers and N-1 corridors connecting them. Each corridor connects exactly two chambers. The rooms are numbered from 1 to N. There is only a single entrance to the palace, which leads to chamber number 1. For each chamber there is exactly one route leading to it from the entrance, without turning back on the way. In other words, the chambers and the corridors form atree- a connected acyclic graph.The fire marshal who is to approve the building demands placing fire extinguishers inside. The following are his exact requirements:The fire extinguishers should be placed in (some) chambers, and one chamber may store any number of extinguishers.Each chamber has to be assigned one fire extinguisher, though it may be stored in another chamber.Each fire extinguisher can be assigned to at most S different chambers.For each room its assigned extinguisher is within the range of K corridors.Byteasar has a week spot for lavish palaces, so it is no surprise he has very little money now, right after completion of another splendid palace. Therefore he is interested in the minimum number of fire extinguishers sufficient for satisfying fire marshal's demands.InputThe first line of the standard input contains three integers N, S and K separated by single spaces, 1 ≤ N ≤ 100000, 1 ≤ S ≤ N, 1 ≤ K ≤ 20. Each of the following N-1 lines holds two integers separated by a single space. Line number i+1 contains the numbers XiYidenoting the corridor connecting chambers number Xiand Yi.OutputThe first and only line of the standard output is to hold one integer - the minimum number of fire extinguishers that have to be installed in palace.ExampleFor the input data:12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8the correct result is:4",
  "sample_input": "12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8",
  "sample_output": "4",
  "link": "https://www.spoj.com/problems/STC01",
  "scraped_at": "2025-08-17 00:34:00",
  "test_cases": [
    {
      "input": "12 3 1\r\n1 12\r\n3 8\r\n7 8\r\n8 9\r\n2 12\r\n10 12\r\n9 12\r\n4 8\r\n5 8\r\n8 11\r\n6 8",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 5\n10 8\n5 3\n9 4\n5 6\n9 4\n2 4\n7 3\n4 10\n8 6\n3 3\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10 4\n10 1\n1 4\n8 9\n10 8\n2 3\n3 9\n1 4\n9 5\n1 1\n7 5\n6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 6\n9 6\n1 7\n3 8\n8 10\n7 5\n5 9\n8 7\n7 2\n5 6\n3 10\n5 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "79 80 97\n51 93\n31 36\n29 89\n7 43\n57 17\n70 67\n22 16\n25 40\n59 23\n77 86\n87 34",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "26 4 8\n30 63\n19 56\n80 78\n82 77\n28 7\n1 57\n56 15\n96 74\n9 60\n35 7\n100 80",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 86 57\n60 27\n58 27\n62 91\n94 20\n77 66\n13 5\n83 73\n81 23\n100 60\n56 53\n3 64",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "71 71 79\n31 48\n36 8\n73 26\n74 45\n45 65\n25 1\n87 100\n79 71\n42 94\n43 16\n16 76",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 34 41\n82 92\n49 79\n95 38\n58 77\n87 51\n69 50\n78 42\n89 47\n79 80\n57 25\n65 19",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23867 34266 5543\n47515 38598\n48253 28321\n15376 35397\n14971 26526\n25614 44953\n29802 11770\n7193 20137\n45189 9094\n37833 7674\n8286 25710\n34301 11185",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18609 26625 16988\n21392 26784\n20849 12010\n47147 44241\n20857 48887\n49526 30162\n44694 20708\n37424 27207\n12715 24419\n6747 43788\n30970 8835\n30093 32626",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9579 12065 47055\n30428 37142\n49557 23155\n24743 28585\n49002 24974\n25069 7780\n8022 14737\n35148 8477\n16579 25674\n18686 24856\n46213 49450\n41727 14015",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "11894 44189 14291\n40686 16306\n19840 34573\n46020 16625\n17479 17408\n39191 14462\n47190 46327\n34766 12793\n44416 10913\n47478 16541\n49012 25458\n23741 48782",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "48408 39475 31361\n28909 43986\n21537 44584\n30945 47040\n8856 7744\n33123 15729\n6544 7318\n6432 27941\n34060 42296\n32840 22901\n31457 39531\n24367 6562",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "44065 18831 13760\n33865 43399\n18415 25017\n27950 49787\n32582 41928\n45634 26008\n48716 23190\n12332 47831\n47495 6402\n6897 47874\n27606 32092\n30847 37044",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25343 18390 11872\n17156 32963\n48899 8456\n38066 36215\n14141 20624\n49005 46677\n37620 13508\n21883 17598\n11325 7865\n14356 40144\n29620 28241\n20991 13545",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 100000 100000\n2 2\n2 99999\n1 99999\n2 1\n2 2\n99999 1\n100000 2\n2 2\n100000 100000\n100000 99999\n100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 2 100000\n1 100000\n100000 99999\n100000 1\n100000 2\n100000 99999\n2 1\n1 100000\n99999 2\n1 1\n2 99999\n100000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}