{
  "problem_code": "problems",
  "title": "Slick",
  "tags": [],
  "text": "A maritime accident has caused oil to spill onto the seas of Felipistonia, which is a major natural disaster. The Felipistonia's government wants to clean up this mess before more damage occurs. To do this, they first have to know how serious was the accident and the amount of oil that has been spilled into the sea. The only instrument the Felipistonia's government has to get information of the magnitude of this disaster, is the use of satellite images. With these images they can estimate how much money they have to spend to clean this mess. For this, the number of slicks in the seas and the size of each slick must be know. A slick is a patch of oil floating on water. Unfortunately, the Felipistonia's people are not very bright, so they have hired you to help them process the image.An example of an image obtained by the satellites is shown in Figure 1(a). This image can be transformed to 0's and 1's as seen in Figure 1(b). Given this binary matrix, your job is to count the number of slicks in the ocean and their corresponding size. Two adjacent pixels in the image are considered to be in the same slick if they are in the same row or the same column.Figure 1: (a) A satellite image of the spilled oil. (b) The representation of the image in a binary\r\nmatrixInputThe input contains several test cases, each one corresponding to a different satellite image. The first line of each case contains two integers that indicate the number of rows (N) and columns (M) in the image (1 ≤ N, M ≤ 250). Then N lines follows with M integers each, containing the information of the image.The end of input is indicated by a test case with N = M = 0. This case should not be processed.OutputFor each image, output the number of slicks in the sea. Additionally, output the size of each slick in ascending order and the number of slicks of that size.ExampleInput:10 10\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 0 0 0 0 0\r\n1 1 1 0 0 0 0 1 1 1\r\n1 1 0 0 1 0 0 1 1 1\r\n1 0 1 0 0 1 1 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0Output:7\r\n1 2\r\n2 1\r\n6 1\r\n10 2\r\n20 1",
  "sample_input": "Input:10 10\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 0 0 0 0 0\r\n1 1 1 0 0 0 0 1 1 1\r\n1 1 0 0 1 0 0 1 1 1\r\n1 0 1 0 0 1 1 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0Output:7\r\n1 2\r\n2 1\r\n6 1\r\n10 2\r\n20 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013H",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "10 10\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 0 0 0 0 0\r\n1 1 1 0 0 0 0 1 1 1\r\n1 1 0 0 1 0 0 1 1 1\r\n1 0 1 0 0 1 1 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0 0 0 0 0 0 0 0 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0",
      "expected_output": "7\r\n1 2\r\n2 1\r\n6 1\r\n10 2\r\n20 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 4\n5 7 2 9 9 10 10 9 8 5\n1 5 3 8 9 2 6 5 1 4\n4 4 6 3 10 6 10 7 5 6\n10 4 4 4 2 8 2 6 5 3\n1 4 7 8 2 10 6 1 6 10\n3 8 4 9 2 8 4 5 6 8\n6 7 9 5 1 5 6 3 3 7\n1 4 3 10 4 2 5 6 8 1\n2 2 8 10 8 8 5 8 5 8\n8 10 9 3 7 1 2 1 6 5\n2 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n7 9 7 7 8 9 1 8 7 9\n2 6 4 2 6 7 2 9 2 2\n4 7 5 7 7 4 3 5 10 3\n1 3 7 2 8 5 6 7 10 8\n4 8 3 10 9 2 2 2 2 3\n1 8 1 4 9 5 3 1 9 8\n8 7 8 3 8 9 1 6 2 4\n7 10 7 3 5 8 4 7 4 10\n7 5 3 6 8 8 10 6 5 7\n4 8 3 5 9 10 2 6 7 4\n3 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5\n3 4 4 8 7 4 5 3 1 9\n1 5 1 1 1 8 5 6 3 6\n6 4 8 3 9 10 5 6 9 3\n9 10 2 4 9 8 3 4 6 1\n9 10 7 10 5 9 4 10 3 5\n7 6 8 10 5 9 3 8 3 8\n8 8 10 7 7 1 1 2 7 9\n10 4 2 6 8 5 1 6 8 3\n3 3 7 8 9 4 8 9 8 8\n6 4 5 10 7 9 8 7 2 3\n4 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 45\n80 91 92 6 2 1 56 74 33 77\n18 28 42 5 83 75 67 82 80 85\n47 64 38 63 6 73 75 38 37 69\n81 71 61 29 10 55 43 97 34 38\n28 10 15 45 63 53 39 19 30 29\n73 87 32 34 17 33 72 26 78 66\n13 77 33 13 35 94 37 18 60 9\n59 24 2 18 69 4 20 33 99 20\n17 86 54 51 65 76 15 19 5 89\n1 64 39 48 87 95 45 88 39 33\n56 80",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 76\n1 45 89 67 50 93 4 22 4 95\n54 47 44 49 32 23 100 56 58 45\n23 58 26 82 80 99 17 32 80 10\n5 69 56 44 42 4 96 89 6 19\n76 87 77 15 55 90 92 75 4 100\n32 62 29 52 94 39 75 78 53 62\n13 35 97 53 84 84 20 72 70 1\n98 88 27 8 59 5 13 90 33 20\n57 52 100 18 81 44 62 74 12 50\n16 55 41 34 15 57 89 2 8 59\n71 26",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 42\n7 96 43 56 58 94 83 77 62 37\n56 16 99 71 93 44 51 7 62 87\n44 2 58 57 86 62 58 13 69 80\n43 100 93 75 16 37 25 89 17 4\n35 52 94 77 85 78 4 76 82 25\n35 83 88 39 43 89 90 23 50 79\n82 11 55 51 15 26 35 11 22 19\n44 21 89 64 86 30 27 53 13 28\n60 62 5 78 41 20 51 6 3 99\n68 59 83 90 62 16 94 62 13 74\n92 57",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 36\n87 39 85 44 72 2 43 65 60 59\n4 22 2 80 87 43 20 79 44 70\n90 34 50 95 45 10 69 49 100 92\n52 51 96 97 65 73 76 62 83 99\n70 14 100 87 51 90 4 83 81 38\n15 80 56 79 77 40 99 55 79 17\n78 64 30 95 27 33 90 82 53 25\n85 51 81 35 23 69 79 78 61 91\n55 22 53 26 86 94 50 49 39 68\n50 18 67 97 70 95 100 12 34 16\n9 17",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "68 28\n20 89 65 90 2 26 81 44 31 15\n8 58 9 84 92 42 53 64 71 21\n63 10 94 87 80 82 82 75 85 21\n22 76 66 91 99 25 76 81 98 72\n83 54 91 79 29 15 15 44 91 74\n51 34 36 9 81 14 22 64 15 60\n67 20 21 34 27 86 93 74 82 5\n61 53 33 33 82 59 69 81 71 69\n55 5 73 40 39 40 72 8 72 10\n76 62 61 27 51 38 88 16 36 20\n79 98",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "421 63\n89 79 226 322 139 412 429 161 123 134\n183 202 373 218 498 57 341 259 119 277\n315 254 359 212 358 151 125 89 127 141\n470 128 200 168 471 347 317 470 399 333\n325 300 456 158 293 359 74 423 369 430\n438 102 412 153 103 437 412 132 320 187\n284 148 161 492 293 54 122 308 375 121\n181 217 153 229 118 498 167 291 495 299\n129 273 215 168 336 316 59 334 361 375\n339 107 124 493 428 113 154 296 135 233\n182 129",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "229 327\n163 337 404 287 105 301 175 139 255 219\n403 68 198 129 134 93 381 288 51 481\n500 352 90 182 305 234 183 163 359 116\n199 103 469 454 190 456 384 251 127 335\n405 361 432 104 144 161 161 256 488 412\n294 426 485 139 319 402 249 261 429 499\n498 444 228 353 135 95 231 476 303 204\n172 52 192 410 352 106 462 497 179 426\n367 125 373 394 129 437 178 67 369 450\n236 311 312 131 129 276 376 152 86 94\n268 133",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "336 114\n394 99 274 80 185 167 195 297 487 122\n177 191 312 81 401 343 491 327 82 496\n231 360 361 427 59 201 106 264 366 415\n357 443 469 208 115 88 81 428 277 368\n178 498 500 462 331 68 331 489 384 439\n210 130 70 359 429 146 234 361 137 394\n271 273 137 124 194 301 131 113 220 423\n435 181 54 290 350 218 125 291 174 219\n447 350 249 497 210 220 252 379 415 321\n232 342 315 480 126 350 499 190 229 322\n211 245",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "245 417\n479 181 294 315 428 267 348 87 442 453\n103 281 276 109 195 391 426 423 483 198\n175 229 445 453 369 474 132 201 480 341\n331 279 176 281 302 368 271 210 356 496\n234 324 482 217 363 192 283 341 84 126\n471 130 151 75 300 142 125 115 242 427\n462 65 168 290 301 344 427 105 207 57\n465 296 278 245 414 329 331 157 154 175\n268 102 311 359 161 257 143 69 304 459\n269 421 224 223 134 124 367 98 425 398\n115 196",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "186 430\n432 453 306 179 159 186 167 366 374 373\n243 356 378 472 145 131 390 128 108 416\n98 420 265 135 267 265 54 198 474 489\n388 423 334 466 134 183 296 329 281 259\n486 210 381 413 263 228 373 292 432 72\n188 337 235 446 429 99 99 198 131 451\n89 299 87 418 359 243 450 114 401 200\n404 344 71 491 182 99 66 191 488 146\n72 233 129 439 454 451 295 248 237 60\n437 234 144 274 62 432 125 484 141 292\n496 282",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "343 405\n358 498 217 54 103 200 393 164 384 432\n295 274 202 429 286 356 160 139 377 280\n318 292 68 425 178 193 97 366 279 405\n79 172 122 100 66 113 308 269 290 432\n440 389 226 480 70 58 411 266 114 452\n314 164 336 352 285 194 130 182 455 425\n449 228 253 71 67 210 455 267 353 167\n481 477 81 402 384 71 191 459 286 157\n471 88 185 312 418 63 332 440 141 316\n257 280 207 458 240 397 447 320 78 373\n446 55",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "384 350\n455 193 399 288 84 50 231 353 363 480\n494 422 491 169 140 421 481 442 491 108\n221 238 87 495 160 429 133 411 116 264\n249 187 414 412 358 131 492 305 177 116\n423 127 102 295 282 95 69 217 462 156\n382 450 116 493 157 328 114 89 271 375\n351 200 75 385 285 135 57 253 70 419\n209 370 157 411 443 310 178 414 251 451\n388 137 145 175 423 264 69 266 176 137\n255 214 311 100 239 420 262 462 168 439\n256 318",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n1 1000 1000 1000 1000 999 1000 2 2 999\n1 2 2 1 1 999 1 999 1 2\n1 1 1000 1000 999 2 1000 1 1000 1000\n1 1 1000 999 2 1000 2 1000 1000 999\n2 2 1000 999 2 2 1000 2 1000 1\n999 999 1000 1000 1000 999 1 999 1 999\n1 2 1000 1000 2 1 999 1000 999 1000\n2 1000 1 1 1 999 1 1 1 999\n999 2 999 999 2 2 999 1000 1000 999\n1000 999 1 1 2 999 1000 999 1 2\n999 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n1000 2 999 2 1000 999 999 1000 999 1000\n1 2 1000 1000 1000 999 2 2 2 999\n2 1000 1 2 1 1 1000 1 2 1000\n1 1000 1000 1000 1 1000 999 1 2 999\n1000 2 2 999 2 999 1000 1 999 2\n999 999 999 1 1 1 2 999 2 2\n2 1 1000 1 1 1 999 1000 999 1000\n1 1 1 999 1 1000 999 1 1000 1\n1000 999 1 1 1000 999 1000 2 999 1\n1 1000 1000 1000 1 1 999 1000 2 999\n2 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:19"
}