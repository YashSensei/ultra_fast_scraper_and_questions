{
  "problem_code": "problems",
  "title": "DOMINO",
  "tags": [],
  "text": "Mirko received an N × N table for his birthday, where a non-negative integer is written in each field\r\nof the table. Unfortunately, the written numbers are too large for Mirko’s taste, so he will place K\r\ndominoes on top of the table that will cover the fields that are too large.More precisely, Mirko places the dominoes according to the following rules:each domino covers two fields of the table that are adjacent in a row or in a column,the dominoes do not overlap (but can touch),the sum of all visible (uncovered) fields needs to be as small as possible.It is your task to determine the required minimal sum of visible fields. The test data will be such that\r\nit will always be possible to place K dominoes without overlapping.InputThe first line of input contains the integers N (1 ≤ N ≤ 2000), the dimensions of the table, and K\r\n(1 ≤ K ≤ 8), the number of dominoes. Each of the following N lines contains N integers from\r\nthe interval [0, 1000]. These N × N numbers describe Mirko’s table.OutputThe first and only line of output must contain the minimal sum of visible fields after covering the\r\ntable with dominoes.ExampleInput:3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8Output:31Input:4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1Output:17Clarification of the first example:We place the domino so it covers fields with numbers 9 and 5.Clarification of the second example:We place the dominoes so they cover fields [4, 5] and [5, 4] in the third column.",
  "sample_input": "Input:3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8Output:31",
  "sample_output": "Input:4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1Output:17",
  "link": "https://www.spoj.com/problems/DOMINO8",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "3 1\r\n2 7 6\r\n9 5 1\r\n4 3 8",
      "expected_output": "31",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\r\n1 2 4 0\r\n4 0 5 4\r\n0 3 5 1\r\n1 0 4 1",
      "expected_output": "17",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 9\n2 2 3\n2 1 10\n4 5 4",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5\n7 2 7\n7 2 10\n1 5 5",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n1 9 6\n2 1 9\n6 4 1",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "92 78\n33 37 71\n76 42 21\n98 54 40",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 68\n96 59 69\n63 57 6\n84 5 80",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "53 39\n12 18 68\n65 80 29\n28 74 97",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "15 12\n10 8 60\n43 10 5\n8 71 48",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "91 46\n6 38 60\n19 67 73\n3 87 82",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "704 509\n514 262 644\n667 337 281\n308 865 269",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "869 768\n128 286 301\n493 462 362\n837 761 677",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "252 333\n797 566 987\n495 988 882\n964 918 165",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "678 349\n689 946 271\n774 110 952\n772 204 353",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "486 233\n683 625 391\n216 755 591\n832 340 966",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "835 318\n838 536 653\n754 361 671\n968 810 729",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "628 457\n575 780 544\n149 248 567\n266 320 988",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000\n2000 2000 2000\n2000 2000 2000\n2000 2000 2000",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1999\n1999 1999 1999\n1 1 2\n1999 1 2000",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:50"
}