{
  "problem_code": "problems",
  "title": "Flow on Tree",
  "tags": [],
  "text": "Mr. Kaboom has recently learned about maximum flow. Now his friend Mr. Taboom gave him this problem.You are given a tree withNvertices. The vertices are numbered from1 to N. Each edge of the tree has some capacity associated with it. Between each pair of vertices there is only one way to go. Now imagine for each pair of vertices that one of the vertex is the source and the other is the sink. Then Mr. Kaboom needs to find out what is the maximum flow for each pair of vertices. Mr. Taboom decides to reduce Mr. Kaboom's misery and asked him to provide the sum of maximum flow between all possible pair of vertices. Mr. Kaboom has found no solution and has trusted you with this task. Can you save his day?InputThe very first line of the input will contain the number of test casesT. Then T tests follow. First line of each test containsN, the number of vertices in the tree. The next N-1 lines each contain three integers. The first two integers denotes the vertices this edge connects. The third integer gives the capacity of the edge.OutputFor each tests output one integer per line, the sum of all pair maximum flow in the tree.See the explanation of the sample for more understanding. In every pair the vertices should be different.You can read about maximum flowhere, and for treehere.Constraints1 ≤ T ≤ 201 ≤ N ≤ 105Capacities of each edge will be non-negative and no more than 106.The total number of vertices among all test cases will be less than 5×105SampleInput:2\r\n4\r\n1 2 5\r\n1 3 2\r\n1 4 3\r\n3\r\n1 2 5\r\n2 3 6Output:34\r\n32ExplanationFor the first case, the maximum flow for each pair is:For the second case, the maximum flow for each pair is:Problem-setter: Nafis Sadique",
  "sample_input": "Input:2\r\n4\r\n1 2 5\r\n1 3 2\r\n1 4 3\r\n3\r\n1 2 5\r\n2 3 6Output:34\r\n32",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRJAN15E",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "2\r\n4\r\n1 2 5\r\n1 3 2\r\n1 4 3\r\n3\r\n1 2 5\r\n2 3 6",
      "expected_output": "34\r\n32",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n2\n1\n5\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n6\n1\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n9\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "16\n26459930\n11237490\n60540163\n14596485\n30187407\n68949579\n93414025\n92304562\n21481815\n26205180\n38134078\n84341824\n80781820\n15823662\n89693781\n96098979",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n93073282\n53107750\n22331956\n54977779\n35807962\n2537704\n60327200\n95275214\n65048309\n93509431",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n43170238\n71920201\n20697444\n6642786\n87331226\n5705156\n83420469\n24323261\n88274536\n72871025\n88427529\n64709073\n38783646\n11323140\n17032108\n39738617\n67394039\n79534093",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n97914614\n16235878\n49243044\n84457786\n5850468\n33483039\n71417398",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n39642091\n64100159\n56470887\n5652368\n73441413\n93588185\n25415516\n14166810\n33557598\n17255242\n24136723\n97132631\n52078778\n80960166",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "34\n44328\n65569\n42878\n52477\n94160\n15314\n97247\n27594\n16462\n30912\n50235\n69514\n29625\n59029\n42186\n2361\n61101\n69075\n76105\n82965\n92499\n97324\n6032\n53597\n53252\n29561\n47182\n84733\n73653\n91142\n64717\n10973\n30490\n26233",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "61\n94516\n81099\n91229\n70393\n15706\n45774\n71435\n7668\n89268\n97943\n69368\n63552\n62119\n78742\n57696\n29402\n24938\n81652\n26173\n77943\n99275\n75828\n61164\n10280\n82271\n25676\n58445\n73283\n90344\n12514\n30472\n68410\n52506\n57903\n73637\n4712\n82288\n65011\n71653\n61675\n35449\n98257\n63534\n48730\n42245\n25539\n16774\n31127\n25464\n16965\n16527\n51203\n86401\n4345\n80410\n5571\n8948\n96646\n93717\n7260\n76681",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n83881\n6251\n55939\n38060\n25021\n50504\n35998\n91013\n52922\n50268\n71381\n60658\n68757\n24890\n24325\n95266\n691\n34917\n89268\n24809\n92673\n21715\n12985\n46163\n41325\n99522\n47435\n95481\n15919\n30561\n16094\n51797",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "59\n61312\n47642\n99283\n21137\n58905\n76514\n17304\n75011\n35419\n67031\n24937\n16719\n63919\n11857\n32750\n99852\n14710\n56855\n24693\n93914\n96840\n9109\n58273\n27626\n59681\n68983\n44545\n75500\n26448\n9835\n32409\n87284\n21728\n36436\n92765\n77748\n39559\n86080\n83546\n79554\n53727\n88992\n66690\n50207\n13911\n22048\n61523\n48558\n2760\n10273\n89811\n33580\n5313\n89291\n93203\n1161\n53983\n93446\n93260",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n52094\n54752\n89909\n72437\n78133\n82476\n46694\n89364\n26889\n29951\n53533\n38159\n59893\n12468\n7301\n10788\n46607\n56608\n28831\n20837\n30827\n83640\n39459\n34564\n36285\n17466\n22654\n20192\n6925\n42691\n18854\n13935\n72850\n39184\n93899\n31527\n61160",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "96\n73650\n18737\n39588\n85507\n37344\n64354\n58518\n27978\n88726\n5745\n928\n16787\n97577\n42902\n76942\n60593\n60215\n61161\n58486\n89825\n90434\n30144\n42537\n33013\n51089\n42948\n95450\n73728\n24166\n88892\n4191\n55719\n64861\n89815\n35424\n58629\n91512\n72154\n78362\n92394\n69428\n57816\n85536\n80538\n88136\n255\n33480\n5417\n23891\n24122\n64013\n82959\n73680\n30541\n68247\n87772\n90259\n30651\n5792\n27826\n10700\n68893\n32948\n51599\n9513\n90521\n91079\n81313\n20711\n1864\n58251\n47873\n96445\n64157\n61310\n24429\n68752\n3210\n7784\n85985\n52263\n38629\n69947\n33484\n51307\n37023\n44737\n41571\n30174\n76237\n52330\n57674\n40866\n19569\n10264\n80800",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "99\n57442\n66076\n25989\n23013\n64409\n54898\n16446\n13909\n73457\n43866\n67172\n54529\n70268\n39447\n96163\n74707\n6617\n9780\n62510\n68344\n47633\n71396\n31265\n67919\n9356\n11721\n94847\n67636\n58678\n49079\n31938\n44560\n88294\n21235\n36294\n82285\n7022\n72643\n28233\n49706\n61025\n27851\n82138\n57267\n88446\n5156\n33397\n17531\n77624\n76744\n27202\n5776\n31239\n68816\n35077\n97942\n25938\n94084\n31603\n84217\n61938\n50496\n81749\n79736\n65456\n34092\n36990\n77014\n98656\n22721\n79731\n81793\n59626\n42574\n32475\n64442\n12922\n51704\n12848\n69450\n89201\n16583\n22143\n58278\n93243\n34839\n83174\n83267\n44303\n33821\n71068\n35104\n39382\n46664\n2919\n89807\n71018\n78143\n31838",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n72129902\n99948704\n99589506\n41360652\n98856404\n3061421\n65444277\n98255474\n40004101\n69782280\n82220650\n13776310\n1768432\n26460804\n58887801\n73621137\n33271609\n48468862\n9229431\n80887698\n25664756\n19229993\n21355648\n81987757\n33799447\n65906853\n6745443\n2350176\n80896009\n60127794\n92978528\n9621272\n42614252\n56613159\n11199123\n59655723\n86044999\n6757144\n15887978\n15688272\n39743687\n46681954\n90584725\n80907775\n81199357\n20276361\n59298500\n52204351\n47798796\n1131732\n1947472\n60206089\n63438760\n56305637\n74536192\n96416893\n80280070\n65334105\n88357356\n87980060\n58588530\n16898891\n17404352\n83066591\n68685981\n96591383\n74146979\n32546098\n88174392\n14340633\n64931212\n23910140\n83961601\n7648893\n43520530\n48363999\n64230480\n23260568\n5527777\n16293920\n694766\n87575593\n30593217\n25046551\n5378393\n28995373\n59805811\n38587888\n38317050\n62475713\n12444792\n62543735\n36738125\n96843633\n62801642\n34657825\n85967236\n52807376\n19534087\n21055394\n22542589\n66823817\n83885450\n17705076\n87388989",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n1935792\n64094106\n7980481\n65220820\n72556593\n37484560\n75870713\n1434176\n29489929\n33772851\n93864610\n75392338\n98720738\n66288189\n51966241\n87153516\n79705656\n10266325\n19651235\n91909684\n34220398\n59951681\n46021835\n48369302\n36384115\n37833797\n7715767\n53195439\n34332369\n72429503\n49360024\n40577678\n65229505\n88861067\n85507247\n94925071\n2204123\n69941911\n39105083\n49510529\n22238905\n15101011\n69382906\n76830889\n66116294\n14648275\n47858702\n38950627\n13739804\n66190708\n71081842\n16628245\n31327591\n62733693\n30629096\n69807072\n55399874\n13377194\n29871564\n15713208\n13265196\n17523692\n3568018\n44107885\n84209893\n2897252\n68213859\n90687607\n74998605\n17409540\n14807241\n49933374\n38352826\n92029332\n39001403\n84454097\n23114696\n84384417\n55927055\n51761017\n43292496\n40312042\n27542857\n40742078\n41179247\n60997759\n35091437\n50069234\n36895919\n98959359\n25068055\n18215722\n81789312\n10532805\n38059946\n55638992\n56955040\n39554060\n33398613\n86219871\n26267723\n60672396\n58286250\n97930381\n8667405",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n1\n1\n100000000\n54095938\n1\n100000000\n100000000\n1\n61375750\n100000000\n1\n100000000\n45883066\n36892409\n54989281\n100000000\n1\n1\n1\n83532355\n1\n100000000\n100000000\n100000000\n100000000\n1\n100000000\n1\n100000000\n100000000\n11246863\n100000000\n1\n1\n100000000\n100000000\n1\n14117329\n1\n86429059\n100000000\n1\n1\n100000000\n100000000\n84848823\n1\n49279722\n62185793\n100000000\n2713845\n100000000\n52903784\n100000000\n91374765\n100000000\n100000000\n100000000\n1\n37756431\n32650499\n25074298\n35582589\n59118860\n100000000\n1\n1\n100000000\n100000000\n100000000\n1\n1\n27477495\n100000000\n29488586\n100000000\n100000000\n62510792\n1\n100000000\n1\n1\n100000000\n100000000\n1\n16724140\n98041248\n1\n100000000\n100000000\n1\n1\n94228924\n1\n100000000\n1\n32076663\n21577007\n1\n100000000\n1\n79332194\n88520130\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "1\n98939315",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:58",
  "total_test_cases": 20
}