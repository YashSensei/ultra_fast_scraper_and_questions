{
  "problem_code": "problems",
  "title": "Garden",
  "tags": [],
  "text": "Vasya has a very beautiful country garden, which is a rectangular field n × m in size, divided into n · m square cells. One day, Vasya remembered that he needed to pave pathd between k cells with important buildings - for that he can fill some of the cells in his garden with concrete.For each cell of the garden, the number aijis known, which means the number of flowers growing in the cell with coordinates (i, j). When pouring concrete all the flowers that grow in the cell die.Vasya wants to fill some cells with concrete so that the conditions:all k important cells must be filled with concrete.from each important cell to any other important cell, there was a path through the cells filled with concrete, provided that cells with a common side are considered neighboring.the total number of dead plants should be minimal.Since Vasya has a rather large garden, he asks you to help him.InputThe first line of the input contains three integers n, m and k (1 ≤ n, m ≤ 100, n·m ≤ 200, 1 ≤ k ≤ min(n·m, 7) — the size of the garden and the number of important cells. The following n lines with m numbers each contain numbers aij(1 ≤ aij≤ 1000) — the number of flowers in the cells. Next k lines contain the coordinates of important cells in the format \"x y\" (without quotes) (1 ≤ x ≤ n, 1 ≤ y ≤ m). Numbers on the same line are separated by spaces. It is guaranteed that all k important cells have different coordinates.OutputIn the first line print a single integer — the minimum number of plants killed during the construction. Then output n lines of m characters each — the plan of the garden, where the character \"X\" (capital Latin letter X) denotes a cell filled with concrete, and the character \".\" (dot) - not filled. If there are several solutions, print anySampleInput3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XXInput4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
  "sample_input": "Input3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XX",
  "sample_output": "Input4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
  "link": "https://www.spoj.com/problems/NPOWM",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "Input3 3 2\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2\r\n3 3Output9\r\n.X.\r\n.X.\r\n.XX",
      "expected_output": "Input4 5 4\r\n1 4 5 1 2\r\n2 2 2 2 7\r\n2 4 1 4 5\r\n3 2 1 7 1\r\n1 1\r\n1 5\r\n4 1\r\n4 4Output26\r\nX..XX\r\nXXXX.\r\nX.X..\r\nX.XX.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7 6\nnt 9 7\n2 4 1\n5 6 6\n1 7 8\n2 3\n5 6 7\n7 tah\nybdvqj\nxvtyb\nbw",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4 4\nz 9 6\n7 4 7\n1 5 3\n8 3 7\n10 7\n9 10 8\n8 ohg\nczu\npy\ns",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2 5\nruoe 1 2\n3 7 2\n3 9 9\n1 1 2\n2 3\n4 3 5\n5 rb\nn\ndn\ncfryim",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 47 53\nfaqolx 43 93\n63 59 93\n98 11 49\n42 52 64\n28 22\n37 9 6\n60 fcxfhkqa\ngskcai\nkbp\ngk",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "62 30 58\njicu 50 65\n48 51 86\n57 62 30\n65 51 18\n100 55\n68 1 53\n42 bwzb\nr\nn\nsv",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 58 66\na 22 7\n33 2 87\n96 2 75\n84 12 4\n71 33\n26 61 51\n2 h\niqspq\nrouvk\ncviu",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "56 11 64\nahdpbj 33 65\n90 88 95\n66 52 97\n65 50 36\n6 100\n89 77 38\n46 rceuqfh\nbsincc\ncrw\nzjvged",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 78 4\ng 8 6\n27 33 64\n35 17 63\n18 71 40\n49 29\n10 83 94\n99 sy\nvazsxt\nubwfb\nfquh",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "404 343 400\nk 275 138\n440 315 430\n430 286 378\n473 112 487\n304 309\n74 194 102\n440 edh\nsvgfip\no\nqg",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "264 497 339\nppsgl 77 55\n359 374 329\n435 293 229\n180 130 392\n187 488\n61 242 403\n212 kfprjx\naga\nmfnhu\ntj",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "219 168 186\nqjgkms 491 232\n259 423 152\n101 256 290\n312 132 239\n354 197\n263 316 492\n328 cttqp\nhir\nto\nuistlm",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "222 266 358\nj 377 221\n380 371 218\n431 116 113\n386 209 361\n440 84\n308 264 136\n223 py\nu\nzu\noxvpb",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "95 352 401\nw 439 426\n254 123 408\n122 178 141\n328 142 98\n90 239\n356 112 219\n200 jbrbr\ntqrnpt\nx\nx",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "55 395 366\nzgvp 269 145\n225 275 186\n57 71 155\n179 63 265\n377 444\n225 296 342\n438 whgo\nz\nz\nmxkuk",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "445 443 254\ng 474 338\n425 301 50\n112 268 477\n122 136 183\n173 337\n277 137 191\n280 nkuk\nan\nbmn\najt",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nasw 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 vry\nktgz\ndu\nkoqm",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nj 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 haxzr\nfgyuc\na\nmbz",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 2\nh 999 2\n999 1000 999\n1 999 999\n1000 1000 2\n1000 2\n2 1000 1000\n2 czr\nxuqdco\na\nrgawlg",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 999\nivdjv 2 1\n2 2 2\n1 1000 1000\n1 999 1000\n1 999\n1000 2 1000\n999 ipyda\nog\nuvws\ngs",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:24"
}