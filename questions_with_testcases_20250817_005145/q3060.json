{
  "problem_code": "problems",
  "title": "Ada and Tomel",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She grows a tomeltree. Tomel indeed is a very specific tree. Its growing process starts with one root node with a fruit of random flavor. Whenever a next branch grows, it begins to grow from a random node which is already grown up. No growing starts until the branch is fully grown. As a branch fully grows up, a node with fruit with random flavor appears at the end of the branch.As you surely haven't heard word random for a long time, Ada chooses three random paths and wants to find the number of distinct flavors which grow on the union of these three paths.NOTE:Every random mentioned above is really meant to be random with equal probability for each possible values.InputThe first line of input will contain three integersN, K, Q:1     ≤ N, Q ≤  3×105, 1 ≤ K ≤ 1000, the number of nodes of tomel tree, the universe of flavors and the number of Ada's questions.The next line will containN-1integers0 ≤ Pi<     iis the parent ofithnode (hereigoes from1toN-1).The next line will containNintegers1 ≤ Fi≤ K, the flavor of each fruit.The nextQlines will contain six integers0 ≤ B, E, X, Y, L,     R < N, where the pairs of beginnings/ends of the paths are: (B,     E), (X, Y),  (L, R)OutputFor each query output the number of distinct flavors which are on the three paths.Example Input5 2 5\r\n0 0 0 2\r\n1 1 1 1 2\r\n3 2 3 1 1 4\r\n1 0 2 4 2 3\r\n2 1 4 3 1 0\r\n1 3 3 0 3 1\r\n4 2 0 3 4 1Example Output2\r\n2\r\n2\r\n1\r\n2Example Input7 3 7\r\n0 0 0 1 2 3\r\n1 3 2 2 2 1 1\r\n3 2 3 6 3 5\r\n0 2 6 0 4 2\r\n3 6 3 0 2 0\r\n2 0 4 0 2 0\r\n1 5 5 3 2 6\r\n1 2 0 5 0 6\r\n0 4 5 3 2 0Example Output2\r\n3\r\n2\r\n3\r\n3\r\n3\r\n3Example Input8 5 7\r\n0 1 0 1 3 0 3\r\n1 1 4 2 3 1 3 1\r\n1 4 2 3 2 4\r\n3 1 4 2 3 6\r\n6 0 0 7 0 6\r\n3 4 2 1 3 4\r\n5 1 0 1 2 1\r\n5 2 4 5 7 6\r\n2 5 1 6 7 2Example Output4\r\n4\r\n3\r\n4\r\n3\r\n4\r\n4Example Input12 6 10\r\n0 1 0 2 0 4 4 5 6 6 5\r\n5 4 1 5 3 5 3 5 4 6 4 6\r\n3 9 5 3 5 7\r\n10 8 10 11 6 0\r\n11 6 8 11 3 9\r\n9 2 6 4 8 5\r\n6 5 10 0 2 5\r\n9 11 2 3 2 9\r\n2 3 1 6 10 7\r\n5 2 3 1 9 3\r\n3 4 6 3 6 4\r\n3 8 2 5 0 8Example Output5\r\n5\r\n5\r\n5\r\n4\r\n5\r\n4\r\n5\r\n4\r\n3Example Input20 10 22\r\n0 1 2 0 4 5 3 6 8 2 7 2 9 8 13 2 16 10 16\r\n6 7 3 10 7 2 10 6 7 3 6 1 1 3 9 9 8 2 9 3\r\n4 13 5 0 17 7\r\n0 2 8 6 8 13\r\n9 19 12 14 5 13\r\n12 14 9 19 5 18\r\n6 4 9 12 2 16\r\n0 1 11 14 14 0\r\n11 4 17 5 1 13\r\n7 16 1 7 8 15\r\n7 1 14 12 8 16\r\n9 8 18 1 4 18\r\n14 8 4 2 2 12\r\n4 16 3 5 10 19\r\n1 6 7 16 11 12\r\n11 0 5 18 12 8\r\n14 17 0 18 3 19\r\n10 12 5 6 4 10\r\n18 19 14 3 15 9\r\n3 9 13 19 1 18\r\n0 5 3 18 1 16\r\n9 19 12 1 13 7\r\n0 2 7 13 16 19\r\n0 11 3 13 12 4Example Output6\r\n4\r\n8\r\n8\r\n7\r\n7\r\n7\r\n6\r\n8\r\n4\r\n5\r\n6\r\n7\r\n7\r\n7\r\n6\r\n7\r\n7\r\n7\r\n7\r\n6\r\n6",
  "sample_input": "5 2 5\r\n0 0 0 2\r\n1 1 1 1 2\r\n3 2 3 1 1 4\r\n1 0 2 4 2 3\r\n2 1 4 3 1 0\r\n1 3 3 0 3 1\r\n4 2 0 3 4 1",
  "sample_output": "2\r\n2\r\n2\r\n1\r\n2",
  "link": "https://www.spoj.com/problems/ADATOMEL",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "5 2 5\r\n0 0 0 2\r\n1 1 1 1 2\r\n3 2 3 1 1 4\r\n1 0 2 4 2 3\r\n2 1 4 3 1 0\r\n1 3 3 0 3 1\r\n4 2 0 3 4 1",
      "expected_output": "2\r\n2\r\n2\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 4 6\n10 1 9 9\n8 8 3 8 5\n3 4 7 2 2 8\n5 2 5 9 6 5\n6 10 5 9 7 5\n7 8 1 4 10 7\n10 2 6 2 6 10",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 4\n10 8 1 6\n6 5 9 5 4\n6 9 10 1 6 6\n5 2 4 1 7 3\n2 1 6 10 2 2\n9 2 4 9 8 3\n3 1 7 3 6 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 2\n8 6 8 8\n3 10 9 1 9\n8 3 4 3 5 8\n4 8 5 8 5 2\n9 5 6 3 2 10\n3 7 1 4 4 1\n9 4 10 6 9 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 48 51\n40 38 25 76\n86 58 35 67 9\n79 31 94 73 98 92\n2 18 45 6 84 87\n44 21 11 68 2 86\n69 60 38 39 81 44\n89 66 95 42 7 18",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 78 6\n84 29 40 58\n99 96 67 99 4\n14 40 27 9 2 26\n48 39 6 42 7 39\n98 16 49 48 86 57\n92 69 15 69 15 86\n15 15 96 71 77 98",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "23 85 69\n88 44 51 55\n68 15 3 27 95\n81 12 9 87 81 17\n23 86 24 37 31 36\n23 69 84 21 100 89\n7 54 15 30 68 74\n10 22 53 1 15 79",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "98 46 45\n100 41 87 62\n76 42 32 17 35\n11 91 12 53 48 13\n99 31 44 83 50 16\n97 56 21 12 60 5\n72 31 41 87 88 22\n57 25 61 33 25 49",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "42 73 3\n91 70 43 79\n71 61 36 78 27\n83 90 51 49 79 5\n29 56 22 51 39 7\n92 6 50 47 21 13\n91 8 66 33 75 38\n86 40 88 26 33 56",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "89 301 270\n158 63 276 285\n280 275 133 273 458\n102 157 285 168 110 266\n268 377 449 292 281 491\n273 203 360 286 80 330\n481 338 254 234 294 108\n171 73 282 423 496 233",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "425 118 275\n257 334 244 116\n132 397 316 54 309\n314 183 115 88 406 493\n370 234 334 309 287 466\n308 232 54 463 86 99\n350 73 364 84 354 132\n301 283 101 129 157 185",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "238 286 138\n494 265 101 395\n188 205 270 237 290\n291 230 350 462 452 154\n252 313 454 290 137 272\n139 73 146 293 320 289\n93 149 221 416 331 196\n146 262 387 331 82 311",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "296 383 200\n177 168 312 497\n53 346 202 411 125\n236 129 377 460 287 269\n321 450 323 489 384 88\n401 409 302 484 125 333\n395 212 51 71 282 159\n189 488 323 470 416 292",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "412 176 469\n168 66 254 62\n148 309 265 56 309\n73 314 171 417 181 415\n360 226 100 370 188 396\n100 330 392 278 365 247\n128 142 322 241 254 460\n231 96 346 497 421 295",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "253 327 74\n147 186 239 148\n170 149 108 72 460\n316 254 164 120 198 244\n488 167 373 363 54 430\n52 382 206 442 203 372\n488 87 453 205 267 144\n434 398 83 250 79 386",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "308 241 70\n226 345 432 160\n284 403 202 276 222\n257 444 391 127 50 73\n466 256 498 337 418 140\n152 208 316 305 397 85\n121 159 456 167 259 114\n353 220 200 273 254 68",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 2\n999 999 2 2\n1000 999 999 999 1000\n999 999 1000 999 2 1\n999 999 2 2 999 2\n1000 2 999 2 999 2\n2 999 1000 1000 1000 1\n1000 1 1000 1 1000 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 1\n1 999 999 999\n1000 1 2 999 1\n1 2 1 1000 2 2\n1 999 999 2 1 999\n1000 1000 2 1 1000 999\n2 999 2 999 1000 1\n2 1000 999 1000 2 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:55"
}