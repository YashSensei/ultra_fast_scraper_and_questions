{
  "problem_code": "problems",
  "title": "Steady Cow Assignment",
  "tags": [],
  "text": "Farmer John's N (1 ≤ N ≤ 1000) cows each reside in one of B (1 ≤ B ≤ 20) \r\nbarns which, of course, have limited capacity. Some cows really like their \r\ncurrent barn, and some are not so happy.FJ would like to rearrange the cows such that the cows are as equally happy \r\nas possible, even if that means all the cows hate their assigned barn.Each cow gives FJ the order in which she prefers the barns. A cow's happiness \r\nwith a particular assignment is her ranking of her barn. Your job is to find an \r\nassignment of cows to barns such that no barn's capacity is exceeded and the \r\nsize of the range (i.e., one more than the positive difference between the the \r\nhighest-ranked barn chosen and that lowest-ranked barn chosen) of barn rankings \r\nthe cows give their assigned barns is as small as possible.InputLine 1: Two space-separated integers, N and BLines 2..N+1: Each line contains B space-separated integers which are exactly \r\n1..B sorted into some order. The first integer on line i+1 is the number of the \r\ncow i's top-choice barn, the second integer on that line is the number of the \r\ni'th cow's second-choice barn, and so on.Line N+2: B space-separated integers, respectively the capacity of the first \r\nbarn, then the capacity of the second, and so on. The sum of these numbers is \r\nguaranteed to be at least N.OutputOne integer, the size of the minimum range of barn rankings the cows give \r\ntheir assigned barns, including the endpointsExampleInput:6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2Output:2",
  "sample_input": "Input:6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STEAD",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "6 4\r\n1 2 3 4\r\n2 3 1 4\r\n4 2 3 1\r\n3 1 2 4\r\n1 3 4 2\r\n1 4 2 3\r\n2 1 3 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 1\n7 2 9 8\n9 7 8 9\n10 9 8 5\n6 6 4 9\n4 3 7 9\n8 6 3 7\n7 9 5 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3\n10 2 3 8\n6 1 7 9\n10 10 2 9\n2 2 10 3\n2 8 5 8\n10 7 4 7\n9 9 2 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n8 10 2 7\n7 2 10 2\n8 9 10 1\n7 1 3 3\n1 4 10 10\n3 9 9 9\n4 4 3 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 47\n21 76 32 64\n74 48 10 46\n67 48 7 25\n38 61 67 97\n36 29 88 22\n54 59 24 41\n96 21 5 63",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 14\n52 38 54 68\n34 95 99 43\n26 79 58 3\n47 52 34 98\n99 28 99 22\n60 74 12 91\n64 72 85 23",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 85\n83 43 63 11\n37 36 100 89\n12 94 80 4\n84 64 47 17\n23 21 89 15\n10 96 31 95\n73 94 20 11",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "11 8\n39 36 90 97\n76 86 28 59\n1 67 36 95\n27 92 64 49\n87 24 13 98\n98 34 17 67\n71 38 51 26",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "23 1\n72 21 71 7\n37 35 28 46\n16 58 26 8\n32 48 55 59\n62 27 3 12\n68 75 97 22\n49 2 62 19",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "67 216\n155 494 233 69\n82 133 375 163\n367 475 292 76\n393 198 245 279\n374 228 329 397\n474 460 171 375\n351 235 257 200",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "69 393\n451 392 487 200\n427 456 415 248\n111 72 269 423\n471 141 347 266\n334 353 440 129\n484 435 157 52\n341 323 407 92",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "128 104\n168 398 403 263\n204 273 447 477\n194 316 359 277\n477 376 252 414\n478 132 119 220\n341 479 194 483\n88 475 397 381",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "388 65\n385 150 357 116\n128 361 491 50\n197 74 371 387\n426 136 134 433\n426 409 247 54\n187 232 371 175\n267 349 129 449",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "445 261\n107 485 239 78\n110 279 225 314\n436 437 383 467\n491 114 427 238\n377 441 286 300\n444 298 309 452\n112 208 170 255",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "186 430\n460 386 320 154\n160 135 500 427\n218 307 211 339\n443 473 423 345\n204 75 326 213\n86 389 91 334\n486 146 205 332",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "235 240\n453 324 249 117\n401 274 429 149\n122 60 199 475\n450 67 62 237\n67 150 331 257\n410 90 354 205\n101 180 255 184",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n1 999 1000 2\n1 2 999 2\n999 1 1 999\n1 2 1 1000\n1 1000 999 999\n1000 1000 999 1\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n2 999 2 1\n2 999 1000 1\n1000 999 1 1\n999 999 1000 1\n1000 2 999 2\n999 1000 1000 1\n2 2 1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:20"
}