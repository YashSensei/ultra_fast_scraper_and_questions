{
  "problem_code": "problems",
  "title": "Układanie kart",
  "tags": [],
  "text": "Grając w karty pewnie zetknąłeś się z  koniecznością ułożenia w pewnej kolejejności dużej liczby kart  trzymanych w ręku. Nierzadko trzeba to zrobić bardzo szybko, żeby nie  blokować gry.Rozważmy pewne uproszczone zasady sortowania kart. W  jednym korku możemy wyciągnąć dowolną (dokładnie jedną) kartę z  wachlarza trzymanego w ręce i włożyć ją w dowolne inne miejsce. Twoim  zadaniem jest dla zadanej kolejności kart w wachlarzu, który trzymasz na  pocztąku, podać w ilu najmniej krokach można go posortować.WejściePierwszy  wiersz wejścia zawiera liczbę zestawów testowych. Każdy zestaw składa  się z dwóch wierszy. Pierwszy zawiera liczbę kartN(1 ≤N≤ 1000) trzymanych w ręce. Drugi wiersz zawiera permutację zbioru liczb {1, 2 ...N}, który reprezentuje kolejność kart w wachlarzu, jaki trzymamy na pocztąku.WyjścieDla każdego z zestawów należy wypisać w ilu najmniej krokach da się posortować karty rosnąco.Przykładowe wejście331 2 333 2 151 5 3 2 4Przykładowe wyjście022---When playing cards, you have probably experienced the necessity of arranging the large number of cards held in your hand in a certain order. It is not uncommon to want to do this very quickly so as to not block the game.Consider some simple rules for sorting cards. In one turn, you can remove any (exactly one) card from the fan held in your hand and put it in any other place. Your task is, for the given order of cards in the hand at the beginning, to specify in how many least steps it can be sorted in the sorted order.InputThe first line of input contains the number of test sets. Each set consists of two lines. The first contains the number of N (1 ≤ N ≤ 100000) cards held in hand. The second line contains a permutation of the set of numbers {1,2 ... N} that represents the order of the cards in hand at the very beginning.OutputFor each set, write out in how many least steps the cards can be sorted ascendingly.Sample Input331 2 333 2 151 5 3 2 4Sample Output022",
  "sample_input": "331 2 333 2 151 5 3 2 4",
  "sample_output": "022",
  "link": "https://www.spoj.com/problems/MWPZ017",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "331 2 333 2 151 5 3 2 4",
      "expected_output": "022",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1 7 7 8 8 10 8 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 7 5 3 8 7 5 3 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 2 4 4 10 10 4 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "65 85 81 48 4 57 81 87 98",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 63 55 8 9 80 95 57 54",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 74 22 87 11 50 83 86 3",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 68 19 73 38 75 56 50 24",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 7 51 37 55 100 20 6 68",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "18109 47304 12944 21669 35569 10785 30290 49776 43643",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18740 29903 35857 19601 21807 32308 20832 11534 38823",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "34768 42204 45861 22129 35953 25722 34291 22091 13908",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "39697 45340 24565 24852 25667 5691 45661 46785 20273",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "28734 45067 31219 32077 15027 41399 44888 28782 20979",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8548 45451 42330 34820 34318 20144 27320 41007 23642",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "41478 15429 24713 9776 19463 41540 35137 8848 11098",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 99999 2 2 1 1 100000 100000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 99999 1 99999 99999 99999 100000 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:34"
}