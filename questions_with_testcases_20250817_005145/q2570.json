{
  "problem_code": "problems",
  "title": "Two Famous Companies",
  "tags": [],
  "text": "In China, there are two companies which offer the internet service for the people from all cities: China Telecom and China Unicom. They both are planning to build cables between cities. The government wants to connect all the cities in minimum costs of course. So the minister of finance Mr. B wants to choose some of the cable plans from the two companies and calculate the minimum cost needed to connect all the cities. Mr. B knows that there areN-1 cables should be built in order to connect allNcities of China. For some political reason, Mr. B should chooseKcables from the China Telecom and the restN-1-Kcables from the China Unicom. Your job is to help Mr. B determine which cables should be built and the minimum cost to build them. You may assume that the solution always exists.InputEach test case starts with a line containing the number of citiesN(1 ≤N≤ 50,000), number of cable plansM(N-1 ≤M≤ 100,000) and the number of required cables from China TelecomK(0 ≤K≤N-1).  This is followed byMlines, each containing four integersa,b,c,x(0 ≤a,b≤ N-1,a≠b, 1 ≤c≤ 100,x=[0,1]) indicating the pair of cities this cable will connect, the cost to build this cable and the company this cable plan belongs to.x=0 denotes this cable plan belongs to China Telecom andx=1 denotes this cable plan is from China Unicom.OutputFor each test case, display the case number and the minimum cost of the cable building plan.ExampleInput:2 2 1\r\n0 1 1 1\r\n0 1 2 0\r\n2 2 0\r\n0 1 1 1\r\n0 1 2 0Output:Case 1: 2\r\nCase 2: 1ExplanationIn the first case, there are two cable plans between the only two cities, one from China Telecom and one from China Unicom. Mr. B needs to choose the one from China Telecom to satisfy the problem requirement even the cost is higher.In the second case, Mr. B must choose the cable from China Unicom, which leads the answer to 1.",
  "sample_input": "Input:2 2 1\r\n0 1 1 1\r\n0 1 2 0\r\n2 2 0\r\n0 1 1 1\r\n0 1 2 0Output:Case 1: 2\r\nCase 2: 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COMPANYS",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "2 2 1\r\n0 1 1 1\r\n0 1 2 0\r\n2 2 0\r\n0 1 1 1\r\n0 1 2 0",
      "expected_output": "Case 1: 2\r\nCase 2: 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 6 5\n2 3 8 4\n8 2 2 3\n3 5 4\n1 1 2 2\n3 1 6 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3 3\n7 6 3 8\n3 7 9 6\n7 10 4\n7 1 2 9\n5 1 1 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 5\n6 5 9 7\n5 10 7 1\n2 3 5\n9 4 8 10\n6 2 1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "47 9 4\n31 2 3 38\n41 25 41 19\n39 26 12\n44 21 7 14\n42 2 12 23",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "27 8 10\n31 48 19 1\n34 14 29 38\n36 8 24\n32 19 19 50\n43 34 30 40",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 37 27\n45 38 26 49\n44 2 1 13\n17 8 8\n43 18 28 50\n45 25 36 33",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 38 13\n18 37 10 27\n37 40 13 29\n26 17 44\n28 31 9 46\n3 13 50 6",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 43 10\n4 20 17 14\n34 27 29 34\n37 5 37\n43 25 31 49\n45 1 10 30",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 17 25\n14 22 19 22\n5 13 17 14\n21 3 21\n4 15 21 10\n10 8 5 13",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "9 10 2\n4 12 8 14\n12 7 4 14\n3 18 20\n20 13 19 7\n4 22 14 21",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9 10 11\n21 8 20 22\n8 2 3 18\n15 14 14\n22 9 4 16\n8 12 2 13",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "11 6 16\n12 5 21 16\n10 8 22 20\n2 24 21\n2 13 19 10\n2 12 8 22",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "17 9 5\n6 10 25 18\n8 9 25 16\n9 14 11\n6 21 18 6\n11 24 10 8",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "12 17 2\n7 16 16 11\n25 9 17 11\n24 7 7\n21 13 18 23\n9 24 17 9",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "12 15 22\n2 20 8 2\n17 17 25 11\n25 9 4\n15 17 10 19\n6 4 9 2",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50 50\n50 50 50 50\n50 50 50 50\n50 50 50\n50 50 50 50\n50 50 50 50",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50 50\n50 50 50 50\n50 50 50 50\n50 50 50\n50 50 50 50\n50 50 50 50",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "50 50 1\n2 1 50 49\n1 1 50 49\n50 49 49\n1 1 49 49\n1 50 50 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 50 49\n50 50 50 1\n2 2 49 50\n50 50 1\n49 2 1 50\n50 1 49 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}