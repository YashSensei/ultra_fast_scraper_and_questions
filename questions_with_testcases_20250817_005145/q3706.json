{
  "problem_code": "problems",
  "title": "Circuits",
  "tags": [],
  "text": "Everyone is aware of the existence of the well known Nordenskjold  Archipelago, located in the Arctic Ocean and belonging to the Krasnoyarsk Krai of Russia. This archipelago  consists of a groups ofNislands andMaquatic routes between some  pairs of islands. Each route connects a pair of islands and for each  pair there is at most one route connecting them.Considering the popularity of Nordenskjold Archipelago,  Krasnoyarsk's authorities are concerned about its touristic value. The  touristic value of the archipelago is given by the total number of  islands that belong to at least one “touristic circuit”.  A touristic circuit is a path starting and ending in the same island  that visits at least three different islands, never visits the same  island more than once and uses just aquatic routes to go from one  island to the next one.Krasnoyarsk's authorities want to know the minimum number of  additional aquatic routes that must be built so that every  island belongs to at least one touristic circuit. Your task is to  write a program that answers this question.InputThe input contains several test cases. Each test case is described  in several lines. The first line contains two integer numbersNandM(3 ≤N≤ 100, 1 ≤M≤ 1000) which indicate the number  of islands and the number of aquatic routes, respectively. Each  island is identified by a number between 1 andN. Each of the nextMlines contains two integersUandV(1 ≤U<V≤N),  indicating that there is an aquatic route connecting islandsUandV.  You may assume that in each test case there is at most one aquatic  route connecting the same pair of islands. The last line of the input  contains the number -1 twice and should not be processed as a test case.OutputFor each test case output a single line with an integer  representing the  minimum number of  additional aquatic routes that must be built so that every  island belongs to at least one touristic circuit.ExampleInput:3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1Output:2\r\n0\r\n1\r\n4",
  "sample_input": "Input:3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1Output:2\r\n0\r\n1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CIRCUITS",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "3 1\r\n1 3\r\n9 10\r\n1 2\r\n2 3\r\n1 3\r\n7 9\r\n5 9\r\n5 7\r\n6 8\r\n4 6\r\n4 8\r\n8 9\r\n4 4\r\n1 2\r\n1 4\r\n1 3\r\n2 3\r\n12 9\r\n1 7\r\n2 6\r\n4 9\r\n9 10\r\n8 12\r\n1 5\r\n1 8\r\n8 11\r\n4 10\r\n-1 -1",
      "expected_output": "2\r\n0\r\n1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3\n2 4\n7 1\n4 10\n5 2\n6 9\n8 7\n10 9\n7 9\n8 10\n5 9\n5 6\n9 3\n6 8\n5 2\n2 10\n2 5\n5 2\n5 4\n6 5\n3 4\n2 2\n10 5\n9 3\n3 5\n6 5\n10 6\n10 8\n3 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n6 1\n1 3\n3 2\n7 1\n10 8\n9 6\n1 9\n7 8\n4 7\n9 6\n4 4\n9 7\n4 6\n3 4\n2 10\n4 9\n5 7\n6 9\n2 10\n7 8\n5 8\n10 10\n7 6\n3 2\n5 6\n3 7\n3 2\n5 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n4 1\n2 1\n10 9\n9 2\n1 9\n3 3\n8 1\n10 4\n4 5\n9 3\n9 6\n4 10\n9 10\n9 1\n3 6\n10 5\n7 6\n4 4\n7 6\n8 10\n8 3\n1 2\n9 1\n6 3\n9 7\n8 10\n1 7\n9 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "94 90\n30 46\n49 41\n7 62\n46 79\n15 86\n42 80\n25 22\n13 21\n37 27\n52 95\n10 6\n100 29\n59 20\n33 31\n46 81\n32 100\n71 73\n15 60\n64 40\n40 88\n90 14\n13 59\n64 20\n37 13\n63 39\n16 11\n48 44\n18 26",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "73 60\n78 68\n86 10\n50 67\n2 29\n14 38\n45 87\n20 100\n68 79\n80 99\n41 48\n48 85\n46 91\n99 42\n13 63\n45 66\n89 23\n78 23\n75 44\n2 59\n4 15\n87 37\n6 76\n76 22\n42 67\n73 85\n62 100\n71 13\n73 85",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 53\n73 86\n39 9\n87 50\n69 15\n87 25\n43 73\n2 31\n40 40\n54 1\n86 52\n23 32\n12 14\n75 16\n75 11\n88 90\n4 31\n55 54\n65 59\n32 84\n100 12\n71 57\n83 92\n68 1\n5 82\n5 25\n27 37\n44 38\n99 17",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 60\n79 93\n57 21\n65 7\n21 28\n63 37\n92 44\n8 58\n75 74\n20 38\n87 62\n31 79\n21 80\n32 60\n34 83\n63 52\n54 86\n96 65\n15 11\n85 50\n47 26\n38 70\n72 73\n65 40\n36 84\n59 35\n54 42\n97 18\n100 44",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "39 70\n64 1\n82 93\n9 29\n90 81\n31 86\n4 61\n90 52\n45 1\n11 13\n51 25\n80 42\n25 21\n91 35\n26 37\n63 23\n89 87\n91 13\n96 45\n63 79\n98 42\n86 11\n10 73\n76 26\n71 50\n53 8\n1 42\n8 1\n69 22",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 26\n32 7\n23 14\n41 20\n27 34\n34 44\n11 24\n24 33\n5 16\n48 14\n23 32\n43 38\n19 17\n41 26\n7 28\n19 46\n36 50\n40 13\n43 10\n15 39\n28 33\n8 29\n9 48\n45 41\n7 22\n17 30\n41 8\n14 15\n25 23",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "25 18\n34 33\n42 43\n36 48\n17 34\n50 44\n22 23\n11 38\n48 28\n39 7\n10 34\n44 11\n34 14\n38 42\n48 30\n42 45\n30 35\n25 18\n31 36\n36 29\n40 12\n43 5\n8 11\n32 39\n5 27\n23 42\n17 6\n5 41\n34 40",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "23 39\n29 30\n37 44\n43 17\n28 36\n19 28\n21 47\n33 48\n17 45\n43 27\n35 32\n5 46\n36 28\n46 7\n21 39\n12 38\n20 6\n46 22\n27 27\n27 38\n34 48\n42 41\n30 38\n18 49\n8 44\n12 40\n32 6\n34 35\n36 42",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "48 25\n45 9\n18 34\n45 6\n37 42\n48 42\n32 15\n30 19\n15 27\n35 26\n38 39\n42 16\n24 18\n24 6\n29 25\n41 46\n38 39\n35 35\n22 17\n48 37\n36 40\n40 6\n9 43\n45 13\n46 15\n12 44\n15 41\n16 10\n12 29",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "33 24\n46 7\n6 35\n5 36\n13 23\n12 25\n9 42\n19 10\n12 5\n48 40\n21 27\n22 32\n41 6\n16 22\n17 41\n12 41\n18 33\n43 28\n50 13\n10 44\n46 12\n6 19\n7 8\n7 48\n41 39\n48 23\n40 28\n33 37\n31 30",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5 31\n31 5\n14 25\n34 46\n24 39\n35 50\n22 14\n49 36\n26 7\n29 38\n38 27\n45 7\n41 38\n35 17\n21 39\n30 18\n13 39\n29 25\n47 46\n21 20\n5 43\n42 11\n41 7\n43 50\n50 18\n28 50\n40 8\n13 20\n26 35",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25 30\n20 14\n30 23\n5 33\n33 47\n10 26\n40 48\n37 11\n37 32\n48 8\n26 6\n12 41\n16 25\n46 28\n38 27\n45 24\n30 34\n16 45\n47 11\n47 9\n20 15\n42 19\n24 24\n22 5\n23 31\n6 41\n9 32\n48 5\n29 21",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n2 99\n100 2\n1 2\n100 2\n100 1\n1 100\n99 1\n2 100\n1 1\n99 100\n2 2\n2 2\n1 1\n99 2\n2 1\n1 2\n1 99\n1 2\n100 2\n99 2\n100 1\n100 1\n1 2\n2 100\n1 2\n100 100\n99 99\n100 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 99\n2 100\n2 100\n2 1\n1 1\n100 100\n2 99\n1 2\n99 100\n99 99\n1 1\n1 99\n99 2\n99 100\n2 1\n1 1\n1 1\n2 100\n99 1\n1 1\n99 1\n1 99\n100 2\n2 1\n2 2\n1 99\n100 99\n1 2\n99 99",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}