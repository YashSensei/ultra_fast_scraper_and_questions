{
  "problem_code": "problems",
  "title": "Stacks of Zippy",
  "tags": [],
  "text": "RecentlyZippyreceived four stacks, named A B C D respectively. Firstly, there are n elements in stack A (the element sequence is a permutation of 1..n), and stack B C D are empty. He can do four types of operations:operation a: push the top element of stack A to stack B (if stack A is not empty, this operation can be done.)operation b: push the top element of stack B to stack D (if stack B is not empty, this operation can be done.)operation c: push the top element of stack A to stack C (if stack A is not empty, this operation can be done.)operation d: push the top element of stack C to stack D (if stack C is not empty, this operation can be done.)He can do 2*n operations in total. Obviously, there are n elements in stack D after he did the 2*n operations. Then he take out the top element in stack D one by one. If the first element he takes out is n, the second is n-1, ... the last is 1, he will be very happy. Also, he wants to make the operation sequence he did lexicographic smallest.InputFirst line is a number t, which is the number of test cases.Then following t test cases. For each test case, the first line contains a number n, which denotes the number of the elements in stack A. The second line contains n numbers, separated by a space, which are the elements in stack A, from top to the bottom.You can be sure that the sum of all n does not exceed 200000, and each n is not bigger than 100000.OutputFor each case, output a line. If there exists an answer, output the lexicographic smallest one (the operations Zippy does, separated by a space). If not, output 0.ExampleInput:241 3 4 242 3 4 1Output:a b a c a b b d0",
  "sample_input": "Input:241 3 4 242 3 4 1Output:a b a c a b b d0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JZPSTA",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "241 3 4 242 3 4 1",
      "expected_output": "a b a c a b b d0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5 1 7 1 7 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 6 5 4 8 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 7 6 2 8 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "65 55 85 40 29 2 7",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "83 60 56 21 20 13 99",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 39 59 22 20 52 65",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 1 67 28 67 82 50",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "94 95 73 99 59 36 11",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "457 300 70 159 424 69 446",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "350 348 262 440 260 307 442",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "490 417 383 427 282 105 464",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "83 463 72 153 159 154 331",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "293 249 246 72 480 234 122",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "229 308 343 375 257 288 175",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "323 329 395 314 390 344 51",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 999 2 2 1000 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 2 999 999 999 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:59"
}