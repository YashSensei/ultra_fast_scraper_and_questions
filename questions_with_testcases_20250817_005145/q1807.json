{
  "problem_code": "problems",
  "title": "The Proper Key",
  "tags": [],
  "text": "Many people think that Tetris was invented by two Russian programmers. But that\r\nis not the whole truth. The idea of the game is very old – even the Egyptians had\r\nsomething similar. But they did not use it as a game. Instead, it was used as\r\na very complicated lock. The lock was made of wood and consisted of a large\r\nnumber of square fields, laid out in regular rows and columns. Each field was\r\neither completely filled with wood, or empty. The key for this lock was\r\ntwo-dimensional and it was made by joining square parts of the same size\r\nas the fields of the lock. So they had a 2D lock and 2D key that could be\r\ninserted into the lock from the top. The key was designed so that it was\r\nnot possible to move it upwards. It could only fall down and it could\r\nslide sideways – exactly like in a Tetris game. The only difference is\r\nthat the key could not be rotated. Rotation in Tetris is really a Russian\r\ninvention.The entry gate into the Pyramid has such a lock. The ACM archaeologists have\r\nfound several keys and one of them belongs to the lock with a very high\r\nprobability. Now they need to try them out and find which one to use. Because\r\nit is too time-consuming to try all of them, it is better to begin with those keys that\r\nmay be inserted deeper into the lock. Your program should be able to\r\ndetermine how deep a given key can be inserted into a given lock.InputThe input consists ofTtest cases. The number of them (T) is given on\r\nthe first line of the input file.\r\nEach test case begins with a line containing two integersRandC(1 ≤ R,C ≤ 100) indicating the key size. Then exactlyRrows follow,\r\neach containingCcharacters. Each character is either a hash mark\r\n(#) or a period (.). A hash mark represents one square field made\r\nof wood; a period is an empty field. The wooden fields are always connected,\r\ni.e. the whole key is made of one piece.\r\nMoreover, the key remains connected even if we cut off arbitrary number of rows\r\nfrom its top. There is always at least one\r\nnon-empty field in the top-most and bottom-most rows and the left-most and\r\nright-most columns.After the key description, there is a line containing two integersDandW(1 ≤ D ≤ 10000,1 ≤ W ≤ 1000). The numberWis the lock width,\r\nandDis its\r\ndepth. The nextDlines containWcharacters each. The character may be\r\neither a hash mark (representing the wood) or a period (the free space).OutputYour program should print one line of output for each test case. The line\r\nshould contain the statement\r\n\"The key falls to depthX.\". ReplaceXwith the maximum depth to which the key can be inserted by moving it down \r\nand sliding it to the left or right only. The depth is measured as the distance\r\nbetween the bottom side of the key and the top side of the lock. If it is\r\npossible to move the key through the whole lock and take it away at the bottom\r\nside, output the sentence \"The key can fall through.\".ExampleSample Input:\r\n4\r\n2 4\r\n#.##\r\n###.\r\n3 6\r\n#....#\r\n#....#\r\n#..###\r\n2 3\r\n##.\r\n.##\r\n2 7\r\n#.#.#.#\r\n.#.#.#.\r\n1 1\r\n#\r\n1 10\r\n###....###\r\n3 2\r\n##\r\n.#\r\n.#\r\n1 5\r\n#.#.#\r\n\r\nSample output:\r\nThe key falls to depth 2.\r\nThe key falls to depth 0.\r\nThe key can fall through.\r\nThe key falls to depth 2.Warning: large Input/Output data, be careful with certain languages",
  "sample_input": "Sample Input:\r\n4\r\n2 4\r\n#.##\r\n###.\r\n3 6\r\n#....#\r\n#....#\r\n#..###\r\n2 3\r\n##.\r\n.##\r\n2 7\r\n#.#.#.#\r\n.#.#.#.\r\n1 1\r\n#\r\n1 10\r\n###....###\r\n3 2\r\n##\r\n.#\r\n.#\r\n1 5\r\n#.#.#\r\n\r\nSample output:\r\nThe key falls to depth 2.\r\nThe key falls to depth 0.\r\nThe key can fall through.\r\nThe key falls to depth 2.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PROPKEY",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "Sample \r\n4\r\n2 4\r\n#.##\r\n###.\r\n3 6\r\n#....#\r\n#....#\r\n#..###\r\n2 3\r\n##.\r\n.##\r\n2 7\r\n#.#.#.#\r\n.#.#.#.\r\n1 1\r\n#\r\n1 10\r\n###....###\r\n3 2\r\n##\r\n.#\r\n.#\r\n1 5\r\n#.#.#\r\n\r\nSample output:\r\nThe key falls to depth 2.\r\nThe key falls to depth 0.\r\nThe key can fall through.\r\nThe key falls to depth 2.",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "lqjidv\n5\n7 4\nd\nkvl\n8 3\nwsvfhttvykaa\nwbswi\npgmnyea\n4 8\nxmlq\nrwkqp\n4 7\nomvxdljndruct\nethulhp\n3 3\ngl\n7 4\nylvjzoebercte\n6 2\nf\nxvaj\nweeu\n9 6\njzqzrajklx\nqqqcyb wzqz\n6\npp ydm n so egqkw xhrv\n7\nzd plsmb i owao mry sxkin\nmzozq qt da sq mj\n9\nsil ajl rrcd vrhj t mke",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "xsgle\n1\n5 1\nikf\ng\n10 9\niwiuxlykgd\ne\nuwfisr\n2 1\nnge\nutectz\n2 5\nikxmfuv\nvqdblid\n7 6\nr\n3 7\nojjjw\n1 2\nlrnz\noos\ny\n3 4\nbbhrpa\nkvlwmt zy\n2\nrv l tzdkz jgj r wkvzs\n9\nn pw olw a fu xx\nzheuq jylg rtwxz e iggu\n4\nee z qk qyup ssemj wrd",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "umgwhmsr\n7\n1 8\nobxm\ny\n5 2\nwznkdqwwrvbn\nux\nkbr\n1 6\nqyw\nnvhd\n10 1\nomi\nfctprgzd\n9 6\nu\n4 7\nkrvngyykemadfgrdp\n2 5\nznn\nq\nql\n7 3\nasjbeoge\nhibl nnmafb\n8\nqpu yla ouva lu v w\n3\nuvdva gn ry v kpkvu pr\nai hebb crxnh p xvnlqfr\n5\nkfmx q lluo otxdk bg lfln",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "hsizxkvmypg\n40\n60 44\ngvalmkvj\nsrbzznov\n88 87\nphsbtmr\nzijjakeb\nllksdqo\n14 89\nf\nrrfdx\n77 31\nkzlrji\nigyq\n5 17\ngs\n8 20\nbvju\n4 98\ndch\nkuj\nb\n39 70\naqvsldx\nnw tgkdpge\n80\nt caxa npq x qkkiw uoriu\n52\nrchz nojx fr cc exeg oo\nt c vhkmm rnq mgbnne\n98\nwqcjn aevx sfoy jx o j",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ocv\n89\n89 25\ngzw\nanrr\n1 56\nhoifbcmlwhi\ntucd\ndylvcwe\n98 97\nfcct\nta\n3 49\nhhtnrjimvj\nwzuffsadp\n35 17\nq\n33 43\nn\n4 64\njpzr\npe\ngbv\n8 23\nrhqjxohptg\nh qbq\n50\nrm rg ci arz x yx\n60\nkrwbt prozj e st e shb\nungbt kh y hymou mqozd\n80\nycr ngq dzccl wh jbw qoy",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "balob\n72\n26 96\ncbyc\nfr\n9 42\nm\neyecsg\nbrwnl\n47 41\nbwq\nsyem\n26 5\nmdfnhtkqxezkry\nglxyaqvg\n19 91\nn\n41 96\nrk\n30 13\nanv\ncta\ngs\n100 91\nstw\nuxnyql ln\n33\nf k iue wquvc zzgue xl\n91\nzc by gl jooyo pev jmxl\nbnm ggb r h bllkfts\n87\nuwz n wz joum jw y",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "lmydyqgpkr\n72\n67 100\nmn\nccqxx\n80 82\nopbpdh\nplzblx\nbcrt\n66 6\nvs\ndzsr\n85 17\nsaadsbid\nube\n9 4\noi\n100 79\naadsmqbsdssnkzct\n50 84\nwak\nfe\nxvpc\n51 48\nxjinrsnd\nwczn hcd\n38\ncgx i dyy g or ryelu\n82\nqf gvsso zjxh iyeeg vhla lc\nljbx chvh tqbg tcdcf cmzmt\n6\nzi tghr exhxb qihw u mxhw",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "uq\n61\n58 68\nmfgk\nbplekleq\n89 28\nahuwidkn\nwep\nfgocuhtrw\n90 78\ns\nuxziv\n32 15\notab\nf\n50 21\nz\n5 76\nprbonemvmrc\n11 1\nwco\niepq\nvxjc\n64 36\nhfgiseusxu\nrgfp uvrlq\n7\nstgzq ann tjlor icwut jof k\n81\nmp owk e z uxf mve\nxrg qhmj hraq ze rjslv\n8\nhieey nfpfx jg fl ii ofaxw",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "nlkjtzjel\n149\n280 252\nrwbei\nxrknnujl\n495 423\na\nazzvf\ntos\n186 320\nydduq\nsesi\n331 227\njkjlrspattxjg\nkucinqxxmgoy\n105 462\nir\n78 228\nhzvbwxcivb\n255 111\nuws\ns\ni\n444 453\nkalounwaoq\ngjfzk j\n247\ndjjq g ild sye qmwpb cilup\n298\ndhlu mp xo aq qbor f\naxeb t szr btk nmtibg\n311\nqpqq s tt kkdxy glg dmi",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "mnxkzspdkqk\n353\n369 286\nwjqh\nyfrcmp\n135 418\nhkiobg\nqutgetpo\nphvsfxmrv\n283 112\nw\nfjk\n185 212\nhcusdetic\noigouna\n195 161\num\n150 417\nkskl\n71 421\nmv\nx\ni\n90 496\nbkkgmoagof\nih dwdln\n423\nxrg wqwth actbn dqy iktxt ifko\n473\ngzsss i rtllh dgtmr sdxoz wxu\nmhy qlqzd fi wdbe yesj\n191\ntjwcc kp ygs d pto fi",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "dmsbytppl\n464\n115 262\nuryapnkg\nz\n302 170\nje\ns\nfehf\n173 449\nehpz\nrokht\n121 386\nykadnc\ndlzwnfokpwmhoh\n309 230\nl\n147 259\nzwfnovhhht\n99 66\nnq\ndr\nu\n269 272\nrfjjak\nlree uo\n317\ngq ofu e g sq cocf\n143\nkgntj x b c ezrh fjpe\nj u sx wv ckoe\n95\neldle ioe idxd zqaob nhcn tgxxb",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "duqroroqegz\n384\n374 100\noebk\nw\n385 354\nvftiyley\njvvzguooh\nvgxeblxery\n489 91\nau\nkk\n351 222\ngvwvvncfutm\ncigmurkooobwtb\n442 215\nde\n184 360\ngmwzpompcjewvcioi\n303 111\nqcv\nxqog\njhw\n204 412\ncqacph\nguc kin\n201\nqy a gdgp l unzi bc\n492\nzsz i zaho k qso ukho\nwlj uy cmh dl iyizvr\n485\nc u lxlar orut qshbp zvlj",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "lphkoeiygr\n166\n103 390\nstqmod\nqaychogv\n451 338\nyieqsreekte\nhsfe\nkzqy\n59 341\nm\nsuv\n364 65\nknhrz\nfiihvxbtllccf\n54 204\ne\n202 115\nf\n481 216\nbp\nt\ne\n96 109\nezwkggcz\nb lpzqqig\n122\npoe wwnih ckg uhtmj venbt n\n299\nnt ft dpzze alc weotc lkw\ncl l q f ia\n411\nexn jp dh jgazo lgkdn e",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "yhg\n205\n64 183\neqn\nyfb\n307 427\nhyuwwbhmqf\nfyonvgkuvf\nbcdipovrjqvc\n165 126\ns\nty\n391 172\ntxzlzgheecxzqu\ntgxigb\n357 303\nz\n236 300\nluppmeiqbjzgcstsjow\n377 484\nqgiq\ng\nbk\n374 371\nyueydju\nc d\n287\nzu q tu s o pdka\n132\ndu imlxh wurcn xmvkc rp yiusk\nvel ig t tchj joyqr\n174\ndnt gvhan tv zh znujh vmfdb",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "uaqslc\n465\n278 269\npapz\nzzxajfk\n342 442\nd\nmjjfkknkmc\nogtwk\n449 91\nlgsvm\nqdtazo\n400 133\nt\njayp\n188 245\ne\n294 476\ngdlqpeduqqxgfeeaat\n372 476\njft\nra\nje\n442 146\nei\ncgtoh gzp\n498\nnv c tdufk wc no kbnv\n51\ng vp x uqgnl vhqw glh\ndy hxqu wc bgdn ppk\n458\nmynes ulqm gnfbm cq curoe vrgd",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "npgex\n1000\n1000 1000\nrsqsy\nuo\n1000 1000\nfd\nscdrlrbpo\ns\n1000 1000\njqbsv\nxni\n1000 1000\nlexpnvwuorz\nxqreppvspauhs\n1000 1000\nay\n1000 1000\nibekjflkpyju\n1000 1000\nfm\nov\nn\n1000 1000\nqqovdcxqy\nekpj bmwxkj\n1000\nhqm zz ic fcnf p mjo\n1000\na o opc nc hh blz\nhnl znu mit blaa shsg\n1000\ngwzqk tgw v vcusz tyay gq",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "wyp\n1000\n1000 1000\nbhwrpg\nxxww\n1000 1000\nylgzqatveiy\ntplmol\nrnvfgtau\n1000 1000\nhgcn\nhkydmh\n1000 1000\npcsaxgxhiq\nyhal\n1000 1000\nnh\n1000 1000\nprrqvpjkxpbj\n1000 1000\nujky\nl\ngj\n1000 1000\notlm\nrquhsa omqzmk\n1000\naxjq caqrj xvqc xwrrb ejmr kpcnu\n1000\nhay c lsohr s hfzr jxal\nmx lpq tmy mvyqb mn\n1000\nief o xtrak ar czv zn",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "ivexug\n2\n1 2\njgdhqvc\nngpnumbz\n1 2\nvmftomthfhk\nmdtekco\nwwxmoly\n1000 999\novema\nwbygb\n999 1\nwlxwdufj\ngrj\n1 2\ny\n2 2\nvhyjbgbspuiwagczap\n999 1000\nud\nj\nmhye\n1000 1000\nwlkzpnkmf\nzb ay\n1000\nejt uihiv lm lisvv xens jif\n999\nfdgw f xl umyz gl gr\ntyxgl mjryt st pqk qwtj\n1000\neafmj jpxc l kyjkh cs mojjc",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "evrhokkmx\n1000\n2 1000\nhovlo\nmmcul\n2 1\niryp\nnmruva\nglqf\n1 2\njyvkd\nzdaf\n1000 1000\niuaqpferal\nobfl\n1000 1\nv\n999 999\nnkskrw\n1000 999\ni\nubop\nt\n1000 1000\nmbnwxegyan\nbd mtdh\n1\nf tr ie fivp baru f\n2\nmlpcm fnw pcf jwyte zg i\ngsd synq lfmje xz sllyfyhw\n1000\nxixb hy hjyb e kjsmb kl",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}