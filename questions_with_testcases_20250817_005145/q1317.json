{
  "problem_code": "problems",
  "title": "Horrible Queries",
  "tags": [],
  "text": "World is getting more evil and it's getting tougher to get into the Evil League of Evil. Since the legendary Bad Horse has retired, now you have to correctly answer the evil questions of Dr. Horrible, who has a PhD in horribleness (but not in Computer Science). You are given an array ofNelements, which are initially all 0. After that you will be givenCcommands. They are:0 p q v- you have to addvto all numbers in the range ofptoq(inclusive), wherepandqare two indexes of the array.1 p q- output a line containing a single integer which is the sum of all the array elements betweenpandqinclusive.InputIn the first line you'll be givenT, number of test cases.Each test case will start withN(N≤ 100 000) andC(C≤ 100 000). After that you'll be givenCcommands in the format as mentioned above. 1 ≤p,q≤Nand 1 ≤v≤ 107.OutputPrint the answers of the queries.ExampleInput:18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8Output:80508",
  "sample_input": "Input:18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8Output:80508",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HORRIBLE",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "18 60 2 4 260 4 8 800 4 5 201 8 80 5 7 141 4 8",
      "expected_output": "80508",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1 1 7 10 2 2 6 2 10 4 9 10 10 9 2 2 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 9 3 10 9 9 4 2 5 8 10 4 8 2 5 9 10 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 2 5 1 4 3 3 8 6 3 1 3 3 4 4 5 1 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "46 37 24 75 99 16 39 35 49 12 9 73 50 31 68 93 100 10",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 35 76 60 95 22 66 48 17 79 34 22 95 38 35 75 72 68",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "36 49 42 100 98 96 63 26 20 9 12 71 87 50 2 82 30 85",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "48 59 72 38 3 25 99 90 62 39 33 94 96 77 60 2 90 80",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "82 87 17 9 45 64 64 17 10 29 90 59 1 21 88 97 39 46",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "26543 44976 40812 6329 40078 43060 28198 40757 45243 6135 10809 27816 13971 27253 7286 25747 34354 33083",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "20322 18505 23582 25211 43715 31734 28311 43200 46159 17001 23124 17219 13323 12384 27144 44208 25952 25194",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "33768 19745 45077 39301 37162 45053 49259 19141 45068 46509 20443 40725 49253 13129 32997 38190 40886 33970",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "7838 9301 8591 23532 28180 5284 44847 27949 47989 11031 5030 8918 11796 34563 17833 43001 20541 7540",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "43338 8915 27408 48119 34240 6604 25474 29581 49610 14304 34897 21066 26429 26055 47399 8071 32778 45804",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "18822 15327 49258 8883 37647 26096 20809 22336 23279 25019 49067 7560 17506 45974 32365 11687 24235 5410",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "36489 28150 25516 33724 49343 38833 43553 27462 41887 17770 5288 18409 44799 28926 5730 31303 9070 11776",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 2 2 1 2 99999 100000 100000 1 2 1 2 2 1 100000 1 1 99999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 99999 1 1 99999 1 99999 100000 1 2 1 2 1 99999 100000 99999 2 99999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:00"
}