{
  "problem_code": "problems",
  "title": "Phone Lines",
  "tags": [],
  "text": "There are several cities and towers on a straight line. Towers can be set to connection-accepting by paying a cost. We are given the location (on the X-axis), of the towers and the cities. Our job is to set up certain towers as connection-accepting. Now every city, pays you an amount equal toD - distance_travelled_by_data, for every unit of data (for every tower) it can send. (distance_travelled_by_data = cityX - towerX); Our job here is to set up connections on different towers to get maximal profit.Each city when it wants to route some data to a tower works with the following algorithm:Find the nearest tower to the left of the city.If it is within the range 'D', it sends the data to that tower. If this tower exceeds the range D, or if the tower doesn't accept connections, the city cant send the data and stops immediately. (Doesn't check the next available tower);If the data is sent successfully: Then the city:Skips three towers. (Doesn't care if these three towers are connection-accepting or not);Tries to send data to the next tower (the fourth one after the skipping), by using step (2);InputInput consists of multiple testcases.The first line of each test case contains three integers: D C T; the range, the number of cities and the number of towers, respectively.The second line of each test case contains exactly C integers saying the location of the cities (on the X-axis).The next T lines contain exactly two integers: location[i] connection-cost[i]; which is the position of\r\ntower i, and the cost to set up tower i as connection-accepting;The input ends with a line: \"-1 -1 -1\"OutputFor each test case, output a single line saying the maximum amount of profit you can make.ConstraintsNo two points (towers or cities), will have the same X-coordinate. T, C â‰¤ 100.SampleInput:4 9 6\r\n23\r\n43\r\n18\r\n15\r\n29\r\n50\r\n41\r\n31\r\n40\r\n32 2\r\n26 0\r\n46 7\r\n48 0\r\n50 3\r\n38 1\r\n-1 -1 -1Output:5",
  "sample_input": "Input:4 9 6\r\n23\r\n43\r\n18\r\n15\r\n29\r\n50\r\n41\r\n31\r\n40\r\n32 2\r\n26 0\r\n46 7\r\n48 0\r\n50 3\r\n38 1\r\n-1 -1 -1Output:5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PHONELIN",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "4 9 6\r\n23\r\n43\r\n18\r\n15\r\n29\r\n50\r\n41\r\n31\r\n40\r\n32 2\r\n26 0\r\n46 7\r\n48 0\r\n50 3\r\n38 1\r\n-1 -1 -1",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3 2\n3\n8\n4\n2\n6\n1\n4\n3\n9\n9 9\n9 4\n3 6\n7 7\n4 2\n5 6\n9 4 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 7 3\n9\n8\n9\n9\n3\n5\n8\n9\n7\n3 1\n1 1\n5 4\n10 10\n2 3\n3 5\n1 9 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 4\n3\n5\n1\n3\n3\n1\n1\n9\n1\n8 1\n7 3\n5 6\n6 7\n9 2\n7 1\n2 3 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "65 86 63\n19\n7\n46\n18\n54\n95\n97\n35\n4\n17 14\n76 91\n21 54\n41 14\n91 66\n98 62\n30 66 20",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 73 30\n43\n8\n14\n15\n53\n66\n42\n21\n73\n88 76\n100 72\n2 92\n50 48\n17 61\n51 34\n28 57 35",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "80 87 78\n70\n38\n48\n3\n19\n94\n71\n56\n24\n60 58\n74 62\n51 76\n17 56\n59 88\n2 69\n48 65 48",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "63 36 8\n32\n37\n81\n27\n52\n64\n29\n20\n81\n51 8\n72 75\n18 17\n27 47\n92 17\n82 85\n14 12 62",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "40 5 78\n33\n30\n7\n12\n87\n75\n74\n8\n93\n90 11\n10 10\n64 87\n67 34\n61 20\n16 55\n13 96 44",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "377 146 136\n54\n285\n162\n456\n272\n253\n301\n435\n373\n484 393\n190 351\n89 297\n249 242\n432 215\n381 68\n66 175 248",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "136 356 248\n205\n280\n442\n339\n342\n154\n73\n438\n68\n175 257\n127 491\n217 450\n139 466\n121 114\n63 98\n231 119 241",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "400 94 292\n444\n87\n86\n167\n468\n470\n138\n157\n225\n318 147\n84 298\n296 369\n369 59\n434 349\n146 219\n315 96 360",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "371 240 268\n257\n158\n160\n94\n353\n159\n341\n54\n392\n382 296\n203 285\n211 380\n334 288\n360 496\n433 247\n317 335 471",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "430 79 135\n118\n184\n483\n437\n180\n431\n367\n493\n494\n97 478\n334 97\n62 86\n253 433\n54 183\n148 164\n247 149 398",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "401 126 338\n89\n241\n259\n288\n290\n404\n217\n265\n137\n307 276\n472 494\n471 217\n55 328\n466 55\n395 152\n233 448 82",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "83 218 478\n188\n140\n495\n64\n165\n270\n401\n112\n153\n469 382\n89 220\n104 402\n379 448\n281 153\n331 469\n170 457 190",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1000\n2\n1000\n2\n999\n2\n1000\n999\n1\n999\n1000 1000\n1000 2\n1000 1000\n1000 1000\n1 2\n2 1000\n999 999 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 1000\n1000\n1\n999\n1\n999\n999\n999\n2\n999\n2 1\n1000 2\n999 1000\n999 1000\n999 2\n1000 1000\n1000 1000 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:28"
}