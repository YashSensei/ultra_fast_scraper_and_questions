{
  "problem_code": "problems",
  "title": "Farmers Cattle",
  "tags": [],
  "text": "Farmer John owns a single cow and he loves it a lot. The cow has a disease and is going to die. To survive, the cow needs medicine of a particular type each day. Let us say the cow needsmedicine[i] to survive the ithday. (medicine[i] will be terminated by -1, which is an unavailable medicine, and the cow has to invariably die that day).To help the cow, John has decided to buy pastures of some medicinal value. Farmer sees a two-dimensional grid of pastures, each cell having exactly one medicinal herb. Now he needs to buy a rectangular sub-region of the grid, whose area cannot exceedA(A> 1). With this region the farmer intends to feed his cow, as long as possible.InputThe input file consists of multiple test cases.The first line of each test case contains three integers,R,CandA.The second line consists of sequence of integers describingmedicine[i]. This list will be terminated by -1.The nextRlines containCintegers each, specifying the medicinal type of the herb in that cell. (1 ≤R,C≤ 200). All herbs are specified by non negative integers.Input terminates with a line containing three zeros and must not be processed.OutputFor each test case print a single line containing 5 integers:days r1 c1 r2 c2(1 ≤ r1 ≤ r2 ≤ R, 1 ≤ c1 ≤ c2 ≤ C)daysis the number of days the cow survives. We wish to maximise this.If there are more than one solutions print the one with minimalr1.If there are more than one solutions still, print the one with minimalc1.If there are more than one solutions still, print the one with minimalr2.If there are more than one solutions still, print the one with minimalc2.ExampleInput:3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n2 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 12 22 100\r\n0 0 0Output:4 1 1 2 3\r\n0 1 1 1 1\r\n5 1 2 3 3",
  "sample_input": "Input:3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n2 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 12 22 100\r\n0 0 0Output:4 1 1 2 3\r\n0 1 1 1 1\r\n5 1 2 3 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FCATTLE",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n2 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 3 22 100\r\n3 4 6\r\n12 30 12 100 22 -1\r\n30 12 5 3\r\n12 30 100 5\r\n22 12 22 100\r\n0 0 0",
      "expected_output": "4 1 1 2 3\r\n0 1 1 1 1\r\n5 1 2 3 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 2 7\n7 2 3 1 5 10\n6 2 7 4\n3 10 3 2\n8 8 6 9\n5 9 5\n1 10 1 7 8 6\n1 6 6 6\n7 3 1 1\n5 5 3 4\n4 7 5\n7 7 9 10 8 1\n2 6 8 5\n1 7 2 8\n2 1 7 7\n4 3 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 5\n9 1 9 9 6 7\n1 5 3 2\n10 8 10 8\n2 3 8 8\n9 5 9\n10 7 4 9 9 4\n1 5 1 4\n9 7 9 8\n6 2 5 4\n6 8 7\n6 10 3 5 1 7\n7 7 9 6\n2 7 8 2\n5 8 10 10\n5 4 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 6 9\n6 4 7 2 6 1\n4 4 10 10\n9 8 4 1\n6 5 9 10\n8 3 7\n4 6 6 7 6 9\n5 2 7 5\n4 4 4 2\n1 9 9 3\n1 7 5\n6 8 9 1 6 7\n3 2 1 3\n5 3 9 2\n8 9 10 10\n4 1 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 19 66\n46 23 15 28 14 93\n83 92 41 67\n28 78 50 5\n51 77 7 93\n1 89 47\n44 30 78 2 84 94\n7 47 53 4\n18 84 81 9\n51 49 69 28\n24 11 18\n35 97 76 43 80 67\n6 44 31 64\n54 59 22 66\n64 88 8 12\n5 37 15",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "42 82 80\n59 29 86 95 13 14\n48 88 12 51\n71 100 64 65\n2 62 100 34\n75 11 96\n83 63 42 2 8 60\n2 33 29 92\n77 15 69 64\n46 44 95 65\n67 67 46\n72 11 44 90 100 65\n76 60 27 55\n36 88 73 26\n28 72 97 62\n38 12 4",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "35 30 22\n34 88 20 40 81 84\n91 3 98 93\n88 22 18 69\n59 11 59 99\n8 96 64\n34 49 31 22 40 6\n62 40 95 26\n56 96 66 14\n68 25 86 12\n46 14 76\n50 63 1 95 89 53\n15 29 78 36\n25 93 34 85\n2 95 51 73\n27 2 88",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "76 55 85\n5 17 88 49 60 69\n65 71 87 40\n82 53 21 82\n94 94 51 72\n27 21 70\n46 9 69 56 94 80\n50 23 93 75\n23 34 57 23\n25 65 77 84\n23 47 67\n52 30 83 39 63 30\n36 80 38 70\n47 23 89 13\n99 23 9 16\n65 16 95",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 93 36\n50 10 49 59 53 14\n53 9 50 38\n56 32 99 92\n80 84 36 43\n59 27 47\n3 57 54 9 89 84\n74 7 65 9\n40 64 26 1\n78 89 47 44\n26 98 79\n47 73 10 55 27 75\n13 69 16 100\n80 58 58 17\n2 68 5 70\n5 63 45",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "61 199 225\n435 218 458 253 478 59\n496 372 110 286\n75 442 201 372\n434 279 178 110\n353 103 186\n475 123 490 131 71 88\n411 458 189 253\n370 441 387 135\n299 468 56 294\n277 376 261\n194 413 149 476 393 182\n232 211 379 207\n233 300 381 423\n445 167 282 347\n368 344 195",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "294 453 191\n302 58 292 114 103 209\n108 368 115 386\n486 313 422 273\n102 420 326 375\n88 381 216\n84 442 384 178 170 469\n400 349 400 122\n429 226 223 127\n383 435 468 474\n331 212 341\n102 138 227 149 393 402\n234 222 332 433\n59 296 308 434\n130 429 91 304\n246 463 213",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "264 323 248\n192 131 298 90 410 485\n393 141 277 377\n452 317 206 465\n227 412 174 82\n437 476 389\n256 326 378 140 324 323\n367 330 444 179\n222 157 303 69\n229 199 485 191\n386 499 465\n90 163 459 226 221 98\n59 123 425 151\n106 418 492 317\n79 457 472 142\n439 226 53",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "89 78 92\n417 192 267 217 262 452\n410 376 485 360\n338 415 252 72\n320 257 113 111\n78 137 390\n156 69 305 490 452 281\n197 360 236 60\n340 308 470 350\n456 242 453 468\n312 465 305\n255 263 301 361 281 197\n437 125 144 414\n130 330 423 157\n182 230 277 474\n197 324 230",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "160 467 484\n215 136 257 431 159 219\n195 127 495 175\n422 284 410 361\n145 260 239 153\n494 347 327\n173 92 241 109 210 244\n263 275 153 298\n495 171 300 156\n449 198 424 394\n58 130 342\n67 241 266 99 190 409\n370 334 477 217\n391 79 136 437\n278 360 224 181\n378 87 98",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "138 457 318\n150 308 55 100 406 328\n440 309 220 326\n244 404 68 292\n428 301 231 110\n210 153 174\n248 423 95 436 499 130\n398 478 258 448\n161 221 488 420\n441 407 258 223\n235 194 396\n486 400 418 263 192 58\n415 286 152 479\n164 107 281 418\n155 324 485 157\n237 343 378",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "287 212 394\n371 296 136 76 117 326\n145 498 471 128\n436 431 315 376\n95 225 437 85\n321 54 111\n254 228 80 184 362 336\n101 58 208 286\n181 296 115 319\n290 56 55 212\n440 426 457\n290 62 254 204 170 379\n121 209 192 364\n410 439 435 254\n58 345 92 347\n476 142 500",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 1\n2 1 1 2 999 1\n2 1 1 2\n1000 1 999 2\n1000 1 2 1\n1000 1000 1\n2 1 2 999 1 2\n1 1000 1 1000\n1 999 1000 999\n999 999 1000 999\n999 1000 2\n1 2 1 2 1 999\n1 999 1 1000\n999 2 1000 999\n2 999 2 999\n1000 999 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 1\n1000 2 1000 1 1000 1\n1 2 1000 999\n999 2 2 2\n1 1 999 1000\n2 1000 2\n1 999 1000 1 2 1\n999 999 1000 999\n2 1 999 999\n1 1 1000 2\n1000 1 1000\n999 1000 1 1 1000 1000\n999 1 2 2\n1 2 2 1\n1 2 999 1\n999 1000 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:07"
}