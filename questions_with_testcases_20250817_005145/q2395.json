{
  "problem_code": "problems",
  "title": "\"Shortest\" pair of paths",
  "tags": [],
  "text": "A chemical company has an unusual shortest path problem.\r\nThere are N depots (vertices) where chemicals can be stored.\r\nThere are M individual shipping methods (edges) connecting pairs\r\nof depots. Each individual shipping method has a cost. In\r\nthe usual problem, the company would need to find a way to route\r\na single shipment from the first depot (0) to the last (N - 1).\r\nThat's easy. The problem they have seems harder. They have to ship\r\ntwo chemicals from the first depot (0) to the last (N - 1). The chemicals\r\nare dangerous and cannot safely be placed together. The regulations say\r\nthe company cannot use the same shipping method for both chemicals.\r\nFurther, the company cannot place the two chemicals in same depot\r\n(for any length of time) without special storage handling --- available only at\r\nthe first and last depots.To begin, they need to know if it's possible to ship both\r\nchemicals under these constraints. Next, they need to find the\r\nleast cost of shipping both chemicals from first depot to the\r\nlast depot. In brief, they need two completely separate paths\r\n(from the first depot to the last) where the overall\r\ncost of both is minimal.Your program must simply determine the minimum cost or, if it's\r\nnot possible, conclusively state that the\r\nshipment cannot be made.The input will consist of multiple cases. The first line of\r\neach input will contain N and M where N is the number of depots\r\nand M is the number of individual shipping methods. You may assume\r\nthat N is less than 20 and that M is less than 200.The next M lines will contain three values, i, j, and v.\r\nEach line corresponds a single, unique shipping method. The values i\r\nand j are the indices of two depots, and v is the cost of\r\ngetting from i to j.Note that these shipping methods are directed. If something can\r\nbe shipped from i to j with cost 10, that says nothing about shipping\r\nfrom j to i. Also, there may be more than one way to ship between\r\nany pair of depots, and that may be important here.A line containing two zeroes signals the end of data and should not\r\nbe processed.SampleInput:2 1\r\n0 1 20\r\n2 3\r\n0 1 20\r\n0 1 20\r\n1 0 10\r\n4 6\r\n0 1 22\r\n1 3 11\r\n0 2 14\r\n2 3 26\r\n0 3 43\r\n0 3 58\r\n0 0Output:Instance #1: Not possible\r\nInstance #2: 40\r\nInstance #3: 73",
  "sample_input": "Input:2 1\r\n0 1 20\r\n2 3\r\n0 1 20\r\n0 1 20\r\n1 0 10\r\n4 6\r\n0 1 22\r\n1 3 11\r\n0 2 14\r\n2 3 26\r\n0 3 43\r\n0 3 58\r\n0 0Output:Instance #1: Not possible\r\nInstance #2: 40\r\nInstance #3: 73",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MSE06I",
  "scraped_at": "2025-08-17 00:33:57",
  "test_cases": [
    {
      "input": "2 1\r\n0 1 20\r\n2 3\r\n0 1 20\r\n0 1 20\r\n1 0 10\r\n4 6\r\n0 1 22\r\n1 3 11\r\n0 2 14\r\n2 3 26\r\n0 3 43\r\n0 3 58\r\n0 0",
      "expected_output": "Instance #1: Not possible\r\nInstance #2: 40\r\nInstance #3: 73",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1\n10 6 9\n1 4\n4 2 10\n10 3 2\n9 3 8\n10 5\n7 3 7\n7 2 4\n1 3 3\n2 9 9\n2 3 5\n7 8 4\n4 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 10\n4 7 9\n4 5\n2 5 4\n7 1 4\n6 6 3\n10 3\n10 5 1\n10 6 10\n8 2 8\n4 6 2\n5 10 2\n10 2 3\n10 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n3 7 5\n2 2\n10 2 10\n2 10 6\n6 8 7\n4 1\n9 9 10\n3 1 5\n3 10 3\n5 4 9\n7 7 8\n5 2 7\n7 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "82 64\n4 84 52\n54 39\n76 22 13\n14 90 40\n80 9 14\n3 48\n68 14 22\n93 11 52\n96 38 69\n53 91 7\n54 62 55\n9 60 70\n45 56",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 30\n13 49 90\n29 91\n45 99 65\n49 47 92\n92 67 25\n97 69\n34 24 24\n11 83 86\n76 74 22\n8 42 44\n44 97 60\n26 63 64\n61 41",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "35 75\n34 63 7\n66 79\n67 75 55\n37 64 59\n82 80 48\n82 92\n22 70 41\n97 6 96\n3 46 41\n17 81 24\n7 30 95\n98 33 48\n98 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "61 35\n15 18 75\n32 84\n17 72 32\n50 78 89\n86 96 10\n95 74\n16 87 40\n4 78 46\n49 38 66\n58 1 35\n40 8 50\n98 50 3\n36 43",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "71 78\n15 16 10\n38 45\n1 19 36\n58 53 22\n25 35 70\n77 71\n59 52 76\n75 53 56\n76 85 52\n14 19 18\n70 68 58\n19 62 98\n86 54",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "460 156\n278 149 163\n440 106\n131 72 216\n136 495 199\n245 254 327\n367 455\n115 482 401\n371 388 288\n166 178 487\n259 417 126\n442 355 386\n295 184 370\n332 418",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "333 417\n202 174 234\n326 473\n66 69 308\n307 220 374\n269 246 322\n380 308\n108 126 347\n405 371 79\n150 233 495\n500 74 147\n184 101 120\n444 111 431\n199 139",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "494 286\n428 163 335\n420 495\n465 137 340\n434 54 371\n74 173 333\n429 488\n256 87 62\n386 140 239\n60 405 236\n413 72 313\n291 333 97\n298 193 365\n213 272",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "297 498\n297 312 147\n62 245\n241 253 290\n281 129 334\n452 104 206\n453 478\n77 472 140\n414 367 461\n480 316 262\n449 137 434\n481 452 359\n59 488 494\n331 315",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "202 356\n412 127 434\n341 191\n120 85 460\n495 204 174\n433 384 199\n244 489\n248 476 296\n168 424 325\n242 92 340\n288 257 257\n172 85 328\n393 430 181\n148 304",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "242 88\n217 123 370\n116 163\n238 466 95\n410 206 187\n291 133 145\n178 258\n242 219 121\n167 193 117\n237 286 59\n80 412 450\n385 449 322\n430 478 154\n394 251",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "239 294\n184 178 494\n270 156\n64 141 331\n155 325 367\n371 374 265\n250 110\n140 468 375\n429 311 458\n263 76 248\n344 141 266\n313 495 406\n380 216 331\n392 76",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n2 1 1\n1 1000\n1 999 1\n999 2 1\n1 999 2\n1 1\n2 1000 999\n999 1000 2\n1000 1 1000\n2 1000 1000\n1000 1 2\n1 2 2\n1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n2 1000 999\n999 2\n2 999 2\n1 1 2\n1000 1000 2\n1 2\n1000 1000 1000\n2 1000 1000\n1 999 1\n2 1 1\n1000 2 1\n999 2 1000\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}