{
  "problem_code": "problems",
  "title": "Closest Triplet",
  "tags": [],
  "text": "Closest pair is an old problem that asks to find, given a set of N points in the plane, the pair that minimizes the distance between them. This problem can easily be solved using roughly N2operations by testing all possible pairs of points and keeping at each step the optimal pair. With a more clever approach, the problem has been solved using ∼ N log N operations. Closest triplet is an analogous problem which also takes a set of N points as input, and asks for the triplet (group of three points) that minimizes the sum of the three distances between each pair of them. In this case there is also a trivial solution that tests all possible triplets using roughly N3operations. However, since you are a clever programmer, we are confident that you are able to find a better algorithm.InputThe input contains several test cases, each one described in several lines. The first line contains an integer N indicating the number of points in the set (3 ≤ N ≤ 3000). Each of the next N lines describes a different point of the set using two integers X and Y separated by a single space (1 ≤ X, Y ≤ 106); these values represent the coordinates of the point in the XY plane. You may assume that within each test case no two points have the same location. The last line of the input contains a single −1 and should not be processed as a test case.OutputFor each test case output a single line with a real number representing the sum of the distances between each pair of points of any closest triplet of the set of points. Round the result to the closest rational number with three decimal places. In case of ties, round up. Always use exactly three digits after the decimal point, even if it means finishing with a zero.ExampleInput:41 14 11 51000 10009100000 200000200000 200000150000 28660360000 140000240000 140000150000 3400001 340000300000 340000150000 87087-1Output:12.000300000.796",
  "sample_input": "Input:41 14 11 51000 10009100000 200000200000 200000150000 28660360000 140000240000 140000150000 3400001 340000300000 340000150000 87087-1Output:12.000300000.796",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CLOSEST",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "41 14 11 51000 10009100000 200000200000 200000150000 28660360000 140000240000 140000150000 3400001 340000300000 340000150000 87087-1",
      "expected_output": "12.000300000.796",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 1 3 4 5 9 7 2 7 5 8 4 4 3 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9 1 1 6 10 6 10 1 1 8 9 4 8 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 2 9 8 4 3 9 2 8 9 8 10 10 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "95 72 17 76 45 75 23 55 98 48 48 53 34 48 76",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 20 100 99 20 21 68 66 80 4 47 63 84 39 41",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 86 65 26 77 42 78 90 22 16 72 56 66 65 48",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "31 37 4 14 37 3 54 44 40 36 79 56 73 46 99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 60 26 11 5 25 14 66 28 92 42 86 92 85 5",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1476 1181 552 728 1476 729 533 1361 516 1406 1338 681 659 1331 899",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "834 763 851 1467 1358 228 393 306 1166 835 165 1432 446 373 423",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1283 877 1152 188 368 641 1432 998 1279 947 467 225 926 964 260",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1075 428 1467 409 1419 221 859 834 524 726 1257 1056 1475 951 1114",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1379 1395 640 165 443 155 226 1272 751 302 1114 724 1248 528 470",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "691 369 1492 1269 1484 307 546 1413 1344 314 1287 837 982 459 252",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "528 358 1070 521 604 861 496 1258 965 877 964 1205 1388 425 1240",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 3000 1 2 3000 3000 2999 2999 2999 3000 2999 2 3000 2 2999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2999 2999 2 2999 2 2999 2999 1 3000 1 2 2999 1 2999 2999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}