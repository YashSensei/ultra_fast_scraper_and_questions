{
  "problem_code": "problems",
  "title": "Ada and Taxes",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She grows\r\nvegetables in a long furrow. All of the vegetables have some height. Local\r\npoliticians tax small vegetables, but as the furrow is very long, they always\r\ntax just a part of it.The taxes always have some limit on height. They are calculated very\r\nsimply: Tax collectors multiply the heights of all vegetables, which are\r\nlesser or equal to limit and are on desired segment.The taxes might be very high so tax collectors just round their income and\r\ntake only1000000007(109+7) banknotes. They are very kind, so they always leave\r\nthe rest to Ada. She is interested in how much they will leave her.NOTE:If none of the vegetable is lesser/equal to given limit, Ada is\r\nleft with symbolical 1 \"money\".InputThe first line contains an integer1 ≤ N, Q ≤ 3×105,\r\nthe number of vegetables Ada grows and the number of times the tax collectors\r\ncome.The second line containsNintegers1 ≤ Ai≤\r\n    3×105, the heights of vegetables.The nextQlines contains three integers0 ≤ L ≤ R < N,\r\nthe left and right vegetables of segment and1 ≤ H ≤\r\n3×105, the limit.OutputPrint a single line for each query with the number of money Ada will be left with\r\nafter each tax collecting.Example Input10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3Example Output1\r\n6\r\n362880\r\n280\r\n60\r\n3",
  "sample_input": "10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3",
  "sample_output": "1\r\n6\r\n362880\r\n280\r\n60\r\n3",
  "link": "https://www.spoj.com/problems/ADATAXES",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "10 6\r\n1 2 3 4 5 10 9 8 7 6\r\n5 5 5\r\n0 2 3\r\n0 9 9\r\n4 8 8\r\n2 4 11\r\n2 2 3",
      "expected_output": "1\r\n6\r\n362880\r\n280\r\n60\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 7\n3 2 7 7 3 10 6 6 10 1\n7 2 8\n1 6 10\n7 3 5\n10 8 8\n1 2 3\n6 7 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9\n2 3 9 6 9 8 6 7 2 1\n5 8 6\n7 5 6\n6 2 7\n3 8 7\n6 9 9\n2 7 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n10 1 3 4 2 10 4 3 10 2\n2 5 8\n1 9 1\n1 3 6\n8 8 2\n3 4 6\n2 5 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "20 82\n8 36 29 83 88 85 22 45 26 64\n54 89 89\n94 15 6\n39 79 46\n73 76 48\n13 82 59\n73 58 62",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 43\n56 48 22 32 89 10 75 56 24 51\n60 1 65\n13 75 69\n89 30 76\n4 21 61\n73 46 64\n7 55 81",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "67 2\n26 42 49 98 28 2 24 50 7 89\n13 75 84\n96 95 44\n25 54 76\n69 4 33\n89 60 59\n45 24 14",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 9\n72 98 87 2 29 31 95 69 100 22\n43 93 14\n95 3 14\n52 24 44\n83 90 87\n8 17 41\n4 61 65",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 61\n73 80 97 79 39 62 66 75 35 36\n22 63 66\n53 49 50\n57 28 67\n58 1 40\n98 84 96\n63 13 94",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "293 416\n155 263 146 105 160 387 195 404 266 184\n433 292 139\n497 399 84\n450 142 152\n468 262 298\n485 366 265\n265 92 389",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "51 113\n338 154 101 90 142 109 412 406 102 143\n320 189 69\n482 100 184\n419 247 361\n118 96 76\n240 353 442\n406 323 437",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "464 261\n122 370 379 185 474 366 54 383 177 102\n203 127 366\n416 98 271\n456 253 386\n207 382 185\n457 140 211\n298 58 455",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "458 436\n251 74 218 223 296 134 472 293 195 416\n204 146 283\n415 323 432\n97 253 499\n286 376 77\n225 87 191\n85 267 168",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "470 230\n224 341 424 460 350 107 116 247 81 260\n342 500 478\n267 258 379\n96 209 231\n292 190 292\n94 462 101\n411 89 78",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "352 238\n283 99 189 410 169 84 69 306 468 221\n422 302 250\n144 131 294\n154 108 280\n135 436 367\n196 475 259\n162 402 114",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "152 306\n403 453 416 287 449 243 252 164 481 76\n414 289 409\n212 267 231\n429 264 432\n96 401 81\n431 482 405\n63 157 471",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n1 1 1 1 1000 999 1 1 999 1000\n2 999 1\n1 1 1000\n1 1 2\n1000 1000 1\n2 1 1000\n2 999 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\n2 1000 999 999 1000 999 1000 2 1000 1000\n1000 2 2\n2 999 999\n999 999 1\n1000 2 2\n999 1 999\n1000 2 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:53"
}