{
  "problem_code": "problems",
  "title": "Age of Empires",
  "tags": [],
  "text": "This is the hard version of problemSC1.\"Age of Empires\" is a famous real-time strategy game. Resource is one of the most important consideration when playing this game. In this game, there are four different types of resources: food, wood, stone and gold.The Villager is a common civilian unit for almost every game. They are the backbone of all civilizations. The Villagers are arguably the most important units in the game because they are able to collect all the resources. Each villager could gather A1 units of food, or B1 units of wood, or C1 units of stone, or D1 units of gold. Note that the villager can not split one second into smaller pieces to gather different types of resource. For example, a single villager can not gather A1/2 units of food and B1/2 units of wood for a single second. Moreover, all kinds of recourse are gathered exactly the end of that second. Nevertheless, different villagers could gather different types of resources at a time.You can also train more villagers to speed up the process of gathering. To train a villager, you must spend X units of food at the beginning of a second, and a new villager will able to work after T seconds. Please note that at the beginning of the second you start to train a villager, you must have not less than X units of food. All villagers are trained at the Town Center but unfortunately there is only one Town Center, so your can only train one villager at a time.You have N villagers at the beginning of the game with initially no food, wood, stone or gold at all. You are interested in the fastest way to gather enough resources, more precisely, at least A2 units of food and B2 units of wood and C2 units of stone and D2 units of gold.InputEach test case consists of three lines. The first line contains four integers A1, B1, C1 and D1 (1 <= A1, B1, C1, D1 <= 10^18), indicating the amount of resource a villager can gather for each type in a second. The second line also contains four integers A2, B2, C2 and D2 (0 <= A2, B2, C2, D2 <= 10^18), indicating the amount of resource required. The third line contains three integers N, X and T (1 <= N,X,T <= 10^5), indicating that you have N villager at the beginning of the game, and it will spend X units of food and T seconds to train each new villager.All integers are sepearted by single spaces.Process until EOF is reached.OutputFor each test case, output a integer - the minimum time to gain enough resources. See the example for more format details.ExampleInput:1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25Output:Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
  "sample_input": "Input:1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25Output:Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AGE2",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "1 1 1 1\r\n1 1 1 1\r\n4 1 1\r\n1 1 1 1\r\n2 2 2 2\r\n1 1 1\r\n1 1 1 1\r\n10 10 10 10\r\n1 1 25",
      "expected_output": "Case 1: 1\r\nCase 2: 5\r\nCase 3: 34",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 1 6 8\n3 6 9 3\n10 4 8\n3 7 5 9\n6 5 3 9\n7 2 7\n9 2 2 1\n10 7 10 6\n1 7 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 5 6\n5 2 3 9\n4 8 1\n9 3 2 6\n6 2 5 9\n10 8 1\n7 1 10 2\n6 6 8 8\n10 9 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 10 9\n2 1 2 5\n4 5 10\n7 2 7 5\n6 4 3 10\n5 3 2\n9 2 8 8\n7 8 7 7\n1 9 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "15 60 79 50\n74 76 69 25\n19 30 13\n96 24 54 1\n89 95 32 2\n65 67 2\n28 48 43 83\n72 22 97 88\n25 73 34",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "27 31 9 47\n21 16 89 79\n35 4 35\n37 18 26 10\n76 24 60 67\n76 14 2\n65 67 29 11\n82 23 93 99\n43 69 71",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 94 83 16\n33 11 65 62\n92 13 95\n78 21 36 56\n85 76 5 87\n77 14 11\n3 43 63 83\n40 23 27 3\n58 63 19",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 55 51 98\n37 17 73 3\n71 31 99\n94 13 57 29\n6 5 56 88\n84 79 9\n93 79 55 39\n78 52 30 36\n40 61 66",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "69 84 54 40\n64 57 6 39\n87 75 30\n78 76 84 32\n2 93 57 9\n57 51 64\n16 18 80 8\n12 98 13 26\n35 49 39",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "139 383 229 196\n321 134 414 383\n483 201 402\n111 332 165 442\n147 458 192 279\n434 338 212\n439 210 467 483\n207 262 421 158\n205 483 336",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "154 358 137 380\n495 497 335 94\n186 473 472\n145 90 343 280\n404 320 274 182\n179 325 277\n441 220 332 306\n50 478 378 399\n68 60 118",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "381 498 172 332\n185 415 346 499\n293 491 473\n320 237 51 406\n326 461 427 380\n155 124 94\n481 231 481 141\n218 238 268 55\n208 376 68",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "187 480 354 292\n93 206 425 452\n187 76 95\n328 436 334 412\n219 367 285 156\n225 432 291\n230 467 500 216\n285 310 443 477\n410 197 87",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "398 393 178 415\n472 322 400 293\n273 247 350\n218 415 61 129\n371 165 276 166\n442 305 442\n119 157 419 346\n438 336 144 333\n92 412 261",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "150 220 53 423\n210 321 101 340\n478 406 423\n465 162 146 449\n179 383 403 201\n500 114 254\n467 500 269 363\n398 249 336 275\n463 212 270",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "323 250 125 150\n66 291 403 464\n102 122 254\n66 396 91 416\n257 283 137 476\n364 458 59\n166 338 205 340\n205 217 428 428\n163 110 200",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 2 1\n999 999 999 999\n2 2 1000\n2 999 2 1000\n999 2 999 2\n999 999 2\n1 1 1 999\n1 999 1 1\n999 1000 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1000 1\n2 1 1000 2\n999 1 1\n999 1000 2 1\n2 999 1000 1\n1000 999 999\n999 1 999 1\n1 999 1 999\n1 1000 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:00"
}