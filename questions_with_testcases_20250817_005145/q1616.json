{
  "problem_code": "problems",
  "title": "Wine trading in Gergovia",
  "tags": [],
  "text": "Gergovia consists of one street, and every inhabitant of the city is a wine salesman. Everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each inhabitant gets what he wants.There is one problem, however: Transporting wine from one house to another results in work. Since all wines are equally good, the inhabitants of Gergovia don't care which persons they are doing trade with, they are only interested in selling or buying a specific amount of wine.In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity we will assume that the houses are built along a straight line with equal distance between adjacent houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work.InputThe input consists of several test cases.Each test case starts with the number of inhabitants N (2 ≤ N ≤ 100000).The following line contains n integers ai(-1000 ≤ ai≤ 1000).If ai≥ 0, it means that the inhabitant living in the ithhouse wants to buy aibottles of wine. If ai< 0, he wants to sell -aibottles of wine.You may assume that the numbers aisum up to 0.The last test case is followed by a line containing 0.OutputFor each test case print the minimum amount of work units needed so that every inhabitant has his demand fulfilled.ExampleInput:55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000Output:99000",
  "sample_input": "Input:55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000Output:99000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GERGOVIA",
  "scraped_at": "2025-08-17 00:33:33",
  "test_cases": [
    {
      "input": "55 -4 1 -3 16-1000 -1000 -1000 1000 1000 10000",
      "expected_output": "99000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 3 5 6 2 9 1 3 7 7 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 6 4 8 4 10 5 6 4 7 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 6 7 7 6 10 8 3 1 9 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "25 1 77 74 68 95 9 37 52 60 76",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "44 20 26 32 72 94 13 78 19 59 86",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 75 72 27 80 52 83 28 57 71 20",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "40 10 66 88 51 14 10 58 55 56 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 10 65 92 1 56 39 55 85 33 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12503 41118 48882 23695 17428 47080 44582 20452 12775 19503 32158",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "44700 22232 34722 33502 8563 42492 22249 44667 41393 24075 34438",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9701 49695 16460 7655 27574 8720 5765 11729 49820 45006 45204",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "13170 10258 41153 46139 35625 22745 37743 47401 14343 43095 5997",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "48043 40548 31555 49431 11705 35807 35156 37114 18153 41175 31043",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15397 33668 27984 22932 19956 24268 5890 23261 46433 28899 13734",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "29432 12553 40684 46782 41259 27753 29062 38080 27651 36495 35975",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1 1 99999 1 2 2 2 99999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2 99999 100000 99999 2 100000 99999 1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}