{
  "problem_code": "problems",
  "title": "Almost Shortest Path",
  "tags": [],
  "text": "Finding the shortest path that goes from a starting point to a destination point given a set of points and route lengths connecting them is an already well known problem, and it's even part of our daily lives, as shortest path programs are widely available nowadays.Most people usually like very much these applications as they make their lives easier. Well, maybe not that much easier.Now that almost everyone can have access to GPS navigation devices able to calculate shortest paths, most routes that form the shortest path are getting slower because of heavy traffic. As most people try to follow the same path, it's not worth it anymore to follow these directions.With this in his mind, your boss asks you to develop a new application that only he will have access to, thus saving him time whenever he has a meeting or any urgent event. He asks you that the program must answer not the shortest path, but the almost shortest path. He defines the almost shortest path as the shortest path that goes from a starting point to a destination point such that no route between two consecutive points belongs to any shortest path from the starting point to the destination.For example, suppose the figure below represents the map given, with circles representing location points, and lines representing direct, one-way routes with lengths indicated. The starting point is marked as S and the destination point is marked as D. The bold lines belong to a shortest path (in this case there are two shortest paths, each with total length 4). Thus, the almost shortest path would be the one indicated by dashed lines (total length 5), as no route between two consecutive points belongs to any shortest path. Notice that there could exist more than one possible answer, for instance if the route with length 3 had length 1. There could exist no possible answer as well.InputThe input contains several test cases. The first line of a test case contains two integersN(2 ≤N≤ 500) andM(1 ≤M≤ 104), separated by a single space, indicating respectively the number of points in the map and the number of existing one-way routes connecting two points directly. Each point is identified by an integer between 0 andN-1. The second line contains two integersSandD, separated by a single space, indicating respectively the starting and the destination points (S≠D; 0 ≤S,D<N).Each one of the followingMlines contains three integersU,VandP(U≠V; 0 ≤U,V<N; 1 ≤P≤ 103), separated by single spaces, indicating the existence of a one-way route fromUtoVwith distanceP. There is at most one route from a given pointUto a given pointV, but notice that the existence of a route fromUtoVdoes not imply there is a route fromVtoU, and, if such road exists, it can have a different length. The end of input is indicated by a line containing only two zeros separated by a single space.OutputFor each test case in the input, your program must print a single line, containing-1if it is not possible to match the requirements, or an integer representing the length of the almost shortest path found.ExampleInput:7 9\r\n0 6\r\n0 1 1\r\n0 2 1\r\n0 3 2\r\n0 4 3\r\n1 5 2\r\n2 6 4\r\n3 6 2\r\n4 6 4\r\n5 6 1\r\n4 6\r\n0 2\r\n0 1 1\r\n1 2 1\r\n1 3 1\r\n3 2 1\r\n2 0 3\r\n3 0 2\r\n6 8\r\n0 1\r\n0 1 1\r\n0 2 2\r\n0 3 3\r\n2 5 3\r\n3 4 2\r\n4 1 1\r\n5 1 1\r\n3 0 1\r\n0 0Output:5\r\n-1\r\n6",
  "sample_input": "Input:7 9\r\n0 6\r\n0 1 1\r\n0 2 1\r\n0 3 2\r\n0 4 3\r\n1 5 2\r\n2 6 4\r\n3 6 2\r\n4 6 4\r\n5 6 1\r\n4 6\r\n0 2\r\n0 1 1\r\n1 2 1\r\n1 3 1\r\n3 2 1\r\n2 0 3\r\n3 0 2\r\n6 8\r\n0 1\r\n0 1 1\r\n0 2 2\r\n0 3 3\r\n2 5 3\r\n3 4 2\r\n4 1 1\r\n5 1 1\r\n3 0 1\r\n0 0Output:5\r\n-1\r\n6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMER08A",
  "scraped_at": "2025-08-17 00:33:14",
  "test_cases": [
    {
      "input": "7 9\r\n0 6\r\n0 1 1\r\n0 2 1\r\n0 3 2\r\n0 4 3\r\n1 5 2\r\n2 6 4\r\n3 6 2\r\n4 6 4\r\n5 6 1\r\n4 6\r\n0 2\r\n0 1 1\r\n1 2 1\r\n1 3 1\r\n3 2 1\r\n2 0 3\r\n3 0 2\r\n6 8\r\n0 1\r\n0 1 1\r\n0 2 2\r\n0 3 3\r\n2 5 3\r\n3 4 2\r\n4 1 1\r\n5 1 1\r\n3 0 1\r\n0 0",
      "expected_output": "5\r\n-1\r\n6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 10\n10 6\n6 1 2\n5 1 8\n10 9 1\n8 3 8\n10 7 4\n2 4 7\n6 7 7\n7 1 10\n5 8 1\n9 3\n6 5\n7 2 7\n4 7 1\n1 4 10\n3 3 4\n5 8 9\n3 4 6\n1 1\n2 6\n8 5 3\n1 6 7\n10 7 8\n8 7 7\n6 1 1\n8 1 6\n2 6 5\n7 1 7\n7 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n2 6\n9 8 1\n1 6 8\n6 3 2\n10 6 3\n5 7 1\n4 6 1\n10 10 6\n8 5 6\n2 5 5\n9 8\n1 2\n9 2 10\n1 6 1\n4 6 8\n6 4 7\n5 8 9\n9 4 3\n8 10\n4 7\n6 7 6\n8 3 4\n8 2 8\n6 4 5\n4 2 3\n9 7 2\n7 1 9\n3 6 6\n3 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\n6 5\n2 2 1\n1 1 1\n6 3 2\n4 9 9\n1 6 4\n1 5 5\n10 10 4\n2 8 7\n6 8 7\n10 10\n8 8\n9 6 3\n3 10 4\n9 8 10\n2 7 8\n1 4 1\n5 9 3\n7 3\n3 1\n10 10 6\n3 9 5\n2 6 3\n5 7 9\n9 4 8\n7 6 7\n9 7 8\n3 10 7\n1 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 14\n26 73\n25 91 87\n75 29 61\n52 91 66\n81 69 92\n63 19 39\n25 10 20\n2 81 54\n43 87 90\n49 38 21\n92 71\n62 33\n3 36 26\n44 38 72\n14 41 99\n14 72 68\n93 72 33\n79 48 25\n39 43\n28 99\n10 6 83\n49 12 18\n38 54 41\n86 9 7\n80 100 15\n46 98 81\n13 10 94\n73 48 84\n74 43",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "66 5\n37 42\n22 9 74\n34 14 95\n65 41 89\n96 27 59\n15 85 24\n90 26 94\n68 69 74\n52 58 83\n46 84 55\n51 74\n39 35\n31 30 14\n26 66 9\n11 39 76\n75 20 8\n13 95 44\n61 64 91\n41 74\n65 5\n18 55 82\n47 42 55\n39 42 79\n41 69 72\n94 90 76\n4 28 64\n78 40 63\n82 37 9\n96 76",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 23\n5 89\n32 28 33\n33 52 98\n33 64 97\n9 38 40\n95 25 35\n18 45 76\n16 98 57\n73 74 65\n35 91 61\n97 85\n2 86\n4 17 53\n26 100 98\n63 79 66\n53 31 18\n6 65 36\n81 34 7\n50 16\n75 63\n46 27 24\n71 34 98\n12 15 42\n96 22 10\n91 29 98\n59 4 55\n13 47 60\n73 8 84\n11 96",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "54 98\n53 24\n8 24 43\n67 73 61\n66 59 47\n23 17 88\n12 31 23\n33 64 42\n49 40 39\n77 89 75\n42 62 44\n15 21\n19 37\n86 40 2\n67 96 72\n82 31 92\n58 8 32\n86 13 3\n70 41 97\n43 96\n66 80\n91 21 94\n53 47 83\n6 98 80\n35 3 1\n26 84 45\n13 73 64\n42 74 91\n50 92 57\n76 42",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 83\n80 1\n73 42 93\n47 28 64\n57 89 19\n85 32 22\n12 26 10\n34 53 19\n96 62 67\n48 63 90\n45 3 47\n49 89\n93 88\n52 42 28\n11 95 91\n39 97 81\n56 90 98\n88 68 29\n31 43 6\n38 93\n31 18\n13 13 40\n99 23 43\n34 65 62\n95 7 45\n90 65 40\n29 36 55\n69 53 90\n24 7 26\n67 59",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "164 98\n249 183\n45 72 249\n138 43 104\n215 167 232\n27 39 116\n211 179 102\n203 230 142\n102 31 187\n89 133 104\n27 217 69\n42 123\n161 57\n240 88 231\n83 157 149\n183 131 190\n210 146 225\n52 226 140\n168 189 198\n43 59\n26 170\n159 192 177\n127 109 226\n30 175 108\n50 236 147\n177 117 119\n105 110 117\n49 223 212\n61 101 126\n151 232",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "146 212\n204 117\n236 97 232\n139 108 149\n247 228 171\n89 57 137\n175 190 49\n154 127 149\n169 121 121\n162 61 36\n214 206 167\n199 40\n60 112\n160 37 52\n40 223 139\n157 93 136\n144 250 234\n101 224 133\n179 198 223\n94 52\n196 124\n117 212 211\n156 179 49\n48 97 207\n212 99 122\n142 47 66\n86 163 209\n180 68 47\n85 26 166\n135 124",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "47 204\n109 141\n62 187 117\n236 86 208\n158 121 232\n56 245 94\n239 244 36\n214 140 107\n157 120 180\n142 59 118\n137 40 39\n85 120\n143 173\n192 232 132\n129 40 214\n98 220 178\n196 77 122\n36 133 243\n224 120 133\n180 242\n95 147\n43 103 119\n28 65 26\n28 111 88\n82 115 164\n114 91 92\n203 93 73\n31 142 113\n142 199 112\n95 225",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "211 137\n230 58\n32 74 153\n249 249 46\n228 98 64\n46 226 104\n46 116 216\n28 245 133\n136 128 157\n65 49 233\n140 116 146\n110 184\n241 198\n224 250 73\n225 113 186\n127 191 73\n169 202 80\n226 199 218\n159 244 95\n248 188\n44 116\n76 160 143\n84 67 58\n186 230 64\n204 93 202\n61 65 133\n144 102 119\n169 245 229\n119 94 99\n120 141",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "52 83\n133 153\n82 168 209\n81 175 201\n46 110 174\n61 151 51\n217 54 145\n76 131 97\n67 43 31\n111 237 229\n47 97 29\n134 170\n245 117\n152 232 66\n87 242 211\n198 80 130\n171 152 171\n220 212 135\n25 29 105\n88 70\n126 100\n156 74 35\n125 151 156\n166 213 189\n240 162 73\n36 195 109\n160 217 122\n25 45 237\n28 186 36\n51 116",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "204 134\n61 109\n56 235 164\n124 131 116\n34 101 168\n89 186 125\n233 118 116\n26 246 215\n191 74 217\n67 163 172\n226 123 198\n159 176\n67 142\n31 84 225\n25 93 152\n85 72 124\n198 137 116\n232 74 39\n222 243 170\n109 50\n203 93\n111 133 59\n83 33 220\n136 105 229\n209 105 109\n226 246 43\n215 86 157\n37 134 90\n119 166 197\n52 178",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "239 54\n122 193\n230 206 229\n159 185 57\n42 61 135\n58 107 250\n212 194 198\n223 59 139\n34 148 55\n34 164 234\n150 203 91\n225 129\n127 145\n227 130 250\n110 172 111\n144 29 242\n193 142 192\n29 177 76\n52 201 142\n129 74\n249 243\n48 183 178\n235 166 121\n192 118 58\n249 150 137\n218 90 143\n64 217 162\n154 84 103\n103 204 71\n181 208",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500 500\n500 500",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "499 2\n500 1\n2 500 499\n1 1 2\n499 2 1\n1 1 1\n499 2 1\n500 500 499\n2 500 2\n499 2 1\n499 1 2\n499 2\n500 2\n2 2 499\n2 2 500\n1 1 2\n500 499 500\n499 2 500\n499 499 500\n500 500\n2 2\n1 2 500\n1 1 499\n2 1 1\n500 499 499\n499 500 2\n500 500 2\n2 2 500\n1 499 500\n500 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "499 499\n499 1\n499 499 499\n499 2 1\n499 500 2\n500 2 2\n1 500 500\n500 1 499\n500 2 500\n2 499 500\n500 2 500\n1 499\n500 2\n1 1 1\n500 2 1\n1 500 500\n499 499 2\n499 500 500\n500 1 500\n500 499\n499 1\n500 499 500\n2 1 500\n500 1 499\n500 1 1\n2 1 1\n499 1 500\n1 499 1\n2 500 500\n1 500",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:34"
}