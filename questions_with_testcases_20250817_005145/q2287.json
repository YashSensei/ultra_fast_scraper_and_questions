{
  "problem_code": "problems",
  "title": "Double Time",
  "tags": [],
  "text": "In 45 BC a standard calendar was adopted by Julius Caesar - each year would have 365 days, and every fourth year have an extra day - the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles.Write a program that will read in a date, determine which style it is in, and then convert it to the other style.InputInput will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single '#'.OutputOutput will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk ('*') immediately after the day of the month (with no intervening space). Note that this will not apply to the input.ExampleInput:Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#Output:Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
  "sample_input": "Input:Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#Output:Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOUTI",
  "scraped_at": "2025-08-17 00:33:59",
  "test_cases": [
    {
      "input": "Saturday 29 August 1992\r\nSaturday 16 August 1992\r\nWednesday 19 December 1991\r\nMonday 1 January 1900\r\n#",
      "expected_output": "Saturday 16* August 1992\r\nSaturday 29 August 1992\r\nWednesday 1 January 1992\r\nMonday 20* December 1899",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 7\ngkwio 2 foqx 4\n7 9\nejx 1 vquxgz 2\n5 2\nvepmiphak 4 ijb 6\n10 7\nwhj 3 ysigy 3\nd",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\nkbw 8 qzi 9\n10 3\nbnazxkf 5 tk 7\n10 9\nrzo 9 j 2\n7 7\nrmslo 4 dhpsjee 5\nr",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\nanoiut 5 f 3\n1 8\nhkrj 2 wod 1\n1 6\nqmk 1 yhtkh 1\n9 3\nfinhli 6 z 9\na",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "48 33\ntmkk 98 dtp 70\n66 78\nke 28 oq 51\n90 10\noyklh 16 aqepq 19\n3 75\nx 41 qf 9\nsw",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "93 11\ny 68 scwlih 35\n11 52\nruccyzux 95 cn 77\n53 33\nb 97 rcliuq 51\n2 4\nordg 48 n 82\nb",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "100 97\nz 18 gnp 27\n12 10\noo 19 d 63\n29 80\nzhx 92 c 22\n70 91\nmu 30 nyhlg 96\nf",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 47\nwenjsa 32 swxvej 87\n73 99\njtvrpkxh 29 tagtwo 23\n17 4\nujd 63 l 3\n87 16\naohc 57 k 11\njb",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 67\nz 61 scovh 77\n82 86\nnssptpi 28 hnpca 21\n19 66\nsptrdx 93 wfvztwmn 52\n20 32\nf 22 d 76\np",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "139 324\nqe 172 dtbpx 141\n225 398\nppfbun 280 pwwwa 211\n363 197\nwpog 76 ebc 321\n492 57\nxoznf 315 ua 235\nr",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "395 94\nf 393 ao 170\n69 407\nnpnsasj 372 tvsl 139\n173 337\nanid 165 mzonlu 397\n270 284\nk 483 xkuwv 304\npm",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "263 87\nnbl 427 ykk 383\n484 54\nsilteyas 428 pnsp 96\n428 401\ngzedmcoj 420 mek 273\n294 280\nzaimep 77 ag 332\np",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "133 404\nnis 221 qyr 413\n483 475\nlqri 240 cbhxw 143\n203 281\nuxmoo 73 jnmyfvt 108\n300 472\nml 314 odq 475\nz",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "308 131\nxqweiufi 222 u 365\n98 243\nyunypg 54 pnn 124\n235 99\nxmxsbxyz 228 mntkgsc 51\n433 61\nsp 261 azmeqv 329\nfq",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "232 212\nynvmo 355 mtoz 248\n296 213\nbn 377 ytatuo 485\n366 182\nzecxlgdv 331 arcw 177\n53 453\nik 493 rghxjp 246\nwt",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "158 182\ntl 227 ux 393\n315 450\nlrxlyl 300 j 392\n57 468\nyxhpnz 475 fuzsc 498\n465 106\no 499 udbngrp 481\nld",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nfhjky 1000 g 1000\n1000 1000\nooa 1000 qu 1000\n1000 1000\nss 1000 pordcmxl 1000\n1000 1000\nifyy 1000 olih 1000\ngt",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nehbhuxvh 1000 nsoyk 1000\n1000 1000\nhebqkq 1000 sy 1000\n1000 1000\nrfoz 1000 asf 1000\n1000 1000\nfvzng 1000 nsj 1000\nd",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\nef 1 afvj 1000\n1 999\ncdx 999 jo 2\n999 1\nnffc 2 zvu 999\n1000 1\nrsena 1000 xnddyxh 1\nlk",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\nhnkb 999 wz 1000\n1 1000\nm 2 zobv 2\n1000 999\nmnhm 1 vyps 1\n1000 1000\nvzx 1 wdukdnv 1000\nhe",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:30"
}