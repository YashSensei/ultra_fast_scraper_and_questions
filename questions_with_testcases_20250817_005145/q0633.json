{
  "problem_code": "problems",
  "title": "Cave Crisis",
  "tags": [],
  "text": "R2D2 was exploring a tunnel when a cave-in suddenly occurred. Oh no, is he trapped?Figure1: Overhead view of the cave crisis from the third example test case.From an overhead view, we can see all the obstacles (debris) on a two-dimensional Cartesian plane. The tunnel iswcm wide, bounded by the linesy=w/2andy= -w/2. R2D2 starts at(0, 0), and has a perfectly circular footprint of radiusr. The exit of the tunnel lies to the right of the linex= 1000. Between R2D2 and the exit lie a number of polygonal obstacles.Is it possible for R2D2 to navigate between the obstacles and make it to the exit?InputThe input file will contain multiple test cases. Each test case begins with a single line containing an even integerw(2 ≤w≤ 1000), the width of the tunnel, and an integerN(0 ≤N≤ 100), the number of obstacles. The nextNlines each contain the description of a single obstacle. Thei-th obstacle is a simple polygon, specified on a single line containing an integerni(3 ≤ni≤ 10), the number of vertices, followed bynipairs of integers,xijandyij(0 ≤xij≤ 1000and-w/2 ≤yij≤w/2forj= 1 ...ni), specifying the coordinates of the vertices in counter-clockwise order. Note that obstacles in the input may touch or even overlap. However, you are guaranteed that R2D2's initial location will not touch or overlap any obstacle. The vertices of each polygon are unique, no two non-consecutive edges of the polygon intersect (even at their endpoints), and each polygon is guaranteed to have nonzero area.The end-of-input is denoted by an invalid test case withw=N= 0and should not be processed.OutputFor each input test case, you must determine the maximum radiusr> 0that R2D2 could have and still be able to plan a path from his starting location(0, 0)to the tunnel exit without overlapping with any of the obstacles. You should print either this maximum radiusr(rounded to two decimal places) or the message \"impossible\" if no such radius exists.ExampleInput:6 2\r\n4 2 -1 4 -1 4 1 2 1\r\n3 3 0 6 -1 6 1\r\n8 2\r\n3 1 -1 4 -1 4 4\r\n3 3 -4 6 1 3 1\r\n10 7\r\n4 0 5 4 2 5 3 4 5\r\n3 4 -5 9 -5 9 0\r\n4 8 -5 11 -5 11 -2 8 -2\r\n3 8 3 16 1 11 5\r\n4 21 -5 23 -3 20 -2 15 -4\r\n3 22 3 26 -1 28 0\r\n3 24 0 29 4 25 3\r\n0 0Output:1.00\r\nimpossible\r\n1.33",
  "sample_input": "Input:6 2\r\n4 2 -1 4 -1 4 1 2 1\r\n3 3 0 6 -1 6 1\r\n8 2\r\n3 1 -1 4 -1 4 4\r\n3 3 -4 6 1 3 1\r\n10 7\r\n4 0 5 4 2 5 3 4 5\r\n3 4 -5 9 -5 9 0\r\n4 8 -5 11 -5 11 -2 8 -2\r\n3 8 3 16 1 11 5\r\n4 21 -5 23 -3 20 -2 15 -4\r\n3 22 3 26 -1 28 0\r\n3 24 0 29 4 25 3\r\n0 0Output:1.00\r\nimpossible\r\n1.33",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PC8C",
  "scraped_at": "2025-08-17 00:33:06",
  "test_cases": [
    {
      "input": "6 2\r\n4 2 -1 4 -1 4 1 2 1\r\n3 3 0 6 -1 6 1\r\n8 2\r\n3 1 -1 4 -1 4 4\r\n3 3 -4 6 1 3 1\r\n10 7\r\n4 0 5 4 2 5 3 4 5\r\n3 4 -5 9 -5 9 0\r\n4 8 -5 11 -5 11 -2 8 -2\r\n3 8 3 16 1 11 5\r\n4 21 -5 23 -3 20 -2 15 -4\r\n3 22 3 26 -1 28 0\r\n3 24 0 29 4 25 3\r\n0 0",
      "expected_output": "1.00\r\nimpossible\r\n1.33",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 7\n7 1 3 2 4 1 4 5 5\n5 4 5 7 2 5 4\n2 4\n10 8 3 4 10 5 10\n7 1 9 8 4 7 9\n4 10\n4 2 7 4 9 7 2 8 5\n9 8 2 8 1 9 5\n6 9 5 6 4 1 1 10 4\n2 10 4 3 9 7 7\n2 7 9 9 2 6 7 7 2\n2 9 8 8 4 4 8\n6 3 8 4 5 6 10\n2 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2\n8 2 2 1 4 9 2 4 3\n7 9 5 6 10 8 9\n9 4\n8 8 6 4 7 4 7\n3 5 5 1 7 5 10\n1 4\n10 5 4 6 6 10 3 8 1\n5 8 6 8 5 1 6\n4 1 3 9 2 7 1 3 10\n10 3 8 10 7 4 5\n1 3 9 9 10 2 10 6 1\n10 5 7 1 1 8 7\n5 6 8 9 1 9 2\n8 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5\n9 2 3 1 1 4 10 9 10\n8 5 10 7 2 7 7\n9 5\n7 3 5 8 10 5 3\n5 7 4 8 1 7 4\n7 7\n6 7 7 6 5 3 7 7 6\n4 5 2 9 3 5 1\n8 8 8 5 4 5 8 4 6\n5 9 7 10 7 9 3\n2 2 8 2 9 4 10 9 7\n3 2 8 2 10 1 9\n8 7 4 2 3 1 2\n4 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 54\n87 42 10 23 32 57 56 75 64\n79 9 93 67 83 33 8\n70 35\n99 85 82 64 91 98 88\n94 88 52 4 31 13 65\n66 29\n8 49 57 38 39 75 9 55 14\n73 19 27 11 21 17 7\n36 64 11 55 57 85 29 55 2\n37 22 11 59 100 51 77\n24 65 36 71 28 49 89 41 95\n4 52 37 82 9 87 21\n82 93 3 9 3 24 29\n3 49",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "34 66\n55 62 76 70 81 44 17 60 40\n84 18 63 3 43 61 95\n20 90\n39 24 84 28 15 2 96\n28 95 33 52 42 98 97\n83 100\n26 97 31 16 54 51 86 25 91\n26 51 91 87 20 73 19\n55 93 12 45 63 63 85 92 74\n63 93 94 39 84 46 74\n57 7 54 43 96 85 43 98 2\n87 98 44 46 6 9 16\n95 62 8 97 69 67 85\n72 84",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "82 53\n100 31 64 72 50 81 13 14 33\n60 28 18 92 27 73 9\n98 98\n42 64 30 98 85 14 91\n59 85 63 80 49 66 83\n16 40\n68 6 92 70 10 91 86 61 53\n96 55 30 15 62 59 78\n57 43 73 86 72 27 97 46 97\n62 99 25 80 94 13 70\n2 30 57 87 67 90 25 33 6\n19 39 97 99 37 33 4\n12 29 25 27 82 40 3\n82 85",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 73\n85 19 90 38 22 99 4 4 76\n14 64 88 4 22 46 98\n28 18\n30 80 10 95 67 36 15\n69 52 42 19 7 64 76\n79 38\n36 87 26 50 6 88 51 5 98\n10 88 19 96 85 97 99\n73 94 35 58 36 28 24 41 33\n2 85 25 90 85 11 45\n54 20 83 1 10 71 20 66 57\n7 27 84 27 61 59 81\n4 51 46 8 27 12 1\n20 95",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 80\n39 70 63 49 78 18 27 41 12\n39 65 48 80 25 9 82\n35 56\n32 68 76 69 25 45 35\n43 70 54 29 43 23 42\n86 25\n36 98 48 68 24 82 68 11 24\n13 69 35 80 44 11 83\n84 2 8 28 75 21 83 26 44\n63 63 47 85 97 57 71\n34 36 32 70 72 23 69 18 2\n17 83 16 93 41 67 75\n54 91 86 19 66 91 16\n13 20",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "15 47\n40 25 49 34 21 50 20 46 38\n23 8 38 35 25 35 7\n34 39\n32 33 31 38 32 34 19\n24 26 22 10 25 12 5\n20 34\n32 39 6 40 9 31 49 15 47\n49 20 47 33 9 8 50\n42 40 25 8 17 36 44 18 30\n19 20 17 38 16 45 29\n24 17 29 50 23 20 41 37 49\n31 16 49 18 27 22 12\n42 45 14 34 8 27 17\n17 29",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18 33\n26 31 35 36 6 25 23 6 5\n26 37 31 14 20 10 5\n39 6\n11 13 32 34 43 47 46\n7 44 26 17 42 29 23\n43 23\n15 31 48 19 42 39 48 21 35\n9 40 39 15 14 46 44\n28 33 45 7 20 5 5 33 46\n21 27 10 39 31 30 47\n40 39 25 34 26 12 24 28 19\n47 50 46 44 49 34 8\n16 43 24 24 34 21 15\n16 20",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "11 34\n7 10 21 15 13 42 43 31 50\n6 33 44 50 14 24 35\n44 5\n40 12 50 26 6 21 10\n32 32 20 32 9 34 5\n13 38\n32 43 18 15 14 15 8 45 46\n45 11 30 46 41 45 35\n19 35 15 11 46 29 39 29 32\n45 34 13 7 33 19 8\n31 25 12 38 13 18 48 44 47\n5 41 20 19 47 18 5\n50 14 49 5 6 36 22\n33 29",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16 8\n6 37 50 29 45 33 5 36 18\n33 17 23 45 46 17 37\n7 35\n17 37 38 36 12 18 11\n27 15 11 35 38 19 33\n14 29\n27 48 32 15 44 18 26 28 32\n42 25 45 9 30 17 12\n7 24 16 41 28 28 16 11 26\n15 5 5 16 10 37 13\n44 14 32 25 27 41 50 37 42\n41 11 21 33 39 6 26\n23 33 10 5 23 48 43\n34 22",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "37 14\n16 30 22 18 13 6 44 46 20\n25 8 10 47 23 11 32\n26 46\n41 15 34 41 37 40 40\n36 12 38 7 14 43 30\n19 24\n37 42 38 17 44 22 28 38 20\n19 23 14 30 37 16 21\n14 20 6 45 8 17 30 28 16\n6 50 13 14 20 11 21\n35 20 38 21 12 16 22 39 8\n48 20 13 27 29 33 42\n14 29 46 6 8 24 8\n32 16",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "39 17\n16 23 49 50 14 41 9 34 14\n42 49 30 28 39 9 43\n25 24\n41 42 36 45 30 27 37\n7 45 24 21 18 32 18\n47 40\n31 24 48 26 50 14 8 31 7\n25 31 19 26 6 50 32\n17 18 34 24 47 30 8 41 23\n13 37 21 41 49 21 8\n15 37 22 44 30 9 45 20 7\n41 32 18 40 43 23 19\n27 38 26 46 35 9 8\n30 17",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "32 38\n22 24 16 16 37 43 18 39 50\n48 36 25 17 44 39 22\n20 29\n28 7 6 28 34 39 11\n10 15 34 11 18 38 8\n40 6\n13 20 35 44 13 45 12 49 45\n5 22 39 43 24 48 26\n49 29 42 38 28 9 13 27 22\n50 46 19 20 46 23 44\n20 30 34 7 33 32 22 10 21\n6 41 42 11 7 27 41\n31 9 40 35 24 31 41\n33 8",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100 100 100 100 100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 2\n99 99 2 2 99 1 2 100 99\n2 2 1 2 99 1 99\n1 100\n2 99 1 99 99 1 2\n99 99 100 1 2 99 100\n2 1\n2 2 2 2 100 2 99 99 2\n99 99 1 2 1 1 100\n99 1 1 2 100 1 1 99 2\n100 99 100 99 2 2 1\n1 2 2 99 1 99 2 99 1\n99 1 99 1 100 99 99\n2 100 1 1 100 100 100\n100 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 99\n100 1 1 99 99 99 1 2 99\n2 2 99 2 1 1 99\n2 100\n100 1 1 2 2 2 1\n99 100 1 1 99 1 100\n99 1\n99 100 100 100 1 2 99 2 100\n2 99 1 2 1 2 2\n100 100 2 99 100 1 99 99 2\n99 1 2 100 99 99 100\n2 100 1 2 99 100 2 1 2\n99 100 100 1 1 100 1\n100 1 100 100 99 1 99\n2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:39"
}