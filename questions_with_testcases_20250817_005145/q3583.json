{
  "problem_code": "problems",
  "title": "Airplane Parking",
  "tags": [],
  "text": "During this economic crisis time, Jack has started an incredible new business related to air travel, a parking-lot for airplane. He bought a very large land to park airplanes. However the land is very narrow, so that the only way airplanes can go in or go out of the parking lot must be in the Last-In First-Out fashion (see picture below). He only has spaces in the parking lot so he cannot take some airplane at the end out so that other airplanes can move.Because of the limitation of the parking lot, it is not possible to accommodate all requests for parking. Each request consists of the planned arrival time and planned departure time, which are the times the airplane arrives at the parking lot. An example below shows a request table for 4 planes.AirplaneArrivalDeparture1110225337469In this case, it is possible to accommodate airplane 1, 2, and 4. But it is not possible to accommodate both airplanes 2 and 3.It is possible that different planes plan to arrive or depart the parking lot at the same time. Jack has the best crews working with him, so that they will manage to arrange the plane to the parking lot in the best way that if it is possible to park and take out the planes they will be able to do it. Consider another example.AirplaneArrivalDeparture510126101571317Although airplane 5 and 6 arrive at the same time, Jack's crews know that airplane 5 will have to be out before airplane 6, so when both airplanes arrive they put airplane 6 in first, following by airplane 5.Given a list of parking requests, you want to find the maximum number of airplanes that can be parked in this parking lot, provided that they can only depart in the Last-In First-Out fashion.InputThe first line contains an integerT, the number of test cases (1 ≤T≤ 5). Each test case is in the following format.The first line starts with an integerN(1 ≤N≤ 300) denoting the number of airplanes. The nextNlines describe the request table. Each line 1 +i, for 1 ≤i≤N, contains two integerSiandTi, (0 ≤Si<Ti≤ 1,000,000,000) which are the planned arrival time and planned departing time for airplanei.OutputFor each test case, you program must output a single line consisting of one integer, the maximum number of airplanes that can be parked in Jack's parking lot.ExampleInput:241 102 53 76 9310 1210 1513 17Output:32",
  "sample_input": "Input:241 102 53 76 9310 1210 1513 17Output:32",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HFLY",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "241 102 53 76 9310 1210 1513 17",
      "expected_output": "32",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 10 5 9 3 10 5 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 7 3 3 2 1 2 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 1 2 8 1 2 5 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 7 9 36 58 64 82 71",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 25 49 40 12 15 44 62",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 92 46 51 84 63 13 12",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 71 40 12 93 36 9 43",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "65 25 98 97 29 43 43 52",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 128 102 101 120 68 33 106",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "126 15 92 118 82 135 107 36",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "65 33 64 134 109 70 42 57",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "46 93 69 146 139 45 69 103",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "66 102 66 103 28 108 90 101",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "52 18 122 40 82 136 132 19",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "82 61 95 149 99 48 124 89",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300 300 300 300 300 300 300",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300 300 300 300 300 300 300",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "300 2 2 1 299 300 1 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 300 300 2 1 2 2 299",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:12"
}