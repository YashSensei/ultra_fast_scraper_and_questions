{
  "problem_code": "problems",
  "title": "Advanced Fruits",
  "tags": [],
  "text": "The company \"21st Century Fruits\" has specialized in creating new sorts of fruits by transferring genes from one fruit into the genome of another one. Most times this method doesn't work, but sometimes, in very rare cases, a new fruit emerges that tastes like a mixture between both of them.A big topic of discussion inside the company is \"How should the new creations be called?\" A mixture between an apple and a pear could be called an apple-pear, of course, but this doesn't sound very interesting. The boss finally decides to use the shortest string that contains both names of the original fruits as sub-sequences of the new name. For instance, \"applear\" contains \"apple\" and \"pear\" (APPLEar and apPlEAR), and there is no shorter string that has the same property.A combination of a cranberry and a boysenberry would therefore be called a \"boysecranberry\" or a \"craboysenberry\", for example.Your job is to write a program that computes such a shortest name for a combination of two given fruits. Your algorithm should be efficient, otherwise it is unlikely that it will execute in the allotted time for long fruit names.Input SpecificationEach line of the input file contains two strings that represent the names of the fruits that should be combined. All names have a maximum length of 100 and only consist of alphabetic characters.Input is terminated by end of file.Output SpecificationFor each test case, output the shortest name of the resulting fruit on one line. If more than one shortest name is possible, any one is acceptable.Sample Inputapple peach\r\nananas banana\r\npear peachSample Outputappleach\r\nbananas\r\npearch",
  "sample_input": "apple peach\r\nananas banana\r\npear peach",
  "sample_output": "appleach\r\nbananas\r\npearch",
  "link": "https://www.spoj.com/problems/ADFRUITS",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "apple peach\r\nananas banana\r\npear peach",
      "expected_output": "appleach\r\nbananas\r\npearch",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "ybwv rr\nu bcezo\nlfoke epkf",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "djxcj xmu\niroa yrj\nsggf t",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "kbxn hijt\nac mwi\nklnq i",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "whjzt p\nygym agv\ngkph kg",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ktr vzfb\nofw bmcydj\negfq hre",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "aovv wt\nts e\nq ugcj",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "yksg yflj\njeab d\nnk odum",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "ohf jmnhh\ncttyo owpuiv\nuvtww d",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "wglc clbj\ngjgwbz vibkm\nfyii odqxu",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "q phtsv\nwlyo osk\nvyqtp opzv",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "imimn hjm\nfkcrvp o\nfxc qkofq",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "p hec\nxlma ptwetc\nnzb lquje",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "yvscg vk\ntnmnxs a\noh nxl",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "kvwnj ptujj\nogzpsx iefhoa\noyfj cgiu",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "ir h\nbef zypt\nt cw",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "ikck amphl\nity wjcfpb\nt fuu",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "yxa uekme\nwjhv bej\nhki ay",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "olx ia\nou a\nasmk dis",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "nqw vxqt\niw wb\nm oak",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}