{
  "problem_code": "problems",
  "title": "Making Waves",
  "tags": [],
  "text": "Suppose we know a signal is generated by the function x sin (f1t) + sin (f2t). F1 and f2 are two unique\r\nfrequencies, each having an integral value in the range 400 to 600 Hz (Hz = cycles per second), and t\r\nrepresents time. In this problem, you will be given N samples of this function at equally-spaced time\r\nintervals corresponding to t = 1/N, t = 2/N, and so forth. From these samples, you are to determine f1 and\r\nf2.For example, suppose f1 = 400 Hz, f2 = 500 Hz, and N = 100. The first sample, at time t = 1/100 sec, is\r\nequal to sin(400 0.01) sin(500 0.01) sin(4) sin(5) 0.156912 . Similarly, the second sample, at\r\ntime t = 2/100 sec, is equal to sin(400 0.02) sin(500 0.02) sin(8) sin(10) 0.312821.InputThere will be multiple cases to consider. Each case begins with an integer N, no larger than 1000, that\r\nspecifies the number of signal samples. The next N data items are real numbers representing the signal\r\nsamples at time 1/N sec, 2/N sec, and so forth. A single integer 0 follows the last case.The number of samples for each case is guaranteed to be sufficient to allow the correct result to be\r\nobtained.OutputFor each input case, display a single line that is formatted like this:Case 1, f1 = 400, f2 = 500ExampleInput:100\r\n0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271\r\n1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338\r\n1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634\r\n1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943\r\n0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088\r\n-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195\r\n-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907\r\n-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838\r\n-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028\r\n-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010\r\n0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635\r\n0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862\r\n1.29596 1.29489 1.28558\r\n\r\n0Output:Case 1, f1 = 400, f2 = 500",
  "sample_input": "Input:100\r\n0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271\r\n1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338\r\n1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634\r\n1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943\r\n0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088\r\n-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195\r\n-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907\r\n-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838\r\n-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028\r\n-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010\r\n0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635\r\n0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862\r\n1.29596 1.29489 1.28558\r\n\r\n0Output:Case 1, f1 = 400, f2 = 500",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKWAVES",
  "scraped_at": "2025-08-17 00:34:17",
  "test_cases": [
    {
      "input": "100\r\n0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271\r\n1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338\r\n1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634\r\n1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943\r\n0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088\r\n-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195\r\n-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907\r\n-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838\r\n-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028\r\n-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010\r\n0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635\r\n0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862\r\n1.29596 1.29489 1.28558\r\n\r\n0",
      "expected_output": "Case 1, f1 = 400, f2 = 500",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n7\n6\n3\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n17625178\n57155832\n46023717\n51659317\n83153299",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n80489251\n14757366\n42527225\n37180490\n84389788\n21647642\n59608142\n82905563\n87879947\n42950124\n4385423",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n80841566\n29629735\n30598827\n15080278\n85857955\n5618602\n59450569\n14545559",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n43532388\n37538695\n20867161\n52118351\n80133365",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n3142467\n5109496\n96018377\n32499252\n79000022\n83262559\n21649390\n6254320\n62312916\n80638642\n45125434\n97429857\n53883017\n86959695",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "43\n7046\n48651\n56911\n13549\n64572\n4741\n2829\n50187\n33762\n77093\n71031\n5647\n82420\n47915\n30213\n11897\n28453\n78451\n34460\n16334\n31235\n84349\n7768\n4382\n25285\n3478\n81621\n32988\n2692\n91641\n75452\n86921\n69034\n57974\n57903\n62668\n50223\n82820\n90197\n88267\n71777\n27542\n36749",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n38905\n93969\n32956\n55073\n35532\n67707\n78887\n69286\n79823\n20960\n94338\n97427\n19708\n54542\n80587\n89098\n64920\n47656\n29795\n30294\n45134\n41412\n98073\n19896\n59055\n58482\n28467\n86886\n17347\n51663\n86934\n46500",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "71\n7993\n66907\n26916\n53841\n26939\n41034\n37016\n5724\n14208\n17552\n98014\n84552\n42729\n31641\n5148\n68192\n49565\n83655\n37682\n54506\n88050\n95452\n70255\n66072\n73805\n42713\n13559\n27982\n34258\n92913\n14106\n67790\n59499\n76925\n6572\n99217\n31934\n28263\n48997\n32374\n69456\n57649\n95559\n49432\n9343\n74663\n70264\n70486\n37073\n86015\n49074\n20646\n72591\n19183\n70592\n84710\n16740\n74249\n54165\n3494\n19689\n24240\n75333\n42413\n39801\n15813\n53969\n1691\n92057\n84063\n18898",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n71929\n12445\n350\n45350\n12179\n77725\n20390\n57185\n7025\n8575\n66490\n24052\n87217\n98350\n89971\n99624\n88167\n36164\n90196\n29502\n44916\n20517\n97001\n21751\n36038\n24809\n41236\n39848\n50586\n44877\n69905\n39112\n67047\n60064\n92341\n82085\n48404\n4538\n44000\n27579\n56123\n22395\n2963\n92561\n50162\n40434\n72991\n99614\n61024\n48281",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "49\n66936\n83611\n76550\n88840\n16681\n89623\n94730\n89911\n98009\n10543\n88696\n39578\n83089\n70706\n5752\n45561\n63071\n48713\n31253\n59413\n80273\n5324\n65027\n95382\n67462\n17258\n93786\n26717\n84370\n84658\n70744\n84192\n33130\n49868\n15352\n75601\n63114\n35546\n69171\n61166\n33785\n5746\n15731\n8198\n41867\n48185\n57173\n52082\n69211",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n29074\n80764\n43510\n87467\n87663\n41870\n13509\n44062\n49814\n98417\n3640\n23832\n33916\n91320\n71959\n5065\n65621\n37646\n66161\n51574\n31191\n51076\n29054\n92254\n69607\n71271\n1543\n73899\n91080\n32034\n79340\n23204\n30137\n70263\n94018\n37891\n82972\n22201\n29157\n28601\n18256\n59412\n3479\n96459\n87009\n19461\n74134\n62273\n94324\n26280\n63901\n96807\n83384\n56806\n16390\n93133\n10432\n70872\n76013\n77456\n59629\n91097\n95928\n71578\n64010\n59787\n32776\n69661\n74535\n91107\n58186\n80437\n26083\n16767\n94906\n72537\n80723\n55363\n21755\n15908\n27716\n72048\n80713\n31693\n1918\n45912\n22682\n54476\n1388\n55047\n31155\n81528\n23753\n71698\n10089\n51110\n66246\n97119\n94289\n18292",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n45644\n52534\n52738\n9629\n83095\n34027\n97983\n97400\n82012\n43377\n92187\n7551\n52622\n34272\n21466\n71629\n31089\n54077\n46154\n83502\n146\n8035\n71319\n46713\n92154\n14468\n76434\n98192",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n80463106\n46122936\n53358849\n346731\n10442702\n42445245\n36980921\n46308627\n56744841\n89615679\n50939441\n19350043\n35326074\n77282156\n2665912\n24267284\n68476588\n84605204\n93648399\n32753064\n14286853\n4084581\n4841523\n24771143\n23571010\n29726817\n51241756\n41377717\n27441821\n43927920\n67555597\n9283604\n90876643\n6351282\n51714832\n10562647\n46371131\n60682912\n19215701\n24686259\n21354718\n1784618\n76677118\n30858090\n61560280\n30697690\n14684470\n24460814\n68636346\n18104204\n7440723\n14666911\n1582228\n99890164\n58037331\n1692846\n97771446\n40071144\n66985053\n37761333\n18031482\n31093435\n94440455\n95613364\n62837104\n20348844\n14659532\n22406901\n19538506\n12213686\n99299182\n62019958\n61229236\n24888258\n99555005\n76169805\n64851891\n81142242\n9892125\n6963098\n27211802\n19536730\n59228462\n16467718\n58533429\n58270133\n80603592\n24858807\n325170\n25510630\n74030513\n76342067\n45697466\n78836662\n61300913\n13901987\n6972416\n90749218\n4451629\n66029213",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n85426030\n69888879\n26942774\n48405525\n70714688\n36945723\n85390960\n34269846\n681024\n82272703\n89221240\n97212438\n53656838\n26855489\n4962523\n70297968\n51639549\n73736157\n14573468\n73339452\n85631934\n67200694\n30078245\n93854014\n58978636\n43902915\n42877781\n76210859\n58334196\n96615927\n8583636\n51447959\n85683247\n36593951\n70866293\n7946581\n23726871\n69933484\n34080844\n8382221\n18431071\n44577322\n26201173\n46052752\n20700230\n63050288\n86516327\n60822517\n24365827\n43199328\n99845932\n13541476\n81403156\n53915390\n82817142\n38559621\n10119811\n97139667\n48819011\n45506291\n98313129\n82871576\n30300274\n90557607\n51583338\n79032169\n36822426\n41492695\n85356293\n74472683\n41634668\n39807476\n25004767\n13079906\n45374168\n32993892\n47873145\n73642513\n65020532\n40986881\n80434505\n9036901\n92413700\n39731804\n60796409\n846773\n88657878\n13671355\n40063869\n13987511\n59560984\n13294208\n47547823\n53782729\n18669897\n91671885\n91139232\n92124910\n55667685\n56738164",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n1\n1206929\n1\n1\n1\n100000000\n12564120\n100000000\n100000000\n35828846\n1\n1\n100000000\n1\n100000000\n40027234\n1\n1\n1487622\n10112514\n1\n100000000\n1\n1\n1\n1\n78187588\n100000000\n1\n80098262\n62715025\n100000000\n29544908\n1\n1\n6961203\n100000000\n1\n31313198\n100000000\n100000000\n1\n92594599\n58268298\n1\n100000000\n55296619\n100000000\n100000000\n1\n45325502\n1\n82815377\n100000000\n53927283\n100000000\n10835532\n100000000\n100000000\n87649557\n93439253\n100000000\n100000000\n1\n1\n28478851\n56024389\n1\n26614275\n19632491\n100000000\n1\n100000000\n100000000\n83515736\n85108702\n68124449\n11460229\n909493\n60825242\n32775219\n100000000\n23090031\n1\n1\n100000000\n68965346\n100000000\n1\n100000000\n34333108\n1\n1\n1\n100000000\n79486858\n100000000\n45672177\n36266820\n14384833",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}