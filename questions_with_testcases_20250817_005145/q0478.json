{
  "problem_code": "problems",
  "title": "Bases",
  "tags": [],
  "text": "What do you get if you multiply 6 by 9? The answer, of course, is 42, but only if you do the calculations in base 13.Given an integerB≥ 2, thebaseBnumbering systemis a manner of writing integers using only digits between 0 andB-1, inclusive. In a number written in baseB, the rightmost digit has its value multiplied by 1, the second rightmost digit has its value multiplied byB, the third rightmost digit has its value multiplied byB2, and so on.Some equations are true or false depending on the base they are considered in. The equation 2+2=4, for instance, is true for anyB≥ 5 - it does not hold in base 4, for instance, since there is no digit '4' in base 4. On the other hand, an equation like 2+2=5 is never true.Write a program that given an equation determines for which bases it holds.InputEach line of the input contains a test case; each test case is an equation of the form \"EXPR=EXPR\", where both  \"EXPR\" are arithmetic expressions with at most 17 characters.All expressions are valid, and contain only the characters '+', '*' and the digits from '0' to '9'. No expressions contain leading plus signs, and no numbers in it have leading zeros.The end of input is indicated by a line containing only \"=\".OutputFor each test case in the input your program should produce a single line in the output, indicating for which bases the given equation holds.If the expression is true for infinitely many bases, print  \"B+\", whereBis the first base for which the equation holds.If the expression is valid only for a finite set of bases, print them in ascending order, separated by single spaces.If the expression is not true in any base, print the character '*'.ExampleInput:6*9=42\r\n10000+3*5*334=3*5000+10+0\r\n2+2=3\r\n2+2=4\r\n0*0=0\r\n=Output:13\r\n6 10\r\n*\r\n5+\r\n2+",
  "sample_input": "Input:6*9=42\r\n10000+3*5*334=3*5000+10+0\r\n2+2=3\r\n2+2=4\r\n0*0=0\r\n=Output:13\r\n6 10\r\n*\r\n5+\r\n2+",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMER08B",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "6*9=42\r\n10000+3*5*334=3*5000+10+0\r\n2+2=3\r\n2+2=4\r\n0*0=0\r\n=",
      "expected_output": "13\r\n6 10\r\n*\r\n5+\r\n2+",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8 4\nndgxy\n5 4 2 1 8 8 7 5\ntvlhbtkmjnttrtbqn\n1 6 4\nuxibtyf\n5 3 10\ntzcqtkehz\n10 5 3\nzzrlftxo\nt",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 5 5\nbxjvtjw\n10 6 8 4 7 3 7 9\nkgbveujgk\n1 2 4\nwpcmryc\n10 4 7\ntzbmdhdg\n5 5 7\npuxdpkex\nj",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9 1\ngsunq\n4 5 7 1 7 9 1 10\nexzaiyliloogxitgxyw\n8 7 3\nsyqfrxe\n4 7 4\ndmmmwlcl\n4 9 4\nxgkpezk\nip",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "75 99 70\nbggsi\n32 19 6 69 49 47 100 59\nksegykmc\n70 82 86\npxakmdiqs\n16 11 78\nx\n63 11 62\nrohoio\nd",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 46 10\ncxyfvoleyurd\n23 71 71 54 18 2 91 15\nt\n58 85 5\nuhtpd\n27 93 14\nsqopapa\n100 63 8\neivt\nne",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "52 83 92\nae\n59 68 42 42 58 70 15 50\nha\n90 47 29\ni\n24 97 21\nntrzi\n49 52 80\nlc\nao",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "91 31 79\neubhzluhq\n52 10 15 37 87 84 50 2\nvrlmucdgrcl\n11 5 81\nqvhjneq\n79 63 60\nepminowuwb\n68 56 46\nh\nvp",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 12 55\newul\n93 76 16 99 80 64 99 100\npku\n9 99 17\noiu\n96 45 78\nc\n33 33 41\nwpon\nw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "162 148 494\nmjh\n112 59 291 95 242 196 348 389\ndralxzhiogtmvffu\n486 121 316\nsflwk\n403 96 242\nsdtpcfhy\n485 136 405\newegiadyus\np",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "288 184 457\nduevplui\n477 447 368 66 110 303 494 274\nc\n477 389 329\nyfsw\n114 282 86\nva\n411 86 160\nnmxbmk\nq",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "242 480 133\ntchoom\n361 270 141 370 409 487 403 137\nrsipsnqcqgtyt\n226 208 233\nojffsiexj\n445 253 388\nrhmb\n220 303 375\ntqodcds\na",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "242 452 79\nis\n159 400 449 206 257 243 499 419\nxfrgjc\n232 292 241\nuixiu\n71 424 207\nzbidnqaf\n310 478 396\nbaaqj\nl",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "440 95 494\nqwnynrxe\n319 50 484 448 493 77 494 349\ncgpjolomewmqrjijxgqx\n420 117 56\nphst\n260 176 494\ntjydyoa\n465 57 219\noexpldqe\ndv",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "154 500 482\nzgz\n382 444 439 223 230 131 261 136\nn\n120 244 483\nhdijhdyv\n83 112 459\nv\n329 442 232\nnkitmel\ne",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "216 487 63\nnq\n490 145 262 404 210 493 405 221\nvhspyozyulhrsr\n230 399 274\nz\n207 185 349\nnbxos\n135 266 260\nda\nk",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nlxjulky\n1000 1000 1000 1000 1000 1000 1000 1000\nbmuymfudeqqdfqesfzhm\n1000 1000 1000\nsbugxlvvn\n1000 1000 1000\nmnifozxs\n1000 1000 1000\ne\ni",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nunptxwlntww\n1000 1000 1000 1000 1000 1000 1000 1000\njhxusgj\n1000 1000 1000\nnhaap\n1000 1000 1000\nlta\n1000 1000 1000\nnnka\nvo",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 1000\ntpi\n1000 999 2 2 2 1000 999 999\nrocxxcmjtzoiqf\n999 1 1\nolofcyzhr\n1000 999 1\nlxdcyyv\n1000 999 2\ntta\ntz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 2\nvtsgvxzt\n1 1 1 1 2 1000 1000 999\nhgktpcrtkvgcvafylf\n1 1000 2\nuqp\n999 1000 1000\nqknwyvgw\n999 999 2\nnfdzy\nyc",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:35"
}