{
  "problem_code": "problems",
  "title": "Snail family problems",
  "tags": [],
  "text": "In this problem we'll be looking at a group of snails. Two snails, numberedaandbcan get married, and some time after that they may even get divorced. Any snail may be married to number of other snails.The problem arises because snails don't like being married to their ancestors, and they don't know who their ancestors are - they only know the set of snails they're directly related to. A marriage between two snails from which one is an ancestor of the other is called \"bad\".If they knew who the oldest snail (the ancestor of everyone else) is, everyone would know their ancestors.For the given group ofNsnails numbered from 1 toN, you'll be givenN-1 pairs of snails (a,b), indicating that snails a and b are directly related.Next you'll be givenQqueries of the form:Qn- supposenis the oldest snail, how many \"bad\" marriages are there in the group?M a b- snailsaandbjust got married.D a b- snailsaandbjust got divorced.No snail can ever get married to himself.You may assume that no pair will get married twice (if they are already married). You may also assume that no pair will get divorced if they don't get married before that.InputThe first line of input contains an integerN(2 ≤N≤ 200000).Each of the nextN-1 lines contains a pair of integersaandb(1 ≤a<b≤ N).The next line contains an integerQ(1 ≤Q≤ 300000).Each of the nextQlines contains a query as defined above.OutputFor each query of typeQoutput a single line containing the number of \"bad\" marriages if snail numberednwas the oldest one.ExampleInput:51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3Output:001211",
  "sample_input": "Input:51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3Output:001211",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INCEST",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "51 21 32 42 59Q 1M 3 5Q 1Q 3M 1 4Q 3Q 4D 3 5Q 3",
      "expected_output": "001211",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10 10 5 10 10 4 8 6 8 9 6 3 6 10 4 2\n10 4 5 10 wz ymj 2 xjsnz h bsv 9 yj bce lttyb 10 w 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 4 8 1 2 3 10 8 8 3 3 9 3 3 1 9\n2 10 3 8 bfypt qptsb 10 xwos tfsiy nzkm 1 t sh slryp 9 mzz 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 6 2 5 3 1 3 7 1 1 8 3 6 3 7 2\n7 7 9 1 xah ipiv 4 s xud d 2 fwtmy lqh wrxp 10 mbmu 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 39 3 86 84 83 50 35 73 91 68 37 99 59 59 66 63\n3 95 2 7 l aikwj 35 t rir kjdok 76 tdk qg zbyx 75 ouf 59",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "12 27 24 29 20 83 21 40 98 38 29 74 46 74 36 44 11\n45 92 7 69 sk gk 84 dusxy y ky 69 hfb e jwez 41 qa 4",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "14 98 23 89 68 73 46 9 5 62 81 99 71 23 72 32 33\n23 35 32 20 fopp iud 72 klwr bmijr b 79 cfhed zob wyzsu 7 v 24",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 96 19 10 39 77 14 77 96 62 73 39 5 58 66 31 94\n33 22 19 92 yh wq 29 zbi qr l 36 zdfs kmbat jli 58 wou 24",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 35 20 85 44 96 98 51 32 15 37 41 74 84 4 10 64\n8 12 57 80 o o 25 x fbod slfbf 7 ihsp yf kzyph 45 lbxfy 49",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "82965 20573 85974 36071 57441 88208 53516 39265 50739 79119 12930 95385 89810 82192 74029 29139 29905\n83736 31156 27948 45261 wymoy sxfq 76302 sqtfn ul um 21430 fh oxsc d 33293 yp 53210",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "46060 47865 34662 64595 61319 90084 34112 47225 66510 61238 17505 73225 61620 55033 94278 79877 99037\n13162 57673 47342 68995 xrv tp 44988 jegs yd zusks 24086 nz di dqae 72912 q 30151",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "52312 48338 48580 10913 32125 56237 46638 71547 52754 26835 52789 70008 44460 47762 59762 89107 76144\n48518 76773 65706 61802 hduue wgfl 22673 v xczz cqxd 83953 unhwl esy lri 23781 au 14834",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "74134 51809 63674 60882 22701 34469 36122 87512 71792 35199 29161 70938 88087 54596 92188 80215 87342\n17342 69572 60021 42137 xi mnxcr 92688 gvv jzcz mjdft 32581 gbd z ofsk 28019 duer 24213",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "91193 68511 75555 43084 88266 65524 36116 65632 63105 16052 23694 69993 39420 90316 25561 63144 34672\n16288 79865 72292 21260 gwuow fou 70792 bxuu potyk ffojw 11420 mufjc mnee ynhft 94973 iowab 54278",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "30467 85817 75956 27899 25727 43343 83847 40535 96623 35818 12057 41558 61907 82281 73580 15208 14809\n41983 53437 66326 10899 ajc jnpui 45435 w jgo vruq 53168 ftble hwley ak 94037 b 25378",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44958 20964 19837 33022 52802 68109 75294 48165 22402 49991 16837 51041 60455 38984 11417 55077 33493\n72715 27083 81262 55094 h yfkmi 28895 knxf e n 99122 tfo pju cs 65302 wtz 32572",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000\n200000 200000 200000 200000 zin eut 200000 gyz p q 200000 zyfmk lf pefsh 200000 ar 200000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 200000\n200000 200000 200000 200000 vcube pew 200000 t nsgw uthii 200000 skhub knxh dwdvh 200000 luj 200000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 199999 199999 200000 1 200000 1 2 1 2 1 1 1 199999 2 200000\n1 2 200000 199999 tfcy piitd 199999 alrw jbs u 200000 ua sb ez 200000 fuy 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 200000 199999 200000 199999 199999 199999 1 1 2 2 200000 2 2 199999 199999\n200000 2 200000 199999 hlh nz 200000 amu uk flx 200000 pi bja armwc 200000 q 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}