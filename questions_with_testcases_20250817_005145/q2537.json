{
  "problem_code": "problems",
  "title": "Combat on a tree",
  "tags": [],
  "text": "Alice and Bob are playing a game on a tree of n nodes. Each node is either black or white initially.They take turns to do the following operation:Choose a white node v from the current tree;Color all white nodes on Path(1, v) to black.The player who takes the last turn wins.Now Alice takes the first turn. Help her find out if she can win when they both use optimal strategy.InputThe first line of input contains a integer n representing the number of nodes in the tree. 1 ≤ n ≤ 100000The second line contains n integers c1, c2 ... cn. 0 ≤ ci ≤ 1.ci = 0 means the ith node is white initially and ci = 1 means black.Next n-1 lines describes n-1 edges in the tree. Each line contains two integers u and v, means there is a edge connecting u and v.OutputIf Alice can't win print -1.Otherwise determine all the nodes she can choose in the first turn in order to win. Print them in ascending order.ExampleInput #1:81 1 0 1 0 0 1 01 21 32 63 43 55 77 8Output #1:5Input #2:201 1 1 0 1 1 1 0 1 0 0 0 1 0 1 0 0 0 0 01 22 32 41 51 65 75 82 98 101 111 129 136 1414 157 1611 172 187 1912 20Output #281112",
  "sample_input": "Input #1:81 1 0 1 0 0 1 01 21 32 63 43 55 77 8Output #1:5",
  "sample_output": "Input #2:201 1 1 0 1 1 1 0 1 0 0 0 1 0 1 0 0 0 0 01 22 32 41 51 65 75 82 98 101 111 129 136 1414 157 1611 172 187 1912 20Output #281112",
  "link": "https://www.spoj.com/problems/COT3",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "Input #1:81 1 0 1 0 0 1 01 21 32 63 43 55 77 8Output #1:5",
      "expected_output": "Input #2:201 1 1 0 1 1 1 0 1 0 0 0 1 0 1 0 0 0 0 01 22 32 41 51 65 75 82 98 101 111 129 136 1414 157 1611 172 187 1912 20Output #281112",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 1 2 7 1 1 10 6 8 5 8 5 5 8 7 5 7 4\nlsmyq jkhb 10 9 8 1 5 5 9 6 3 1 2 5 2 tfkb toog",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3 4 10 1 6 4 3 4 8 5 6 4 5 2 5 7 7\nhnhe foiy 6 3 2 5 7 3 9 10 2 10 10 6 5 ycnaasv gk",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 8 10 6 5 6 9 10 3 2 5 2 4 5 7 8 8\nsj lm 6 8 7 3 9 4 1 3 4 2 5 4 4 ybfkbt frrha",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "64 35 11 9 53 53 44 7 26 49 66 92 63 89 48 48 32 99\nzbkoh fzfs 20 19 80 63 72 48 66 21 51 61 86 51 34 mln iwbz",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 82 57 36 62 50 22 78 21 62 33 94 81 54 2 34 94 94\nh ye 85 72 54 7 27 20 16 6 81 32 56 3 33 xuj pgc",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "79 29 50 94 92 45 95 22 5 37 29 44 8 26 98 88 79 27\npicg uy 72 74 20 80 29 70 91 65 79 69 73 72 85 hkff ziukn",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 97 22 70 50 1 46 17 50 76 67 60 8 72 88 92 94 8\nehhyp az 59 7 66 49 7 13 44 72 69 86 91 47 5 i my",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 85 27 19 59 8 46 78 31 36 92 11 51 63 70 75 76 44\nl yt 62 58 89 9 69 66 96 57 89 30 18 50 58 co hf",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10557 15320 7622 31698 46480 33174 10289 22436 31282 16216 6954 9074 19923 8918 42705 9245 44549 48185\nn ed 37895 43493 41506 5056 24179 23476 26411 17803 14133 38161 20568 15696 23957 h jusk",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "48833 22270 27479 13042 15966 14033 7738 44342 21926 47751 10456 41590 5529 12923 48326 19759 42168 12131\ngriyz lgb 30843 46615 19382 10632 24026 30567 23449 32817 28680 37487 24953 26403 33105 kk n",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36510 33926 35140 20558 44507 44145 17700 42745 32652 40940 11763 38835 23261 29449 47196 24085 6664 23953\nv vioq 47087 21618 46091 29117 17533 48562 16450 5511 11876 15254 8151 28604 33714 skqns mqsv",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "21610 34624 39508 41023 13885 26048 9505 12702 21543 33617 45970 42972 31113 10492 15131 38569 42320 49903\nnemww xmnb 26587 22725 12803 49080 24636 22794 25995 20939 5732 48473 35642 41093 13970 o w",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "49017 47100 22286 47560 15002 45264 23092 35020 28080 44057 35594 7098 44044 41605 49549 49388 45353 7099\nne qk 9876 32774 22399 27250 21894 6487 20145 23461 40217 20314 34408 14521 20625 zn y",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "7521 31607 40950 21949 17291 24871 49908 44306 28302 49129 39073 44091 13777 27311 12519 35679 28321 11094\nalie eh 31798 24424 37588 25738 26765 12694 48830 8742 49318 38907 17147 31259 17577 ek ug",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5583 7135 6255 22849 11966 46980 18198 7450 32502 26577 11671 10950 34320 21409 32052 40058 10646 42751\nvpu dihh 45104 21198 17835 36614 39330 19870 17858 24354 5360 48391 22795 8669 15394 z de",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\njv ze 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 ktjoebb gemy",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\nb ub 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 dhpog kik",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 1 1 99999 100000 2 99999 1 100000 100000 2 2 100000 2 1 2 2 100000\nlryk astu 2 99999 99999 2 1 100000 2 99999 1 2 1 99999 2 ihcc mka",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 100000 1 1 100000 99999 99999 100000 100000 100000 99999 1 99999 100000 100000 2 2 99999\ns arj 2 1 100000 2 99999 1 2 1 2 99999 99999 1 99999 km ilz",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:38"
}