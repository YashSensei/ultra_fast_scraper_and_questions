{
  "problem_code": "problems",
  "title": "I Speak Whales",
  "tags": [],
  "text": "According to Wikipedia, a Walsh matrix is a specific square matrix, with dimensions equal to a power of 2, the entries of which are +1 or -1, and the property that the dot product of any two distinct rows (or columns) is zero. Below are the first three Walsh Matrices. (The gray lines are imaginary lines for illustration purpose only.)A Walsh Matrix of size 2^(N+1)  can be constructed as the \"union\" of 4 Walsh Matrices of size 2^N  arranged such that the lower right matrix is inverted whereas the other 3 matrices are not, i.e.:Let's number the rows of a given Walsh Matrix from the top starting with row 0. Similarly, let's number the columns of the matrix from the left starting with column 0. Given the four integers N , R , S , and E , write a program that will construct a Walsh Matrix of size 2^N  and will print the sum of all the numbers in row #R between columns #S and #E (inclusive.)InputYour program will be tested on one or more test cases. Each test case is specified using a single line listing four integers in the following order: N , R , S , and E , where 0 <= N <= 60 , 0 <= R < 2^N  , 0 <= S <= E < 2N  , and E - S <= 10,000 . The last line of the input file has four -1's and is not part of the test cases.OutputFor each test case, print the output on a single line.ExampleInput:2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1Output:0\r\n48",
  "sample_input": "Input:2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1Output:0\r\n48",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ANARC08I",
  "scraped_at": "2025-08-17 00:33:53",
  "test_cases": [
    {
      "input": "2 1 0 1\r\n48 0 0 47\r\n-1 -1 -1 -1",
      "expected_output": "0\r\n48",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6 9 5\n1 9 8 5\n6 3 1 2",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 6 3\n9 8 3 4\n10 9 5 5",
      "expected_output": "0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 10 10 6\n1 5 8 9\n9 1 3 2",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "85 24 50 68\n22 7 46 3\n34 95 36 53",
      "expected_output": "0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "97 86 99 23\n23 38 35 38\n70 18 90 88",
      "expected_output": "0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "36 57 42 53\n28 64 19 4\n16 42 84 26",
      "expected_output": "0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "56 98 18 71\n3 79 32 100\n6 90 3 86",
      "expected_output": "0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 68 70 35\n22 4 12 66\n13 54 47 21",
      "expected_output": "0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "271 248 167 59\n98 434 486 263\n82 60 341 488",
      "expected_output": "0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "378 461 237 473\n382 82 287 288\n382 465 442 71",
      "expected_output": "0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "389 346 70 123\n185 298 341 449\n135 370 364 104",
      "expected_output": "0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "83 474 481 471\n271 82 250 285\n342 331 193 280",
      "expected_output": "0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "57 409 373 274\n192 463 138 303\n479 498 274 318",
      "expected_output": "0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "268 206 57 141\n181 453 239 462\n406 177 430 152",
      "expected_output": "0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "435 61 265 321\n101 262 326 200\n287 137 166 397",
      "expected_output": "0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 2 1000\n2 1 1000 2\n1 999 1000 1000",
      "expected_output": "0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999 1000 999\n1000 2 999 2\n1000 2 1000 999",
      "expected_output": "0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:36"
}