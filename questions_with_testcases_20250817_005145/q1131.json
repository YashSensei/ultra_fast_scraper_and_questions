{
  "problem_code": "problems",
  "title": "Halloween treats",
  "tags": [],
  "text": "Every year there is the same problem at Halloween: Each neighbor is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year's experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided.Your job is to help the children and present a solution.InputThe input contains several test cases.The first line of each test case contains two integerscandn(1 ≤ c ≤ n ≤ 100000), the number of children and the number of neighbours, respectively. The next line containsnspace separated integersa1, ...  an(1 ≤ ai≤ 100000), whereairepresents the number of sweets the children get if they visit neighbouri.The last test case is followed by two zeros.OutputFor each test case output one line with the indices of the neighbours the children should select (here, indexicorresponds to neighbouriwho gives a total number ofaisweets). If there is no solution where each child gets at least one sweet, print \"no sweets\" instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them.ExampleInput:4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0Output:3 5\r\n2 3 4",
  "sample_input": "Input:4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0Output:3 5\r\n2 3 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HALLOW",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "4 5\r\n1 2 3 7 5\r\n3 6\r\n7 11 2 5 13 17\r\n0 0",
      "expected_output": "3 5\r\n2 3 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 5\n7 9 2 7 3\n3 3\n1 3 9 9 3 3\n5 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n6 3 9 3 1\n5 8\n6 4 6 1 5 5\n8 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n2 6 9 10 6\n10 6\n9 7 1 10 6 9\n10 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 39\n84 5 54 35 37\n62 51\n60 7 3 90 37 37\n90 9",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 43\n100 8 36 83 51\n71 92\n27 5 20 68 45 62\n7 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 8\n59 98 83 58 21\n32 63\n4 40 29 38 6 7\n75 4",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "89 87\n25 35 74 8 27\n5 83\n28 10 26 93 91 18\n3 6",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 36\n71 20 38 25 53\n58 18\n86 9 40 82 95 85\n58 48",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "28482 12796\n39827 34180 43984 35252 38093\n33920 6949\n23944 17864 40030 43424 21436 49959\n12149 38490",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "6423 24182\n30428 14793 15380 22033 38353\n49251 19163\n19607 11043 41104 28106 45269 6750\n38660 34670",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "48758 26280\n34894 33536 33989 48824 11960\n7283 24048\n45337 11553 25243 36138 28592 42343\n8209 14607",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "7079 33066\n27052 29039 22570 27469 48862\n43507 21101\n9330 35119 15368 5157 28741 9867\n34143 45527",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "16428 30317\n10155 25967 16287 7286 30444\n6844 19543\n34960 16548 41214 37084 6310 48373\n32114 20338",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "20000 22898\n44885 6783 44584 36483 37860\n35762 38194\n39553 8922 43546 27347 37979 48978\n33380 39215",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "19249 25223\n14221 8553 7008 37502 45210\n46375 40164\n45425 47196 18035 29291 48037 13193\n44905 18104",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000 100000 100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000 100000 100000 100000 100000\n100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 99999\n1 99999 2 100000 1\n100000 2\n100000 100000 2 100000 1 1\n1 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n2 1 2 1 100000\n100000 1\n1 100000 99999 100000 2 2\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}