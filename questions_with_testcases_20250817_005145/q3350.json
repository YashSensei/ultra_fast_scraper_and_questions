{
  "problem_code": "problems",
  "title": "Bulletin Board",
  "tags": [],
  "text": "The ACM Student Chapter has just been given custody of a number of\r\nschool bulletin boards. Several members\r\nagreed to clear off the old posters. They found posters\r\nplastered many levels deep. They made a bet about\r\nhow much area was left clear, what was the greatest depth of posters on\r\ntop of each other, and\r\nhow much of the area was covered to this greatest depth. To\r\ndetermine each bet's winner, they\r\nmade very accurate measurements of all the poster positions as they\r\nremoved them. Because of the large number of posters, they now\r\nneed a program to do the calculations. That is your job.A\r\nsimple illustration is shown above: a bulletin board 45 units\r\nwide by 40 high, with three posters, one with corners at coordinates\r\n(10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last\r\nwith corners at (25, 5) and (30, 30). The total area not covered\r\nby any poster is 1300. The maximum number of posters on top of\r\neach other is 2. The total area covered by exactly 2 posters\r\nis 75.InputThe input will\r\nconsist of one to twenty data\r\nsets, followed by a line containing only 0. On each\r\nline the data will consist of blank separated nonnegative integers.The first line of a dataset contains integersn w h,\r\nwherenis the number of posters on the bulletin board,wandhare the width\r\nand height of the bulletin board. Constraints are 0 <n≤\r\n\r\n100; 0 <w≤ 50000; 0 <h≤ 40000.The dataset ends with n lines, each describing the location of\r\none poster. Each poster is rectangular and has horizontal\r\nand vertical sides. The x and y coordinates are measured from one\r\ncorner of the bulletin board. Each line contains four numbersxlylxhandyh, wherexlandyl, are the lowest values of the x and y coordinates in one corner of the poster andxhandyhare the highest values in the diagonally opposite corner. Each poster fits on the bulletin board, so 0\r\n\r\n≤xl<xh≤w, and 0\r\n≤yl<yh≤h.OutputThere is one line of output for\r\neach data set containing three integers, the total area of the bulletin board that is not covered by any poster,the maximum depth of posters on top of each other, andthe total area covered this maximum number of times.Caution: An approach examining every pair of integer coordinates might need to deal with 2 billion coordinate pairs.ExampleInput:3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0Output:1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
  "sample_input": "Input:3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0Output:1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BULLETIN",
  "scraped_at": "2025-08-17 00:34:33",
  "test_cases": [
    {
      "input": "3 45 40\r\n10 10 35 20\r\n20 25 40 35\r\n25 5 30 30\r\n1 20 30\r\n5 5 15 25\r\n2 2000 1000\r\n0 0 1000 1000\r\n1000 0 2000 1000\r\n3 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0 0 10 10\r\n0",
      "expected_output": "1300 2 75\r\n400 1 200\r\n0 1 2000000\r\n0 3 100",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 1 1\n9 3 1 6\n8 6 5 9\n4 6 7 5\n1 8 1\n4 7 3 10\n6 3 1\n9 5 2 9\n8 6 7 2\n10 9 9\n8 2 1 6\n4 7 1 5\n8 3 3 10\n4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 6 10\n7 6 8 7\n1 7 5 8\n2 4 1 5\n6 7 3\n10 4 3 5\n2 5 6\n4 10 1 4\n5 1 3 10\n5 6 7\n6 9 1 9\n2 6 6 4\n6 1 8 7\n1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 8\n6 6 2 10\n10 9 4 2\n3 5 10 5\n3 1 2\n2 7 8 10\n10 5 4\n2 9 3 5\n3 5 4 7\n3 10 5\n2 2 9 7\n9 4 5 10\n9 4 6 4\n2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "47 21 82\n3 62 18 46\n91 47 71 93\n23 3 24 6\n95 58 2\n87 72 3 27\n30 36 80\n45 99 28 67\n32 85 46 74\n83 45 73\n44 4 66 13\n73 59 72 8\n12 93 68 38\n11",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 84 33\n17 71 38 55\n45 94 54 88\n59 44 69 75\n7 1 51\n10 90 100 66\n9 83 25\n94 44 22 86\n30 92 91 93\n25 17 71\n44 79 35 56\n28 40 93 17\n84 79 8 4\n63",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 26 77\n69 27 70 58\n38 28 23 14\n55 74 18 2\n67 78 93\n34 16 14 31\n45 71 9\n40 55 41 12\n21 6 8 71\n89 53 53\n46 29 14 100\n77 93 92 49\n30 10 98 28\n67",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "70 85 54\n77 30 93 6\n56 15 32 9\n53 23 91 85\n30 16 55\n51 50 90 100\n87 77 41\n81 38 52 35\n60 74 94 16\n91 28 17\n46 90 20 48\n94 52 70 87\n7 12 44 81\n31",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 44 83\n37 76 4 76\n40 65 18 56\n35 73 17 23\n56 93 7\n18 87 51 76\n2 14 51\n62 97 50 11\n30 5 56 49\n38 50 76\n78 56 2 98\n70 86 94 4\n38 87 20 87\n95",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 7 36\n24 23 27 49\n19 25 45 11\n33 30 36 37\n5 6 11\n11 50 47 38\n37 28 19\n24 24 45 37\n34 44 49 20\n46 40 18\n23 32 36 10\n7 25 40 13\n32 5 48 37\n38",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "38 14 46\n29 47 18 26\n8 10 36 18\n44 40 17 33\n47 26 16\n6 48 29 41\n36 49 5\n34 43 38 18\n22 27 5 21\n28 33 32\n50 6 36 23\n23 40 24 16\n19 9 42 42\n29",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36 34 11\n24 28 23 18\n35 32 10 42\n42 13 16 49\n9 7 8\n16 18 25 6\n31 39 24\n5 44 14 29\n40 46 36 32\n31 16 9\n46 30 44 30\n37 23 36 27\n48 42 9 49\n24",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "30 44 24\n36 45 16 9\n34 29 30 41\n33 44 27 38\n43 31 37\n15 27 10 9\n11 42 31\n46 14 37 38\n25 6 16 42\n50 34 17\n13 49 19 23\n8 41 13 41\n14 38 7 49\n10",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "10 5 23\n49 36 34 38\n21 38 11 48\n19 19 25 36\n18 19 32\n26 23 9 50\n49 15 11\n7 43 5 7\n34 45 19 33\n17 10 31\n13 16 20 7\n29 39 46 39\n20 48 28 13\n6",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "32 32 17\n33 37 35 6\n15 18 41 43\n35 20 18 44\n29 45 48\n49 11 39 50\n21 17 30\n46 37 17 48\n26 31 28 44\n40 46 11\n24 20 29 44\n36 32 18 43\n28 12 37 5\n42",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 49 9\n48 18 38 24\n10 23 8 50\n5 17 48 36\n24 19 7\n43 35 31 9\n44 11 43\n25 43 20 41\n48 50 18 28\n50 11 34\n6 44 36 7\n12 38 12 9\n38 36 6 43\n11",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100\n100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99 100\n99 2 100 2\n100 2 100 99\n100 100 2 99\n100 99 2\n2 1 99 1\n100 100 2\n1 100 1 2\n99 1 1 99\n2 2 1\n2 100 99 2\n2 99 99 100\n100 1 99 2\n2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 100\n1 1 99 2\n99 100 2 100\n100 100 100 100\n99 2 100\n99 2 1 1\n100 2 99\n1 99 2 2\n99 1 99 2\n1 1 100\n100 1 99 100\n99 2 100 99\n100 99 100 2\n100",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:04"
}