{
  "problem_code": "problems",
  "title": "B",
  "tags": [],
  "text": "B - Stock ChartsYou're in the middle of writing your newspaper's end-of-year economics summary, and you've decided that you want to show a number of charts to demonstrate how different stocks have performed over the course of the last year. You've already decided that you want to show the price ofndifferent stocks, all at the samekpoints of the year.Asimple chartof one stock's price would draw lines between the points (0, price0), (1, price1), ... , (k-1, pricek-1), where priceiis the price of the stock at theith point in time.In order to save space, you have invented the concept of anoverlaid chart. An overlaid chart is the combination of one or more simple charts, and shows the prices of multiple stocks (simply drawing a line for each one). In order to avoid confusion between the stocks shown in a chart, the lines in an overlaid chart may not cross or touch.Given a list ofnstocks' prices at each ofktime points, determine the minimum number of overlaid charts you need to show all of the stocks' prices.InputThe first line of input will contain a single integerT, the number of test cases.  After this will followTtest cases on different lines, each of the form:n kprice0,0price0,1... price0,k-1price1,0price1,1... price1,k-1...pricen-1,0pricen-1,1... pricen-1,k-1Where pricei,jis an integer, the price of theith stock at timej.OutputFor each test case, a single line containing \"Case #X: Y\", whereXis the number of the test-case (1-indexed) andYis the minimum number of overlaid charts needed to show the prices of all of the stocks.Limits1 ≤T≤ 1002 ≤k≤ 250 ≤pricei,j≤ 10000001 ≤n≤ 16SampleInput:3\r\n3 4\r\n1 2 3 4\r\n2 3 4 6\r\n6 5 4 3\r\n3 3\r\n5 5 5\r\n4 4 6\r\n4 5 4\r\n5 2\r\n1 1\r\n2 2\r\n5 4\r\n4 4\r\n4 1Output:Case #1: 2\r\nCase #2: 3\r\nCase #3: 2",
  "sample_input": "n kprice0,0price0,1... price0,k-1price1,0price1,1... price1,k-1...pricen-1,0pricen-1,1... pricen-1,k-1",
  "sample_output": "Input:3\r\n3 4\r\n1 2 3 4\r\n2 3 4 6\r\n6 5 4 3\r\n3 3\r\n5 5 5\r\n4 4 6\r\n4 5 4\r\n5 2\r\n1 1\r\n2 2\r\n5 4\r\n4 4\r\n4 1Output:Case #1: 2\r\nCase #2: 3\r\nCase #3: 2",
  "link": "https://www.spoj.com/problems/HASTOCK",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "n kprice0,0price0,1... price0,k-1price1,0price1,1... price1,k-1...pricen-1,0pricen-1,1... pricen-1,k-1",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n3 4\r\n1 2 3 4\r\n2 3 4 6\r\n6 5 4 3\r\n3 3\r\n5 5 5\r\n4 4 6\r\n4 5 4\r\n5 2\r\n1 1\r\n2 2\r\n5 4\r\n4 4\r\n4 1",
      "expected_output": "Case #1: 2\r\nCase #2: 3\r\nCase #3: 2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "10 5 5 9 3 8 3 1 10 3 7 6 6 1 3 8 10 9\ndyhos gyrodwxqib gii zddtuhieas rvrjcnheie",
      "expected_output": "0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 9 8 4 8 4 5 3 9 6 7 8 5 4 1 9 9 9\ncorjp zppivmgcnrfisntd guigqzymmlspdxbugep vxvznmonp hdcntuzvhhfx",
      "expected_output": "0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 9 8 3 9 3 6 8 2 1 1 4 4 3 1 10 5\ntcpxj nauuupsnqqtxsgwae h qdljimfygcdwulyd zwxqfgxqq",
      "expected_output": "0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "9 12 8 13 4 8 12 10 7 2 16 16 7 15 3 12 5 12\ntkobc xgxeci qgtssdldknaazsxh egmh jgnyfjtf",
      "expected_output": "0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 7 8 12 14 7 13 2 5 12 3 10 7 9 15 8 5 16\nvnof odkzf jp dnqfbmlestgdsfvjlfzvmadj lbcfw",
      "expected_output": "0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "5 1 15 13 2 13 15 4 10 13 2 9 13 12 6 8 15 6\nyuxu bvnftsfmkcukpumu tkay wblpudfjpbcvambqxt atxfrwwy",
      "expected_output": "0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 7 4 6 7 14 6 13 15 8 14 8 13 11 7 13 15 7\nnqw hnroxpyedhsqjhizjw hib qlmaqhipkmzwamoiylnkvtea rjczftb",
      "expected_output": "0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 5 13 1 10 13 9 8 11 14 9 3 14 4 3 6 6 8\nt uqhmcvkksxc titcwpxoegojrswqrliuixomwjola pbgw avxkqmp",
      "expected_output": "0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "4 8 3 5 5 2 4 3 8 3 4 7 6 5 8 6 2 8\nje cu gbqdquhbvfjkab ybnvxayrekchgxnr xtbb",
      "expected_output": "0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7 5 1 5 3 2 1 1 8 2 8 2 2 2 3 2 3 8\nuga mqgvpxicwb xukexufpwbgirjzelycddtqrijyfl shzmpq urtbwndvztn",
      "expected_output": "0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6 1 2 7 3 1 3 6 1 1 8 7 2 2 4 5 3 2\noibju foyvsubypwc ohhdszvkuiyvfbawfbfnitlkb pfchsfpgowpbkxmzyksjkhfozb qz",
      "expected_output": "0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "4 4 6 1 8 2 7 4 1 2 6 1 2 7 2 3 4 4\nhelb hmmtt mxyeu pvkpmuoq dgtkjgwxxoy",
      "expected_output": "0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 4 4 4 7 8 3 6 7 4 1 8 8 2 5 8 8 8\nhx e bfxeooqnkdexmysojflzlurz wojsbvsavdiftsmifegodrmbwqku doqfa",
      "expected_output": "0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "3 4 6 7 6 5 2 6 6 4 7 5 6 5 5 6 8 5\nyc hnuvoxfnqc onthnsijvzmcjwztiloevdrppdueg qouvcllgqkgwcxivppsely thrwgrki",
      "expected_output": "0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "6 8 3 4 5 8 5 7 2 2 6 7 7 8 4 1 2 6\nwsdzk eayghw rxjbeqnrmecvgbtaitwaler kxrccmbkbudzibvqwrrgr itaniumn",
      "expected_output": "0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16\nz udetqogymcgtjbawlyd mytmrrnkdgbcknudvux mmqzyolzrjjsigujiqfxvyopk zcgkthgpun",
      "expected_output": "0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16\nne rbaj lwegfipvfhtckoabbkzsmjlpd rjbfoemsfwhtffovjmgskdzmcjle sruytpzksp",
      "expected_output": "0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 2 1 1 1 2 1 1 1 1 16 1 15 1 2 2 1\npqv goewalvb bthqecwafdjd qxctyrn qdmevg",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:38"
}