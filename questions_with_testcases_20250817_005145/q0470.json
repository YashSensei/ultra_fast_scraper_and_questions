{
  "problem_code": "problems",
  "title": "Hugo\"s Tennis Training",
  "tags": [],
  "text": "Hugo is aYear 69 studentat the prestigiousPatrick Mouratoglou Tennis Academy, home to future tennis legends and borderline superhumans. Determined to improve his game and one day win a Grand Slam, Hugo trains relentlessly — rain or shine, weekday or weekend. Every day, he logs the exact number of minutes he spends practicing, down to the last serve and sprint drill.His coach,Bobby, is known for his data-driven approach. “Tennis is math in motion,” Bobby often says. Lately, Bobby has been peppering Hugo with questions like:“How much did you practice during Week 4 of Block B?”“Did your training volume drop before the clay season?”Hugo, exhausted from practice, doesn’t want to manually sum up training logs every time. So he turns to you — the academy’s resident programming wizard.You're given Hugo’s log of training durations, and a list of Bobby’s questions. Each question asks for thetotal number of minutes Hugo trained between two specific days.Can you answer Bobby’s queries efficiently, before he makes Hugo calculate them on a whiteboard again?InputN QA1A2A3... AnL1R1L2R2...LQRQ1 ≤ N, Q ≤ 1051 ≤ A[i] ≤ 1041 ≤ Li≤ Ri≤ NOutputFor each query, output a single number: the total number of minutes Hugo trained from day Lito day RiExampleInput:5 3\r\n10 20 30 40 50\r\n1 3\r\n2 4\r\n1 5Output:60\r\n90\r\n150",
  "sample_input": "Input:5 3\r\n10 20 30 40 50\r\n1 3\r\n2 4\r\n1 5Output:60\r\n90\r\n150",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TEWBMCUL",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "5 3\r\n10 20 30 40 50\r\n1 3\r\n2 4\r\n1 5",
      "expected_output": "60\r\n90\r\n150",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 9\n5 5 2 1 8\n4 4\n8 4\n8 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 1\n1 8 2 7 5\n4 5\n6 2\n6 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 3\n7 3 7 6 10\n8 8\n2 9\n5 6",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "45 58\n88 61 89 51 55\n100 14\n50 25\n90 29",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "79 3\n76 35 18 86 98\n58 33\n91 29\n39 66",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 97\n50 55 91 9 32\n15 87\n83 94\n51 70",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 76\n20 72 99 32 54\n65 8\n74 59\n3 70",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "86 26\n77 84 64 87 83\n9 7\n95 44\n35 99",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "253 86\n481 407 57 493 180\n473 257\n477 301\n441 149",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "83 418\n396 113 370 299 375\n497 158\n52 153\n249 335",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "172 412\n56 426 143 341 340\n292 407\n218 158\n234 260",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "266 75\n417 132 436 100 150\n207 342\n143 360\n371 159",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "182 210\n407 157 213 145 108\n355 101\n66 174\n424 472",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "192 72\n488 113 126 399 306\n443 149\n235 249\n448 311",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "383 166\n373 73 263 225 71\n61 336\n244 200\n393 434",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n2 2 1 999 2\n1 1000\n1 1\n1 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n999 2 999 2 999\n999 2\n1 2\n999 999",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:34"
}