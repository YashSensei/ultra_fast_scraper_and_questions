{
  "problem_code": "problems",
  "title": "Making Jumps",
  "tags": [],
  "text": "A knight is a piece used in the game of chess. The chessboard itself is square array of cells. Each time a knight moves, its resulting position is two rows and one column, or two columns and one row away from its \t \r\nstarting position. Thus a knight starting on row r, column c – which we’ll denote as (r, c) – can move to any of \t \r\nthe squares (r-2, c-1), (r-2, c+1), (r-1, c-2), (r-1, c+2), (r+1, c-2), (r+1, c+2), (r+2, c-1), or (r+2, c+1). Of course, the knight may not move to any square that is not on the board.Suppose the chessboard is not square, but instead has rows with variable numbers of columns, and with each row offset zero or more columns to the right of the row above it. The figure to the left illustrates one possible configuration. How many of the squares in such a modified chessboard can a knight, starting in the upper left square (marked with\tan asterisk), not reach in any number of moves without resting in any square more than once?If necessary, the knight is permitted to pass over regions that are outside the borders of the modified chessboard, but as usual, it can only move to squares that are within the borders of the board.InputThere will be multiple cases to consider. The input for each case begins with an integer n, between 1 and 10, that specifies the number of rows in the modified chessboard. Following n there will be n pairs of integers, with the ith pair corresponding to the ith row of the chessboard. The first integer of each pair indicates the number of squares skipped at the beginning of the row. The second integer indicates the number of squares in the row (which will always be at least 1).The last case will be followed by the integer 0.For example, input for the case illustrated by the chessboard shown above would be:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4The maximum dimensions of the board will be 10 rows and 10 columns. That is, any modified chessboard specified by the input will fit completely on a 10 row, 10 column board.OutputFor each input case, display the case number (1, 2, …), and the number of squares that the knight can not reach. Display the results in the format shown in the examples below.ExampleInput:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0Output:Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
  "sample_input": "Input:7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0Output:Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKJUMPS",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "7 0 3 0 3 0 4 0 4 1 3 1 7 4 4\r\n3 0 3 0 3 0 3\r\n2 0 1 2 1\r\n0",
      "expected_output": "Case 1, 4 squares can not be reached.\r\nCase 2, 1 square can not be reached.\r\nCase 3, 0 squares can not be reached.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 2 10 7 6 6 3 6 5 1 9 2 5 3 2\n3 8 6 5 4 6 3\n3 9 3 6 4\n7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 9 6 10 7 2 4 5 2 3 1 4 6 2\n2 4 1 9 3 7 1\n5 2 9 9 3\n4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 3 8 6 5 4 4 6 10 7 7 7 7 5\n5 1 3 2 9 8 5\n7 5 3 3 2\n4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 28 50 30 55 22 27 7 50 61 13 60 15 2 83\n78 57 98 27 51 75 30\n2 48 18 92 49\n73",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "14 50 19 52 52 66 9 22 31 9 98 5 56 19 94\n7 38 9 72 68 43 4\n52 35 35 58 28\n61",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 16 54 80 9 85 40 99 87 25 45 39 74 69 80\n89 30 98 98 36 100 1\n1 4 48 60 78\n27",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "99 98 80 33 7 74 82 31 52 53 94 63 100 69 56\n79 71 85 12 61 27 55\n6 88 49 97 93\n56",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 74 95 24 93 98 10 90 16 31 34 44 54 94 40\n33 66 94 97 50 7 57\n8 62 75 49 68\n99",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "68 341 85 128 63 253 125 75 186 311 103 53 333 302 378\n393 491 151 85 430 368 373\n336 59 284 173 258\n281",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "408 211 122 128 216 449 158 425 337 97 350 295 212 499 487\n89 73 79 332 350 223 150\n478 180 111 195 319\n193",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "333 113 449 250 401 499 415 387 287 248 121 332 452 328 320\n196 377 95 92 379 329 173\n124 236 366 174 400\n408",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "405 388 411 317 329 213 177 394 280 250 295 109 200 351 65\n98 80 280 105 221 81 450\n449 222 469 386 68\n287",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "183 286 217 319 60 121 167 421 263 90 57 469 132 79 483\n407 425 125 128 219 405 178\n250 396 134 97 346\n100",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "413 51 343 206 170 289 227 224 401 342 199 326 461 155 90\n392 76 355 338 303 417 478\n362 477 124 384 468\n328",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "100 79 352 495 324 367 406 187 456 194 56 226 290 275 480\n498 322 356 500 413 168 192\n265 75 103 398 208\n79",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 999 999 1000 1000 999 1000 999 1000 999 999 2 1 1000\n2 2 1000 1 1000 1000 2\n999 1000 999 999 1000\n999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 2 1 1000 1000 999 1000 2 1 2 999 2 1 1\n1000 1000 1 1000 999 1000 1000\n999 999 2 999 999\n2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:54"
}