{
  "problem_code": "problems",
  "title": "The Triangle Game",
  "tags": [],
  "text": "In the triangle game you start off with six triangles numbered on each edge, as in the example above. You can slide and rotate the triangles so they form a hexagon, but the hexagon is only legal if edges common to two triangles have the same number on them. You may not flip any triangle over. Two legal hexagons formed from the six triangles are illustrated below.The score for a legal hexagon is the sum of the numbers on the outside six edges.Your problem is to find the highest score that can be achieved with any six particular triangles.The input file will contain one or more data sets. Each data set is a sequence of six lines with three integers from 1 to 100 separated by blanks on each line. Each line contains the numbers on the triangles in clockwise order. Data sets are separated by a line containing only an asterisk. The last data set is followed by a line containing only a dollar sign.For each input data set, the output is a line containing only the word \"none\" if there are no legal hexagons or the highest score if there is a legal hexagon.ExampleInput:1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$Output:152\r\n21\r\nnone",
  "sample_input": "Input:1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$Output:152\r\n21\r\nnone",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MCU20A",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "1 4 20\r\n3 1 5\r\n50 2 3\r\n5 2 7\r\n7 5 20\r\n4 7 50\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n60 6 10\r\n*\r\n10 1 20\r\n20 2 30\r\n30 3 40\r\n40 4 50\r\n50 5 60\r\n10 6 60\r\n$",
      "expected_output": "152\r\n21\r\nnone",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 2 9\n3 5 10\n3 10 3\n6 8 5\n1 4 6\n8 3 3\nw\n2 7 7\n1 4 4\n8 9 3\n6 10 4\n6 4 10\n1 2 1\na\n5 7 9\n5 1 8\n10 5 10\n8 7 7\n6 3 10\n6 2 4\nny",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 4 5\n3 3 7\n7 5 7\n6 3 9\n4 10 6\n10 3 1\nm\n9 6 6\n2 1 1\n4 5 1\n9 1 2\n4 5 8\n8 4 10\nky\n2 3 10\n6 7 5\n5 3 5\n9 4 8\n10 7 1\n2 2 10\nq",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1 9\n2 3 4\n5 10 6\n3 5 6\n5 9 3\n1 6 1\na\n6 4 7\n1 3 9\n5 10 10\n6 6 5\n7 1 10\n6 8 9\nd\n1 2 2\n5 1 2\n6 3 5\n7 8 9\n10 7 10\n1 3 9\ni",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "100 19 65\n75 59 26\n49 99 60\n83 5 70\n61 70 59\n87 62 50\nlv\n56 92 79\n32 63 89\n74 24 56\n83 74 33\n85 85 58\n30 7 76\nkd\n42 50 86\n1 26 45\n52 64 12\n10 73 83\n95 37 11\n3 28 44\nou",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "96 56 11\n17 100 29\n15 23 31\n11 29 97\n86 98 74\n97 37 66\nf\n15 1 95\n23 76 40\n51 70 59\n15 51 34\n80 59 70\n51 55 42\nb\n26 45 18\n44 54 89\n45 53 55\n82 98 28\n18 79 79\n46 76 53\ngw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "44 1 24\n98 7 91\n27 36 68\n69 6 56\n84 47 53\n31 98 8\na\n73 4 52\n71 87 8\n11 2 18\n67 98 20\n57 73 100\n80 28 71\naz\n6 65 54\n67 4 86\n73 83 4\n46 4 6\n17 88 71\n81 17 12\ncd",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 10 65\n74 72 47\n25 51 83\n46 38 71\n6 9 80\n20 59 11\nbv\n20 27 42\n81 33 40\n59 83 86\n96 71 81\n18 14 74\n6 83 22\nlj\n63 20 61\n16 89 31\n62 70 76\n6 10 99\n27 49 88\n31 40 37\np",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "36 70 39\n3 53 39\n69 9 82\n52 65 31\n50 55 19\n36 84 32\nue\n67 91 40\n48 99 10\n21 8 26\n43 38 16\n75 55 71\n5 98 93\neh\n43 64 69\n21 90 69\n43 72 80\n38 60 7\n61 73 94\n67 10 88\nbw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "255 51 269\n307 279 206\n155 474 131\n113 406 405\n370 449 179\n100 118 153\nn\n392 336 408\n410 291 255\n491 85 469\n226 227 111\n132 323 334\n285 267 211\npg\n188 51 223\n312 57 214\n155 155 378\n281 324 275\n298 238 369\n321 73 326\nob",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "364 136 195\n302 230 405\n94 269 444\n257 348 300\n308 150 470\n137 191 317\nl\n346 249 405\n278 432 493\n375 490 128\n165 338 464\n498 285 462\n69 336 404\nd\n175 261 340\n279 341 309\n131 192 62\n488 379 363\n476 414 93\n399 305 50\nhj",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "264 352 444\n471 168 398\n275 177 403\n96 271 246\n372 390 271\n88 346 87\niv\n385 460 418\n111 120 346\n62 443 60\n224 401 305\n113 236 122\n432 153 382\nxj\n445 193 159\n414 161 376\n435 212 103\n331 442 109\n233 113 408\n428 244 77\nj",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "126 60 386\n354 129 109\n441 84 95\n262 238 285\n464 382 188\n287 58 188\nwo\n96 67 134\n223 239 319\n158 105 179\n277 329 71\n142 246 356\n61 403 79\nk\n458 270 281\n236 260 355\n274 249 228\n221 136 304\n201 366 286\n146 227 107\nok",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "286 352 243\n377 205 132\n98 76 141\n262 385 180\n438 93 368\n214 311 212\nm\n206 331 254\n244 331 349\n230 489 64\n117 203 491\n365 274 425\n487 276 274\ncc\n375 222 293\n178 287 215\n53 85 187\n237 161 414\n186 334 185\n70 442 107\nk",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "361 164 339\n197 364 426\n294 453 480\n318 322 153\n469 422 455\n327 172 252\npu\n400 68 133\n412 493 254\n174 366 338\n167 114 131\n358 257 191\n313 447 73\ne\n414 257 387\n181 91 86\n356 148 79\n343 365 347\n451 62 173\n370 451 150\nh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "487 239 334\n255 109 288\n323 108 205\n473 354 474\n454 268 487\n485 350 416\nf\n246 69 61\n290 482 337\n424 320 99\n421 321 124\n158 144 472\n95 419 259\nkh\n234 116 75\n381 182 466\n215 72 125\n146 449 378\n486 326 190\n224 155 194\nw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nur\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nmy\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\np",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nk\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\nv\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\ns",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000\n999 2 1\n1000 999 999\n1 999 2\n1000 2 1000\n2 999 2\nd\n999 1000 2\n1000 1000 1\n1000 1 2\n1000 1000 2\n2 1000 2\n2 1 2\ny\n1 2 1\n1 2 999\n1 999 1000\n1 1000 2\n999 2 1\n2 2 1\nlh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 1000\n1000 2 1\n999 1 1000\n1 999 1000\n999 1000 2\n1 999 1\nm\n2 999 1\n999 1000 2\n999 999 1000\n999 999 999\n1 1 1000\n1 999 1000\nw\n1000 2 999\n1 999 2\n1 2 1\n1000 1 1\n1 1000 1\n1 999 1\nm",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:12"
}