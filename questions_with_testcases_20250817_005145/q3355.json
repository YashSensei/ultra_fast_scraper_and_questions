{
  "problem_code": "problems",
  "title": "Stack",
  "tags": [],
  "text": "Alan loves to construct a stack of building bricks. His stack consists of many cuboids with square\r\nbase. All cuboids have the same height 1. Alan puts the consecutive cuboids one over another.Recently in math class, the concept of volume was introduced to Alan. Consequently, he wants to\r\ncompute the volume of his stack now. The lengths of cuboids bases (from top to bottom) are constructed\r\nby Alan in the following way:Length of edge of the first square is one. i.e.a1= 1.Next, Alan fixes the length of the edge of the second squarea2.Next, Alan calculates the lengthan(n > 2) by2 * a2* an-1- an-2. Do not ask why he chose such a formula; let us just say that he is a really peculiar young fellow.For example, if Alan fixesa2= 2, thena3= 7. If Alan fixesa2= 1, thenan= 1 holds for all n.Now Alan wonders if he can calculate the volume of stack ofNconsecutive building bricks. Help\r\nAlan and write the program that computes this volume. Since it can be quite large, it is enough to\r\ncompute the answer modulo given natural numberm.InputThe input contains several test cases. The first line contains the number t (t ≤ 100000) denoting the number\r\nof test cases. Then t test cases follow. Each of them is given in a separate line containing three integersa2,N,m(1 ≤a2,m≤ 109, 2 ≤N≤ 109) separated by a single space.OutputFor each test case compute the volume of stack ofNconsecutive bricks constructed by Alan\r\naccording to steps 1 to 3 and output its remainder modulom.ExampleInput:3\r\n2 3 100\r\n1 4 1000\r\n3 3 1000000000Output:54\r\n4\r\n299Warning: large input/output data, be careful with certain languages.Warning: A naive algorithm won't terminate in even 2 minutes.",
  "sample_input": "Input:3\r\n2 3 100\r\n1 4 1000\r\n3 3 1000000000Output:54\r\n4\r\n299",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STACK",
  "scraped_at": "2025-08-17 00:34:17",
  "test_cases": [
    {
      "input": "3\r\n2 3 100\r\n1 4 1000\r\n3 3 1000000000",
      "expected_output": "54\r\n4\r\n299",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n5\n3",
      "expected_output": "0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n6\n9\n10",
      "expected_output": "0\n0\n0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n28580242\n64656497\n9332654\n40445779\n30063957\n57304142\n20731128\n52948636\n12499146\n9334958\n73363557\n347037\n54229831\n44043826",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n35589718\n38890810\n19623600\n64454304\n71629711\n8502397\n90386923\n90856943\n3695715\n70346284\n77019954\n21551075\n97257409\n54444201\n89953128\n31857644\n1555552",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n57122064\n91257677\n86317021\n56561573\n19811930\n18280166\n7697244\n55732000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n18319\n55104794\n51571694\n7851236\n9783930\n30702029\n57218198\n17157108\n49198370\n9424439\n99436682",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n18233872\n25363736\n92071179\n65369018\n91745605\n23457446\n30336225\n43346230\n61526347\n93005204\n90413733\n2170332\n49759621\n2433598\n52670138\n17534776\n38371286\n89912976",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n23450\n36171\n37872\n77661\n43157\n66493\n86168\n47910\n62783\n81050\n17044\n54650\n69148\n95963\n27410\n3119\n17297\n92685\n91120\n94185",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "29\n58638\n36258\n68611\n9777\n64134\n74699\n42185\n83993\n92741\n79620\n11278\n49521\n24406\n71831\n21799\n17309\n65243\n65755\n58373\n20647\n99537\n60340\n9560\n67883\n56731\n2111\n54818\n45888\n45639",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "68\n39090\n55767\n43442\n16869\n31531\n61180\n83980\n34036\n59523\n89401\n21646\n77285\n38286\n76090\n99120\n57390\n30744\n33140\n15821\n91277\n17011\n78279\n89516\n98494\n75391\n58745\n16397\n84697\n84481\n22557\n92949\n28229\n34806\n35715\n88839\n12480\n4770\n7167\n30122\n78279\n377\n31085\n58104\n60700\n92067\n92949\n80090\n41952\n13445\n87400\n445\n16686\n88265\n92959\n70419\n46387\n54434\n89083\n72328\n42938\n34280\n67242\n38242\n17383\n68662\n79966\n62628\n25925",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n2807\n29217\n62451\n69555\n77834\n74125\n40570\n13090\n89525\n52250\n33609\n8134\n6830\n36236\n20642\n82701\n61492\n48089\n21937\n93676\n96067\n30308\n12805\n66292\n63986\n19968\n30593\n68082\n44393\n40773\n6713\n93319\n79751\n87221\n48370\n96928\n10878\n84505",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n92452\n61322\n82415\n45609\n36520\n36350\n1779\n35440\n15213\n39679\n78472\n65783\n58588\n42123\n99062\n30544\n94938\n49204\n43727\n2546\n65197\n83880\n68290\n62508\n500\n27240\n4066\n8176\n96423\n2398\n98154\n27949\n81825\n59425\n97739\n52369\n62778\n14243",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "75\n52176\n40034\n37542\n53534\n13812\n48162\n18992\n16818\n21538\n32394\n49304\n61057\n81705\n41225\n22915\n44819\n40755\n58739\n65271\n89175\n86048\n68828\n97119\n94035\n16753\n6840\n92715\n30454\n31818\n97098\n32236\n53571\n87716\n91913\n21671\n33886\n12069\n12630\n230\n40032\n92421\n68709\n76081\n86902\n87910\n6537\n34879\n77820\n12425\n48080\n72252\n27158\n84056\n25946\n68953\n19569\n64435\n21523\n53026\n60162\n78508\n97905\n94970\n1369\n15821\n88110\n30486\n62001\n32042\n285\n11842\n97193\n35329\n39814\n58529",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n88747\n45929\n38716\n90197\n24373\n45427\n82137\n14326\n10967\n36670\n44710\n33448\n15582\n8159\n79409\n536\n38374\n14971\n21644\n58557\n88831\n42063",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "109\n8572996\n38938235\n95093877\n45501586\n48490351\n15175225\n2438313\n68328509\n6468731\n37267271\n81185289\n93199562\n10878789\n38899193\n2034926\n35697876\n96858061\n73627111\n92839693\n86852172\n96572477\n18389502\n73391413\n17073122\n44206634\n89816339\n72115330\n775141\n72688836\n67846557\n35228030\n98809567\n30010733\n65479439\n1840752\n59888076\n29795462\n60656206\n59149871\n12744104\n85391403\n57602768\n22407836\n73314725\n99874001\n39439931\n78235414\n77311677\n69042659\n31011908\n26326572\n90401314\n76516481\n24971171\n59647971\n89955377\n95726796\n41212071\n77561127\n53579359\n28478818\n16987099\n12955800\n23610656\n36563347\n67845842\n58266752\n17793835\n93366451\n20744395\n75317628\n62555296\n75756302\n70646782\n45933903\n85056880\n50412788\n36593688\n54637271\n44118245\n69035214\n25404972\n36912933\n76109145\n37799381\n99122626\n73173970\n63801719\n80459471\n20502015\n81506147\n66637485\n97629135\n75114281\n86042553\n1535416\n75587387\n86264749\n4050311\n96824164\n74334682\n17637430\n17286010\n39626881\n33293515\n12129939\n98028741\n36054356\n50146570",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "109\n20317916\n40655840\n6845535\n760982\n91012258\n11880400\n88886958\n56375673\n8021103\n47100123\n19738364\n12649477\n35831567\n72715896\n23462264\n96638055\n69036014\n69125530\n13767926\n24661728\n51872913\n41785111\n81660617\n76548299\n45960004\n26872343\n70059112\n74626468\n60898218\n97656044\n81840923\n62509441\n75912736\n15718793\n71199009\n66233220\n15276446\n78292255\n43281079\n61296837\n94983312\n45089845\n82644506\n36723538\n41109611\n15945376\n1361182\n19319116\n551488\n18421869\n3232941\n27669620\n61261141\n25777826\n56456629\n91128661\n92693692\n92893626\n54489496\n32696165\n85372863\n51286525\n23084784\n10349527\n46084473\n86644671\n89309753\n65584123\n41308365\n92999190\n73302184\n56897435\n92752581\n55706703\n3699720\n60958984\n10615138\n91593511\n27395809\n6018776\n7325672\n73211079\n99390765\n41512398\n97608936\n74663744\n87303502\n10196033\n50930404\n48531354\n66605569\n63641318\n59761659\n33517029\n32770236\n92852323\n72844499\n57040631\n935846\n61509843\n76434862\n17619087\n70696140\n48236984\n20032790\n62303704\n2080264\n40550937\n51288291",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 109)"
    },
    {
      "input": "1\n87947630",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:04"
}