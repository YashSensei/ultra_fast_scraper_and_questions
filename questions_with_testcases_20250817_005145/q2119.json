{
  "problem_code": "problems",
  "title": "Guess the Numbers",
  "tags": [],
  "text": "John has never been very good at maths. Due to his bad grades, his parents have sent him to the Academic Coalition of Mathematics (ACM). Despite the large amount of money his parents are spending on the ACM, John does not pay much attention during classes. However, today he has begun to think about all the effort his parents are putting into his education, and he has started to feel somewhat...  guilty. So he has made a decision: he is going to improve his maths grades!However, no sooner had he resolved to pay attention than the lesson ended. So the only thing he has been able to do is to hurriedly copy the content of the blackboard in his notebook. Today, the teacher was explaining basic arithmetic expressions with unknowns. He vaguely remembers that his classmates have been substituting values into the unknowns to obtain the expressions’ results. However, in all the hurry, John has only written down expressions, values and results in a messy fashion. So he does not know which value comes with each unknown, or which result goes with each expression.That is the reason he needs your help: he wants to know, given an expression, some values and a result, whether it is possible or not to assign those values to the unknowns in order for the expression to evaluate to the given result. The particular assignment of values does not matter to John, as he wants to do it by himself. He only wants to know whether it is possible or not.InputEach test case in the input file consists of two lines:The first line contains a sequence of natural numbers. The first one (1 ≤n≤ 5) is the number of unknowns that will occur in the expression. It is followed by a sequence ofnintegersv1…vn(0 ≤vi≤ 50), which are the values to be assigned to the unknowns. Finally, there is an integerm(0 ≤m≤ 1000) representing the desired result of the evaluation of the expression.The second line contains an arithmetic expression composed of lowercase letters (a-z), brackets ((and)) and binary operators (+,-,*). This expression will containnunknowns, represented byndifferent lowercase letters, without repetitions. The expression will not contain any blanks and will always be syntactically correct, i.e. it is just an unknown or has the form(e1ope2), wheree1ande2are expressions andopis one of the three possible binary operators.The input will finish with a dummy test case of just one line containing0 0, which must not be processed.OutputFor each test case, print a single line withYESif there exists an assignment of the valuesv1…vnto the unknowns such that the expression evaluates tom, andNOotherwise. Notice that each valuevimust be assigned to exactly one unknown.ExampleInput:3 2 3 4 14\r\n((a+b)*c)\r\n2 4 3 11\r\n(a-b)\r\n1 2 2\r\na\r\n0 0Output:YES\r\nNO\r\nYESProblem setter: Enrique Martín Martín",
  "sample_input": "Input:3 2 3 4 14\r\n((a+b)*c)\r\n2 4 3 11\r\n(a-b)\r\n1 2 2\r\na\r\n0 0Output:YES\r\nNO\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GUESSNM2",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "3 2 3 4 14\r\n((a+b)*c)\r\n2 4 3 11\r\n(a-b)\r\n1 2 2\r\na\r\n0 0",
      "expected_output": "YES\r\nNO\r\nYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3 5 2 2\nxgte\n1 3 4 4\nawtacf\n5 2 2\ne\n1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 3 4 5\nkc\n5 2 2 1\nbedsszltfw\n4 1 1\nnm\n1 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 2 2 3 5\ncismmma\n1 1 3 1\nycmqmtnktw\n1 5 2\nr\n1 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 3 4 2 5\nwdvffcvp\n4 1 3 2\nkwgyb\n3 4 2\nrg\n3 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "4 5 4 5 2\nhppbyqoffo\n5 1 4 4\ntvdtk\n3 1 2\nmv\n3 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1 1 5 5\nnldduzrwukw\n1 3 2 5\nbcozop\n3 4 2\np\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 2 2 5 3\nrfjvxby\n2 1 3 4\ncss\n2 3 5\nuc\n1 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 4 5 4 1\nzxov\n2 4 3 1\nfzsmeo\n5 4 1\noh\n4 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2 2 1 2 2\nwpejp\n1 2 1 2\ndxfgxbobd\n2 1 2\nc\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 1 1 2\nqxjxfnjhb\n2 1 2 2\nms\n1 2 2\nay\n2 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 1 1 1\ntkjcwhn\n1 2 1 1\nnvhhohehrm\n2 2 1\nbw\n1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2 2 1 1 1\ngv\n1 1 2 2\nlwnwivyic\n1 1 2\nw\n1 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 2 2 1 1\njae\n1 2 2 1\nerb\n2 2 2\nzx\n1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 2 2 1 1\nxiaqawdrcuecaev\n2 2 1 2\ndz\n1 2 2\ner\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 2 2 1\nrzh\n1 2 2 2\noqgj\n1 2 2\ni\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5 5 5 5 5\nrhtfaeh\n5 5 5 5\npxlzj\n5 5 5\nx\n5 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5 5 5 5 5\nqs\n5 5 5 5\nabmmyg\n5 5 5\ne\n5 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "4 4 2 1 5\nqfashncefzbpzdkxo\n5 5 1 5\nv\n2 1 1\nag\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 4 4 5 5\nnp\n2 5 5 1\nntrl\n1 2 2\na\n4 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:25"
}