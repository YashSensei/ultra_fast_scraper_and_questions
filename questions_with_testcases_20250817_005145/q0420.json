{
  "problem_code": "problems",
  "title": "See you again?",
  "tags": [],
  "text": "Tareq and Shawon were two friends of the problem setter's. Many years ago, they died in a road accident. The problem setter still misses them. He gives you the following task in memory of his friends.You're given a tree with n nodes and n-1 edges. Each node contains a single character.(A node can contain any of the lowercase Latin letters 'a' to 'z' or special symbol '&'). You've to answer if it is possible to find the string \"tareq&shawon\", without quotes, as a subsequence if you choose a path from the root node to a leaf node. If it is possible then print the path that contains the mentioned string as a subsequence. If there are multiple paths containing the above string as a subsequence, print the lexicographically smallest one.Note that 1 is the root of the tree and you've to print the whole path from the root node to a leaf node that contains the above string as a subsequence.You have to answer t independent test cases.InputThe first line of the input contains one integer t (1 ≤ t ≤ 1000) - the number of test cases. Then t test cases follow.The first line of the test case contains one integer n (1 ≤ n ≤ 105) - number of nodes in the tree.The next n-1 lines contains two integers u (1 ≤ u ≤ n) and v (1 ≤ v ≤ n) denotes an edge between node u and v.The next line contains n space separated characters where c[i] corresponds to the character in the i’th node. c[i] can be a lowercase Latin letter or special symbol '&'.It is guaranteed that the sum of n over all test cases does not exceed 105.OutputFor each case print the case number and then print \"YES\" if there is a path from the root node to a leaf node that contains the mentioned string as a subsequence. And print the lexicographically smallest path that contains the mentioned string as a subsequence.Otherwise, print \"NO\".ExampleInput:1\r\n31\r\n1 2\r\n2 3\r\n3 8\r\n8 9\r\n9 13\r\n13 17\r\n17 18\r\n18 23\r\n2 4\r\n4 7\r\n7 10\r\n10 14\r\n14 16\r\n16 19\r\n19 22\r\n22 28\r\n28 29\r\n29 30\r\n30 31\r\n2 5\r\n5 6\r\n6 11\r\n11 12\r\n12 15\r\n15 20\r\n20 21\r\n21 24\r\n24 25\r\n25 26\r\n26 27\r\nt a r r r e e e q q q & & & s s s h h h a a a w o n m w o n xOutput:Case 1: YES\r\n1 2 4 7 10 14 16 19 22 28 29 30 31NotesThere are two possible path from the root to a leaf that contains mentioned string as a subsequence. They are 1 2 4 7 10 14 16 19 22 28 29 30 31 and 1 2 5 6 11 12 15 20 21 24 25 26 27. The first one is lexicographically smaller.",
  "sample_input": "Input:1\r\n31\r\n1 2\r\n2 3\r\n3 8\r\n8 9\r\n9 13\r\n13 17\r\n17 18\r\n18 23\r\n2 4\r\n4 7\r\n7 10\r\n10 14\r\n14 16\r\n16 19\r\n19 22\r\n22 28\r\n28 29\r\n29 30\r\n30 31\r\n2 5\r\n5 6\r\n6 11\r\n11 12\r\n12 15\r\n15 20\r\n20 21\r\n21 24\r\n24 25\r\n25 26\r\n26 27\r\nt a r r r e e e q q q & & & s s s h h h a a a w o n m w o n xOutput:Case 1: YES\r\n1 2 4 7 10 14 16 19 22 28 29 30 31",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DST",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "1\r\n31\r\n1 2\r\n2 3\r\n3 8\r\n8 9\r\n9 13\r\n13 17\r\n17 18\r\n18 23\r\n2 4\r\n4 7\r\n7 10\r\n10 14\r\n14 16\r\n16 19\r\n19 22\r\n22 28\r\n28 29\r\n29 30\r\n30 31\r\n2 5\r\n5 6\r\n6 11\r\n11 12\r\n12 15\r\n15 20\r\n20 21\r\n21 24\r\n24 25\r\n25 26\r\n26 27\r\nt a r r r e e e q q q & & & s s s h h h a a a w o n m w o n x",
      "expected_output": "Case 1: YES\r\n1 2 4 7 10 14 16 19 22 28 29 30 31",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n4\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "17\n74958902\n94572042\n57932970\n28235325\n71242642\n56333247\n34540233\n13775164\n2960712\n21801874\n74323773\n52101671\n93288355\n62950930\n65635130\n2626155\n41755996",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n32784186\n9929898\n20395463\n13816944\n55306687\n89700100\n84676575",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n64482711\n64210134\n58700918\n74690947\n85733675\n27407717\n75791006\n21782614\n63076563\n78606566\n86378285\n58675732\n86198975\n16436738\n46015955\n95326857\n40119064\n58955739\n14722042",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n87112542\n53549886\n89744047\n30599029\n54659053\n37567344\n80273309\n94009044\n3072486\n57967182\n60057591\n72952184\n38471135\n95000584\n8578281\n74124774\n38031714\n46751085\n25030181\n26986152",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n95109554\n23446449\n27883823\n56639795\n78138686\n52814673\n47553927\n97070774\n33738223\n70402354\n7798395\n54474009\n8937479\n55113294\n88136797\n20870110\n91794035\n26101853\n36675453\n85319871",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "47\n85182\n53836\n67544\n61632\n62818\n58969\n9378\n19251\n13128\n81315\n66859\n55322\n2720\n732\n62159\n52728\n3132\n65500\n55145\n90696\n31500\n84466\n79446\n68661\n19881\n17359\n93552\n41547\n51612\n5066\n87900\n86458\n23978\n6279\n55653\n49187\n21535\n23846\n53240\n58567\n405\n17093\n49866\n2700\n75856\n58916\n16337",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "88\n7773\n5873\n95823\n45012\n25762\n55212\n83856\n79639\n51119\n92141\n18108\n1312\n10597\n11505\n53500\n39899\n74628\n98054\n41480\n62449\n17303\n73749\n75909\n41746\n732\n70576\n19919\n36426\n94724\n6517\n92804\n34086\n9878\n17947\n27793\n49280\n17003\n2499\n55644\n59391\n46220\n83934\n93424\n37978\n410\n62124\n88168\n24698\n70857\n65941\n36577\n63737\n85494\n11762\n6405\n67878\n92904\n69734\n70174\n75220\n22809\n42636\n81289\n4849\n73493\n32018\n41526\n28987\n17521\n64250\n10587\n62124\n80913\n21785\n93183\n72165\n24378\n34413\n33672\n74279\n23287\n90324\n29554\n92356\n31157\n80957\n90069\n17063",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n32811\n19752\n2433\n40029\n29557\n78477\n79625\n65106\n27522\n92460\n36\n86258\n44338\n64457\n24349\n39352\n1302\n37926\n80739\n54641\n86471\n23796\n56245\n65228",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n5584\n47778\n16096\n85885\n60961\n7591\n21227\n386\n17732\n6102\n65647\n59798\n21947\n87629\n89238\n49509\n44179\n99778\n89413\n92568\n39511\n21599\n2436\n98310\n32283\n8716\n8482\n811\n83570\n363\n65397\n11938\n55134\n34532\n1305\n59355\n76951\n54788\n31063\n74062\n35814\n79860\n57246\n63153\n89757\n79521\n65588\n65828\n56822\n45258\n41571\n61240\n51138\n92008\n32043\n71593",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "84\n35652\n25417\n39268\n45829\n41199\n91058\n16511\n73148\n16290\n70047\n24689\n69558\n36487\n26320\n32155\n79024\n94329\n80891\n68870\n10321\n96081\n32638\n92838\n64373\n37616\n5400\n40366\n59880\n57697\n68732\n77109\n72263\n7865\n40998\n54830\n45518\n29578\n7065\n49021\n65430\n67179\n37839\n68574\n16120\n15154\n50409\n23450\n39653\n91694\n27455\n91168\n34839\n75902\n87789\n10093\n55440\n97706\n19269\n98499\n39820\n73351\n31543\n65778\n46914\n87370\n94644\n94427\n15946\n8463\n11250\n79191\n90611\n68528\n17195\n30253\n28741\n54600\n57709\n56491\n94291\n97075\n42041\n38509\n79475",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "44\n1771\n66821\n66399\n86879\n28142\n81498\n3016\n12251\n55391\n89818\n81167\n68390\n56340\n95781\n55758\n67005\n84277\n46106\n36551\n71009\n66677\n48929\n96644\n40179\n57619\n17472\n47728\n48525\n42461\n28453\n85749\n32872\n47962\n43485\n16196\n39255\n45080\n79650\n54337\n55180\n39464\n7378\n33147\n85868",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "95\n79679\n52535\n79402\n22092\n35724\n85924\n28804\n93208\n49533\n89411\n91786\n92859\n95309\n75294\n18286\n23936\n96938\n28301\n8234\n70404\n52925\n26313\n55102\n50140\n65810\n87285\n9134\n63344\n27356\n74097\n13363\n34266\n77767\n73473\n94212\n89034\n86\n16481\n25254\n77972\n20107\n73431\n13126\n99910\n23657\n9176\n64318\n54520\n14532\n28266\n71048\n60211\n90501\n28673\n15592\n93552\n98582\n46453\n16778\n76831\n11973\n61863\n52047\n53498\n35160\n74463\n47502\n86800\n92040\n23938\n68732\n54166\n52830\n12065\n60231\n19871\n4449\n25551\n24815\n80613\n23330\n38854\n23390\n9616\n18118\n88081\n36596\n95113\n18485\n24991\n55399\n80980\n39754\n55456\n31179",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n32163682\n26668754\n23988464\n56427655\n29163027\n34674382\n44281658\n87547341\n36994113\n64157403\n66095554\n22646995\n83227617\n34079334\n88771411\n65448072\n49507358\n55308549\n6494349\n1113286\n78072805\n14739581\n84372644\n12179653\n88824918\n55600125\n17041907\n7330696\n1887751\n71230537\n26824436\n45346352\n35394887\n7491813\n9534152\n32301563\n29296285\n21407959\n48880021\n478334\n60290092\n44695991\n6013240\n46094867\n49835079\n27257700\n7120391\n45943902\n56632177\n28424742\n21237653\n92495552\n73685474\n97375626\n79170296\n50728157\n78724422\n67431013\n54444011\n26333950\n56278439\n16162677\n59052647\n87728890\n32528911\n93553066\n21346219\n38267686\n18403003\n2147820\n24626248\n75460279\n20457775\n28476879\n20183415\n6514191\n94764409\n16733066\n69617172\n73718206\n66019360\n85307223\n58773641\n60871227\n415387\n32844660\n35417176\n66483446\n79953405\n62991926\n78989578\n16012465\n36664619\n32721000\n38839212\n72424490\n17699243\n39784238\n88574376\n63270810\n56106829\n40531613\n1537206\n73475764\n64858303",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n3639209\n8993080\n45628290\n90983057\n53566729\n51930353\n47461728\n84374621\n19787404\n96144921\n90697173\n27458895\n17342994\n48739480\n98035937\n32577384\n51070842\n14307983\n86223475\n9593628\n89753905\n43329896\n57127812\n92385637\n81986166\n82265878\n23262713\n68662161\n51997138\n67122970\n33733369\n48391192\n80862489\n33211650\n66216131\n98763812\n10158545\n91160318\n89250122\n45085234\n64150556\n73593601\n67155063\n57062744\n64891305\n93993538\n52490950\n39419297\n61879735\n79561685\n71356406\n40359927\n67830923\n13486241\n69095372\n93023707\n66768343\n55466455\n39891367\n29347950\n41689952\n98851900\n76572045\n21171530\n66991286\n42024667\n19796547\n97331309\n11451819\n17116064\n50763632\n77453814\n63599974\n37943670\n88231061\n82592689\n90827536\n92083295\n6570475\n49869705\n82784034\n52059642\n65353458\n90673824\n10447964\n90834072\n37291504\n12533863\n48189185\n87179082\n73073036\n69491350\n20875255\n95159647\n54623529\n83058008\n27897912\n63495958\n27294372\n45512691\n47777468\n7859564\n60379246\n65793740\n51733073",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "105\n84199735\n1\n100000000\n100000000\n100000000\n100000000\n24546535\n1\n1\n1\n1\n1\n1\n1\n66631427\n80358504\n4482441\n59503133\n100000000\n86631098\n99595463\n1\n51227194\n1\n1\n8131987\n100000000\n1\n1\n100000000\n1\n7930885\n1\n1\n96666808\n74133208\n1\n1\n100000000\n4433140\n100000000\n1\n100000000\n100000000\n1\n100000000\n100000000\n98068815\n100000000\n30637672\n31036063\n34029943\n65384064\n97222657\n100000000\n1\n29448185\n100000000\n93642578\n70964525\n91270690\n100000000\n100000000\n83389441\n1\n100000000\n13285914\n1\n1\n73924145\n11513983\n100000000\n12175514\n100000000\n1\n100000000\n100000000\n100000000\n34901259\n100000000\n82187231\n100000000\n100000000\n1\n67327597\n1\n38983357\n81584511\n100000000\n100000000\n100000000\n39251531\n94884566\n100000000\n100000000\n77715055\n100000000\n100000000\n75422608\n6577826\n62077378\n100000000\n100000000\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 105)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}