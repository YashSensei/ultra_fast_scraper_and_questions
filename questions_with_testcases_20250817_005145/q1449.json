{
  "problem_code": "problems",
  "title": "Morphing is Fun",
  "tags": [],
  "text": "Morphic is a tree that grows very rapidly, bringing happiness to its owner. It has a single trunk\r\nconsisting of a number of cells stacked one on top of another. Each cell has one of n possible colors\r\nwhich determine the way it mutates during the night, while nobody can see it. Florists denote these\r\ncolors by the firstnsmall letters of the English alphabet and know exactly into how many cells, and of\r\nwhat colors, a cell of each color divides. In fact, they have wrote their knowledge down simply withnnonempty words, each word representing the resulting sequence of colors.A seed of a Morphic has a single cell of color a and is rooted firmly in the ground. As long as the\r\nMorphic is still alive, each night all its cells simultaneously morph according to the aforementioned rules,\r\npossibly causing an exponential growth because each new cell is of the same size as the original one. For\r\nexample, if rules say that a becomes ab, and b becomes ca, then after two nights a seed will evolve to\r\na trunk consisting of 4 cells: abca.Therefore the top of a Morphic is usually hidden in clouds. The only way to tell if it is still alive is\r\nto check if visible part of the trunk is changing colors. In order to do so, one can build enormously high\r\n(yet still of constant height) tower, and watch from its top a fixed fragment of the trunk.As you can easily see, it is either sufficient to observe firstkcells from the bottom for some fixedk,\r\nor no matter how high the tower is, you will not be able to tell for sure if a Morphic died. The latter\r\nhappens when for everyk, rules cause thek-th cell to eventually stop changing colors, even though the\r\ntree is still alive and mutating.To prevent waste of money on building such enormous towers, you are to write a program that\r\ndetermines if it is possible to monitor health of a Morphic.InputThe input contains several Morphics descriptions. The first line contains the number of descriptionst(t≤ 10000) that follow. Each of them begins with the number of colorsn(1 ≤n≤ 26). Nextnlines\r\ncontain the rules by which the Morphic grows. The i-th one describes the sequence of colors in bottom-up\r\norder obtained from a single cell of i-th color. Each line contains at most 100 lowercase English letters.OutputFor each test case output one line containing YES if building of a tower is pointless (as in: YES, we can\r\nsave money!). Otherwise output NO.ExampleInput:4\r\n2\r\nab\r\na\r\n3\r\nba\r\nc\r\nc\r\n3\r\nba\r\nc\r\nb\r\n3\r\nbbbbbbbbbbbbbbb\r\nccccccccccccccc\r\ncOutput:YES\r\nYES\r\nNO\r\nYESWarning: enormous input/output data, be careful with certain languages",
  "sample_input": "Input:4\r\n2\r\nab\r\na\r\n3\r\nba\r\nc\r\nc\r\n3\r\nba\r\nc\r\nb\r\n3\r\nbbbbbbbbbbbbbbb\r\nccccccccccccccc\r\ncOutput:YES\r\nYES\r\nNO\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MORPH",
  "scraped_at": "2025-08-17 00:33:58",
  "test_cases": [
    {
      "input": "4\r\n2\r\nab\r\na\r\n3\r\nba\r\nc\r\nc\r\n3\r\nba\r\nc\r\nb\r\n3\r\nbbbbbbbbbbbbbbb\r\nccccccccccccccc\r\nc",
      "expected_output": "YES\r\nYES\r\nNO\r\nYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n5\n4",
      "expected_output": "0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n8\n2\n8",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "15\n94205985\n71420281\n70387864\n61859342\n70388747\n46937384\n15917676\n800300\n92051401\n91948750\n66931093\n88006698\n56571843\n83024837\n80015678",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n98882882\n53181732\n85483978\n12995527\n71778234\n10132286\n30680722\n58939514\n30495094\n35058404\n33794665\n99621802\n4664049\n21903652\n81941047\n74679555\n55091105\n74589761\n32535000\n42689912",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n42936861\n50773939\n56352604\n7270969\n88561939\n75649731\n57516457\n89621747",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n67175956\n77339314\n78035395\n76814615\n42857455\n88616144\n29885694\n26695513\n13720221\n82028631\n81043940\n93269722\n61193943\n27667353\n58882352\n87164241\n27986180\n36753135\n35260100",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n92563406\n11651767\n17569270\n98223700\n35143304",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "23\n52561\n10085\n91151\n27114\n41562\n99471\n67610\n98777\n10639\n4003\n73343\n43451\n72160\n89953\n61118\n43107\n82991\n29390\n49485\n67406\n22926\n39534\n42610",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n63676\n68789\n105\n92203\n70189\n22439\n41621\n96612\n27495\n55671\n68795\n65060\n55299\n65725\n72178\n43781\n24401\n98210\n90401\n91387\n30445\n97275",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n30997\n48750\n84322\n91703\n63207\n16952\n48128\n68686\n37963\n85148\n7314\n41918\n81933\n38333\n80064\n14462\n89049\n28275\n40670\n99096\n28126",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n97592\n32419\n59583\n47778\n80467\n78043\n12065\n97669\n39312\n86557\n7475\n4202\n37333\n47181\n70008\n72273\n85909\n90289\n27170\n85464\n44485\n1594\n15978",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n43218\n69313\n55378\n44088\n59636\n2676\n75959\n42492\n96573\n19273\n76724\n50236\n90135\n37199\n70558\n54442\n33573\n20955\n40046\n72360\n38062",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n62231\n68480\n48778\n81851\n75096\n3530\n67553\n31618\n57537\n37642\n79730\n33387\n91532\n58060\n79361\n8117\n61624\n91502\n39977\n60351",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n63766\n90633\n2694\n17681\n37969\n45613\n24771\n93119\n40256\n65166\n70440\n17087\n51191\n22651\n56649\n7605\n74400\n12316\n27948\n87976\n16701",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n32522966\n62993026\n44852839\n8982720\n20097523\n17197743\n21937600\n42362349\n65288695\n11393518\n4632688\n41880498\n38469042\n14741747\n68332546\n66311605\n23893910\n24343630\n87408212\n24394034\n72943862\n63790736\n49226120\n3376890\n58430060\n80425167",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 26)"
    },
    {
      "input": "26\n62811457\n43654185\n86357740\n13741453\n66150743\n74482817\n16402960\n37548781\n70559610\n59953627\n1298349\n59822566\n62186604\n48778799\n19996563\n627104\n67956646\n61414858\n16601309\n33744154\n89520592\n48213830\n48780346\n62422160\n54927180\n75575728",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 26)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n77250473\n100000000",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}