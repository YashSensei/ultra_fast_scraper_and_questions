{
  "problem_code": "problems",
  "title": "Balanced Diet",
  "tags": [],
  "text": "Every day, Danny buys one sweet from the candy store and     eats it. The store has $m$     types of sweets, numbered from      $1$ to      $m$. Danny knows that a balanced diet     is important and is applying this concept to his sweet     purchasing. To each sweet type      $i$, he has assigned atarget     fraction, which is a real number      $f_ i$ (     $0 < f_ i \\le 1$). He wants the     fraction of sweets of type      $i$ among all sweets he has eaten to     be roughly equal to $f_     i$. To be more precise, let      $s_ i$ denote the number of sweets of     type $i$ that Danny has     eaten, and let $n = \\sum _{i=1}^     m s_ i$. We say the set of sweets isbalancedif for every $i$ we     have\\[ n f_ i - 1 < s_ i     < n f_ i + 1. \\]Danny has been buying and eating sweets for a while and     during this entire time the set of sweets has been balanced. He     is now wondering how many more sweets he can buy while still     fulfilling this condition. Given the target fractions     $f_ i$ and the sequence of     sweets he has eaten so far, determine how many more sweets he     can buy and eat so that at any time the set of sweets is     balanced.InputThe input consists of multiple test cases. Please process until EOF is reached.Each test case consists of three lines. The first line contains     two integers $m$     ($1 \\le m \\le 10^5$),     which is the number of types of sweets, and      $k$ ($0     \\le k \\le 10^5$), which is the number of sweets Danny     has already eaten.The second line contains      $m$ positive integers      $a_1, \\ldots , a_ m$. These numbers     are proportional to $f_1, \\ldots     , f_ m$, that is,      $\\displaystyle f_ i = \\frac{a_ i}{\\sum _{j =     1}^ m a_ j}$. It is guaranteed that the sum of all     $a_ j$ is no larger than     $10^5$.The third line contains      $k$ integers      $b_1, \\ldots , b_ k$ (     $1 \\le b_ i \\le m$), where each     $b_ i$ denotes the type of     sweet Danny bought and ate on the      $i^\\text {th}$ day. It is guaranteed     that every prefix of this sequence (including the whole     sequence) is balanced.OutputFor each test case, display the maximum number of additional sweets that Danny     can buy and eat while keeping his diet continuously balanced.     If there is no upper limit on the number of sweets, display the     wordforever.ExampleInput:6 5\r\n2 1 6 3 5 3\r\n1 2 5 3 5\r\n6 4\r\n2 1 6 3 5 3\r\n1 2 5 3Output:1\r\nforever",
  "sample_input": "Input:6 5\r\n2 1 6 3 5 3\r\n1 2 5 3 5\r\n6 4\r\n2 1 6 3 5 3\r\n1 2 5 3Output:1\r\nforever",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FN16DIET",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "6 5\r\n2 1 6 3 5 3\r\n1 2 5 3 5\r\n6 4\r\n2 1 6 3 5 3\r\n1 2 5 3",
      "expected_output": "1\r\nforever",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3\n9 2 5 4 7 7\n1 6 2 4 4\n3 8\n1 6 5 5 4 8\n8 10 3 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n6 1 9 3 4 10\n3 10 3 4 1\n1 4\n8 7 1 5 5 6\n10 8 9 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\n5 1 4 9 4 9\n3 7 5 6 3\n3 6\n6 7 1 9 8 8\n6 3 1 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "37 28\n83 29 84 72 42 11\n78 46 87 28 52\n62 78\n88 37 82 37 41 30\n55 58 3 71",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 66\n50 73 10 78 87 89\n32 4 45 86 44\n35 98\n13 61 83 26 83 4\n73 86 13 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 68\n63 99 78 67 47 41\n61 15 4 46 39\n36 98\n2 80 99 1 38 70\n38 32 3 34",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 55\n18 47 5 2 88 8\n70 53 100 66 86\n70 54\n77 25 60 81 86 41\n32 89 12 33",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "20 84\n29 92 41 61 28 47\n64 20 18 69 90\n65 42\n5 73 24 45 52 33\n55 47 99 67",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "130 315\n109 376 129 436 421 300\n254 306 463 401 388\n402 320\n80 430 105 87 271 103\n428 414 450 176",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "234 225\n425 169 208 469 272 60\n298 458 414 165 477\n144 474\n310 391 291 309 413 160\n343 300 179 462",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "132 91\n385 166 189 110 190 417\n236 386 113 348 239\n160 133\n174 392 347 340 167 195\n346 430 470 200",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "149 86\n365 302 492 470 114 116\n323 426 409 390 218\n458 276\n485 302 209 184 224 230\n484 92 282 243",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "483 236\n357 149 331 367 105 397\n188 390 108 232 336\n386 160\n330 229 308 102 349 486\n391 422 61 164",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "395 114\n352 465 234 62 269 51\n409 429 152 96 131\n309 275\n317 441 275 433 475 489\n105 199 356 317",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "115 141\n163 326 192 211 163 496\n198 96 263 152 331\n118 354\n50 177 257 70 460 495\n136 371 429 434",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n999 999 2 1 2 2\n999 999 1 999 999\n2 1\n1000 1000 1000 999 1000 999\n1000 1000 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n999 1 1 1 1000 1\n2 1 999 2 999\n2 1000\n1 999 999 1000 999 1000\n999 1 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}