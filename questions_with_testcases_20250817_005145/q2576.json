{
  "problem_code": "problems",
  "title": "LL and ErBao",
  "tags": [],
  "text": "When LL and ErBao were young, they liked jumping rubber-rope (Tiao Pi Jin) very much. They jumped every day happily. But one day HH came and brought away the peaceful days. HH sometimes threw stones to them, and sometimes pushed them down suddenly. Seeing ErBao crying sadly, LL got angry finally, and decided to give HH some color see see.There were n trees on the ground (regarded as points), and LL planed to use his rubber-rope to wrap all the trees and form a big circle, then fooled HH into it and threw stones to him. Before finding out how to fool HH into the circle, LL wants to know how big the rubber-rope circle would be, say, the perimeter.But LL found it difficult than expected, because their playing territory and the trees were in a bigger fence (a simple polygon with m vertices). So, the rubber-rope mustn’t be out of the fence either. It’s your turn to help LL find the perimeter of the circle.Sample 1Sample 2InputThe input contains multiple cases terminated with EOF.For each case, first line contains two integers: m, n. (3 ≤ m ≤ 500, 0 ≤ n ≤ 500)Next m lines each contain two integers: Xfi, Yfi – coordinate of the fence’s ith vertex, in Counterclockwise order.Next n lines each contain two integers: Xti, Yti – coordinate of the ith tree.It is guaranteed that all trees were strictly in the fence, and the fence doesn’t intersect or touch itself. The absolute value of the coordinates doesn’t exceed 10000.OutputFor each case output the perimeter of the rubber-band with three digits after the dot.ExampleInput:8 20 030 030 2020 2020 1010 1010 200 205 1525 1512 55 55 20-5 20-5 5-20 5-20 -5-5 -5-5 -205 -205 -520 -520 50 00 170 -1717 0-17 0Output:Case #1: 48.284Case #2: 104.000",
  "sample_input": "Input:8 20 030 030 2020 2020 1010 1010 200 205 1525 1512 55 55 20-5 20-5 5-20 5-20 -5-5 -5-5 -205 -205 -520 -520 50 00 170 -1717 0-17 0Output:Case #1: 48.284Case #2: 104.000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ISUN1",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "8 20 030 030 2020 2020 1010 1010 200 205 1525 1512 55 55 20-5 20-5 5-20 5-20 -5-5 -5-5 -205 -205 -520 -520 50 00 170 -1717 0-17 0",
      "expected_output": "Case #1: 48.284Case #2: 104.000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 3 5 6 5 3 3 6 1 3 8 2 5 3 6 7 5 1 1 9 2 6 4 8 8 7 9 3 4 10 8 6 9 5 10 10 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 3 1 8 7 3 3 6 8 3 9 6 3 6 4 2 9 7 8 7 6 2 5 2 6 6 2 4 4 2 2 5 2 2 10 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1 9 4 2 3 4 5 1 5 3 2 8 10 9 7 8 7 1 7 7 2 8 5 6 5 10 3 7 1 4 3 8 10 4 1 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 71 70 78 53 40 7 46 77 51 68 39 8 65 85 22 41 36 95 87 37 9 58 95 11 43 86 73 88 36 89 3 98 64 74 11 60",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "14 76 13 92 23 84 94 44 37 76 76 50 21 3 55 5 23 82 22 37 30 49 96 1 34 70 81 5 14 88 78 71 6 56 99 45 100",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "74 51 66 75 5 15 93 25 87 15 13 39 72 98 45 75 81 50 17 65 70 6 93 72 4 79 64 29 93 83 70 45 92 90 24 36 11",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 89 16 3 5 16 86 12 23 60 46 30 69 32 86 73 19 99 65 80 96 65 88 73 33 21 25 18 44 35 1 96 83 3 30 17 56",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 8 65 66 95 15 75 11 67 96 60 5 76 62 81 44 10 74 60 19 4 2 86 44 49 4 44 83 70 75 40 49 91 41 8 76 36",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "175 152 174 239 91 186 43 64 135 60 72 113 246 108 76 145 75 28 30 220 201 158 215 193 245 148 153 183 41 34 226 176 206 147 27 240 71",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "53 217 58 106 227 164 36 89 250 46 248 146 154 113 76 99 111 148 159 149 202 145 125 236 58 240 181 152 55 190 160 46 136 43 175 189 62",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "202 118 208 172 177 139 85 80 208 28 128 143 170 80 108 71 197 247 163 144 108 134 126 245 217 191 178 81 159 103 44 69 63 219 243 110 218",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "61 135 154 34 202 172 213 232 55 139 110 194 77 73 208 195 228 64 58 101 198 197 117 220 119 170 139 105 82 212 244 94 96 64 86 142 102",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "67 66 184 108 102 187 75 42 142 191 228 33 29 165 150 119 121 187 58 37 119 161 207 230 196 114 214 217 115 182 147 179 212 100 42 133 26",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "228 165 187 78 41 137 35 46 117 207 179 217 107 76 105 192 240 164 207 221 46 143 93 219 177 214 143 139 47 250 240 134 30 176 60 137 38",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "242 54 170 149 48 176 102 88 109 65 117 103 191 79 225 90 236 186 171 70 70 37 80 65 163 203 42 83 149 244 152 33 87 72 131 240 225",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "499 499 500 1 499 500 1 500 499 1 500 500 499 1 1 499 1 500 1 1 499 2 500 1 2 1 1 2 1 2 499 500 1 499 499 1 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2 499 2 499 1 1 1 1 500 500 499 500 500 499 499 2 2 1 500 2 1 500 500 499 500 500 500 2 500 1 1 1 499 499 499",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:39"
}