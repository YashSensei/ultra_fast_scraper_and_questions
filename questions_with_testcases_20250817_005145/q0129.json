{
  "problem_code": "problems",
  "title": "Life Game",
  "tags": [],
  "text": "Gobo and Muku were really bored of working and decided to play a game on their respective laptops - the game of life. It is a one player game which consists of an M*N rectangular grid. Each cell of the grid contains exactly one magical potion. The potion at the jthcolumn of the ithrow of the grid increases the player's current health by Vij.(This value can be negative, in which case the player's health decreases). At any point of time, the health of a player can be negative too (i.e. He does not die). From a cell(i, j), the player can move to cells (i + 1, j - 1) or (i + 1, j) or (i + 1, j + 1), as long as these cells exist in the grid. Initially, the player has a health of 0. He can start from any column on the first row (1, j). If he chooses to enter a cell, then he is forced to drink the potion in that cell. The game is completed when any column of the last row is reached. There are 2 modes in which the game can be played: the \"min\" mode and the \"max\" mode. In \"max\" mode, the aim is to finish the game with maximum health Hmaxsatisfying the condition A  ≤  Hmax≤  B. Similarly, in \"min\" mode the aim is finish the game with minimum health Hmin, satisfying the conditions A  ≤  Hmin≤  B. Now, Gobo decides to play the game in \"max\" mode on his laptop, and Muku decides to play the game in \"min\" mode on his laptop. Can you help Gobo and Muku finish with maximum and minimum health respectively, satisfying the above conditions?InputThe first line of input contains an integer 't', denoting the number of test cases.For each test case, the first line contains 2 space separated integers 'M' and 'N'. The next line contains 2 space separated integers 'A' and 'B'. Each of the next 'M' lines contain 'N' integers. The jthinteger on the ithline denotes the value Vij.OutputOutput 2 space separated integers Hminand Hmax, the minimum and maximum health with which Gobo and Muku can finish the game. Hmaxand Hminshould satisfy A  ≤  Hmax, Hmin≤  B. If it is not possible to achieve such a health, output \"NO\" (quotes for clarity).Gobo and Muku start playing on 2 different instances of the same game independently. i.e. the values of A, B and initial values of Vijare same for both grids.ExampleInput:2\r\n3 3\r\n5 10\r\n2 5 10\r\n-1 -10 3\r\n-3 6 -2\r\n2 3\r\n8 11\r\n2 5 10\r\n-1 -10 2Output:6 10\r\nNO NOConstraintst ≤ 101 ≤ M, N ≤ 25-1000  ≤  A  ≤  B < 1000-25 ≤ Vij≤  25ExplanationTest case 1: Take the path (1, 2) → (2, 1) → (3, 2), to get a value 5 - 1 + 6 = 10. Take the path (1, 2) → (2, 3) → (3, 3), to get a value 5 + 3 - 2 = 6.Test case 2: There is no valid path which satisfies the above conditions.",
  "sample_input": "Input:2\r\n3 3\r\n5 10\r\n2 5 10\r\n-1 -10 3\r\n-3 6 -2\r\n2 3\r\n8 11\r\n2 5 10\r\n-1 -10 2Output:6 10\r\nNO NO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BTCODE_F",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "2\r\n3 3\r\n5 10\r\n2 5 10\r\n-1 -10 3\r\n-3 6 -2\r\n2 3\r\n8 11\r\n2 5 10\r\n-1 -10 2",
      "expected_output": "6 10\r\nNO NO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n10\n10\n2\n10\n4",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n7\n5\n6",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n64164024\n31831151\n67507779\n52047709\n21265575\n51736265\n82765048\n24812964\n76235122\n44936551\n42611231\n46156474\n61554933\n49572436\n39433922\n92050357\n31329794\n74325034\n97404683\n20272658",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n56686921\n62461508\n23036356\n4176667\n58916157\n30758302\n46855241\n79282834\n62632160\n12313501\n20270917\n44773096\n63565964\n68613766\n78551166\n35225216\n26764765\n48104306\n96119496",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n23246984\n26249246\n91816585\n84525353\n44166767\n57354516\n8672521\n28060757\n98144135\n9374158",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n56121738\n2060298\n45985494\n85673128\n57279657\n49122917\n55291434\n81271276\n28102281\n30030040\n81111003\n4764425",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n42236086\n39794911\n47846505\n98860320\n38349007\n38564317\n87976612\n99828787\n25656202\n26781595\n32011198\n92130002\n26687054\n74784939\n89495241\n3315585",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "22\n55351\n82229\n89909\n53885\n50396\n64375\n71770\n1069\n3245\n68247\n6939\n67681\n40929\n67171\n69562\n53076\n29216\n69129\n86527\n27872\n13532\n74571",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n96945\n36717\n83886\n700\n62835\n13310\n68322\n25588\n1076\n7925\n89092\n80272\n21654\n44559\n8180\n45401\n29866\n93356\n40815\n72829",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n36287\n45325\n84669\n62802\n29668\n88209\n10267\n42257\n6822\n77888\n24592\n36977\n94516\n18605\n91505\n62116\n7730\n32627\n59328\n95821\n43587\n23287\n45873",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n13097\n58703\n98153\n69024\n14287\n33091\n13493\n86096\n42337\n19315\n75880\n57631\n92531\n83694\n52772\n88219\n10415\n26606\n14188\n85666\n60596\n87465\n92997",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n68616\n5476\n51497\n83104\n59086\n4507\n11935\n29118\n87360\n8427\n49624\n3261\n55377\n51835\n96210\n42256\n129\n61191\n66923\n16918\n15712",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n69544\n79095\n82983\n33813\n62242\n45801\n67629\n33189\n40949\n72115\n9963\n67581\n97678\n78414\n57286\n97527\n64517\n12502\n91657\n34526\n25439\n82444\n63651\n91765",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n86899\n96895\n17687\n4102\n41174\n64972\n52500\n20026\n34944\n25160\n79031\n46283\n57043\n27895\n52159\n27598\n1334\n62024\n96356\n92827\n48225",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n36512167\n75103384\n80043441\n40595205\n27549085\n4880877\n60792310\n5316069\n90815471\n6692420\n74325704\n55933110\n69264637\n93293618\n22555395\n83369329\n86633959\n60818592\n47272113\n80942325\n71895947\n54159869\n31429937\n52673796\n89113555",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "25\n4735638\n61095667\n28262063\n22062241\n34019289\n33567379\n32894234\n83768936\n88697968\n545260\n19680111\n53697553\n30282067\n80391691\n88076769\n80953543\n97380055\n74796668\n20977061\n63695510\n94263276\n71768529\n96090816\n52799570\n64616541",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "0\n0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "2\n82127533\n79247309",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:23"
}