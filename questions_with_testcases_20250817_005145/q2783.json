{
  "problem_code": "problems",
  "title": "What Really Happened on Mars?",
  "tags": [],
  "text": "Real-time software in the Mars Pathfinder spacecraft     suffered from an issue known as priority inversion. One     technique to address this issue is to use the Priority Ceiling     Protocol.In this problem, you will simulate the execution of multiple     tasks according to this protocol. The tasks share a collection     of resources, each of which can be used by only one task at a     time. To ensure this, resources must be locked before use and     unlocked after use. Each task is defined by a start time, a     uniquebase priority, and a sequence of instructions.     Each task also has acurrent priority, which may     change during execution. Instructions come in three types:compute– perform a computation for         one microsecondlock $k$–         lock resource $k$         (which takes no processor time)unlock $k$– unlock resource $k$         (which takes no processor time)After locking a resource, a task is said toownthe     resource until the task unlocks it. A task will unlock only the     owned resource it most recently locked, will not lock a     resource it already owns, and will complete with no owned     resources.Each resource has a fixedpriority ceiling, which     is the highest base priority of any task that contains an     instruction to lock that resource.There is a single processor that executes the tasks. When     the processor starts, it initializes its clock to zero and then     runs an infinite loop with the following steps:Step 1.Identifyrunningtasks. A task is running if         its start time is less than or equal to the current         processor clock and not all of its instructions have been         executed.Step 2.Determine the current priorities of the running tasks         and which of the running tasks areblocked. A         running task $T$ is         blocked if the next instruction in          $T$ is to lock         resource $k$ and         either resource          $k$ is already owned or at least         one other task owns a resource          $\\ell $ whose priority ceiling is         greater than or equal to the current priority of         $T$. If          $T$ is blocked, it is said to be         blocked by every task owning such          $k$ or          $\\ell $. The current priority of a         task $T$ is the         maximum of $T$’s base         priority and the current priorities of all tasks that         $T$ blocks.Step 3.Execute the next instruction of the non-blocked running         task (if any) with the highest current priority. If there         was no such task or if a compute instruction was executed,         increment the processor clock by one microsecond. If a         lock or unlock instruction was executed, do not increment         the clock.The Priority Ceiling Protocol defined above has the     following properties:Current priority is defined in terms of current priority         and blocking, and blocking is defined in terms of current         priority. While this may appear circular, there will always         be a unique set of current priorities that satisfy the         definitions.All tasks will eventually complete.There will never be a tie in step 3.InputMultiple test cases. Please process until EOF is reached. For each test case:The first line of the input contains two integers     $t$      $(1 \\leq t \\leq 20)$, which is the     number of tasks, and $r$     ($1 \\leq r \\leq 20$),     which is the number of resources. This is followed by     $t$ lines, where the     $i^\\text {th}$ of these     lines describes task $i$.     The description of a task begins with three integers: the     task’s start time $s$     ($1 \\leq s \\leq 10\\,     000$), its base priority      $b$ ($1     \\leq b \\leq t$), and an integer      $a$ ($1     \\leq a \\leq 100$). A task description is concluded by a     sequence of $a$ strings     describing the instructions. Each string is a letter     (CorLorU) followed by an integer. The stringC$n$ ($1     \\leq n \\leq 100$) indicates a sequence of      $n$ compute instructions. The stringsL$k$ andU$k$     ($1 \\leq k \\leq r$)     indicate instructions locking and unlocking resource     $k$ respectively.No two tasks have the same base priority.OutputFor each test case:For each task, display the time it completes execution, in     the same order that the tasks are given in the input.ExampleInput:3 1\r\n50 2 5 C1 L1 C1 U1 C1\r\n1 1 5 C1 L1 C100 U1 C1\r\n70 3 1 C1\r\n3 3\r\n5 3 5 C1 L1 C1 U1 C1\r\n3 2 9 C1 L2 C1 L3 C1 U3 C1 U2 C1\r\n1 1 9 C1 L3 C3 L2 C1 U2 C1 U3 C1Output:106\r\n107\r\n71\r\n8\r\n15\r\n16",
  "sample_input": "Input:3 1\r\n50 2 5 C1 L1 C1 U1 C1\r\n1 1 5 C1 L1 C100 U1 C1\r\n70 3 1 C1\r\n3 3\r\n5 3 5 C1 L1 C1 U1 C1\r\n3 2 9 C1 L2 C1 L3 C1 U3 C1 U2 C1\r\n1 1 9 C1 L3 C3 L2 C1 U2 C1 U3 C1Output:106\r\n107\r\n71\r\n8\r\n15\r\n16",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FN16MARS",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "3 1\r\n50 2 5 C1 L1 C1 U1 C1\r\n1 1 5 C1 L1 C100 U1 C1\r\n70 3 1 C1\r\n3 3\r\n5 3 5 C1 L1 C1 U1 C1\r\n3 2 9 C1 L2 C1 L3 C1 U3 C1 U2 C1\r\n1 1 9 C1 L3 C3 L2 C1 U2 C1 U3 C1",
      "expected_output": "106\r\n107\r\n71\r\n8\r\n15\r\n16",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8\n2 4 7 10 9 9 8 10\n1 9 1 r wo h gu eq\n5 2 6 5 7 5 10 6\n5 5 9 ysk qxti mcdo nmue vxzy\n1 5 6 3\n6 7 5 gjxm\n5 2\n2 10 7 8 3 5 7 10\n4 1 8 aoa syf l n tjmh\n10 1 7 6 10 6 4 1 10 4 7 8\n3 9 6 fexw enyc mt prdkd tpvdf v uga vv vucz\n6 7 8 9 9 8 5 1 10 5 6 8\n9 3 9 qsz vwx jwpyq fg ho el x g bayzh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n3 9 1 7 9 4 3 1\n3 4 10 o t p bu hyke\n8 9 3 3 4 6 7 6\n8 7 9 eus xyk ok fqx ycq\n8 5 9 2\n6 6 7 iz\n9 6\n4 2 4 9 3 3 5 10\n2 1 6 ipqr jrhew bqpmp usngu jd\n10 6 4 1 1 4 6 8 10 6 3 1\n9 8 6 apyk l p c yhet ukdc lcm zl jopi\n10 3 4 7 9 5 6 2 1 4 7 5\n9 2 1 i ur tdmt kr lsv vx ik i sb",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n1 1 4 10 8 9 9 9\n4 3 2 eo m krogp lvh jzz\n10 5 6 9 7 7 9 10\n8 9 8 uaihk oj ckmh mnjy tsbf\n7 9 10 7\n9 8 3 wqzdy\n10 3\n5 4 8 3 7 6 3 7\n3 9 6 hvluz qqvv gymlz vykw dtygt\n6 8 3 10 6 1 7 1 8 7 3 1\n1 8 5 wtkz kwxep gc c ywe alx bseqx deup a\n3 6 9 5 2 3 9 5 4 8 8 4\n6 9 8 v pwg f v ufde hrkz svstj ztbwi rmh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 90\n92 26 47 60 81 80 43 56\n20 43 9 vbdzu qgvk f kbt ibiro\n29 99 39 100 76 62 96 80\n70 14 62 q mhqpb ybcl fpqn gec\n21 88 93 68\n42 17 44 xl\n80 73\n24 67 20 40 59 41 68 98\n38 63 13 kysd zz qooun qt gykz\n19 65 65 87 98 4 58 79 78 58 98 79\n76 34 25 grps jtvl rfvt r n xh wscgk qkouc zr\n50 46 24 87 59 70 74 82 27 75 44 10\n87 87 60 lfnwn tly jo giyj dlgxw fuax zkz xfcvb aniy",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 70\n12 2 92 31 24 84 44 49\n50 40 91 kejsp njn q t k\n11 69 18 15 11 19 64 99\n84 67 66 ok srhw dqgp uvj gwnta\n42 3 65 54\n30 36 76 ig\n56 50\n76 64 55 61 92 62 83 99\n50 77 54 aav kql gaytr t hv\n99 17 11 73 15 4 9 12 79 44 53 82\n58 15 84 rbo dg gpd r cxtkq l q qdd pyise\n50 18 90 78 90 13 68 95 34 100 17 20\n38 24 44 n v l jx ochu dd zyhpz nqk xset",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "85 94\n58 57 25 11 71 76 45 23\n57 80 21 aiodl ve fz rps ka\n59 75 15 88 94 90 67 91\n79 87 29 i kcfi pxzza jkv ynq\n26 25 40 34\n92 1 1 gi\n69 60\n74 65 73 53 3 52 75 49\n53 49 6 pzrgh qs byz vfu epkt\n56 87 84 100 31 30 56 74 33 82 45 33\n62 69 88 refs hizg myfj n hykip urdos fsw oyfea wy\n65 40 9 47 63 70 6 91 12 43 20 56\n96 32 33 kwq cwhz g bhfhv rzdn gozuy odk emoye c",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "28 39\n27 31 28 23 79 62 67 99\n77 86 49 zao vuvle itrrz vmxw zt\n100 38 85 3 77 68 66 23\n95 50 31 fvh x rnu cxi nlp\n97 28 60 99\n2 49 26 hxuky\n69 81\n48 13 50 49 70 28 21 32\n17 61 44 hei kavn gxj ids sh\n52 15 87 21 88 77 82 75 15 18 88 77\n100 39 60 rmeh bujxh b uqb ld r z fp idxw\n73 71 72 63 20 97 81 34 28 49 16 100\n61 21 54 zu nkcd qxtfi lej hvc mhl bth ogsi istc",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "97 73\n35 100 57 24 82 63 4 87\n30 97 56 j tr thxx bprq wpa\n26 36 27 95 92 27 90 63\n24 12 73 cgof asoxq yxhjx zo ompr\n84 73 1 47\n37 79 44 dv\n78 60\n71 33 46 84 86 67 20 47\n73 58 1 b aqmxi gphl ykrkv ot\n52 77 23 55 31 33 88 91 86 2 31 40\n27 39 67 unz qpyot jzqi jz rt esy smaq ed onjrk\n72 62 89 1 71 17 75 38 89 79 99 68\n68 93 55 twe uzegm ytith asj b zibt jq ppdvv gpvx",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "226 375\n384 391 222 190 493 69 232 214\n395 317 425 r pdbbn t q udq\n82 379 233 344 305 463 420 242\n189 264 181 raj uqvyr v ypy yfnp\n333 73 282 90\n236 354 158 hifw\n130 203\n78 330 440 458 272 488 186 174\n244 435 68 xzy mv ryqj nawb ezqdq\n278 361 480 467 63 442 349 453 436 230 286 110\n378 211 370 uyplg vcx xx ei e ib r egfh kb\n407 179 325 205 307 313 66 247 62 377 159 114\n126 168 265 aj idxs bshvc kip rrm kabxs ooo bw iyy",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "203 328\n417 61 425 316 365 485 254 115\n485 388 456 s e vmwf uam qr\n245 445 445 391 92 474 280 215\n497 465 65 l omx jm ern slwn\n144 432 319 422\n405 361 273 oqmfs\n473 226\n473 78 284 284 346 367 411 97\n316 283 270 qzqra svlv bz fstl q\n213 310 241 113 133 158 392 478 275 491 253 339\n476 374 214 icz vcvdj egkm dhtll sfml gqi kmeui xqujo qfr\n426 222 241 401 137 462 66 355 464 320 445 353\n341 50 365 fm ul qrbg kw nj r owuc ntx gu",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "81 361\n322 53 176 182 480 388 183 366\n91 77 72 nh swvvk tgubk pam ag\n346 136 393 350 381 125 158 195\n51 318 385 abxo kfcma dbc c p\n300 132 226 227\n88 72 270 wjklp\n96 121\n155 154 314 303 458 198 475 370\n119 282 107 ylf dw met ojkut tnga\n368 397 113 361 409 162 287 55 312 123 109 257\n290 468 293 ksjno q coco xf z gsmap crnhi vfb dlerq\n61 468 408 412 116 297 208 322 362 109 484 467\n414 499 53 rhuts zye grvw rahh x opqsn wb m q",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "302 302\n256 307 163 335 320 234 232 402\n73 420 395 zbq lknq lvntq s dusj\n399 313 131 154 242 408 322 500\n187 157 115 cpyab ne npfdp loo z\n287 283 174 228\n398 441 101 hwf\n256 225\n76 255 110 497 280 276 301 171\n149 187 406 fnuk rwz yneq wszu u\n378 266 51 261 129 127 294 423 223 62 273 72\n415 279 157 pn tv fsuz hkhi itte a m zyl wgn\n226 433 120 278 452 226 444 298 290 193 491 367\n268 351 262 mp hhu uz gjpfd w ed bvrlz zi hr",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "457 246\n380 232 303 181 103 108 154 359\n229 96 271 pgw agy yy tf z\n476 108 439 452 390 143 195 463\n132 424 146 or cam l x alkur\n329 169 328 199\n87 349 367 exca\n456 310\n94 171 192 173 264 63 312 492\n150 402 427 av p swg we bvlin\n275 496 352 385 498 120 464 69 109 92 180 81\n284 226 466 ou vno nb llrn bb hzqzb unbg db f\n78 102 64 156 63 407 160 372 227 445 162 317\n87 121 82 cbp a t w ub icaui knpk rfau iw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "188 175\n149 68 245 140 294 239 254 379\n138 286 431 ki j mylq uv lywy\n265 451 275 438 174 150 219 228\n231 255 171 pofsy yn ozi mgn gk\n176 313 484 464\n229 73 258 yajv\n301 172\n320 457 322 347 250 364 108 139\n102 241 96 e mv bj sh hv\n371 83 434 450 321 245 221 231 342 196 461 339\n78 330 94 sdbnb pma qqrb a zmcf szc vab owj j\n231 126 174 120 208 61 163 451 382 50 458 202\n106 279 280 viq yk kpkm ct rgthm m imb la qjeul",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "78 192\n410 481 414 62 228 315 328 119\n470 370 446 pbpfi tnzcf tgcue sivd av\n390 455 476 269 488 147 459 487\n151 373 194 yj oe hil vua gte\n86 92 254 55\n198 146 466 ii\n144 116\n169 321 101 488 203 380 270 114\n493 279 93 p o ub lv jeyg\n261 462 421 317 114 345 276 300 427 327 172 146\n179 384 475 vpxn bg sn zlgln i s dmq cq dth\n169 409 342 134 448 437 431 237 413 208 472 223\n139 142 219 wmgkb lyktq uv puh ycgr wsbpd pdvgf ijeql bbyej",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 vp kz dqyxr fa bwjty\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 urh nys lvv bz gg\n1000 1000 1000 1000\n1000 1000 1000 uqc\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 zp hiklc f ojlts qkne\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 ek kq ddiqc qwo x m gkov yoinn lrwfv\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 szz if z uaefm oi steao x ey naw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 x qm wu g ha\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 zbzb c gkqdr rbvwy xhh\n1000 1000 1000 1000\n1000 1000 1000 dccv\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 ribe cubni f v wt\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 ok xibyp kvgi kdwxo wiqet dozvd r m qox\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 uyop wb jczpt ds gri s yysu w jttoq",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 1 999 1 2 999 999 1000\n1000 2 1 uea jv sxllc xtds g\n999 999 999 1 1000 1000 2 2\n1 999 2 c xlyn yiu j gjdvo\n1 999 1000 999\n2 999 999 buc\n2 1\n1 2 1000 1000 2 999 1 1\n1000 1000 2 wyx rl vft alobk lzdx\n1 999 1 999 999 2 2 2 1 2 2 2\n1000 2 1000 m os htngv lhsu kb hx quqzu joy psa\n1 2 1000 1000 2 2 2 2 1 2 1 2\n2 999 999 w ebiwj nv qzunt zfh qgxne wand cekrh sgt",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 1000 2 1 999 999 999 1000\n999 1000 999 dkao xwp f yrn kxs\n1 999 1000 2 1000 2 1000 1\n999 2 999 pnj uvwmi aq gvzvg wk\n1 999 999 1000\n2 1000 1 u\n2 2\n2 2 1 2 1 999 1000 1000\n999 2 999 bwgmu kwit csypq ml jq\n1000 999 1 1000 999 2 1000 1000 2 1 1000 1000\n1000 999 999 ifuq pngv lzbsi ye hnvhz lvrxh jkt ar q\n2 1 999 999 1000 1 999 1000 1 999 2 999\n2 1 1 hilee s p cf zx qsh dvly w uai",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:46"
}