{
  "problem_code": "problems",
  "title": "MAJMUN",
  "tags": [],
  "text": "EnglishVietnameseComing home after a hard day at school, Ivica is ready to relax playing the computer game \"Monkey & Banana\". In the game, the monkey is located in a jungle, modeled as a coordinate plane. Every point with integer coordinates represents a tree. The monkey is initially located at tree (XM, YM) facing up i.e. towards the tree (XM, YM +1).The monkey is controlled with the keys 0 to 7. When the key K is pressed, the monkey turns 45 degrees left K times and then jumps to the first tree he sees in his new direction.The game lasts until the monkey jumps exactly N times. After that, the score is calculated from the distance between the monkey and the banana tree, which is located at coordinates (XB ,YB). The lower the distance, the bigger the score. Ivica played one game and is now interested if he could have done better changing at most one key press. Write a program that determines the smallest possible ending (Euclidean) distance between the monkey and the banana tree (it is possible that the current score cannot be improved).InputThe first line of input contains our integers XM, YM, XB and YB (0 ≤ XM, YM, XB, YB ≤ 1 000 000), the initial coordinates of the monkey and the coordinates of the banana tree. The next line contains the integer N (1 ≤ N ≤ 100 000), the number of jumps (key presses) in the game played.The last line contains a string of N digits between 0 and 7, the keys that Ivica pressed.OutputOutput a single decimal number, the smallest achievable distance. Your output must be accurate to ±0.01.ExampleInput:0 0 2 3\n5\n15102Output:0.000000Input:5 5 10 5\n3\n000Output:2.000000Input:0 0 10 10\n9\n700003000Output:1.414214",
  "sample_input": "Input:0 0 2 3\n5\n15102Output:0.000000",
  "sample_output": "Input:5 5 10 5\n3\n000Output:2.000000",
  "link": "https://www.spoj.com/problems/MAJMUN",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "0 0 2 3\n5\n15102",
      "expected_output": "0.000000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5 10 5\n3\n000",
      "expected_output": "2.000000",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 7 1 5\n2\n7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 1 8\n10\n10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 4 1\n6\n4",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "59 93 88 24\n19\n55",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 15 94 59\n38\n69",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "12 47 99 16\n74\n61",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 56 82 91\n22\n60",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "24 19 75 51\n20\n57",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "17265 6205 17687 26028\n44796\n13759",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19121 25067 16805 11488\n25902\n8103",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "24448 34321 33525 43611\n10579\n9808",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "29177 30181 13352 18941\n36244\n33822",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "25043 33726 26762 11273\n9414\n48978",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "43688 35155 41490 21210\n20321\n5933",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "48922 47190 7924 27556\n37824\n33177",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000\n100000\n100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000\n100000\n100000",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "99999 99999 1 2\n2\n99999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:36"
}