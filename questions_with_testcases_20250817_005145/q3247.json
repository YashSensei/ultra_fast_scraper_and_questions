{
  "problem_code": "problems",
  "title": "Fences",
  "tags": [],
  "text": "One morning, fruit farmer Fred visits his apple trees and notices that one of them was cut overnight. This means a loss of 111e – the money he can make from the apples of a tree on average. In order to prevent further losses, he decides to erect a fence on his plantation. The fence consists of posts connected by wire.The fence posts can only be placed at a given set of pre-drilled holes. While Fred can get wire for free, he needs to buy the fence posts for 20e each. So it might not always be worth or even possible to fence in all of his trees.The plantation is square and 1 000 × 1 000 m2large. In bird’s eye view, the lower left corner has coordinates (0, 0), the upper right (1 000, 1 000). In this example there are four pre-drilled holes (circles) and three trees (squares). It is optimal to buy three fence posts and put them into selected holes (filled circles), to connect them by wire (lines), and to leave the upper left hole empty. The cost of erecting the fence is 3 × 20e + 1 × 111e = 171e since three posts were bought and one tree could not be fenced in (which means a loss of that tree’s harvest).Write a program that reads the positions of the pre-drilled holes and the trees on Fred’s plantation and outputs the minimum cost of erecting a fence or erecting no fence at all. You can neglect the actual shape of the trees and calculate with their positions only.InputThe first line contains two integers N and M (3 ≤ N ≤ 100, 1 ≤ M ≤ 100). N is the number of pre-drilled holes, and M is the number of trees. This line is followed by N lines that describe the positions of the holes, and then by M lines that describe the positions of the trees. All positions are given as pairs of integers x y on one line (0 ≤ x, y ≤ 1 000). You can expect that no two positions (of holes and trees) coincide and that no three positions are colinear.OutputOutput a single line containing one integer: Fred’s minimum cost. In case Fred buys P posts and fails to fence in T trees, his cost are 20 × P + 111 × T.ExampleInput:4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900Output:171This example corresponds to the picture above.(Official Test Data)",
  "sample_input": "Input:4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900Output:171",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CEOI08A",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "4 3\r\n800 300\r\n200 200\r\n200 700\r\n600 700\r\n400 300\r\n600 500\r\n800 900",
      "expected_output": "171",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 2\n9 2\n9 5\n1 9\n9 8\n8 10\n3 5\n4 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n4 10\n1 6\n6 2\n3 6\n1 2\n5 2\n5 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7\n7 7\n6 9\n3 3\n8 6\n3 6\n7 9\n7 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 52\n94 47\n92 74\n56 95\n81 67\n2 26\n56 24\n57 13",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 20\n92 36\n77 17\n22 13\n32 48\n44 20\n56 3\n10 74",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "39 18\n29 52\n90 63\n85 84\n38 54\n57 20\n34 66\n26 59",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 67\n84 87\n47 7\n34 56\n32 22\n87 34\n39 4\n34 27",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 52\n16 11\n29 53\n69 52\n32 50\n63 59\n95 49\n13 57",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "44 31\n31 17\n14 32\n28 31\n17 21\n49 47\n40 14\n49 48",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "36 48\n35 16\n34 48\n39 6\n47 12\n41 12\n23 44\n45 36",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "39 33\n49 38\n24 40\n6 10\n45 5\n47 32\n12 8\n39 38",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "12 9\n8 39\n27 27\n46 13\n5 6\n20 36\n39 9\n28 50",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "7 43\n39 6\n44 29\n16 6\n29 28\n9 12\n42 33\n32 7",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34 47\n26 9\n6 42\n31 11\n47 36\n21 15\n44 7\n19 36",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "35 36\n43 36\n5 46\n14 20\n50 28\n9 18\n7 45\n5 34",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n99 100\n1 100\n2 2\n2 99\n1 100\n1 2\n1 99",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n2 1\n100 1\n1 1\n2 99\n1 100\n1 2\n99 99",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:01"
}