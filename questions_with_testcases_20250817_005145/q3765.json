{
  "problem_code": "problems",
  "title": "Alice and Bob",
  "tags": [],
  "text": "Alice and Bob are very smart guys and they like to play all kinds of games in their spare time. The  most amazing thing is that they always find the best strategy, and that's why they feel bored again and again. They just invented a new game, as they usually did.The rule of the new game is quite simple. At the beginning of the game, they write downNrandom positive integers, then they take turns (Alice first) to either:Decrease a number by one.Erase any two numbers and write down their sum.Whenever a number is decreased to 0, it will be erased automatically. The game ends when all numbers are finally erased, and the one who cannot play in his (her) turn loses the game.Here's the problem: Who will win the game if both use the best strategy? Find it out quickly, before they get bored of the game again!InputThe first line contains an integerT(1 ≤T≤ 4000), indicating the number of test cases. \r\nEach test case contains several lines.\r\nThe first line contains an integerN(1 ≤N≤ 50).\r\nThe next line containsNpositive integersA1...AN(1 ≤Ai≤ 1000), represents the numbers they write down at the beginning of the game.OutputFor each test case in the input, print one line:\"Case #X: Y\", whereXis the test case number (starting with 1) andYis either\"Alice\"or\"Bob\".ExampleInput:3\r\n3\r\n1 1 2\r\n2\r\n3 4\r\n3\r\n2 3 5Output:Case #1: Alice\r\nCase #2: Bob\r\nCase #3: Bob",
  "sample_input": "Input:3\r\n3\r\n1 1 2\r\n2\r\n3 4\r\n3\r\n2 3 5Output:Case #1: Alice\r\nCase #2: Bob\r\nCase #3: Bob",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ALICE",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "3\r\n3\r\n1 1 2\r\n2\r\n3 4\r\n3\r\n2 3 5",
      "expected_output": "Case #1: Alice\r\nCase #2: Bob\r\nCase #3: Bob",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n2\n4\n6\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n8\n9\n2\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n3\n10\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n33012055\n21100687\n36224098\n93418116\n89537187\n15595558\n93976647\n62851828\n38636598\n91920310\n20505840\n30728892\n96895793\n54766898\n78765235\n20711080\n10068067\n4410372\n86533374",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n25226109\n54395915\n51007898\n70218156\n60861456\n55531823\n45722944\n78769548\n10959064\n29102650\n16913603\n33394186\n86970531\n14641862\n65946853\n38160702\n70811352\n98971928",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n30718352\n66914835\n77251049\n40657885\n10617004\n1230814\n82826208\n60933878",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n59556738\n20958348\n5968629\n93762966\n77413105\n33002752\n79595667\n91886138\n9928683\n94111777\n9755373\n99527166\n86726982",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n64106549\n57206026\n45806128\n19440669\n4681015\n65969339\n13614644\n76352958\n89226081\n78021386\n18093922\n67853417\n12432973\n11140098\n53180363\n31559218\n13297497\n14627710\n21306459",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "46\n74731\n39044\n13625\n38976\n60885\n97592\n19180\n68247\n41365\n39047\n39940\n47741\n54470\n55665\n85067\n70402\n84645\n11243\n47440\n94655\n51690\n88802\n25934\n28437\n94584\n53705\n87841\n22656\n35191\n48522\n83570\n31106\n35532\n49116\n19913\n2678\n51121\n773\n69890\n98966\n85527\n58360\n40544\n69644\n57381\n60193",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n7768\n49991\n5093\n88628\n12489\n41360\n22424\n41227\n76641\n85824\n83361\n35291\n52399\n66302\n84728\n42680\n50548\n32291\n81145\n57464",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "36\n31507\n40482\n98193\n55492\n24769\n46417\n70618\n92315\n84448\n61591\n70128\n7567\n77974\n34940\n89920\n88217\n10056\n31820\n99030\n43339\n9574\n95875\n7137\n81718\n49900\n13139\n20330\n80045\n87745\n89667\n1527\n54029\n52584\n74502\n38714\n99785",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "42\n25551\n32594\n1216\n90487\n73860\n22916\n89239\n30621\n61350\n35824\n14907\n23421\n9050\n24962\n29899\n2555\n59738\n92053\n72064\n63856\n63621\n37239\n65612\n50746\n59818\n47190\n17968\n68958\n83576\n97391\n11112\n27494\n67000\n18822\n71451\n17458\n76054\n87796\n84893\n21827\n31061\n73634",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n35477\n66434\n82549\n97807\n19184\n91383\n40335\n11931\n52619\n19068\n36075\n8112\n14034\n33992\n97107\n56356\n94145\n63202\n43880\n94581\n37905\n12302\n33072\n80449\n42484\n30019\n78739\n73220\n26385\n58249\n1633\n22395\n79285\n3701\n21910",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n22967\n82905\n76509\n9817\n65681\n51841\n65135\n49741\n26647\n94418\n29551\n54204\n45895\n17381\n17218\n33913\n48751\n22396\n90512\n69090\n45966\n45697\n44615\n92127\n68848\n59157\n47743\n59428\n58580\n69737\n97244\n57570\n39283\n70738\n71751\n92900\n82185\n26365\n33046\n19703\n10261\n28608\n28850\n41691\n67381\n33442\n3195\n33797",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "45\n12164\n88667\n65124\n95264\n75441\n75087\n90687\n22693\n1440\n79817\n95900\n46919\n59758\n11955\n57772\n73562\n57352\n58720\n66151\n86820\n85566\n62298\n18063\n93684\n1537\n77552\n60283\n15617\n31425\n63279\n6446\n60724\n16461\n76889\n84015\n55506\n46140\n8392\n33326\n76132\n34873\n56473\n89390\n95062\n5854",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n80288275\n24428788\n58361667\n62388046\n62654367\n7378576\n71770806\n53653088\n84164196\n84390061\n5661093\n49510611\n25065735\n44295157\n86986819\n69806418\n29945901\n72839712\n90691154\n49744232\n74263064\n89181806\n6377010\n24430564\n9484673\n31276266\n5981865\n80635813\n90444157\n97240476\n38216859\n1948593\n6561852\n75630789\n32339969\n3328866\n80844146\n66008018\n82262004\n5655755\n86101017\n7588984\n39490490\n38487230\n7950697\n30928104\n66510520\n83273168\n90919843\n45392274",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n69597571\n39768887\n15144097\n83061597\n45463775\n27255039\n68539288\n68145286\n47775629\n77005142\n23182020\n63078585\n21041131\n89757165\n80639708\n29903255\n22570082\n54750764\n3680535\n10765780\n9691936\n43020899\n93106660\n46225377\n85427845\n83292712\n93663630\n58688021\n37352171\n14307855\n6615262\n15064645\n19852322\n9939840\n63393899\n88116729\n10277528\n16128846\n21922513\n39816785\n71544650\n54551365\n24361170\n15547727\n76596860\n42484580\n40966436\n96612710\n20172681\n22049913",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "2\n38547015\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}