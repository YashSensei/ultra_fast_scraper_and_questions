{
  "problem_code": "problems",
  "title": "Vonny and her dominos",
  "tags": [],
  "text": "Vonny loves playing with dominos. And so she owns a standard set of dominos. A standard set of dominos consists of 28 pieces called bones, tiles or stones. Each bone is a rectangular tile with a line dividing its face into two square ends. Each square is labeled with a number between 0 and 6. The 28 stones are labeled (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 1), (1, 2) ... (5, 5), (5, 6), (6, 6). Tommy - the brother of Vonny - build a box for Vonny's dominos. This box is sized 7 Ã— 8 squares. Every square is labeled with a number between 0 and 6. You can see a example box here.0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3Now Vonny wants to arrange her 28 stones in such way that her stones cover all squares of the box. A stone can only be placed on two adjacent squares if the numbers of the squares and of the domino stone are equal. Tommy asks Vonny in how many different ways she can arrange the dominos. Tommy assumes that Vonny need a lot of time to answer the question. And so he can take some of Vonny's candies while  she solves the task.  But Vonny is a smart and clever girl. She asks you to solve the task and keeps an eye on her candies.InputThe first line of the input contains the number of testcases. Each case consists of 56 numbers (7 rows and 8 cols) between 0 and 6 which represents Tommy's box.OutputFor each testcase output a single line with the number which answers Tommy's question.ExampleInput:2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3Output:18\r\n1",
  "sample_input": "0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3",
  "sample_output": "Input:2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3Output:18\r\n1",
  "link": "https://www.spoj.com/problems/VONNY",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\n0 3 0 2 2 0 2 3 \r\n1 5 6 5 5 1 2 2 \r\n3 4 1 4 5 4 4 4 \r\n6 6 1 0 5 2 3 0 \r\n4 0 3 2 4 1 6 0 \r\n1 4 1 5 6 6 3 0 \r\n1 2 6 5 5 6 3 3 \r\n\r\n5 3 1 0 0 1 6 3 \r\n0 2 0 4 1 2 5 2 \r\n1 5 3 5 6 4 6 4 \r\n0 5 0 2 0 4 6 2 \r\n4 5 3 6 0 6 1 1 \r\n2 3 5 3 4 4 5 3 \r\n2 1 1 6 6 2 4 3",
      "expected_output": "18\r\n1",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 9 8 5 3 1 7 2\n8 6 1 10 1 7 6 9\n9 9 4 6 2 2 7 5\n8 7 1 2 7 4 2 8\n1 9 1 6 4 3 10 8\n1 8 3 9 1 5 10 8\n10 3 8 9 5 8 5 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 4 7 10 8 8 9\n10 9 3 2 7 1 8 8\n6 2 1 3 1 2 10 5\n6 8 1 1 3 8 4 4\n1 2 4 6 1 1 9 5\n9 4 1 3 8 10 9 1\n4 5 5 2 6 4 3 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 3 4 3 10 8 1\n5 7 10 10 7 9 8 10\n5 8 4 6 2 9 4 4\n9 3 8 5 2 1 1 1\n2 3 2 7 7 6 7 3\n1 4 3 8 3 7 4 6\n9 9 4 4 10 3 5 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "93 75 16 76 73 49 45 34\n32 59 16 38 34 5 25 88\n12 25 44 9 89 55 30 66\n34 74 49 40 74 81 77 98\n36 69 1 75 33 88 80 14\n44 40 36 82 1 54 55 9\n74 93 90 49 94 98 56 31",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "99 94 89 33 59 61 57 82\n62 95 43 99 24 90 63 72\n84 72 68 3 70 63 96 100\n24 10 98 87 40 26 19 93\n69 90 52 6 30 59 69 72\n79 19 52 77 69 6 36 47\n52 91 73 100 9 72 89 86",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "98 11 23 98 16 37 52 32\n12 84 43 83 85 6 64 41\n65 18 6 17 65 71 39 28\n100 56 14 80 11 42 33 8\n91 64 74 38 44 62 30 93\n68 37 43 49 8 79 34 62\n61 85 54 2 76 77 68 93",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 93 99 45 1 85 92 56\n22 82 10 66 51 36 7 5\n59 38 29 41 77 65 46 15\n67 3 96 37 52 58 39 65\n67 24 71 39 32 14 92 25\n11 57 97 19 46 87 55 29\n59 82 52 85 19 69 11 91",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "69 18 84 20 80 39 69 23\n24 97 66 76 65 36 9 76\n94 45 24 45 97 26 26 66\n85 65 77 23 20 86 1 63\n90 53 64 59 55 61 23 21\n18 94 7 43 84 16 16 30\n36 25 83 90 56 64 51 66",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "372 145 483 326 443 335 162 178\n132 235 67 457 282 405 440 169\n73 71 161 206 122 145 494 285\n392 411 148 362 233 378 215 108\n287 374 412 315 456 165 282 283\n488 120 266 128 474 178 393 60\n441 401 480 465 428 134 313 151",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "330 351 493 243 200 116 218 406\n356 359 372 227 393 264 480 196\n182 191 499 360 143 482 498 104\n81 445 351 269 365 348 197 162\n387 54 95 171 118 232 266 153\n254 421 66 127 82 63 445 104\n265 335 238 323 435 151 174 131",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "276 397 361 125 457 453 334 91\n326 300 144 307 476 75 84 378\n324 483 217 319 147 236 66 99\n241 347 457 297 359 128 293 220\n144 183 119 433 231 99 112 231\n139 356 417 94 145 235 281 489\n67 114 331 257 202 258 75 487",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "338 122 238 467 402 371 244 69\n348 73 448 233 410 156 376 282\n332 415 92 468 263 413 460 182\n69 195 171 244 114 82 313 79\n101 150 316 290 114 253 92 498\n207 248 462 428 74 338 94 108\n457 464 167 102 50 350 197 187",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "473 342 334 130 154 57 263 303\n438 300 265 189 484 209 229 355\n459 481 248 442 301 154 198 226\n381 387 105 276 255 355 133 318\n412 488 414 233 263 202 399 213\n365 394 327 290 375 370 259 153\n159 155 147 286 114 378 439 204",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "210 259 478 233 293 324 483 123\n306 374 446 196 212 146 364 114\n210 230 475 233 90 179 241 286\n65 230 364 70 185 161 62 375\n166 84 120 73 287 235 329 283\n310 229 441 435 483 472 407 193\n336 301 188 250 236 413 477 310",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "279 435 265 499 232 384 152 365\n220 228 281 455 429 54 321 322\n169 213 246 236 318 102 369 129\n340 91 136 314 171 68 434 101\n296 496 223 235 96 302 298 475\n188 69 411 167 434 318 439 428\n285 340 228 212 220 462 494 252",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 1 1 1000 999 1000 1000\n999 999 1 1 1000 999 1000 2\n1 1000 2 1 1 2 1000 2\n2 2 1 1 1 2 1 1\n999 1 2 2 999 2 2 1000\n2 1 1 1000 2 999 1 1\n1000 999 1000 999 1000 2 2 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:31"
}