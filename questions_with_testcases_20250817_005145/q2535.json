{
  "problem_code": "problems",
  "title": "Tied Down",
  "tags": [],
  "text": "As we all know, Bessie the cow likes nothing more than causing mischief on the farm. To keep her from causing too much trouble, Farmer John decides to tie Bessie down to a fence with a long rope. When viewed from above, the fence consists of N posts (1 <= N <= 10) that are arranged along vertical line, with Bessie's position (bx, by) located to the right of this vertical line. The rope FJ uses to tie down Bessie is described by a sequence of M line segments (3 <= M <= 10,000), where the first segment starts at Bessie's position and the last ends at Bessie's position. No fence post lies on any of these line segments. However, line segments may cross, and multiple line segments may overlap at their endpoints.Here is an example of the scene, viewed from above:To help Bessie escape, the rest of the cows have stolen a saw from the barn. Please determine the minimum number of fence posts they must cut through and remove in order for Bessie to be able to pull free (meaning she can run away to the right without the rope catching on any of the fence posts). All (x,y) coordinates in the input (fence posts, Bessie, and line segment endpoints) lie in the range 0..10,000. All fence posts have the same x coordinate, and bx is larger than this value.InputLine 1: Four space-separated integers: N, M, bx, by.Lines 2..1+N: Line i+1 contains the space-separated x and y coordinates of fence post i.Lines 2+N..2+N+M: Each of these M+1 lines contains, in sequence, the space-separated x and y coordinates of a point along the rope. The first and last points are always the same as Bessie's location (bx, by).OutputLine 1: The minimum number of posts that need to be removed in order for Bessie to escape by running to the right.ExampleInput:2 10 6 1\r\n2 3\r\n2 1\r\n6 1\r\n2 4\r\n1 1\r\n2 0\r\n3 1\r\n1 3\r\n5 4\r\n3 0\r\n0 1\r\n3 2\r\n6 1Output:1Output explanation:Removing either post 1 or post 2 will allow Bessie to escape.",
  "sample_input": "Input:2 10 6 1\r\n2 3\r\n2 1\r\n6 1\r\n2 4\r\n1 1\r\n2 0\r\n3 1\r\n1 3\r\n5 4\r\n3 0\r\n0 1\r\n3 2\r\n6 1Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TDOWN",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "2 10 6 1\r\n2 3\r\n2 1\r\n6 1\r\n2 4\r\n1 1\r\n2 0\r\n3 1\r\n1 3\r\n5 4\r\n3 0\r\n0 1\r\n3 2\r\n6 1",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2 6 4\n1 7\n2 7\n6 1\n7 8\n6 5\n5 10\n2 4\n6 6\n10 4\n4 1\n3 5\n9 9\n8 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 6 5 10\n1 9\n10 4\n6 4\n6 3\n6 4\n1 6\n10 2\n3 4\n7 9\n3 7\n6 9\n4 9\n10 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4 7 6\n3 3\n9 3\n4 4\n8 7\n1 9\n8 5\n1 2\n10 2\n5 2\n4 2\n4 7\n1 10\n8 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 85 30 33\n6 13\n92 40\n16 2\n17 4\n53 63\n88 98\n10 18\n23 62\n47 19\n77 15\n62 47\n55 7\n85 82",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 93 87 55\n87 29\n36 44\n15 68\n39 70\n29 77\n49 63\n63 42\n66 71\n1 8\n50 79\n99 78\n85 30\n10 7",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 99 37 64\n39 35\n74 52\n16 33\n24 9\n74 8\n68 25\n32 66\n46 65\n82 22\n5 67\n77 75\n74 15\n69 15",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "67 47 83 86\n11 30\n85 49\n62 29\n99 34\n69 79\n5 53\n16 16\n28 19\n73 81\n32 16\n92 18\n61 34\n78 49",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "56 40 36 23\n46 45\n83 55\n49 98\n11 41\n81 29\n96 4\n32 50\n35 88\n10 77\n84 67\n31 87\n18 39\n42 11",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "274 185 411 235\n270 235\n170 427\n408 275\n173 225\n85 407\n236 182\n314 434\n344 218\n110 423\n464 329\n236 430\n432 437\n245 476",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "405 229 401 301\n380 255\n438 154\n405 410\n223 79\n63 467\n103 104\n67 288\n364 320\n364 433\n217 390\n467 151\n499 127\n102 324",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "89 153 94 79\n343 219\n262 245\n462 159\n414 182\n422 422\n415 290\n145 65\n375 241\n360 90\n500 315\n453 112\n285 398\n375 251",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "410 300 232 124\n441 103\n95 317\n199 207\n239 469\n248 360\n307 324\n445 179\n283 61\n79 374\n88 359\n229 328\n384 208\n461 116",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "442 147 149 51\n175 355\n178 219\n431 216\n182 326\n370 90\n283 488\n59 99\n220 410\n391 191\n285 51\n169 111\n204 399\n212 54",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "474 102 112 261\n449 458\n225 353\n116 276\n438 383\n380 409\n108 62\n291 197\n466 484\n219 303\n389 463\n101 182\n263 133\n217 241",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "422 488 220 106\n56 194\n322 191\n173 245\n113 356\n496 317\n338 91\n81 443\n333 263\n97 90\n426 258\n263 448\n315 52\n228 135",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 2 1000\n2 2\n999 1000\n2 2\n1000 1000\n2 2\n999 999\n2 2\n999 2\n1000 2\n2 2\n1 2\n1000 999\n1 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 1 1000\n999 1\n999 1000\n2 1\n1 1000\n1000 1\n1 2\n1000 999\n2 1000\n1000 1000\n2 2\n2 1000\n2 1000\n2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:38"
}