{
  "problem_code": "problems",
  "title": "Ada and Subsequence",
  "tags": [],
  "text": "Ada the Ladybug has two string which she wants to give to her friends. As she doesn't want to distinguish between them, she wants to use only some common subsequence. Firstly she wanted to simply use the longest common subsequence but then she realized it wouldn't bekosher.She assigned a positive value to each letter. Now she wants to find the most expensive subsequence.InputThe first line of each test-case will contain two integers1 ≤ N, M ≤     2000, the length of each subsequence.The next line will contain26integers (1 ≤ Pi≤     105), the price of each letter.The next line will contain string of lengthNconsisting of lowercase English alphabet.The next line will contain string of lengthMconsisting of lowercase English alphabet.OutputFor each test-case, print the cost of the most expensive common subsequence.Example Input4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbcaExample Output2Example Input3 3\r\n1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nbaa\r\naabExample Output7Example Input4 5\r\n1 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6\r\nzbbz\r\nbbzbbExample Output14Example Input3 3\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabc\r\ndefExample Output0",
  "sample_input": "4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbca",
  "sample_output": "2",
  "link": "https://www.spoj.com/problems/ADASEQEN",
  "scraped_at": "2025-08-17 00:34:34",
  "test_cases": [
    {
      "input": "4 4\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\nabcd\r\ndbca",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9\n3 10 8 10 7 4 1 5 7 4 2 9 6 4 1 6 8 4 9 10 10 3 6 6 6 4\neldaf\noxacs",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n5 4 3 9 7 5 9 3 7 2 10 6 1 10 7 3 6 6 3 7 10 7 7 3 7 4\naihnjs\ncmf",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 5\n2 2 7 3 6 2 10 3 1 5 9 9 6 9 3 9 6 4 2 10 8 3 1 6 6 8\nitjw\naykiw",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 93\n12 21 64 96 66 54 27 38 92 41 67 29 32 13 94 41 29 63 25 91 40 80 85 95 23 94\nyihwu\nkxya",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "92 8\n30 92 78 48 62 3 89 88 8 89 68 7 29 93 55 58 44 70 2 27 20 47 7 2 28 68\nufsdc\nhhl",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 12\n33 10 96 43 54 86 3 42 28 60 49 25 95 41 13 67 40 40 45 54 65 46 100 56 4 12\nijoz\nqmhaqblo",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "99 29\n3 35 11 24 1 7 81 79 87 87 61 80 21 73 91 68 99 11 29 69 41 95 14 53 23 42\nhfqqbzw\nqjqpw",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 58\n22 44 25 53 93 36 62 23 2 75 33 6 94 33 92 89 31 46 29 50 61 50 73 24 84 7\nbslzjyeb\ncmecepfz",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "426 389\n429 274 445 234 355 187 305 218 273 228 276 90 357 449 301 366 76 391 59 413 65 169 357 116 499 139\nfoamkok\nne",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "54 227\n278 235 322 433 223 463 479 101 436 273 136 353 216 441 493 256 228 373 252 214 142 193 277 72 216 284\nab\nxpwzqsc",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "360 66\n66 500 106 424 312 215 416 249 355 149 348 73 412 493 170 171 355 411 440 149 348 367 338 152 235 320\ngj\nocsjfsij",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "457 296\n186 245 325 87 257 279 93 470 456 77 130 122 93 459 208 454 372 287 369 415 77 260 76 159 334 470\nt\nfe",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "109 151\n140 256 356 289 251 483 403 101 235 357 108 277 290 66 470 419 484 285 381 479 80 392 93 431 145 419\nap\nujm",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "384 102\n360 239 350 69 364 476 133 373 177 287 265 381 359 125 128 434 242 207 311 498 454 361 347 317 279 186\nnxqntzn\nlzqaph",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "137 438\n302 182 162 252 170 99 428 417 247 445 493 61 271 218 254 223 327 420 360 127 292 104 93 281 179 418\nzdjmuau\nt",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nckso\nafvvrx",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nkfr\nfzmaly",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n2 999 1000 2 2 2 1000 1000 2 1 999 2 2 1000 1 2 1 999 2 2 999 1 2 2 2 999\nw\ntvlzu",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n999 2 999 2 1 1 1000 999 1 1 1000 2 999 999 2 999 2 2 1000 1000 1000 1 2 999 1 1000\nqndsa\nhn",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:54"
}