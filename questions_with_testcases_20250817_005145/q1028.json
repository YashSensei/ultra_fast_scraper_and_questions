{
  "problem_code": "problems",
  "title": "Ohani And The Game",
  "tags": [],
  "text": "One day Ohani and her friend was playing a game. The rules of the game is given below:Ohani Starts the game. Then the two player take turns.At the starting of the game, Ohani and her friend together choose a number N.They take the absolute value of N, N = |N| or, N = abs(N).In one turn: a player chooses a divisor X of N where 1 < X ≤ N. Then he/she divides N by X. Then next player continues to do step 4 until N is not equal to 1.The game ends when N becomes 1.The player who can’t make his/her next move, looses the game. Both the player plays optimally.Ohani and her friend was playing the game for a long time. So, they got bored. Then suddenly one interesting idea came to Ohani’s mind. She wants to choose maximum number of ways to get 1 from N such that no two way has a common number except 1 and N?For explanation:Suppose N = 20.Two possible way to get 1 is: 20 → 10 → 5 → 1 and 20 → 5 → 1, both the way has number 5 in common.But: 20 → 10 → 1 and 20 → 4 → 2 → 1 has no number common without 20 and 1.So, now Ohani wants to know the number of ways such that no two way has common number except 1 and N. But Ohani is very weak in coding. So, she wants you to help.InputThe first line of the input contains the number of test cases T (≤ 100000).Each of the next T lines contains a number N (|N| ≤ 1000000).OutputFor each test case, output the desired answer. If it is impossible to reach 1, just print “Impossible”.ExampleInput:3\r\n1\r\n2\r\n3Output:0\r\n1\r\n1",
  "sample_input": "Input:3\r\n1\r\n2\r\n3Output:0\r\n1\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/OHANIGAME",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "3\r\n1\r\n2\r\n3",
      "expected_output": "0\r\n1\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n6\n1\n7\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n7\n2\n8\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n64914409\n26956848\n43579023\n74380306\n22680395\n87728709\n82018527\n19649287",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n40099951\n66241814\n39377251\n80531799\n14627369\n34524650",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n19637454\n92034190\n37356706\n23721966\n75562766\n6535831\n33982921\n25563661\n45008799\n44929481\n58560894\n29820075\n9223676\n45110748\n31177617\n26366254\n14363144",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n84852291\n75736779\n87053015\n72227816\n89492018\n80312738\n53379850\n68109489\n95302342\n20874228\n42943490",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n3423449\n35767093\n90972971\n87818507\n92891182\n14672886\n78694882\n38116922\n28285971\n82391209\n5743998\n78316347\n51273508\n87383309\n3645899\n42088996\n32833547\n29415184",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n82575\n27491\n953\n34009\n1689\n11898\n69370\n91486\n53717\n36138\n46469\n45185\n78229\n89362\n21643\n74972\n37025\n28102\n39770\n38883",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n55129\n25431\n72345\n3260\n25824\n90940\n68524\n72474\n45498\n72833\n57474\n88166\n92908\n93110\n15065\n18246\n45153\n49282\n52902\n63579",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n65509\n96998\n77795\n16175\n1343\n9053\n35429\n76897\n70245\n13239\n84462\n40731\n48792\n5784\n93912\n99773\n58917\n49856\n70498\n14780",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n65181\n92947\n41400\n70392\n19855\n11095\n3385\n20774\n994\n56165\n79949\n27235\n7077\n32554\n65114\n75344\n42247\n46680\n72898\n90714",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n25364\n59413\n63867\n20632\n84150\n4762\n84128\n46999\n78724\n82090\n26822\n52862\n76683\n74426\n95871\n31815\n70838\n93542\n1190\n88598",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n29690\n79506\n33825\n87770\n69755\n3132\n92909\n12141\n37466\n13904\n36615\n13714\n21994\n11393\n89565\n87142\n79585\n91068\n53345\n90166",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n52787\n7252\n81405\n65677\n2312\n1726\n30641\n77374\n5326\n93614\n36325\n99371\n22466\n52964\n16695\n66796\n49514\n9475\n39879\n9182",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n78775521\n80602387\n7647392\n79701271\n49885312\n4077671\n27444043\n72902791\n78847214\n73598412\n54092535\n5379966\n15051367\n86237930\n82079387\n48637060\n37388348\n86758168\n55273350\n32380944",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n37199037\n60304712\n93693137\n9850594\n81104476\n18901987\n77107634\n61637090\n72350761\n27065247\n35682490\n85231396\n22360502\n62696604\n85340381\n36023348\n31486876\n411242\n44901086\n59335665",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n100000000\n70022802\n100000000\n1\n100000000\n100000000\n1\n48958626\n47734240\n100000000\n100000000\n100000000\n100000000\n1\n77092899\n1\n100000000\n1\n93472644\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 20)"
    },
    {
      "input": "20\n1\n60337208\n71325049\n100000000\n70776333\n1\n4815425\n100000000\n100000000\n100000000\n100000000\n19660107\n1\n100000000\n1\n1\n100000000\n1\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 20)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}