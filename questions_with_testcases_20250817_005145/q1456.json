{
  "problem_code": "problems",
  "title": "Fast Maximum Flow",
  "tags": [],
  "text": "Given a graph with N (2 ≤ N ≤ 5,000) vertices numbered 1 to N and M (1 ≤ M ≤ 30,000) undirected, weighted edges, compute themaximum flow / minimum cutfrom vertex 1 to vertex N.InputThe first line contains the two integers N and M. The next M lines each contain three integers A, B, and C, denoting that there is an edge of capacity C (1 ≤ C ≤ 109) between nodes A and B (1 ≤ A, B ≤ N). Note that it is possible for there to be duplicate edges, as well as an edge from a node to itself.OutputPrint a single integer (which may not fit into a 32-bit integer) denoting the maximum flow / minimum cut between 1 and N.ExampleInput:4 6\r\n1 2 3\r\n2 3 4\r\n3 1 2\r\n2 2 5\r\n3 4 3\r\n4 3 3Output:5Viewing the problem as max-flow, we may send 3 units of flow through the path 1 - 2 - 3 - 4 and 2 units of flow through the path 1 - 3 - 4. Viewing the problem as min-cut, we may cut the first and third edges. Either way the total is 5.Note: see alsoMATCHING.",
  "sample_input": "Input:4 6\r\n1 2 3\r\n2 3 4\r\n3 1 2\r\n2 2 5\r\n3 4 3\r\n4 3 3Output:5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FASTFLOW",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "4 6\r\n1 2 3\r\n2 3 4\r\n3 1 2\r\n2 2 5\r\n3 4 3\r\n4 3 3",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 2\n3 2 1\n1 1 5\n5 1 3\n3 2 1\n2 3 2\n4 1 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n1 3 3\n1 4 2\n3 3 5\n3 3 1\n5 4 3\n4 3 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n1 4 4\n2 2 1\n4 1 1\n4 1 2\n3 1 4\n4 4 5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n3 5 2\n4 4 4\n4 5 3\n1 5 3\n3 2 2\n2 1 1",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "3 4\n1 3 3\n5 1 3\n1 1 1\n5 1 2\n4 4 4\n3 4 3",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 4\n5 5 1\n4 4 5\n1 4 4\n3 3 1\n2 2 2\n2 2 3",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "4 1\n2 2 3\n4 4 4\n5 1 1\n3 5 5\n4 4 1\n5 1 1",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 2\n3 2 4\n3 3 5\n5 2 1\n4 4 3\n3 4 3\n5 3 4",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 1\n2 1 2\n1 2 1\n1 1 2\n1 1 1\n2 1 2\n2 2 1",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2 1\n2 2 2\n2 1 1\n1 1 2\n2 2 2\n1 2 2\n1 2 2",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n2 1 1\n2 2 2\n2 1 2\n2 1 1\n1 2 2\n1 1 1",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2 2\n2 1 1\n2 2 2\n2 2 1\n1 2 2\n1 2 2\n2 2 2",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 2\n2 2 1\n2 1 1\n2 1 1\n1 2 1\n2 1 2\n1 1 2",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1 2\n1 1 2\n1 1 1\n1 1 1\n2 2 2\n1 2 2\n1 1 1",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 1\n2 2 1\n2 1 1\n2 2 2\n1 2 1\n2 2 1\n2 2 2",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5\n5 5 5",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "5 5\n1 1 4\n5 4 1\n5 5 1\n4 5 5\n5 5 1\n5 2 4",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n4 5 5\n5 1 4\n1 2 2\n1 5 5\n5 5 5\n2 4 5",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}