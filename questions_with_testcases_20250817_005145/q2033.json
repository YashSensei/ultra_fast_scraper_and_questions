{
  "problem_code": "problems",
  "title": "King Graffs Defense",
  "tags": [],
  "text": "King Graff, the ruler of the land of Feerie, has a problem - his nation is under attack! Luckily, he has an army at his disposal, composed of a whopping $S$ soldiers (where $S = 2$).Feerie consists of $N$ ($1 \\leq N \\leq 100,000$) towns (numbered $1..N$), and $M$ ($1 \\leq M \\leq 500,000$) roads. The $i$th road runs between distinct towns $A_i$ and $B_i$, in both directions. No pair of towns is directly connected by more than one road, but every pair of towns is connected by at least one path of connected roads. King Graff would like to position his two soldiers in two different towns to prepare for the impending assault - however, since he's not much of a strategist, he'll choose the towns at complete random.Graff's only real concern is with his enemies using a divide-and-conquer strategy. His soldiers will be susceptible to this type of attack if there exists any single road that, if blocked, will prevent them from reaching each other by any system of connected roads. As the royal computer scientist, your job is to determine the probability that King Graff will be defeated.InputFirst line: 2 integers, $N$ and $M$Next $M$ lines: 2 integers, $A_i$ and $B_i$, for $i = 1..M$Output1 real number (rounded to 5 decimal places), the probability that the two towns chosen by Graff can be disconnected by the removal of any single roadExampleInput:4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1Output:0.50000Explanation of Sample:The map of Feerie is illustrated below:King Graff can make 6 possible choices as to where to place his soldiers, and three of those (the three with one of the soldiers being at town 3) result in defeat (if the road between towns 1 and 3 is destroyed). The probability of failure is then $3/6 = 0.5$.",
  "sample_input": "Input:4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1Output:0.50000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GRAFFDEF",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "4 4\r\n1 2\r\n1 3\r\n2 4\r\n4 1",
      "expected_output": "0.50000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 4\n2 7\n8 6\n3 2\n3 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9\n9 4\n2 8\n5 1\n8 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n7 5\n8 6\n3 1\n7 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 38\n67 47\n57 93\n64 16\n66 50",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "90 71\n90 16\n1 27\n94 1\n99 31",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "67 64\n46 62\n89 47\n84 83\n96 58",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "70 80\n18 42\n70 85\n59 81\n59 55",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 57\n11 80\n22 62\n49 99\n77 84",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "211 350\n447 276\n470 388\n155 458\n183 125",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "338 84\n195 388\n58 153\n304 93\n268 439",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "441 302\n198 210\n55 250\n475 120\n312 80",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "184 228\n322 62\n456 497\n225 50\n480 398",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "436 462\n420 364\n205 150\n67 460\n109 410",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "110 243\n417 135\n391 315\n116 415\n354 190",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "126 283\n156 121\n325 145\n102 178\n213 472",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n999 2\n999 1\n999 2\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n2 1\n1 2\n1 1\n1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}