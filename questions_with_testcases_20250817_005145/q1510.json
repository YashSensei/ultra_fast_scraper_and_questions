{
  "problem_code": "problems",
  "title": "Samvel and Boxes",
  "tags": [],
  "text": "King of Boxes Robert wants to test Samvel.  He has given Samvel n boxes indexed from 1 to n. All the boxes except the first one are located in another box. Robert wants to fill the boxes with apples (At beginning boxes contain no apples).  Robert can ask Samvel queries of 4 types.The queries are:Robert says two integers x, y to Samvel. Samvel needs to add x (1 ≤ x ≤ 109) apples to the y-th box. (1 ≤ y ≤ n)Robert says two integers x, y to Samvel. Samvel needs to swap the indexes of the x-th and y-th boxes. (1 ≤ x, y ≤ n)Robert says an integer x to Samvel. Samvel needs to say the number of apples located in the box x (1 ≤ x ≤ n) and in the boxes that are in the box x (directly or indirectly).Robert says an integer x to Samvel. Samvel needs to answer the query of the third type for the box that has minimum index from the boxes that are located directly in the box x. (1 ≤ x ≤ n)Samvel needs your help. Help him and write a program to answer this queries.InputThe first line of input contains an integer n (2 ≤ n ≤ 105)  and q (1 ≤ q ≤ 105), number of boxes and number of queries.Second line contains n-1 integers a1... an-1. ai-1is the index of the box that contains box i. (1 ≤ ai≤ n)The lines from 3 to q+2 contain an integer k (type of the query). if k=1 or k=2 then goes the two integer x, y from the task, else there is only one integer x.OutputFor each query of type 3 or 4 you need to output one integer the answer of query in a separate line. If query type is 4 and given box has no other boxes in it print -1.ExampleInput:4 6\r\n1 1 2\r\n1 5 1\r\n3 1\r\n2 1 3\r\n3 3\r\n1 60 1\r\n4 3Output:5\r\n5\r\n60",
  "sample_input": "Input:4 6\r\n1 1 2\r\n1 5 1\r\n3 1\r\n2 1 3\r\n3 3\r\n1 60 1\r\n4 3Output:5\r\n5\r\n60",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMBOX",
  "scraped_at": "2025-08-17 00:33:45",
  "test_cases": [
    {
      "input": "4 6\r\n1 1 2\r\n1 5 1\r\n3 1\r\n2 1 3\r\n3 3\r\n1 60 1\r\n4 3",
      "expected_output": "5\r\n5\r\n60",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 9\n10 4 5\n8 8 1\n7 9\n3 5 9\n2 8\n5 7 8\n2 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n8 5 2\n3 5 2\n1 7\n1 5 6\n4 3\n2 4 6\n5 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7\n4 4 10\n8 9 7\n5 10\n9 5 6\n5 4\n6 1 1\n5 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "21 85\n71 79 82\n81 12 5\n61 59\n53 36 75\n8 14\n56 52 34\n6 5",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 17\n78 23 27\n99 38 56\n15 82\n50 5 21\n80 15\n53 47 10\n15 48",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "34 99\n37 35 19\n40 66 23\n37 55\n10 50 41\n67 7\n27 21 84\n14 99",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "81 38\n37 28 91\n92 4 79\n54 54\n99 92 99\n8 39\n74 12 91\n94 83",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 30\n23 56 43\n9 89 8\n52 8\n65 17 19\n80 26\n2 47 15\n59 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "38 40\n15 43 36\n27 31 51\n12 49\n32 42 39\n20 20\n20 48 23\n21 11",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "12 27\n16 30 12\n32 5 50\n25 7\n34 19 47\n18 8\n51 23 5\n41 18",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12 11\n24 15 38\n46 29 49\n29 51\n34 5 34\n49 33\n43 8 52\n18 17",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "15 47\n33 24 14\n22 35 26\n20 7\n39 33 12\n36 30\n14 47 43\n23 37",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "17 49\n38 31 26\n48 46 45\n33 16\n24 45 13\n29 24\n17 25 8\n33 11",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 8\n26 23 18\n50 11 44\n18 37\n35 44 12\n44 6\n48 52 47\n19 27",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "6 46\n19 14 40\n44 12 32\n19 8\n50 46 15\n7 48\n25 46 41\n10 43",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105\n105 105 105\n105 105\n105 105 105\n105 105\n105 105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105\n105 105 105\n105 105\n105 105 105\n105 105\n105 105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 105\n104 104 2\n105 105 104\n1 104\n105 104 105\n1 1\n104 2 105\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 105\n105 105 105\n2 2 2\n1 104\n104 1 105\n105 105\n2 1 104\n105 104",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}