{
  "problem_code": "problems",
  "title": "Number Game",
  "tags": [],
  "text": "Arya and Bran are playing a game. Initially, two positive integersAandBare written on a blackboard. The players take turns, starting with Arya. On his or her turn, a player can replaceAwithA-k*Bfor any positive integerk, or replaceBwithB-k*Afor any positive integerk. The first person to make one of the numbers drop to zero or below loses.For example, if the numbers are initially (12, 51), the game might progress as follows:Arya replaces 51 with 51 - 3*12 = 15, leaving (12, 15) on the blackboard.Bran replaces 15 with 15 - 1*12 = 3, leaving (12, 3) on the blackboard.Arya replaces 12 with 12 - 3*3 = 3, leaving (3, 3) on the blackboard.Bran replaces one 3 with 3 - 1*3 = 0, and loses.We will say (A,B) is awinningposition if Arya can always win a game that starts with (A,B) on the blackboard, no matter what Bran does.Given four integersA1,A2,B1,B2, count how many winning positions (A,B) there are withA1≤A≤A2andB1≤B≤B2.InputThe first line of the input gives the number of test cases,T.Ttest cases follow, one per line. Each line contains the four integersA1,A2,B1,B2, separated by spaces.1 ≤T≤ 250.1 ≤A1≤A2≤ 1,000,000.1 ≤B1≤B2≤ 1,000,000.A2-A1≤ 999,999.B2-B1≤ 999,999.OutputFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1), and y is the number of winning positions (A,B) withA1≤A≤A2andB1≤B≤B2.ExampleInput:35 5 8 811 11 2 21 6 1 6Output:Case #1: 0Case #2: 1Case #3: 20",
  "sample_input": "Input:35 5 8 811 11 2 21 6 1 6Output:Case #1: 0Case #2: 1Case #3: 20",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NUMGAME",
  "scraped_at": "2025-08-17 00:33:18",
  "test_cases": [
    {
      "input": "35 5 8 811 11 2 21 6 1 6",
      "expected_output": "Case #1: 0Case #2: 1Case #3: 20",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 5 3 8 8 2 9 7 9 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 2 7 1 10 10 1 8 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4 8 5 3 3 8 1 3 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 26 97 86 73 28 75 51 47 31",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "71 63 98 49 39 41 75 84 23 60",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 10 50 12 82 9 2 87 7 80",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 22 92 16 45 24 62 33 59 52",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 46 92 37 99 95 99 47 55 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "71 52 180 276 227 335 89 80 476 95",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "148 64 263 83 69 370 383 174 290 421",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "367 475 167 468 228 71 96 238 336 407",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "267 282 136 185 203 375 362 260 312 312",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "235 73 231 377 64 488 464 323 264 432",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "258 442 161 318 434 479 152 398 465 84",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "55 154 312 343 168 226 451 125 109 385",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999 1000 1 999 1000 2 1 1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1 1 1000 2 999 999 2 999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}