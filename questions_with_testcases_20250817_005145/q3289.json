{
  "problem_code": "problems",
  "title": "Wild West",
  "tags": [],
  "text": "Once upon a time in the west... The quiet life of the villages on the western frontier are often stirred up by the appearance of mysterious strangers. A stranger might be a bounty hunter looking for a notorious villain, or he might be a dangerous criminal escaping the hand of justice. The number of strangers has become so large that they formed the Mysterious Strangers' Union. If you want to be a mysterious stranger, then you have to apply to the Union, and you have to pass three exams that test the three most important skills: shooting, fist-fighting, and harmonica playing. For each skill, the Admission Committee gives a score between 1 (worst) and m (best). Interestingly enough, there are no two members in the Union having exactly the same skills: for every two member, there is always at least one skill for which they have different scores. Furthermore, it turns out that for every possible combination of scores there is exactly one member having these scores. This means that there are exactly m3strangers in the union.Recently, some members left the Union and they formed the Society of Evil Mysterious Strangers. The aim of this group is to commit as many evil crimes as possible, and they are quite successful at it. Therefore, the Steering Committee of the Union decided that a Hero is needed who will destroy this evil society. A Hero is a mysterious stranger who can defeat every member of the Society of Evil Mysterious Strangers. A Hero can defeat a member if the Hero has a higher score in at least one skill. For example, if the evil society has two members, Colonel Bill, with a score of 7 for shooting, 5 for knife throwing and 3 for harmonica playing, and Rabid Jack, with a score 10 for shooting, 6 for knife throwing and 8 for harmonica playing, then a Hero with score 8 for shooting, 7 for knife throwing and 3 for harmonica playing can defeat both of them. However, someone with a score of 8 for shooting 6 for knife throwing and 8 for harmonica playing cannot be the Hero. Moreover, the Hero cannot be a member of the evil society.Your task is to determine whether there is a member in the Union who can be the Hero. If so, then you have to count how many members are potential heroes.InputThe input contains several blocks of test cases. Each block begins with a line containing two integers: the number 1 ≤ n ≤ 100000 of members in the Society of Evil Mysterious Strangers and the maximum value 2 ≤ m ≤ 100000 of the scores. The next n lines describe these members. Each line contains three integers between 1 and m: the scores for the three skills.The input is terminated by a block with n = m = 0.OutputFor each test case, you have to output a single line containing the number of members in the Union who satisfy the requirements for becoming a Hero. If there is no such member, then output0. It can be assumed that the output is always at most 1018.ExampleInput:3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0Output:848\r\n19\r\n999999999992Warning: enormous input/output data, be careful with certain languages",
  "sample_input": "Input:3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0Output:848\r\n19\r\n999999999992",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WILD",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "3 10\r\n2 8 5\r\n6 3 5\r\n1 3 9\r\n1 3\r\n2 2 2\r\n1 10000\r\n2 2 2\r\n0 0",
      "expected_output": "848\r\n19\r\n999999999992",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3\n3 6 2\n8 1 2\n7 7 8\n8 8\n9 6 3\n8 5\n8 1 5\n8 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n9 4 7\n4 4 9\n9 2 3\n3 3\n5 1 5\n7 10\n7 6 3\n5 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 8\n9 3 1\n10 1 5\n9 5 3\n6 9\n9 8 4\n3 2\n10 9 3\n10 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 64\n12 37 4\n89 97 68\n88 72 74\n26 33\n55 92 78\n66 14\n1 69 53\n34 43",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 25\n9 38 73\n59 60 27\n20 63 97\n73 46\n64 91 98\n55 78\n6 50 88\n91 85",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "31 45\n29 94 97\n47 90 3\n56 7 18\n94 82\n18 46 92\n54 78\n38 8 75\n88 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "28 31\n52 27 7\n25 85 34\n60 8 91\n23 89\n12 44 11\n57 44\n9 78 25\n40 50",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "37 98\n82 30 90\n16 59 29\n65 73 14\n5 70\n13 48 89\n37 5\n36 65 17\n67 14",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "35828 40551\n13180 44140 5666\n33379 35298 7855\n13309 45553 16765\n43942 14405\n9158 41340 9218\n35180 35314\n43786 25018 24432\n39109 21506",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "8200 29042\n13430 5618 15816\n7430 25976 49989\n23524 48441 17877\n32758 30126\n18873 36837 33707\n25557 32761\n19570 31482 22186\n21764 15359",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "48737 14944\n24784 34873 13900\n18153 15881 35944\n12062 47494 12088\n37653 17254\n9821 28667 22342\n12052 49875\n18500 48199 17961\n48542 21174",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "26989 27266\n5883 41193 31062\n16412 27133 9383\n32729 9043 24256\n31939 14127\n19628 21212 31911\n35111 9546\n44035 23240 33960\n21866 47265",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "44571 46961\n10799 27413 16261\n39910 19064 45604\n16799 43847 7290\n35200 45213\n17535 42002 26021\n35326 12458\n12685 44614 32748\n5606 31150",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "29824 13160\n12467 12381 13547\n24356 23985 25178\n19267 14088 46854\n35625 43399\n39528 43818 11126\n23166 38710\n42272 34360 30291\n47048 12803",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "28423 15491\n11209 41353 23025\n30737 31792 33750\n11473 29573 30042\n17812 24182\n27734 39232 15659\n15682 28190\n40341 27997 42173\n47992 35835",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n100000 99999 100000\n1 1 2\n2 1 99999\n1 2\n100000 1 100000\n100000 1\n2 100000 1\n1 100000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 1\n1 1 2\n1 100000 2\n99999 2 2\n99999 2\n100000 2 2\n99999 2\n100000 99999 100000\n2 100000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:02"
}