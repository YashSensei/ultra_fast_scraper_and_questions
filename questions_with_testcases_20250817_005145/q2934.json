{
  "problem_code": "problems",
  "title": "Grand Reward",
  "tags": [],
  "text": "Grand is one of the best companies every month, The manager chooses the best employee and rewards him. This month there are 4 employees do the same effort Sameh, Ameen, Shafeek and Atef but the manager will give reward to one only, He got a good ideaLet's say that the 4 employees will stand in someway like that every employee in one of the four sides east (Sameh), north (Ameen), west( Shafik) and south (Atef) then, there's a square matrix of  width and height N×N among them first element in matrix will start with 1 then next element increase by 1 from left to right and from top to down until N×N like this:Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         AtefThen let's rotate the matrix T turns 90 degrees clockwise per turn and the winner is the person who the sum of his side is the greatest.For example let's say that T=4 and N=3,first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      AtefAtef wins because the sum of his side is 7 + 8 + 9 = 24 and it's the greatest.It's your job now create a program that do this job.InputTwo integers the size of the matrix N (3 ≤ N ≤ 25), and the number of turns (1 ≤ T ≤ 109).OutputThe final result of the matrix and the employee who will get the reward (Sameh, Ameen, Shafeek, Atef).ExampleInput:3 4Output:Atef\r\n1 2 3\r\n4 5 6\r\n7 8 9Input:4 3Output:Shafeek\r\n4 8 12 16\r\n3 7 11 15\r\n2 6 10 14\r\n1 5 9 13",
  "sample_input": "Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         Atef",
  "sample_output": "first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      Atef",
  "link": "https://www.spoj.com/problems/GR",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "Ameen\r\n         1 2 3\r\n  Sameh  4 5 6  Shafeek\r\n         7 8 9\r\n         Atef",
      "expected_output": "first rotation           second rotation            third rotation           fourth rotation\r\n         Ameen                     Ameen                     Ameen                     Ameen\r\n         7 4 1                     9 8 7                     3 6 9                     1 2 3\r\n  Sameh  8 5 2  Shafeek     Sameh  6 5 4  Shafeek     Sameh  2 5 8  Shafeek     Sameh  4 5 6  Shafeek\r\n         9 6 3                     3 2 1                     1 4 7                     7 8 9\r\n         Atef                      Atef                      Atef                      Atef",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "fbvw\n10 9 1\n10 10 6\nd 2 10 3 woyhtm\n4 5 5\nrojajd",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "wwqbuxwcyp\n2 4 7\n3 1 8\nzcawv 3 10 10 nazp\n2 10 3\nxljeen",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "mvfswloc\n6 10 5\n1 3 1\nxza 7 4 5 rxcfisn\n10 8 6\nanbv",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "nq\n13 24 4\n9 8 2\nz 21 17 5 nkhluqv\n21 16 7\napyrfn",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "gf\n14 14 2\n25 25 11\naqvr 17 11 9 kykbtl\n11 23 4\noglsplky",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "gexqd\n18 13 25\n6 8 4\nwi 7 23 13 igt\n10 14 11\nrryxin",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "vc\n8 1 6\n21 21 4\nwfsm 24 11 11 pcq\n11 17 10\nf",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "htgntxrq\n7 3 12\n24 17 24\nh 17 17 18 o\n18 3 25\neox",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ilqqkgzfz\n3 4 8\n5 3 7\nvgoan 2 12 7 dlwiix\n2 8 12\nx",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "mv\n5 9 5\n10 6 3\nqcc 11 9 4 jlo\n5 10 7\nrhxbdw",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "ymozfbnvq\n2 6 4\n2 2 6\nooc 12 7 8 roixv\n5 6 11\nfe",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "j\n7 10 3\n4 6 3\ni 10 3 1 l\n1 12 11\nta",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "ulps\n2 4 5\n9 3 2\nrjbn 1 4 7 lf\n4 9 4\nc",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "nmqevorrge\n1 12 7\n6 5 6\nrdwt 7 12 1 dpbahm\n10 11 3\nsjmbrtkf",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "lqcdmbf\n11 11 10\n12 11 10\nweb 12 8 11 q\n3 5 2\nhsxse",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "stmtiqnei\n25 25 25\n25 25 25\nqhm 25 25 25 knm\n25 25 25\nuaplg",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "evyptiy\n25 25 25\n25 25 25\nlrrzq 25 25 25 i\n25 25 25\nizsgi",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "iq\n24 24 24\n1 24 1\nz 25 25 25 ojkxfq\n25 2 2\nx",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "chfmhkc\n2 1 2\n2 25 2\nv 2 24 24 s\n2 24 24\ndwrquqa",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}