{
  "problem_code": "problems",
  "title": "Pilots",
  "tags": [],
  "text": "EnglishVietnameseCharlie acquired airline transport company and to stay in business he needs to lower the expenses by \nany means possible. \nThere are N pilots working for his company (N is even) and N/2 plane crews needs to be made. A \nplane crew consists of two pilots - a  captain and his  assistant. A captain must be older than his \nassistant. Each pilot has a contract granting him two possible salaries - one as a captain and the other as \nan assistant. A captain's salary is larger than assistant's for the same pilot. However, it is possible that an \nassistant has larger salary than his captain.  \nWrite a program that will compute the minimal amount of money Charlie needs to give for the pilots' \nsalaries if he decides to spend some time to make the optimal (i.e. the cheapest) arrangement of pilots \nin crews.InputThe first line of input contains integer N, 2 ≤ N ≤ 10,000, N is even, the number of pilots working for \nthe Charlie's company. \nThe next N lines of input contain pilots' salaries. The lines are sorted by pilot's age, the salaries of the \nyoungest pilot are given the first. Each of those N lines contains two integers separated by a space \ncharacter, X i Y, 1 ≤ Y < X ≤ 100,000, a salary as a captain (X) and a salary as an assistant (Y).OutputThe first and only line of output should contain the minimal amount of money Charlie needs to give \nfor the pilots' salaries.Sampleinput \n4 \n5000 3000 \n6000 2000 \n8000 1000 \n9000 6000 \n \noutput \n19000input \n6 \n10000 7000 \n9000 3000 \n6000 4000 \n5000 1000 \n9000 3000 \n8000 6000 \n \noutput \n32000",
  "sample_input": "input \n4 \n5000 3000 \n6000 2000 \n8000 1000 \n9000 6000 \n \noutput \n19000",
  "sample_output": "input \n6 \n10000 7000 \n9000 3000 \n6000 4000 \n5000 1000 \n9000 3000 \n8000 6000 \n \noutput \n32000",
  "link": "https://www.spoj.com/problems/MPILOT",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "input \n4 \n5000 3000 \n6000 2000 \n8000 1000 \n9000 6000 \n \noutput \n19000",
      "expected_output": "input \n6 \n10000 7000 \n9000 3000 \n6000 4000 \n5000 1000 \n9000 3000 \n8000 6000 \n \noutput \n32000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "x\n7\n5 4\n4 7\n10 9\n10 6\notbkl\n10",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "dvodzpt\n9\n9 3\n9 3\n3 3\n1 10\nglc\n1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "udzlzkk\n10\n10 3\n7 5\n6 1\n10 3\nwsrgszvznpr\n5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "bfp\n2\n5 6\n9 9\n1 7\n1 7\ngqejqrdkw\n5",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "lik\n6\n3 7\n4 4\n10 1\n4 3\nz\n2",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "l\n9\n9 7\n6 2\n3 8\n2 4\npbushsulw\n7",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "ko\n8\n9 4\n8 6\n1 1\n9 2\nblsehtvhie\n7",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "dfeffi\n5\n3 1\n7 3\n8 3\n8 3\ngbmzygvg\n2",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "mzln\n4\n2 1\n2 5\n4 4\n1 4\ngzvvcksrlp\n1",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "we\n5\n2 1\n5 1\n1 5\n5 5\njiywswksbh\n3",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vvpz\n5\n1 3\n4 5\n4 4\n4 4\nyfeycszgk\n4",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "mqrif\n1\n1 2\n2 1\n3 5\n3 1\nwjxswm\n5",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "mhp\n3\n3 5\n3 1\n1 5\n1 1\nmughdcwlxp\n5",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "dnqwuvlp\n5\n5 5\n1 4\n3 4\n4 5\npxnzhtl\n2",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "elhuytvuu\n5\n3 3\n5 2\n2 5\n3 3\nlerdfnajhzs\n5",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "i\n10\n10 10\n10 10\n10 10\n10 10\nxpqnusuj\n10",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "dvuzx\n10\n10 10\n10 10\n10 10\n10 10\ny\n10",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "qaoslulrj\n10\n9 1\n10 2\n9 2\n1 1\nyeyhuckyyec\n1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "qaivyzx\n10\n2 10\n1 10\n2 9\n10 10\nquaxewujc\n1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:34"
}