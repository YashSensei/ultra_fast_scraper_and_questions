{
  "problem_code": "problems",
  "title": "love and traffic",
  "tags": [],
  "text": "Arjun is very smart, hence hasQvalentines.He lives in the stateAwhich is a matrix of sizeN x M, where each cell(i, j)represents a city. He lives in the city(S1, S2). HisQvalentines live in different cities. He is supposed to attend all his valentines but he can't do so due to constraints of time. So he decides to celebrate this festival of love with the valentine who lives closest to his city.In a single step, he can move from any cell(i, j)to the4neighboring cells i.e.(i+1, j), (i-1, j), (i, j+1)and(i, j-1).But some cities have serious traffic problem. It is impossible to penetrate the traffic in those cities. So Arjun will avoid passing through them while going to his destination. These cities have value*. All other cities have value1.He wants to find out the number of steps required to reach his closest valentine.Since he is more of a philosopher, he struggles with the math. So it's your job now to help him find out.InputThe first line of input contains3space separated integersN,MandQwhereNandMdenotes the dimensions of the matrixA, andQdenotes the number of valentines.Each of the nextNlines contain a string of lengthM, where each character is either1or*as described above.The next line contains2space separated integersS1andS2denoting coordinates of city Arjun lives in.thenQlines follow, each line containing2space separated integersDiandDjdenoting the coordinates of city of that particular valentine.OutputPrint a single integerZdenoting number of steps to reach nearest valentine. If there is no path possible between(S1, S2)and any of(Di, Dj), print-1.ExampleInput:5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1Output:2ExplanationTo reach the nearest city, he takes the following path:(2, 3) → (3, 3) → (3, 4).",
  "sample_input": "Input:5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LTRAFFIC",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "5 4 4\r\n11*1\r\n*11*\r\n*111\r\n1111\r\n111*\r\n2 3\r\n5 1\r\n3 4\r\n2 4\r\n5 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9 7\n6 9\nxmfpq\n7\nkggmrov\n2\nomrevpd\n6\n10\nfpsrygk\n3 6\n3 4\n5 10\n4 9\n5 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4 10\n1 6\nlixp\n1\nat\n5\nhmtl\n2\n3\nod\n7 9\n5 7\n5 8\n7 2\n2 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 8\n3 9\ntioo\n4\nch\n10\nstmsrv\n10\n9\nghnzpw\n9 5\n3 9\n2 3\n1 7\n10 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 77 34\n81 78\nhsqktkw\n54\nbzxj\n63\ncisexgds\n96\n11\nadiwsktc\n6 20\n69 8\n93 52\n61 56\n88 8",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "84 15 84\n2 95\nljrt\n11\nbowfayd\n96\nnmnoexs\n63\n55\ncrhs\n31 55\n86 62\n24 97\n77 20\n71 48",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "75 84 64\n84 36\nodqkpao\n7\ngfekvg\n70\njtpkws\n30\n90\ngusykkq\n78 48\n49 36\n85 99\n94 10\n59 27",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 56 69\n52 5\nezl\n44\negt\n30\nj\n90\n50\njuodnvw\n37 64\n77 32\n13 30\n42 24\n13 42",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "42 73 24\n2 98\nnhlesdx\n90\nwqitii\n26\nfnpste\n43\n1\ncito\n20 31\n58 91\n37 56\n19 63\n56 22",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "124 251 466\n140 208\ngaxfcj\n412\ntdqdbkrb\n334\nh\n334\n226\nx\n228 458\n163 237\n154 444\n375 176\n152 208",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "273 248 147\n102 449\noubdcmb\n460\ndusoz\n313\nsukijxy\n99\n223\noucfspz\n76 111\n109 167\n50 161\n189 462\n456 194",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "195 88 269\n293 106\netowa\n354\nobpemsq\n318\nkrnbo\n207\n402\nontktos\n221 467\n370 299\n251 439\n243 498\n401 309",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "433 338 335\n439 493\nifbzapwm\n132\nifgrgrpa\n148\nvwpt\n439\n373\ns\n408 273\n276 322\n459 61\n129 135\n499 230",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "375 353 225\n364 66\ndshwju\n405\nnph\n130\nfoyjpe\n196\n477\nithv\n428 362\n389 350\n190 205\n316 51\n237 367",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "229 284 339\n271 317\nxf\n105\njgprga\n211\nxigecbz\n93\n315\nf\n456 129\n82 235\n62 184\n344 116\n189 90",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "368 164 105\n458 184\ne\n368\nxk\n465\nvxkrqeo\n254\n338\nzhshkni\n200 465\n57 267\n116 426\n133 354\n228 95",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\nrxhk\n1000\nzcjhovlr\n1000\nik\n1000\n1000\nmkjnkyh\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\ngwtq\n1000\nunlwydb\n1000\nswewpux\n1000\n1000\np\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 999\n1000 1\nhzw\n1\naqlaxuo\n1000\nbodm\n999\n1\natqcrtcx\n1000 1000\n1 1\n999 999\n2 1000\n999 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000 2\n1 2\nzlxk\n999\nebbd\n1\nh\n2\n2\nuftnhwpp\n999 2\n1000 1000\n2 2\n1 2\n999 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:43"
}