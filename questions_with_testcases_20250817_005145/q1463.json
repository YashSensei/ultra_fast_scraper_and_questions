{
  "problem_code": "problems",
  "title": "A1 Road",
  "tags": [],
  "text": "Our country needs to be connected by highways that need to be repaired\r\nevery once in a while. A committee chosen by the government of\r\nour country tries to continually improve the condition of the main highway\r\nimaginatively named “A1” by finding the first damage that needs to\r\nbe fixed.Starting with the first damage the highway is divided into\r\nsegments of the same length. A damage fixing team is then being\r\nsent to each segment containing damage. Since there usually are\r\nmuch more damages than teams available, it would be advisable to\r\ndivide the highway into segments of given length in such a way that\r\nthe number of segments containing damages is as small as possible.There are N known damages on the highway, each described by an integer\r\nrepresenting its distance from the beginning of the highway in\r\nmeters. The length of a segment is M meters (an integer).\r\nThere are no damages within the first M meters. The first segment has\r\nto start within the first M meters of the highway. If the first segment\r\nstarts at the Kth meter then Lth segment starts at the (K+(L-1)*M)th\r\nmeter of the highway. A team can fix all damages occurring within\r\none segment starting with the first meter of the segment and ending\r\nwith the last meter of that segment.Write a program that will determine the minimal number of damage fixing\r\nteams needed to fix all damages occurring on the highway “A1” and all\r\npossible beginnings of the first segment.InputThe first line of the input file contains two whole numbers M and\r\nN separated by a space character, 1 ≤ M, N ≤ 100 000, where M is a\r\nlength of a segment and N is a number of damages occurring on the highway.The second line contains N whole numbers separated by a space character\r\nrepresenting the positions of all damages. Each of those numbers is\r\ngreater than M and less than or equal to 2 000 000 000 (two billion).\r\nThe sequence of N numbers given in the second line will always be\r\nstrictly increasing sequence.OutputThe first line of the output file should contain the minimal number\r\nof damage fixing teams.The second line should contain all the positions where the first\r\nsegment can begin. These numbers should be separated by a space character\r\nand they must form a strictly increasing sequence.SampleInput 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4Input 3:2 10\r\n3 4 7 8 12 13 14 15 20 21Output 3:7\r\n1 2",
  "sample_input": "Input 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1",
  "sample_output": "Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4",
  "link": "https://www.spoj.com/problems/MA1",
  "scraped_at": "2025-08-17 00:33:30",
  "test_cases": [
    {
      "input": "Input 1:3 5\r\n4 5 7 8 9Output 1:2\r\n1",
      "expected_output": "Input 2:4 3\r\n7 14 15Output 2:2\r\n1 2 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 5 9\nxvtz jb 9\n2 5 9 4 7 10 7\n6 4 5 7 r v\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 1\nigs xeu 7\n1 9 2 2 6 4 8\n5 9 7 4 q fx\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 9 6\ns ulvb 5\n7 4 8 9 2 5 4\n8 2 1 3 b hpfd\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "89 71 51\nziy z 90\n79 87 82 32 38 44 88\n69 2 39 86 uvkfluy qgwup\n73",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 10 11\nweir xan 45\n36 70 42 83 27 3 17\n87 96 24 2 wajdvb pru\n85",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "100 34 99\nzunov vehpr 64\n47 80 76 58 60 25 43\n18 21 55 98 da zz\n45",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 37 75\nsq c 54\n27 46 96 53 81 65 26\n59 78 61 37 ohr jwj\n5",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 22 26\nza ltkt 63\n31 34 63 56 98 99 96\n42 61 24 53 z nlwjv\n24",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "39457 42668 36776\nhdpx y 45557\n29723 19987 15844 34483 7800 35928 38606\n35754 48024 45979 7553 ldqa szxhi\n12415",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "7412 44791 47077\nru j 44326\n39427 16030 48363 26496 42356 27661 16005\n28683 45753 22112 44669 tydp tyvh\n21535",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "18323 28988 9439\nep iu 8608\n5918 47211 14734 29281 41024 21934 25743\n16872 37390 36731 40055 wkxcapd wtc\n21984",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18889 43085 16604\nlawh sl 18354\n38968 39156 17136 12956 9173 28239 7055\n8331 24667 10941 11997 fetnw u\n19278",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "9692 17541 38195\nzagak av 29330\n14970 19138 5754 24680 25146 11134 32631\n46552 15738 14196 41708 v egde\n46449",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42110 22980 46889\no ystg 26325\n23766 11099 29856 14953 36261 11340 46806\n13414 11852 23372 24179 pf er\n7287",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25280 25656 41901\nl q 9001\n40899 17340 20290 17449 11987 45370 37845\n11333 35420 20877 35943 llrjh e\n38565",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000\nhhx cv 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 ka hatd\n100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000\nfpv bnvbz 100000\n100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 bbvx gwioj\n100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99999 100000 100000\nhayjk klxt 2\n1 2 99999 100000 1 2 99999\n1 1 1 99999 qjrdp hfrmw\n99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99999 2 1\nbgq k 99999\n99999 1 100000 1 99999 1 2\n100000 1 100000 1 l exnb\n100000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}