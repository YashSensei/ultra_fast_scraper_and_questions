{
  "problem_code": "problems",
  "title": "Good Travels",
  "tags": [],
  "text": "It's that time of year again - the best ACM-ICPC team of all time is off to the World Finals! Being the best, they realize that a good performance starts before the contest itself - in order to get into the perfect mindset, they must have as much fun on the trip to the contest site as possible!The Team is interested in a network of N (2 ≤ N ≤ 106) cities (conveniently numbered 1..N), interconnected by M (1 ≤ M ≤ 106) one-way flights (similarly numbered 1..M). Their hometown is city S (1 ≤ S ≤ N), and the contest will take place in city E (1 ≤ E ≤ N, S ≤ E). Flight i goes from city ai (1 ≤ ai ≤ N) to city bi (1 ≤ bi ≤ N, ai ≤ bi), and no two flights connect the same pair of cities in the same direction. In general, no cities are guaranteed to be reachable from other cities by a sequence of flights. However, The Team of course knows that city E is reachable from city S - they're not about to break their streak of triumphant wins!Now, each city i has a fun value, fi (0 ≤ fi ≤ 106), associated with it. Along their trip, The Team will take time to have fun at every city they visit, including the first and last. However, though they can visit a city multiple times (including cities S and E), or even take a certain flight multiple times, surely this gets boring quickly - therefore, any city's fun can only be had up to once.The Team wants to determine the maximal amount of fun they can have on any sequence of flights that starts at city S and ends at city E. Naturally, every member on The Team is so intelligent that they've calculated this value in their heads (and are quite excited about it) - but can you?InputFirst line: 4 integers, N, M, S, and ENext N lines: 1 integer, fi, for i = 1..NNext M lines: 2 integers, ai and bi, for i = 1..MOutput1 integer, the maximal amount of fun The Team can have on their trip.ExampleInput:5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4Output:22Explanation of SampleThe network of cities and flights looks like this (the fun values of cities are shown below them):The optimal route that The Team can take goes through cities 1 → 3 → 4 → 5 → 4, yielding a total fun value of 5 + 5 + 10 + 2 + 0 = 22.",
  "sample_input": "Input:5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4Output:22",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOODA",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "5 6 1 4\r\n5\r\n4\r\n5\r\n10\r\n2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 5\r\n5 4",
      "expected_output": "22",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3 9 5\n8\n1\n3\n4\n9\n6 3\n8 8\n8 3\n2 9\n4 1\n2 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9 9 8\n9\n7\n4\n8\n7\n6 9\n9 6\n6 2\n9 8\n8 3\n6 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 8 6 7\n1\n7\n8\n3\n7\n9 7\n7 7\n1 5\n9 6\n3 5\n4 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "31 92 26 90\n78\n46\n70\n11\n18\n31 80\n53 19\n100 9\n16 58\n58 8\n70 21",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 31 34 81\n63\n97\n35\n94\n15\n92 63\n64 2\n20 14\n27 64\n66 32\n29 56",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 86 71 32\n40\n7\n3\n12\n26\n17 22\n74 32\n48 86\n98 69\n23 73\n12 51",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 54 57 4\n47\n70\n14\n92\n98\n70 45\n10 6\n26 97\n3 77\n35 95\n8 69",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "85 21 91 77\n13\n4\n9\n12\n17\n37 32\n97 36\n14 73\n21 62\n1 49\n77 60",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "36 24 38 46\n13\n31\n29\n16\n11\n52 46\n28 39\n46 17\n33 42\n52 53\n31 40",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "16 36 50 11\n26\n45\n44\n37\n33\n27 32\n15 31\n7 19\n19 12\n18 5\n26 33",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15 12 28 15\n43\n34\n36\n38\n30\n49 23\n15 8\n17 39\n36 41\n6 33\n42 49",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "33 14 32 27\n30\n21\n33\n15\n35\n7 52\n45 46\n6 13\n16 53\n46 20\n20 36",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "25 16 41 36\n23\n28\n43\n42\n33\n22 24\n29 7\n52 10\n12 44\n41 31\n34 21",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "13 5 33 21\n34\n47\n27\n10\n8\n5 22\n27 27\n7 15\n41 17\n13 24\n23 42",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "17 18 32 47\n45\n28\n46\n18\n31\n25 33\n50 13\n30 15\n36 37\n24 39\n21 50",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106\n106\n106\n106\n106\n106\n106 106\n106 106\n106 106\n106 106\n106 106\n106 106",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106\n106\n106\n106\n106\n106\n106 106\n106 106\n106 106\n106 106\n106 106\n106 106",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 1 2\n105\n105\n1\n1\n105\n106 106\n2 2\n105 105\n2 2\n1 1\n105 105",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 105 106\n105\n105\n2\n1\n1\n106 105\n106 105\n106 105\n1 1\n106 1\n106 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:22"
}