{
  "problem_code": "problems",
  "title": "Ajob Subsequence",
  "tags": [],
  "text": "You are currently studying the languageAjob(which means strange in English) from a renowned professor. The language has infinite number of letters in its alphabet (now you know, why it is called ajob).The professor taught youNwords, one by one. The number of letters in a word is equal to its place in the teaching order. Thus, the1stword taught by the professor has1letter,2ndword has2letters,3rdword has3letters ... theNthword hasNletters.All the letters within a word are distinct to each other.Now, you are handed an assignment. You have to choose any one of theNwords and form a subsequence from it. The length of the subsequence should beexactlyKless than the length of original word. For example, if the length of the chosen word isL, then the length of the subsequence should beL-K. If for any word,Lis smaller thanK(L < K), then you must not choose that word. Two subsequences are different to each other if, the lengths of them are different or they contain different characters in the same position.Find the number of ways you can complete the assignmentmodulo p(pwill always be aprime).InputThe first line containsT, the number of test cases. The nextTlines contain three space-separated integersN,Kandp.OutputFor each test case, print one integer in a single line, the number possible ways you can complete the assignment,modulo p.Constraints1 ≤ T ≤ 1002 ≤ N ≤ 10180 < K < N2 ≤ p ≤ 105,pis aPrime.ExampleInput:82 1 22 1 55 3 135 2 36 5 117 6 36 5 76 5 5Output:13227202",
  "sample_input": "Input:82 1 22 1 55 3 135 2 36 5 117 6 36 5 76 5 5Output:13227202",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AJOB",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "82 1 22 1 55 3 135 2 36 5 117 6 36 5 76 5 5",
      "expected_output": "13227202",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9 3 10 9 9 5 8 1 3 5 7 1 6 2 2 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3 8 4 10 10 3 3 6 7 10 5 7 4 8 10 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 9 4 7 6 1 7 6 3 3 1 4 8 1 9 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 8 4 28 76 39 99 89 97 23 27 40 39 73 71 84 76",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 76 52 85 79 73 8 99 21 59 48 4 17 89 79 37 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 3 46 43 3 61 87 6 96 76 48 92 15 73 27 60 85",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 30 31 24 95 93 37 41 81 48 41 89 56 74 65 5 71",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 63 63 35 71 62 98 25 73 88 40 87 40 81 21 12 62",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1841 3428 2414 3605 1561 1607 4582 2777 4470 902 4683 4677 4280 3059 4352 2974 1937",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "877 1239 1128 1906 1144 3350 2105 1015 3646 3294 4499 954 1186 2206 3119 4446 3054",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "3558 1801 4653 2564 2962 668 2919 4943 4242 1072 1014 1472 4778 4285 2461 4827 2337",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "3821 4584 3218 4443 922 3901 3269 4776 2109 677 2788 1270 3421 3545 1123 2941 4834",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2449 3397 4762 4662 4129 2651 1079 2015 4134 4100 3970 3459 4076 2361 3616 3505 3404",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1011 769 2088 1213 1091 583 1734 3200 3628 2361 2867 1359 3565 4937 4704 2012 4616",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "4982 4165 4613 1108 2414 1821 4842 1698 3865 2776 4084 4616 1456 3368 3601 3888 3286",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180 10180",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10180 10179 10180 10180 10180 1 10179 10179 10180 1 2 2 10180 10179 10180 10180 10180",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "10180 10179 10180 1 2 10180 10180 1 10179 2 10179 10180 10180 10179 10180 1 10179",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}