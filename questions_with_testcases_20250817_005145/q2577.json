{
  "problem_code": "problems",
  "title": "Mobile Service Hard",
  "tags": [],
  "text": "A company provides service for its partners that are located in different towns. The company  has three mobile service staff employees. If a request occurs at some location, an employee of  the  service  staff  must  move  from  his  current  location  to  the  location  of  the  request  (if  no  employee  is  there)  in  order  to  satisfy  the  request.  Only  one  employee  can  move  at  any  moment.  They  can  move  only  on  request  and  are  not  allowed  to  be  at  the  same  location.  Moving  an  employee  from  location  p  to  location  q  incurs  a  given  costC(p,q).  The  cost  function  is  not  necessarily  symmetric,  but  the  cost  of  not  moving  is  0,  i.e.C(p,p)=0.  The  company must satisfy the received requests in a strict first-come, first-serve basis. The goal is  to minimize the total cost of serving a given sequence of requests.TaskYou are to write a program that decides which employee of the service staff is to move for  each request such that the total cost of serving the given sequence of requests is as small as  possible.InputThe first line contains two integers, L and N. L (3 <= L <= 300) is the number of locations and N (1 <= N <= 3000) is the number of requests. Locations are identified by the integers from 1 to L. Each of the next L lines contains L non-negative integers. The jth number in the line i+1 is the cost C(i,j), and it is less than 2001.The last line contains N integers, the list of the requests. A request is identified by the identifier of the location where the request occurs. Initially, the three service staff employees are located at location 1, 2 and 3, respectively.OutputThe first line contains one integer, M, the minimal total cost of serving the input sequence of the requests. The second line contains exactly N integers. The ith number is the identifier of the service staff employee (1, 2 or 3) who will serve the ith request. If there are multiple possibilities, your program should output one sequence only; it does not matter which one.ExampleInput:5 90 1 1 1 11 0 2 3 21 1 0 4 12 1 5 0 14 2 3 4 04 2 4 1 5 4 3 2 1Output:51 2 1 2 2 1 3 1 3",
  "sample_input": "Input:5 90 1 1 1 11 0 2 3 21 1 0 4 12 1 5 0 14 2 3 4 04 2 4 1 5 4 3 2 1Output:51 2 1 2 2 1 3 1 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SERVICEH",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "5 90 1 1 1 11 0 2 3 21 1 0 4 12 1 5 0 14 2 3 4 04 2 4 1 5 4 3 2 1",
      "expected_output": "51 2 1 2 2 1 3 1 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 10 10 2 3 7 2 1 10 3 3 10 5 3 4 4 5 10 4 7 5 2 10 10 6 8 7 8 10 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 10 1 4 10 3 1 7 6 1 7 9 9 3 2 1 7 9 6 2 10 3 4 8 4 5 5 5 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 8 9 6 3 5 4 9 5 5 9 5 8 10 3 10 7 7 8 8 1 4 1 5 5 2 2 3 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 58 12 37 50 41 37 67 58 48 38 15 63 16 42 4 96 25 48 47 39 97 56 83 34 20 80 61 1 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "83 9 58 62 68 37 38 7 22 75 4 16 47 88 30 48 41 30 76 57 49 22 75 80 97 87 79 18 37 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 56 40 30 1 43 26 73 9 20 77 67 91 32 37 12 42 25 85 83 48 1 7 66 85 8 12 45 68 26",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "66 48 24 64 49 13 54 42 74 56 77 2 62 57 13 59 13 30 8 79 14 94 11 98 10 43 16 77 18 73",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 96 22 24 81 22 87 20 92 47 90 91 46 91 70 61 72 78 55 3 94 87 100 37 100 97 99 44 14 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "454 351 459 70 297 306 304 100 276 473 195 497 136 394 433 243 445 245 478 436 342 414 60 173 308 172 91 95 223 242",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "287 56 313 171 439 461 420 236 375 53 137 242 423 328 73 348 92 108 484 340 456 208 286 260 418 477 146 93 217 348",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "425 234 283 250 94 354 201 99 241 60 421 180 404 212 165 204 478 271 412 227 250 426 123 192 497 327 155 490 497 487",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "451 228 337 352 384 471 374 482 305 400 324 218 184 366 226 107 288 281 138 201 293 346 115 185 279 278 76 298 264 217",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "65 420 134 178 490 267 448 177 285 296 141 157 75 427 238 72 184 362 296 291 314 250 117 308 496 78 425 490 366 370",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "325 248 421 124 342 145 344 266 427 349 401 405 344 369 480 331 413 216 267 406 365 424 339 288 192 230 181 352 367 452",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "197 413 494 343 104 477 372 144 298 374 489 109 461 50 256 150 452 109 63 430 257 96 485 88 368 192 328 274 440 463",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 2 1 1000 1 999 1000 1 1 2 1 1000 1 2 999 2 2 2 2 1 2 1 1 2 999 1 1000 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 2 1 1000 999 1000 999 999 2 1 999 1000 999 1 1000 1 999 999 2 2 999 2 1000 1000 1 999 1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}