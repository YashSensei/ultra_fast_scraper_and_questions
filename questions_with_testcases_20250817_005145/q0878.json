{
  "problem_code": "problems",
  "title": "Goldbach graphs",
  "tags": [],
  "text": "Christian Goldbach sent a letter to Leonhard Euler in 1742 in which he made the following conjecture:\"Every even number greater than 4 can be written as the sum of two odd prime numbers.\"To find the solutions of Goldbach's conjecture for a given even numbern(n> 0), let us define the directed graph GG(n) (the Goldbach Graph ofn) as follows:Nodes are prime numberspsuch that 1 <p<n.For each nodepthere are zero or more outgoing edges, determined by the following rules:Ifp+q=nandq= 1, then no outgoing edges are related top.Ifp+q=nandq=p1p2p3....pkis the prime factorization ofq(assumingq> 1), then for eachi= 1..kan edgep→piis added to graph GG(n). Notice that eachpimust be a prime number. Besides, ifk= 1 thenqis prime and we have a solution to Goldbach's conjecture.For example:GG(2) is empty (it has zero nodes)GG(4) has two nodes and one edge.nodes = {2, 3}edges = {2→2}GG(6) has three nodes and three edgesnodes = {2, 3, 5}edges = {2→2, 2→2, 3→3}Notice that edge 2→2 appears twice in GG(6) because whenp= 2 thenq= 4 = 2×2Solutions to Goldbach's conjecture are cycles in graph GG(n) of the following types:Single-node cycles (Type I): a nodepwith only one outgoing edgep→p.Double-node cycles (Type II): two nodesp1andp2, such that each one has a unique outgoing edge (p1→p2,p2→p1).Your task is to inspect the directed graph GG(n) starting from a given nodexand searching every node reachable fromxfor a solution to Goldbach's conjecture.  The procedure is successful if a node belonging to a Type I or Type II cycle is found. In such a case the minimum distance fromxto the first node of the cycle found must be reported. Otherwise it should be stated that a solution can not be found.Your algorithm should take into account that GG(n) can contain other types of cycles besides the ones described here. Otherwise, it can run forever.InputThe input contains several lines each one with a different test case. Each line includes a pair of numbers representing the valuesnandx. You should assume thatnis even and also that 2 ≤n≤ 1000. Although 0 <x<nis true, do not assume thatxis a valid node of GG(n). The last line of the input contains the number 0 (it is not a test case).OutputFor each test case output a single line with one of the following:Solution found at distanceD.Solution not reachable.xis not a node!WhereDis the minimum distance fromxto the solution found, as described before.ExampleInput:2 1\r\n4 2\r\n6 2\r\n6 3\r\n12 3\r\n12 11\r\n14 7\r\n20 5\r\n38 11\r\n50 17\r\n540 340\r\n540 31\r\n540 33\r\n0Output:1 is not a node!\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution found at distance 1.\r\nSolution found at distance 2.\r\nSolution found at distance 1.\r\n340 is not a node!\r\nSolution found at distance 0.\r\n33 is not a node!",
  "sample_input": "Input:2 1\r\n4 2\r\n6 2\r\n6 3\r\n12 3\r\n12 11\r\n14 7\r\n20 5\r\n38 11\r\n50 17\r\n540 340\r\n540 31\r\n540 33\r\n0Output:1 is not a node!\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution found at distance 1.\r\nSolution found at distance 2.\r\nSolution found at distance 1.\r\n340 is not a node!\r\nSolution found at distance 0.\r\n33 is not a node!",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOLDG",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "2 1\r\n4 2\r\n6 2\r\n6 3\r\n12 3\r\n12 11\r\n14 7\r\n20 5\r\n38 11\r\n50 17\r\n540 340\r\n540 31\r\n540 33\r\n0",
      "expected_output": "1 is not a node!\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution not reachable.\r\nSolution not reachable.\r\nSolution found at distance 0.\r\nSolution found at distance 1.\r\nSolution found at distance 2.\r\nSolution found at distance 1.\r\n340 is not a node!\r\nSolution found at distance 0.\r\n33 is not a node!",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5\n9 9\n9 7\n1 8\n5 2\n9 8\n5 1\n3 1\n6 1\n4 10\n5 3\n2 2\n1 7\n8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8\n1 1\n7 4\n10 6\n6 8\n2 9\n2 3\n5 4\n3 3\n9 7\n9 6\n5 1\n9 6\n2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n4 6\n5 5\n4 6\n8 2\n10 1\n5 2\n9 7\n6 2\n1 4\n3 7\n1 9\n9 6\n7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "55 30\n72 47\n23 91\n77 38\n61 62\n15 16\n45 34\n65 32\n66 52\n37 16\n14 67\n34 46\n79 58\n96",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n96",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "100 24\n30 55\n63 85\n40 49\n76 80\n29 40\n74 60\n85 70\n13 48\n8 68\n97 95\n51 96\n74 53\n91",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n91",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 95\n16 56\n15 6\n56 72\n93 44\n1 47\n70 24\n31 71\n81 26\n73 61\n12 57\n31 36\n71 7\n60",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n60",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "68 85\n65 18\n24 54\n35 89\n40 48\n42 54\n10 35\n50 12\n77 21\n55 16\n69 36\n9 20\n9 45\n77",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n77",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 77\n13 50\n95 42\n95 18\n27 54\n32 92\n34 99\n68 56\n66 83\n18 4\n79 57\n18 1\n95 20\n97",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n97",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "386 429\n281 319\n219 440\n383 381\n292 171\n494 112\n324 214\n276 251\n93 460\n281 272\n248 116\n485 167\n374 322\n277",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n277",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "108 493\n394 409\n241 71\n79 195\n429 327\n79 173\n466 397\n329 445\n60 58\n278 355\n65 67\n160 159\n54 128\n322",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n322",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "460 499\n145 380\n150 334\n127 70\n229 175\n249 206\n344 360\n102 334\n102 51\n375 297\n318 391\n297 347\n242 70\n177",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n177",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "346 260\n143 84\n166 51\n433 387\n101 312\n82 274\n178 487\n142 128\n292 278\n258 228\n450 125\n160 324\n107 306\n425",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n425",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "311 472\n75 201\n366 448\n274 287\n336 342\n404 302\n156 258\n108 198\n153 423\n54 345\n400 186\n408 435\n320 475\n410",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n410",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "489 149\n232 296\n370 184\n157 355\n150 208\n426 193\n55 84\n130 280\n136 266\n335 93\n112 120\n381 395\n189 325\n138",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n138",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "240 437\n456 63\n365 242\n391 493\n288 298\n157 132\n176 180\n211 227\n180 184\n482 496\n383 399\n264 385\n487 474\n130",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n130",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999\n2 999\n999 1000\n1000 2\n1 1\n999 2\n1 2\n1000 1000\n999 1\n999 1\n1 999\n2 1\n999 1\n1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n1 2\n1000 999\n1000 999\n2 2\n1 2\n1 1000\n1 1000\n999 1000\n1 1000\n999 2\n1000 1000\n999 1\n999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n999",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:47"
}