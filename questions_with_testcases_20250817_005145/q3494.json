{
  "problem_code": "problems",
  "title": "Eko",
  "tags": [],
  "text": "Lumberjack Mirko needs to chop downMmetres of wood. It is an easy job for him since he has a nifty new woodcutting machine that can take down forests like wildfire. However, Mirko is only allowed to cut a single row of trees.Mirko‟s machine works as follows: Mirko sets a height parameterH(in metres), and the machine raises a giant sawblade to that height and cuts off all tree parts higher thanH(of course, trees not higher thanHmeters remain intact). Mirko then takes the parts that were cut off. For example, if the tree row contains trees with heights of 20, 15, 10, and 17 metres, and Mirko raises his sawblade to 15 metres, the remaining tree heights after cutting will be 15, 15, 10, and 15 metres, respectively, while Mirko will take 5 metres off the first tree and 2 metres off the fourth tree (7 metres of wood in total).Mirko isecologicallyminded, so he doesn‟t want to cut off more wood than necessary. That‟s why he wants to set his sawblade as high as possible. Help Mirko find themaximum integer heightof the sawblade that still allows him to cut offat least Mmetres of wood.InputThe first line of input contains two space-separated positive integers,N(the number of trees, 1 ≤N≤ 1 000 000) andM(Mirko‟s required wood amount, 1 ≤M≤ 2 000 000 000).The second line of input containsNspace-separated positive integers less than 1 000 000 000, the heights of each tree (in metres). The sum of all heights will exceedM, thus Mirko will always be able to obtain the required amount of wood.OutputThe first and only line of output must contain the required height setting.ExampleInput:4 7\r\n20 15 10 17Output:15Input:5 20\r\n4 42 40 26 46Output:36",
  "sample_input": "Input:4 7\r\n20 15 10 17Output:15",
  "sample_output": "Input:5 20\r\n4 42 40 26 46Output:36",
  "link": "https://www.spoj.com/problems/EKO",
  "scraped_at": "2025-08-17 00:34:21",
  "test_cases": [
    {
      "input": "4 7\r\n20 15 10 17",
      "expected_output": "15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 20\r\n4 42 40 26 46",
      "expected_output": "36",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 6\n1 4 2 8",
      "expected_output": "0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\n2 6 8 8",
      "expected_output": "0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 10\n4 4 3 2",
      "expected_output": "0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "79 85\n4 99 95 93",
      "expected_output": "0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 42\n98 22 84 65",
      "expected_output": "0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 12\n86 38 72 35",
      "expected_output": "0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "43 53\n93 7 30 29",
      "expected_output": "0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "54 40\n33 55 54 46",
      "expected_output": "0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "456336 482446\n141351 492161 231858 75074",
      "expected_output": "0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "249282 173718\n196253 186374 90231 74338",
      "expected_output": "0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "345002 427747\n166708 432498 295260 354922",
      "expected_output": "0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "327261 313980\n267164 346117 157301 81410",
      "expected_output": "0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "62686 315039\n80637 174187 124044 213094",
      "expected_output": "0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "274627 51539\n194170 492525 334953 269429",
      "expected_output": "0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "339267 417947\n475523 166233 371582 318745",
      "expected_output": "0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000",
      "expected_output": "0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 2\n1000000 1000000 2 1",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:09"
}