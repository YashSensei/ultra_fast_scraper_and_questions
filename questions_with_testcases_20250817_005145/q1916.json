{
  "problem_code": "problems",
  "title": "Valences",
  "tags": [],
  "text": "Mr. White has found a way to maximize the purity of crystals based on certain chemical compounds. He has observed that each compound is made of molecules that are linked together following the structure of a complete binary tree where every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Each node of the tree stores the valence of a molecule and is represented as an integer number. Mr. White uses an electronic microscope that dumps the molecule structure as a stream of integer numbers and would like to have your help on automatically obtaining the total valence of only the leaves of the given tree. For example, the sequence 4-3-2-6-0-3 represents the tree shown in the figure and the total valence of the leaves is 9.InputThe input contains several test cases, each one corresponding to a particular compound. Each test case consists of a single line starting with an integer N (1 ≤ N ≤ 1000000), followed by N integer numbers Vi representing the valences of each molecule separated by blank spaces (0 ≤ Vi ≤ 100).The end of input is indicated by a test case with N = 0.OutputFor each compound output a single line with the sum of the valences of the leaves of the tree.ExampleInput:6 4 3 2 6 0 37 1 1 1 2 1 2 10Output:96",
  "sample_input": "Input:6 4 3 2 6 0 37 1 1 1 2 1 2 10Output:96",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013J",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "6 4 3 2 6 0 37 1 1 1 2 1 2 10",
      "expected_output": "96",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 4 3 5 10 10 8 1 8 2 5 8 8 10",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 4 5 3 8 8 9 10 1 6 5 6 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 10 3 10 8 5 5 4 5 6 5 6 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 76 57 7 21 49 20 52 57 72 25 60 67 89",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 17 67 26 44 6 99 46 59 25 10 91 69 67",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "40 59 15 31 45 96 67 40 25 35 65 87 43 49",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "32 26 6 70 42 52 50 15 20 93 62 81 57 44",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 59 27 30 61 19 48 6 43 13 47 8 4 10",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "206643 461195 318876 157367 318679 435715 243586 477223 363036 110788 244441 177478 487786 368838",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "415036 389180 73560 164664 279447 465769 137739 206655 135551 452959 242069 86981 177212 74265",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "368824 50903 420996 61371 357904 448922 164929 114240 489754 73808 107040 411906 479168 138397",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "308741 100433 471231 334961 164218 224407 484672 297171 459474 327962 134513 161540 222632 187946",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "355439 439950 340235 127434 101407 117803 313247 67063 460540 175707 330955 386697 381003 186119",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "116468 482205 469733 383598 211968 270723 163085 499936 108732 89814 437807 360036 74212 101164",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "109588 351439 159695 89528 376870 65330 233924 89071 340440 120990 497372 123756 273262 319988",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 2 1 999999 2 999999 1000000 1000000 2 1 999999 1000000 999999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 1000000 2 999999 2 2 999999 999999 1000000 1000000 1000000 999999 1000000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:19"
}