{
  "problem_code": "problems",
  "title": "Absurdistans Teaparties",
  "tags": [],
  "text": "The people in Absurdistan like tea. In fact, it's their favourite drink. But normally, they don't drink their tea alone. They make big tea parties and I've heard the people there drink so much tea they're drunk after the parties. The sad side of the story is, that the people there don't do anything else than go to tea parties. They sit home alone waiting until someone sends them an invitation for a tea party on the national network Teanet™. This network has employed you as a developer.Strangely, the n citizens of Absurdistan have their n houses built on a line with the same distance between each two adjacent houses. To go with the car from one house to the next, one needs exactly c minutes. And in each house, exactly one citizen lives there.Teanet™ wants to create an app for the people to help them plan their tea parties. Suppose a citizen living in building x wants to make a tea party in t seconds. For this tea party, he wants to invite all the people living in houses between house l and r (l and r included). He wants to know how much time he has left until he has to send the invitations. We know for every citizen the time he needs to make himself ready. After a citizen receives an invitation, he immediately makes himself ready and then takes the car and goes to the citizen living in building x. We want to know the latest point in time such that x still is able to send the invitations and everyone is here when the party starts. But sometimes, people move out of a building and new people move in, so the time for a citizen in a building to prepare can change.And since the people return drunk from their parties, it may happen that there are accidents on the streets. If an accident happens, the street from building a up to building b is closed, but only in one direction. The people who don't live in a building between a and b don't care since they can use another street, but the people between a and b need some time more if they want to drive in the same direction as the accident. Because the people in Absurdistan don't really work, the effects of the accident are permanent...So there are three types of queries:\"invite\", followed by four numbers x l r t. x wants to invite all the people between l and r to his tea party. If he wants to start his team party in t seconds, in how many seconds is the latest point in time when he has to send his invitations? All the citizens in Absurdistan always take the direct way (they don't change direction and go back etc.). Note that the result may be negative if the person who wants to send an invitation is already too late. Important: Since the person who invites already knows that he will be inviting, he doesn't need to prepare himself.\"change\" followed by two numbers x v. The citizen in building x moved out and the new resident needs v seconds to prepare.\"accident\" followed by 3 numbers and a char: l r v d. There was an accident between l and r. All citizens between l and r need v more time if they travel in direction d. Note that this doesn't affect the people from outside if they want to go to a tea party at a location between l and r.Also note that all indices are 0-based and inclusive.InputFirst line: Three integers n q c. n is is the number of citizens / buildings, q the number of queries and c the time you need between two houses.On the next line, n values follow: the i-th value is the time the i-th citizen (citizen 0 lives in building 0 etc.) needs to prepare.Then q lines follow, each with a query as in the description.OutputFor each query of type \"invite\", output the number of seconds citizen x has left to send the invitation.Constraints1 ≤ n, q ≤ 1e50 ≤ c ≤ 1e4The preparation-time for any citizen will never exceed 1e4 and v in query \"accident\" is also not bigger than 1e4.Whenever we have a range l r, then 0 ≤ l ≤ r < n holds.ExampleInput:10 11 2\r\n0 0 0 0 0 0 0 0 0 0\r\ninvite 3 6 8 12\r\naccident 6 8 2 l\r\ninvite 3 6 8 12\r\ninvite 9 6 8 12\r\nchange 5 4\r\ninvite 3 5 8 16\r\nchange 7 6\r\ninvite 0 5 8 32\r\naccident 0 9 10 r\r\nchange 8 11\r\ninvite 5 0 9 50Output:2\r\n0\r\n6\r\n4\r\n10\r\n30Input:10 10 34\r\n10 23 1 43 12 22 84 17 41 24\r\ninvite 2 4 8 333\r\nchange 2 11\r\ninvite 8 4 9 542\r\naccident 0 9 10 l\r\naccident 0 5 11 r\r\naccident 6 7 22 l\r\ninvite 4 2 6 233\r\ninvite 8 2 6 542\r\nchange 3 1\r\ninvite 4 3 3 47Output:88\r\n390\r\n49\r\n316\r\n1Description of First ExampleCitizen wants to invite all the people between 6 and 8. Citizen 8 needs 10 seconds to get to citizen 3, so if citizen 3 sends the invitation in any later than 2 seconds, citizen 8 would be too late.Before the second invitation, there was an accident and Citizen 8 now needs 2 seconds longer because of this.In the 3rd invitation, the citizens travel to the right and the accident only affects people going to the left. Person 6 needs 6 seconds so if he gets the invitation any later than in 6 seconds, he's too late.Then, citizen 5 moves out and a new person moves in. This person needs a bit more time to get ready, and when person 3 makes anther party, he needs to send his invitation even earlier.Then citizen 0 makes an invitation etc., but then another accident happens, now influencing everyone going to the right. A new person moves in building 8 and citizen 5 makes another party. Person 9 needs 8 seconds to get to citizen 5. Person 8 needs 11 seconds to get ready, 2 second to avoid the (first) accident and 6 seconds to get there giving a total of 19 seconds. But person 0 needs even longer: Person 0 doesn't need to prepare, but since he wants to go to the right, he needs to avoid the (second) accident, giving him 10 extra seconds. But he then needs to go to person 5 and it takes him 10 seconds to get there, giving a total of 20 seconds until he arrives. So person 5 needs to send his invitation in 30 seconds.Edit: Feb 12th, 2020:Updated the task description to clarify that the person who invites doesn't need to prepareEdit: Mar 3th, 2020:Added Constraints",
  "sample_input": "Input:10 11 2\r\n0 0 0 0 0 0 0 0 0 0\r\ninvite 3 6 8 12\r\naccident 6 8 2 l\r\ninvite 3 6 8 12\r\ninvite 9 6 8 12\r\nchange 5 4\r\ninvite 3 5 8 16\r\nchange 7 6\r\ninvite 0 5 8 32\r\naccident 0 9 10 r\r\nchange 8 11\r\ninvite 5 0 9 50Output:2\r\n0\r\n6\r\n4\r\n10\r\n30",
  "sample_output": "Input:10 10 34\r\n10 23 1 43 12 22 84 17 41 24\r\ninvite 2 4 8 333\r\nchange 2 11\r\ninvite 8 4 9 542\r\naccident 0 9 10 l\r\naccident 0 5 11 r\r\naccident 6 7 22 l\r\ninvite 4 2 6 233\r\ninvite 8 2 6 542\r\nchange 3 1\r\ninvite 4 3 3 47Output:88\r\n390\r\n49\r\n316\r\n1",
  "link": "https://www.spoj.com/problems/TEAPARTY",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "10 11 2\r\n0 0 0 0 0 0 0 0 0 0\r\ninvite 3 6 8 12\r\naccident 6 8 2 l\r\ninvite 3 6 8 12\r\ninvite 9 6 8 12\r\nchange 5 4\r\ninvite 3 5 8 16\r\nchange 7 6\r\ninvite 0 5 8 32\r\naccident 0 9 10 r\r\nchange 8 11\r\ninvite 5 0 9 50",
      "expected_output": "2\r\n0\r\n6\r\n4\r\n10\r\n30",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 10 34\r\n10 23 1 43 12 22 84 17 41 24\r\ninvite 2 4 8 333\r\nchange 2 11\r\ninvite 8 4 9 542\r\naccident 0 9 10 l\r\naccident 0 5 11 r\r\naccident 6 7 22 l\r\ninvite 4 2 6 233\r\ninvite 8 2 6 542\r\nchange 3 1\r\ninvite 4 3 3 47",
      "expected_output": "88\r\n390\r\n49\r\n316\r\n1",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 5 5\n5 6 10 10 1 9 10 7 7 4\n10 7 5 1\nl 6 7 6 5\n3 4 4\nkxx 6 6 10 jfjst\n4 4 1 5\ngwsl 7 3 10 3\n5 1 2 3\nedi 6 5 1 4\n8 10\nwulooo 3 1\n10 3 5 2\nh 2 7 1 7\n10 1\nis 6 3\n10 7 6 5\nx 1 5 8 6\n4 1 3\nqwtktj 5 8 10 rh\n5 2\nlcyue 1 3\n5 8 7 1\nf 1 10 7 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 5\n5 9 2 7 3 7 9 10 3 7\n2 4 5 4\nwxgn 5 5 2 7\n7 6 6\nhrpw 10 8 5 yaa\n8 8 5 3\ne 6 1 4 10\n4 4 6 2\nsnrhqw 8 3 10 10\n3 2\nso 4 4\n4 5 4 3\nho 7 10 3 6\n2 5\nvwq 2 7\n4 3 2 9\ne 9 10 9 3\n4 5 3\nbffdt 7 10 9 r\n2 10\nm 9 4\n4 1 1 4\np 7 3 8 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 8\n6 5 4 6 4 6 3 7 8 3\n9 8 4 10\nugfei 10 5 10 6\n1 8 5\npjrfad 5 1 8 o\n9 4 7 7\nzunge 10 6 3 7\n1 3 10 3\ni 5 9 7 2\n8 8\nrni 1 3\n6 1 5 10\na 8 3 6 6\n4 2\njyp 6 5\n3 9 8 2\ni 6 7 10 8\n6 5 2\nbmnz 2 6 5 vzdu\n1 7\nznpx 9 3\n2 9 7 5\nhsmf 5 3 4 8",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "79 25 81\n17 77 75 79 16 32 66 37 100 44\n74 21 91 49\nhqluc 94 89 7 41\n61 41 33\nwvvhx 83 71 84 xkrx\n84 5 45 64\nllaniw 20 76 79 11\n2 25 14 17\nuapmgh 37 20 97 3\n55 28\nbvvtil 75 79\n87 28 100 60\nklmsy 1 100 45 77\n34 95\nekr 13 82\n27 6 9 57\nery 9 76 37 29\n61 34 60\nvthucstk 19 37 12 ppcy\n9 66\nvaul 46 9\n63 63 33 13\ntbeuvw 68 16 97 62",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 92 39\n7 63 35 86 5 5 23 82 43 61\n45 49 55 99\nlhjh 84 37 43 90\n88 100 57\nuv 60 43 68 h\n100 16 40 87\ncjjn 2 91 24 89\n9 36 18 78\nrcwfa 62 61 56 36\n37 65\npo 20 2\n38 46 30 52\nk 91 36 87 26\n73 34\ntfpxmc 96 13\n95 61 85 87\nass 32 51 85 40\n27 70 88\nbkjqxio 51 5 27 k\n86 39\nhgk 48 6\n62 34 53 9\ng 36 15 66 30",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 47 34\n84 99 42 6 77 33 73 35 5 74\n83 83 27 64\nicos 52 52 6 45\n40 94 36\nvucjm 82 3 49 fb\n41 8 94 20\nxt 4 6 46 92\n10 24 40 97\neqm 29 26 76 1\n32 56\nygj 56 89\n1 31 99 64\noejnuk 4 43 61 70\n43 44\ntrcd 46 76\n12 74 29 85\neqlc 64 69 85 94\n90 13 92\nwqzat 95 64 48 coz\n95 98\ni 87 51\n84 34 86 35\nvxlghy 55 1 13 73",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 84 7\n69 52 100 45 75 70 7 73 59 60\n61 19 58 32\ngwz 23 41 5 3\n94 25 55\neek 7 34 47 hld\n60 17 57 82\nqb 49 89 56 48\n75 43 47 14\nr 82 30 97 85\n63 74\niy 12 61\n66 38 98 65\nith 95 77 40 46\n53 62\nek 78 1\n23 89 95 4\naj 15 40 43 85\n60 78 19\nzutceg 1 46 21 z\n38 83\ndbj 3 76\n58 77 44 82\nbocfu 50 39 49 32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "41 68 51\n37 9 81 6 3 61 7 87 25 34\n20 15 32 84\nklsxeo 94 28 74 35\n82 49 83\ndp 69 50 62 kkwqg\n33 75 87 29\nkwcz 3 99 73 26\n92 3 93 41\nxsb 92 74 18 68\n72 16\nizz 80 13\n93 67 89 86\nfjzxxi 2 12 91 67\n17 99\nmo 16 91\n37 34 54 14\nf 7 91 82 40\n6 85 32\nfcrq 68 5 43 i\n84 58\novsf 7 13\n42 37 39 72\nonytpk 24 85 32 64",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "403 358 89\n291 293 387 382 411 421 272 302 336 223\n111 228 340 367\nhqbzuo 211 130 395 135\n274 237 359\neoubcb 473 290 133 cmfxn\n89 447 147 325\nxzsv 330 490 331 433\n396 431 214 494\ntuiamu 68 223 449 50\n411 198\nnl 377 320\n473 410 452 212\nre 337 482 115 102\n469 268\nwynmih 399 442\n78 284 349 174\nszpq 246 430 461 344\n188 410 55\nigr 484 412 86 oe\n431 492\nq 74 458\n106 359 205 213\ngasif 367 262 131 146",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "154 347 152\n227 59 226 352 137 472 485 215 75 309\n416 450 464 418\nughpd 137 301 494 362\n353 189 380\nssqf 483 317 274 u\n287 262 386 174\nbif 85 256 240 492\n180 172 226 282\ndzy 455 120 100 114\n467 264\nvyi 174 468\n50 187 219 108\nelqoxw 122 361 159 388\n210 288\nbuado 111 410\n407 283 476 325\nzzg 169 70 379 495\n343 81 362\nxpfawt 258 185 89 r\n460 408\ntqk 433 170\n59 485 452 159\nmukcp 235 111 99 361",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "136 118 283\n434 301 60 106 265 313 205 234 455 326\n375 495 324 258\nfear 295 476 100 465\n124 333 265\nrji 162 161 394 yn\n486 208 480 339\ncq 481 498 384 474\n404 314 177 232\nhhxz 257 458 96 322\n472 244\ngbfqyk 60 83\n244 464 440 472\nala 154 63 134 467\n128 494\nbl 424 361\n93 127 373 398\nawf 204 219 95 82\n227 214 196\nw 411 318 123 vd\n72 434\nlytupt 431 412\n140 345 338 284\nxhkp 80 159 340 330",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "69 52 414\n117 240 211 253 341 393 77 187 130 340\n402 400 277 82\neuy 478 224 114 344\n461 239 471\nvbpdvaap 101 108 51 uod\n337 54 206 215\nyeycr 107 177 428 179\n78 214 171 84\nlyeyhb 61 353 452 273\n343 374\njnqw 354 65\n304 129 277 113\nldor 426 213 408 145\n139 293\notzmet 78 484\n250 358 98 356\nn 99 253 444 394\n476 81 120\nhe 298 402 311 lvfz\n142 467\npssdz 293 386\n383 59 246 304\npg 339 73 362 239",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "358 174 418\n272 100 100 473 321 327 418 247 208 354\n182 156 178 460\nykq 220 445 79 155\n195 263 423\nymmxqy 219 269 251 owkv\n108 159 76 79\ngiubw 113 259 253 431\n226 165 257 208\nev 477 340 498 161\n50 263\nd 277 84\n229 486 228 176\nfpmw 338 246 353 155\n338 369\nrfpu 198 84\n462 243 219 170\npx 162 415 296 380\n463 428 489\nond 77 366 462 uhtsa\n106 377\nbxlsd 145 281\n196 246 198 162\noff 123 207 219 493",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "272 253 54\n189 459 52 247 194 154 289 119 376 483\n216 343 80 464\nr 448 126 210 418\n300 274 248\njuvky 295 489 221 beuu\n385 411 349 86\nerogsn 480 193 425 349\n139 211 233 125\nmjn 233 137 245 194\n319 157\nkzw 153 412\n460 416 401 408\ndpauva 361 498 220 436\n179 145\npwt 73 180\n156 449 305 422\nzbaum 351 68 109 104\n286 67 83\nc 352 370 329 zxd\n403 197\nbwicr 430 430\n144 499 381 147\nfc 262 211 459 262",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "313 106 460\n273 130 186 457 408 397 350 314 252 151\n177 472 307 195\ni 304 310 280 267\n201 121 394\nqre 342 177 58 durs\n391 495 252 214\nydzs 142 235 318 361\n281 436 256 169\nh 277 79 113 423\n89 61\nmb 407 213\n478 305 470 369\nx 483 451 458 254\n154 262\nfcpr 113 94\n390 232 312 280\nybvxdq 376 97 322 145\n481 326 366\ntirzvq 119 112 180 yoa\n184 470\nb 288 368\n202 148 87 121\nbkcwnu 103 51 136 246",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\ntkqvau 1000 1000 1000 1000\n1000 1000 1000\nxhspsyg 1000 1000 1000 ohhm\n1000 1000 1000 1000\nlp 1000 1000 1000 1000\n1000 1000 1000 1000\njo 1000 1000 1000 1000\n1000 1000\ntrixb 1000 1000\n1000 1000 1000 1000\nblek 1000 1000 1000 1000\n1000 1000\nn 1000 1000\n1000 1000 1000 1000\nbjm 1000 1000 1000 1000\n1000 1000 1000\nsfu 1000 1000 1000 i\n1000 1000\noqw 1000 1000\n1000 1000 1000 1000\njy 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000\newbqd 1000 1000 1000 1000\n1000 1000 1000\nq 1000 1000 1000 qpke\n1000 1000 1000 1000\ntf 1000 1000 1000 1000\n1000 1000 1000 1000\nro 1000 1000 1000 1000\n1000 1000\nyl 1000 1000\n1000 1000 1000 1000\ntyigs 1000 1000 1000 1000\n1000 1000\nzbg 1000 1000\n1000 1000 1000 1000\nrrxg 1000 1000 1000 1000\n1000 1000 1000\nf 1000 1000 1000 f\n1000 1000\nlirik 1000 1000\n1000 1000 1000 1000\npxay 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1000\n2 2 1 2 1000 1 999 2 1000 2\n999 2 1 1000\namf 2 999 999 999\n999 1 1000\nuizdoe 2 2 2 tilu\n1000 1 1 2\nj 1 1 1 2\n999 999 2 1\npayb 2 999 999 999\n1000 1\nkogx 1000 1\n1 1 999 1\nnmmjy 1 999 999 2\n1000 1000\npiq 2 999\n1000 2 1000 1\nhn 1000 999 2 1000\n2 1 1000\nf 2 2 2 km\n999 2\nnmp 1000 1\n1 2 2 1\nbwu 999 2 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}