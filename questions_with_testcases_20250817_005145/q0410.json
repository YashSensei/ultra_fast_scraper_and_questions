{
  "problem_code": "problems",
  "title": "Anti Hash",
  "tags": [],
  "text": "Given a baseBand a modulusM, the polynomial hash of a stringS, consisting of only lowercase letters(a-z)is defined as below:int Hash(string S, int B, int M){\r\n     long long H = 0;\r\n     for (int i = 0; i < S.length(); i++){\r\n           H = (H * B + S[i] - 'a' + 1) % M;\r\n     }\r\n     return H;\r\n}In other words, first the letters of the string are replaced by numbers (equivalent to their position,'a'gets mapped to1,'b'to2, ... and'z'to26). This is then considered to be a number in baseB(rightmost number is the least significant digit), and the value of this number inbase 10moduloMis called the polynomial hash of the string.Limak the bear loves to hack other contestants in Codeforces. After the recent educational round, he came to know that his friend Swistak used the polynomial hash function stated above to solve the hardest problem! And believe it or not, he was the only one to solve that problem! Limak is so angry, how can Swistak solve a problem which Limak himself couldn't solve? And worst of all, Swistak used hashing to solve that problem! Limak believes people who uses hashing have no real skill, gettingAcceptedjust implies getting lucky, nothing more!Later that night, Limak realized that he can hack the solution if he is able to solve the following problem efficiently. Limak felt triumphant, he will teach Swistak and that stupid hash function of his a lesson! But Limak is just a little bear, he is not very good at solving problems. Please help Limak solve the following problem so that he can hack Swistak's solution.Limak will give you a stringSof lengthN, consisting of only lowercase letters, a baseBand a modulusM. Your task is to find another stringT, satisfying all of the following constraints:Length ofTis exactlyNTconsists of only lowercase letters(a-z)TandSare two different stringsTandShave the same hash, i.e.Hash(S, B, M) = Hash(T, B, M)InputThe first line containsQ, denoting the number of test cases. Each test case consists of two lines. The first line of each case contains three integers,N, B, M. The next line contains the stringSof lengthN, consisting of only lowercase letters.Constraints1 ≤ Q ≤ 30105≤ N ≤ 106105≤ B < 231105≤ M < 231Si ∈ {a-z}B ≠ M and both B and M are prime numbersOutputFor each test case, output the stringTin a single line. It is guaranteed that such a string will always exist for the given constraints. If there are many solutions, you can output any of them.Sample Input1\r\n38 666666667 1000000009\r\nbbababbbbbbbaabaababaabbababbababababbSample OutputhisotomeseemslikeanotoriouscoincidenceNoteThe sample input contains a string of length 38 only for demonstration and clarity. There will be no such cases in the judge data, every case will strictly satisfy the constraints mentioned above.ChallengeYou might also enjoy:Anti Hash IIThe Revenge Of Anti Hash",
  "sample_input": "int Hash(string S, int B, int M){\r\n     long long H = 0;\r\n     for (int i = 0; i < S.length(); i++){\r\n           H = (H * B + S[i] - 'a' + 1) % M;\r\n     }\r\n     return H;\r\n}",
  "sample_output": "1\r\n38 666666667 1000000009\r\nbbababbbbbbbaabaababaabbababbababababb",
  "link": "https://www.spoj.com/problems/AHASH",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "int Hash(string S, int B, int M){\r\n     long long H = 0;\r\n     for (int i = 0; i < S.length(); i++){\r\n           H = (H * B + S[i] - 'a' + 1) % M;\r\n     }\r\n     return H;\r\n}",
      "expected_output": "1\r\n38 666666667 1000000009\r\nbbababbbbbbbaabaababaabbababbababababb",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "aytmn wqjfp rqmgc w gwz kyxz ood\n2\nippzc zimlr finn b xv\n9\nvqte l simst hdjol olia ywpr d azgq dxg\n6\nwyln nwpc qguze ji bp ynj j rkz h k k lzro i\nx\nvgp slhvz\nx",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "ctrow ek dcn k sbn b a\n8\nzcjwc cp hafmo vxsku ogjbr\n5\ni arlim cityr uflh bd jxs tx yd ulcn\n9\nmj qutjf a az dyv tkid vhy aiqq khl ja rsecz imdg uglzo\nj\nxohw gqqrq\nf",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "cnwg lrtluya rc a olq iu b\n9\nhu pe txuik y je\n6\nrvvx n sr g tunts hxj pi lkemsjy e\n1\nubpc ggx rm iyl amsa gdm kpd vdtef swiqn fetf jeoh svvy ww\nh\ntf ugnk\naz",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "l uoa r ixlmw ns bhrga yfcek\n65\ndz b pmjfz wpoyy v\n55\naclul fjve doqi jmsx jzt kkhw lidnz zlxyxed zgj\n56\nqdz m xkqyl ht kabbk lylv btrl u ve sm de ifsng qilsi\nsm\nkekm p\nyf",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "rxd jmbyerx nx qmt k qkab im\n27\nqbrg nxxuf d ficn k\n7\ndfjr jy fde banja okxyf m zhwk ampnpmikweu dy\n48\ndgx d hyq bayv r wj qfdgw nm a xeeyj xftx xbzi go\na\nfygb giltr\nzk",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ro oik ma geq gymh ab cqb\n21\nfuu zji jt agl joo\n13\nrbg zeiv hpfcd vxpkm hcwvh dy sva mew whug\n98\nfig mj thxl prul vvun yqmw n cjub wqbv fqjk nr qnv xmoa\nc\nodpf sy\nvp",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "as wdnl xstqu dm ig wioy zi\n89\ne uqyz y ixlld tdba\n13\nxfcpx h ifc vqr kmpgc lma tavln pbytge isfm\n76\nk mlg n r iclcy igewy tpgw j w lv vwzi wcq bhfmk\na\nmk d\nm",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "qtnvc xh wczje xci km z e\n44\nannr ggrz zy ztds slr\n2\nu dbj fh wk ffxr jet ty qwmfybnkjub ibx\n90\nsdytm y ecli fvoh ft j i ufm dibwb ijv a bs do\nj\nij jp\nt",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "zqx ixeiuxym kwg lh z g fnos\n38096\njcxvl br gsp tlm yo\n42443\nodnlm erze tejx oz b jtzk c p oxw\n36204\nuaiyf scb rgv xpn aeex o qbqbh zvv kbyk k kf xg hrg\ni\nhzgmmt udcf\nc",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "r lddxxo agsf ts lqotb wof slfpp\n23431\nsmfw dobt aeue s tmobj\n19238\neq vn ck zriz zybmg y a xuzv zqdos\n48489\nrck c x b apqr oghq jyv jb o bu gd b epo\nnj\nbk f\no",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "i ixf wnbs ju vg n vi\n29914\nzsvk wg x ipnh y\n41925\ndmc xeyre yqwu t bo n djewg jllg kutz\n41025\nh z hmrzf vrfq t lxw uay gsdyy okaxp sy lnihw gjfl p\nv\nkqyktf aczci\nbe",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "ehu cx cvneo upvkj n pwqf wxaa\n11224\nqvnah ecf xodh s tkkj\n33557\nwbn m rp gbyv uc ns cpvi kdchfxzbav cykp\n38124\npltwe i gd y bpp dd m pr t thzj sp zigx othop\nv\nulcqe ynaq\ne",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "miwe gzlzmfvuqj gcid i gfz hfjt lcby\n37722\nrj fusuy jwlig kzvc fxhh\n40581\ns s f nidn s e gfcm juuazwd jfghj\n20697\nbc ydw m nnj rkw izz bqkmz vr f qyeyh f chlwe g\na\nwuc lh\nr",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "nmrw uktmru idjq pprp lxe kxt hr\n33276\nhm texjl y gzygd rqxfp\n52548\nrby eg ah rda jnjra pj tlnlo pfikgvoivky qm\n38160\nku quf dpivu xri w o puc a sva wscoe egw he nrm\ni\nn e\nkp",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "whdq zf zh hy xyl ogw x\n45969\nevmi lyabe o n dha\n15121\nabtq bm rez rxko hf bh eq ocjkugqgzg shkwo\n5901\nrnihz e v wdquf e xv ri k jlgr xc zheh vq vsq\nl\ncozpy jjxvz\nt",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "mzzxg vr men i eq i ncqki\n106105\nx xo p ffddr hgvr\n106105\nqjlv skd ki jbyw a q nxm apbrwbp k\n106105\natui u zlp kd ppsc xpqzw ch yt cx ax taua bkjlo kgr\ncv\ntsyu fuzr\nqb",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "fe xgqu fwens ukwu ainn dxjbs mjy\n106105\nhyqx njxr aupbt azpsx whu\n106105\noy vxnh dqu gaclx dg kgavv lolnw qivye koipa\n106105\npyoo kyb kx szr zn mazzu eggut wnhu p d ax e argu\nd\ntvcs y\nmn",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "q mw wewtm pwvhd epaqi f jpp\n1\nuijau aebb veg ml yt\n106104\nab suha eywny iif c lrcbn v zeb m\n2\nlkzs g boe ash n yb ckk qktxm tvl cyke ap d xmuiv\nhs\npljcci p\niu",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "rup oilimulvfh sclly f bqzo tpqk wz\n106104\nxwcxl by hw wncx y\n106105\ncsb emhsv v t m ezov qxaaw ohdyd j\n106104\nbo mux uqnc hpql y xncrs ff ryvi gr scj xvpq cyifp ngop\nah\nmqa utk\na",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}