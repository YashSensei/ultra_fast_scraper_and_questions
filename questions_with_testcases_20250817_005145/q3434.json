{
  "problem_code": "problems",
  "title": "Set Cover",
  "tags": [],
  "text": "In the set cover problem there is a collectionC =\r\n{S1... Sm}of subsets of the universe [n] ={0 ... n-1},\r\nand one must\r\nfind a minimum-sized subcollection ofCthat still covers\r\n[n] (it may be the case thatSiandSjcontain the exact same\r\nelements for somei≠j).  Apath of length ris a graph onr+1verticesv0... vrwherevihas an undirected edge\r\ntovi+1fori = 0 ... r-1(these are the only edges).\r\nA set cover instanceIis\r\nsaid to bepath-realizableif there exists a mapping fromIto a\r\npath of lengthmwhere theSiare mapped to edges in the path\r\nand eachiin [n] is mapped to a pair of (not-necessarily distinct)\r\nverticessi,tion the path such that the edges lying betweensiandticorrespond exactly to the sets ofCthat\r\ncontaini.  Two setsSi,Sjmust be mapped to different edges on\r\nthe path ifi≠j.  You will be given a set cover instance that is\r\nguaranteed to be path-realizable and should output the size of a\r\nminimum-sized subcollection ofCstill covering [n].InputThe first line of the input is \"N M\" (1≤ N, M ≤ 300),\r\nwhereNis the size of the universe andMis the number of setsSiin the collection of subsets of{0 ... N - 1}.  What follows\r\nareMgroups of lines.  Theith group starts with one line\r\ncontaining |Si|, the size of theith subset.  If |Si| =0, the\r\ncurrent group of lines ends.  Otherwise the next line is a\r\nspace-separated list of the elements contained inSi.OutputIf [n] cannot be covered by a subcollection ofCthen\r\nyou should output-1, followed by a newline.  Otherwise, your output\r\nshould consist of two lines.  The first line is the size\r\nof a minimum-sized set cover.  The second line is a space-separated\r\nlist of the 0-based indices of the sets in an optimal set cover.ExampleInput:3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0Output:2\r\n1 2",
  "sample_input": "Input:3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0Output:2\r\n1 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SETCOV",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "3 4\r\n0\r\n2\r\n2 1\r\n2\r\n1 0\r\n0",
      "expected_output": "2\r\n1 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 10\n5\n5\n1 9\n4\n1 3\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 9\n10\n3\n3 9\n4\n10 3\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6\n2\n7\n8 7\n6\n1 4\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "69 32\n75\n98\n68 60\n52\n40 66\n34",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 50\n86\n25\n53 54\n22\n68 8\n82",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "79 40\n7\n27\n95 37\n34\n61 62\n36",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 14\n6\n72\n75 81\n31\n1 15\n10",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 77\n75\n49\n54 16\n65\n80 44\n47",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "73 229\n130\n169\n275 356\n268\n238 198\n332",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "279 453\n58\n311\n143 490\n403\n306 158\n170",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "306 273\n279\n302\n378 296\n293\n243 279\n279",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "494 81\n165\n149\n56 440\n349\n406 378\n285",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "321 336\n248\n478\n166 408\n161\n332 335\n273",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "259 132\n59\n106\n380 72\n77\n492 339\n115",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "282 264\n361\n224\n159 489\n89\n82 86\n56",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000 1000\n1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000 1000\n1000\n1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n999\n1000\n999 2\n1\n1000 2\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000\n2\n1\n1 999\n2\n1000 999\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}