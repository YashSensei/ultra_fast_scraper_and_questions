{
  "problem_code": "problems",
  "title": "Ski Valley",
  "tags": [],
  "text": "The Society of Sport of New Hampshire has decided to build a new attraction in White Mountains. For the first time, the world will see a ski-valley, a ski path that goes downhill then uphill. They believe that skiers can gain enough speed from going down in the first part in order to climb up the second part. To maximize the joy of visitors, they want to find the longest such path.To simplify calculations, they approximate the mountain terrain with a matrix of square fields and obtain the height of each field from the New Hampshire Geographical Institute. A ski-valley is a sequence of neighboring fields, such that height of fields only decreases along the sequence until some point, and then it only increases until its end. No field appears more than once in a ski-valley. Two fields are neighbors if they share a common edge. The length of a ski-valley is the number of fields in its sequence.More technically, the terrain is anMxNmatrix of fields, where(i, j)denotes a field in theith row andjth column, andh(i, j)denotes its height. A ski-valley is a sequence(x1, y1), (x2, y2), ..., (xl, yl), such that:for anyi(1≤i≤l-1), eitherxi= xi+1and |yi- yi+1| =1, oryi= yi+1and |xi- xi+1| =1(neighbors rule)ifi≠j(1≤i, j≤l), then eitherxi≠xjoryi≠yj(no repeating rule), andThere exists ak(1≤k≤l), such thath(x1, y1)>h(x2, y2)> ... >h(x_k-1, y_k-1)>h(xk, yk)<h(x_k+1, y_k+1)< ... <h(xl, yl)(down-up rule).The length of such ski-valley isl.They hire you, a reputable programmer, to write a program that will find a ski-valley of maximum length. If there are multiple ski-valleys with the same (maximum) length, you can choose any of them.Note: Yes, they were not cautious and also allowed a ski-valley to bo only downhill or only uphill, but your job is only to adhere to the specification they gave you!InputThe first line of the input containsMandN(1 ≤ M, N ≤ 60), respectively, separated by a space character. Each of the nextMlines containNnumbers, such that thejth number in theith line representsh(i, j)(-106≤ h(i, j) ≤ 106).  No two fields in the terrain are of the same height.  Numbers on a line are separated by a space character.OutputIn the first line of the output, write a single numberlmax, which is the maximum length of a ski-valley. In the nextlmaxlines write a description of any ski-valley of that length. In each of the lines, write two integers separated by a space character, such that numbersxiandyiin theith line represent(xi, yi), theith field in the ski-valley.ExampleInput:3 4\r\n2 6 7 16\r\n1 4 3 20\r\n9 8 17 12Output:9\r\n3 1\r\n3 2\r\n2 2\r\n2 1\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4",
  "sample_input": "Input:3 4\r\n2 6 7 16\r\n1 4 3 20\r\n9 8 17 12Output:9\r\n3 1\r\n3 2\r\n2 2\r\n2 1\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SKIVALL",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "3 4\r\n2 6 7 16\r\n1 4 3 20\r\n9 8 17 12",
      "expected_output": "9\r\n3 1\r\n3 2\r\n2 2\r\n2 1\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 10\n1 10 5 2\n9 3 7 5\n3 10 10 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n8 10 9 6\n3 5 5 6\n7 9 9 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8\n5 5 9 8\n9 10 3 4\n5 7 4 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 4\n13 44 22 6\n30 19 59 53\n7 4 35 59",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "51 53\n46 42 6 39\n1 29 34 25\n50 7 3 44",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 4\n41 39 15 9\n44 50 59 34\n57 40 7 58",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "18 2\n10 13 49 13\n17 46 27 2\n2 26 51 51",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 45\n48 9 10 6\n20 24 53 24\n29 34 17 58",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "21 13\n9 20 16 10\n12 12 3 18\n10 7 24 22",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "26 4\n27 19 15 19\n16 25 17 29\n28 24 9 5",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "27 8\n6 30 9 26\n25 13 20 3\n15 8 20 8",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 21\n5 24 11 23\n8 5 8 13\n8 16 16 11",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "27 30\n3 8 29 9\n25 17 7 30\n26 27 19 9",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28 29\n25 22 14 30\n20 7 17 17\n13 23 29 10",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25 25\n30 18 23 19\n27 19 23 29\n12 14 13 5",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "60 60\n60 60 60 60\n60 60 60 60\n60 60 60 60",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "60 60\n60 60 60 60\n60 60 60 60\n60 60 60 60",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n1 1 59 59\n2 1 59 59\n1 2 60 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "60 1\n1 60 60 1\n60 60 59 59\n2 2 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:07"
}