{
  "problem_code": "problems",
  "title": "Choosing a Palindromic Sequence",
  "tags": [],
  "text": "Given two sequences of words: X = (x1... xn) and Y = (y1... yn), determine how many binary sequences P = (p1... pn) exist, such \r\nthat the word concatenation z1z2...zn, where zi= xiiff pi= 1 and zi= yiiff pi= 0,\r\nis a palindrome (a word which is the same when read from left to right and from \r\nright to left).InputThe input begins with the integer t, the number of test cases. Then t test \r\ncases follow.For each test case the first line contains the positive integer n - the number \r\nof words in a sequence (1 ≤ n ≤ 30). The following n lines contain \r\nconsecutive words of the sequence X, one word per line. The next n lines \r\ncontain consecutive words of the sequence Y, one word per line. Words consist \r\nof lower case letters of the alphabet ('a' to 'z'), are non-empty, and not \r\nlonger than 400 characters.OutputFor each test case output one line containing a single integer - the number of \r\ndifferent possible sequences P.ExampleSample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
  "sample_input": "Sample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PALSEC",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "Sample input:1\r\n5\r\nab\r\na\r\na\r\nab\r\na\r\na\r\nbaaaa\r\na\r\na\r\nbaSample output:12",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n9\n7\n7\n3\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n5\n3\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n4\n10\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "17\n11801107\n47630810\n19374199\n13501995\n28811764\n88830457\n26341425\n79603185\n2523319\n20857122\n61488360\n90806627\n84156085\n84491076\n65079891\n59892914\n1653920",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n23211233\n1253799\n98488518\n41809877\n34567444",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n63538803\n10721581\n60359983\n44359573\n96802326\n96419766\n59139509\n94727582\n15677120\n8930352\n886044\n85183612\n98028534\n95526186",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n65980822\n86303987\n88037497\n24368903\n99008032\n53481088\n863128\n66867601\n57492643\n44726428\n9914661\n55479732\n19882124\n87854595\n44256837\n67525258\n66451365\n31036175",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n66326099\n36972766\n97919766\n65846854\n72218089\n3007272\n50965939\n77190490",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n18430\n63173\n11572\n38729\n70150\n31165\n56170\n50679\n27332\n80592\n20562\n5109\n22867\n85566\n30603\n92827\n55688\n39136\n77397\n64247",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n16883\n1906\n5819\n87248\n33409\n79857\n87260\n2557\n38958\n51122\n5576\n84148\n63083\n57392\n56308\n77164\n314\n28832\n1743\n56483\n31797\n32596\n85836\n11161\n81134\n94811\n52927",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n28251\n32481\n26664\n90949\n15431\n28066\n23916\n35094\n30034\n23174\n49337\n96427\n29989\n41137\n55156\n41094\n11302\n56202\n9747\n89164\n10810\n50905\n57816\n23842",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n35263\n56282\n39483\n89730\n91276\n29975\n58213\n53415\n63770\n25449\n40599\n31188\n88913\n29230\n12526\n64862\n77573\n21012\n74033\n83510\n79782",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n39255\n11221\n99502\n82141\n88757\n33394\n66637\n52849\n52090\n70447\n87771\n41884\n20851\n26892\n27140\n87012\n88340\n26162\n97525\n11943\n68237\n2369\n22655\n90618\n99137\n46088\n64713\n4944\n19766\n21876",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n95673\n47313\n67324\n96112\n44437\n32878\n47180\n73656\n77334\n15410\n96888\n75562\n77579\n117\n55840\n8708\n94628\n40022\n54036\n32117\n26075\n56777\n38621\n70755\n61381\n95060",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n66245\n28819\n48136\n20737\n1557\n63391\n35185\n55350\n33713\n42262\n63684\n18621\n10719\n23727\n31412\n84592\n87125\n33684\n80074\n94695\n42955\n56861\n7828\n77285\n50973\n28102",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n36386478\n692794\n66559512\n30915621\n7859081\n57245826\n10354895\n44831940\n63491646\n13494044\n27016351\n63600015\n47615082\n62184694\n63163836\n64673875\n15217573\n26591981\n27350157\n85513559\n76845546\n69086336\n58908366\n33542023\n29662835\n83710517\n72951620\n82657886\n25230762\n80114530",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n44929255\n10077950\n64727394\n88028985\n79583791\n70452217\n98549880\n15398475\n87740127\n24209598\n65904459\n24851622\n13246792\n74402566\n82893018\n25382754\n53848900\n31447827\n17266536\n16305158\n52048406\n42011703\n65034625\n72136587\n26417003\n15852243\n98098709\n50215296\n88308550\n24563647",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "2\n94437907\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}