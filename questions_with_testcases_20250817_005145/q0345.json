{
  "problem_code": "problems",
  "title": "Musketeers",
  "tags": [],
  "text": "In the time of Louis XIII and his powerful minister cardinal Richelieu in the Full Barrel Innnmusketeers had consumed their meal and were drinking wine. Wine had not run short and\r\ntherefore the musketeers were eager to quarrel, a drunken brawl broke out, in which each musketeer insulted all the\r\nothers.A duel was inevitable. But who should fight who and in what order? They\r\ndecided (for the first time since the brawl they had done something\r\ntogether) that they would stay in a circle and draw lots in order. A\r\ndrawn musketeer fought against his neighbor to the right. A loser\r\n\"quit the game\" and to be more precise his corpse was taken away by\r\nservants. The next musketeer who stood beside the loser became the\r\nneighbor of a winner.After years, when historians read memories of the winner they\r\nrealized that a final result depended in a crucial extent on the order\r\nof duels. They noticed that a fence practice had indicated, who\r\nagainst who could win a\r\nduel. It appeared that (in mathematical language) the relation \"AwinsB\" was not transitive! It could happen that the musketeerAfought better thanB,Bbetter thanCandCbetter thanA. Of course, among three of them the first duel influenced the final result. IfAandBfight as the first,Cwins eventually. But ifBandCfight as the first,Awins finally. Historians\r\nfascinated by their discovery decided to verify which musketeers could\r\nsurvive. The fate of France and the whole civilized Europe indeed\r\ndepended on that!TaskNpersons with consecutive numbers from1tonstay in a circle. They fightn-1duels. In the first round one of these persons (e.g. with the numberi) fights against its neighbor to the right, i.e. against the person numberedi+1(or, ifi=n, against the person numbered1).  A loser quits the game, and\r\nthe circle is tighten so that the next person in order becomes a winner's neighbor. We are given the\r\ntable with possible duels results, in the form of a matrix. IfAi,j= 1\r\nthen the person with the numberialways wins with the personj. IfAi,j= 0 the personiloses withj. We can say that the personkmay win the game if there exists such a series ofn-1drawings, thatkwins the final duel.Write a program which:reads matrixAfrom the standard input,computes numbers of persons, who may win the game,writes them into the standard output.InputThe number of test cases t is in the first line of input, then t test cases follow separated by an empty line.\r\nIn the first line of each test case integernwhich satisfies the inequality3  ≤ n ≤ 100is written. In each of the followingnlines appears one word\r\nconsisting ofndigits 0 or 1. A digit onj-th position ini-th line denoteAi,j.Of courseAi,j= 1 -Aj,i, fori<>j. We assume thatAi,i= 1, for eachi.OutputFor each test case in the first line there should be writtenm- the\r\nnumber of persons, who may\r\nwin the game. In the followingmlines numbers of these persons should be written in  ascending order, one number in each line.ExampleInput:1\r\n7\r\n1111101\r\n0101100\r\n0111111\r\n0001101\r\n0000101\r\n1101111\r\n0100001Output:3\r\n1\r\n3\r\n6The order of duels: 1-2, 1-3, 5-6, 7-1, 4-6, 6-1 gives a final victory to the person numbered 6. You can also check that only two persons more (1 and 3) may win the game.",
  "sample_input": "Input:1\r\n7\r\n1111101\r\n0101100\r\n0111111\r\n0001101\r\n0000101\r\n1101111\r\n0100001Output:3\r\n1\r\n3\r\n6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MUSKET",
  "scraped_at": "2025-08-17 00:33:11",
  "test_cases": [
    {
      "input": "1\r\n7\r\n1111101\r\n0101100\r\n0111111\r\n0001101\r\n0000101\r\n1101111\r\n0100001",
      "expected_output": "3\r\n1\r\n3\r\n6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n6\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "16\n50578386\n44913381\n74948986\n21259541\n89663021\n42461466\n18750093\n64062661\n76308346\n52053054\n78856104\n48683983\n38602505\n46686982\n47159072\n82331295",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n46748235\n20553838\n72464675\n19671995\n4551953",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n92942699\n87725020\n63975840\n16266004\n38958112\n50582472\n74776690\n62483845\n42607114\n28103987\n39363220\n69595250\n57303111\n31837073\n13304037\n76900078\n74369609\n95237696",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n83830563\n22041461\n65502126\n54091256\n58344704\n81538636\n74436119",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n47340437\n84033365\n25155392\n97008236\n172397",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "78\n81041\n39566\n33478\n17163\n12355\n53506\n69242\n14340\n15048\n48138\n97809\n3949\n72104\n9017\n21959\n93870\n35667\n75962\n27443\n97777\n95015\n41939\n5580\n29774\n81502\n121\n28789\n33813\n84333\n37136\n1460\n56501\n31\n90898\n55073\n59061\n60455\n60656\n4627\n14362\n78716\n42431\n74452\n31277\n27141\n43464\n45729\n6139\n91586\n90928\n79648\n57701\n26107\n21042\n2326\n34999\n22639\n21704\n21153\n68412\n30465\n37327\n39207\n93918\n94975\n29386\n61760\n67773\n54852\n79716\n17641\n64102\n2571\n86162\n2151\n83834\n72851\n34259",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "63\n94984\n18555\n78649\n19713\n68656\n76109\n165\n15801\n94042\n99470\n40514\n70009\n25005\n73230\n89990\n15638\n51700\n22161\n33140\n68001\n27774\n90194\n37771\n12239\n39668\n32064\n91699\n65206\n48093\n54661\n18308\n83248\n20925\n18911\n83469\n69682\n22397\n85953\n67869\n73409\n48308\n87897\n14984\n91143\n52279\n80735\n59198\n30936\n67206\n86879\n52397\n1916\n6343\n74620\n6752\n60283\n16545\n67426\n33540\n89772\n18969\n54331\n81553",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "67\n31661\n42237\n62367\n78469\n32664\n33134\n50476\n30685\n75625\n7708\n16416\n69559\n27518\n21546\n39343\n52094\n4187\n16154\n32448\n74568\n77791\n11255\n38725\n70405\n3383\n45525\n80487\n96241\n2253\n67227\n71459\n24777\n25674\n288\n2433\n83731\n53575\n90786\n66116\n2211\n95487\n3857\n70882\n73511\n71812\n43381\n41819\n25858\n51337\n99500\n2242\n42047\n7202\n69121\n18230\n74316\n92861\n30844\n7567\n77460\n77803\n60780\n4105\n21328\n68344\n35862\n73464",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n31466\n36383\n78439\n59813\n68710\n12112\n43534\n5647\n23946\n91974\n47912\n13657\n23381\n66760\n73058\n43416\n72238\n90666\n20355\n25289\n16399\n90704\n16981\n48424\n42840\n44237\n89970\n77299\n64642\n3713\n92251\n47649\n48028\n41987\n36222\n79872\n47278\n290\n52291\n58260\n25814\n39847\n52701\n63724\n64838\n50537\n72209\n47104",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "55\n79009\n93842\n32725\n51579\n5541\n39171\n22592\n62466\n3960\n6010\n38114\n6594\n22281\n1815\n26033\n6107\n70040\n59665\n79890\n89984\n7105\n78460\n93247\n48895\n43009\n1903\n16189\n24663\n42441\n90711\n62160\n96618\n55216\n56850\n15014\n39762\n24131\n52024\n67942\n74992\n28583\n51750\n78434\n42293\n79959\n58764\n35403\n2469\n48599\n23878\n31688\n17706\n54238\n85493\n36072",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n91183\n74809\n54790\n5222\n49057\n87128\n95639\n4469\n42386\n78917\n96363\n61360\n95958\n47080\n92583\n22253\n70338\n4368\n39068\n720\n2847\n73416\n42090\n37320\n13559\n37699\n71178\n77908\n47506\n94016\n96494",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "70\n20587\n21438\n24601\n45721\n38987\n12140\n97069\n48442\n40305\n12507\n89035\n42305\n82744\n79759\n16769\n26807\n34432\n6374\n13225\n96505\n42453\n88048\n51302\n65183\n7257\n22627\n67928\n44335\n75355\n88515\n33274\n29952\n67684\n63912\n1874\n23689\n1582\n41968\n23274\n99175\n20165\n18171\n43696\n30079\n99274\n16298\n17512\n80810\n9936\n84924\n73139\n49297\n23865\n79753\n52070\n17844\n82975\n74972\n96658\n28088\n69286\n58120\n72579\n25755\n705\n63294\n48589\n18657\n87801\n10676",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n18981730\n93275319\n16095644\n15812739\n29787957\n44569096\n58226369\n16327531\n35018374\n28333500\n67625698\n86106200\n97367842\n17172258\n75314083\n90493428\n94727928\n52709194\n38447596\n91418130\n24058011\n33008940\n53223029\n69285922\n28816173\n84661156\n52172587\n39944226\n95208811\n29749781\n76924294\n56420653\n89893418\n62756212\n90279296\n94380659\n73286272\n79216050\n55254164\n41490327\n97706895\n6190989\n65501433\n43267453\n96416915\n2984231\n97078354\n15026329\n29149111\n52221226\n66725564\n40262723\n37398223\n6778097\n14395974\n39612817\n25202894\n52151892\n99543099\n71325442\n19705289\n91496\n67810485\n44959626\n12743233\n84873665\n72472825\n7561131\n52518380\n31380187\n73931750\n3615143\n99102892\n92597717\n59089670\n61564962\n78634442\n38320884\n42210958\n73463716\n99537741\n10762573\n43393010\n24313861\n36927128\n35264822\n86988440\n43259881\n12615816\n32817222\n76886662\n11072708\n86035942\n81011944\n28362148\n16702808\n59871049\n9148622\n18953523\n26184587",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n27395579\n14594240\n94794828\n68374736\n32396207\n95098638\n9080071\n89072668\n30957172\n68948055\n63466170\n83105178\n31435221\n31012806\n38135858\n89323442\n76786663\n50476108\n30596183\n55864306\n34325434\n68412645\n30222695\n50659934\n87160400\n69033202\n70483633\n6796783\n37880796\n90220931\n4744579\n88514576\n46570968\n51449769\n64777681\n73818364\n52081086\n50576209\n66615691\n93142562\n96405729\n93960165\n97969583\n61612325\n35317658\n39319102\n85419646\n3531544\n89366095\n66483342\n26680754\n22226738\n96523441\n98426391\n81699594\n86507846\n34966450\n66822126\n12654501\n58461861\n30192207\n41483225\n45968220\n60680007\n27122046\n92828322\n40142720\n55274135\n90974227\n28338974\n84679962\n47554085\n4338853\n36554591\n19934329\n27954522\n3361667\n18587332\n81919769\n3164176\n89974870\n29234413\n1030563\n35784588\n16124477\n1571183\n13294017\n34186720\n22554967\n79215095\n43075797\n89140481\n59362207\n59238194\n19915856\n77594306\n70297235\n99947887\n28409410\n62296932",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n1\n1\n1\n1\n1\n100000000\n1\n61971729\n80144433\n1\n100000000\n100000000\n1\n1\n63983734\n100000000\n15748717\n100000000\n100000000\n1\n68287057\n84141681\n100000000\n1\n1\n15174982\n68477412\n75898321\n100000000\n1\n1\n25238149\n7863809\n46399720\n1\n42607405\n98597692\n1\n100000000\n100000000\n1\n1\n69345449\n100000000\n100000000\n6559173\n1\n1\n1\n1\n14983746\n1\n1\n41876057\n100000000\n1\n58482731\n1\n33812871\n1\n100000000\n1\n32899698\n98019697\n92109219\n100000000\n84051801\n100000000\n100000000\n100000000\n100000000\n6634723\n1\n66432372\n1\n100000000\n11620325\n100000000\n38138015\n100000000\n1\n1\n100000000\n32592179\n1\n47008596\n100000000\n100000000\n29844905\n77138394\n1\n1\n1\n100000000\n100000000\n62780731\n100000000\n1\n3316981\n32472046",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "2\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}