{
  "problem_code": "problems",
  "title": "Knights of the Round Table",
  "tags": [],
  "text": "Being a knight is a very attractive career: searching for the Holy Grail, saving damsels in distress, and drinking with the other knights are fun things to do. Therefore, it is not very surprising that in recent years the kingdom of King Arthur has experienced an unprecedented increase in the number of knights. There are so many knights now, that it is very rare that every Knight of the Round Table can come at the same time to Camelot and sit around the round table; usually only a small group of the knights is there, while the rest are busy doing heroic deeds around the country.Knights can easily get over-excited during discussions-especially after a couple of drinks. After some unfortunate accidents, King Arthur asked the famous wizard Merlin to make sure that in the future no fights break out between the knights. After studying the problem carefully, Merlin realized that the fights can only be prevented if the knights are seated according to the following two rules:The knights should be seated such that two knights who hate each other should not be neighbors at the table. (Merlin has a list that says who hates whom.) The knights are sitting around a round table, thus every knight has exactly two neighbors.An odd number of knights should sit around the table. This ensures that if the knights cannot agree on something, then they can settle the issue by voting. (If the number of knights is even, then it can happen that \"yes\" and \"no\" have the same number of votes, and the argument goes on.)Merlin will let the knights sit down only if these two rules are satisfied, otherwise he cancels the meeting. (If only one knight shows up, then the meeting is canceled as well, as one person cannot sit around a table.) Merlin realized that this means that there can be knights who cannot be part of any seating arrangements that respect these rules, and these knights will never be able to sit at the Round Table (one such case is if a knight hates every other knight, but there are many other possible reasons). If a knight cannot sit at the Round Table, then he cannot be a member of the Knights of the Round Table and must be expelled from the order. These knights have to be transferred to a less-prestigious order, such as the Knights of the Square Table, the Knights of the Octagonal Table, or the Knights of the Banana-Shaped Table. To help Merlin, you have to write a program that will determine the number of knights that must be expelled.InputThe input contains several blocks of test cases. Each case begins with a line containing two integers 1 ≤n≤ 1000 and 1 ≤m≤ 1000000. The numbernis the number of knights. The nextmlines describe which knight hates which knight. Each of thesemlines contains two integersk1andk2, which means that knight numberk1and knight numberk2hate each other (the numbersk1andk2are between 1 andn).The input is terminated by a block with n = m = 0.OutputFor each test case you have to output a single integer on a separate line: the number of knights that have to be expelled.ExampleInput:5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0Output:2Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KNIGHTS",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "5 5\r\n1 4\r\n1 5\r\n2 5\r\n3 4\r\n4 5\r\n0 0",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5\n4 1\n3 8\n3 7\n4 6\n6 8\n7 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8\n9 10\n3 2\n5 9\n4 3\n9 6\n4 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 10\n5 1\n10 3\n9 7\n3 8\n4 10\n10 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 6\n46 94\n7 25\n79 80\n65 83\n19 77\n82 40",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 96\n50 38\n14 71\n55 23\n81 27\n9 83\n99 66",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "23 33\n23 33\n36 83\n35 30\n62 91\n56 25\n61 62",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "30 90\n76 42\n100 60\n31 69\n22 50\n39 30\n50 98",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "4 39\n69 11\n86 58\n30 67\n25 76\n23 46\n71 92",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "66 391\n323 164\n140 151\n297 68\n258 171\n440 416\n268 463",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "93 221\n219 131\n331 79\n339 174\n430 337\n482 475\n324 129",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "103 117\n209 462\n198 57\n165 93\n333 254\n355 313\n497 278",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "431 455\n80 287\n67 95\n406 254\n288 447\n422 156\n84 416",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "294 303\n269 371\n71 207\n223 386\n474 215\n487 367\n110 313",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "157 175\n209 187\n317 222\n451 192\n498 418\n427 444\n160 312",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "487 439\n287 130\n346 219\n265 145\n326 94\n158 331\n164 89",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n999 1000\n2 999\n1 1\n1000 1\n999 999\n2 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n1 2\n1 999\n2 999\n1 1000\n1000 1\n2 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:02"
}