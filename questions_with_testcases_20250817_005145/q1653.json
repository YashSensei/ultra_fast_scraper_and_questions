{
  "problem_code": "problems",
  "title": "Fishing Net",
  "tags": [],
  "text": "In a highly modernized fishing village, inhabitants there make a living on fishery. Their major tools, fishing nets, are produced and fixed by computer. After catching fishes each time, together with plenty of fishes, they will bring back the shabby fishing nets, which might be full of leaks. Then they have to inspect those nets. If there exist large leaks, they have to repair them before launching out again.Obviously, the smaller the leaks in the fishing nets are, the more fishes they will catch. So after coming back, those fishermen will input the information of the fishing nets into the computer to check whether the nets have leaks. The checking principle is very simple: The computer regards each fishing net as a simple graph constructed by nodes and edges. In the graph, if any circle whose length (the number of edges) is larger than 3 must has at least one chord, the computer will output \"Perfect\" indicating that the net has no leaks. Otherwise, \"Imperfect\" will be displayed and the computer will try to repair the net.Note: A circle is a closed loop, which starts from one node, passes through other distinct nodes and back to the starting node. A chord is an edge, which connects two different nodes on the circle, but it does not belong to the set of edges on the circle.InputThe input file contains several test cases representing different fishing nets. The last test case in the input file is followed by a line containing0 0.The first line of each test case contains two integers,nandm, indicating the number of nodes and edges on the net respectively, 1 ≤n≤ 1000. It is followed bymlines accounting for the details of the edges. Each line consists of two integersxiandyi, indicating there is an edge between nodexiand nodeyi.OutputFor each test case, display its checking results. The word \"Imperfect\" suggests that the corresponding fishing net is leaking, while the word \"Perfect\" stands for a fishing net in good condition.Follow the output for each net with a blank line.ExampleInput:4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0Output:Imperfect\r\n\r\nPerfect",
  "sample_input": "Input:4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0Output:Imperfect\r\n\r\nPerfect",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FISHNET",
  "scraped_at": "2025-08-17 00:33:28",
  "test_cases": [
    {
      "input": "4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n0 0",
      "expected_output": "Imperfect\r\n\r\nPerfect",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10\n4 2\n3 6\n2 1\n8 7\n8 2\n10 4\n7 8\n7 8\n6 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\n8 9\n6 5\n2 6\n1 6\n7 3\n1 7\n8 2\n2 3\n3 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\n2 2\n8 1\n1 3\n1 10\n6 1\n2 9\n1 3\n5 8\n1 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 64\n26 56\n54 42\n31 42\n37 34\n33 99\n10 10\n30 22\n80 14\n16 39",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 93\n16 75\n83 78\n86 93\n88 87\n58 54\n84 91\n95 13\n61 80\n61 85",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 62\n14 87\n70 55\n90 24\n33 73\n88 11\n3 2\n78 24\n49 96\n31 79",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "21 62\n52 85\n32 60\n58 28\n52 28\n48 61\n35 29\n90 75\n23 34\n72 42",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 88\n28 25\n32 4\n10 50\n60 18\n36 92\n94 59\n44 88\n66 49\n60 5",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "169 91\n397 467\n203 325\n370 286\n362 479\n198 149\n256 64\n393 315\n382 273\n445 298",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "116 131\n479 249\n141 310\n428 444\n459 277\n377 338\n303 106\n337 138\n196 146\n301 387",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "363 302\n298 279\n487 122\n321 306\n115 318\n417 187\n382 183\n235 487\n91 373\n226 468",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "452 442\n319 115\n181 128\n467 482\n441 94\n368 191\n185 247\n419 135\n251 124\n61 324",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "325 330\n145 295\n296 381\n431 365\n497 230\n464 404\n69 259\n458 290\n94 141\n250 457",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "85 386\n185 487\n107 252\n311 439\n479 66\n143 349\n104 452\n102 497\n112 407\n500 298",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "395 353\n362 322\n407 143\n155 347\n455 418\n260 65\n269 111\n142 436\n312 221\n221 199",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n1000 999\n999 1000\n999 1000\n999 1\n1 2\n1 1000\n1 1\n999 999\n1000 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999\n1 2\n1 999\n999 1000\n1 2\n1 2\n1000 1\n999 1\n2 999\n999 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:11"
}