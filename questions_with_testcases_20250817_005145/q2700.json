{
  "problem_code": "problems",
  "title": "Bill of Fare",
  "tags": [],
  "text": "Given a large polygon dining table (not always a simple polygon) with the following properties :- there is no intersecting area (ex : area A)- there is no space inside the polygon (ex : area B)- there is no 3 edges that are concurrent (ex : point C)- every nodes are not lying on any edge except 2 edges that connect that node with 2 other nodes (ex : point D)- every nodes forming a convex corner because a table with concave corner is an uncomfortable table (ex : point E)Example of invalid table :Given also M dishes with the following rules :- placed on the table- not on the edge of the table- there is no pair of different food that have the same placeYou have to answer Q queries :- each query identified by L and R- the query is \"what is the minimum moves in order to make some dishes (from L-th dish to R-th dish inclusive) placed in same region ?\"- queries are independentNotes :- two dishes are considered in same region if and only if from one dish can be slid to another one without crossing any edge- one move is to slide a dish to another region through an edge- every dishes should be still on the table, but they may lie on the edgeExplanation :- dish A is valid because it placed on the table- dish C is invalid because it placed on the edge- dish E is invalid because it placed outside the table- sliding from dish A to dish B is considered as one move- dish B and dish D is considered as one region- dish F is invalid because it placed exactly on dish DInput and output format :- An integer T represent the number of test case, each test case :- First line contains 3 separated integer N, M, and Q- Next N lines contain Xi and Yi represent the coordinate of i-th node- Next M lines contain Pi and Qi represent the coordinate of i-th dish- Next Q lines contain Li and Ri represent the parameter of i-th query- You should output Q lines contain the answers of those queriesConstraints :- 1 <= T <= 10- 3 <= N <= 1000- 2 <= M <= 1000- 1 <= Q <= 1000- 0 <= Xi, Yi <= 10^9- 0 < Pi, Qi < 10^9- 1 <= Li < Ri <= MSample input :17 5 31 11 55 17 27 89 55 56 22 35 48 65 31 52 43 5Sample output :221Explanation of sample :- query 1 : we can slide 2-nd dish and 4-th dish to the middle region- query 2 : using the same way as query 1- query 3 : prefer sliding 4-th dish (1 move) rather than sliding 3-rd and 5-th dishes (2 moves)",
  "sample_input": "17 5 31 11 55 17 27 89 55 56 22 35 48 65 31 52 43 5",
  "sample_output": "221",
  "link": "https://www.spoj.com/problems/BILFAR",
  "scraped_at": "2025-08-17 00:34:14",
  "test_cases": [
    {
      "input": "17 5 31 11 55 17 27 89 55 56 22 35 48 65 31 52 43 5",
      "expected_output": "221",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 4 7 3 2 1 9 8 10 3 3 8 7 9 6 9 10 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 2 1 5 5 10 2 7 6 6 6 1 9 9 8 10 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 9 1 2 2 4 1 10 4 1 2 5 7 3 1 10 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 81 47 47 16 62 52 84 13 92 47 14 67 93 13 75 75 27",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "52 31 54 71 15 11 3 25 81 36 79 91 48 24 97 8 1 79",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 98 85 84 27 85 36 14 56 24 11 90 49 44 22 94 69 65",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "63 14 42 68 13 20 30 80 48 87 62 38 100 3 45 47 28 65",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 26 73 93 25 80 94 57 14 58 2 1 34 91 4 23 74 31",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "120 227 185 53 423 70 480 99 234 339 285 369 473 384 238 390 114 196",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "493 252 69 404 303 212 178 173 159 299 186 429 347 188 414 85 312 499",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "253 458 245 462 383 364 496 380 236 247 235 355 320 146 467 196 148 398",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "424 421 493 220 113 447 485 228 460 144 347 129 422 199 146 490 407 473",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "84 138 215 322 85 335 137 478 191 397 249 253 56 145 243 197 365 188",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "205 76 75 338 274 179 127 205 158 287 251 358 276 244 366 100 352 470",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "313 469 309 267 449 241 217 229 379 402 377 203 320 150 500 480 229 80",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 2 2 1000 999 2 1000 999 1000 999 999 999 2 2 1 999 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 999 999 999 1 1 999 2 1000 2 2 1000 2 2 2 1 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:43"
}