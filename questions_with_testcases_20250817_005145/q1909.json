{
  "problem_code": "problems",
  "title": "Farmer Cream",
  "tags": [],
  "text": "Farmer Cream is a businessman that wants to live in the suburbs. He recently bought a little farm in Creamville and wants to earn money from it. After the purchase, Farmer Cream has D money remaining to spend. He's in negotiations with an important firm of farming but he thinks they're not being honest (they're trying to steal some money). He knows the number of fences F in the farm but he doesn't know the number of plots P to farm. The firm is offering a budget B per plot, so he needs to multiply the budget per the number of plots to know the total amount of money to spend. He needs to know if he accepts the contract, for that, he needs to have at least M money to live after the buy. Otherwise, the firm is trying to bankrupt Farmer Cream and take over the farm.In order to do this. Farmer Cream needs your help. Assuming the fences are lines y = ax + b he only knows three things about them.There is no point in the farm where 3 or more fences collides. So, in one point of the farm there'll be zero, one or two fences.There are no parallel fences in the farm. So if we have two fences represented by y1 = a1x1 + b1 and y2 = a2x2 + b2 we assume that a1 <> a2.All the fences collide with each otherIn the example, there are 3 fences and 7 plots.InputThe input contains several test cases, each one corresponding to a different situation. Each test case consists of a single line with four integers D F B M (1 ≤ F,B,M ≤ 106) and (1 ≤ D ≤ 1018) separated by a single space. D represents the remaining money of Farmer Cream, F represents the number of fences, B represents the budget in Bsf per plot and M represents the minimum amount of money that Farmer Cream needs to live.The end of input is indicated by a test case with D = F = B = M = 0.OutputFor each test case, you'll print: \"The firm is trying to bankrupt Farmer Cream by X Bsf.\" where X represents the difference between money to spend plus the money he needs to survive and the money Farmer Cream has. Otherwise, you'll print \"Farmer Cream will have Y Bsf to spend.\" where Y represents the money Farmer Cream will have to spend.ExampleInput:160 1 70 30500 3 50 100250000 40 300 50000 0 0 0Output:The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
  "sample_input": "Input:160 1 70 30500 3 50 100250000 40 300 50000 0 0 0Output:The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013C",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "160 1 70 30500 3 50 100250000 40 300 50000 0 0 0",
      "expected_output": "The firm is trying to bankrupt Farmer Cream by 10 Bsf.Farmer Cream will have 150 Bsf to spend.The firm is trying to bankrupt Farmer Cream by 1300 Bsf.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10 2 10 9 5 9 9 10 4 3 3 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 2 3 1 3 10 4 5 2 9 7 4 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 10 3 2 9 10 7 9 9 5 1 9 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 25 5 73 84 32 56 59 69 83 48 83 32",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 53 75 80 91 56 63 20 96 57 77 51 72",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "59 92 25 35 65 34 13 11 50 69 25 94 29",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 13 47 19 36 75 43 40 89 78 58 97 15",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 2 27 30 7 82 48 86 82 41 18 76 75",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "340 280 135 383 299 254 236 392 382 168 253 433 194",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "399 206 418 388 487 234 193 362 310 240 457 169 403",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "67 354 407 61 242 316 335 409 170 57 468 328 201",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "81 89 243 426 268 70 159 365 192 272 126 73 223",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "386 55 111 95 458 439 380 343 421 120 362 467 249",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "498 428 414 430 406 52 443 167 408 146 482 57 144",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "363 460 403 234 68 74 148 220 118 407 393 179 362",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 1 999 999 999 999 1000 999 1000 1 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 1 2 1 2 999 999 999 2 1 1000 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:19"
}