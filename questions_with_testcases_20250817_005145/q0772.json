{
  "problem_code": "problems",
  "title": "Insect invasion",
  "tags": [],
  "text": "Ignacio liked to take part in programming competitions such as the Argentinian Programming Tournament during his years as a university student. He was very happy, and when he graduated he got a good job. However, with time routine and life in the big city started to make him feel uneasy. So one day he decided to move to the countryside and start a new life as a farmer. He hadn't saved a lot of money, but it was enough to buy a circular field.His life as a farmer didn't have a good start, as tragedy came before being able to enjoy his first crop. In the middle of his field a scarecrow was in charge of keeping birds at bay, but for some strange reason it was connected to a radioactive gas pipe coming from a nuclear plant close by. One morning the pipe broke and the gas escaped, destroying most of his field. Ignacio couldn't do anything about it, so only a thin strip on the border of his field remained intact. But that was not all, as the few surviving plants were soon attacked by a swarm of mutant insects. This time Ignacio wouldn't stand still, so he decided to fight the insect invasion with trained frogs.On the perimeter of his circular field he created $N$ ponds for the frogs, which he numberd from $1$ to $N$ in clockwise order. Then he bought $R$ frogs in a shop specializing in trained circus frogs, and numbered them from $1$ to $R$. During the night he put the frogs in the ponds, placing the $i$-th frog in pond number $B_i$. The frogs are very well trained, so at first light they will start to jump at a rate of one jump per minute. Each frog repeats a pattern of jumps every $K$ minutes. The $i$-th frog will jump advancing $A_{i,1}$ ponds in clockwise order during the first minute; it will then jump advancing $A_{i,2}$ ponds in the same direction, and so on until the $K$-th minute, in which it will jump advancing $A_{i,K}$ ponds. After that, the same pattern will be repeated, advancing $A_{i,1}$ ponds in the $K+1$-th minute, $A_{i,2}$ ponds in the $K+2$-th minute, etc. For example, let's consider the case with $N=5$ ponds and $K=3$. In this case, if frog number $1$ starts in pond $B_1 = 2$, being its jumping pattern $A_{1,1}=1$, $A_{1,2}=2$ and $A_{1,3}=1$, during its fist few jumps it will land in the ponds in the following order: $2$, $3$, $5$, $1$, $2$, $4$, $5$, $1$, $3$, $4$, $5$, \\dots.Ignacio is really quite unlucky, because the first frog suffers from an contagious disease which has turned it into a vegetarian. When the sun comes out and all the frogs start jumping, if a sick frog meets a healthy one in some pond, it will transmit it with this disease. In our example with $N = 5$ and $K = 3$ if there are $R = 2$ frogs and the second frog starts at pond $B_2 = 4$ with a jumping pattern given by $A_{2,1}=1$, $A_{2,2}=1$ and $A_{2,3}=1$, it will visit the ponds in the order 4, 5, 1, 2, 3, 4, $\\ldots$. Therefore, the first frog will transmit its disease to the second one after $5$ minutes, when both meet at pond number $4$. Generically, more and more frogs will get infected until either all of them are sick, or the remaining healthy frogs never meet with the sick ones, reaching at that point the maximum number of infected frogs.While writing this story the night has gone by, and even if Ignacio noticed that the first frog is sick, he is now unable to catch it because it is trained so well. He will have to go directly to the trained circus frog shop to complain. As he wants to ask for a refund, he should wait until the disease spreads completely, reaching the maximum number of infected frogs. Ignacio doesn't want to wait longer than necessary, so in order to help him you should answer two questions: What is the maximum number of infected frogs? In which minute will the last transmission of the sickness take plaIgnacio liked to take part in programming competitions such as the Argentinian Programming Tournament during his years as a university student. He was very happy, and when he graduated he got a good job. However, with time routine and life in the big city started to make him feel uneasy. So one day he decided to move to the countryside and start a new life as a farmer. He hadn't saved a lot of money, but it was enough to buy a circular field.His life as a farmer didn't have a good start, as tragedy came before being able to enjoy his first crop. In the middle of his field a scarecrow was in charge of keeping birds at bay, but for some strange reason it was connected to a radioactive gas pipe coming from a nuclear plant close by. One morning the pipe broke and the gas escaped, destroying most of his field. Ignacio couldn't do anything about it, so only a thin strip on the border of his field remained intact. But that was not all, as the few surviving plants were soon attacked by a swarm of mutant insects. This time Ignacio wouldn't stand still, so he decided to fight the insect invasion with trained frogs.On the perimeter of his circular field he createdNponds for the frogs, which he numbered from1toNin clockwise order. Then he boughtRfrogs in a shop specializing in trained circus frogs, and numbered them from1toR. During the night he put the frogs in the ponds, placing thei-th frog in pond numberBi. The frogs are very well trained, so at first light they will start to jump at a rate of one jump per minute. Each frog repeats a pattern of jumps everyKminutes. Thei-th frog will jump advancingAi,1ponds in clockwise direction during the first minute; it will then jump advancingAi,2ponds in the same direction, and so on until theK-th minute, in which it will jump advancingAi,Kponds. After that, the same pattern will be repeated, advancingAi,1ponds in theK+1-th minute,Ai,2ponds in theK+2-th minute, etc. For example, let's consider the case withN = 5ponds andK = 3. In this case, if frog number1starts in pondB1= 2, being its jumping patternA1,1= 1,A1,2= 2andA1,3= 1, during its fist few jumps it will land in the ponds in the following order:2,3,5,1,2,4,5,1,3,4,5, ...Ignacio is really quite unlucky, because the first frog suffers from a contagious disease which has turned it into a vegetarian. When the sun comes out and all the frogs start jumping, if a sick frog meets a healthy one in some pond, it will transmit it this disease. In our example withN = 5andK = 3if there areR = 2frogs and the second frog starts at pondB2= 4with a jumping pattern given byA2,1= 1,A2,2= 1andA2,3= 1, it will visit the ponds in the order4,5,1,2,3,4, ... . Therefore, the first frog will transmit its disease to the second one after5minutes, when both meet at pond number4. Generically, more and more frogs will get infected until either all of them are sick, or the remaining healthy frogs never meet with the sick ones, reaching at that point the maximum number of infected frogs.While writing this story the night has gone by, and even if Ignacio noticed that the first frog is sick, he is now unable to catch it because it is trained so well. He will have to go directly to the trained circus frog shop to complain. As he wants to ask for a refund, he should wait until the disease spreads completely, reaching the maximum number of infected frogs. Ignacio doesn't want to wait longer than necessary, so in order to help him you should answer two questions: What is the maximum number of infected frogs? In which minute will the last transmission of the sickness take place?InputThere are multiple test cases in the input file. For each test case, the first line contains three integer numbersN,RandK. The integerNrepresents the number of ponds in the field (2 ≤ N≤109),Rrepresents the number of frogs (2≤R≤200) andKrepresents the number of minutes after which the frogs repeat their jumping pattern (1≤K≤200). The second line containsRinteger numbersB1,B2, ...,BR, representing thei-th number the initial position of thei-th frog (1≤B_i≤Nfori = 1, ..., R, withBi≠ Bjifi≠j). The followingRlines describe the behavior of the frogs. Thei-th of these lines containsKinteger numbersAi,1,Ai,2, ...,Ai,K, representing the number of ponds thei-th frog advances in each of itsKjumps, in the order in which they occur (1≤Ai,j< Nfori = 1, 2, ..., Randj = 1, 2, ..., K).OutputFor each test case, print a single line containing two integer numbers, representing the maximum number of infected frogs and the minute in which the last transmission of the disease takes place, respectively.ExampleInput:5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1Output:2 5\r\n3 2\r\n1 0",
  "sample_input": "Input:5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1Output:2 5\r\n3 2\r\n1 0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016I",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "5 2 3\r\n2 4\r\n1 2 1\r\n1 1 1\r\n1234 4 4\r\n23 25 1000 67\r\n20 4 26 222\r\n18 28 1232 222\r\n2 4 6 222\r\n2 2 2 2\r\n2 2 1\r\n1 2\r\n1\r\n1",
      "expected_output": "2 5\r\n3 2\r\n1 0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 7\n10 10\n10 10 8\n10 10 5\n1 10 1\n7 4 8 6\n9 3 5 1\n10 7 6 7\n4 10 10 1\n10 4 2 9\n8 4 8\n8 9\n5\n4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 4\n3 2\n9 6 7\n4 6 6\n4 9 7\n7 8 8 5\n9 4 6 6\n8 8 8 7\n6 2 5 4\n8 6 3 4\n7 3 7\n4 9\n6\n4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8 2\n8 4\n3 8 6\n2 9 3\n10 6 5\n1 10 10 1\n4 10 6 5\n8 7 6 9\n8 2 8 1\n7 2 5 1\n7 5 1\n6 10\n5\n7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 81 43\n95 31\n27 55 34\n43 73 21\n89 12 13\n6 86 98 31\n14 92 49 42\n10 81 14 82\n15 65 99 79\n53 62 13 53\n98 91 25\n5 62\n53\n73",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "62 3 83\n60 56\n20 97 96\n60 28 80\n1 85 11\n23 80 37 65\n5 65 11 61\n51 11 100 80\n26 23 43 62\n38 82 85 66\n49 14 63\n91 98\n15\n42",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 68 64\n16 17\n12 78 64\n38 82 41\n89 92 47\n6 59 40 5\n100 17 94 17\n53 56 35 15\n7 38 44 97\n85 19 43 74\n91 62 63\n23 82\n74\n63",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 69 10\n6 59\n95 54 37\n33 21 29\n10 31 42\n43 8 88 48\n19 98 69 82\n36 47 81 4\n15 38 18 21\n76 64 42 76\n31 12 79\n95 97\n61\n56",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 85 59\n49 79\n35 5 73\n84 78 52\n60 65 92\n40 30 38 30\n46 9 7 95\n89 57 40 6\n23 2 41 96\n45 41 77 34\n97 99 30\n88 42\n88\n32",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "28 48 36\n35 53\n32 51 47\n45 29 54\n51 47 7\n45 23 51 24\n7 30 23 29\n30 18 33 42\n33 15 48 36\n29 17 6 12\n16 36 54\n46 41\n39\n38",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "23 5 5\n6 10\n44 52 38\n19 51 20\n20 32 45\n27 9 37 10\n38 15 17 20\n14 43 19 11\n47 16 21 49\n14 15 42 23\n24 13 50\n24 13\n33\n9",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9 40 46\n13 32\n28 40 51\n54 33 41\n49 8 35\n9 30 8 47\n21 51 44 22\n24 18 16 41\n27 26 34 5\n42 51 34 25\n47 18 44\n28 24\n49\n45",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "8 32 7\n30 23\n25 44 26\n15 41 21\n49 44 17\n52 17 52 20\n54 28 15 44\n21 18 31 51\n25 41 50 18\n37 18 14 29\n48 25 16\n40 22\n13\n44",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "31 38 11\n46 13\n36 20 19\n53 41 14\n25 10 40\n51 41 44 13\n29 24 6 52\n21 14 52 28\n22 13 22 41\n37 15 29 37\n46 51 43\n21 7\n33\n43",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "47 15 7\n21 42\n12 28 24\n27 41 42\n29 19 51\n37 37 31 22\n20 26 23 41\n36 10 21 6\n18 41 25 17\n11 22 13 35\n41 49 44\n15 14\n39\n32",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "40 44 52\n48 48\n32 30 44\n9 22 27\n23 29 32\n14 47 13 34\n49 24 5 49\n37 16 17 31\n8 13 23 34\n40 33 35 27\n32 5 51\n20 44\n12\n30",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "109 109 109\n109 109\n109 109 109\n109 109 109\n109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109\n109 109\n109\n109",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "109 109 109\n109 109\n109 109 109\n109 109 109\n109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109 109\n109 109 109\n109 109\n109\n109",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 109 108\n109 2\n109 108 108\n2 1 1\n2 2 1\n1 109 109 2\n109 1 108 108\n108 109 1 1\n109 108 1 108\n1 2 108 2\n109 108 109\n108 109\n108\n109",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "108 108 1\n2 1\n108 109 1\n2 108 109\n1 1 108\n2 1 108 109\n2 109 109 1\n2 109 108 1\n1 2 1 1\n109 108 108 109\n108 109 109\n108 109\n2\n108",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:43"
}