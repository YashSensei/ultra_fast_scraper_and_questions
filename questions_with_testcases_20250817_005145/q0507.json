{
  "problem_code": "problems",
  "title": "Hidden Triangle",
  "tags": [],
  "text": "Assume that each '0' or '1' in the array represents a point on a plane and the distance\r\nbetween each pair of neighbouring\r\npoints row wise or column wise is unity. Assume further that every\r\nneighbouring pair of1's,\r\nrow wise, column wise or diagonally is connected by a line segment. Two line segments emerging\r\nfrom a point, either join together to\r\nform a longer line segment or form an angle of45o,90oor135o, thus forming right-angled isosceles triangles. The\r\nexistence of hidden right-angled isosceles triangles in an array is illustrated\r\nin the figure below.InputInput consists of multiple test cases.For each test case the first line gives\r\nthree integers: the case numberk, the number of rowsmand the number of\r\ncolumnsnof the given array. A space appears between two\r\nneighbouring integers.Each of the nextmlines gives a string\r\nof0's and1's of lengthn; thei-th line gives thei-th row of the array.Input terminates with a value zero for case numberk.OutputFor each test case, display output in\r\none line. The line contains the case numberkand the area of the largest\r\nright-angled isosceles triangle hidden in the array. The area is a real number\r\nwith one digit after the decimal point. If a triangle does\r\nnot exist then output '0.0' as the area.Sample Input1 3 3\r\n101\r\n100\r\n101\r\n2 4 6\r\n001001\r\n010101\r\n111111\r\n000001\r\n0Sample Output1 0.0\r\n2 4.0Kanpur-Kolkata 2004-2005",
  "sample_input": "1 3 3\r\n101\r\n100\r\n101\r\n2 4 6\r\n001001\r\n010101\r\n111111\r\n000001\r\n0",
  "sample_output": "1 0.0\r\n2 4.0",
  "link": "https://www.spoj.com/problems/HIDTRI",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "1 3 3\r\n101\r\n100\r\n101\r\n2 4 6\r\n001001\r\n010101\r\n111111\r\n000001\r\n0",
      "expected_output": "1 0.0\r\n2 4.0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 5\n4\n9\n3\n1 2 8\n8\n2\n4\n8\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 4 4\n7\n2\n6\n10 4 1\n4\n3\n7\n3\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 6\n6\n4\n6\n6 5 10\n4\n9\n3\n6\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "17 34 4\n10\n16\n74\n57 78 25\n49\n78\n12\n49\n35",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "27 23 18\n12\n59\n24\n84 26 5\n21\n67\n74\n64\n79",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "31 27 69\n94\n83\n97\n14 58 47\n61\n39\n58\n15\n10",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "93 55 34\n75\n59\n34\n36 1 12\n52\n1\n33\n55\n77",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "88 82 43\n25\n2\n34\n53 77 60\n62\n48\n22\n38\n31",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "331 200 85\n175\n162\n370\n150 446 215\n66\n55\n314\n450\n96",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "478 241 197\n331\n163\n116\n85 150 401\n223\n200\n131\n413\n145",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "351 472 434\n419\n163\n74\n369 60 290\n200\n119\n425\n410\n63",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "357 227 422\n319\n147\n312\n432 414 320\n193\n468\n329\n71\n237",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "128 95 352\n98\n101\n278\n61 52 169\n396\n422\n328\n291\n66",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "140 368 200\n77\n361\n470\n157 395 72\n58\n252\n67\n127\n386",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "244 188 325\n347\n195\n381\n331 393 442\n228\n454\n163\n399\n448",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000 1000 1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000 1000 1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 1000\n1000\n1000\n1000\n1000 1000 1\n1000\n1\n999\n2\n999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 1000\n2\n1\n999\n2 1000 999\n1000\n1\n1\n2\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}