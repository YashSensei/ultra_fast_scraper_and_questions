{
  "problem_code": "problems",
  "title": "Bomb the Bridge",
  "tags": [],
  "text": "You want to destroy a bridge with bombs. The lower-left corner of the bridge is at (0, 0) and the upper-right corner is at (w, l). There are already b bombs exploded, the i-th bomb created a hole of radius ri centering at (xi, yi). You want to throw exactly one more bomb so that the bridge is split into two connected parts(though the two parts can share a finite number of points), so that no one can go through the bridge from y = 0 to y = l. Your task is to find the minimal radius of the last bomb to split the bridge, assuming that the last bomb can explode precisely at the position you want (possibly at non-integer coordinates). Note that you are only allowed to use bombs with integer radius. That is, even if a bomb with radius 1.01 is sufficient, you have to use a bomb with radius 2, since you only have bombs with integer radius.InputThe first line contains t (1≤t≤10), the number of test cases followed. Each test case begins with three integers w, l, b (1 ≤ w,1 ≤ 100, 0 ≤ b ≤ 10). Each of the following b lines contains three integers integers xi, yi, ri (0 ≤ x ≤ w, 0 ≤ y ≤ l, 0＜r ≤ 100). The bridge is guaranteed to be connected before the last bomb.OutputFor each test case, print the minimal radius of the last bomb.ExampleInput:3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10Output:135040",
  "sample_input": "Input:3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10Output:135040",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BOMB",
  "scraped_at": "2025-08-17 00:33:38",
  "test_cases": [
    {
      "input": "3100 100 215 50 2090 50 30100 100 150 50 40100 100 110 50 10",
      "expected_output": "135040",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 9 10 10 8 6 3 2 1 6 5 4 9 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2 2 9 7 5 4 5 9 10 1 2 2 9 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 9 2 4 2 10 9 6 3 6 3 7 4 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 50 58 34 56 47 5 12 10 56 47 33 51 36 93",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 97 100 76 18 81 61 56 58 96 93 33 19 37 92",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 73 93 100 81 100 55 49 5 38 100 22 28 76 70",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "89 19 16 51 83 12 38 92 44 26 13 18 84 36 2",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "90 27 8 99 83 25 17 53 9 57 90 44 1 76 64",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "406 145 80 325 481 460 144 300 402 289 473 270 176 326 237",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "236 103 204 307 190 107 175 100 434 239 100 124 228 282 455",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "135 350 350 403 146 134 334 269 216 394 474 131 390 446 292",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "282 415 441 447 486 248 203 491 340 118 322 125 369 232 206",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "392 193 333 122 148 56 308 193 305 158 99 421 451 289 259",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "301 307 354 448 187 222 377 452 134 232 473 185 347 191 496",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "192 491 159 214 234 231 124 363 339 63 260 263 131 117 102",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 1000 1 2 999 999 1000 1 2 999 1000 1000 2 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 2 2 1000 2 2 2 1000 999 1 1000 1 999 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:09"
}