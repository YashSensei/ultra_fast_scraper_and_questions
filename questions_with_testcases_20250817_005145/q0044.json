{
  "problem_code": "problems",
  "title": "Transmitters",
  "tags": [],
  "text": "In a wireless network with multiple transmitters sending on the same\r\nfrequencies, it\r\nis often a requirement that signals don't overlap, or at least that they don't\r\nconflict. One way of accomplishing this is to restrict a transmitter's coverage\r\narea. This problem uses a shielded transmitter that \r\nonly broadcasts in a semicircle.A transmitterTis located somewhere on a 1,000 square meter grid.\r\nIt broadcasts in a semicircular area of radiusr. The\r\ntransmitter may be rotated any amount, but not moved. \r\nGivenNpoints anywhere on the grid, compute\r\nthe maximum number of points that can be simultaneously reached by the\r\ntransmitter's signal.\r\nFigure 1 shows the\r\nsame data points with two different transmitter rotations.All input coordinates are integers (0-1000). The radius is a\r\npositive real number greater than 0.\r\nPoints on the boundary of a semicircle are considered within that\r\nsemicircle.  There are 1-150 unique points to examine per transmitter.\r\nNo points are at the same location as the transmitter.Input consists of information for one or more independent transmitter problems.\r\nEach problem begins with\r\none line containing the (x,y) coordinates of the transmitter followed by the\r\nbroadcast radius,r.\r\nThe next line contains the number of pointsNon the grid,\r\nfollowed byNsets of (x,y) coordinates, one\r\nset per line.  The end of the input is signalled by a line with a\r\nnegative radius; the (x,y) values will be present but indeterminate.\r\nFigures 1 and 2 represent the data in the first two example data sets below,\r\nthough they are on different scales. Figures 1a and 2 show\r\ntransmitter rotations that result in maximal coverage.For each transmitter, the output contains a single line with \r\nthe maximum number of points that can be contained in some semicircle.Input:25 25 3.5\r\n7\r\n25 28\r\n23 27\r\n27 27\r\n24 23\r\n26 23\r\n24 29\r\n26 29\r\n350 200 2.0\r\n5\r\n350 202\r\n350 199\r\n350 198\r\n348 200\r\n352 200\r\n995 995 10.0\r\n4\r\n1000 1000\r\n999 998\r\n990 992\r\n1000 999\r\n100 100 -2.5Output:3\r\n4\r\n4",
  "sample_input": "Input:25 25 3.5\r\n7\r\n25 28\r\n23 27\r\n27 27\r\n24 23\r\n26 23\r\n24 29\r\n26 29\r\n350 200 2.0\r\n5\r\n350 202\r\n350 199\r\n350 198\r\n348 200\r\n352 200\r\n995 995 10.0\r\n4\r\n1000 1000\r\n999 998\r\n990 992\r\n1000 999\r\n100 100 -2.5Output:3\r\n4\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TRANSMIT",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "25 25 3.5\r\n7\r\n25 28\r\n23 27\r\n27 27\r\n24 23\r\n26 23\r\n24 29\r\n26 29\r\n350 200 2.0\r\n5\r\n350 202\r\n350 199\r\n350 198\r\n348 200\r\n352 200\r\n995 995 10.0\r\n4\r\n1000 1000\r\n999 998\r\n990 992\r\n1000 999\r\n100 100 -2.5",
      "expected_output": "3\r\n4\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 7 7\n6\n8 7\n7 10\n1 9\n1 6\n7 1\n2 2\n1 7\n5 4 8\n5\n7 8\n1 6\n3 8\n3 3\n9 6\n9 10 1\n6\n9 2\n1 3\n5 8\n4 8\n1 1 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 9\n9\n9 1\n6 7\n8 1\n7 9\n7 5\n7 6\n8 2\n6 9 4\n1\n5 6\n5 10\n1 10\n2 8\n9 7\n10 7 6\n4\n6 7\n7 4\n8 2\n7 9\n4 1 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 9 3\n10\n1 2\n10 7\n8 7\n3 5\n8 7\n7 5\n9 1\n2 9 5\n9\n4 9\n2 4\n1 3\n7 6\n1 6\n10 6 8\n3\n8 6\n5 9\n8 3\n5 9\n6 6 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "45 31 90\n29\n79 16\n72 97\n50 92\n84 3\n68 53\n39 7\n23 62\n97 96 94\n84\n76 62\n94 4\n17 74\n83 55\n54 99\n29 82 54\n50\n59 30\n26 28\n82 32\n88 51\n51 26 100",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 24 59\n100\n22 19\n26 79\n50 42\n70 54\n83 82\n5 67\n58 94\n22 55 42\n90\n29 5\n79 6\n99 69\n99 45\n65 19\n59 73 43\n82\n44 22\n33 54\n51 7\n3 7\n2 92 64",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 22 87\n21\n33 9\n47 58\n100 85\n2 11\n59 2\n41 86\n28 22\n49 66 64\n71\n96 65\n24 4\n18 14\n62 5\n34 73\n13 24 10\n34\n33 76\n89 32\n29 97\n74 82\n92 33 55",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 68 18\n14\n72 67\n84 17\n83 32\n70 43\n63 44\n59 79\n30 92\n20 24 7\n92\n17 66\n58 59\n36 58\n26 65\n87 45\n86 56 35\n72\n62 27\n58 32\n55 93\n66 50\n23 51 64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 19 8\n35\n19 1\n95 25\n52 4\n77 84\n61 41\n90 42\n5 34\n98 32 64\n11\n24 72\n20 22\n39 46\n13 60\n69 52\n55 34 97\n74\n64 11\n75 95\n37 18\n40 18\n82 14 98",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "407 486 152\n141\n486 285\n118 360\n424 345\n120 267\n294 439\n237 288\n63 455\n448 332 445\n108\n315 458\n222 491\n395 479\n500 499\n255 113\n306 466 315\n305\n415 207\n68 302\n105 86\n111 272\n186 497 235",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "128 260 362\n440\n247 128\n154 66\n240 401\n104 385\n225 468\n255 394\n83 403\n79 272 190\n453\n491 131\n389 142\n411 145\n140 457\n336 431\n293 303 461\n482\n397 264\n62 223\n421 142\n362 462\n430 297 108",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "454 65 141\n319\n267 143\n383 443\n217 316\n295 497\n441 331\n352 106\n161 245\n197 188 453\n431\n56 190\n82 353\n88 86\n377 193\n173 414\n308 251 301\n484\n168 162\n381 412\n408 50\n262 89\n211 414 257",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "348 462 96\n192\n218 61\n219 168\n95 79\n254 463\n177 344\n136 66\n390 208\n246 415 331\n484\n302 467\n227 452\n189 222\n164 259\n128 201\n290 359 418\n383\n136 190\n72 185\n83 145\n473 373\n419 457 358",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "395 163 244\n71\n128 467\n227 380\n146 357\n465 494\n410 408\n341 175\n380 179\n387 119 202\n395\n459 66\n315 199\n286 172\n184 302\n73 67\n111 328 135\n403\n112 462\n247 91\n178 428\n499 135\n239 136 88",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "490 463 366\n461\n210 242\n195 129\n329 262\n90 119\n128 294\n117 235\n226 114\n424 101 359\n375\n198 350\n90 412\n263 61\n96 129\n63 117\n221 426 332\n346\n222 377\n344 165\n456 152\n279 368\n491 89 70",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "348 401 193\n315\n382 111\n259 108\n440 353\n120 50\n366 194\n260 69\n281 229\n295 378 199\n439\n425 232\n410 368\n134 375\n196 342\n481 159\n320 187 382\n269\n375 171\n69 448\n75 431\n288 306\n94 452 178",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1\n1000\n2 1\n1 2\n999 1\n2 1\n999 2\n1000 1000\n1 1000\n999 1000 1000\n1000\n2 1000\n1 1000\n999 999\n999 1\n999 1\n999 999 1\n1000\n1 1000\n2 2\n999 1000\n1000 2\n1000 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 999\n1\n1 1000\n2 1\n999 1\n2 1\n2 999\n1000 1\n999 1000\n1 999 1000\n2\n1 1\n1 1000\n999 1000\n1 1\n999 2\n1000 1 2\n1\n1 999\n999 1\n1000 999\n2 2\n1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20
}