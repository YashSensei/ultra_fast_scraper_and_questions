{
  "problem_code": "problems",
  "title": "Automatic Scholarship Calculation",
  "tags": [],
  "text": "A university gives scholarship to students based on their current CGPA. This waiver allocation follows some rules. At the beginning of a semester allotted scholarships for certain CGPA range is put on the notice board in tabular form. Two such tables are shown below:In the table on the left, it is said that students who have CGPA within 3.60 and 3.69 (inclusive) will get 10% of their tuition fee as scholarship. Similarly, those with CGPA range is within 3.90-3.99 will get 40% of their tuition fee as scholarship. Using the two tables above we will try to explain to you the rules and restrictions of allocating waiver:A fixed Scholarship is given to all the students within a CGPA Range.The range of each CGPA slab must be equal (Except the topmost one, which can be smaller).The slabs must go all the way up to 4.00.The scholarship percentage for the lowest slab is a positive integer. With the increase of CGPA range the amount of scholarship percentage must also increase by a fixed positive integer value. In the table on the left this fixed value is 10% and in the table on the right this fixed value is 30%.Scholarship percentage for each slab is always a positive integer with a maximum value of 100%.The scholarship amount that can give 1 student 1 % scholarship is called a unit. So to give 2 students 50% scholarship, 50*2 = 100 units is needed.All the scholarships given should use up a given amount, P units.A CGPA range for scholarship cannot start below 2.50. So 2.50-2.55 is a valid CGPA range but 2.45-2.55 is not valid.There must be at least 2 slabs for scholarship. But of course a slab can contain zero students.Given the number of students, total available scholarship units and their current CGPA, your job is to find out the number of different possible scholarship allocations that uses up all the scholarship units. Two scholarship allocations are different if their CGPA range is different or scholarship allocation in any slab is different.InputInput file contains at most 100 sets of inputs. The description of each set is given below:Each set starts with two integersN(N <= 10000) which indicates the total number of students andPwhich indicates the scholarship units that needs to be used up. Each of the nextNlines contains the CGPA of one student.Input is terminated by a line containing two zeroes.OutputFor each test case produce one line of output which contains an integer D. This D denotes the total number of different scholarship allocations that uses up all P units. Input will be such that there will always be at least one possible allocation.ExampleInput:10 410\r\n3.29\r\n3.96\r\n2.61\r\n2.82\r\n3.93\r\n3.68\r\n3.70\r\n2.91\r\n3.28\r\n3.68\r\n0 0Output:79554Explanation:a = 10, d = 10, lowest = 2.88, nslab = 8, wslab = 14One possible solution to the sample input above is:CGPA RangeNumber of studentsWaiver %Total Units needed3.93 - 4.002801603.78 - 3.920703.63 - 3.773601803.48 - 3.620503.33 - 3.470403.18 - 3.32230603.03 - 3.170202.88 - 3.0211010Total Units410There are another 79553 different allocation which uses up all 410 units exactly.",
  "sample_input": "Input:10 410\r\n3.29\r\n3.96\r\n2.61\r\n2.82\r\n3.93\r\n3.68\r\n3.70\r\n2.91\r\n3.28\r\n3.68\r\n0 0Output:79554",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AR2015PH",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "10 410\r\n3.29\r\n3.96\r\n2.61\r\n2.82\r\n3.93\r\n3.68\r\n3.70\r\n2.91\r\n3.28\r\n3.68\r\n0 0",
      "expected_output": "79554",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 7\n4\n8\n10\n8\n10\n6\n5\n1\n8\n7\n10 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4\n5\n10\n3\n10\n8\n10\n6\n7\n5\n5\n10 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n7\n3\n9\n2\n4\n2\n5\n4\n7\n4\n5 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "14 7\n15\n52\n72\n66\n92\n43\n27\n27\n39\n92\n92 20",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "70 62\n81\n88\n17\n26\n51\n40\n82\n59\n29\n91\n100 6",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 99\n35\n64\n91\n38\n100\n86\n20\n46\n55\n93\n30 24",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "91 34\n98\n69\n95\n83\n51\n29\n79\n62\n43\n85\n45 90",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 84\n16\n80\n98\n74\n72\n96\n67\n48\n70\n95\n65 34",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "138 88\n330\n110\n302\n221\n249\n177\n150\n382\n274\n326\n239 496",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "473 147\n284\n318\n393\n82\n323\n311\n171\n88\n397\n158\n257 96",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "111 61\n410\n80\n294\n330\n493\n259\n78\n435\n488\n110\n140 311",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "350 270\n305\n279\n269\n412\n154\n245\n102\n255\n199\n387\n305 440",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "478 78\n401\n391\n227\n210\n71\n128\n210\n446\n322\n390\n148 69",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "79 464\n331\n211\n137\n415\n393\n67\n458\n197\n355\n477\n118 438",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "270 257\n314\n410\n375\n298\n237\n255\n312\n311\n142\n179\n138 303",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1\n999\n999\n999\n999\n2\n2\n999\n2\n1\n1000\n1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000\n1\n1000\n999\n1\n1\n1000\n2\n2\n1\n2\n999 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:48"
}