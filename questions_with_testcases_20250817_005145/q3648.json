{
  "problem_code": "problems",
  "title": "RK Sorting",
  "tags": [],
  "text": "RKis a great code breaker. He knows any cipher in the world can be broken by frequency analysis. He intercepted an enemy message. The message consists ofNnumbers, smaller than or equal toC. RK believes frequency analysis consists of sorting this sequence so that more frequent numbers appear before less frequent ones.Formally, the sequence must be sorted so that given any two numbers X and Y, X appears before Y if the number of times X appears in the original sequence is larger than the number of time Y does. If the number of appearances is equal, the number whose value appears sooner in the input should appear sooner in the sorted sequence.Help RK by creating a \"frequency sorter\".InputFirst line of input contains two  integers, N (1 ≤ N ≤ 1000), length of message, and C (1 ≤ C ≤ 109), the number from task description. Next line contains N integers smaller than or equal to C, message  itself.OutputFirst and only line of output should contain N numbers, the sorted sequence.SampleInput9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
  "sample_input": "Input9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2",
  "sample_output": "Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
  "link": "https://www.spoj.com/problems/RKS",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "Input9 3\r\n1 3 3 3 2 2 2 1 1Output1 1 1 3 3 3 2 2 2",
      "expected_output": "Input5 2\r\n2 1 2 1 2Output2 2 2 1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1\nx 5\n5 10 6 2 10 8 9 1 2 6 7 10 9 3 4 9 7 8\n4 8 6 5 10 10 2 5 kyochq 3 2 2 7 8 9 5 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\nt 5\n1 4 6 6 3 5 8 9 8 7 6 4 10 1 8 3 4 8\n10 6 8 4 3 2 9 4 mv 10 1 10 9 8 5 3 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 4\nw 10\n6 8 6 8 6 6 9 9 5 10 1 1 5 8 1 1 1 10\n5 3 2 1 9 4 5 6 lodqdnx 7 6 3 4 7 6 4 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 88\nw 3\n33 77 84 85 75 96 20 84 68 54 53 97 83 36 48 35 35 25\n31 85 64 71 88 79 79 12 wb 100 76 35 73 52 49 7 44",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 61\nlgp 56\n97 48 100 27 70 6 40 14 97 72 47 52 52 61 81 35 76 85\n46 100 59 85 20 97 68 38 if 47 35 48 38 70 24 86 9",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "80 86\ngmn 26\n98 65 82 100 90 38 47 61 55 40 91 50 92 85 5 1 26 9\n78 96 80 85 8 15 97 61 tc 51 56 56 16 32 87 35 9",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "83 7\noeu 54\n34 80 77 82 20 71 78 52 63 19 99 96 91 62 24 72 10 72\n56 84 54 73 47 1 12 7 eo 37 60 58 97 87 48 13 49",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 54\nhmklhj 72\n38 34 67 1 13 79 29 72 93 13 12 6 77 91 32 55 47 40\n97 25 25 94 68 29 4 98 f 86 93 65 38 87 70 78 22",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "497 269\nlc 464\n188 436 465 112 138 302 201 123 398 209 298 73 436 469 87 88 201 228\n360 339 330 126 50 208 187 335 gegvqimn 424 156 337 156 495 241 446 394",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "406 214\ng 170\n315 498 469 236 266 389 107 98 389 352 226 258 324 140 374 192 209 453\n96 460 356 312 152 300 444 173 bbrdhtec 149 325 345 201 205 344 75 119",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "174 391\nk 104\n318 376 380 450 253 463 124 60 277 233 485 107 216 243 313 487 80 368\n146 448 439 103 110 152 450 315 xdmbaeff 443 215 431 275 415 242 236 469",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "398 432\nlejsy 234\n484 82 206 446 238 482 400 306 240 221 248 400 247 142 430 194 332 336\n327 422 211 157 450 420 500 496 tjs 172 300 389 165 467 356 224 130",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "61 404\nkdkgyt 61\n319 412 197 436 203 58 148 338 319 137 203 417 233 310 321 106 92 339\n238 433 327 421 433 122 162 57 ynilt 477 363 432 89 472 134 105 356",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "313 114\nx 107\n233 475 207 288 236 96 262 280 262 306 474 465 112 138 137 439 173 84\n488 378 457 271 256 449 416 446 epcs 257 61 241 299 300 73 133 85",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "209 185\ntwunez 452\n51 171 169 479 328 390 213 182 482 193 172 353 110 266 406 123 149 64\n387 435 374 304 469 434 124 396 fqq 170 288 252 104 397 315 325 312",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nqydxrf 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 nihv 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nanaps 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 ahokw 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nwzdklj 2\n1000 999 2 1 999 1000 999 2 1000 999 1000 2 1 1000 2 999 999 999\n1 1 1 2 1 2 1 1000 hdnk 2 999 1000 999 1 999 2 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2\nrqhli 999\n1000 999 1000 2 999 999 1000 1000 999 999 999 1 1000 1 999 999 2 1\n1 999 1 1000 1000 2 2 2 wjezbf 999 999 1000 999 1000 1 1 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:14"
}