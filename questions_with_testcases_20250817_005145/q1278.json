{
  "problem_code": "problems",
  "title": "Stock Chase",
  "tags": [],
  "text": "I have to admit, the solution I proposed last year for solving the bank  cash crisis didn’t solve the whole economic crisis. As it turns out,  companies don’t have that much cash in the first place. They have assets  which are primarily shares in other companies. It is common, and  acceptable, for one company to own shares in another. What complicates  the issue is for two companies to own shares in each other at the same  time. If you think of it for a moment, this means that each company now  (indirectly) controls its own shares.New market regulation is being  implemented: No company can control shares in itself, whether directly  or indirectly. The Stock Market Authority is looking for a  computerized  solution that will help it detect any buying activity that will result  in a company controlling its own shares. It is obvious why they need a  program to do so, just imagine the situation where company A buying  shares in B, B buying in C, and then C buying in A. While the first two  purchases are acceptable. The third purchase should be rejected since it  will lead to the three companies controlling shares in  themselves. The  program will be given all purchasing transactions in chronological  order. The program should reject any transaction that could lead to one  company controlling its own shares. All other transactions are accepted.InputYour program will be tested on one or more test cases. Each test case is specified on T + 1 lines. The first line specifies two positive numbers: (0 < N ≤ 234) is the number of companies and (0 < T ≤ 100, 000) is the number of transactions. T lines follow, each describing a buying transaction. Each transaction is specified using two numbers A and B where (0 < A, B ≤ N ) indicating that company A wants to buy shares in company B. The last line of the input file has two zeros.OutputFor each test case, print the following line:k. RWhere k is the test case number (starting at one,) R is the number of transactions that should be rejected.ExampleInput:3 6\r\n1 21 33 12 11 22 30 0Output:1. 2",
  "sample_input": "Input:3 6\r\n1 21 33 12 11 22 30 0Output:1. 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ANARC09G",
  "scraped_at": "2025-08-17 00:33:37",
  "test_cases": [
    {
      "input": "3 6\r\n1 21 33 12 11 22 30 0",
      "expected_output": "1. 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 10\n8 4 10 1 1 4 10 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n7 6 10 4 9 2 1 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n4 5 7 6 9 9 5 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 1\n94 78 20 61 22 29 84 23",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "37 97\n48 67 30 16 28 86 88 96",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 65\n24 31 9 86 10 7 3 47",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 51\n33 24 97 51 22 60 56 64",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 24\n84 82 15 26 8 10 95 70",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "38 95\n60 56 47 30 78 112 19 41",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "12 19\n117 64 15 65 50 45 61 39",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "105 23\n50 26 33 31 59 20 75 55",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "87 104\n24 14 59 73 11 26 16 90",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "104 62\n55 58 63 85 106 109 44 112",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "99 13\n42 16 71 62 68 61 94 43",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "15 39\n62 46 44 36 62 105 51 114",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "234 234\n234 234 234 234 234 234 234 234",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "234 234\n234 234 234 234 234 234 234 234",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 233\n233 2 233 1 2 2 234 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "234 2\n1 234 2 2 2 233 233 234",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}