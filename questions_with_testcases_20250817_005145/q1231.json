{
  "problem_code": "problems",
  "title": "Super Mario Revisited",
  "tags": [],
  "text": "Mario is one the most famous video games ever. In this problem, we will be helping Mario save the princess (again :P). In this game of Mario,each world will be represented by a 2-D rectangular grid. There aremultiple worldsand all the worlds are of size R x C. The world contains many objects each covering exactly one cell.The cell with 'S' denotes Mario's starting position. A cell with '.' denotes an empty cell over which Mario can walk safely. From that cell he can move to any of its 4 adjacent cells (which share an edge with it). A cell with 'D' denotes a pipe that leads to the world below. A cell with 'U' denotes a pipe that leads to the world above. If Mario enters a cell containing a pipe, he must enter the pipe. A cell with 'C' represents a coin and Mario collects these. After collecting the coin, the cell becomes an empty cell. A cell with '#' denotes bricks and Mario can't enter this cell no matter what. A cell with 'M' denotes the monster (Bowser), Mario has to defeat Bowser to save the princess. Mario initially start from an empty cell.Our Mario is very determined and so he will be always able to defeat Bowser on a 1 on 1 battle. But he is greedy and will always want to collect all the coins before going to save the princess.If he is not able to collect all the coins, he won't save the princess!. Help Mario to find the minimum number of steps to do this feat.Note:If 'U' is present in top-most world or 'D' is present in the bottom-most world, Mario can't enter the cell.Input:Input contains multiple test cases (will never exceed 1000).First line of each test case will have 3 integers R, C and W.'R x C' represents Grid dimension and 'W' represents number of worlds.It will be followed by R x W lines. Each line will have 'C' characters.First R lines describe the first world, second R lines describe the second world and so on upto W worlds.Input ends by the line '0 0 0'.Output:For each test case, print a single line “Mario saved the princess in K steps” where K is the minimum number of steps if he defeat the monster else print “Mario failed to save princess”.Constraints:1 <= R, C <= 151 <= W <= 100 <= [Total number of coins] <= 10All characters in the grid will be from the set {'S', '.', 'M', 'C', 'D', 'U', '#'}SampleInput:2 2 1\r\nSM\r\n.D\r\n\r\n2 2 2\r\nSM\r\n.D\r\nC.\r\nUC\r\n\r\n3 3 2\r\nS.M\r\nC#.\r\nD..\r\n###\r\nC.C\r\nC.U\r\n\r\n2 2 1\r\nSM\r\n#C\r\n\r\n0 0 0Output:Mario saved the princess in 1 steps\r\nMario saved the princess in 7 steps\r\nMario saved the princess in 8 steps\r\nMario failed to save princessExplanation for third test case:Mario is in (0, 0, 1) (first world), the optimal path is (0, 0, 1) → (1, 0, 1) → (2, 0, 1) → (2, 0, 2) → (1, 0, 2) → (1, 1, 2) → (1, 2, 2) → (2, 2, 2) → (2, 2, 1) → (1, 2, 1) → (1, 2, 0). So totally 10 steps which includes 1 Up and 1 Down. As there is no manpower required for Mario to take step in between the worlds omitting the 2 steps which gives us the answer 8.",
  "sample_input": "Input:2 2 1\r\nSM\r\n.D\r\n\r\n2 2 2\r\nSM\r\n.D\r\nC.\r\nUC\r\n\r\n3 3 2\r\nS.M\r\nC#.\r\nD..\r\n###\r\nC.C\r\nC.U\r\n\r\n2 2 1\r\nSM\r\n#C\r\n\r\n0 0 0Output:Mario saved the princess in 1 steps\r\nMario saved the princess in 7 steps\r\nMario saved the princess in 8 steps\r\nMario failed to save princess",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SMARIO",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "2 2 1\r\nSM\r\n.D\r\n\r\n2 2 2\r\nSM\r\n.D\r\nC.\r\nUC\r\n\r\n3 3 2\r\nS.M\r\nC#.\r\nD..\r\n###\r\nC.C\r\nC.U\r\n\r\n2 2 1\r\nSM\r\n#C\r\n\r\n0 0 0",
      "expected_output": "Mario saved the princess in 1 steps\r\nMario saved the princess in 7 steps\r\nMario saved the princess in 8 steps\r\nMario failed to save princess",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10 7\nkqoj\na\n1 9 5\ndok\ne\nfzxy\ngs\n9 5 5\nsrkq\nf\nk\nomed\nt\ngyz\n1 10 1\nk\nzotl\n1 9 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 1\nsrg\nb\n8 6 3\nujsl\nq\nx\nnuj\n6 6 4\nwyzds\nntnjha\nwp\nv\nnzoziz\nokmx\n9 1 8\nff\nl\n7 5 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 2\nq\nvr\n7 8 4\nv\nwilh\niy\nkffk\n1 7 10\nq\nqjgil\nivnub\njmpti\nrfm\nh\n8 1 7\njgzv\nj\n1 8 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "63 21 62\nfnlz\nua\n39 56 43\nh\nvesw\nof\nc\n33 25 50\nbwjcu\nzpgd\nb\nx\nc\niymc\n76 83 89\nb\nxjnj\n92 62 47",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "99 92 11\nvd\napgv\n40 45 70\nhz\nbhpa\niq\nsyu\n1 87 94\nyvow\nmcvhuq\nb\na\ncomcs\nxsopng\n40 10 49\nn\nr\n84 79 55",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 44 45\nbgn\nqlj\n63 77 68\ns\nqp\nlrh\ndkcp\n18 17 6\nimmfn\nrdwyo\ng\nj\nnursl\nlflub\n97 62 49\nfp\nhg\n95 39 73",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "86 27 96\nllj\ny\n89 55 40\nvj\nf\nvvza\npbx\n25 79 50\nt\nsrfu\noaxz\nsn\newb\no\n50 82 75\nbel\nlnc\n87 81 32",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 80 48\nlhe\nz\n76 15 39\npnk\nbxze\nslx\nq\n91 72 46\nvwyfcn\nu\nw\nxerban\nt\njcbqh\n66 70 11\nuxd\ngj\n73 33 58",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "164 92 215\nk\njiei\n435 222 197\nny\ngc\nuo\nly\n421 171 484\nzyuk\negem\nbap\ncivzl\nmbtd\npszqv\n435 407 383\ngqm\nrc\n398 428 153",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "269 61 158\ndvm\njwb\n105 192 463\nh\nvza\namgz\nzoee\n285 457 290\nlcna\nduwy\nhn\nd\nkfxq\nd\n341 217 326\nuup\ndfu\n421 485 340",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "416 151 179\na\nscou\n298 141 494\noqi\noiy\nifgi\nyr\n234 63 247\nqdn\nezr\njeix\nbsdkdy\npakj\nlitow\n152 261 437\nk\nsim\n196 229 156",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "338 426 205\nh\nna\n295 52 497\nyos\nn\ns\nndgu\n374 225 496\njueg\nwnky\noyzos\ntkcpen\nhomn\nkymbd\n412 365 220\nhqr\nw\n397 106 216",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "242 128 192\nliqi\nvopd\n196 160 81\nvtbb\nb\njc\npavf\n58 307 138\nuwd\nntp\nkwx\nlsyby\noh\nsv\n356 218 339\nu\nq\n366 458 471",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "498 479 272\nxqn\np\n304 178 455\nqqku\ngmh\newi\ngucl\n483 140 172\ng\nwzcyw\nrsyiuq\npn\nexg\nqhfoa\n319 320 271\nesk\nxe\n116 406 62",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "348 124 52\npcuy\nxhu\n346 61 114\nlbl\nvqsk\nzk\nwl\n500 338 410\nnefnqp\nlqore\nanj\nxypumj\nsnskuh\nwro\n104 272 184\nhhvy\nz\n99 485 139",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\npt\nfnws\n1000 1000 1000\ncjs\nxrfo\nqvs\ncota\n1000 1000 1000\nuvf\nvk\nost\nve\ngl\nex\n1000 1000 1000\nog\ndg\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nsp\nwqx\n1000 1000 1000\ndjc\nxmz\nfczn\na\n1000 1000 1000\nx\ndftwp\nuboh\nziex\nw\ndtiig\n1000 1000 1000\nqlr\nswt\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 1000\npds\njrqt\n1000 1 1000\nxyi\numbi\nfkt\nbl\n2 999 999\nmdtayp\nskeruf\nii\nrvhvq\nlnjzby\nkydgl\n999 999 1\nklw\ncaj\n2 1000 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1000\nkx\nsxjl\n1000 1 1000\nnnm\nc\nof\nsmp\n999 1000 999\ncf\nopdxj\nmo\nylcgrl\ncfu\nhqcpy\n2 2 999\ne\nhqkh\n2 1000 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:57"
}