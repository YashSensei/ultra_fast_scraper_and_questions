{
  "problem_code": "problems",
  "title": "Justice League",
  "tags": [],
  "text": "Thirty five years ago, a group of super heroes was chosen to form the Justice League, whose\r\npurpose was to protect the planet Earth from the villains. After all those years helping mankind,\r\nits members are retiring and now it is time to choose the new members of the Justice League.In order to keep their secret identity, let’s say, secret, super heroes usually use an integer number\r\nto identify themselves. There are H super heroes on Earth, identified with the integers from 1\r\nto H. With a brief look at the newspapers anyone can find out if two super heroes have already\r\nworked together in a mission. If this happened, we say that the two heroes have a relationship.There must be onlyoneJustice League in the world, which could be formed by any number of\r\nsuper heroes (even only one). Moreover, for any two heroes in the new league, theymusthave\r\narelationship.Besides, consider the set of the heroes not chosen to take part in the Justice League. For any\r\ntwo heroes on that set, theymust nothave a relationship. This prevents the formation of\r\nunofficial justice leagues.You work for an agency in charge of creating the new Justice League. The agency doesn’t know\r\nif it is possible to create the League with the restrictions given, and asked for your programming\r\nskills. Given a set of super heroes and their relationships, determine if it is possible to select\r\nany subset to form the Justice League, according to the given restrictions.InputThe input is composed of several test cases. The first line of each test case contains two integers\r\nseparated by a single space, H (2 ≤ H ≤ 5×104) and R (1 ≤ R ≤ 105), indicating, respectively,\r\nthe number of heroes and the number of relationships. Each of the following R lines contains\r\ntwo integers separated by a single space, A and B (1 ≤ A < B ≤ H), indicating that super\r\nhero A has a relationship with super hero B. Note that if A has a relationship with B, B also\r\nhas a relationship with A. A relationship is never informed twice on a test case.The end of input is indicated by H = R = 0.OutputFor each test case in the input print a single line, containing the uppercase letter “Y” if it\r\nis possible to select a subset of heroes to form the Justice League according to the given\r\nrestrictions, or the uppercase letter “N” otherwise.ExampleInput:5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0Output:Y\r\nN\r\nY",
  "sample_input": "Input:5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0Output:Y\r\nN\r\nY",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JLEAGUE",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "5 5\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 5\r\n9 8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n0 0",
      "expected_output": "Y\r\nN\r\nY",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 9\n1 3\n4 10\n9 5\n6 7\n7 3\n5 7\n8 2\n10 10\n3 1\n5 4\n2 9\n9 9\n9 9\n3 8\n7 6\n4 3\n2 7\n7 4\n4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n2 8\n3 10\n1 10\n7 7\n7 10\n9 4\n8 4\n10 3\n5 4\n8 9\n6 10\n8 7\n4 3\n6 6\n7 5\n2 2\n3 8\n6 8\n3 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n9 3\n4 7\n5 1\n2 8\n8 9\n1 10\n1 9\n7 3\n6 5\n7 10\n5 6\n2 1\n5 10\n1 9\n1 8\n6 8\n1 2\n9 4\n1 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "55 18\n45 64\n61 42\n50 22\n16 40\n5 93\n31 84\n6 35\n61 52\n8 2\n3 45\n69 76\n92 41\n16 77\n59 58\n46 60\n87 19\n27 82\n66 25\n44 53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "82 33\n72 21\n8 56\n42 94\n94 55\n77 7\n100 92\n42 49\n28 49\n76 63\n64 64\n61 29\n98 66\n13 41\n49 54\n98 75\n89 49\n26 36\n55 58\n1 28",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 77\n93 68\n28 61\n29 26\n80 76\n51 52\n92 1\n57 13\n70 79\n61 32\n66 75\n11 72\n2 91\n50 60\n61 9\n97 13\n33 71\n43 10\n39 20\n96 86",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "76 17\n97 51\n92 89\n37 54\n82 13\n66 39\n30 52\n61 84\n3 82\n73 96\n52 22\n82 36\n91 67\n89 4\n38 52\n48 13\n34 15\n85 43\n25 5\n3 18",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 4\n59 68\n65 48\n24 61\n65 76\n33 65\n80 82\n32 91\n78 96\n30 66\n84 58\n95 10\n54 47\n41 24\n76 13\n29 99\n69 86\n13 4\n18 26\n89 23",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "437 453\n268 226\n199 326\n424 330\n224 334\n184 457\n328 380\n368 374\n84 87\n345 232\n183 220\n431 65\n473 372\n342 250\n99 278\n441 185\n257 317\n467 470\n76 116\n372 112",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "139 111\n374 179\n231 147\n84 158\n355 384\n145 197\n165 443\n221 98\n90 287\n109 490\n71 193\n486 331\n235 419\n153 496\n417 489\n138 90\n264 186\n318 91\n465 409\n366 440",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "258 464\n201 154\n408 153\n312 170\n435 336\n266 407\n485 279\n223 163\n469 96\n193 366\n234 386\n263 431\n452 455\n338 231\n263 89\n99 384\n380 200\n89 420\n376 177\n272 306",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "84 494\n326 228\n485 94\n478 446\n272 419\n75 198\n424 265\n132 457\n405 222\n200 440\n438 324\n168 205\n292 257\n199 339\n128 54\n143 446\n402 312\n415 121\n73 128\n371 208",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "96 150\n342 482\n150 288\n461 480\n98 340\n265 415\n356 257\n158 481\n286 343\n463 109\n239 446\n53 136\n191 411\n207 499\n340 226\n419 479\n210 257\n88 285\n255 331\n481 259",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "217 255\n96 205\n191 449\n383 367\n241 193\n373 382\n328 497\n345 472\n360 262\n447 111\n393 325\n113 125\n209 206\n185 205\n388 129\n460 333\n190 68\n210 410\n446 177\n144 218",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "168 124\n200 101\n242 217\n254 298\n130 427\n414 466\n284 432\n411 358\n433 423\n269 473\n406 478\n135 458\n263 336\n93 238\n96 346\n273 358\n358 477\n76 132\n267 131\n143 198",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n1000 1000\n999 999\n999 999\n999 999\n999 1\n999 1000\n1 1\n2 999\n2 1\n1 1\n1000 2\n1000 1\n2 999\n1 2\n999 999\n1 2\n999 1000\n1 2\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n1000 1\n1 999\n2 1\n1 2\n999 999\n2 2\n1000 1000\n2 1000\n1000 1\n2 1000\n1 1\n2 1\n1000 999\n2 999\n999 999\n999 999\n999 1\n1 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}