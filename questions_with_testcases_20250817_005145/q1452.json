{
  "problem_code": "problems",
  "title": "Tele Broadcast",
  "tags": [],
  "text": "EnglishVietnameseA TV-network plans to broadcast an important football match. Their\nnetwork of transmitters and users can be represented as a  tree. The\nroot of the tree is a transmitter that emits the football match, the \nleaves of the tree are the potential users and other vertices \nin the tree are relays (transmitters). \nThe price of transmission of a signal from one transmitter \nto another or to the user is given. A price of \nthe entire \nbroadcast is the sum of prices of all individual signal transmissions. \nEvery user is ready to pay a certain amount of money to watch the \nmatch and the TV-network then decides whether or not to provide the\nuser with the signal. \nWrite a program that will find the maximal number of users able \nto watch the match so that the TV-network’s doesn’t lose money from \nbroadcasting the match.InputThe first line of the input file contains two integers N and M, 2 ≤ N ≤ 3000,\n1 ≤ M ≤ N-1, the number of vertices in the tree and the number of \npotential users. \nThe root of the tree is marked with the number 1, while other transmitters\nare numbered 2 to N-M and potential users are numbered N-M+1 to N. \nThe following N-M lines contain data about the transmitters \nin the following form: \nK A1 C1 A2 C2 ... AK CK \nMeans that a transmitter transmits the signal to K transmitters or \nusers, every one of them described by the pair of numbers A and C, the \ntransmitter or user’s number and the cost of transmitting the signal to \nthem. \nThe last line contains the data about users, containing M integers \nrepresenting respectively the price every one of them is willing to \npay to watch the match.OutputThe first and the only line of the output file should contain the \nmaximal number of users described in the above text.SampleInput:5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2Output:2Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2Output:3Input:9 6\n3 2 2 3 2 9 3\n2 4 2 5 2\n3 6 2 7 2 8 2\n4 3 3 3 1 1Output:5",
  "sample_input": "Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2Output:2",
  "sample_output": "Input:5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2Output:3",
  "link": "https://www.spoj.com/problems/MTELE",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "5 3\n2 2 2 5 3\n2 3 2 4 3\n3 4 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3\n2 2 2 5 3\n2 3 2 4 3\n4 4 2",
      "expected_output": "3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "2 7\n8 5 6 4 10\n4 9 5 7 2\n4 2 1",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\n1 5 10 9 2\n7 7 4 1 9\n4 6 7",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 10\n1 3 6 5 10\n10 1 8 4 3\n7 4 9",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "37 4\n90 39 63 4 58\n5 4 92 82 44\n22 26 76",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "37 9\n50 61 52 1 96\n30 1 80 63 62\n2 69 69",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "59 3\n62 87 57 28 44\n4 38 52 73 14\n50 72 20",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "69 40\n21 25 9 32 13\n39 35 18 8 59\n25 91 20",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16 94\n50 65 8 78 70\n31 94 49 3 65\n49 84 24",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "407 317\n1243 1467 462 366 1500\n886 1128 812 980 1464\n1032 1216 770",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "762 964\n997 853 817 929 1306\n1147 519 1251 1495 466\n1132 739 316",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1110 887\n676 1350 246 864 837\n1027 1126 455 980 1035\n259 1061 509",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "571 451\n1180 1467 601 694 854\n1481 477 1499 254 1401\n833 1465 159",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1020 839\n314 397 1492 1062 1108\n777 892 691 586 1202\n1115 1300 934",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "720 313\n812 839 745 1042 1346\n267 341 1002 1121 1020\n868 1321 872",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1164 668\n1422 1302 1367 1386 969\n1066 960 861 1316 1474\n1440 853 735",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000 3000 3000\n3000 3000 3000",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 3000 2 2 2\n2 2999 1 1 2999\n1 2999 1",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}