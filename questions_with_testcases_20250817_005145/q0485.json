{
  "problem_code": "problems",
  "title": "Traveling Shoemaker Problem",
  "tags": [],
  "text": "Once upon a time there was a very peaceful country named Nlogonia. Back then, Poly the Shoemaker could come to the country and travel freely from city to city doing his job  without any harassment. This task was very easy, as every city in Nlogonia had a direct road to every other city in the country. He could then easily travel the whole country visiting each city exactly once and fixing everybody's shoes.But not anymore. The times have changed and war has come to Nlogonia. The age when people could travel freely is over.Confederations identified by colors were formed among the cities all over the country, and now each city belongs to at least one and at most two confederations. When trying to enter a city, you must give to the border officer a ticket from one of the confederations this city belongs to. When leaving the city, you receive a ticket from the other confederation the city belongs to (i.e. different from the one you gave when entering) or from the same confederation if the city only belongs to one.As Poly the Shoemaker is a long time friend of Nlogonia, he is allowed to choose a ticket and a city he wants to enter as the first city in the country,  but after that he must obey the confederations rules. He wants to do the same routine he did before, visiting each city exactly once in Nlogonia, but now it's not easy for him to do this, even though he can choose where to start his journey.For example, suppose there are four cities, labeled from 0 to 3. City 0 belongs to confederationsredandgreen; city 1 belongs only tored; city 2 belongs togreenandyellow; and city 3 belongs toblueandred. If Poly the Shoemaker chooses to start at city 0, he can enter it carrying either theredor thegreenticket and leave receiving the other.  Should he choose theredticket, he will leave with agreenticket,  and then there is only city 2 he can travel to. When leaving city 2 he receives theyellowticket and now can't go anywhere else. If he had chosen thegreenticket as the first he would receive theredone when leaving,  and then he could travel to cities 1 or 3. If he chooses city 3, when leaving he will receive theblueticket and again can't go anywhere else. If he chooses city 1, he receives theredticket again when leaving (city 1 belongs only to theredconfederation) and can only travel to city 3 and will never get to city 2. Thus, it is not possible to visit each city exactly once starting at city 0. It is possible, however, starting at city 2 with theyellowticket,  leaving the city with thegreenticket, then visiting city 0, leaving withredticket, then visiting city 1, leaving withredticket again and, at last, visiting city 3.As you can see, it got really difficult for Poly the Shoemaker to accomplish the task, so he asks you to help him. He wants to know if it's possible to choose a city to start such that he can travel all cities from Nlogonia exactly once.Can you help Poly the Shoemaker?InputThe input contains several test cases. The first line of a test case contains two integersNandC, separated by one space, indicating  respectively the number of cities (1   ≤N≤ 500) and confederations  (1   ≤C≤ 100) in the country. Each of the nextClines describes a confederation. It starts with one integerK(0   ≤K≤N) and thenKintegers representing the cities which belong to this confederation. All integers are separated by single spaces  and cities are numbered from 0 toN-1. Each city will appear at least once and at most twice and no city will be repeated on the same confederation.The end of input is indicated by a line containing two zeroes separated by a single space.OutputFor each test case in the input, your program must print a single line, containing the integer-1if it's not possible to match the requirements or one integer representing the city where Poly the Shoemaker can start his journey. If there are multiple correct answers, print the smallest one.ExampleInput:4 4\r\n1 3\r\n3 0 1 3\r\n2 0 2\r\n1 2\r\n3 4\r\n1 0\r\n3 0 1 2\r\n1 1\r\n1 2\r\n3 4\r\n1 1\r\n2 1 0\r\n2 0 2\r\n1 2\r\n0 0Output:2\r\n-1\r\n1",
  "sample_input": "Input:4 4\r\n1 3\r\n3 0 1 3\r\n2 0 2\r\n1 2\r\n3 4\r\n1 0\r\n3 0 1 2\r\n1 1\r\n1 2\r\n3 4\r\n1 1\r\n2 1 0\r\n2 0 2\r\n1 2\r\n0 0Output:2\r\n-1\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMER08I",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 4\r\n1 3\r\n3 0 1 3\r\n2 0 2\r\n1 2\r\n3 4\r\n1 0\r\n3 0 1 2\r\n1 1\r\n1 2\r\n3 4\r\n1 1\r\n2 1 0\r\n2 0 2\r\n1 2\r\n0 0",
      "expected_output": "2\r\n-1\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 10\n2 6\n5 2 3 3\n9 4 10\n9 3\n2 7\n8 6\n8 9 5 6\n3 1\n7 2\n3 3\n5 4\n3 6 5\n10 8 6\n9 9\n9 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4\n8 3\n7 10 8 8\n8 1 10\n9 2\n3 8\n2 1\n4 4 5 5\n7 3\n6 9\n2 2\n4 7\n1 1 6\n4 4 5\n2 2\n8 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 10\n4 6\n10 6 8 4\n6 6 6\n5 6\n9 2\n6 1\n6 5 1 2\n6 3\n7 2\n2 4\n10 6\n10 1 9\n9 2 8\n10 2\n6 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 38\n15 99\n73 66 65 17\n28 80 51\n37 93\n5 40\n91 50\n98 55 57 99\n49 53\n35 9\n80 38\n47 31\n11 53 71\n18 21 67\n85 58\n71 63",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "10 72\n63 99\n72 61 44 22\n37 94 87\n27 1\n47 65\n25 31\n1 51 31 23\n82 43\n83 34\n97 98\n84 65\n98 4 19\n5 49 88\n45 72\n28 41",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "23 83\n30 91\n81 58 77 66\n70 79 14\n91 78\n51 11\n87 98\n82 77 21 35\n99 27\n16 71\n20 35\n23 98\n38 82 93\n93 49 13\n9 81\n33 91",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 37\n47 96\n38 41 64 8\n40 29 54\n93 68\n13 55\n86 71\n94 50 62 16\n46 68\n82 77\n82 43\n43 41\n82 27 69\n8 68 9\n3 66\n30 80",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 90\n25 30\n86 11 54 6\n49 53 99\n9 46\n97 86\n28 9\n35 75 51 43\n22 98\n37 38\n18 29\n66 34\n27 27 69\n24 66 69\n14 66\n92 67",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "37 54\n122 236\n176 40 67 77\n94 203 182\n139 189\n92 27\n56 207\n130 207 90 77\n239 239\n198 86\n88 131\n30 153\n170 199 48\n172 110 236\n191 92\n92 141",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "126 45\n143 57\n123 37 122 169\n114 49 71\n195 247\n225 112\n89 220\n230 171 36 203\n186 212\n182 117\n71 224\n51 96\n213 219 133\n207 48 129\n107 159\n80 151",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "132 111\n248 144\n157 169 198 73\n79 91 48\n140 80\n216 42\n233 81\n184 120 90 126\n208 75\n227 177\n117 97\n193 243\n218 168 201\n208 225 114\n116 39\n230 29",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "156 242\n72 145\n55 185 189 86\n203 192 245\n77 225\n50 132\n191 226\n79 124 210 142\n75 83\n167 179\n87 86\n76 70\n100 74 190\n194 217 177\n116 152\n168 159",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "228 165\n155 215\n37 232 94 152\n203 192 127\n216 108\n50 54\n141 134\n217 115 210 75\n247 165\n114 122\n107 26\n231 27\n138 162 44\n167 116 154\n213 161\n188 148",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "55 204\n96 52\n133 127 131 180\n25 179 234\n102 125\n236 108\n158 157\n57 166 223 104\n89 172\n82 121\n124 172\n210 234\n154 100 104\n140 87 156\n47 175\n114 47",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "222 58\n175 140\n100 100 229 177\n67 130 196\n48 194\n72 46\n47 154\n117 241 104 72\n43 167\n197 54\n131 55\n213 70\n98 182 145\n39 126 124\n215 244\n200 176",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500 500\n500 500\n500 500 500 500\n500 500 500\n500 500\n500 500\n500 500\n500 500 500 500\n500 500\n500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500\n500 500",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500 500\n500 500\n500 500 500 500\n500 500 500\n500 500\n500 500\n500 500\n500 500 500 500\n500 500\n500 500\n500 500\n500 500\n500 500 500\n500 500 500\n500 500\n500 500",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "499 500\n2 500\n2 2 500 500\n500 1 1\n2 1\n499 500\n499 500\n1 500 499 500\n499 499\n499 500\n2 499\n500 2\n2 500 2\n2 500 500\n2 499\n499 499",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n499 499\n1 2 1 2\n500 499 2\n499 2\n500 2\n500 500\n1 1 500 500\n499 500\n500 500\n500 1\n500 2\n499 499 499\n2 500 2\n500 1\n500 500",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:35"
}