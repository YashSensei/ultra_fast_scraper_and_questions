{
  "problem_code": "problems",
  "title": "Heroes",
  "tags": [],
  "text": "Heroes... ugh...My plan to destroy the world was almost finished, but now heroes have gathered in their last attempt to save the earth (which, as everybody knows, is pretty flat). Heroes formed a defensiveN×Mgrid, each of the N × M heroes stands in one position of the grid. Also, the hero in positioni, jhas hijlife points.Of course, they stand no chance against my wrath. I'll attack them withQspells, the i-th spell will have power piand will attack the submatrix with corners (r1i, c1i) and (r2i, c2i). Heroes can decide how to distribute the power of the spell over the heroes in the attacked submatrix, so, for each spell, each hero of the submatrix will decrease his life points by a number of integer points (possibly zero), such that between all the heroes of the submatrix take all the pipoints of damage. Of course, a hero can only take more damage if his life is greater than zero. Note that the damage they receive will accumulate over all the Q spells.If heroes cannot receive the damage points of a spell, my spell will reach the (flat) earth and immediately destroy it.Assuming heroes know the sequence of spells I'll use, can they save the earth if they work optimally?InputIn the first line, two integers, N and M, the number of rows and columns in the grid.Next N lines, each one contains M integers hij, the initial life points of each hero.Then a line with integer Q, the number of spells.Then follow Q lines, each with 5 integers: r1i, c1i, r2i, c2i, pi.OutputPrint ”BOOM!” (without quotes) if the earth is destroyed, print ”ugh” (without quotes) otherwise.ExampleInput:2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 9Output:ughInput:2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 10Output:BOOM!Constraints1 ≤ N ≤ 101 ≤ M ≤ 100001 ≤ Q ≤ 5001 ≤ r1i≤ r2i≤ N1 ≤ c1i≤ c2i≤ M1 ≤ pi, hij≤ 104",
  "sample_input": "Input:2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 9Output:ughInput:2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 10Output:BOOM!",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VZLA2019H",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 9",
      "expected_output": "ughInput:2 3\r\n2 1 3\r\n2 4 4\r\n2\r\n1 1 2 2 7\r\n1 2 2 3 10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 1\n1 6 4\n3 3 3\n5\n8 7 6 6 4\n10 3 2 8 3",
      "expected_output": "0\n0\n0\n5\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10\n8 9 6\n9 1 1\n10\n9 4 5 10 3\n9 3 8 10 8",
      "expected_output": "0\n0\n0\n10\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6\n3 9 7\n4 6 10\n2\n5 8 7 10 9\n4 8 7 1 9",
      "expected_output": "0\n0\n0\n2\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "78 72\n66 21 74\n99 87 55\n51\n44 88 11 36 16\n18 72 21 20 77",
      "expected_output": "0\n0\n0\n51\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "71 47\n55 95 80\n58 23 22\n91\n56 21 11 76 53\n33 8 28 97 34",
      "expected_output": "0\n0\n0\n91\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 92\n21 64 90\n96 9 31\n67\n87 99 6 28 58\n71 76 39 15 20",
      "expected_output": "0\n0\n0\n67\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 58\n48 6 74\n8 13 61\n14\n74 33 63 45 1\n38 11 17 53 98",
      "expected_output": "0\n0\n0\n14\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 42\n40 17 17\n70 90 64\n55\n34 74 59 52 31\n26 38 27 54 4",
      "expected_output": "0\n0\n0\n55\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "47 24\n17 22 15\n26 7 8\n6\n48 21 12 46 48\n28 40 20 8 41",
      "expected_output": "0\n0\n0\n6\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "22 39\n17 29 10\n36 20 37\n6\n33 17 26 20 20\n13 47 47 33 38",
      "expected_output": "0\n0\n0\n6\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "39 32\n45 42 13\n22 38 26\n10\n15 21 23 20 20\n7 25 22 45 49",
      "expected_output": "0\n0\n0\n10\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 37\n7 37 11\n32 36 43\n13\n46 14 49 28 7\n33 13 17 39 8",
      "expected_output": "0\n0\n0\n13\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 30\n34 44 35\n29 19 42\n32\n9 25 27 36 33\n42 20 34 48 7",
      "expected_output": "0\n0\n0\n32\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "32 24\n29 12 23\n49 8 32\n36\n16 16 29 27 10\n6 5 19 6 49",
      "expected_output": "0\n0\n0\n36\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "18 27\n45 13 28\n44 6 22\n13\n41 32 35 24 10\n31 28 12 37 43",
      "expected_output": "0\n0\n0\n13\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101\n101 101 101 101 101\n101 101 101 101 101",
      "expected_output": "0\n0\n0\n101\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101\n101 101 101 101 101\n101 101 101 101 101",
      "expected_output": "0\n0\n0\n101\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n1 1 2\n101 1 100\n101\n100 100 101 100 1\n100 2 100 1 100",
      "expected_output": "0\n0\n0\n101\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 2 100\n100 101 2\n1\n100 1 101 101 100\n1 1 2 101 101",
      "expected_output": "0\n0\n0\n1\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:45"
}