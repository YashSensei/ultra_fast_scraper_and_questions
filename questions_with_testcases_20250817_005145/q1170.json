{
  "problem_code": "problems",
  "title": "Tetris 3D",
  "tags": [],
  "text": "The authors of the game \"Tetris\" have decided to make a new, three-dimensional version, in which cuboids would fall down on a rectangular platform. The blocks fall down separately in a certain order, just like in the two-dimensional game. A block falls down until it reaches an obstacle: the platform or another block, that has already stopped - then it stops and remains in this exact position till the game is over.However, the authors wanted to change the spirit of the game, turning it from a simple arcade-game into a play far more puzzling. Knowing the order of the falling blocks and their flight path the player's task is to tell the height of the highest point of the arrangement after all blocks have fallen down (and stopped). All the blocks are falling down vertically and do not rotate while falling. For convenience we'll introduce a cartesian coordinate system on the platform, with the center in one of the platform's corners and the axes parallel to the platform's edges.Write a program that:reads the descriptions of subsequent falling blocks from the standard input,determines the height of the highest point of the arrangement of blocks after all have fallen down and stopped,writes the result to the standard output.InputIn the first line of the input there are three integers D, S and N (1 <= N <= 20000, 1 <= D, S <= 1000), separated by single spaces and denoting respectively: the length and the depth of the platform and the number of blocks that are going to fall down on it. In the following N lines the descriptions of subsequent blocks are given, one in each line.Each description of a block consists of five integers: d, s, w, x and y (1 <= d, 0 <= x, d + x <= D, 1 <= s, 0 <= y, s + y <= S, 1 <= w <= 100000), representing a block of length d depth s and height w This very block will be falling down on the platform with its dÃ—s face as the bottom, where the length and depth of the block are parallel to those of the platform. The coordinates of the vertices of the projection of the block on the platform are: (x, y), (x + d, y), (x, y + s) and (x + d, y + s).OutputThe first and only line of the standard output should contain exactly one integer, the height of the highest point of the arrangement of blocks after all have fallen down ad stopped.ExampleInput:7 5 4\r\n4 3 2 0 0\r\n3 3 1 3 0\r\n7 1 2 0 3\r\n2 3 3 2 2Output:6",
  "sample_input": "Input:7 5 4\r\n4 3 2 0 0\r\n3 3 1 3 0\r\n7 1 2 0 3\r\n2 3 3 2 2Output:6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TETRIS3D",
  "scraped_at": "2025-08-17 00:33:51",
  "test_cases": [
    {
      "input": "7 5 4\r\n4 3 2 0 0\r\n3 3 1 3 0\r\n7 1 2 0 3\r\n2 3 3 2 2",
      "expected_output": "6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 4\n4 4 1 10 8\n1 8 6 3 4\n2 4 6 7 7\n7 4 10 2 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 8\n2 7 3 5 8\n7 10 5 10 6\n6 8 4 3 9\n9 4 2 9 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 8\n6 2 6 6 3\n3 3 8 6 1\n5 1 7 10 5\n9 8 4 6 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "62 56 99\n85 94 27 57 48\n92 94 90 61 44\n94 100 33 21 70\n75 73 33 59 44",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 10 64\n61 52 59 2 9\n79 42 96 70 73\n73 66 79 19 41\n20 15 42 17 47",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 40 42\n53 95 88 34 64\n100 51 4 12 94\n72 90 37 4 24\n62 54 87 80 86",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "86 95 45\n58 56 52 22 88\n47 64 21 91 21\n41 72 63 67 64\n94 12 1 84 54",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 33 24\n81 30 18 15 87\n43 69 83 68 13\n28 4 82 62 46\n64 39 89 37 97",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "209 454 173\n344 55 468 151 170\n162 259 51 499 419\n114 474 71 332 198\n405 108 107 56 477",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "292 349 123\n79 313 70 72 429\n257 442 378 445 225\n492 451 493 413 242\n351 456 268 302 494",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "141 392 412\n252 296 328 420 316\n329 126 111 477 208\n167 424 142 325 349\n352 385 192 244 198",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "246 428 461\n121 306 394 274 234\n300 246 400 402 485\n277 371 309 66 455\n347 266 73 186 265",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "158 73 208\n66 283 66 300 297\n490 331 255 389 275\n450 242 141 246 448\n286 124 153 355 201",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "227 292 276\n498 148 350 317 103\n208 295 177 69 310\n430 406 388 115 124\n81 242 124 348 210",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "221 141 396\n359 347 59 133 88\n309 378 478 207 444\n440 368 413 393 420\n97 234 241 354 495",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 2\n1000 1000 1 999 999\n2 999 1 1000 1\n2 1 1000 2 1000\n999 999 1 1 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1000\n2 1000 1000 2 999\n1 1000 1 999 999\n999 2 999 1 2\n1 1000 2 1000 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:55"
}