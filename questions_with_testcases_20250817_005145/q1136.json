{
  "problem_code": "problems",
  "title": "Grocery store",
  "tags": [],
  "text": "A cashier in a grocery store seems to have difficulty in\r\ndistinguishing the multiplication symbol and the addition symbol. \r\nTo make things easier for him, you want to buy goods in such a\r\nway that the product of their prices is the same as the sum of\r\ntheir prices.Of course, if you buy only one item, this is always true. With two\r\nitems and three items, it still seems quite a boring task to you,\r\nso now you are interested in finding possible prices of four items\r\nsuch that the sum of the four prices is equal to the product of the\r\nfour prices. You should consider the prices are in € with two\r\ndigits after the decimal point. Obviously, each product costs at\r\nleast one cent.InputThis problem has no input.OutputPrint all solutions which have a sum of the four items of at most€20.00. For each solution, print one line with\r\nthe prices of the four items in non-decreasing order, with one space\r\ncharacter between them. You may print the solutions in any order,\r\nbut make sure to print each solution only once.Sample Output0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
  "sample_input": "0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GROCERY",
  "scraped_at": "2025-08-17 00:33:39",
  "test_cases": [
    {
      "input": "0.50 1.00 2.50 16.00\r\n1.25 1.60 1.75 1.84\r\n1.25 1.40 1.86 2.00\r\n...",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 7 3 5\n1 10 10 1\n10 10 2 10\ndfef",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 7 3\n10 7 9 8\n9 1 5 1\nq",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 4 3 5\n2 4 10 1\n8 6 4 9\ntflf",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "53 82 46 26\n98 30 91 41\n2 37 93 84\naz",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 98 35 18\n20 11 1 11\n2 59 51 80\nx",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "42 26 95 9\n83 40 99 79\n44 26 16 27\ncqwb",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "16 93 83 74\n82 32 95 97\n83 52 85 4\nxts",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 86 6 28\n41 13 36 97\n57 33 19 75\ni",
      "expected_output": "0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "209 380 379 129\n155 145 412 223\n130 315 161 148\nsapid",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "68 173 478 417\n169 336 331 233\n362 137 167 189\ndmuy",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "251 208 209 426\n157 200 227 110\n465 268 176 59\nmjm",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "133 99 487 220\n52 154 392 131\n215 68 369 254\ndjje",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "264 81 328 482\n320 468 422 364\n114 320 189 274\nvc",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "206 149 463 378\n73 387 248 246\n189 278 311 116\nj",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "167 373 313 104\n191 346 100 401\n207 105 327 136\nhtsck",
      "expected_output": "0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\nrc",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\necuuoq",
      "expected_output": "0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 2 999\n999 1 1000 999\n1 2 2 2\nej",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 2 999\n2 1 999 2\n999 1000 1 1000\nmofe",
      "expected_output": "0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:54"
}