{
  "problem_code": "problems",
  "title": "Musical Optimization",
  "tags": [],
  "text": "Bessie the cow used to write musical melody. A musical melody is\r\nrepresented as a sequence of N (1 ≤ N ≤ 100,000) notes numbered 1..N.\r\nNote i is  represented by the integer Ai(-10,000 ≤ Ai≤ 10,000).To Bessie's cow-like mind, a musical melody is called 'perfect' if and only\r\nif the sum of all the notes in any of its consecutive subsequences is\r\nstrictly positive.For a given musical melody, Bessie wants to make it perfect, but she wants\r\nto change the melody as little as possible.Thus, to perfect the melody, she repeatedly chooses a consecutive\r\nsubsequence of the melody, [x, y] (1 < x ≤ y < N), whose sum S is\r\nnegative. Then she adds S to both Ax-1and Ay+1, while subtracting S from\r\nboth Axand Ay. (It is possible to subtract from the same note twice if x\r\n= y.)Given a musical melody, compute the minimum number of steps to make the\r\nmelody perfect.InputLine 1: The single integer N.Lines 2..N+1: Line i+1 contains the single integer Ai.OutputLine 1: A single integer that represents the minimum number of steps\r\n        needed to make the given musical melody perfect. If there are\r\n        no solutions, output -1 instead.ExampleInput:5\r\n13\r\n-3\r\n-4\r\n-5\r\n62Output:2ExplanationThere is a musical melody with length of 5. The notes are (13, -3, -4, -5, 62).First, we choose the range [2, 4]; its sum is (-3) + (-4) + (-5) = -12.\r\nAfter the first step, the melody becomes (1, 9, -4, 7, 50). Second, we\r\nchoose the range [3, 3], whose sum is -4, and the melody after the second\r\nstep becomes (1, 5, 4, 3, 50). The melody is perfect now.Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:5\r\n13\r\n-3\r\n-4\r\n-5\r\n62Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MUSIC",
  "scraped_at": "2025-08-17 00:33:18",
  "test_cases": [
    {
      "input": "5\r\n13\r\n-3\r\n-4\r\n-5\r\n62",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n8\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n1\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n8\n10\n3\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "6\n73888042\n23486657\n17663998\n2332164\n8542009\n24972037",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n63482413\n61904044\n78350087\n5569350\n87219895\n89495951\n50581412\n1433932\n24940757\n33380448\n63405885\n9342027\n26233023",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n93037512\n25444361\n84500026\n22773451\n36856292\n33809566\n50271177\n51808306\n82330771\n50523230",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n68394887\n79302050\n81756101\n4851663\n57612116\n52371840\n92271581",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n44898415\n87163420\n20346996\n12170649\n71863859\n8990054\n47764572\n59525214\n73169888",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "24\n73389\n51503\n49348\n72422\n35047\n33436\n2988\n64893\n80819\n32830\n58657\n95905\n94011\n66994\n3209\n45\n43562\n471\n45267\n3309\n84718\n41258\n78143\n3358",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n63756\n72082\n63839\n2694\n21901\n56157\n19440\n40880\n70800\n30106\n10365\n9289\n9861\n55550\n12412\n24525\n56357\n54609\n64024\n74012\n1163\n79873",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "89\n88564\n13515\n73615\n51820\n86883\n52516\n14231\n49686\n64572\n98806\n67773\n23030\n84092\n26559\n75566\n75650\n54669\n39743\n85076\n3520\n54186\n68269\n3968\n31604\n98648\n43531\n5404\n12258\n47165\n82143\n74769\n72223\n41213\n80753\n55129\n53165\n60485\n6044\n62864\n4382\n92777\n12945\n13670\n18028\n43162\n81361\n49536\n92125\n92379\n39720\n43265\n95788\n1855\n50015\n18644\n23242\n51435\n92657\n77223\n15752\n8097\n94445\n94811\n63414\n40052\n28904\n58430\n10078\n86622\n45699\n26391\n22214\n61248\n47909\n87514\n51966\n80746\n21899\n21641\n31703\n4164\n71737\n58809\n39649\n46167\n48641\n2713\n20015\n92591",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n70285\n82896\n26923\n61557\n24586\n95264\n8750\n6691\n35069\n61113\n71940\n19984\n1094\n10788\n66715\n27860\n77286\n60418\n97585\n62692\n88698\n58412\n85496\n88247\n53299\n79099\n19155\n41121\n27166\n28530\n45435\n34960\n38939\n97064\n10588\n72100\n28322\n81771\n68922\n96606\n75958\n48003\n81358\n82863\n63653\n16164\n4882\n55493\n41556\n42323\n46006\n5441\n90758\n45187\n54512\n53486",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n5467\n6994\n2203\n25812\n4047\n68268\n90693\n394\n86370\n44496\n68152\n43740\n39493\n64613\n12528\n97534\n3248\n97837\n97178\n41717\n94606\n42496\n28111\n12128\n42706\n64473\n33293\n50095\n24388\n3079\n20432\n4956\n32595\n56965\n26643\n82752\n69206\n27437\n82849\n9054\n31889\n32160\n1596\n94681\n84554\n14521\n17156\n86955\n99511\n90424\n28086\n17349\n86580\n45187\n40641\n14346\n56557\n72688\n1779\n78022\n41195\n96014\n5109\n91964\n40513\n85807\n2483\n1026\n74106\n45935\n57208\n72215\n44901\n31608\n78189\n67822\n16134\n94330\n68286\n59268\n44554\n95503\n55645\n37228\n27645\n90592\n25488\n15132\n95269\n9782\n31383\n56780\n89935\n51342",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n39490\n29025\n57658\n46168\n51884\n54691\n32964\n74091\n95154\n35671\n77749\n62774\n46592\n26037\n68662\n48130\n6921\n49069\n37262\n8404\n83132\n2158\n79606\n76445\n24754\n25567",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n80069\n39565\n46353\n74165\n62934\n21238\n7217\n43890\n41902\n61072\n98394\n54946\n1043\n89674\n72699\n55463\n62799\n19650\n252\n83515\n94445\n70807\n64944\n12280\n84289\n91037\n15755\n18249\n71675\n61324\n7405\n86399\n34571\n48606\n3693\n46426\n31076\n92106",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n93911059\n68109953\n23993033\n71262721\n44390403\n21081290\n24366913\n10883343\n82161375\n95187713\n955886\n31650955\n82371743\n97694301\n38627131\n38086672\n97951743\n45157142\n31917991\n10839642\n96436511\n85198567\n18687868\n86371466\n67749141\n11975556\n64607257\n13853897\n96129370\n33753408\n69789938\n89731327\n10600195\n12879131\n46151398\n67968228\n52306661\n38445637\n61260239\n256937\n74506647\n58121692\n62064870\n2861361\n99570864\n2252131\n88977573\n47760125\n76103174\n36790142\n1726234\n74227924\n63304700\n42999545\n69083201\n46688951\n36163760\n44086124\n13680021\n36773515\n60323878\n36788479\n78101391\n58982064\n5308881\n56656784\n61725477\n48554915\n66304641\n91051838\n6787820\n66205119\n12311151\n41133971\n24016150\n71714350\n41047356\n18944491\n79359240\n55942826\n84818932\n57856130\n48140465\n90131072\n63246791\n80690248\n43984664\n53489890\n58493297\n61982332\n47830073\n38305176\n92679209\n44636193\n64280302\n81880429\n79613081\n37494163\n73669951\n764668",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n72519411\n5485055\n16121030\n92866780\n47213684\n52349096\n19580949\n3561203\n36244657\n93300850\n68538554\n42064478\n86857923\n71453114\n92515826\n23819812\n97997955\n90034765\n71103470\n69323370\n80825657\n66214171\n94004193\n77859146\n97154380\n87898502\n48556481\n87125455\n90930630\n58577608\n42246796\n67446695\n65978988\n70013988\n3598195\n25077883\n71977685\n61991037\n87795311\n53231852\n17332330\n82501247\n26786984\n97209011\n43053351\n97987485\n69616298\n30871317\n48030633\n6947999\n53616517\n71788852\n64934083\n68435258\n60499586\n93270344\n44357814\n70200028\n22513161\n27962288\n85943255\n32817144\n78116996\n1191407\n74383875\n4724906\n63787635\n31767853\n2822229\n32101392\n96852233\n1395503\n75796359\n52869525\n76926202\n9822792\n91841644\n54606342\n31118058\n15062247\n19250054\n69252353\n45800113\n29841176\n17774117\n77839891\n10334389\n37287368\n92693018\n79199773\n58530929\n40933426\n75889293\n84404951\n95353467\n16928656\n25126822\n96196849\n49368041\n63138852",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n71726937\n58968804\n100000000\n100000000\n100000000\n10053997\n45764127\n1\n53586008\n7270165\n100000000\n1\n73279342\n100000000\n1\n38716400\n1\n1\n100000000\n100000000\n1\n100000000\n1\n100000000\n1\n84293385\n100000000\n100000000\n47729627\n100000000\n52556742\n1215389\n21928655\n81527368\n79866416\n1\n1\n100000000\n100000000\n100000000\n1\n26480770\n73692032\n100000000\n1\n100000000\n76363850\n100000000\n12314978\n1\n1\n1\n1\n100000000\n13884226\n100000000\n79793559\n60145756\n1\n90937317\n1\n1\n100000000\n22340074\n1\n1\n1\n100000000\n100000000\n45028335\n1\n1\n100000000\n100000000\n1\n100000000\n10586169\n1\n1\n82815035\n100000000\n19533666\n1\n24523065\n100000000\n1\n100000000\n100000000\n1\n6822661\n100000000\n77819753\n219790\n1\n67935879\n100000000\n100000000\n1\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 100)"
    },
    {
      "input": "100\n1\n84019091\n51334346\n1\n1\n79525897\n100000000\n1\n100000000\n46745588\n1\n1\n100000000\n1\n100000000\n1\n81796657\n27998627\n100000000\n1\n87410215\n41219834\n1\n1\n38913895\n100000000\n1\n100000000\n1\n39162684\n1\n1\n93966697\n100000000\n100000000\n1\n62034021\n100000000\n1\n32184721\n1\n100000000\n100000000\n1756198\n90492662\n100000000\n1\n72465975\n100000000\n1\n1\n100000000\n3226974\n1\n100000000\n1\n100000000\n1\n33708625\n1\n1\n100000000\n41821100\n14697901\n1\n14649755\n100000000\n67887021\n8831559\n70260198\n88394068\n100000000\n1\n1\n100000000\n100000000\n100000000\n100000000\n56033561\n100000000\n54808308\n50517799\n1\n1\n1\n100000000\n92713523\n100000000\n95679259\n22371552\n1\n1\n49336974\n53701853\n100000000\n100000000\n1\n83286687\n59308995\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 100)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}