{
  "problem_code": "problems",
  "title": "Foxhole",
  "tags": [],
  "text": "Everyone knows that Foxen love digging holes. You've been observing one Fox in particular, who's preparing to burrow underground in search of treasures. When viewed from the side, as a cross-section, his digging site can be represented as a grid of cells, $H$ ($1 \\leq H \\leq 100$) deep and $W$ ($1 \\leq W \\leq 100$) across. Every cell contains either dirt (represented by \"D\"), stone (\"S\"), empty space (\"E\"), or a treasure (\"T\"). The surface can also be traversed, effectively giving the grid an additional row of empty cells above the topmost row.The Fox starts immediately above the top-left cell, which is guaranteed to not be empty. It has a set of $N$ ($1 \\leq N \\leq 1000$) actions in mind before it starts its dig, which it will execute in order. Each action consists of moving either left (represented by \"L\"), right (\"R\"), or down (\"D\") by one cell. If the cell that the Fox would move to contains stone, or is beyond the boundaries of the grid in any direction, it will skip that action. If it enters a cell with a previously-uncollected treasure, it will collect it, leaving the cell empty. If the cell immediately below the Fox is ever empty, it will fall down until this is no longer the case. Note that collecting treasure occurs before falling, and that the Fox stops falling if it hits the bottom of the grid.There are $T$ ($1 \\leq T \\leq 20$) scenarios as described above. For each one, you'd like to determine how many treasures the Fox will collect throughout the course of its dig.InputFirst line: 1 integer, $T$For each scenario:First line: 3 integers, $H$, $W$, and $N$Next $H$ lines: $W$ characters, representing the $i$th row of the grid, for $i = 1..H$Next $N$ lines: 1 character, representing the $i$th action, for $i = 1..N$OutputFor each scenario:1 integer, the number of treasures collected in total.ExampleInput:22 3 4DDDTESRDRL3 2 6TETEETRRLRLROutput:12Explanation of Sample:In the first scenario, the Fox moves right along the surface, then digs down to the first row. As the cell below it is empty, it immediately falls to the 2nd row. It ignores its next action, as the cell to its right is filled with stone, and finally moves left to claim a treasure.In the second scenario, it moves to the right and promptly falls all the way down to the 2nd row. Because the Fox is already in the rightmost column, it ignores the action to move right. It then moves left, collects the treasure there, and then falls to the bottom row. Finally, it moves back and forth between the bottom-left and bottom-right cells twice - however, it only collects the treasure in the latter cell the first time.",
  "sample_input": "Input:22 3 4DDDTESRDRL3 2 6TETEETRRLRLROutput:12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UOFTAC",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "22 3 4DDDTESRDRL3 2 6TETEETRRLRLR",
      "expected_output": "12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 9 2 7 8 6\n9 4 keztkudjy 3 jmjzxf",
      "expected_output": "0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 6 6 3 8 7\n8 1 eommybxa 1 vebekpxmlhu",
      "expected_output": "0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 8 1 8 1\n5 3 kquujq 7 ngagpcobj",
      "expected_output": "0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "99 79 81 14 48 22\n52 4 xrpmsp 11 ksxtqyt",
      "expected_output": "0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 16 13 63 34 48\n88 95 pkjrhktkg 43 u",
      "expected_output": "0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 52 17 67 21 35\n26 7 iatybjkqdh 82 nvv",
      "expected_output": "0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 29 93 9 72 17\n41 67 yavx 37 sdcjxprh",
      "expected_output": "0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "11 56 77 76 62 23\n62 78 inbzqqwznp 55 kqmmksham",
      "expected_output": "0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "337 54 288 141 63 215\n396 246 qrvhep 445 ptrvcqrdjhud",
      "expected_output": "0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "292 370 93 272 353 328\n93 434 zeugti 167 hchgulyl",
      "expected_output": "0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "407 303 362 455 448 220\n57 112 mrfgmsz 193 wvbzaqy",
      "expected_output": "0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "192 395 132 186 148 423\n340 470 vadecs 308 qvukjpbpt",
      "expected_output": "0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "190 252 391 328 488 379\n351 62 twimaoubk 339 sokwuhufq",
      "expected_output": "0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "211 494 243 399 66 78\n110 455 xdlbf 349 cxuimkilj",
      "expected_output": "0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "99 245 491 394 126 421\n375 216 mg 110 wgnwhw",
      "expected_output": "0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000\n1000 1000 gxcokobyh 1000 ybnntghsc",
      "expected_output": "0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000\n1000 1000 bmnwuvg 1000 rkzoor",
      "expected_output": "0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 999 1 1 2\n1000 2 n 2 wwqe",
      "expected_output": "0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 2 1 1000 1000\n2 2 hofahaft 999 rpnzybt",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:23"
}