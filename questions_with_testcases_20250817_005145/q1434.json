{
  "problem_code": "problems",
  "title": "Con Voi",
  "tags": [],
  "text": "EnglishVietnameseAn  elephant  lives by  a  lake with N plants on  the  surface. The  lake can be modeled by  a  coordinate plane, with plants at points with integer coordinates. Every morning  after waking  up,  the  elephant  performs  his morning  exercise,  happily  jumping  from plant  to plant. For  reasons best  left undiscussed,  the elephant can always jump only  to another plant with both coordinates larger than the coordinates of the plant it is currently on. In other words, from plant (x1, y1) the elephant can jump to plant (x2, y2) only if x2 > x1 and y2 > y1. The elephant can start his exercise at any plant on the lake.  Write a program that, given the coordinates of all plants, calculates the length of the longest sequence of  plants  the  elephant  can  visit.  Additionally,  calculate  the  number  of  different  such  longest sequences. Because this second number can be large, calculate it modulo 1 000 000 007.InputThe first line contains the integer N (1 ≤ N ≤ 300 000), the number of plants. Each of the following N  lines contains the coordinates of one plant, two  integers between 0 and 109. No two plants will have the same pair of coordinates.OutputOn the first line output the length of the longest sequence of plants the elephant can jump on. On the second line output the number of such sequences of maximum length, modulo 1 000 000  007.Sampleinput118 67 45 45 15 66 23 24 34 53 52 4output43input61 32 23 15 34 43 5output27",
  "sample_input": "input118 67 45 45 15 66 23 24 34 53 52 4output43",
  "sample_output": "input61 32 23 15 34 43 5output27",
  "link": "https://www.spoj.com/problems/MCONVOI",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "input118 67 45 45 15 66 23 24 34 53 52 4output43",
      "expected_output": "input61 32 23 15 34 43 5output27",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2 2 10 4 9 1 6 5 3 8 6 4\nxojkcnls 5 5 7 3 3 2 3 3 3 6 p",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 1 7 1 1 3 1 3 7 3 8 9\nbcn 2 1 7 5 7 7 5 7 7 8 eled",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 4 8 4 10 2 8 5 3 10 7 10\ncglueph 9 1 10 10 9 10 4 9 4 5 u",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "28 70 31 7 3 33 57 94 92 76 7 39 34\nhbw 18 96 8 93 45 35 41 19 36 36 exkk",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 55 15 21 76 32 43 54 64 44 13 81 90\necfrvl 7 90 68 33 3 24 23 58 83 96 zg",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "76 65 17 9 10 4 60 80 91 60 41 46 73\nuji 9 70 12 98 49 82 79 27 51 56 coeisosj",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "9 35 8 51 98 52 75 32 52 67 73 70 67\nmr 33 32 14 76 32 84 70 47 79 43 zyfnox",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 5 23 11 90 2 13 15 78 72 29 2 93\nkccgi 1 68 76 43 52 19 32 26 89 50 ug",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "41294 16962 70284 27085 83414 128667 97261 57629 55642 61606 34211 79900 131279\nwunddxcn 145511 95403 75885 29984 63534 50804 63361 55751 29434 130209 mnz",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "79338 136365 146374 127265 139961 46478 71551 143867 143164 16421 94582 99386 72130\ndvbc 76532 98722 20234 21916 114978 114224 47898 18568 88756 55326 irifep",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "140194 39355 28006 99556 109340 142709 129024 89804 72975 133850 94549 115411 57512\njts 25804 107497 95122 47123 62711 49720 29812 51487 70942 97375 dvpheyx",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18051 115131 86082 29757 52469 138768 131277 132161 35344 59770 72586 90145 58421\nkwkqx 94476 15518 39260 76438 116374 40977 53349 133904 21873 19536 o",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "144665 140341 147936 52747 133935 137499 142927 80916 85506 30972 110064 40566 92310\nyyygkxz 67972 36760 90461 26425 143130 52083 77837 53764 73034 19202 lyamdlgly",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "123690 135629 36744 116874 144911 99352 100366 65759 125792 89230 31548 140500 56958\nqgfbim 34232 144435 87904 19285 31152 68602 31830 21788 33858 76887 wlydit",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "129353 20340 103175 18425 85532 67374 60060 124151 142943 102206 97480 91689 46203\nggxujtjm 53093 41329 126103 112423 20895 107609 33518 143901 56044 95749 wtmfhbavf",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000\nd 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 clraqrv",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000\nuzpgjlb 300000 300000 300000 300000 300000 300000 300000 300000 300000 300000 ojyvgdet",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "300000 299999 299999 299999 299999 299999 300000 300000 1 2 300000 1 1\nnb 300000 1 299999 2 1 300000 300000 1 299999 300000 pyqcd",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 299999 299999 300000 300000 299999 299999 1 1 2 2 1 2\nomf 2 299999 1 299999 299999 2 300000 300000 299999 1 cexlk",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}