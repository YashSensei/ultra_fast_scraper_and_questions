{
  "problem_code": "problems",
  "title": "Temple Queues",
  "tags": [],
  "text": "TheTirumala templeis the most visited place of worship in the world. As the number of pilgrims who visit the temple each day is very high, the head of the temple should keep monitoring the queue system. Today is another lovely day and he has started his work. There areNqueues at the entrance of the temple and some of them are already filled with pilgrims. Each queue has a metal door at the beginning, which leads to the temple. When the door is opened, it allows only one pilgrim to get through it and it gets closed immediately after that.New pilgrims are rushing in to the queues and the head needs to monitor the current sizes of the queues and decide which doors to be opened. At any time, he wants to know how many queues currently have at leastXpilgrims. He also decides an integerYand wants to open the doors of all the queues having at leastYpilgrims at that time. You are the controller of the queue system and are following his instructions. Respond quickly and win yourself a big laddu (sweet) from him :) .Read the input section for rest of the details.InputThe first line contains two integers N and Q. N - The number of queues [1 ≤ N ≤ 100,000], Q - The number of queries [0 ≤ Q ≤ 500,000]. The second line contains N integers, which are the initial sizes of the queues. ith integer (1-based) is the initial size of queue i [0 ≤ initial size ≤ 100,000,000]Each of the next Q lines is one of the following:1 A [One pilgrim enters the queue# A (1 ≤ A ≤ N)]2 X [Find the number of queues having at least X pilgrims currently (0 ≤ X ≤ 1,000,000,000)]3 Y [Open the doors of all the queues having at least Y pilgrims (1 ≤ Y ≤ 1,000,000,000), and thus allowing only one pilgrim to enter the temple from each of them]OutputFor each query of type \"2 X\", print the answer in a new line.ExampleInput:5 6\r\n20 30 10 50 40\r\n2 31\r\n1 2\r\n2 31\r\n3 11\r\n2 20\r\n2 50Output:2\r\n3\r\n3\r\n0Note:Ideal time limit should be 2s. It has been increased to 7s, to let Java solutions pass, as the I/O is huge. Edit: now 1s after server update.There are multiple test sets, and the judge shows thesumof the time taken over all test sets of your submission, if accepted.",
  "sample_input": "Input:5 6\r\n20 30 10 50 40\r\n2 31\r\n1 2\r\n2 31\r\n3 11\r\n2 20\r\n2 50Output:2\r\n3\r\n3\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TEMPLEQ",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "5 6\r\n20 30 10 50 40\r\n2 31\r\n1 2\r\n2 31\r\n3 11\r\n2 20\r\n2 50",
      "expected_output": "2\r\n3\r\n3\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10\n7 10 5 6 8\n2 6\n6 2\n2 8\n9 6\n7 4\n9 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 1\n1 6 8 2 8\n6 10\n5 8\n4 6\n2 8\n8 6\n2 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 8\n8 1 1 9 7\n6 1\n3 8\n1 4\n8 7\n10 3\n3 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 62\n52 35 63 41 86\n93 48\n18 88\n91 83\n30 67\n35 49\n43 45",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "47 81\n3 46 70 90 71\n50 50\n42 93\n82 17\n89 77\n70 60\n100 40",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "46 19\n28 39 19 89 44\n57 22\n28 36\n85 58\n69 86\n22 74\n22 60",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "93 82\n78 46 100 91 78\n29 93\n23 24\n30 79\n39 1\n29 59\n82 40",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "45 13\n9 11 31 70 44\n46 32\n88 10\n19 50\n35 10\n13 22\n30 80",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "18 8\n9 39 6 25 15\n31 27\n27 17\n37 49\n50 19\n8 35\n45 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "37 24\n50 33 5 38 37\n14 45\n40 38\n16 24\n23 18\n16 44\n21 50",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "10 33\n49 25 5 39 20\n14 9\n10 13\n32 10\n40 50\n6 27\n18 36",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "50 43\n27 25 23 25 47\n34 10\n14 23\n19 26\n24 38\n21 33\n14 26",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "27 35\n9 34 37 45 14\n28 8\n50 11\n7 25\n48 41\n7 42\n40 39",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "48 45\n38 40 17 29 8\n37 45\n26 49\n46 35\n23 13\n9 10\n30 32",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "28 21\n23 19 9 30 31\n38 18\n29 43\n5 42\n45 17\n44 40\n24 19",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 100\n1 1 100 1 2\n99 2\n99 100\n2 100\n2 99\n2 2\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n100 2 100 2 1\n1 99\n1 99\n1 100\n100 100\n100 99\n1 99",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:23"
}