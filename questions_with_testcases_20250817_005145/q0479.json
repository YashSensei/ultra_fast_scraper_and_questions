{
  "problem_code": "problems",
  "title": "Candy",
  "tags": [],
  "text": "Little Charlie is a nice boy addicted to candies. He is even a subscriber to  All Candies Magazine and was selected to participate in the International Candy Picking Contest.In this contest a random number of boxes containing candies are disposed inMrows withNcolumns each (so, there are a total ofM×Nboxes). Each box has a number indicating how many candies it contains.The contestant can pick a box (any one) and get all the candies it contains. But there is a catch (there is always a catch): when choosing a box, all the boxes from the rows immediately above and immediately below are emptied,  as well as the box to the left and the box to the right of the chosen box.  The contestant continues to pick a box until there are no candies left.The figure bellow illustrates this, step by step. Each cell represents one box and the number of candies it contains. At each step, the chosen box is circled and the shaded cells represent the boxes that will be emptied. After eight steps the game is over and Charlie picked 10+9+8+3+7+6+10+1 = 54 candies.For small values ofMandN, Charlie can easily find the maximum number of candies he can pick, but when the numbers are really large he gets completely lost. Can you help  Charlie maximize the number of candies he can pick?InputThe input contains several test cases. The first line of a test case contains two positive integersMandN(1   ≤M×N≤ 105), separated by a single space, indicating the number of rows and columns respectively. Each of the followingMlines containsNintegers separated by single spaces, each representing the initial number of candies in the corresponding box. Each box will have initially at least 1 and at most 103candies.The end of input is indicated by a line containing two zeroes separated by a single space.OutputFor each test case in the input, your program must print a single line, containing a single value, the integer indicating the maximum number of candies that Charlie can pick.ExampleInput:5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0Output:54\r\n40\r\n17",
  "sample_input": "Input:5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0Output:54\r\n40\r\n17",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SAMER08C",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "5 5\r\n1 8 2 1 9\r\n1 7 3 5 2\r\n1 2 10 3 10\r\n8 4 7 9 1\r\n7 1 3 1 6\r\n4 4\r\n10 1 1 10\r\n1 1 1 1\r\n1 1 1 1\r\n10 1 1 10\r\n2 4\r\n9 10 2 7\r\n5 1 1 5\r\n0 0",
      "expected_output": "54\r\n40\r\n17",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 6\n6 1 4 4 8\n1 5 2 3 9\n2 10 2 9 8\n6 3 9 4 4\n1 9 3 3 4\n3 7\n5 8 3 1\n1 10 8 9\n2 8 8 2\n9 9 10 4\n1 8\n6 2 6 5\n9 6 1 10\n3 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n6 5 3 8 1\n2 4 2 7 7\n9 7 2 2 3\n1 8 7 9 6\n3 8 10 10 2\n5 1\n4 9 4 4\n8 2 6 7\n10 1 10 1\n8 2 1 8\n10 3\n2 3 7 8\n2 9 6 2\n8 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\n9 8 1 9 10\n5 2 3 10 1\n4 2 10 8 1\n3 9 4 7 5\n2 5 5 4 1\n2 7\n4 5 9 5\n6 10 1 2\n9 4 10 7\n9 5 5 2\n7 4\n5 5 3 2\n3 2 7 2\n8 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 29\n89 95 60 84 95\n14 23 14 57 88\n90 75 40 84 13\n86 81 34 20 48\n36 98 86 59 9\n14 63\n43 60 4 46\n82 81 54 34\n28 86 15 18\n57 44 57 32\n83 31\n28 53 90 31\n74 53 60 50\n20 66",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "70 38\n42 50 6 20 77\n84 53 78 67 1\n84 53 84 29 90\n53 83 58 92 93\n81 55 87 34 49\n17 100\n3 17 10 63\n41 24 28 30\n18 43 56 40\n2 75 2 38\n95 54\n1 29 56 32\n39 10 45 28\n83 48",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 82\n3 6 73 35 43\n52 50 33 37 51\n67 68 51 88 71\n60 90 91 71 47\n2 10 62 72 85\n54 58\n22 77 4 85\n63 43 96 33\n89 22 85 58\n33 64 31 45\n56 67\n34 47 29 21\n52 17 28 67\n78 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "75 79\n5 18 29 26 60\n42 47 35 66 72\n95 10 84 35 69\n38 58 35 36 38\n100 77 75 69 37\n61 8\n30 33 12 19\n96 99 53 18\n80 48 74 96\n38 31 24 70\n76 41\n73 65 20 99\n83 13 33 97\n18 29",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "77 85\n9 16 48 34 50\n54 45 53 91 64\n94 42 88 50 72\n16 81 29 46 45\n62 71 82 6 80\n65 42\n88 4 84 95\n94 24 36 19\n12 50 77 20\n69 93 52 47\n6 76\n17 58 93 4\n7 20 25 14\n25 71",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 44\n44 6 49 43 23\n19 13 15 9 22\n46 13 44 40 31\n16 30 41 17 46\n48 19 27 46 38\n21 27\n15 48 16 26\n37 15 43 39\n38 48 18 7\n16 49 33 12\n36 48\n30 50 21 37\n42 52 20 46\n43 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "22 38\n50 13 30 30 17\n32 24 15 50 9\n44 39 12 35 39\n29 23 10 50 10\n47 35 43 47 35\n42 36\n48 12 28 29\n34 24 46 52\n27 17 15 25\n28 40 35 39\n28 26\n41 27 21 45\n41 30 23 25\n31 15",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8 18\n48 22 9 36 31\n24 32 14 50 47\n48 52 38 25 19\n6 28 29 21 30\n19 39 35 20 44\n26 33\n8 47 21 26\n12 49 44 21\n37 15 20 37\n27 28 19 46\n41 29\n6 35 22 31\n34 11 26 45\n40 45",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "28 40\n13 11 6 41 50\n9 21 51 49 27\n43 26 25 35 42\n32 34 14 19 10\n30 14 51 38 21\n14 37\n33 48 35 5\n49 34 6 15\n47 46 16 50\n52 44 50 46\n9 52\n6 46 42 39\n13 46 23 24\n5 31",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "43 9\n24 18 15 40 8\n42 43 16 27 24\n16 44 19 20 28\n33 13 51 25 5\n19 44 40 10 14\n49 49\n29 31 51 19\n16 8 33 5\n40 29 51 23\n41 29 43 40\n17 48\n26 9 23 27\n41 14 21 36\n47 32",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "51 5\n29 36 12 39 38\n44 30 32 12 42\n13 6 37 33 25\n22 25 50 10 39\n45 47 20 34 25\n49 30\n12 44 21 22\n12 11 42 24\n16 32 18 14\n37 29 39 21\n12 46\n50 31 21 14\n29 23 29 13\n43 41",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25 31\n12 16 49 13 30\n41 48 52 38 16\n6 40 12 43 35\n17 30 7 43 34\n6 23 49 15 44\n32 29\n49 46 45 39\n43 37 35 51\n21 19 46 45\n17 21 20 39\n29 47\n16 27 6 27\n24 13 42 48\n34 51",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105\n105 105 105 105\n105 105 105 105\n105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 1\n105 104 105 105 1\n1 2 105 1 104\n1 105 104 105 2\n104 104 104 105 104\n2 1 2 2 104\n2 2\n105 1 1 2\n1 104 1 105\n104 1 104 2\n1 1 104 104\n1 1\n104 1 104 1\n105 104 105 2\n1 104",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105\n1 1 2 104 104\n104 1 1 104 2\n1 2 2 105 2\n1 105 104 104 104\n105 104 2 2 105\n104 2\n1 105 2 2\n104 2 104 1\n2 105 2 105\n105 1 2 104\n2 2\n1 1 104 1\n104 1 104 1\n104 104",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:34"
}