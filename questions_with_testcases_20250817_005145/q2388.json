{
  "problem_code": "problems",
  "title": "Showstopper",
  "tags": [],
  "text": "Data-mining huge data sets can be a painful and long lasting process\r\nif we are not aware of tiny patterns existing within those data sets.\r\nOne reputable company has recently discovered a tiny bug in their\r\nhardware video processing solution and they are trying to create software\r\nworkaround. To achieve maximum performance they use their chips in pairs\r\nand all data objects in memory should have even number of references.\r\nUnder certain circumstances this rule became violated and exactly one\r\ndata object is referred by odd number of references. They are ready to\r\nlaunch product and this is the only showstopper they have. They need YOU\r\nto help them resolve this critical issue in most\r\nefficient way.\r\nCan you help them?InputInput file consists from multiple data sets separated by one or more\r\nempty lines. Each data set represents a sequence of 32-bit (positive)\r\nintegers (references) which are stored in compressed way.Each line of input set consists from three single space separated 32-bit\r\n(positive) integers X Y Z and they represent following sequence of\r\nreferences: X, X+Z, X+2*Z, X+3*Z, …, X+K*Z, …(while (X+K*Z)<=Y).OutputYour task is to data-mine input data and for each set determine whether\r\ndata were corrupted, which reference is occurring odd number of times,\r\nand count that reference.For each input data set you should print to standard output new line\r\nof text with either “no corruption” (low case) or two integers\r\nseparated by single space (first one is reference that occurs odd\r\nnumber of times and second one is count of that reference).SampleInput:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_input": "Input:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MSE07E",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1",
      "expected_output": "1 1\r\nno corruption\r\n4 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 2 8\n6 8 7\n1 6 4\n5 5 9\n5 7 5\n3 1 9\n6 1 7\n1 6 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 9\n1 3 10\n4 4 1\n10 10 1\n8 1 5\n8 1 3\n9 6 10\n10 6 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 6\n8 7 6\n10 8 1\n8 6 3\n5 5 2\n4 3 7\n8 6 4\n1 4 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 2 22\n6 88 71\n29 84 42\n22 95 12\n39 44 14\n18 69 82\n60 69 75\n4 81 80",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "86 31 24\n73 77 44\n46 59 78\n44 53 80\n68 58 54\n93 32 46\n33 9 68\n51 12 29",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "29 30 55\n64 53 64\n34 86 98\n75 55 20\n46 88 16\n20 48 78\n58 73 41\n27 55 60",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "43 16 65\n19 100 8\n44 53 51\n51 30 54\n26 45 35\n93 66 63\n50 36 87\n82 53 49",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 60 61\n22 91 56\n35 39 36\n59 13 54\n51 40 69\n34 13 12\n63 8 59\n67 89 77",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "453 99 205\n161 460 454\n490 294 214\n368 453 67\n499 98 391\n423 380 427\n439 102 328\n52 104 424",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "478 245 204\n170 86 68\n261 165 169\n482 296 85\n399 58 190\n389 459 125\n499 466 235\n191 411 133",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "397 423 365\n284 95 215\n173 364 110\n455 494 384\n319 340 171\n109 72 174\n347 311 435\n497 352 306",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "266 236 321\n52 186 68\n299 247 476\n157 233 220\n238 461 409\n178 367 168\n301 448 144\n421 91 94",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "140 163 153\n271 282 173\n137 62 433\n307 239 298\n413 55 493\n470 300 185\n82 56 440\n379 249 428",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "208 308 116\n244 276 396\n209 92 78\n406 157 421\n139 247 237\n347 408 70\n346 308 484\n384 230 436",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "79 256 170\n242 333 55\n453 307 93\n288 228 182\n331 148 116\n379 266 431\n330 85 436\n168 50 314",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000\n2 1000 1000\n2 1000 1000\n2 999 1\n1 1000 1000\n2 2 2\n1000 1 2\n999 999 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 2\n2 999 1000\n1000 999 999\n1 1 1\n1000 1 2\n1000 999 1\n1000 999 1\n1000 1000 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:33"
}