{
  "problem_code": "problems",
  "title": "Count The Indexes 2",
  "tags": [],
  "text": "Let's deal with an array again, the most important data structure of computer science. You will be given an array. Now you have some operations to do. There will be three types of operations:Type 1: Insert a number after a given indexType 2: Change the value of an index.Type 3: You will get a number and two indices i and j where i ≤ j. You have to answer how many time the number appears in the array starting from i to j.InputEach file contains one test case.The first line contains an integer N, the number of initial array elements (1 ≤ N ≤ 100000) and Q, the number of queries (1 ≤ Q ≤ 100000). Second line contains N integers each in the range from 1 to 100000. Each of the next Q lines contains an operation. The operations will appear as the formats below:1 x y, where 1 ≤ x ≤ length of the array, which means you have to insert number y after the index x.2 x y, For this operation, you have to change the value of index x to value y.3 i j x, Here, you have to find how many times x appears in the array from i to j. Here x will always be present in the array and 1 ≤ i ≤ j ≤ length the array.OutputFor each operation of 3rd type, output the required answer in separate line.ExampleInput:5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706Output:1",
  "sample_input": "Input:5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CNTINDX2",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "5 342 18468 6335 26501 191702 4 293592 5 57063 2 5 5706",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 3 6 10 8 3 7 2 3 2 7 4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 5 7 10 1 4 5 5 7 7 1 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 6 1 1 10 3 10 9 9 6 4 2 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 64 50 79 76 51 86 52 2 100 70 10 44",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "52 46 48 10 49 9 1 42 76 39 65 84 43",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 80 21 16 70 31 95 33 2 43 16 5 43",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 23 85 35 90 15 96 51 4 91 12 27 53",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 50 95 30 15 85 60 55 65 63 81 68 39",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "45159 10686 22979 36771 36187 43012 36434 45007 20345 37519 49567 25197 49615",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "44762 40126 36166 17939 8456 16171 40162 49922 29379 20159 47546 5598 38817",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "6843 33107 11773 42154 28365 47750 17913 9035 16003 32130 41615 49202 18825",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "15936 20000 29419 27884 35484 13585 18934 38592 48013 23918 43508 21038 31566",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "31053 26849 46174 48787 7106 15762 28076 28243 47000 8481 15114 17447 23118",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "32162 11604 12943 32379 12593 39196 38188 23704 19689 29714 36229 22984 26149",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "25527 41082 20403 26874 6726 23225 41189 10882 40800 15818 10509 27984 9325",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 99999 2 2 2 99999 2 100000 2 100000 100000 99999 100000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2 1 1 1 2 99999 100000 100000 1 99999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}