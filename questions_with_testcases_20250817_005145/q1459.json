{
  "problem_code": "problems",
  "title": "IZBORI",
  "tags": [],
  "text": "EnglishVietnameseIt is election time. V voters attend the election, each casting their vote for one of N political parties. M\r\nofficials will be elected into the parliament.The conversion from votes to parliament seats is done using the D'Hondt method with a 5% threshold.\r\nMore precisely, suppose that the parties are numbered 1 through N and that they receive V1, V2, ..., VN\r\nvotes. Parliament seats are allocated as follows:All parties that receive strictly less than 5% of V votes are erased from the list of parties.The parliament is initially empty i.e. every party has zero seats allocated.For each party P, the quotient QP=VP/(SP+1) is calculated, where VP is the total number of\r\nvotes received by party P, and SP is the number of seats already allocated to party P.The party with the largest quotient QP is allocated one seat. If multiple parties have the same\r\nlargest quotient, the lower numbered party wins the seat.Repeat steps 3 and 4 until the parliament is full.\r\nThe votes are being counted and only part of the V votes has been tallied. It is known how many votes\r\neach party has received so far.Write a program that calculates for each party, among all possible outcomes of the election after all V\r\nvotes are counted, the largest and smallest number of seats the party wins.InputThe first line contains the integers V, N and M (1 ≤ V ≤ 10,000,000, 1 ≤ N ≤ 100, 1 ≤ M ≤ 200), the\r\nnumbers of votes, parties and seats in the parliament.The second line contains N integers – how many votes (of those that have been counted) each party\r\ngot. The sum of these numbers will be at most V.OutputOn the first line output N integers separated by spaces – the largest number of seats each party can\r\nwin.On the second line output N integers separated by spaces – the smallest number of seats each party can\r\nwin.ExampleInput:20 4 5\r\n4 3 6 1Output:3 3 3 2\r\n1 0 1 0Input:100 3 5\r\n30 20 10Output:4 3 3\r\n1 1 0In the first example, 14 votes have been tallied and 6 are yet to be counted. To illustrate one possible\r\noutcome, suppose that the first party receives 2 of those 6 votes, the second none, the third 1 vote and\r\nthe fourth 3 votes. The parties' totals are 6, 3, 7 and 4 votes. All parties exceeded the 5% threshold.\r\nSeats are allocated as follows:The quotients are initially 6/1, 3/1, 7/1 and 4/1; the largest is 7/1 so party 3 wins a seat.The quotients are 6/1, 3/1, 7/2 and 4/1; the largest is 6/1 so party 1 wins a seat.The quotients are 6/2, 3/1, 7/2 and 4/1; the largest is 4/1 so party 4 wins a seat.The quotients are 6/2, 3/1, 7/2 and 4/2; the largest is 7/2 so party 3 wins a seat.The quotients are 6/2, 3/1, 7/3 and 4/2; parties 1 and 2 are tied with quotients 6/2 and 3/1,\r\nbut party 1 is lower numbered so it wins the last seat.In this outcome, the numbers of seats won by the parties are 2, 0, 2 and 1. Since it is possible for the\r\nsecond party not to win any seats, the second number on the second line of output is zero.",
  "sample_input": "Input:20 4 5\r\n4 3 6 1Output:3 3 3 2\r\n1 0 1 0",
  "sample_output": "Input:100 3 5\r\n30 20 10Output:4 3 3\r\n1 1 0",
  "link": "https://www.spoj.com/problems/IZBORI",
  "scraped_at": "2025-08-17 00:33:57",
  "test_cases": [
    {
      "input": "20 4 5\r\n4 3 6 1",
      "expected_output": "3 3 3 2\r\n1 0 1 0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "100 3 5\r\n30 20 10",
      "expected_output": "4 3 3\r\n1 1 0",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "4 8 9\n10 7 8 4",
      "expected_output": "0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8 2\n9 4 1 8",
      "expected_output": "0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 7 7\n10 6 9 6",
      "expected_output": "0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "58 1 88\n5 40 9 99",
      "expected_output": "0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "13 62 96\n48 48 87 2",
      "expected_output": "0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 47 12\n49 5 68 35",
      "expected_output": "0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "91 10 5\n10 5 25 69",
      "expected_output": "0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "39 10 75\n38 32 5 50",
      "expected_output": "0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "19 14 24\n28 30 21 13",
      "expected_output": "0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12 15 32\n9 43 6 21",
      "expected_output": "0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "50 16 46\n47 50 28 35",
      "expected_output": "0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "43 8 34\n43 43 7 28",
      "expected_output": "0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "40 23 31\n13 8 26 27",
      "expected_output": "0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "30 6 29\n18 45 17 13",
      "expected_output": "0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "24 24 49\n8 49 21 35",
      "expected_output": "0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100 100 100",
      "expected_output": "0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100 100 100",
      "expected_output": "0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 1\n100 99 100 100",
      "expected_output": "0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}