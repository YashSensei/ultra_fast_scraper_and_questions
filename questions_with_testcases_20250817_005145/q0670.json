{
  "problem_code": "problems",
  "title": "Hyperactive Girl",
  "tags": [],
  "text": "Helen is a hyperactive girl. She wants to schedule her activities so that at any moment of the day there is at least one thing she can do. She does not care if her activities overlap in time, as long as every moment of her day has an activity scheduled.Helen divided the day in a particular way. The day starts at time 0 and ﬁnishes at time M. Each moment of the day is represented by a real number between 0 and M, inclusive. Helen made a list of all possible activities, with their start and ﬁnish times. Now she must decide which subset of activities to schedule.If an activity starts at time S and ﬁnishes at time F, then we say that it covers all moments between S and F, inclusive. Helen does not want to waste any activities, so she will only choose minimal subsets of activities that cover the day to be scheduled. A subset of activities is a minimal subset that covers the day if and only if:every moment of the day is covered by at least one activity of the subset; andremoving any of the activities from the subset would leave at least one moment of the day uncovered.Note that some moments of the day may be covered by more than one activity.Given the list of possible activities for one day, you must help Helen by determining how many distinct minimal subsets cover the day.InputEach test case is given using several lines. The ﬁrst line contains two integers M and N, representing respectively the highest value for a moment in the day (1 ≤ M ≤ 109) and the number of possible activities for the day (1 ≤ N ≤ 100). Each of the next N lines describes one possible activity and contains two integers S and F, representing respectively the start and ﬁnish times of the activity (0 ≤ S < F ≤ M).The last test case is followed by a line containing two zeros.OutputFor each test case output a single line with a single integer representing the number of minimal subsets that cover the day. To make your life easier, print the remainder of dividing the solution by 108.SampleInput:8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0Output:4\r\n1\r\n0",
  "sample_input": "Input:8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0Output:4\r\n1\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MHLAR10",
  "scraped_at": "2025-08-17 00:33:32",
  "test_cases": [
    {
      "input": "8 7\r\n0 3\r\n2 5\r\n5 8\r\n1 3\r\n3 6\r\n4 6\r\n0 2\r\n1 1\r\n0 1\r\n2 1\r\n0 1\r\n0 0",
      "expected_output": "4\r\n1\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 7\n4 5\n9 3\n6 10\n1 7\n2 5\n7 9\n4 9\n5 9\n7 5\n3 7\n4 10\n2 5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\n1 5\n10 1\n3 1\n4 10\n6 7\n7 6\n3 2\n8 3\n7 1\n2 8\n7 3\n5 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n9 7\n7 1\n2 6\n10 1\n5 10\n4 4\n1 2\n3 3\n8 9\n1 7\n6 7\n10 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "79 88\n31 1\n37 96\n71 47\n95 100\n26 33\n97 29\n23 69\n82 72\n64 8\n11 71\n69 89\n88 50",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "64 22\n52 66\n56 50\n94 9\n92 75\n59 83\n79 95\n61 47\n20 28\n37 91\n29 57\n4 41\n12 28",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 44\n45 79\n17 53\n66 44\n50 39\n30 34\n43 73\n50 83\n61 47\n44 11\n49 14\n12 32\n21 16",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 88\n1 36\n3 55\n78 24\n41 99\n41 31\n59 45\n52 26\n82 15\n73 10\n28 11\n20 78\n70 53",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 36\n83 79\n99 42\n62 62\n87 54\n21 90\n15 86\n65 93\n36 64\n9 6\n51 71\n48 63\n17 71",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23 35\n33 30\n46 26\n32 49\n8 6\n30 6\n19 13\n11 44\n22 21\n6 20\n47 25\n35 10\n38 15",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10 31\n30 10\n26 13\n7 25\n41 5\n13 30\n20 47\n39 22\n27 14\n29 19\n28 12\n10 6\n23 48",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "47 10\n26 34\n8 29\n13 40\n43 48\n47 18\n25 21\n47 22\n18 5\n10 35\n38 20\n7 36\n27 18",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "20 37\n44 41\n42 37\n16 30\n19 45\n36 38\n8 47\n12 5\n47 24\n15 19\n30 36\n18 23\n22 42",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47 36\n48 23\n20 38\n6 41\n27 43\n12 27\n17 9\n6 28\n39 20\n36 28\n27 7\n32 34\n38 42",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "36 43\n37 18\n32 43\n35 43\n14 11\n22 35\n34 11\n36 27\n40 7\n28 25\n50 41\n26 31\n35 43",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "42 20\n27 32\n32 5\n13 20\n10 35\n13 31\n6 21\n7 32\n6 48\n18 47\n13 19\n47 43\n24 42",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 100\n100 1\n100 2\n100 1\n100 1\n2 2\n100 2\n1 99\n2 1\n99 2\n2 2\n99 99\n1 100",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99 100\n99 2\n1 100\n100 99\n100 1\n1 2\n2 2\n2 1\n2 99\n1 100\n1 99\n2 100\n99 99",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:40"
}