{
  "problem_code": "problems",
  "title": "Allowed Factors",
  "tags": [],
  "text": "Chico told his students that from now on, they would be referenced by numerical codes of up to 12 digits in official communications (emails and tasks). Then, he gave each student a card with a unique number written on it. The students quickly assumed this number was their code — but to their surprise (and Levi’s despair), Professor Chico explained that this was not their actual code.A student’s code is the term at the position (indexed from 1) in a special ordered sequenceS, where that position is the number written on their card. The sequenceShas a unique property: each number in it, when decomposed into prime factors, can only include primes from a set ofNnumbers written on the board by the teacher. To make Levi’s life even harder, the set of primes changes every week, so he always has to recalculate his code to avoid missing deadlines.Your task is to help Levi. Given the set of prime numbers written on the board during the week and the number on Levi’s card, determine what his weekly codInputThe input consists of multiple test cases.Each test case begins with a line containing two integersN(1 ≤N≤ 102) andM(1 ≤M≤ 105) representing respectively the number of prime numbers written on the board by Professor Chico and the number on the student's card.The second line containsNdistinct prime numbersP₁,P₂, ...,Pₙ(2 ≤Pi< 106), which form the allowed prime factor set for the week.Input ends when a line withN = 0andM = 0is encountered.OutputThe output consists of a single line for each test case, containing Levi's weekly code.ExampleInput:2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0Output:2\r\n24\r\n15\r\n81",
  "sample_input": "Input:2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0Output:2\r\n24\r\n15\r\n81",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ALWFACT",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "2 1\r\n2 3\r\n2 10\r\n2 3\r\n3 10\r\n2 3 5\r\n3 10\r\n3 7 13\r\n0 0",
      "expected_output": "2\r\n24\r\n15\r\n81",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 3\n9 4\n6 10\n8 1\n9 2\n6 7 6\n1 6\n1 2 5\n2 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n6 4\n6 9\n5 8\n5 5\n3 1 1\n7 1\n1 7 5\n8 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2\n1 10\n2 1\n3 9\n3 3\n1 9 8\n8 4\n3 2 2\n6 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "18 41\n88 40\n80 23\n18 21\n95 21\n74 25 80\n71 6\n55 20 96\n59 59",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 40\n35 1\n86 44\n61 62\n86 45\n87 71 72\n84 83\n91 66 64\n80 55",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 74\n70 8\n56 18\n22 38\n39 16\n8 68 83\n55 4\n76 3 42\n94 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "44 12\n66 27\n30 1\n75 12\n75 6\n53 45 34\n60 87\n46 7 76\n92 23",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 48\n19 67\n79 78\n24 64\n76 5\n55 62 66\n88 50\n27 63 63\n3 97",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48 46\n12 48\n43 25\n40 16\n8 13\n41 11 28\n38 39\n45 17 43\n11 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "8 18\n30 11\n16 43\n5 42\n32 41\n33 23 36\n47 9\n5 45 45\n25 18",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19 9\n47 45\n15 26\n13 24\n36 47\n32 44 43\n42 9\n18 6 8\n28 24",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17 23\n44 41\n40 41\n18 9\n18 7\n37 35 27\n40 16\n32 7 31\n46 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23 25\n49 40\n50 31\n47 43\n13 8\n36 13 37\n6 29\n22 37 20\n35 23",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "49 23\n9 45\n51 50\n5 36\n37 22\n45 5 45\n32 44\n10 16 7\n31 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "31 36\n11 15\n13 41\n45 34\n28 50\n20 26 13\n19 30\n42 37 5\n47 25",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "102 102\n102 102\n102 102\n102 102\n102 102\n102 102 102\n102 102\n102 102 102\n102 102",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "102 102\n102 102\n102 102\n102 102\n102 102\n102 102 102\n102 102\n102 102 102\n102 102",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n102 1\n102 1\n1 101\n2 2\n1 101 102\n2 1\n102 2 102\n2 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n2 2\n2 1\n1 101\n2 101\n102 1 2\n1 2\n1 101 102\n1 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:06"
}