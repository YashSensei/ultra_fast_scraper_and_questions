{
  "problem_code": "problems",
  "title": "Whac",
  "tags": [],
  "text": "While visiting a traveling fun fair you\r\nsuddenly have an urge to break the high\r\nscore in the Whac-a-Mole game. The goal\r\nof the Whac-a-Mole game is to... well...\r\nwhack moles. With a hammer. To make\r\nthe job easier you have ﬁrst consulted\r\nthe fortune teller and now you know the\r\nexact appearance patterns of the moles.\r\n    The moles appear out of holes occupying the n2integer points (x, y)\r\nsatisfying 0 ≤ x, y < n in a\r\ntwo-dimensional coordinate system.\r\nAt each time step, some moles will\r\nappear and then disappear again before\r\nthe next time step. After the moles appear\r\nbut before they disappear, you are able\r\n to move your hammer in a straight line\r\nto any position (x2, y2) that is at distance\r\nat most d from your current position (x1, y1). For simplicity, we assume that you\r\ncan only move your hammer to a point having integer coordinates. A mole is whacked\r\nif the center of the hole it appears out of is located on the line between (x1, y1) an\r\n(x2, y2) (including the two endpoints). Every mole whacked earns you a point. When\r\nthe game starts, before the ﬁrst time step, you are able to place your hammer anywhere\r\nyou see ﬁt.InputThe input consists of several test cases. Each test case starts with a line containing three\r\nintegers n, d and m, where n and d are as described above, and m is the total number\r\nof moles that will appear\r\n(1 ≤ n ≤ 20, 1 ≤ d ≤ 5, and 1 ≤ m ≤ 1000). Then follow\r\nm lines, each containing three integers x, y and t giving the position and time of the\r\nappearance of a mole (0 ≤ x, y < n and 1 ≤ t ≤ 10). No two moles will appear at the\r\nsame place at the same time.\r\n    The input is ended with a test case where n = d = m = 0. This case should not be\r\nprocessed.OutputFor each test case output a single line containing a single integer, the maximum\r\npossible score achievable.ExampleInput:4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0Output:4\r\n2",
  "sample_input": "Input:4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0Output:4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MOLE",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "4 2 6\r\n0 0 1\r\n3 1 3\r\n0 1 2\r\n0 2 2\r\n1 0 2\r\n2 0 2\r\n5 4 3\r\n0 0 1\r\n1 2 1\r\n2 4 1\r\n0 0 0",
      "expected_output": "4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3 3\n4 5 9\n5 4 8\n3 10 10\n10 5 2\n1 10 9\n8 8 1\n1 6 5\n4 8 8\n9 3 5\n5 6 5\n9 4 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 7 2\n4 10 6\n9 1 7\n9 1 1\n6 7 3\n9 5 1\n2 6 1\n3 1 4\n7 2 9\n8 7 7\n1 7 8\n10 9 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4 4\n10 3 4\n6 5 3\n6 5 2\n7 6 5\n8 7 2\n2 1 5\n10 6 3\n5 7 5\n8 5 9\n7 3 9\n4 8 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "18 13 19\n15 9 10\n3 8 15\n1 11 16\n16 10 3\n18 17 3\n15 20 12\n19 7 7\n16 12 20\n2 9 5\n16 16 17\n2 19 10",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 3 12\n5 20 5\n11 7 9\n18 4 10\n8 11 11\n13 1 18\n12 16 16\n15 13 11\n16 18 12\n9 15 5\n2 18 15\n1 18 18",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "14 1 4\n1 1 18\n10 6 4\n11 7 11\n16 3 2\n18 9 20\n9 16 11\n6 13 17\n14 7 8\n3 18 2\n9 16 11\n16 20 9",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "18 5 12\n6 13 16\n18 10 12\n7 1 14\n10 17 9\n4 7 20\n12 20 2\n18 3 13\n10 11 15\n11 3 1\n18 7 6\n14 16 18",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 12 19\n16 5 17\n18 20 2\n13 6 9\n3 1 12\n14 13 4\n11 3 5\n12 13 9\n20 20 4\n5 6 17\n13 15 17\n14 16 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "4 3 2\n2 8 4\n9 8 1\n2 4 10\n8 6 9\n5 4 5\n9 6 1\n9 10 2\n9 8 1\n8 6 9\n1 6 8\n4 9 10",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 9\n8 4 6\n9 3 9\n4 10 8\n6 3 5\n7 8 2\n6 3 10\n4 5 1\n5 2 3\n9 7 4\n2 5 9\n6 5 3",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7 7 10\n8 2 5\n3 2 6\n10 9 3\n3 8 3\n8 8 8\n4 7 2\n7 3 2\n9 5 5\n5 10 9\n1 1 8\n6 10 1",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "10 3 9\n8 5 8\n7 5 4\n8 7 10\n7 5 1\n6 10 10\n5 6 5\n6 9 3\n10 4 4\n6 1 5\n1 9 5\n10 8 8",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "9 5 7\n6 10 9\n8 10 8\n3 9 6\n10 4 4\n2 10 9\n4 2 1\n6 4 9\n6 9 9\n10 9 1\n2 5 7\n7 4 8",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 1 10\n7 1 8\n4 7 8\n1 3 6\n10 4 7\n7 5 6\n10 5 5\n4 1 5\n7 10 3\n1 4 7\n6 9 8\n5 2 3",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2 2 8\n3 4 4\n9 2 7\n8 1 2\n2 3 6\n6 9 10\n6 4 5\n5 5 10\n4 9 8\n10 2 3\n5 5 1\n3 2 8",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20\n20 20 20",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 20 2\n2 2 2\n2 2 19\n19 2 2\n20 1 2\n19 1 19\n1 19 1\n20 2 2\n2 20 1\n19 20 1\n20 19 2\n19 20 19",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2\n2 1 2\n20 2 20\n1 20 2\n2 19 1\n1 20 20\n2 2 19\n1 2 19\n19 19 1\n1 19 1\n20 2 2\n20 19 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}