{
  "problem_code": "problems",
  "title": "Ada and Teams",
  "tags": [],
  "text": "Ada the Ladybug is a well known mathematician. Next week she is going to represent her school in Mathematic Olympiad. There are many schools participating and each of them has many students. Anyway only some of the students and only some of the schools will be available to participate in the Olympiad. Question is, how many combinations of students can participate in the Olympiad?More specifically: There areNschools from which exactlyAwill participate. Moreover there areBstudents in each school and exactlyDof them will participate in the Olympiad.Ada could count it herself. But this process takes too much time and the limits for schools and students are changing every moment so she has decided to make a program for it (in fact she has decided that you will make the program for her)!InputThe input contains up to104lines, each containing four integersN,A,B,D,1 ≤ A ≤ N ≤ 106,1 ≤ D ≤ B ≤ 106OutputFor each line print the number of combination of students, which can participate in the Olympiad. All students and universities are distinguishable, but their order doesn't matter.Since the answer might be huge, print it modulo109+7(1000000007)Example Input2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20Example Output2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
  "sample_input": "2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20",
  "sample_output": "2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
  "link": "https://www.spoj.com/problems/ADATEAMS",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "2 1 2 2\r\n2 2 2 1\r\n2 1 2 1\r\n4 3 3 2\r\n4 2 1 1\r\n10 4 12 7\r\n50 30 44 20",
      "expected_output": "2\r\n4\r\n4\r\n108\r\n6\r\n625817778\r\n154746653",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 8 7 10\n8 1 3 4\n2 6 10 4\n6 3 7 4\n7 2 7 10\n1 3 1 9\n4 3 8 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 6 3 9\n5 9 5 2\n6 1 6 8\n2 7 4 3\n9 10 7 8\n9 2 10 2\n1 3 6 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 9 4\n8 2 5 9\n9 2 2 2\n7 1 2 4\n1 5 2 1\n7 9 10 9\n9 5 10 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 32 73 42\n33 97 5 6\n99 65 67 59\n88 62 39 59\n89 94 85 18\n9 46 21 14\n75 59 85 51",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "52 78 63 54\n88 42 94 74\n71 29 47 91\n63 94 83 90\n45 19 93 68\n64 62 82 27\n42 47 94 69",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 45 92 24\n74 29 4 29\n57 85 95 58\n65 56 56 80\n79 60 80 65\n56 15 72 72\n13 6 50 20",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 23 66 61\n25 28 36 56\n68 11 74 43\n34 53 84 7\n95 15 87 59\n55 92 93 23\n88 57 9 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "98 81 60 18\n83 100 47 24\n99 73 38 41\n57 69 79 25\n58 19 50 87\n89 3 66 76\n58 48 48 36",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "30 33 18 16\n46 16 19 32\n46 45 14 18\n23 19 40 17\n23 44 43 27\n36 31 12 49\n40 6 23 5",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "17 15 35 13\n13 23 22 30\n34 18 16 38\n20 27 49 41\n45 26 12 43\n53 8 6 21\n41 43 26 21",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "13 49 37 53\n8 38 18 52\n6 19 51 44\n31 20 16 11\n11 40 43 37\n27 21 29 32\n41 21 16 20",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "12 7 5 33\n15 43 36 30\n23 6 43 35\n11 17 53 28\n14 38 44 41\n22 39 53 23\n13 26 37 47",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "24 48 42 14\n25 6 41 20\n10 27 28 38\n41 22 53 43\n8 53 47 17\n15 31 5 32\n33 21 18 10",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "39 36 28 22\n16 31 6 19\n32 27 13 9\n49 45 47 52\n38 33 9 36\n8 27 53 31\n40 32 10 29",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24 37 47 23\n12 46 6 23\n38 20 18 52\n11 44 36 34\n40 29 26 21\n47 29 52 18\n20 34 45 6",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106\n106 106 106 106",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 106 2 2\n105 105 105 2\n106 106 105 1\n2 105 1 1\n105 1 106 2\n1 1 1 1\n106 1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "106 105 105 1\n106 105 106 2\n1 2 106 105\n1 1 1 106\n105 1 106 1\n105 105 1 2\n1 1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}