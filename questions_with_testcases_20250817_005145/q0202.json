{
  "problem_code": "problems",
  "title": "(un)Fair Play",
  "tags": [],
  "text": "It is not an easy job to be a coach of a football team. Especially if you do not coach great teams like Ajax, Inter, Dynamo (ok, fill in the name of your dream team), but only a mediocre one like FC Dead Horse, playing in the second league. The season is almost over, only a few matches are left to play. All of sudden the team manager comes to you and tells you bad news: the main sponsor of your club is not happy with your results and decided to stop sponsoring your team, which probably means the end of your club. The sponsor's decision is final and there is no way to change it unless... unless your team miraculously wins the league.The manager left you in deep thought. If you increase the number of practices and offer players a generous bonus for each match, you may be able to win all the remaining matches. Is that enough? You also have to make sure that teams with many points lose against teams with few points so that in the end, your team will have more points than any other team. You know some of the referees and can bribe them to manipulate the result of each match. But first you need to figure out how to manipulate the results and whether it is possible at all.Problem DescriptionThere are N teams numbered 1 through N, your team has the number N. The current number of points of each team and the list of remaining matches are given. Your task is to find out whether it is possible to manipulate each remaining match so that the team N will finish with strictly more points than any other team. In every match, the winning team gets 2 points, the losing team gets 0. If the match ends with a draw, both teams get 1 point.Input file specificationThe input file consists of several blocks. Each block has the following form: The first line contains two numbers N(1<= N <=100) and M(0<= M <=1000). The next line contains N numbers separated by spaces giving the current number of points of teams 1, 2, ..., N respectively. The following M lines describe the remaining matches. Each line corresponds to one match and contains two numbers a and b (a not equal to b) identifying the teams that will play in the given match. The last block is followed by a \"-1\"(without quotes) on a separate line.Output file specificationFor each block in the input file, output YES if you can manipulate the remaining matches so that the team N would win the league, or NO otherwise.ExampleInput file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
  "sample_input": "Input file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FAIRONOT",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "Input file:5 8\r\n2 1 0 0 1\r\n1 2\r\n3 4\r\n2 3\r\n4 5\r\n3 1\r\n2 4\r\n1 4\r\n3 5\r\n5 4\r\n4 4 1 0 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n-1Output file:YES\r\nNO",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 6\nqow w 9\n2 3 9 10 9\n2 9\n10 1\n10 1\n7 1\n1 6\n9 3\n7 5\n8 7\n6 3\n5 8 9 5 6\n7 10\n2 2\n5 8\n7 3\n4\nkhkkkg jn\nk",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 5\ncb bcb 7\n5 2 10 5 1\n6 5\n1 8\n1 7\n2 8\n5 8\n1 6\n10 3\n7 5\n9 5\n9 10 1 4 6\n6 5\n5 3\n5 3\n4 4\n3\ncmhwf ywgry\nd",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\ngqtbn ogsq 9\n1 9 7 4 9\n10 8\n2 4\n2 5\n5 3\n10 8\n2 9\n6 5\n3 1\n7 5\n10 6 4 3 1\n4 6\n8 7\n1 9\n6 2\n2\nmyf wxgn\naaw",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 39\nftkhz wg 70\n70 20 96 37 3\n75 46\n67 31\n6 99\n70 35\n75 58\n12 19\n51 83\n11 79\n65 62\n96 100 80 71 93\n74 85\n69 23\n95 59\n51 18\n10\nzakoajri ehsslxp\nyvfk",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "95 8\nvvtys dny 22\n89 66 22 81 14\n40 80\n57 74\n18 11\n94 46\n50 26\n31 37\n59 56\n22 74\n5 19\n30 79 12 5 64\n41 100\n85 76\n9 14\n79 19\n73\nezi n\nufj",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 57\njvwg hneom 14\n36 83 48 51 87\n51 9\n45 47\n29 38\n54 82\n3 40\n100 88\n60 31\n83 74\n7 30\n39 76 9 43 23\n42 84\n32 51\n21 25\n32 99\n69\npewlxgqa uzdq\nbz",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "37 70\nrcpz mhizw 48\n81 79 30 7 35\n36 93\n72 59\n63 1\n49 69\n31 22\n56 37\n71 59\n79 41\n2 29\n48 20 19 89 64\n9 70\n22 57\n61 57\n64 25\n59\ndjune tot\nyst",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "50 33\npqllp nz 54\n62 4 39 24 28\n61 34\n14 38\n15 61\n98 14\n20 47\n44 74\n2 60\n20 77\n71 91\n45 36 15 53 65\n9 47\n20 60\n54 95\n57 68\n85\npxiee f\nl",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "255 329\nj lcljdg 261\n418 317 174 50 402\n278 254\n373 248\n78 235\n171 430\n436 307\n298 346\n150 137\n272 357\n389 448\n270 60 112 109 202\n129 265\n440 329\n457 389\n59 260\n413\naxzxez nhwby\nmz",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "328 264\nltf v 401\n154 327 162 297 312\n92 283\n296 56\n467 356\n387 365\n140 192\n414 233\n356 482\n91 425\n265 87\n59 142 442 355 326\n378 68\n399 485\n66 235\n428 390\n411\nnvg wl\nw",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "365 213\nt krnheg 127\n326 314 61 100 294\n454 227\n336 247\n337 267\n430 160\n239 262\n280 139\n195 148\n288 208\n272 195\n490 160 456 417 71\n399 452\n260 301\n494 471\n261 467\n268\nayqy hvyiwo\no",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "280 299\nuk jz 290\n292 395 368 153 473\n359 380\n496 230\n349 461\n359 418\n413 157\n137 113\n390 61\n95 134\n414 96\n497 75 238 69 66\n184 67\n335 280\n292 250\n151 440\n103\nmrgrzvdq uyxac\nwtlb",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "116 176\npzewj frlonv 129\n61 285 342 451 50\n368 446\n210 320\n488 397\n54 173\n186 219\n65 172\n403 472\n63 182\n290 264\n81 434 429 217 268\n136 309\n152 366\n139 408\n468 269\n301\nuecifwr of\nsnpm",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "408 180\ntfcb ldya 167\n482 440 339 358 402\n471 416\n138 193\n401 485\n330 239\n454 396\n222 276\n99 384\n317 220\n293 446\n147 104 459 349 487\n301 88\n181 356\n421 168\n121 379\n244\nvpgfrjwk ga\nohr",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "243 79\ngz hqae 199\n446 401 135 92 478\n224 414\n467 490\n354 456\n356 356\n120 425\n136 108\n156 211\n160 281\n454 197\n221 146 226 392 219\n160 122\n409 324\n244 455\n208 139\n424\nongafc j\nd",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nl syu 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\nlrkh khmfmsa\nqfyh",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nz ypi 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\nga it\nbyf",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\nc hdv 1\n2 2 999 2 1\n999 1\n1000 1000\n999 1000\n1000 999\n1 999\n999 999\n1000 1\n1000 1\n999 2\n999 2 2 1000 999\n999 1\n1 999\n1 1000\n1 999\n1000\npesgtj og\nz",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\nkllva zf 2\n1000 1000 1000 1 2\n1000 2\n999 1000\n2 1000\n1000 999\n1000 999\n999 999\n2 1\n1000 2\n2 999\n1 999 999 999 1\n1000 1000\n2 2\n2 2\n2 2\n1000\nlzmm ceh\nodg",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:26"
}