{
  "problem_code": "problems",
  "title": "Ada and Cucumber",
  "tags": [],
  "text": "Ada the Ladybug works as farmer. It's the season of cucumbers and she wants to harvest them. There lie many cucumbers all around her house. She wants to choose a direction and follow it until all cucumbers in that direction are collected.Lets consider Ada's house as centerpiece of whole universe, lying on[0, 0]. The cucumbers are defined as lines on plane. No cucumber goes through Ada's house (and no cucumber touches it).How many cucumbers can Ada pick in one go if she chooses the best direction possible?InputThe first line contains an integerT, the number of test-cases.Each test-case begins with an integer1 ≤ N ≤ 105AfterwardNlines follow, with four integers-106≤     x1, y1, x2, y2≤     106, the beginning and end of each cucumber. Each cucumber         has positive length.Sum of allNover all test-cases won't exceed106Even though cucumber will not go through house, they might touch, intersect or overlap other cucumbers!OutputFor each test-case print one integer - the maximal number of cucumbers which could be picked if Ada chooses a direction and picks every cucumber lying in it.Example Input5\r\n4\r\n2 1 -1 4\r\n-2 1 1 3\r\n-3 2 0 5\r\n-2 -2 5 1\r\n3\r\n-2 2 -2 -2\r\n2 2 2 -2\r\n-3 -3 -6 -3\r\n3\r\n-2 1 -3 4\r\n3 1 5 5\r\n-2 -2 2 -2\r\n6\r\n-1 5 -6 5\r\n-3 -3 5 -3\r\n-2 -5 5 -5\r\n-1 -6 5 -6\r\n5 1 5 5\r\n6 6 6 -11\r\n3\r\n1 3 4 3\r\n4 2 4 -1\r\n5 1 6 6Example Output3\r\n2\r\n1\r\n4\r\n2Possibly harvested cucumbers1 2 3\r\n1 3\r\n1\r\n2 3 4 6\r\n2 3",
  "sample_input": "5\r\n4\r\n2 1 -1 4\r\n-2 1 1 3\r\n-3 2 0 5\r\n-2 -2 5 1\r\n3\r\n-2 2 -2 -2\r\n2 2 2 -2\r\n-3 -3 -6 -3\r\n3\r\n-2 1 -3 4\r\n3 1 5 5\r\n-2 -2 2 -2\r\n6\r\n-1 5 -6 5\r\n-3 -3 5 -3\r\n-2 -5 5 -5\r\n-1 -6 5 -6\r\n5 1 5 5\r\n6 6 6 -11\r\n3\r\n1 3 4 3\r\n4 2 4 -1\r\n5 1 6 6",
  "sample_output": "3\r\n2\r\n1\r\n4\r\n2",
  "link": "https://www.spoj.com/problems/ADAPICK",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "5\r\n4\r\n2 1 -1 4\r\n-2 1 1 3\r\n-3 2 0 5\r\n-2 -2 5 1\r\n3\r\n-2 2 -2 -2\r\n2 2 2 -2\r\n-3 -3 -6 -3\r\n3\r\n-2 1 -3 4\r\n3 1 5 5\r\n-2 -2 2 -2\r\n6\r\n-1 5 -6 5\r\n-3 -3 5 -3\r\n-2 -5 5 -5\r\n-1 -6 5 -6\r\n5 1 5 5\r\n6 6 6 -11\r\n3\r\n1 3 4 3\r\n4 2 4 -1\r\n5 1 6 6",
      "expected_output": "3\r\n2\r\n1\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n5\n10\n1\n1\n7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n3\n3\n5\n9\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "13\n65737417\n52910964\n23084199\n36075940\n12901617\n73600527\n18060894\n10800317\n3039628\n83925683\n19850063\n61852909\n7730133",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n51778372\n99170990\n20909650\n41495284\n35823903\n12379803\n38869180\n31409145\n21515059\n70429920\n24078349\n26356286",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n9806795\n21857928\n62168326\n68082471\n77020336\n77661050\n40178186\n81444684\n42784043\n14990815\n16915987\n92340535\n90684415\n45118425\n66253184",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n5905350\n86886851\n54421315\n45770320\n79028900\n33046166\n30885385\n81779063\n1746728\n84078159\n55484375",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n65401414\n40965544\n21571624\n9017504\n7757905",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "70\n2017\n22398\n69346\n16844\n15700\n5703\n7783\n21693\n73623\n98485\n20821\n73691\n97014\n47415\n72453\n93610\n41129\n55935\n42071\n21865\n21876\n44754\n79807\n44049\n23574\n57780\n35358\n88208\n8431\n73806\n19179\n12561\n13595\n89215\n62133\n3315\n27476\n57427\n51307\n66280\n26770\n51397\n33703\n32160\n3445\n2557\n8248\n59789\n36579\n22008\n21991\n62094\n71825\n29841\n71531\n46985\n54277\n5217\n97549\n349\n70805\n47802\n22304\n91846\n92684\n38775\n133\n62583\n16436\n78010",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n60028\n66432\n38829\n91881\n2583\n82220\n26860\n55200\n7524\n8857\n84806\n80621\n24053\n61167\n57803\n99643\n31930\n74767\n23332\n61632\n65778\n66944\n76564\n95016\n52542",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "55\n15821\n52267\n20947\n85381\n92530\n37422\n84880\n98690\n67716\n10889\n72144\n87577\n38229\n22855\n25987\n70025\n3085\n7222\n76759\n86064\n4152\n80925\n38162\n55203\n79417\n43870\n74662\n28465\n17098\n92606\n24814\n87030\n84169\n25619\n25559\n96767\n14405\n59230\n98354\n56290\n62518\n4836\n66860\n16963\n68687\n24996\n52143\n8871\n28780\n92251\n70513\n37710\n89293\n17025\n501",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n60639\n25801\n71714\n23921\n68757\n8021\n6765\n96507\n57007\n66338\n91137\n14722\n9248\n10571\n9653\n74995\n85950\n14755\n23728\n55583\n33013\n82577\n47911\n90059\n64449\n14078\n8279\n79384\n1372\n83762\n35052\n70479\n52254\n4368\n25114\n10642\n27650\n46009\n87852\n1941\n31194\n938\n58505\n88766\n97239\n2923\n8506\n76277\n36056\n72905\n54026\n70269\n10886\n31986\n51655\n85574\n74603\n49917\n29786\n17301\n17986\n26397\n21112\n75846\n59720\n68048\n693\n16676\n29008\n82282\n92396\n1353\n31346\n56634\n85862\n51032\n67118\n6969\n97149\n79336\n7392\n52807\n84840\n80176\n37728\n68592\n30922\n77785\n23365\n33059\n91874\n18543\n45291\n68286\n57909\n67601\n26018\n91392\n6205\n97169",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n9420\n48327\n76001\n35652\n98467\n11977\n13310\n65690\n88079\n26422\n2548\n83085\n95587\n12701\n18510\n14432\n1744\n4240\n40934\n53858\n51831\n49857\n65455\n90268\n67786\n9651\n85063\n52747\n89140\n4711\n81739\n14299\n79431\n52977\n63655\n957\n23764\n88895\n70882\n43558\n15850\n27598\n18117\n53860\n69908\n88165\n14309\n96175",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "44\n62010\n50673\n40185\n80671\n61424\n34771\n16341\n80339\n4006\n88867\n35821\n71320\n48521\n49296\n97373\n52533\n65276\n81014\n85596\n32490\n27571\n4703\n40571\n55339\n90350\n71578\n6017\n23833\n10341\n8328\n7735\n84444\n59856\n60824\n74530\n86418\n68306\n60828\n8211\n19358\n46970\n4131\n59657\n35920",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n59139\n17349\n29940\n88153\n5476\n52304\n25785\n80915\n7962\n79427\n26087\n55236\n83140\n30503\n94281\n14433\n54115\n63296\n77817\n56759\n62818\n19738\n27899\n72920\n15721",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n89681495\n39908881\n63967532\n47814767\n55901928\n58059595\n6825630\n33741549\n91115718\n71557238\n35982802\n31669911\n75032318\n6286460\n98921740\n37777809\n78615157\n9568252\n88065258\n79995122\n53251009\n59860365\n37896071\n88023211\n14977463\n18537419\n94692390\n35852325\n27123383\n8365663\n33656445\n2308567\n54722829\n74592730\n53127069\n74900130\n31785928\n17646044\n2363307\n11562633\n33970368\n71920339\n98987324\n14929424\n90386528\n25496912\n65384338\n31811333\n74207198\n3329497\n29668062\n92859117\n88636343\n4618993\n99439630\n15396319\n78937678\n64620215\n19934099\n66768987\n84347448\n71112040\n43562701\n17173311\n48877675\n22759416\n45307826\n52165043\n15211117\n66883461\n15137926\n69201047\n80650341\n20226618\n88896585\n8227185\n6044972\n15516970\n85716935\n78294657\n65253951\n68967444\n8430568\n18884625\n71979889\n5208666\n31896081\n60159572\n142398\n32867946\n47525118\n20135057\n54913960\n43653596\n50029078\n65590798\n22746918\n57042239\n4611127\n52992505\n59835448\n18356904\n49078372\n44563051\n97102519",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n70780376\n31909826\n11783988\n64572660\n65059084\n53470285\n74247218\n36368796\n3027203\n98992377\n66373440\n17591666\n41305477\n34944671\n80397822\n61534227\n75943682\n86438077\n6074953\n88612614\n17387364\n66463447\n82716583\n47395091\n96308320\n1943594\n91028235\n11508921\n50443534\n30784070\n99195116\n6166312\n90860149\n56017165\n72660461\n40125501\n12754430\n91927390\n64575243\n24592119\n36397253\n94582647\n27449329\n21755859\n97419352\n81115147\n58391641\n42848744\n5509019\n77976736\n66017343\n56439210\n96187608\n5094674\n63262067\n98717954\n19461649\n82093156\n84418116\n91866064\n39080897\n90363863\n68903810\n74437862\n3542657\n35705853\n84935783\n8782630\n82974049\n49002776\n33193076\n54495720\n6907870\n24228845\n96440370\n68862545\n88267457\n26333029\n53431239\n57186164\n73816224\n84300476\n72520513\n55628849\n6935110\n35518226\n9310026\n12596585\n83681999\n98565815\n43389250\n62364311\n42898340\n68464183\n34114260\n16144504\n80681295\n9087438\n96075786\n76468697\n86294326\n50800090\n67291110\n3139753\n3677931",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "2\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}