{
  "problem_code": "problems",
  "title": "Barn Expansion",
  "tags": [],
  "text": "Farmer John has N (1 ≤ N ≤ 25,000) rectangular barns on his farm, all\r\nwith sides parallel to the X and Y axes and integer corner coordinates in\r\nthe range 0..1,000,000. These barns do not overlap although they may\r\nshare corners and/or sides with other barns.Since he has extra cows to milk this year, FJ would like to expand some of\r\nhis barns.  A barn has room to expand if it does not share a corner or a\r\nwall with any other barn.  That is, FJ can expand a barn if all four of its\r\nwalls can be pushed outward by at least some amount without bumping into\r\nanother barn.  If two barns meet at a corner, neither barn can expand.Please determine how many barns have room to expand.Inputt – the number of test cases, then t test cases follow.Each test case takes the following form:The first line contains the number of rectangular barns - n.Each of the next n lines contains:Four space-separated integers A, B, C, and D,      describing one barn. The lower-left corner of the barn is at (A, B) and the upper right corner is at (C, D).OutputFor each test case write a single integer that is the number of barns that can be expanded in a separate lineExampleInput:1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1Output:2Input/Output details:There are 5 barns.  The first barn has its lower-left corner at (0, 2) and\r\nits upper-right corner at (2, 7), and so on.Only two barns can be expanded --- the first two listed in the input.\r\nAll other barns are each in contact with at least one other barn.",
  "sample_input": "Input:1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EXPAND",
  "scraped_at": "2025-08-17 00:33:12",
  "test_cases": [
    {
      "input": "1\r\n5\r\n0 2 2 7\r\n3 5 5 8\r\n4 2 6 4\r\n6 1 8 6\r\n0 0 8 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n7\n7\n3\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n4\n6\n1\n1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n2\n2\n9\n7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n42434323\n17650826\n16551266\n98698547\n45913368\n54311358\n13960084\n71967554\n47310590\n18968734\n12897279",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n80305381\n39400381\n10737316\n54036100\n91168667\n28177178\n77471985\n59525917\n1422527\n2693877\n29064736\n35306004\n75745947\n83296098\n23556493\n84101994",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n99456857\n35005716\n25948955\n54620784\n79034165\n65353817\n37674200",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n12682454\n20566747\n97077686\n85018203\n73691214\n40028834\n54818041\n62237638\n95044825\n40896634\n75163584\n52052397\n56335588\n69703923\n83424471\n87588107\n77003054\n68230782",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n67063095\n98676706\n67187015\n30728141\n78953770\n41033024",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "23\n79570\n99826\n16084\n74915\n85313\n38317\n3121\n12567\n24288\n86484\n68384\n62571\n54063\n83993\n4455\n15835\n7002\n93682\n76845\n47585\n41859\n56389\n74501",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n73281\n96941\n92241\n65940\n97532\n63892\n12299\n70907\n3784\n26601\n65869\n36281\n82281\n94657\n97028\n36270\n68064\n35635\n87422\n8928\n80929\n700\n88266\n4894",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n86241\n98293\n58696\n71222\n97202\n50015\n49073\n91411\n91238\n77435\n61648\n76925\n29942\n22980\n91332\n83974\n78435\n60867\n72831\n11129\n49948",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n67481\n66009\n41730\n77228\n56860\n48220\n15842\n12154\n38666\n8557\n84281\n18083\n5798\n88228\n71081\n38793\n7024\n61263\n55064\n78240\n47601\n48681",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n2371\n23248\n15692\n13801\n68114\n9708\n61070\n83665\n21055\n59080\n95003\n47442\n31139\n68176\n9048\n81527\n84975\n50654\n64157\n36765\n54016\n86169\n86185",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n19638\n9209\n9221\n45175\n58489\n65367\n67622\n17255\n28944\n61172\n75462\n42504\n47938\n95212\n19338\n23385\n77528\n93453\n90297\n37586\n25859\n40187\n43571\n97457\n19457",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n59513\n65776\n91768\n28260\n75102\n62425\n80263\n57203\n52547\n45862\n45089\n3344\n22050\n70465\n20839\n60870\n6046\n11994\n60994\n19564\n78194\n57888\n89771\n40719\n8368",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n11099856\n27349593\n29295723\n44367916\n17699227\n15695086\n15940152\n29504476\n77809285\n82763008\n77527812\n41994379\n76663880\n89191932\n71100453\n678280\n57824724\n27537738\n46224887\n23638955\n51927523\n59909964\n78824431\n54088518\n74127066",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "25\n68088922\n63522920\n26522073\n27396895\n10725530\n25440811\n1026762\n9303567\n49870028\n99268852\n54191334\n95477562\n20192565\n75747387\n69038038\n99952655\n17064381\n62129995\n77590771\n66134107\n25422278\n30774298\n51298959\n32197641\n89746595",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 25)"
    },
    {
      "input": "25\n1\n100000000\n100000000\n100000000\n1\n72699724\n3575284\n1\n34053194\n100000000\n10315517\n1\n1\n1\n29633885\n1\n30007937\n100000000\n1\n1\n100000000\n100000000\n78640403\n100000000\n97857941",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 25)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20
}