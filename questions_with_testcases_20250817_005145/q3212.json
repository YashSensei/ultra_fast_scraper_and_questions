{
  "problem_code": "problems",
  "title": "XOR Game",
  "tags": [],
  "text": "You are given an array of n integers (0 ≤ n ≤ 1000). Find a contiguous subsequence of these numbers [ai, aj] (1 ≤ i, j ≤ n), such that the Exclusive-OR of these numbers is maximum. (That is, aiXOR ai+1XOR ... ajshould be maximum).InputThe test case contains exactly 2 lines of input.The first line contains a single integer n (0 ≤ n ≤ 1000), the total number of integers in the sequence given to you.The next line contains n space separated integers such that the ith integer denotes ai. (0 ≤ ai≤ 109). Note that these integers need not necessarily be distinct.OutputOutput two lines. In the first line, print out the value of the maximum XOR.In the second line, print out i and j with a space separating them, such that [ai, aj] (both endpoints inclusive) denotes the contiguous subsequence with the maximum XOR value.In case there is more than one subsequence with the maximum XOR value, print out the pair (i, j) such that (i, j) is lexicographically smallest. (Formally, we say that a pair (a, b) is lexicographically smaller than another pair (c, d) if and only if (i) a < c or (ii) a=c and b < d.)NOTE: The subsequence must be non-empty, but may be allowed to contain just one integer. (i.e, in this case, i = j)ExampleInput #1:1\r\n4Output #1:4\r\n1 1Input #2:3\r\n1 2 3Output #2:3\r\n1 2ExplanationIn the first test case, since there is only one number, the maximum XOR would be simply the value of that number (in this case, 4), and i = j = 1.In the second test case, the maximum XOR value is 3, but there are 2 contiguous subsequences that define the same XOR value - (i) [1, 2] since 1 XOR 2 = 3 (ii) [3, 3] since this subsequence contains just the single integer 3. But since [1, 2] is lexicographically smaller than [3, 3], [1, 2] is the desired output.",
  "sample_input": "Input #1:1\r\n4Output #1:4\r\n1 1",
  "sample_output": "Input #2:3\r\n1 2 3Output #2:3\r\n1 2",
  "link": "https://www.spoj.com/problems/QN01",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "Input #1:1\r\n4Output #1:4\r\n1 1",
      "expected_output": "Input #2:3\r\n1 2 3Output #2:3\r\n1 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 10\nq hymuh\n5 10 5\nhsq tx\n6 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\nb yo\n8 9 7\na mj\n9 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5\ntcpuc fcp\n1 4 10\nm hk\n8 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 16\nhyylm xo\n21 52 43\ncng ggyu\n49 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "78 9\nim h\n73 10 72\niule fkh\n26 9",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 46\nl cacv\n79 28 80\nhu cs\n3 38",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 47\nkddzj nx\n74 37 17\nye how\n75 99",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 39\ns tr\n14 19 95\ntg nahib\n81 55",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "299 53\ne sy\n449 408 492\nr fhp\n429 117",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "454 115\nem aey\n143 372 243\ntbiw zryu\n417 120",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "106 174\nfblyw wg\n430 268 91\nbavuiti ae\n163 268",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "137 193\ntu yjslc\n310 86 270\ni dpgea\n266 257",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "178 469\nie w\n464 459 448\nhwh hhls\n170 346",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "286 144\nxp dxm\n153 130 137\nhnu n\n248 359",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "283 237\nivmu uke\n283 211 490\nae b\n462 171",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\neerqu agx\n1000 1000 1000\nxeidaro el\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nxcp xlik\n1000 1000 1000\nlvul f\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\nq j\n999 1 2\nu azd\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\na gtxq\n1 1 1000\nqneyj kp\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}