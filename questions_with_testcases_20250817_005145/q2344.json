{
  "problem_code": "problems",
  "title": "Mafia",
  "tags": [],
  "text": "The police in Byteland got an anonymous tip that the local mafia bosses are planning a big transport from the harbour to one of the secret warehouses in the countryside. The police knows the date of the transport and they know that the transport will use the national highway network.The highway network consists of two-way highway segments, each segment directly connecting two distinct toll stations. A toll station may be connected with many other stations. A vehicle can enter or exit the highway network at toll stations only. The mafia transport is known to enter the highways at the toll station closest to the harbour and leave it at the toll station closest to the warehouse (it will not leave and re-enter the highways in between). Special police squads are to be located in selected toll stations. When the transport enters a toll station under surveillance, it will be caught by the police.From this point of view, the easiest choice would be to place the police squad either at the entry point or the exit point of the transport. However, controlling each toll station has a certain cost, which may vary from station to station. The police wants to keep the overall cost as low as possible, so they need to identify aminimal controlling setof toll stations, which satisfies the two conditions:all traffic from the harbour to the warehouse must pass through at least one station from that set,the cost of monitoring these stations (i.e. the sum of their individual monitoring costs) is minimal.You may assume that it is possible to get from the harbour to the warehouse using the highways.InputThe first line of the standard input contains two integersnandm(2 ≤n≤ 200, 1 ≤m≤ 20000) - the number of toll stations and the number of direct highway segments. The toll stations are numbered from 1 ton.The second line contains two integersaandb(1 ≤a,b≤n,a≤b) - the numbers of the toll stations closest to the harbour and to the warehouse, respectively.The followingnlines describe the monitoring costs. The i-th of these lines (for 1 ≤i≤n) contains one integer - the monitoring cost of the i-th station (which is positive number not exceeding 10000000).The followingmlines describe the highway network. The j-th of these lines (for 1 ≤j≤ m) contains two integersxandy(1 ≤x<y≤n), indicating that there is a direct highway segment between toll stations numberedxandy. Each highway segment is listed once.OutputThe only line of the output should contain the numbers of toll stations in a minimal controlling set, given in increasing order, separated by single spaces. If there is more than one minimal controlling set, your program may output anyone of them.ExampleFor the input data:5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4the correct result is:1 4The figure shows the highway network with the toll station numbers (in the upper-left corners) and the monitoring costs. Stations number 1 and 4 constitute the minimal controlling set with total controlling cost 5.",
  "sample_input": "5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4",
  "sample_output": "1 4",
  "link": "https://www.spoj.com/problems/MAFBOI08",
  "scraped_at": "2025-08-17 00:33:54",
  "test_cases": [
    {
      "input": "5 6\r\n5 3\r\n2\r\n4\r\n8\r\n3\r\n10\r\n1 5\r\n1 2\r\n2 4\r\n4 5\r\n2 3\r\n3 4",
      "expected_output": "1 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6\n1 1\n4\n7\n1\n4\n3\n5 4\n8 3\n2 7\n5 8\n8 2\n7 1",
      "expected_output": "0\n0\n4\n7\n1\n4\n3\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 5\n5 9\n10\n6\n9\n6\n7\n4 9\n8 4\n9 9\n6 1\n7 6\n3 1",
      "expected_output": "0\n0\n10\n6\n9\n6\n7\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10\n1 8\n5\n2\n8\n8\n1\n2 3\n7 10\n7 2\n9 8\n8 1\n9 5",
      "expected_output": "0\n0\n5\n2\n8\n8\n1\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "100 39\n1 82\n17\n65\n66\n83\n78\n77 2\n33 41\n69 38\n47 66\n38 31\n58 58",
      "expected_output": "0\n0\n17\n65\n66\n83\n78\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "34 92\n96 45\n37\n52\n96\n88\n22\n43 22\n28 63\n96 54\n15 63\n15 51\n31 67",
      "expected_output": "0\n0\n37\n52\n96\n88\n22\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 53\n47 93\n37\n1\n82\n4\n55\n13 66\n58 35\n63 47\n96 3\n10 54\n9 95",
      "expected_output": "0\n0\n37\n1\n82\n4\n55\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "17 27\n29 3\n66\n84\n38\n59\n37\n89 55\n33 78\n2 37\n77 10\n100 23\n61 17",
      "expected_output": "0\n0\n66\n84\n38\n59\n37\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 16\n38 77\n57\n91\n45\n88\n32\n83 52\n57 51\n2 78\n91 35\n31 21\n23 9",
      "expected_output": "0\n0\n57\n91\n45\n88\n32\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19 49\n20 29\n16\n10\n50\n86\n51\n49 53\n52 91\n96 26\n72 42\n70 29\n86 11",
      "expected_output": "0\n0\n16\n10\n50\n86\n51\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "16 65\n63 19\n85\n31\n56\n77\n71\n66 15\n38 13\n98 86\n60 69\n12 67\n65 82",
      "expected_output": "0\n0\n85\n31\n56\n77\n71\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "74 20\n81 83\n65\n52\n54\n28\n22\n72 30\n73 92\n95 58\n27 94\n61 84\n78 89",
      "expected_output": "0\n0\n65\n52\n54\n28\n22\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "50 53\n10 82\n23\n25\n93\n41\n48\n43 70\n63 76\n42 28\n67 17\n94 27\n54 64",
      "expected_output": "0\n0\n23\n25\n93\n41\n48\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "43 16\n30 50\n38\n74\n44\n33\n62\n49 26\n62 16\n70 71\n57 60\n55 18\n99 90",
      "expected_output": "0\n0\n38\n74\n44\n33\n62\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "100 26\n45 56\n93\n80\n77\n93\n88\n90 65\n33 89\n99 24\n76 60\n55 79\n88 52",
      "expected_output": "0\n0\n93\n80\n77\n93\n88\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "71 73\n16 24\n70\n10\n52\n38\n72\n21 56\n15 85\n13 95\n25 58\n55 86\n91 13",
      "expected_output": "0\n0\n70\n10\n52\n38\n72\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200 200\n200 200\n200\n200\n200\n200\n200\n200 200\n200 200\n200 200\n200 200\n200 200\n200 200",
      "expected_output": "0\n0\n200\n200\n200\n200\n200\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200 200\n200 200\n200\n200\n200\n200\n200\n200 200\n200 200\n200 200\n200 200\n200 200\n200 200",
      "expected_output": "0\n0\n200\n200\n200\n200\n200\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n199 1\n199\n1\n1\n2\n1\n199 2\n200 1\n199 200\n2 200\n2 2\n1 1",
      "expected_output": "0\n0\n199\n1\n1\n2\n1\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 200\n2 199\n2\n200\n2\n1\n199\n200 199\n199 1\n200 1\n199 1\n199 199\n1 1",
      "expected_output": "0\n0\n2\n200\n2\n1\n199\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:32"
}