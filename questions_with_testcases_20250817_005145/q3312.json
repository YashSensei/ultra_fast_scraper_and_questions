{
  "problem_code": "problems",
  "title": "Life Game",
  "tags": [],
  "text": "You are working at a production plant of biological weapons. You are a maintainer of a terrible virus weapon\r\nwith very high reproductive power. The virus has a tendency to build up regular hexagonal colonies. So as a\r\nwhole, the virus weapon forms a hexagonal grid, each hexagon being a colony of the virus. The grid itself is in\r\nthe regular hexagonal form withNcolonies on each edge.The virus self-propagates at a constant speed. Self-propagation is performed simultaneously at all colonies.\r\nWhen it is done, for each colony, the same number of viruses are born at every neighboring colony. Note that,\r\nafter the self-propagation, if the number of viruses in one colony is more than or equal to the limit densityM,\r\nthen the viruses in the colony start self-attacking, and the number reduces moduloM.Your task is to calculate the total number of viruses afterLperiods, given the sizeNof the hexagonal grid and\r\nthe initial number of viruses in each of the colonies.InputThe input consists of multiple test cases.Each case begins with a line containing three integersN(1 ≤N≤ 6),M(2 ≤M≤ 109), andL(1 ≤L≤ 109).\r\nThe following 2N- 1 lines are the description of the initial state. Each non-negative integer (smaller thanM)\r\nindicates the initial number of viruses in the colony. The first line contains the number of viruses in theNcolonies\r\non the topmost row from left to right, and the second line contains those ofN+ 1 colonies in the next row, and\r\nso on.The end of the input is indicated by a line \"0 0 0\".OutputFor each test case, output the test case number followed by the total number of viruses in all colonies afterLperiods.ExampleInput:3 3 1\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n3 3 2\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n0 0 0Output:Case 1: 8\r\nCase 2: 18",
  "sample_input": "Input:3 3 1\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n3 3 2\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n0 0 0Output:Case 1: 8\r\nCase 2: 18",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LIFEGAME",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "3 3 1\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n3 3 2\r\n1 0 0\r\n0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0\r\n0 0 1\r\n0 0 0",
      "expected_output": "Case 1: 8\r\nCase 2: 18",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1 3\n3 2 5\n5 3 2 4\n4 3 6 5 2\n3 4 3 6\n1 6 2\n1 2 3\n3 6 6\n6 3 5 6\n4 3 3 4 1\n2 3 2 1\n4 4 6\n3 2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 5 4\n3 1 4\n4 3 2 6\n3 2 3 2 2\n4 4 4 3\n5 5 6\n4 3 4\n4 6 5\n3 5 1 3\n3 2 6 3 6\n3 5 1 4\n6 6 2\n6 4 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 5\n6 4 5\n2 2 4 5\n3 3 6 3 2\n3 1 4 1\n3 1 1\n1 2 5\n6 1 6\n5 1 2 4\n4 5 1 1 1\n6 6 1 6\n1 6 2\n1 1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 3 5\n6 5 6\n5 6 2 3\n5 6 1 2 2\n4 2 2 2\n2 5 2\n3 4 4\n2 5 5\n3 5 1 6\n5 5 5 4 3\n6 3 4 5\n3 3 4\n5 3 1",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 1 4\n1 6 4\n3 5 1 2\n4 6 6 4 1\n6 1 6 2\n3 5 4\n5 1 2\n4 6 2\n1 2 5 1\n1 1 3 2 3\n5 2 6 1\n4 3 3\n4 2 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 1 1\n4 4 2\n4 3 5 4\n6 6 4 4 5\n4 2 6 5\n4 5 5\n6 2 4\n4 3 3\n5 3 3 6\n1 1 3 1 5\n5 5 4 5\n3 3 1\n6 5 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 6 4\n4 6 6\n2 1 4 2\n1 2 2 6 4\n2 4 1 1\n1 1 5\n5 3 2\n5 3 6\n3 4 3 2\n6 4 3 2 6\n4 2 5 3\n3 2 3\n5 3 4",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 1 4\n6 6 6\n2 1 6 6\n3 4 2 3 3\n6 5 2 2\n6 1 3\n2 5 3\n1 3 3\n3 1 4 6\n5 5 4 1 2\n5 3 2 5\n6 3 2\n6 2 3",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 2 3\n1 2 1\n3 2 1 2\n2 3 3 3 3\n2 3 2 3\n1 2 1\n3 1 2\n3 1 2\n2 3 2 3\n2 3 2 1 3\n1 1 2 3\n3 1 2\n1 1 1",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 3\n2 2 3\n1 2 1 1\n1 1 2 1 3\n1 2 2 3\n2 1 1\n1 3 3\n3 1 2\n1 3 3 3\n2 3 2 1 2\n2 1 1 2\n2 1 1\n1 2 2",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "3 2 3\n2 2 1\n3 1 2 3\n1 3 1 2 3\n2 3 2 1\n3 1 3\n2 3 1\n3 2 1\n3 2 3 3\n1 1 1 3 3\n3 2 3 2\n1 3 3\n3 2 1",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 2\n3 1 3\n3 2 2 3\n3 1 2 2 1\n2 1 3 2\n1 2 3\n2 3 1\n1 1 2\n3 3 2 2\n3 1 1 2 2\n3 3 3 1\n3 3 3\n1 1 3",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 2\n1 2 3\n3 1 1 1\n1 2 1 1 2\n1 1 1 1\n3 2 3\n3 2 1\n2 1 1\n3 1 3 3\n1 3 1 2 3\n3 3 3 3\n3 3 1\n1 3 2",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2 2 3\n2 1 2\n3 1 2 3\n3 3 3 2 2\n2 3 2 1\n2 1 3\n3 2 3\n2 2 1\n2 2 3 3\n2 3 2 2 2\n1 1 2 1\n3 2 3\n1 3 1",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 2 3\n3 3 1\n3 2 1 1\n3 3 1 2 1\n3 3 3 1\n2 2 2\n3 3 1\n1 2 1\n2 1 2 1\n2 1 1 1 1\n1 2 1 1\n3 3 1\n2 3 2",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "6 6 6\n6 6 6\n6 6 6 6\n6 6 6 6 6\n6 6 6 6\n6 6 6\n6 6 6\n6 6 6\n6 6 6 6\n6 6 6 6 6\n6 6 6 6\n6 6 6\n6 6 6",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "6 6 6\n6 6 6\n6 6 6 6\n6 6 6 6 6\n6 6 6 6\n6 6 6\n6 6 6\n6 6 6\n6 6 6 6\n6 6 6 6 6\n6 6 6 6\n6 6 6\n6 6 6",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 5\n1 2 1\n1 1 1 1\n2 5 6 1 5\n1 5 6 1\n5 5 1\n1 5 2\n1 6 2\n2 2 6 2\n2 1 1 6 2\n2 1 1 1\n1 1 1\n2 5 6",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 5 5\n5 6 1\n1 2 2 1\n2 6 2 1 2\n5 2 6 6\n2 1 5\n1 1 6\n1 5 6\n1 6 6 6\n6 2 1 6 1\n6 2 2 1\n6 6 2\n5 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}