{
  "problem_code": "problems",
  "title": "LCM Pesticide",
  "tags": [],
  "text": "NSlovakistan farmers own neighbouring fields alongside a river, forming a straight line. Each field is infested with (possibly zero) pests.Thanks to ingenious Slovakistan science, each species of pest can be assigned a prime number. Each field can then be assigned a positive number, representative of the pests that are infesting it - the prime factorization of this number indicates which pests are present, with the powers of each prime number representing how strongly the field is infested with that pest.Every pesticide can then be assigned a positive number, which is designed in such a way that its prime factorization indicates what pests it can supress, with the powers of each prime number representing how strong infestations of that pest it is able to handle.To aid their farmers, the government of Slovakistan can select a pest, and then pump a pesticide designed specifically against it into the river, completely supressing that species on all fields. However, due to environmental concerns, they will only use one pesticide at a time - when the government switches to a different pesticide, designed against a different pest, the ones previously supressed return to all fields in full force.On top of that, the farmers union can request pesticide to be sprayed on the fields themselves. Since this is done using an airplane, they can only request pesticide to be sprayed on a contiguous segment of fields.Pesticides with higher numbers are more expensive. Now, for each request the government would like to know the cheapest pesticide they can use to supress all pests on all the fields in the requested segment.InputThe first line contains two integers1 ≤ N ≤ 50000and1 ≤ Q  ≤ 105- the number of fields and the number of events.The second line containsNintegersf1, ...,fN- the numbers assigned to the fields. They will be positive and not greater than105.Qlines follow, describing events in the order in which they happened. Each event is either of the form0 L Ror1 P.If the event is of the form1 P,1 ≤ P ≤ 105, it means that the government of Slovakistan began pumping pesticide against the pest numberP(a prime number) into the river, and are no longer pumping pesticide against the previous pest, if they were doing so. The exception isP = 1, meaning that there is simply no pesticide being pumped into the river. In the beginning, the government is not pumping any pesticide.If the event is of the form0 L R,1 ≤ L ≤ R ≤ N, it means that the farmers requested pesticide to be sprayed on the contiguous segment of fields from theL-th to theR-th, inclusive.OutputFor each event of form0 L R, output the smallest number of pesticide which can handle all infestations on the segment of fields fromLtoR, modulo109+7, taking into account that some pests may be supressed due to the government's aid. More formally, output the least common multiple of the numbersfL, ...,fR, after they have had all factors ofPfrom the last1 Pevent removed, modulo109+7.ExampleInput:10 12\r\n4 2 3 5 6 47 10007 32768 59049 1\r\n0 1 5\r\n0 2 5\r\n1 2\r\n0 1 5\r\n0 2 5\r\n0 6 10\r\n1 3\r\n0 6 10\r\n1 1\r\n0 1 10\r\n0 10 10\r\n0 1 5Output:60\r\n30\r\n15\r\n15\r\n772456932\r\n411740567\r\n342852967\r\n1\r\n60",
  "sample_input": "Input:10 12\r\n4 2 3 5 6 47 10007 32768 59049 1\r\n0 1 5\r\n0 2 5\r\n1 2\r\n0 1 5\r\n0 2 5\r\n0 6 10\r\n1 3\r\n0 6 10\r\n1 1\r\n0 1 10\r\n0 10 10\r\n0 1 5Output:60\r\n30\r\n15\r\n15\r\n772456932\r\n411740567\r\n342852967\r\n1\r\n60",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LCMP",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "10 12\r\n4 2 3 5 6 47 10007 32768 59049 1\r\n0 1 5\r\n0 2 5\r\n1 2\r\n0 1 5\r\n0 2 5\r\n0 6 10\r\n1 3\r\n0 6 10\r\n1 1\r\n0 1 10\r\n0 10 10\r\n0 1 5",
      "expected_output": "60\r\n30\r\n15\r\n15\r\n772456932\r\n411740567\r\n342852967\r\n1\r\n60",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 9\n10 1 9 10 3 6 9 1 10 8\n4 10 3\n6 2 5\n8 10\n4 6 1\n7 8 5\n1 8 9\n6 5\n2 4 4\n8 8\n4 7 2\n6 2 4\n2 7 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 6\n1 7 3 9 5 5 4 2 6 7\n10 2 1\n9 10 1\n9 3\n7 10 3\n3 6 3\n2 9 9\n1 8\n10 4 2\n4 10\n4 2 2\n1 8 7\n2 2 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10\n6 10 10 7 10 3 7 5 1 10\n1 1 3\n8 1 1\n2 10\n7 9 5\n10 1 1\n4 9 5\n1 3\n10 9 2\n1 1\n3 7 10\n10 6 4\n10 8 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 96\n35 37 94 87 86 95 81 84 11 75\n9 31 27\n38 88 86\n94 64\n47 85 77\n77 66 15\n57 73 57\n24 88\n15 43 39\n34 35\n100 21 72\n78 83 56\n68 83 27",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "21 63\n33 100 67 61 74 13 52 84 64 20\n73 65 56\n47 2 4\n89 57\n91 75 2\n72 40 55\n22 50 95\n94 36\n82 29 34\n1 28\n22 1 21\n48 8 96\n100 54 45",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "93 69\n14 83 78 18 15 72 85 25 14 56\n17 82 89\n34 77 85\n5 20\n78 38 21\n96 11 31\n79 5 74\n59 99\n30 50 19\n65 50\n60 38 38\n15 66 54\n5 95 54",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 75\n23 91 8 14 1 54 24 78 28 79\n35 51 63\n39 23 24\n41 20\n87 85 99\n60 2 12\n70 17 39\n98 78\n90 10 81\n22 40\n80 61 30\n49 41 46\n77 88 12",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 56\n63 25 17 36 6 10 66 100 36 42\n1 92 25\n56 5 4\n96 89\n67 59 12\n56 83 35\n34 99 78\n18 42\n38 37 62\n25 84\n94 96 45\n42 61 63\n99 32 3",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "13137 11830\n23233 16118 23142 13919 8318 5796 5142 23170 19812 5121\n5735 19290 6421\n15947 16582 21670\n7515 5386\n19620 18352 21005\n17039 3912 12225\n8479 12970 7131\n8919 4128\n17348 23667 8514\n14666 20090\n20687 15162 15455\n17985 2602 21288\n10937 22417 14076",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "24105 18032\n15175 15684 24604 7826 18523 3004 22767 11198 9154 3005\n23182 3196 20398\n21321 6839 15767\n23152 3207\n11920 13095 4041\n19281 23353 24605\n7539 23656 22474\n2982 6806\n24565 14651 3178\n6387 24123\n15998 22408 13245\n15639 19055 23240\n14415 2652 21153",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15739 22397\n20285 10810 10941 15943 17530 15941 16761 9142 15456 17880\n5900 8343 11235\n20144 3831 22758\n8703 5443\n2936 12870 12947\n23206 22561 18228\n16073 10764 3864\n8233 11103\n19208 21537 18069\n24433 3095\n12976 6928 4418\n11523 5845 16580\n22523 9200 6568",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "18812 16298\n5399 3668 24826 19521 4207 16369 18376 12855 10107 3779\n17388 8705 21225\n12741 4150 9239\n23309 8572\n13963 8089 9460\n19791 14207 11412\n15559 8016 15572\n12429 24625\n13466 7715 4107\n13768 15756\n14908 10420 9193\n20314 4940 9930\n20064 24005 18240",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12678 14338\n4234 2727 2908 7518 6687 10773 24349 12401 5393 5397\n24441 14339 18670\n8093 20649 11944\n23543 17538\n8988 14698 21116\n10890 4788 22525\n9250 17954 16967\n14196 8485\n10591 9262 24865\n5253 3310\n8432 17967 15232\n14042 10194 18379\n2935 16203 15745",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3181 12546\n6351 2965 18371 7037 12952 23163 7292 9952 12890 18168\n14394 12690 19324\n16159 2658 4856\n4445 23368\n6838 15833 2597\n3779 20903 5224\n13735 3663 19492\n24615 8632\n13571 11116 7128\n16337 21500\n14289 11762 24871\n19811 8623 12592\n11076 5269 17569",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10279 15275\n14744 18262 4117 16223 7652 6163 7823 20064 14240 12256\n4749 15146 3800\n5776 17097 6091\n22599 3265\n4240 23312 14977\n10358 16621 4387\n16780 17915 3848\n13883 16574\n24632 3063 11473\n6335 8916\n9175 8772 23942\n22666 10818 14902\n14278 12069 10800",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000\n50000 50000 50000 50000 50000 50000 50000 50000 50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000 50000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n50000 50000 50000 50000 50000 50000 50000 50000 50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000\n50000 50000 50000\n50000 50000 50000\n50000 50000 50000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 50000\n50000 50000 49999 2 49999 2 1 1 1 2\n1 50000 1\n2 2 49999\n49999 1\n1 49999 2\n50000 2 49999\n49999 49999 1\n1 1\n1 1 2\n49999 50000\n49999 50000 1\n50000 50000 1\n2 1 50000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "49999 1\n1 49999 1 1 1 49999 50000 49999 50000 49999\n49999 1 1\n50000 1 50000\n50000 50000\n1 2 50000\n50000 49999 2\n50000 50000 1\n2 1\n2 50000 2\n49999 1\n2 49999 49999\n2 49999 50000\n49999 2 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:55"
}