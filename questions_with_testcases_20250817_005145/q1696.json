{
  "problem_code": "problems",
  "title": "Can you play carrom !!!",
  "tags": [],
  "text": "Carrom board is a very popular game. There are four player in this game in dual player mode. In dual player game the team is pair with opposite side player.So, in picture you see the board and the players. Where the player A and the player C in team-1, the player B and the player D in team-2.In this game a team is play with one color pawn. So, if team-1 start playing the board they take the white pawn, and the team-2 get the black pawn for the game. If team-1 can cover all the pawn before the team-2 and the red also covered by the time then the team-1 will win. Otherwise team-2 will win if they cover their all pawn in the game.Now, There are 9 white pawn and 9 black pawn and one red pawn in the board. The game is played by different rule.In my problem of this game the rule like,The point for the one pawn is 1 and for red is 5.You can assume that which player 1st start playing the game is start with the white pawn.one team must cover red pawn and this team will get the red point. And you know the penalty rule is If one player cover one pawn of opposite team then the turn goes to the next player.Now your task is to find the winner team and points.The points count by the remaining of pawn in the board and plus the covered red pawn point by the winning team.InputInput consists of pairs of lines (at most 100 lines). Each pair contains 1 character and 3 integer. A first character is the player id (A , B , C or D) and three integer is W, B, R (1 ≤ W, B ≤ 9) separated by a space that is number of white, black and red pawn the player cover in his turn. The end of one input occurs when the first sequence starts with an \"#\" character (without the quotes).OutputFor each case if the game complete then you have to print a string “Team-1 win and the point is N.” (without the quotes) when team-1 win , Otherwise “Team-2 win and the point is N.” (without the quotes).If the game is incomplete then print a string \"Incomplete game.\" (without the quotes) when a team can not cover all the pawn of his turn.N is the total point of winner team. See the sample input/output for exact formatting.ExampleInput:A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#Output:Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.ExplanationFor the first input player A start the game so the team-1 play with the white pawn.After all input the team-1 cover all of white pawn also the red pawn, and there are 5 black pawn remaining in the board.So, team-1 win and the point is 5 + 5 = 10.____________________________________________________________________________________________________________Problem setter: Md. Hashibul Amin Hemel, Dept. of CSE. Bangladesh University of Business and Technology (BUBT)",
  "sample_input": "Input:A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#Output:Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CARRHIM",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "A 5 1 0\r\nB 1 2 0\r\nC 2 1 1\r\nD 1 0 0\r\n#\r\nB 1 1 0\r\nC 1 2 0\r\nD 3 1 1\r\nA 1 2 0\r\nB 3 0 0\r\n#\r\nA 1 1 0\r\nB 1 5 1\r\nC 1 1 0\r\n#",
      "expected_output": "Team-1 win and the point is 10.\r\nTeam-2 win and the point is 8.\r\nIncomplete game.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3 1\nnh 6 7 5\n2 10 5\ne 1 3 3\n7 6 6\nhcq 3 7 10\n9 5 9\nr 3 5 5\njo\n2 8 3\nipo 4 9 7\n5 7 4\new 3 9 2\n6 1 5\nqhj 8 7 1\n4 4 9\njrqk 4 4 1\n9 5 2\nwctq 3 10 3\nkc\n2 8 3\ntf 2 3 6\n5 8 3\nfwc 6 6 7\n10 4 3\nizh 3 6 4\nd",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 3 8\nmbcxe 5 8 5\n10 4 6\nzdc 6 3 1\n7 10 4\ngd 3 7 8\n8 2 8\nlgh 9 5 9\nmy\n8 10 9\nbdha 2 4 5\n6 9 4\nbcz 5 4 5\n8 6 3\nr 2 6 8\n4 4 5\nunj 10 6 5\n3 8 4\nkjk 1 2 9\nlz\n1 9 3\newl 7 2 1\n9 9 1\nebfkm 6 3 1\n6 6 4\nw 5 9 2\nvu",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 3\neoi 8 4 10\n7 1 3\nrygnm 4 7 2\n1 10 10\nd 1 7 9\n10 5 10\nebi 5 5 1\nqp\n8 3 10\na 3 5 1\n8 1 1\nh 2 6 7\n8 4 1\nat 7 8 4\n4 7 5\nsfvn 10 2 4\n3 1 10\nsx 8 2 8\nqw\n4 3 6\naevd 4 9 4\n10 3 9\nchhcz 10 8 7\n8 2 6\nc 4 4 7\nr",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "55 20 64\nezf 61 63 16\n51 17 89\nba 90 48 46\n73 60 50\ncocvt 22 1 18\n65 71 41\nxme 9 39 34\ns\n92 88 68\ndihd 59 51 53\n50 47 13\no 59 79 5\n63 36 18\nii 81 55 90\n15 71 51\nwk 55 90 60\n82 38 61\nrf 80 15 91\nl\n22 53 79\nyh 89 14 65\n82 73 71\nawch 59 89 9\n69 52 66\nnpav 59 64 86\nd",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "81 97 21\nrxc 18 80 72\n12 85 85\nwyby 36 67 25\n68 53 2\ndlw 79 14 51\n10 90 14\nak 70 53 54\noh\n64 12 42\nn 20 83 86\n68 64 54\nce 3 48 77\n3 77 73\ntoi 53 16 78\n38 64 18\ndd 80 39 99\n80 35 53\ntda 10 67 86\nuo\n38 21 26\ntiqk 97 96 20\n89 82 45\nx 87 24 66\n67 33 31\nkdvz 94 85 6\nb",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 25 94\nbqxpa 64 94 36\n71 97 100\njocj 50 90 27\n49 86 39\nu 74 94 45\n81 67 63\ni 8 56 34\nj\n8 37 9\ngv 93 82 10\n36 74 46\njt 87 79 64\n73 58 13\npjl 83 85 76\n5 68 43\nuvi 84 7 49\n25 37 47\nwxp 40 2 12\nc\n26 98 44\nm 13 74 14\n78 56 20\npou 80 95 34\n85 8 15\ndtk 11 78 47\ntw",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 21 67\nkbd 56 89 64\n81 42 40\nofik 83 21 38\n46 93 95\nav 84 39 39\n92 33 20\nbqdjs 89 66 58\nwl\n57 79 9\npwon 37 70 33\n80 8 27\nmfzl 81 75 97\n88 11 34\nsdz 73 82 88\n85 23 91\ndruwg 90 99 34\n71 34 11\nuepl 10 40 78\ny\n39 81 46\nkw 18 74 75\n93 30 42\nvfxg 43 63 63\n55 1 90\nn 90 55 81\nx",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "70 48 75\ncp 43 12 36\n33 19 87\nkb 50 23 53\n3 6 95\nugmb 16 58 96\n39 72 85\ngt 9 69 64\nsz\n9 82 18\nfppm 42 58 18\n50 54 17\nxmxl 97 3 32\n76 99 12\nr 83 26 92\n48 81 47\nwsgh 82 37 86\n54 96 100\nrj 77 33 24\nqs\n32 93 100\ntcud 70 2 56\n49 37 99\njyxur 51 75 65\n41 67 73\ndjpq 75 24 41\nsy",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "439 102 306\ndmig 216 179 473\n464 79 436\nle 254 168 150\n345 258 482\ny 496 97 298\n227 353 142\nc 435 309 113\njw\n192 398 389\ntdzm 110 469 255\n194 56 266\nnibv 328 424 216\n147 91 149\nr 280 393 299\n268 115 345\nif 263 70 416\n292 174 102\nhjaqq 264 208 319\nec\n432 326 433\ngemzw 442 76 376\n53 56 93\neu 426 491 157\n386 372 334\niowph 194 390 71\niv",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "430 365 110\nmzsj 399 192 203\n394 128 341\ny 484 150 317\n248 200 109\nbp 173 496 425\n499 195 93\nsja 204 50 78\nhu\n123 168 201\nmrgp 281 241 83\n149 210 363\nvsolr 256 241 259\n147 463 499\nqog 202 408 140\n314 99 254\nbulsg 433 244 402\n463 422 354\ndqs 293 340 371\nwa\n107 405 338\nph 421 190 378\n444 381 500\nl 296 325 481\n408 85 358\nctdi 324 246 410\ney",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "339 408 200\nqsu 466 151 159\n281 414 234\nyhi 169 470 389\n367 115 164\nwbtd 345 206 333\n320 371 227\nrpsvu 172 258 444\ny\n73 99 449\nnns 145 219 161\n80 69 159\nbiwa 285 340 184\n161 173 396\ncnh 387 424 64\n481 385 92\nsxf 217 215 477\n199 318 448\ngi 237 205 497\nu\n379 209 243\nos 294 63 251\n419 236 276\njbmwo 113 145 62\n487 452 214\nbjp 495 182 496\nto",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "244 337 330\nhfwuy 444 297 223\n184 481 96\nzr 107 163 222\n258 199 337\njug 170 484 277\n282 238 405\nbf 131 279 379\ny\n181 73 147\ndym 341 436 287\n296 362 493\ngjfq 455 327 436\n133 290 415\nr 237 131 491\n455 52 104\ntai 320 316 349\n195 100 280\nlwp 219 467 326\nzb\n162 120 221\nc 283 367 95\n223 232 313\nhed 146 145 327\n98 224 297\nvxd 434 149 379\nf",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "370 100 72\np 201 249 168\n209 301 261\nqxu 252 220 306\n209 407 447\npeq 52 201 233\n499 402 397\nyqxpj 381 463 168\nnk\n267 401 209\nyesv 219 58 308\n458 312 317\nkh 151 500 249\n314 292 324\nayx 203 285 463\n157 98 88\ngp 125 279 431\n378 283 119\nj 175 338 484\ng\n253 450 83\nsxf 347 392 452\n60 213 73\nule 312 193 109\n408 104 422\ngf 328 69 379\nbs",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "267 375 57\nej 65 469 368\n156 64 445\nw 188 134 99\n221 356 417\nptjdq 388 387 216\n260 437 248\ntd 181 499 496\nn\n249 416 263\nmztj 371 432 489\n407 60 111\npoz 394 115 223\n227 399 300\nhkr 185 110 298\n218 271 144\nkef 410 441 126\n451 311 422\ne 476 219 437\ng\n450 354 365\nsndo 154 422 300\n264 69 391\nstzp 349 189 449\n452 330 212\nr 332 335 355\nap",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "310 289 224\ng 338 190 316\n162 171 430\nh 141 316 392\n94 351 160\ny 301 266 205\n62 106 91\nwkcj 500 103 192\nl\n381 314 120\nz 378 184 443\n447 237 97\nrily 282 141 62\n258 281 416\nijm 161 305 147\n71 377 98\ntm 399 188 500\n473 79 89\nulb 201 441 350\nrn\n232 54 392\nup 376 386 174\n131 209 418\nyi 166 437 482\n412 134 471\nfngh 111 126 456\nf",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\newcm 1000 1000 1000\n1000 1000 1000\nx 1000 1000 1000\n1000 1000 1000\nlze 1000 1000 1000\n1000 1000 1000\ncajq 1000 1000 1000\nf\n1000 1000 1000\nhtpt 1000 1000 1000\n1000 1000 1000\ngqp 1000 1000 1000\n1000 1000 1000\ny 1000 1000 1000\n1000 1000 1000\nlsohv 1000 1000 1000\n1000 1000 1000\nnix 1000 1000 1000\nrn\n1000 1000 1000\nelc 1000 1000 1000\n1000 1000 1000\nz 1000 1000 1000\n1000 1000 1000\nbxga 1000 1000 1000\nh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nvs 1000 1000 1000\n1000 1000 1000\nunfh 1000 1000 1000\n1000 1000 1000\nyhmd 1000 1000 1000\n1000 1000 1000\noj 1000 1000 1000\nu\n1000 1000 1000\ntv 1000 1000 1000\n1000 1000 1000\nwcm 1000 1000 1000\n1000 1000 1000\nprdh 1000 1000 1000\n1000 1000 1000\noyaw 1000 1000 1000\n1000 1000 1000\npwd 1000 1000 1000\nh\n1000 1000 1000\nwia 1000 1000 1000\n1000 1000 1000\nmcwia 1000 1000 1000\n1000 1000 1000\njr 1000 1000 1000\ne",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 999\nxvced 1000 999 1000\n2 1 999\ntvbn 2 1 999\n1 1 999\nwtwy 2 2 1\n1 1 1\nynzx 2 999 2\nn\n1 1 1000\nixk 1000 2 1\n999 2 1\nw 999 999 1\n2 2 1\nhb 999 1 1000\n1 1 999\nv 2 999 2\n2 1 2\nkh 999 999 2\nns\n1000 999 999\nyix 1 2 1\n2 1000 999\nnazs 2 1 1\n2 2 2\ng 999 2 999\no",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 1000\nn 2 1000 2\n2 1000 1\nuz 1000 999 1000\n2 1 2\nrnpvs 1000 1 1\n1000 999 1\nca 1000 1000 1\ny\n1 999 1000\nucbqj 2 999 1000\n1000 999 1\nmltlg 2 2 1\n1 2 999\ny 999 1 999\n999 1 1\nf 999 999 999\n2 1000 2\ndlq 1000 2 1\nuv\n1 1000 1\nro 999 999 1000\n999 2 1000\nzhp 1 1000 1000\n2 1000 999\nkyn 999 999 2\nbd",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:12"
}