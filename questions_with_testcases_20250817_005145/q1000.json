{
  "problem_code": "problems",
  "title": "Helping Jar Jar Binks",
  "tags": [],
  "text": "A job has been assigned to Jar Jar Binks, it goes as follows:There are N spaceships parts, each with a weight of Wi kg. Given a weight W, he has to show how many parts can be used in order to make a ship with a weight of exactly W kg. He has to show all possible solutions, of course if possible.Everybody knows Jar Jar Binks particularly because of his clumsiness, so you have to help him. Write a program that solves his problem!InputThere will be several cases, each beginning with two integers N, Q (1 ≤ N ≤ 60, 0 ≤ Q ≤ 10000).Next there will be N positive integers representing the weights of the N spaceship parts (1 ≤ Wi ≤ 1000).Q lines will follow, each one with only one (not necessarily positive) integer W, the total weight of the spaceship.End of input will be denoted with N = 0 and Q = 0. This case should not be processed.OutputPrint a line with K integers per query in ascending order. They must represent the amount of pieces that can be used to make a spaceship with weight W.If there is no way to make a spaceship with weight W, output a line with the string “That's impossible!” (quotes to clarify)ExampleInput:5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0Output:1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!Explanation of the query W = 5A spaceship with weight = 5 kg can be formed with 2, 3 and 4 parts, for example:2 kg + 3 kg = 5 kg3 kg + 1 kg + 1 kg = 5 kg1 kg + 1 kg + 1 kg + 2 kg = 5 kg",
  "sample_input": "Input:5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0Output:1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JARJAR",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "5 4\r\n1 2 3 1 1\r\n3\r\n5\r\n1\r\n9\r\n0 0",
      "expected_output": "1 2 3\r\n2 3 4\r\n1\r\nThat's impossible!",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6\n10 1 7 10 3\n7\n7\n8\n10\n9 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n10 4 7 2 10\n8\n3\n10\n6\n7 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 3\n6 1 1 10 7\n9\n1\n1\n3\n2 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "36 39\n37 7 32 35 60\n36\n50\n35\n23\n15 43",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "4 30\n12 31 2 8 26\n46\n5\n32\n9\n24 5",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "21 58\n6 59 6 41 6\n17\n58\n34\n43\n35 42",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 25\n25 35 30 7 46\n19\n26\n50\n34\n59 22",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "40 43\n4 43 35 45 20\n21\n47\n17\n42\n60 26",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "27 24\n29 15 5 16 16\n9\n6\n17\n8\n8 21",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 22\n25 10 3 15 12\n26\n27\n29\n9\n3 25",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "14 11\n28 30 28 29 15\n11\n14\n5\n25\n4 9",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16 16\n9 9 14 12 23\n9\n10\n16\n19\n18 24",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "3 10\n24 3 13 25 13\n20\n5\n24\n10\n16 15",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 3\n7 18 16 27 30\n9\n10\n11\n29\n24 6",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "16 22\n28 21 6 5 21\n17\n23\n17\n5\n11 30",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "60 60\n60 60 60 60 60\n60\n60\n60\n60\n60 60",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "60 60\n60 60 60 60 60\n60\n60\n60\n60\n60 60",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "60 60\n60 59 2 60 2\n60\n1\n59\n2\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "60 2\n60 2 59 2 60\n1\n1\n1\n1\n60 59",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}