{
  "problem_code": "problems",
  "title": "Sorted bit squence",
  "tags": [],
  "text": "Let's consider the 32 bit representation of all integers i from m up to n inclusive (m ≤ i ≤ n; m × n ≥ 0, -231≤ m ≤ n ≤ 231-1). Note that a negative number is represented in 32 bit Additional Code. That is the 32 bit sequence, the binary sum of which and the 32 bit representation of the corresponding positive number is 232(1 0000 0000 0000 0000 0000 0000 0000 0000in binary).For\r\nexample, the 32 bit representation of 6 is0000 0000 0000 0000 0000 0000 0000 0110and the 32 bit representation of -6 is1111 1111 1111 1111 1111 1111 1111 1010because0000 0000 0000 0000 0000 0000 0000 0110 (6)\r\n  + 1111 1111 1111 1111 1111 1111 1111 1010 (-6)\r\n ------------------------------------------\r\n= 1 0000 0000 0000 0000 0000 0000 0000 0000 (232)Let's sort the 32 bit representations of these numbers in increasing order of the\r\nnumber of bit 1. If two 32 bit representations that have the same number of\r\nbit 1, they are sorted in lexicographical order.For example, with m = 0 and n = 5, the result of the sorting will be:No.Decimal numberBinary 32 bit representation100000 0000 0000 0000 0000 0000 0000 0000210000 0000 0000 0000 0000 0000 0000 0001320000 0000 0000 0000 0000 0000 0000 0010440000 0000 0000 0000 0000 0000 0000 0100530000 0000 0000 0000 0000 0000 0000 0011650000 0000 0000 0000 0000 0000 0000 0101with m = -5 and n = -2, the result of the sorting will be:No.Decimal numberBinary 32 bit representation1-41111 1111 1111 1111 1111 1111 1111 11002-51111 1111 1111 1111 1111 1111 1111 10113-31111 1111 1111 1111 1111 1111 1111 11014-21111 1111 1111 1111 1111 1111 1111 1110Given m, n and k (1 ≤ k ≤ min{n − m + 1, 2 147 473 547}), your task is to write a program to find a number corresponding to k-th representation in the sorted sequence.InputThe input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 1000. The following lines describe the data sets.For each data set, the only line contains 3 integers m, n and k separated by space.OutputFor each data set, write in one line the k-th number of the sorted numbers.ExampleInput:2\r\n0 5 3\r\n-5 -2 2Output:2\r\n-5",
  "sample_input": "0000 0000 0000 0000 0000 0000 0000 0110 (6)\r\n  + 1111 1111 1111 1111 1111 1111 1111 1010 (-6)\r\n ------------------------------------------\r\n= 1 0000 0000 0000 0000 0000 0000 0000 0000 (232)",
  "sample_output": "Input:2\r\n0 5 3\r\n-5 -2 2Output:2\r\n-5",
  "link": "https://www.spoj.com/problems/SORTBIT",
  "scraped_at": "2025-08-17 00:33:15",
  "test_cases": [
    {
      "input": "0000 0000 0000 0000 0000 0000 0000 0110 (6)\r\n  + 1111 1111 1111 1111 1111 1111 1111 1010 (-6)\r\n ------------------------------------------\r\n= 1 0000 0000 0000 0000 0000 0000 0000 0000 (232)",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\r\n0 5 3\r\n-5 -2 2",
      "expected_output": "2\r\n-5",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "6 6 1 10 2 1 5 10 5\n2 8 7 2 3 8 3 9 sgjt\n2 4 9 4 7 6 8 1 8\nfh 7 7 3 10 2 5 3 5 haqnq\nokecjulah\n3 5 2 6 6 10 10 5 3 2\ny 5 2 3 7 5 8 8 8 2 mn",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 10 9 2 5 8 2 9\n9 1 3 3 7 3 10 7 e\n5 2 2 5 2 3 2 6 3\niduc 9 8 9 1 3 8 2 7 ew\nzjgoqflqgjvmqxfusmo\n1 10 4 8 7 9 8 7 9 2\niz 9 4 8 3 4 2 7 6 6 bhyg",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 6 4 9 3 1 2 3\n5 5 4 7 10 6 1 3 qf\n1 2 10 5 8 4 1 4 9\nasqjm 7 7 4 2 9 10 2 5 d\ngkr\n6 4 9 10 10 4 10 2 6 3\nql 4 8 1 10 2 1 8 4 9 t",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "38 68 98 33 48 60 62 67 78\n58 21 48 17 78 92 99 86 qot\n14 79 93 18 94 70 3 51 22\nr 22 99 47 26 7 41 54 13 ufh\nzypprz\n19 49 37 63 85 96 33 36 68 34\nunqi 52 89 9 14 21 57 11 47 19 bchlh",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 45 65 40 72 66 26 23 76\n76 81 11 14 41 87 4 44 xdl\n10 95 3 42 75 84 85 50 66\njohd 32 42 56 13 99 44 43 100 zts\nztn\n20 8 13 79 34 62 32 67 25 27\nmhks 25 49 25 42 70 67 76 3 23 l",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 24 8 33 98 29 54 47 78\n33 14 11 14 38 79 38 12 dz\n89 9 88 69 74 4 34 7 31\nkjv 27 78 35 100 8 44 49 99 akrgd\ntnufwkfhhm\n94 63 39 91 78 85 46 22 19 40\npy 6 77 55 12 41 52 48 25 8 dsvow",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 51 95 2 97 33 73 79 23\n13 18 49 69 10 18 98 49 stfb\n71 25 81 52 56 68 44 95 64\nvaawh 41 48 75 60 79 38 84 14 ay\ncx\n81 52 42 9 11 55 38 11 87 32\nvhu 95 65 51 53 93 22 18 31 86 zmat",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "95 20 79 78 33 31 18 19 19\n64 34 87 81 35 76 10 25 kc\n59 4 25 6 73 36 81 22 38\nbwp 26 73 82 4 32 8 63 50 dimyr\nvx\n63 40 73 71 83 71 53 88 93 59\nx 32 67 76 10 70 38 94 9 63 ovwbp",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "45 61 30 106 111 51 64 93 13\n114 70 27 65 52 45 77 74 t\n79 80 104 113 52 84 26 67 58\nyqrq 88 100 55 105 15 12 73 94 lbw\nncdf\n114 51 35 24 30 35 67 115 14 31\ngoh 103 88 56 14 51 33 48 96 55 h",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "14 96 51 78 104 52 70 87 73\n99 63 25 109 75 31 52 107 nvyt\n80 56 90 52 68 17 38 34 68\nu 74 49 48 39 114 55 41 61 mx\naidh\n35 94 62 87 61 94 36 16 50 42\nxuug 43 66 17 55 95 35 38 55 95 lua",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "95 26 64 84 20 15 32 97 34\n51 35 23 16 109 68 74 108 qgjf\n61 33 40 92 19 47 54 20 59\nnpqp 48 79 63 78 34 106 108 30 tqto\nwmiaozeloasnga\n55 101 86 54 115 85 110 114 114 114\njjr 80 89 19 32 113 100 100 107 88 df",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "109 108 61 83 77 95 45 100 109\n89 32 15 88 12 99 79 43 os\n90 79 52 18 61 96 26 45 111\nim 105 113 28 19 17 14 36 55 xkg\nfpwpxyum\n68 80 109 26 67 84 21 102 104 45\nod 75 17 73 102 46 109 86 22 50 s",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 74 46 60 37 14 95 52 77\n114 59 50 112 48 98 84 30 yczvr\n92 85 97 30 53 96 75 25 15\ndrlr 69 83 18 30 54 47 41 41 fprx\nwrqucdnslhdduxpb\n104 83 97 48 15 80 69 83 89 85\nqw 14 32 98 88 79 81 74 36 108 oywf",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "98 104 102 33 93 17 69 35 19\n43 115 89 99 98 14 32 56 gog\n33 81 63 39 58 84 52 72 17\nktl 72 99 58 94 39 64 48 69 ypb\nqljpspogvkpsmtqgaxt\n89 92 103 54 12 26 50 53 46 24\ndvj 90 19 57 74 22 76 83 59 24 cbs",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "87 87 88 45 15 114 97 76 85\n93 92 84 105 38 22 87 36 fxqe\n39 63 80 79 113 36 26 33 25\nbe 83 113 32 44 104 109 108 70 tlcq\nymwpkwphe\n89 46 100 70 67 56 93 48 68 24\nytte 73 23 14 19 35 87 89 66 63 dek",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "231 231 231 231 231 231 231 231 231\n231 231 231 231 231 231 231 231 frlgq\n231 231 231 231 231 231 231 231 231\nw 231 231 231 231 231 231 231 231 rqzd\nybjsxdoofdsgjexnygt\n231 231 231 231 231 231 231 231 231 231\ng 231 231 231 231 231 231 231 231 231 yz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "231 231 231 231 231 231 231 231 231\n231 231 231 231 231 231 231 231 rmceg\n231 231 231 231 231 231 231 231 231\nfha 231 231 231 231 231 231 231 231 lsm\nxjsnhrfcmqfcwzzhlvqg\n231 231 231 231 231 231 231 231 231 231\nxcd 231 231 231 231 231 231 231 231 231 yxqfz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 2 230 230 231 2 231 231\n1 2 2 230 231 1 2 1 igeoi\n2 2 2 2 230 231 230 231 231\nexut 2 231 1 2 231 231 230 230 zxwl\nptdxvwht\n230 2 1 230 230 2 1 1 2 1\nrtacz 230 1 2 2 2 230 2 231 1 yucql",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:22"
}