{
  "problem_code": "problems",
  "title": "Probablistic OR",
  "tags": [],
  "text": "Everyone knows OR operation. Let us define new operation which we will call Probabilistic OR. We will denote this operation as #. For given real number p (0 ≤ p ≤ 1) and two bits a and b:if a = 1 and b = 1, then #(a, b) = 1;if a = 0 and b = 0, then #(a, b) = 0;else #(a, b) = 0 with probability p, #(a, b) = 1 with probability 1-p.Now for two given non-negative integers x and y we can define bitwise Probabilistic OR operation. The result of this operation is a number received by performing # operation for each pair of bits of x and y in same positions. For example, for p= 0.5, x = 2, and y = 4, we will get 0, 2, 4 or 6 each with probability 0.25.\r\nYou will be given a list of non-negative integers. You have to implement a program which will calculate the expected value of the result of performing bitwise probabilistic OR operation on all these numbers given some p. The numbers will be taken from left to right.InputInput file starts with real number p (0 ≤ p ≤ 1) with exactly two digits after the decimal point. Integer n follows (1 ≤ n ≤ 100). Next line contains n numbers ai in the order they are taking pert in the operation (0 ≤ ai ≤ 109).OutputOutput the expected value of performing Probabilistic OR operation on the given numbers for given p. Print the result with two digits after the decimal point.ExampleInput:0.25 4\r\n1 2 3 4Output:5.11",
  "sample_input": "Input:0.25 4\r\n1 2 3 4Output:5.11",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PROBOR",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "0.25 4\r\n1 2 3 4",
      "expected_output": "5.11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6\n3 3 6 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 7\n10 9 7 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 8\n6 6 7 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 58\n82 57 42 27",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "22 18\n11 18 63 42",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 16\n52 60 51 18",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 70\n87 28 48 15",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "71 52\n77 81 10 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 40\n50 27 5 27",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "39 27\n24 10 38 46",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19 6\n41 47 9 11",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "47 45\n37 41 38 32",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "32 24\n38 18 23 50",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "23 20\n30 41 7 26",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "40 14\n6 9 30 5",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n2 99 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n99 1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}