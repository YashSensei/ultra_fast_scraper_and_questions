{
  "problem_code": "problems",
  "title": "Dortmund Dilemma",
  "tags": [],
  "text": "Borussia Dortmund is a famous football (soccer) club from Germany.  Apart from their fast style of playing, the thing that makes them unique  is the hard to pronounce names of their players (Błaszczykowski,  Papastathopoulos, Großkreutz etc.).The team's coach is your  friend. He is in a dilemma as he can't decide how to make it easier to  call the players by name, during practice sessions. So, you advised him  to assign easy names to his players. A name is easy to him ifIt consists of only lowercase English letters.Its length is exactlyN.It containsexactlyKdifferent letters from the26letters of English alphabet.At least one of itsproperprefixes matches with itspropersuffix of same length.Given,NandKyou have to tell him the number of easy names he can choose from modulo(10^9+9).Note :A prefixPof a nameWis proper if,P≠W. Similarly, a suffixSof a nameWis proper if,S≠W.InputThe first line of the input will containT( the number of testcases ).Each of the nextTlines will contain two space separated integersNandK.OutputFor each testcase, output the number of ways the coach can assign names to his players modulo(10^9+9).Constraints1 ≤ T ≤ 1051 ≤ N ≤ 1051 ≤ K ≤ 26ExampleInput:81 12 14 22 25 13 26 21 3Output:0262600026650136500",
  "sample_input": "Input:81 12 14 22 25 13 26 21 3Output:0262600026650136500",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DORTMUND",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "81 12 14 22 25 13 26 21 3",
      "expected_output": "0262600026650136500",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 2 9 6 3 10 3 1 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 10 5 4 9 4 10 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 9 2 8 5 1 5 1 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "17 49 16 73 5 90 10 76 22",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "27 29 78 51 55 85 28 53 82",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 89 14 32 64 90 80 69 91",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "22 46 6 77 84 45 40 40 4",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 88 1 92 2 49 7 20 34",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "429 377 87 99 499 245 450 192 420",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "319 477 322 332 245 209 316 275 524",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "195 80 490 134 82 423 252 294 354",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "350 309 61 485 137 412 63 352 324",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "479 277 436 128 524 516 284 336 264",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "289 274 200 342 391 176 142 213 402",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "294 157 375 69 57 138 501 393 402",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1051 1051 1051 1051 1051 1051 1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1051 1051 1051 1051 1051 1051 1051 1051 1051",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1050 1 1 2 1 1050 1 1051",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1051 1 1050 1 2 1051 1050 1050 1051",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}