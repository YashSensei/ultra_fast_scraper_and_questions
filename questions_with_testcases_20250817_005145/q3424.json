{
  "problem_code": "problems",
  "title": "Enrich my purse",
  "tags": [],
  "text": "Jack plays this ball game for the first time in his club. Jack has a ball, which bounces with a width ofW. Coins are arranged on a straight line at regular intervals. If the ball strikes the i-th coin, Jack gainsmoney[i] (which could possibly be negative). Jack can take at mostBturns, to throw the ball. At each turn, jack can either throw the ball from left to right, or right to left, and choose which ball to start the knock out. If he chooses to knock out from ball i to the right, he will knock out i, i+W, i+2W ... Similarly if he chooses to knock out from right to left, starting from ball i he will knock out, i, i-W, i-2W ... Please note that once a ball is knocked out, it is removed and it's place contains a void. i.e., you cant gainmoney[i]for the sameitwice.Jack wants to maximise his money gained, by carefully choosing his turns. If there is more than one way to gain the same money, jack wishes to minimise the number of times he throws.Input FormatThe input file consists of multiple testcases.The first line of each testcase contains three integers,W B N(1 <= N <= 100; W,B > 0)The second line of each testcase contains N integers, denotingmoney[i]. (| money[i] | <= 106)Input terminates with a line containing three zeros which must not be processed.Output FormatFor each testcase print one line denoting the maximal money gained and the number of turns taken. Please see the sample output and stick to the output format.\"Case#id: Jack wins $X out of Y throws.\"NOTE:You must spell the same way the sample output says. Extra spaces and case insensitivity can cause wrong answer responses.Test data:100 test cases, Time limit: 10sSample Input:2 3 10\r\n-1 3 2 5 1 -2 0 5 1 -3\r\n2 3 14\r\n-1 3 2 5 -5 -5 1 -2 0 5 -5 -5 1 -3\r\n3 3 5\r\n-1 -2 -3 -4 -5\r\n1 2 6\r\n-1 -1 10 10 -1 -1\r\n0 0 0Sample Output:Case#1: Jack wins $15 out of 2 throws.\r\nCase#2: Jack wins $10 out of 3 throws.\r\nCase#3: Jack wins $0 out of 0 throws.\r\nCase#4: Jack wins $18 out of 1 throws.Output Explanation:We present one of the optimal solutions. We number balls from 1 to N.TestCase#1: [Jack takes only two throws, though he can take three]Throw#1: From ball#3 towards right, 2 + 1 + 0 + 1 = 4Throw#2: From ball#8 towards left, 5 + -2 + 5 + 3 = 11TestCase#2:Throw #1: From ball#3 towards left, 2 + -1 = 1Throw #2: From ball#4 towards left, 5 + 3 = 8Throw #3: From ball#13 towards right, 1 = 1TestCase#3:All numbers are negative. Jack takes no throws.",
  "sample_input": "2 3 10\r\n-1 3 2 5 1 -2 0 5 1 -3\r\n2 3 14\r\n-1 3 2 5 -5 -5 1 -2 0 5 -5 -5 1 -3\r\n3 3 5\r\n-1 -2 -3 -4 -5\r\n1 2 6\r\n-1 -1 10 10 -1 -1\r\n0 0 0",
  "sample_output": "Case#1: Jack wins $15 out of 2 throws.\r\nCase#2: Jack wins $10 out of 3 throws.\r\nCase#3: Jack wins $0 out of 0 throws.\r\nCase#4: Jack wins $18 out of 1 throws.",
  "link": "https://www.spoj.com/problems/EPURSE",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "2 3 10\r\n-1 3 2 5 1 -2 0 5 1 -3\r\n2 3 14\r\n-1 3 2 5 -5 -5 1 -2 0 5 -5 -5 1 -3\r\n3 3 5\r\n-1 -2 -3 -4 -5\r\n1 2 6\r\n-1 -1 10 10 -1 -1\r\n0 0 0",
      "expected_output": "Case#1: Jack wins $15 out of 2 throws.\r\nCase#2: Jack wins $10 out of 3 throws.\r\nCase#3: Jack wins $0 out of 0 throws.\r\nCase#4: Jack wins $18 out of 1 throws.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 7 6\n5 1 9 3 6 7 5 1 7 4\n10 9 10\n6 8 5 4 5 3 8 8 3 2 8 6 2 7\n5 3 8\n5 8 9 4 9\n5 3 7\n7 8 1 9 3 1\n1 9 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 3 6\n1 10 7 4 9 1 7 6 3 8\n2 10 3\n6 2 4 1 9 10 7 4 8 8 9 10 6 1\n9 5 9\n10 6 5 4 4\n10 1 7\n10 8 8 10 6 1\n5 5 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 3 9\n1 10 9 10 1 4 8 3 5 7\n7 5 7\n3 10 10 6 4 8 2 10 10 9 9 6 4 5\n5 3 8\n7 4 8 6 4\n9 10 10\n1 7 3 3 7 3\n1 5 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "40 21 81\n70 65 23 41 46 59 55 7 26 40\n2 29 40\n11 8 15 12 86 50 30 23 94 61 22 94 100 93\n27 22 37\n14 54 44 13 90\n56 9 43\n40 54 59 49 59 96\n82 42 24",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 48 16\n42 28 27 2 68 90 78 94 73 14\n47 45 98\n14 54 37 27 52 89 5 23 17 32 11 73 63 86\n55 9 37\n77 59 50 40 49\n31 64 29\n96 59 82 18 79 42\n47 9 38",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 18 54\n19 39 28 77 25 50 83 60 34 86\n26 68 20\n56 29 57 90 24 16 76 41 3 22 14 33 40 75\n81 100 72\n89 71 32 73 27\n12 74 68\n56 78 83 24 3 62\n25 59 47",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 44 29\n92 35 88 8 31 99 57 36 35 30\n91 74 89\n59 57 47 88 40 91 92 23 40 56 72 69 29 10\n45 31 63\n90 1 40 75 46\n88 83 58\n69 3 13 42 36 13\n98 20 28",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 13 33\n80 58 94 57 96 13 30 94 74 7\n82 98 71\n94 18 88 34 45 21 39 74 90 51 20 88 98 82\n70 13 6\n44 37 26 54 63\n42 52 16\n52 89 20 31 5 25\n42 18 71",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "114 229 141\n479 172 209 470 82 84 459 331 397 142\n192 477 459\n353 341 134 193 60 385 448 348 393 402 489 377 230 232\n392 218 350\n168 412 207 429 107\n417 265 374\n350 472 479 208 153 103\n201 57 395",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "79 409 255\n145 243 69 471 89 221 95 306 259 409\n198 253 333\n464 273 410 495 293 127 410 465 221 97 207 311 328 321\n230 421 225\n372 196 131 226 252\n285 476 416\n186 178 376 77 231 443\n119 57 166",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "138 171 148\n309 268 263 272 300 281 165 361 210 140\n136 308 245\n272 74 392 275 125 193 381 333 351 252 465 488 334 359\n90 94 447\n321 339 97 423 208\n275 208 109\n452 314 390 426 105 155\n209 457 101",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "355 480 58\n91 452 286 336 76 399 385 461 191 447\n233 454 238\n394 153 361 63 354 249 311 302 457 255 363 224 198 441\n98 149 163\n214 351 69 432 155\n168 62 359\n138 127 248 141 448 120\n142 404 265",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "271 97 437\n473 161 459 377 360 297 360 385 361 162\n237 414 118\n434 450 340 370 427 58 271 251 206 102 284 273 150 328\n197 362 325\n138 369 469 452 83\n157 256 482\n107 402 87 60 443 98\n408 52 145",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "206 475 148\n454 205 386 115 327 409 482 449 199 220\n491 162 251\n136 353 199 367 51 118 227 55 429 417 435 200 307 281\n160 473 452\n196 466 183 122 323\n67 138 105\n200 219 437 196 102 55\n111 355 254",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "481 216 252\n228 435 206 176 163 314 179 110 148 420\n75 481 300\n423 80 462 91 79 389 61 195 309 229 171 229 474 449\n218 109 439\n98 244 213 411 120\n107 338 215\n298 364 344 196 417 409\n356 100 473",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999 2\n1000 2 2 999 1 2 1000 1000 2 1\n2 999 2\n1 2 1 999 999 1 1000 2 999 1 999 2 999 2\n1 1000 1000\n999 1 1 1 2\n2 1000 1000\n1000 2 2 1 1000 2\n2 1000 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 999\n999 999 999 1 999 999 1000 1000 999 1\n2 2 999\n1 1 1000 999 999 1 2 1 2 2 1 1 2 1000\n999 2 1\n1 1000 999 1 1000\n1000 2 2\n2 2 1 1 1000 2\n999 1000 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:07"
}