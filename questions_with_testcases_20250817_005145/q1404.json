{
  "problem_code": "problems",
  "title": "Search of Concatenated Strings",
  "tags": [],
  "text": "EnglishVietnameseThe amount of information on the World Wide Web is growing quite rapidly.\nIn this information explosion age, we must survive by accessing only the \nWeb pages containing information relevant to our own needs. One of the key\ntechnologies for this purpose is keyword search. By using\nwell-known search \nengines, we can easily access those pages containing useful information about\nthe topic we want to know.There are many variations in keyword search problems. If a single string is \nsearched in a given text, the problem is quite easy. If the pattern to be \nsearched consists of multiple strings, or is given by some powerful notation \nsuch as regular expressions, the task requires elaborate\nalgorithms to accomplish eﬃciently.In our problem, a number of strings (element strings) are given, but they are not directly\nsearched for. Concatenations of all the element strings in any order are the \ntargets of the search here.For example, consider three element strings aa, b and ccc are given. In this case, \nthe following six concatenated strings are the targets of the search, i.e. \nthey should be searched in the text.aabccc\naacccb\nbaaccc\nbcccaa\ncccaab\ncccbaaThe text may contain several occurrences of these strings. You are requested \nto count the number of occurrences of these strings, or speaking more precisely, \nthe number of positions of occurrences in the text. Two or more concatenated \nstrings may be identical. In such cases, it is necessary to consider subtle \naspects of the above problem statement. For example, if two element strings \nare x and xx, the string xxx is an occurrence of both the concatenation \nof x and xx and that of xx and x. Since the number of positions of occurrences \nshould be counted, this case is counted as one, not two.Two occurrences may overlap. For example, the string xxxx has occurrences of \nthe concatenation xxx in two diﬀerent positions. This case is counted as two.InputThe input consists of a number of datasets, each giving a set of element strings\nand a text. The format of a dataset is as follows.n m\ne1\ne2\n.\n.\n.\nen\nt1\nt2\n.\n.\n.\ntmThe ﬁrst line contains two integers separated by a space. n is the number of \nelement strings. m is the number of lines used to represent the text. \nn is between 1 and 12, inclusive. Each of the following n lines gives an element\nstring. The length (number of characters) of an element string is between 1 and 20, \ninclusive. The last m lines as a whole give the text.Since it is not \ndesirable to have a very long line, the text is separated into m lines by newlines, \nbut these newlines should be ignored. They are not\nparts of the text.The length of each of these lines (not including the newline) is between 1 and\n100, inclusive.The length of the text is between 1 and 5000, inclusive.\nThe element strings \nand the text do not contain characters other than lowercase letters.The end of the input is indicated by a line containing two zeros separated by a space.SAMPLE INPUT\n3 1\naa\nb\nccc\naabccczbaacccbaazaabbcccaa\n3 1\na\nb\nc\ncbbcbcbabaacabccaccbaacbccbcaaaccccbcbcbbcacbaacccaccbbcaacbbabbabaccc\n3 4\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n0 0OutputFor each dataset in the input, one line containing the number of matched positions\nshould be output. An output line should not contain extra characters.SAMPLE OUTPUT\n5\n12\n197",
  "sample_input": "aabccc\naacccb\nbaaccc\nbcccaa\ncccaab\ncccbaa",
  "sample_output": "n m\ne1\ne2\n.\n.\n.\nen\nt1\nt2\n.\n.\n.\ntm",
  "link": "https://www.spoj.com/problems/MCONSTR",
  "scraped_at": "2025-08-17 00:33:32",
  "test_cases": [
    {
      "input": "aabccc\naacccb\nbaaccc\nbcccaa\ncccaab\ncccbaa",
      "expected_output": "n m\ne1\ne2\n.\n.\n.\nen\nt1\nt2\n.\n.\n.\ntm",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "enynafrk\ncknhbqizifbs\ng\nlgwgypkudui\nwmtynlochl\nhcxifg",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "uc\npztafl\nxpqyqwjym\nyvzms\nwdt\natewpggcztsq",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "yfceal\nbajiumymatxx\nd\ndwwsicgdj\nq\nfurmh",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "xj\nmn\nqjhb\nyj\nhhcfmek\ntqkmjof",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ee\noqdfpzab\nggcexdaj\nseasaqauuq\nfsotmrnrjlto\nu",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "trgmgryrrysg\ncfmrfjsybgy\neckxfy\nbz\njqcrvclcvr\nxbppcgaywvsk",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "oux\nzrgl\nnxcy\njtc\nruxarsacj\nnxpvgwfrn",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "qgzqbvj\nl\nkjdxdacre\numrndc\nnyliq\nvhjjmhz",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "ffnbyahmk\nwcro\natyjn\nhjhfd\nkjvlmi\nzrwyg",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "rss\naytateeghhyc\nqusj\nsj\norv\nmfb",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vn\nef\ntxium\nbn\nrwltlkhehd\nkfsyjznfl",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "bgq\ntajzdb\ncxsaytmis\ncgaaohdhy\nwpk\nvxyh",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "ggcfrczrwkpx\ni\npmi\noeogr\nlnycqzunqnq\ncmncutya",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "iwfiqyg\nqnxisonp\nmvopzpfanxyd\ns\nzuiz\nshg",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "gpmmwfeick\nwuhx\nspoxyavnzn\nsqiniyb\njsavt\niac",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "gzrrjb\nawdydbigyq\nvqqgt\nts\nmgjgqh\nzgo",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "yywddmq\naqqbcjp\nrod\nmje\nkuc\nvzumgxhuxk",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "uqnla\nmpnxomnj\nsynsr\ncideieyfhvk\nzxvamkpvdt\nn",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "iumpqhsvijim\nvxpvsksfhzmg\nqfmg\nrldewjehtnch\no\nrkabocrtc",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:03"
}