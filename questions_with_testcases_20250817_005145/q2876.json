{
  "problem_code": "problems",
  "title": "NEKAMELEONI",
  "tags": [],
  "text": "\"Hey! I have an awesome task with chameleons, 5thtask for Saturday’s competition.\"\"Go ahead...\"(...)“That’s too difficult, I have an easier one, they won’t even solve that one.”“You are given an array of N integers from the interval [1, K]. You need to process M queries. The first\r\ntype of query requires you to change a number in the array to a different value, and the second type of\r\nquery requires you to determine the length of the shortest contiguous subarray of the current array that\r\ncontains all numbers from 1 to K.”“Hm, I can do it in O(N6). What’s the limit for N?”InputThe first line of input contains the integers N, K and M (1 <= N, M <= 100 000, 1 <= K <= 50). The\r\nsecond line of input contains N integers separated by space, the integers from the array. After that,\r\nM queries follow, each in one of the following two forms:“1 p v” - change the value of the pthnumber into v (1 <= p <= N, 1 <= v <= K)“2” - what is the length of the shortest contiguous subarray of the array containing all the integers from 1 to KOutputThe output must consist of the answers to the queries of the second type, each in its own line.If the required subarray doesn’t exist, output −1.ExampleInput:4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2Output:3\r\n-1\r\n4",
  "sample_input": "Input:4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2Output:3\r\n-1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NEKAMELEONI",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "4 3 5\r\n2 3 1 2\r\n2\r\n1 3 3\r\n2\r\n1 1 1\r\n2",
      "expected_output": "3\r\n-1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 1 10\n9 9 10 1\n10\n3 10 7\n6\n4 6 5\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 9\n5 7 2 5\n7\n7 2 7\n9\n3 1 2\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 2\n1 4 2 3\n1\n3 10 1\n10\n4 6 3\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "36 51 61\n11 38 82 86\n98\n14 47 81\n69\n54 78 40\n74",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "41 48 34\n97 13 95 47\n23\n40 19 74\n48\n95 86 87\n65",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "66 53 38\n34 5 99 89\n74\n41 24 2\n4\n51 33 55\n32",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "30 52 55\n25 86 61 100\n96\n51 62 88\n45\n86 35 17\n17",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "11 6 50\n36 44 82 22\n85\n24 92 30\n63\n99 41 74\n50",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "128 267 316\n316 431 144 384\n325\n401 104 217\n168\n422 128 326\n60",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "367 387 265\n210 260 152 188\n410\n81 287 128\n381\n118 284 139\n394",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "330 431 103\n342 187 62 58\n244\n447 51 362\n54\n478 63 327\n187",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "483 289 199\n113 147 217 126\n406\n205 93 68\n427\n321 425 121\n456",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "390 335 495\n146 156 450 352\n314\n170 86 263\n238\n141 387 245\n293",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "459 323 368\n288 142 226 103\n338\n211 210 234\n441\n275 404 489\n205",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "243 478 81\n130 50 409 422\n494\n162 141 239\n98\n105 197 168\n475",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 2\n1000 1 2 999\n999\n999 1000 999\n1\n1000 999 1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 999\n2 1000 1 2\n2\n1 999 999\n2\n2 1000 1000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}