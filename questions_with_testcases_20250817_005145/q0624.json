{
  "problem_code": "problems",
  "title": "Hi6",
  "tags": [],
  "text": "\"I read somewhere that everybody on this planet is separated by only six other people. Six degrees of separation between us and everyone else on this planet. The President of the United States, a gondolier in Venice, just fill in the names. I find it A) extremely comforting that we're so close, and B) like Chinese water torture that we're so close because you have to find the right six people to make the right connection... I am bound to everyone on this planet by a trail of six people.\" - Ouisa Kitteridge, \"Six Degrees of Separation\"Is widely know that one is separated from everyone in the world in no more than 6 degrees of separation. A degree of separation is defined by the minimum numbers of connections you need to make to contact someone else. For instance, if you know personally another person, then you are separated by one degree. If you know somebody through some friend but not directly (a friend of a friend), then you are separated by two degrees, and so on.Nevertheless, young Kevin Smith is not convinced about this theory and wants to probe it false. To achieve this, he has hacked the Hi6! social network and requested you to help him knock down the theory of six degrees of separation.InputThe first line contains an integer T, which specifies the number of test cases. Then, T test case descriptions will follow. Each test case will start with a line with one positive integer, N meaning the number of connections. The next N lines will contain the following pattern:<name_1> <name_2>meaning that person \"<name_1>\" is connected with the person \"<name_2>\" by making D connections and vice versa. Note that both persons can know each other by a lower degree of separation using other connections.OutputFor each input case you must print the string \"Case #i: \", where i is the test case number, starting from 1, following by the maximum degree of separation between the specified people. If there is someone that cannot connect to another person, print \"INFINITE\" instead.ConstraintsAll names will be non-empty strings composed only by lowercase characters.All names will have between 1 and 10 characters, inclusive.\"<name_1>\" will be different than \"<name_2>\" for all connections.There will be no pair of connections between the same pair of persons.D will be an integer between 1 and 1000, inclusive, for all connections.T will be between 1 and 100, inclusive.N will be between 1 and 10^5, inclusive.ExampleInput:32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1Output:Case #1: INFINITECase #2: 4Case #3: 3",
  "sample_input": "Input:32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1Output:Case #1: INFINITECase #2: 4Case #3: 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HISIX",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "32john judy 1mary peter 13john judy 7john peter 2judy peter 27john judy 3katie peter 4john peter 2judy mary 1peter mary 2john katie 1katie mary 1",
      "expected_output": "Case #1: INFINITECase #2: 4Case #3: 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 9 2 5 5 6 10 8 5 5 5 2 3\ned l xyux zmcvd za oadh bwrjm wr jmg aya u tfrx pxrvx xj ory ye nlf yt dvtls um vr ebh y lwz 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 6 9 10 10 7 7 6 2 1 3 10\nhic jkwwj sfwu itln tjf bxu eozdl zfjf cu pe pjfkq kkv rvpefu pcncf pkid dj ylk e ew nxabg bkjk cjpnx haj klicu 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4 1 7 3 7 4 7 2 3 10 5 8\nxecy qbju yq nnj jfhgg ern szrx s z qgvh fnul mco cddare zbyn gz v x wybgl ohzlx aqra lrtpa hia td tta 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "74 47 2 33 16 50 55 50 27 27 23 47 46\nxc nokdw tk h fnxymd pmbbv j yy q vehmq injwh qrj qg h eg vz w ua hr erwa dpcg gexk wsmf hd 24",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "89 78 20 18 49 53 5 20 83 4 57 34 57\nj gepsk ro xg dbjdmk fz sxhtf fpa jasq rlgzg esi vz twzpm xz tqgc cddcn l k wcijf rof v w zltjkr ytsa 19",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "99 14 62 84 99 48 61 87 89 2 54 68 46\nsl z dqyr nhg y xjyyj qwa ac jow fcx itbqsi qsd qn hxia s a suomv ubiv f ol tfr xc wuurly i 94",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 59 21 29 80 66 49 82 65 13 80 20 80\njgibx ukduj dyx gv mxuf bw di x nqey xuon gdi fzt bfpob ub vnld t hzvfh gctrr pj weqlh pmp zaf bsotw on 55",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "7 54 20 49 11 18 73 64 94 1 26 35 21\ntz inqkx agsr k kshwr gzspq axuy ap guxw hnos u z djf lhd o h tdhv yfokf bs iigle jbns auw dltb bun 49",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "205 250 123 117 234 71 175 54 182 180 127 173 477\nsbihiu juxs el somk mug mtzf sisly g usmwm sxewq iujnmr l tu ugwvn yzqbt yoer yyykw zc oeqj btbsh zhc qwx tg sbhb 477",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "239 339 466 196 162 291 400 487 172 177 301 198 472\ngp pc zfcyl b cyghq lauv ywni dh dsiq kgpbl lshmt dt ueov b pb e h hafs znz ozrbn csf y bvw eb 95",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "357 485 456 133 141 326 241 435 315 305 244 188 162\nlgyb n fbmr y ypnjno rjfn tdfya rweur zf n z woha n a xsyrt hbd qxn tjix bdbb cw fldcd vudpz rm lcidy 341",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "192 289 193 497 370 167 465 381 212 320 296 212 466\nzx amtk ho g mmgdhw ww mftmf wwqzg vmvo om xx ruw i uluqw hn tw tyoam erhgm fxvo kgv buzof nw aad dh 291",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "246 440 450 199 323 191 480 138 68 118 208 153 485\nim pmtm carn tf qqe yabf w cybd ke yvyq d lwwtq zqo tc h acv av o gjfukr zwh zvzlv qwwk qxp tcn 327",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "220 197 443 251 485 447 390 312 278 297 123 186 114\nnzfn hqob if ddgy fm bxwn dqlm f gowr dqh y qtlm ihawn w alpw pzvf vezs tog ajxao qls wuam rbjz vt nq 289",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "492 113 302 399 439 222 178 66 174 82 111 325 95\nc lcn y y chx jpnw wta xfo soe jdjp mkjqx ak vrbqc ok wk oecjp he wm afyufg cgxwv kkqz dcq ref thac 72",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nv asaxa gea avw juz pzehz f givfk lrbp syr bm roq qdijfb hejy l ofq aumu hol p txfw rshp pdns k jaz 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\no jxvth jtjef dxk grl lus gfd wwdse r aayhf xh fi wwr faezd raww t zkttv wydsj luowc divr luodp d eb as 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 999 2 2 2 2 2 1 1 1000 2 1000\nhn w zly cxcn zvv k iygp vmtb v jbzto zxkgs aakxn bk r fwtu ba rpqsi ucw ul bkmy sa wldw rodsq ilks 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1 2 2 1 1000 2 999 2 1000 2 2\nv zr pyj huyd ldcbe cvx i dki tsyvz ljt kbbpyi xps lgq i dm ocqzm umsp obxkl bul h xwv rue p g 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:39"
}