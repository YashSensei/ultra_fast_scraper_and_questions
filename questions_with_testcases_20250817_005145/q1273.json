{
  "problem_code": "problems",
  "title": "Electric Needs",
  "tags": [],
  "text": "You are going to construct a new factory in your city. Since you have major electric needs, having the factory placed close to a power plant is important. You want to build a prioritized list of possible locations.The area in which the factory needs to be located can be represented as a rectangular grid of N rows and M columns of cells. Some of those cells contain a power plant. The new factory occupies exactly one cell, and can be placed in any empty cell (i.e., any cell that does not contain a power plant).Numbering rows from 1 to N and columns from 1 to M, the location of a cell can be described by two integers. Cell (i, j) is the cell in row i and column j. The distance between cell (i0, j0) and cell (i1, j1) is max(|i0 - i1|, |j0 - j1|) where |x| represents the absolute value of x. The electric priority of a location is its minimum distance to a power plant.With this in mind, you will number all possible locations with consecutive integers starting from  1. You will do it in ascending order of electric priority. Among locations with the same electric priority, you will number them in ascending order of their row numbers. Among locations with the same electric priority and row number, you will list them in ascending order of column numbers.In the following picture you can see a 4 × 7 grid. Black cells are the cells in which there is a power plant. Dark gray cells have an electric priority of 1, light gray cells an electric priority of 2 and white cells an electric priority of 3. The number inside each cell is the number assigned by you to the location.You will receive several queries about the prioritized list built. In each query you will be given a number representing a position in the prioritized list and you have to calculate which location was assigned the given position.InputEach test case is given using several lines. The ﬁrst line contains three integers N, M and P, representing the number of rows and columns of the grid (1 ≤ N, M ≤ 10^9) and the number of existing power plants (1 ≤ P ≤ 20). Each of the next P lines contains two integers R and C representing the row and column numbers of the location of a power plant (1 ≤ R ≤ N and 1 ≤ C ≤ M). Within each test case, all power plant locations are diﬀerent. The next line contains a single integer Q representing the number of queries (1 ≤ Q ≤ 50). Then follows a line with Q integers p1, ..., pQ representing positions in the prioritized list (1 ≤ pi ≤ N×M−P).The last test case is followed by a line containing three zeros.OutputFor each test case output Q + 1 lines. Line i of the first Q lines must contain two integers representing the row and column numbers of the location that was assigned number pi. The last line for each test case must contain a single character ‘-’ (hyphen).SampleInput4 7 2\r\n2 5\r\n4 4\r\n6\r\n1 6 11 16 21 26\r\n1000000000 1000000000 1\r\n1 1\r\n1\r\n999999999999999999\r\n0 0 0Output1 4\r\n3 3\r\n4 5\r\n2 7\r\n4 7\r\n4 1\r\n-\r\n1000000000 1000000000\r\n-",
  "sample_input": "Input4 7 2\r\n2 5\r\n4 4\r\n6\r\n1 6 11 16 21 26\r\n1000000000 1000000000 1\r\n1 1\r\n1\r\n999999999999999999\r\n0 0 0Output1 4\r\n3 3\r\n4 5\r\n2 7\r\n4 7\r\n4 1\r\n-\r\n1000000000 1000000000\r\n-",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MELAR10",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "Input4 7 2\r\n2 5\r\n4 4\r\n6\r\n1 6 11 16 21 26\r\n1000000000 1000000000 1\r\n1 1\r\n1\r\n999999999999999999\r\n0 0 0Output1 4\r\n3 3\r\n4 5\r\n2 7\r\n4 7\r\n4 1\r\n-\r\n1000000000 1000000000\r\n-",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 6 7\nfbbqf 3 4\n1 5\n6 6\n6\n3 3 3 8 3 2\n6 3 6\n7 5\n9\n4\n3 1 2 1 4\n8 4 mm 3\n5 5\n7 2\n5 10\n1 3\n9 8\nm\n8 10\nl",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 3\nvj 7 7\n5 9\n2 5\n8\n3 1 6 6 6 5\n9 7 3\n4 6\n6\n2\n3 6 1 8 4\n9 6 qmke 5\n4 3\n6 9\n2 8\n7 9\n10 7\ny\n7 4\ngj",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 1 10\nh 6 6\n9 10\n2 9\n4\n1 3 2 9 2 1\n5 7 8\n10 1\n3\n4\n5 8 7 2 1\n1 5 dlogbovo 7\n5 6\n4 4\n3 7\n1 5\n10 3\nuw\n7 6\nb",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 19 7\na 93 26\n69 70\n42 93\n32\n74 54 35 33 83 71\n62 50 97\n95 25\n8\n22\n77 77 100 32 30\n86 58 dffh 52\n55 51\n100 21\n34 15\n51 62\n54 54\nms\n74 1\nqw",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "70 88 22\noyjot 82 38\n6 45\n75 7\n23\n99 67 30 61 15 80\n83 25 45\n4 13\n32\n37\n91 25 65 17 38\n10 40 pfab 19\n26 28\n53 38\n70 31\n87 1\n84 94\nn\n2 10\nw",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 30 19\ndl 69 28\n92 70\n32 32\n7\n40 73 82 70 84 75\n18 87 49\n66 85\n71\n76\n29 74 68 88 54\n18 78 u 55\n47 51\n36 3\n12 46\n6 18\n18 96\nt\n33 57\ni",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 7 24\nobvzli 78 37\n61 95\n87 85\n26\n97 30 94 30 41 35\n11 76 38\n37 2\n27\n11\n47 17 84 55 69\n82 68 hywkc 73\n99 37\n28 45\n45 49\n29 26\n75 30\nxm\n51 77\nut",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 92 87\nifsole 99 66\n26 70\n39 47\n33\n88 24 75 1 46 34\n6 52 14\n90 51\n100\n36\n80 18 95 27 79\n69 74 l 32\n24 24\n76 15\n92 33\n14 14\n16 24\ngr\n55 64\npr",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "247 182 157\nbmocnf 469 377\n199 347\n183 422\n473\n197 364 194 355 115 57\n159 192 260\n487 251\n339\n305\n270 201 312 218 158\n116 341 obkksk 50\n402 190\n90 261\n305 243\n366 204\n121 425\nc\n233 318\nrr",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "436 425 90\nvr 403 437\n146 317\n346 240\n310\n344 300 143 379 83 277\n62 70 86\n436 243\n485\n113\n358 412 106 234 387\n379 441 fvhe 120\n357 267\n450 344\n271 297\n244 109\n287 196\nd\n407 336\nl",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "494 244 256\nhtdnaq 379 497\n193 181\n137 184\n346\n479 408 63 316 161 420\n436 398 345\n143 408\n434\n78\n86 386 362 404 307\n79 295 wwol 119\n109 302\n114 293\n189 236\n133 125\n328 419\nra\n377 186\nq",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "268 312 247\nxhibv 222 337\n477 490\n382 375\n292\n206 214 487 371 159 217\n206 479 158\n356 176\n466\n346\n241 423 367 113 321\n352 106 nqfqpph 390\n481 148\n72 276\n445 491\n123 83\n386 474\nzk\n376 162\ncv",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "428 221 384\nvsim 388 109\n101 487\n294 163\n97\n250 328 387 265 65 273\n122 382 416\n257 428\n431\n467\n132 478 386 183 477\n494 352 olklpqp 382\n208 397\n439 411\n371 406\n104 166\n88 363\nsw\n168 313\nn",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "228 168 338\ncgp 321 113\n223 430\n397 399\n490\n485 88 471 169 81 133\n185 77 363\n479 309\n364\n304\n457 266 52 495 383\n159 56 mlrnksb 191\n177 242\n322 468\n140 143\n292 162\n74 266\nql\n359 169\ng",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "320 80 203\nid 109 176\n54 128\n74 201\n500\n352 259 398 465 319 187\n496 169 262\n439 91\n347\n341\n205 453 64 477 120\n411 379 qhoafg 50\n441 206\n142 115\n327 329\n170 98\n200 399\nsc\n293 451\nvv",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\naq 1000 1000\n1000 1000\n1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 hrie 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\ndv\n1000 1000\nc",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nocbdl 1000 1000\n1000 1000\n1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000\n1000\n1000 1000 1000 1000 1000\n1000 1000 aq 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\ntk\n1000 1000\nl",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000\nlqeu 2 2\n999 999\n2 999\n2\n999 2 2 999 2 1000\n999 2 1000\n999 1000\n1000\n1\n2 2 2 1 2\n1 1000 kms 2\n1 999\n999 1000\n1000 1000\n999 1000\n1000 2\nqo\n2 2\nuc",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 1000\nfq 999 999\n999 2\n1 1000\n1\n2 999 999 2 999 1\n1 999 1\n2 1000\n1000\n999\n1 1000 1000 1000 999\n999 2 pp 1000\n999 2\n1 999\n1000 999\n2 1000\n1 1000\na\n1 999\nq",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:58"
}