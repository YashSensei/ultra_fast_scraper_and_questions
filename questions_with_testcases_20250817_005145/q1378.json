{
  "problem_code": "problems",
  "title": "Convex Polygons",
  "tags": [],
  "text": "EnglishVietnameseYou are given n points in the 2-D cartesian coordinate system. You are to determine the number of convex polygons with 3 or more vertices which can be formed by choosing a subset of the given points. To make matters simple, the input obeys the following conditions:No 3 points of the input are collinear.No 2 points will have the same coordinates.Since the result can be quite large, you are required to output ( result % 1234567 ) instead.InputFirst line contains an integer T, the number of test cases. In each test case, first line contains n, the number of points in the corresponding test case, next n lines contain 2 space separated integers denoting the coordinate of ith point. Absolute value of the coordinates do not exceed 10000.OutputT lines each corresponding to the answer of corresponding test case.ExampleInput:2\r\n4\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n6\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n1 -1\r\n1 3Output:5\r\n42ConstraintsInput Set 1 : numberOfTestCases ≤ 100, 3 ≤ n ≤ 10\r\nInput Set 2 : numberOfTestCases ≤ 50, 3 ≤ n ≤ 100",
  "sample_input": "Input:2\r\n4\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n6\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n1 -1\r\n1 3Output:5\r\n42",
  "sample_output": "Input Set 1 : numberOfTestCases ≤ 100, 3 ≤ n ≤ 10\r\nInput Set 2 : numberOfTestCases ≤ 50, 3 ≤ n ≤ 100",
  "link": "https://www.spoj.com/problems/CVXPOLY",
  "scraped_at": "2025-08-17 00:33:41",
  "test_cases": [
    {
      "input": "2\r\n4\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n6\r\n0 0\r\n2 0\r\n2 2\r\n0 2\r\n1 -1\r\n1 3",
      "expected_output": "5\r\n42",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n1\n9\n8\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n9\n7\n1\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n4\n3\n2\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n40691948\n61525063\n1485252\n12456661\n99536577\n96956935\n47064433\n2160956\n76251507\n84851498\n97009821\n91135765\n55864050\n53991941",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n89145621\n58847413\n31214271\n67656940\n34242191\n74045786\n17763151\n31215656",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n81159953\n99211761\n67763657\n64389727\n34320436\n87261472\n53646563\n48648444\n92302086\n95841795\n30401651\n79443678\n7802914\n3519772\n31667857",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n16745914\n83040203\n69284453\n65776543\n83365216\n95925830\n60313955\n72269926\n36492786\n40287950\n48110435\n44366552\n18998306\n72968002\n70509514\n44633\n52144211\n84931865\n50966793",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n867447\n45343850\n92592623\n48949225\n51384258\n15813812\n93223131\n21216377\n92823014\n6519911\n33173038\n70514794\n82385785\n84493635\n31816143\n23282356",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "42\n32239\n49424\n93863\n9756\n18814\n33078\n74800\n64936\n66893\n23572\n24752\n33444\n21211\n3656\n86451\n53783\n74306\n55272\n748\n52875\n98710\n26135\n2194\n82693\n21969\n63458\n7922\n87115\n25197\n60343\n88961\n25890\n2187\n193\n51717\n80437\n55720\n49471\n7465\n1352\n57969\n76303",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n5621\n87664\n79855\n74518\n40632\n39130\n3535\n9656\n76521\n41515\n67916\n7511\n92666\n13339\n16002\n8130\n22145\n94264\n7327\n352\n82828\n60979\n77674\n27307\n80999\n65526\n54774\n57566\n53784\n88399\n96783\n8051\n81723\n99190\n8807\n62546\n47603\n74806\n31455\n3975\n64027\n43086\n47530\n36002\n39302\n9456\n26835\n81789\n54886\n71596\n38383\n77268\n77085\n25354\n77317\n68729\n28560\n88528\n79802\n33726\n72308\n25891\n74241\n75692\n54688\n8507\n15809\n86656\n51059\n28885\n31838\n93300\n72367\n17180\n3971\n46113\n17841\n86061\n70054\n75006\n81348\n73967\n40477\n5119\n49173\n3294\n95654\n11944\n7024\n46880",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "92\n9844\n88480\n12450\n51013\n88950\n7557\n26779\n49711\n30674\n82978\n21811\n21057\n55959\n39775\n92372\n81091\n13404\n322\n3002\n40759\n34455\n78912\n44835\n89568\n15103\n28317\n82277\n6657\n61809\n45284\n56310\n46788\n71942\n35244\n39418\n4375\n24192\n43391\n7565\n43039\n94019\n2576\n13367\n54013\n53410\n1269\n71671\n68890\n59384\n29945\n8626\n45867\n96302\n25439\n68524\n53558\n46988\n41001\n73347\n79223\n28322\n15715\n27103\n4830\n28046\n31905\n78818\n88515\n97455\n31736\n8678\n54759\n74667\n36604\n97850\n74157\n91061\n21289\n73974\n22294\n84083\n80622\n15789\n72360\n32064\n72735\n10868\n34522\n11527\n49924\n23279\n476",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "57\n41507\n19139\n98332\n39714\n87766\n47268\n24642\n51911\n77559\n68465\n85235\n73019\n37478\n25255\n18988\n3143\n78432\n22891\n27535\n83700\n64015\n67241\n21216\n84255\n98\n32542\n93389\n92802\n34139\n29299\n83514\n12949\n57237\n60337\n51764\n95695\n17965\n14337\n66537\n81712\n77866\n51655\n84784\n50020\n44984\n37778\n18872\n54795\n36855\n95734\n56842\n91369\n48220\n11057\n45700\n67208\n80067",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n65290\n7405\n25901\n56761\n32791\n31805\n77816\n74603\n6855\n58213\n51814\n33746\n40329\n47772\n17955\n90616\n36807\n56172\n22897\n14004\n70015\n55248\n35515\n63994\n93583\n96027\n59300\n85387\n30523\n50887\n12137\n17590\n36452\n57776\n15113\n29071\n14994\n23187\n19513\n22916\n11883\n27273\n89757\n68523\n13133\n27140\n47140\n36705\n11788\n99163\n63731\n30875\n82535\n36754\n73213\n95461\n94613\n20806\n32615\n99863\n89391\n75878\n36720\n51170\n12134\n98993\n72259\n78439\n67131\n19610\n72237\n32985\n77244\n55717\n13215\n97233\n12898\n3126\n59594\n58430\n81980\n25936\n81780\n50274\n84309\n40702\n15649\n71951\n45601\n89310\n56666\n73860\n77710\n92006",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "88\n62829\n99407\n93382\n83312\n83474\n659\n91975\n56747\n24055\n44168\n36205\n24038\n77213\n35309\n87996\n43654\n95268\n5137\n78199\n86316\n43894\n42263\n3863\n41542\n65213\n71130\n3629\n7829\n17706\n30536\n24235\n27747\n16712\n82744\n86343\n61919\n23126\n23528\n4952\n28629\n13388\n47071\n47473\n13504\n82641\n265\n96209\n69277\n18148\n60365\n57747\n57862\n18611\n60556\n57758\n51607\n49364\n67958\n57720\n75317\n33088\n47707\n17699\n9433\n7806\n51711\n34653\n4574\n96112\n46441\n7846\n72331\n69496\n44809\n87892\n6826\n36759\n76508\n32657\n72218\n80583\n9870\n73877\n25147\n22325\n40915\n21878\n4711",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "21\n96153\n78678\n48197\n1886\n10447\n80644\n32907\n4034\n15695\n58352\n78548\n73735\n20416\n65799\n17462\n70481\n8122\n91241\n58735\n81064\n34220",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n64149739\n10099809\n98994375\n57133065\n35847793\n49004188\n81803395\n26187662\n73281257\n98671446\n53529429\n14290675\n55911103\n47648429\n94419736\n36659643\n51120160\n99419358\n85754144\n47511379\n87222734\n69913300\n53612866\n20232853\n59755427\n59041862\n9786316\n10736780\n51046615\n16419354\n2239147\n66012290\n94088422\n3111260\n95021415\n76621933\n7520344\n15221231\n20904137\n97212388\n41755538\n76873309\n49038756\n49283544\n41598969\n8520030\n59666484\n39822000\n91603131\n62312375\n93692964\n47260085\n16251345\n56119652\n12223256\n8633738\n14101859\n86426435\n93033670\n34575772\n64832656\n7685478\n11818600\n28538072\n81644195\n23927990\n22971409\n53429887\n24814754\n33820242\n66458541\n69249994\n63472407\n93256012\n65508019\n28530159\n22816905\n98464312\n24830936\n98950710\n94649723\n45124931\n59444418\n42025944\n43435949\n86887187\n24257526\n68576751\n61861397\n98532239\n52480174\n24441268\n3469120\n43088702\n93989360\n58721572\n45298087\n34588940\n56516038\n84771312",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n93202751\n28738909\n2555850\n62923919\n72027132\n65737081\n99188256\n98472585\n99710502\n57679520\n10029259\n16655902\n2778031\n57993328\n93483769\n39940556\n2845123\n11635639\n29446705\n92960113\n51234846\n75551339\n21362470\n35892823\n99439215\n7253722\n96925343\n53301660\n12069721\n34900755\n9766029\n99852171\n33442817\n78061447\n36999389\n88806113\n97703799\n79933343\n37351794\n9038584\n7527141\n95052679\n56136891\n66804917\n82028741\n64892434\n71813184\n21071105\n47351451\n16344817\n81438224\n35942653\n59849223\n70801717\n6457350\n47084655\n89907245\n59618853\n8629457\n81960137\n76989581\n89016875\n93132521\n41478467\n77566795\n33370383\n85249244\n75053174\n88531672\n9288897\n83643472\n81029975\n93160154\n75954464\n81091900\n18654671\n17689693\n72854032\n66233660\n16843902\n60909439\n36870277\n55687529\n38187116\n67713059\n34079613\n96513492\n20000496\n41199946\n55974158\n50400658\n60763519\n36457395\n79169192\n8983218\n63524956\n66215531\n73641069\n9521527\n81164981",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "2\n45781986\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "2\n100000000\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}