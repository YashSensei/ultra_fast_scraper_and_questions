{
  "problem_code": "problems",
  "title": "Good Celebration",
  "tags": [],
  "text": "The ACM-ICPC World Finals are over! Which team came out on top? Why, only our favourite team - everyone's favourite team - the most deserving, lovable, courteous, powerful, flawless, successful team that has ever existed. Who else?It's time to celebrate, and what better way is there to celebrate than by eating cake? The contest organizers have bought $N$ ($1 \\leq N \\leq 200$) cakes (conveniently numbered $1..N$) - however, ever generous, The Team will only eat cake 1, leaving the rest for the other, inferior teams. Theywillneed their cake to be as tasty as possible, though. To help with this, $M$ ($0 \\leq M \\leq 200$) globs of icing are available, which will be distributed among the cakes. Icing is always used in whole globs.The cakes are arranged in a somewhat strange way - piled on top of one another. Cake 1 is directly on top of a table, while every other cake $i$ (for $i=2..N$) is directly on top of cake $c_i$. $c_1$ is considered to have a value of 0. Note that there may be multiple cakes on top of a single cake, and that the entire structure obeys the laws of physics (no cake is on top of itself, and no cakes are floating).Now, the tastiness of any cake $i$ is determined by the formula $b_i + m_i(x_i + y_i)$. $b_i$ ($0 \\leq b_i \\leq 100$) and $m_i$ ($0 \\leq m_i \\leq 100$) are simply properties of cake $i$, which depend on its size, shape, weight, temperature, fluffiness, and so on. $x_i$ is the number of globs of icing that are chosen to be applied to cake $i$. If there are no cakes on top of cake $i$, $y_i=0$ - otherwise, $y_i$ is the minimal tastiness of any cake directly on top of cake $i$. No cake will ever be capable of achieving a tastiness value larger than $2^{60}$, no matter how the icing is distributed.The members of The Team have already, of course, determined how the available icing could be optimally applied to the mountain of cakes to maximize the tastiness of their cake (cake 1). However, the contest organizers are the ones who will actually be distributing the icing, and they had better hope they get it right! Can you help them determine how tasty cake 1 should be? You don't want to know what The Team will do if their celebration isn't perfect...InputFirst line: 2 integers, $N$ and $M$Next $N$ lines: 3 integers, $c_i$, $b_i$, and $m_i$, for $i=1..N$Output1 integer, the maximal tastiness of cake 1, after all of the icing has been usedExampleInput:3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6Output:12Explanation of Sample:The optimal icing distribution is 1 glob each on cakes 2 and 3. This gives cake 2 a tastiness of $3+4(1+0)=7$, and cake 3 a tastiness of $2+6(1+0)=8$. Since both of these cakes are on top of cake 1, it then has a tastiness of $5+1(0+min\\{7,8\\})=12$. No other icing distribution yields a higher tastiness for cake 1.",
  "sample_input": "Input:3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6Output:12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOODH",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "3 2\r\n0 5 1\r\n1 3 4\r\n1 2 6",
      "expected_output": "12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1\n7 7 2\n5 7 7\n4 2 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8\n6 5 8\n6 5 4\n2 2 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\n7 9 8\n1 8 2\n7 9 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "33 93\n98 18 70\n52 10 19\n78 82 49",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "55 73\n49 64 15\n25 49 94\n58 90 30",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 19\n86 2 43\n77 82 67\n7 51 100",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "8 4\n13 32 93\n15 99 53\n32 10 11",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 43\n17 87 50\n57 70 37\n78 18 61",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "435 122\n322 403 259\n491 406 274\n353 101 307",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "437 290\n379 149 415\n272 189 494\n268 196 62",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "98 298\n429 353 373\n64 474 179\n237 116 165",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "342 179\n409 332 363\n354 460 114\n425 475 473",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "233 242\n59 442 228\n193 94 331\n67 283 267",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "437 91\n341 116 433\n225 157 87\n454 263 220",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "71 468\n258 104 471\n267 482 55\n171 311 466",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1\n999 1 1000\n999 1 2\n1000 999 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n1000 999 1\n999 2 1000\n999 1 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:23"
}