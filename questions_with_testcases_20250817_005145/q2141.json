{
  "problem_code": "problems",
  "title": "Meteors",
  "tags": [],
  "text": "Byteotian Interstellar Union (BIU) has recently discovered a new planet in a nearby galaxy. The planet is unsuitable for colonisation due to strange meteor showers, which on the other hand make it an exceptionally interesting object of study.The member states of BIU have already placed space stations close to the planet's orbit. The stations' goal is to take samples of the rocks flying by. The BIU Commission has partitioned the orbit into $m$ sectors, numbered from $1$ to $m$, where the sectors $1$ and $m$ are adjacent. In each sector there is a single space station, belonging to one of the $n$ member states.Each state has declared a number of meteor samples it intends to gather before the mission ends. Your task is to determine, for each state, when it can stop taking samples, based on the meteor shower predictions for the years to come.InputThe first line of the standard input gives two integers, $n$ and $m$ ($1 \\le n,m \\le 300\\,000$), separated by a single space, that denote, respectively, the number of BIU member states and the number of sectors the orbit has been partitioned into.In the second line there are $m$ integers $o_i$ ($1 \\le o_i \\le n$), separated by single spaces, that denote the states owning stations in successive sectors.In the third line there are $n$ integers $p_i$ ($1 \\le p_i \\le 10^9$), separated by single spaces, that denote the numbers of meteor samples that the successive states intend to gather.In the fourth line there is a single integer $k$ ($1 \\le k \\le 300\\,000$) that denotes the number of meteor showers predictions. The following $k$ lines specify the (predicted) meteor showers chronologically. The $i$-th of these lines holds three integers $l_i, r_i, a_i$ (separated by single spaces), which denote that a meteor shower is expected in sectors $l_i,l_{i+1},\\ldots,r_i$  (if $l_i \\le r_i$) or sectors $l_i,l_{i+1},\\ldots,m,1,\\ldots,r_i$ (if $l_i > r_i$), which should provide each station in those sectors with $a_i$ meteor samples ($1 \\le a_i \\le 10^9$).OutputYour program should print $n$ lines on the standard output. The $i$-th of them should contain a single integer $w_i$, denoting the number of shower after which the stations belonging to the $i$-th state are expected to gather at least $p_i$ samples, or the word  NIE (Polish forno) if that state is not expected to gather enough samples in the foreseeable future.ExampleFor the input data:3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2the correct result is:3\r\nNIE\r\n1",
  "sample_input": "3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2",
  "sample_output": "3\r\nNIE\r\n1",
  "link": "https://www.spoj.com/problems/METEORS",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "3 5\r\n1 3 2 1 3\r\n10 5 7\r\n3\r\n4 2 4\r\n1 3 1\r\n3 5 2",
      "expected_output": "3\r\nNIE\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8\n9 8 10 7 4\n3 1 5\n6\n8 4 10\n2 10 2\n4 2 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3\n10 4 2 2 3\n10 2 9\n3\n6 2 6\n3 9 10\n3 4 8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 2\n6 5 4 10 7\n8 1 10\n1\n10 7 4\n8 4 10\n2 5 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 19\n66 95 96 58 86\n61 81 5\n6\n8 24 45\n40 19 40\n96 81 70",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "53 22\n8 17 51 89 69\n91 95 77\n16\n68 94 95\n73 30 91\n75 49 10",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 94\n11 29 97 33 5\n65 94 10\n6\n55 35 63\n33 49 73\n11 23 55",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 20\n30 31 11 97 20\n65 23 34\n96\n83 97 35\n79 35 73\n15 68 41",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "93 15\n52 67 43 74 42\n18 40 7\n92\n51 10 72\n14 88 20\n65 31 100",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "309 273\n363 285 337 387 412\n322 288 454\n234\n205 234 231\n84 454 260\n185 143 451",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "308 333\n205 234 243 260 223\n414 190 116\n466\n137 164 496\n358 137 390\n97 164 262",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "313 139\n419 401 346 488 291\n419 316 224\n112\n411 253 167\n288 318 276\n391 414 282",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "295 444\n110 196 188 280 245\n492 258 401\n421\n385 256 196\n146 251 91\n406 359 255",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "251 300\n153 223 233 338 292\n124 443 195\n65\n204 412 424\n210 175 281\n348 133 437",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "144 288\n339 453 316 457 377\n313 260 132\n161\n128 78 458\n54 359 242\n95 425 476",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "276 63\n236 415 244 80 347\n388 411 466\n273\n334 118 413\n423 273 254\n180 423 396",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n1000 1 2 2 999\n1000 1000 1000\n2\n1000 1 1000\n1000 1000 2\n999 999 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000\n1000 1 2 2 2\n1 2 1\n1000\n2 2 2\n2 1000 1\n1000 2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:26"
}