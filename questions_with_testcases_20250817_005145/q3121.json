{
  "problem_code": "problems",
  "title": "Menu",
  "tags": [],
  "text": "Alfred wants to plan what to cook in the next days. He can cook various dishes. For each dish the costs of the ingredients and the benefit value is known. If a dish is cooked the second time in a row, the benefit value for the second time is 50 percent of the benefit value of first time, if it is prepared for the third or higher time in a row, the benefit value is 0. For example cooking a dish with benefit value v three times in a row leads to a total benefit value of 1.5*v.Help him to build the menu which maximizes the benefit value under the constraint that his budget is not exceeded.InputThe input consists of several test cases. Each test case begins with 3 integers in a line: The number of daysk(1 ≤ k ≤ 21) Alfred wants to plan for, the number of dishesn(1 ≤ n ≤ 50) he can cook and his budgetm(0 ≤ m ≤ 100).\r\nThe followingnlines describe the dishes Alfred can cook. The i-th line contains two integers: the costsc(1 ≤ c ≤ 50) and the benefit valuev(1 ≤ v ≤ 10000) of the i-th dish.The end of the input is signalled by a test case withk = n = m = 0. You don't need to process this test case.OutputFor each output, print the maximum benefit value reachable with 1 digit after the decimal point. Then print k integers with i-th integer being the number of the dish to cook on day i. Dishes are numbered from 1 to n. Print at least one space or new line character after each integer.If there are several possible menus reaching the maximum benefit value, select the one with minimum costs, if there are several with minimum costs, you can print any of them.If every menu exceeds the budget, print only the benefit value of 0.ExampleInput:2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0Output:0.0\r\n\r\n13.0\r\n1 5 1",
  "sample_input": "Input:2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0Output:0.0\r\n\r\n13.0\r\n1 5 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MENU",
  "scraped_at": "2025-08-17 00:34:08",
  "test_cases": [
    {
      "input": "2 1 5\r\n3 5\r\n3 5 20\r\n2 5\r\n18 6\r\n1 1\r\n3 3\r\n2 3\r\n0 0 0",
      "expected_output": "0.0\r\n\r\n13.0\r\n1 5 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 2\n4 3\n5 10 9\n2 2\n1 2\n5 10\n2 5\n5 9\n3 8 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 1\n2 10\n9 8 6\n7 1\n1 3\n2 5\n1 5\n3 10\n3 1 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 2\n4 3\n7 10 9\n5 7\n10 5\n9 10\n9 8\n10 4\n7 8 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "48 1 26\n8 6\n7 24 25\n37 40\n9 49\n48 1\n37 36\n35 10\n1 14 39",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "44 34 43\n49 33\n18 26 36\n33 24\n32 35\n45 35\n24 39\n20 50\n7 6 46",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "4 45 12\n14 20\n7 29 47\n21 48\n24 40\n13 11\n24 40\n5 50\n7 24 6",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "33 26 13\n48 33\n45 37 4\n35 19\n5 2\n36 11\n32 44\n46 19\n5 31 9",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 3 50\n36 26\n9 30 47\n48 23\n49 31\n14 35\n9 22\n39 17\n22 6 9",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10 8 24\n8 23\n21 22 8\n15 18\n3 8\n5 3\n22 19\n22 9\n12 18 23",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "3 8 16\n2 11\n20 12 21\n17 11\n14 5\n14 5\n3 24\n6 21\n14 25 20",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "22 3 23\n10 16\n18 17 22\n12 21\n23 13\n15 22\n25 7\n16 21\n4 18 13",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "23 8 15\n16 13\n15 24 7\n2 24\n15 14\n7 18\n19 10\n10 9\n17 10 13",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 21\n16 11\n3 13 7\n4 12\n2 24\n17 5\n21 5\n19 20\n19 3 12",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 24 13\n15 4\n22 25 21\n6 3\n6 18\n23 6\n13 6\n14 17\n16 8 12",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10 6 11\n15 19\n17 12 16\n24 13\n4 15\n5 13\n22 3\n13 14\n2 24 10",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50 50\n50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50\n50 50\n50 50 50",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50 50\n50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50\n50 50\n50 50 50",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 49\n2 49\n2 50 50\n2 50\n2 50\n50 2\n2 50\n49 1\n2 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "50 2 49\n1 2\n49 1 2\n2 50\n2 2\n49 49\n50 50\n50 2\n50 50 49",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:57"
}