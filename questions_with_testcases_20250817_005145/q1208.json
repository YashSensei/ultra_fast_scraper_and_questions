{
  "problem_code": "problems",
  "title": "Sum of subsequences",
  "tags": [],
  "text": "Given an positive integer n and a sequence a1... an.There are q queries. Each query has one of two formats:Format 0 l r k: you need to output the k-th smallest positive integer that can’t be partition into a sum of any subsequence of al... ar.Format 1 l r x: you need to output the numbers of ways to partition x into a sum of a subseqence of al... ar(or the numbers of subsequence that sum of all its elements equal to x) (modulo 232).InputFirst line: two positive n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 10000)Second line: n positive a1…an­(0 ≤ ai≤ 100)Next q lines: each line denotes a query with one of two format listed above (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 109, 0 ≤ x ≤ 109)Outputq lines: the i-th line is the answer of i-th query.SampleInput:5 3\r\n1 0 2 4 1\r\n0 2 3 2\r\n1 1 4 0\r\n1 2 5 3Output:3\r\n1\r\n2",
  "sample_input": "Input:5 3\r\n1 0 2 4 1\r\n0 2 3 2\r\n1 1 4 0\r\n1 2 5 3Output:3\r\n1\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BLSUMSEQ",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "5 3\r\n1 0 2 4 1\r\n0 2 3 2\r\n1 1 4 0\r\n1 2 5 3",
      "expected_output": "3\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 6\n5 5 5 9 5\n1 5 10 6\n8 2 3 7\n10 4 9 5",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10\n5 6 3 5 5\n7 9 4 1\n8 8 8 9\n5 6 1 8",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n5 8 9 10 6\n9 6 1 3\n1 1 1 8\n6 3 10 4",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "60 87\n15 90 11 10 98\n30 73 63 27\n34 27 6 37\n91 6 99 66",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "9 62\n24 88 42 25 82\n49 44 69 30\n65 3 99 73\n43 1 90 68",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 66\n74 74 40 58 91\n62 16 28 13\n2 39 20 65\n63 37 26 17",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "73 59\n63 26 4 59 38\n67 93 46 23\n84 89 62 98\n79 89 16 24",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "23 39\n61 6 34 3 29\n36 87 8 86\n79 96 28 21\n19 36 51 93",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "8 28\n46 24 33 15 44\n45 35 50 22\n32 23 25 24\n38 18 38 6",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "25 39\n26 46 50 10 11\n10 23 32 50\n45 40 28 28\n45 22 18 5",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "26 28\n30 34 50 16 16\n41 13 47 5\n22 34 10 26\n18 31 29 31",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "34 35\n20 25 25 26 19\n16 45 5 43\n24 9 10 17\n28 26 19 12",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5 24\n43 7 16 8 21\n6 29 44 33\n34 43 34 30\n41 30 14 35",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "31 21\n38 41 21 21 6\n8 35 17 9\n26 19 24 26\n39 14 30 27",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "31 50\n46 16 15 49 7\n39 20 24 18\n47 8 9 24\n5 33 41 6",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100 100 100\n100 100 100 100\n100 100 100 100",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 2\n2 99 99 2 1\n99 100 2 99\n1 2 99 100\n99 2 1 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 99\n2 100 2 100 1\n1 100 99 99\n99 2 2 1\n100 2 99 99",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:56"
}