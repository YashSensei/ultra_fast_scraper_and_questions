{
  "problem_code": "problems",
  "title": "Greedy Hydra II",
  "tags": [],
  "text": "The problem description is the same as the problemDRAGON.InputThe first line contains 3 integers N (1 ≤ N ≤ 3000), M (2 ≤ M ≤ N), K (1 ≤ K ≤ N), separated by single spaces. The N fruits are numbered 1..N, and the biggest fruit is always numbered 1. N-1 lines follow, each contains 3 integers i, j, k separated by spaces denoted that there is a branch between fruit i (1 ≤ i ≤ N) and fruit j (1 ≤ j ≤ N) and the weight of illness of this branch is k (0 ≤ k ≤ 100000).OutputOutput one line contains a single integer denoted the minimum weight of illness of the hydra. If we can't divide the fruit into M groups, output \"-1\" (without quotes).ExampleInput:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5Output:4Some new test cases were added.",
  "sample_input": "Input:8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DRAGON2",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "8 2 4\r\n1 2 20\r\n1 3 4 \r\n1 4 13\r\n2 5 10\r\n2 6 12\r\n3 7 15\r\n3 8 5",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 4 6\n2 1 9\n7 7 7\n4 3 4\n5 1 1\n1 3 10\n10 5 10\n6 10 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 9\n4 2 9\n4 5 2\n2 2 7\n4 7 6\n4 10 5\n6 3 7\n7 7 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 3\n7 5 3\n7 4 8\n8 9 3\n7 9 2\n6 3 4\n4 3 3\n1 4 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 45 86\n68 81 99\n98 10 91\n11 19 70\n14 84 84\n49 70 10\n63 75 51\n91 17 92",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "40 73 85\n55 25 39\n38 97 64\n33 3 18\n19 4 34\n9 43 34\n44 76 44\n6 25 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 34 97\n17 62 69\n97 58 87\n16 80 67\n17 33 4\n77 12 19\n62 34 82\n47 91 68",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 7 35\n5 62 55\n41 30 95\n28 29 93\n94 75 75\n93 39 16\n80 11 61\n31 84 70",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "23 92 29\n40 81 64\n93 64 58\n40 48 8\n75 68 88\n63 84 24\n68 82 37\n96 2 79",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "575 1378 498\n961 541 699\n1237 847 1222\n537 1388 284\n1497 1432 1498\n1394 1460 305\n1416 386 775\n678 181 1472",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1158 274 737\n1158 1276 939\n938 677 811\n797 905 196\n745 234 1357\n304 355 669\n1430 488 1359\n1391 234 764",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "653 695 444\n841 1332 343\n1449 1024 1171\n592 245 1216\n440 568 154\n721 332 1203\n848 788 1123\n432 1399 912",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1192 251 161\n284 923 849\n887 658 831\n657 1141 778\n603 1431 1230\n896 635 430\n1219 526 1044\n943 502 353",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "703 188 774\n1041 1052 1022\n301 631 1171\n283 1488 600\n1171 1062 1379\n642 1206 1457\n1183 1297 614\n1297 673 391",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "459 1500 1083\n711 764 896\n651 936 350\n781 1454 971\n1386 1408 227\n950 1361 177\n567 585 281\n1057 1126 756",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1005 1246 524\n669 255 735\n469 230 942\n1230 381 206\n861 818 566\n1310 222 980\n964 445 1038\n881 651 829",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000\n3000 3000 3000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 3000 1\n2999 2 2999\n1 3000 1\n2 3000 2999\n3000 2 2\n1 1 2999\n1 1 2999\n1 1 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2999 1 3000\n2999 2999 2\n2 2 3000\n1 1 1\n2 2 2999\n1 3000 1\n2 2 3000\n1 2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:05"
}