{
  "problem_code": "problems",
  "title": "George",
  "tags": [],
  "text": "Last week Mister George visited Croatia. Since Mister George is a very important person, while he was in a street, the policedisallowed entryto that street, but vehicles that entered the street before Mister George could continue driving.While Mister George was visiting, Luka drove his truck around town. But because of some of the streets being closed off, he couldn't make his delivery in time and almost lost his job. Although it is late now, he is wondering how he could have planned his delivery better i.e. what would have been the least time needed to make his delivery while Mister George was visiting. He knows the route mister George took.The city is modeled with intersections and two-way streets connecting them. For each street, Luka knows how much time he needs to traverse it (mister George needs he same amount of time).For example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it, this street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during minutes 9 and earlier, or 15 and later.Write a program that calculates the least amount of time Luka needs to make his delivery, if he starts driving K minutes after the arrival of Mister George.InputThe first line contains two integers N and M (2 ≤ N ≤ 1000, 2 ≤ M ≤ 10 000), the number of intersections and the number of streets. The intersections are numbered 1 to N.\r\nThe second line contains four integers A, B, K and G (1 ≤ A, B ≤ N, 0 ≤ K ≤ 1000, 0 ≤ G ≤ 1000).\r\nThese are, in order:The intersection where Luka starts;The intersection Luka must get to;The difference in starting times between mister George and Luka (Luka starts at intersection A exactly K minutes after mister George starts his route);The number of intersections on Mister George's route.The third line contains G integers, the labels of intersections mister George will visit. Every pair of adjacent integers denotes a street he will traverse. That street will exist and Mister George will traverse every street at most once.\r\nEach of the following M lines contains three integers A, B and L, meaning that there is a street between intersection A and B, and it takes L minutes to traverse. L will be between 1 and 1000.OutputOutput the least amount of time (in minutes) Luka needs to make his delivery.ExampleInput:6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15Output:21Input:8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23Output:40Croatian Open Competition in Informatics (COCI) - 2007/2008 Contest #6",
  "sample_input": "Input:6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15Output:21",
  "sample_output": "Input:8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23Output:40",
  "link": "https://www.spoj.com/problems/GEORGE",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "6 5\r\n1 6 20 4\r\n5 3 2 4\r\n1 2 2\r\n2 3 8\r\n2 4 3\r\n3 6 10\r\n3 5 15",
      "expected_output": "21",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 9\r\n1 5 5 5\r\n1 2 3 4 5\r\n1 2 8\r\n2 7 4\r\n2 3 10\r\n6 7 40\r\n3 6 5\r\n6 8 3\r\n4 8 4\r\n4 5 5\r\n3 4 23",
      "expected_output": "40",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "1 3\n10 7 9 5\n4 5 4 4\n7 6 10\n7 9 5\n4 5 3\n9 7 1\n8 3 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n1 6 2 5\n8 3 7 3\n8 4 10\n8 2 6\n8 6 8\n5 9 8\n6 5 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n10 4 5 4\n1 6 8 5\n1 8 10\n1 3 7\n9 4 4\n7 7 10\n7 6 2",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "15 34\n21 36 65 13\n19 43 18 51\n43 50 4\n31 81 57\n44 38 61\n75 56 74\n74 13 29",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 95\n59 1 89 61\n54 73 18 52\n97 14 73\n47 70 58\n66 32 48\n3 55 84\n53 26 13",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "80 34\n14 52 61 68\n13 44 4 95\n47 15 35\n47 80 6\n63 25 62\n85 15 51\n17 68 12",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "63 28\n61 87 89 51\n55 87 92 5\n35 93 44\n85 92 36\n59 18 38\n36 38 8\n17 94 50",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "52 95\n16 66 87 93\n26 43 76 39\n99 44 74\n20 18 21\n26 53 83\n66 41 55\n2 15 59",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "459 264\n327 50 433 335\n73 100 375 129\n103 246 86\n188 335 89\n440 274 309\n347 93 158\n75 213 432",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "455 464\n460 163 318 326\n370 246 209 350\n109 86 487\n214 339 130\n239 243 74\n425 174 308\n129 89 166",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "236 443\n397 383 205 425\n137 221 154 118\n238 320 469\n276 465 74\n160 74 443\n497 288 425\n150 115 87",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "131 58\n163 376 339 331\n358 353 153 413\n74 367 354\n91 318 126\n168 93 174\n334 436 477\n354 446 310",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "252 105\n260 388 272 338\n219 269 222 416\n261 325 303\n270 355 131\n322 132 348\n168 102 333\n72 342 362",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "186 441\n291 470 94 84\n225 432 104 223\n264 462 414\n118 84 330\n448 317 364\n475 471 134\n289 291 332",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "51 432\n267 156 254 385\n361 220 282 150\n300 162 187\n148 116 147\n388 236 314\n432 64 239\n223 369 209",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n1 2 1000 2\n1000 999 1000 2\n999 1000 999\n2 1000 999\n2 1000 1000\n1000 1 999\n2 1 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:37"
}