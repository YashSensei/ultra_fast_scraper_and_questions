{
  "problem_code": "problems",
  "title": "Mosque",
  "tags": [],
  "text": "Islam prayer in congregation (jama'ah) is considered to have more social and spiritual benefit than praying by oneself. When praying in congregation, the people stand in straight parallel rows behind the chosen imam, facing Qibla (The Qibla is the direction that should be faced when a Muslim prays). Sometimes some of these rows are cut by poles (n poles divide the row into n+1 parts), and some of the rows do not contain poles (the whole row is just one part). Muslims prefer to stand in the rows which are free of poles, so they may leave one row empty and use the next one if it has fewer poles, but they can’t leave two consecutive rows empty.A mosque is divided into n rows each row may contains one or more poles. Each row free of poles can have m Muslims and every additional pole decreases this number by 2, so if the row contains 2 poles, number of Muslims who can stand in this row is m - 4.In this problem you are required to arrange the Muslims in rows where number of poles cutting these rows is minimized.InputInput contains multiple test cases. Each test case will start with the number of n (0 < n ≤ 100), m (10 ≤ m ≤ 200), and t (0 < t ≤ 20,000), where n is number of rows, m is number of Muslims per row, and t is the total number of people in the mosque, followed by n lines each containing the number of poles in each row. It is guaranteed that the mosque always can fit all the Muslims. Input will be terminated by end of file.OutputFor each test case, print one line containing the minimum number of poles cutting the prayer rows.SampleInput:8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1Output:2\r\n3\r\n5",
  "sample_input": "Input:8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1Output:2\r\n3\r\n5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PCPC12G",
  "scraped_at": "2025-08-17 00:34:27",
  "test_cases": [
    {
      "input": "8 10 26\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n2\r\n8 10 27\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1",
      "expected_output": "2\r\n3\r\n5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 8 9\n5\n4\n2\n8\n7\n8\n3\n9\n9 3 9\n6\n4\n3\n9\n3\n4\n3\n4\n10 2 7\n2\n10\n2\n6\n9\n2\n5\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 4\n6\n5\n8\n8\n1\n5\n5\n6\n9 5 4\n2\n3\n3\n4\n2\n4\n7\n8\n10 7 6\n5\n7\n4\n7\n7\n7\n8\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7 8\n2\n8\n10\n5\n2\n1\n3\n6\n3 3 6\n1\n9\n6\n8\n2\n3\n7\n10\n3 6 2\n9\n9\n10\n9\n7\n9\n6\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 39 92\n16\n51\n11\n35\n16\n91\n98\n92\n5 74 88\n57\n78\n49\n22\n26\n94\n59\n4\n56 51 16\n9\n35\n24\n100\n93\n95\n50\n94",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 63 36\n70\n4\n12\n11\n50\n4\n99\n3\n70 89 19\n80\n7\n26\n96\n75\n69\n36\n99\n70 81 39\n74\n57\n48\n93\n53\n73\n96\n100",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 38 24\n71\n79\n33\n7\n78\n52\n80\n94\n53 98 81\n10\n21\n13\n69\n97\n34\n13\n37\n31 38 2\n3\n48\n1\n45\n58\n1\n37\n21",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 74 49\n3\n17\n95\n43\n63\n61\n81\n70\n11 64 31\n64\n6\n47\n81\n15\n95\n29\n68\n29 13 82\n19\n87\n48\n42\n42\n44\n97\n3",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "64 46 48\n95\n39\n32\n96\n17\n79\n45\n99\n32 83 57\n83\n85\n51\n40\n79\n73\n35\n57\n46 67 99\n81\n43\n84\n1\n49\n79\n29\n43",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "37 7 7\n5\n47\n23\n25\n13\n27\n48\n40\n5 45 35\n16\n20\n26\n33\n12\n48\n22\n8\n43 24 20\n24\n20\n49\n12\n10\n35\n24\n26",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "35 37 45\n17\n8\n26\n5\n11\n38\n49\n35\n44 37 26\n36\n27\n31\n47\n41\n22\n37\n41\n34 5 28\n25\n8\n47\n25\n36\n28\n7\n20",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "7 28 20\n15\n12\n49\n40\n32\n13\n11\n23\n19 15 50\n34\n34\n34\n11\n35\n25\n27\n11\n24 35 39\n44\n27\n39\n32\n44\n35\n18\n20",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 42 48\n22\n47\n37\n48\n38\n47\n26\n36\n29 17 12\n38\n42\n19\n24\n18\n18\n45\n38\n39 38 22\n23\n47\n14\n13\n47\n26\n49\n44",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12 18 32\n49\n38\n47\n19\n48\n46\n35\n32\n37 43 33\n50\n16\n42\n8\n7\n39\n10\n34\n47 13 49\n47\n48\n35\n15\n10\n26\n18\n21",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "26 35 35\n27\n24\n41\n26\n40\n27\n37\n31\n42 49 24\n39\n13\n9\n6\n25\n50\n42\n41\n41 15 47\n24\n32\n23\n15\n16\n37\n18\n43",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "6 47 48\n39\n25\n28\n28\n37\n22\n37\n31\n15 25 27\n11\n50\n14\n25\n9\n18\n7\n18\n19 31 12\n10\n40\n20\n12\n31\n44\n8\n6",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100\n100 100 100\n100\n100\n100\n100\n100\n100\n100\n100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99 1\n1\n2\n1\n2\n99\n1\n2\n100\n100 100 100\n99\n99\n99\n1\n1\n100\n99\n2\n99 99 99\n1\n100\n1\n100\n99\n100\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "99 1 99\n1\n1\n2\n99\n2\n100\n1\n1\n100 1 2\n99\n2\n99\n2\n1\n99\n99\n1\n2 99 1\n100\n1\n99\n1\n1\n99\n2\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}