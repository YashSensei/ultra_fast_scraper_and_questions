{
  "problem_code": "problems",
  "title": "The Cats and the Mouse",
  "tags": [],
  "text": "In a rectangular field of size n by m squares there is a mouse and two cats. The mouse is the first to make a move, then each of the cats makes a move, then again its the mouse's turn, and so on. In each move both the mouse and the cats can move exactly one square vertically or horizontally. If the mouse is standing at the edge of the field then in its next move it can jump off the field and is saved from the cats. If in the next move one of the cats moves to the field with the mouse then there is no escape for the mouse ... =(You are to write a program which, knowing the initial positions of mouse and the two cats, will find out if there is any way for the mouse to escape from the cats, assuming of course that each cat will do its best to catch the mouse.InputIn the first line of input two integers n and m are given, not exceeding 100, where n is the number of rows, and m - the number of columns. The second line contains a number k [k â‰¤ 10], which defines the number of test cases for the given field. In the next k lines the initial positions of the mouse and the cats are given. The position in the field is given by two numbers: the first is the number of the row, the second is the number of the column. The first two integers are the coordinates of the mouse, the next four integers are the coordinates of the cats.OutputYou must output k lines with answers for each test case. The answer is YES, if the mouse can escape or NO otherwise.ExampleInput:5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3Output:NO\r\nYES\r\nYESAuthor: Filimonenkov D.O.",
  "sample_input": "Input:5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3Output:NO\r\nYES\r\nYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CATM",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "5 3\r\n3\r\n2 2 1 1 3 3\r\n2 3 1 3 5 2\r\n3 2 1 2 4 3",
      "expected_output": "NO\r\nYES\r\nYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5\n7\n10 10 1 9 4 6\n7 3 8 3 7 10\n10 4 7 1 3 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 8\n3\n10 8 3 1 4 3\n3 10 3 4 7 9\n9 2 8 8 10 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n7\n9 4 10 1 6 8\n3 3 4 5 6 8\n4 9 5 4 10 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "15 41\n28\n4 49 95 3 40 3\n81 99 26 59 89 2\n22 82 31 66 50 32",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "28 56\n89\n47 92 38 87 57 89\n8 72 56 14 51 69\n58 5 30 63 4 1",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 36\n63\n60 27 10 51 10 49\n55 45 67 25 11 16\n23 36 76 85 55 1",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 66\n57\n94 15 48 27 36 53\n82 80 100 25 81 55\n14 73 89 16 41 56",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 83\n72\n63 37 36 61 21 88\n38 93 93 20 47 29\n17 48 76 41 31 20",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "173 291\n221\n407 267 326 313 248 204\n108 372 175 404 241 439\n94 375 243 450 195 433",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "137 175\n283\n135 198 286 368 116 414\n447 134 213 383 353 444\n315 236 281 207 66 201",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "158 307\n317\n118 340 377 407 142 286\n56 306 160 168 50 339\n407 365 173 497 411 260",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "437 197\n459\n444 307 132 202 118 253\n454 478 59 126 396 158\n108 406 68 167 388 146",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "181 169\n444\n238 241 232 63 489 70\n422 237 292 379 483 225\n348 492 212 235 194 284",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "104 201\n310\n296 439 69 397 129 469\n319 500 117 216 269 390\n181 302 101 260 415 331",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "129 341\n165\n388 257 422 132 385 412\n156 105 219 263 271 221\n324 302 318 84 296 141",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n1000\n2 1000 1000 2 1000 999\n1000 2 1 1 999 1\n1 1000 1 999 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n999\n2 1 2 999 1 1000\n1 999 2 2 1000 2\n999 2 1000 1000 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20
}