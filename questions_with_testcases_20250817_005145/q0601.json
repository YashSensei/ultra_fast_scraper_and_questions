{
  "problem_code": "problems",
  "title": "Delicious Pancakes",
  "tags": [],
  "text": "Just as promised, PolyProg will invite you to a bounteous pancake buffet right after this contest. Can you already feel the seductive odours dazing your senses? Well, before your mouth starts watering, you should solve this last problem.As you might know, the basic ingredients to pancakes are flour, milk and eggs. These may be completed by a passel of additional toppings such as sugar, jam, berries, cheese, ham, mushrooms etc. As the chef of the evening was yet uncertain about the recipe he’d whip up tonight, he asked his assistant simply to buy random quantities of each ingredient.With these quantities he could makeN1pancakes according to recipe 1,N2if he decides to follow recipe 2,N3for recipe 3 and so on and so forth. As the end of the competition is close, the chef will not have enough time to combine several recipes: All pancakes tonight will be of the same taste (too bad :( ). The repertoire of recipes is huge, and as we imagine you to have a ravenous appetite, you are to select the recipe that yields the largest number of pancakes.InputThe input consists of several test-cases separated by an empty line. The first line of each test-case holds the number of ingredientsN (1 ≤ N ≤ 50)the assistant bought followed by the number of recipesR (1 ≤ R ≤ 100)in the chef’s repertoire. Each of the next lines contains exactlyNnon-negative integers (no larger than 106) informing about the ingredients. The first of these lines lists the quantities the assistant bought of each ingredient. The remainingRlines list the quantities (in the same order as the previous line) necessary to make ten pancakes according to the recipe ri(from 1 toR). The input ends on a test-case having bothNandRzero, which must not be processed.OutputYour program should produce one line per test-case containing the recipe that yields the largest number of pancakes followed by the number of entire pancakes that can be made then. If there is a tie, prefer the recipe that appears first in the input.ExampleInput:3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0Output:2 66\r\n1 100",
  "sample_input": "Input:3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0Output:2 66\r\n1 100",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PANCAKES",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "3 2\r\n20 20 20\r\n5 10 1\r\n2 1 3\r\n \r\n6 3\r\n100 60 130 80 100 90\r\n10 5 10 5 10 5\r\n1 2 1 2 20 7\r\n0 0 0 10 30 1\r\n \r\n0 0",
      "expected_output": "2 66\r\n1 100",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 8\n7 6 5\n10 9 3\n9 9 3\n2 4\n7 1 1 4 7 8\n6 9 1 8 2 6\n1 3 10 5 9 9\n8 1 6 8 3 6\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 6\n3 9 8\n6 8 3\n5 3 1\n6 9\n7 2 1 7 4 9\n7 2 3 9 10 9\n3 10 5 9 4 10\n9 2 3 6 2 4\n3 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\n2 1 6\n10 3 10\n5 7 2\n3 5\n6 5 8 1 8 2\n9 1 7 8 10 9\n3 4 6 2 1 3\n8 5 5 8 8 9\n2 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 16\n1 9 1\n20 25 19\n24 48 39\n36 39\n26 20 33 13 42 35\n16 31 2 8 49 34\n31 9 4 32 4 19\n22 18 10 13 18 9\n9 29",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "13 18\n1 22 31\n27 46 29\n5 23 47\n40 18\n7 32 8 33 5 26\n9 15 2 19 19 38\n36 38 26 17 43 12\n30 8 45 44 45 20\n50 22",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 6\n7 34 5\n50 31 16\n46 25 49\n23 8\n24 31 47 23 27 31\n14 50 37 26 19 21\n45 24 22 1 26 22\n42 45 8 36 29 36\n41 4",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 28\n27 24 2\n7 4 15\n1 18 17\n11 44\n47 18 38 22 15 22\n33 25 20 36 10 46\n41 48 14 50 28 43\n33 39 7 40 13 10\n8 19",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 46\n47 45 46\n8 14 29\n5 47 49\n1 14\n42 34 40 48 20 10\n31 27 5 14 3 2\n13 35 32 26 19 46\n50 37 27 1 28 25\n14 40",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "24 11\n19 4 17\n4 9 22\n18 14 5\n18 23\n13 11 23 22 18 20\n8 19 9 20 20 4\n11 3 21 16 24 18\n19 9 8 19 6 2\n13 10",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 11\n3 5 17\n22 12 22\n8 25 6\n2 13\n23 20 18 15 17 25\n4 14 12 2 18 9\n5 23 3 25 23 23\n8 20 9 13 16 20\n7 12",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "3 19\n15 6 24\n15 5 10\n11 24 4\n21 16\n14 25 11 14 18 14\n11 17 14 18 15 11\n10 16 23 4 19 22\n18 16 20 15 11 21\n22 5",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17 19\n14 4 21\n23 5 9\n22 24 4\n12 9\n25 7 12 18 12 23\n8 19 25 13 9 24\n16 12 4 12 17 6\n15 13 23 16 17 4\n4 2",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5 24\n7 20 18\n18 17 3\n12 8 13\n6 11\n21 7 10 12 17 11\n18 7 2 20 3 16\n6 23 3 20 4 2\n2 20 8 2 8 4\n3 11",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3 11\n3 6 16\n15 23 5\n22 17 6\n12 11\n10 16 16 22 11 18\n10 2 17 5 15 12\n21 5 21 25 8 7\n7 18 24 24 5 19\n3 6",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "8 19\n16 14 5\n3 13 25\n5 22 22\n9 18\n11 15 14 20 19 6\n18 19 25 8 2 12\n19 20 20 22 13 14\n4 8 19 11 11 15\n14 18",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50 50 50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 49\n49 1 2\n2 2 2\n2 2 50\n49 49\n49 50 2 49 50 50\n49 50 1 50 49 49\n49 2 1 1 49 2\n50 49 49 50 49 2\n50 50",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n49 50 1\n50 2 49\n49 2 49\n2 50\n50 1 49 1 50 49\n2 2 2 1 2 49\n50 1 50 1 49 2\n49 1 1 50 2 49\n49 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}