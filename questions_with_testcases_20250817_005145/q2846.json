{
  "problem_code": "problems",
  "title": "Ada and Rain",
  "tags": [],
  "text": "Ada the Ladybug is currently growing plants. She has a very long furrow, in\r\nwhich she does so. It is so long, that most of water falling from rains drops\r\njust onto a part (segment) of the furrow. Ada doesn't want the plants to\r\nwither, so she records all rains to know, how much water every particular plant\r\ngot. Sadly, there are so many rains that she couldn't handle\r\nthis alone!At first, you will be givenNqueries with[L, R]segments\r\ntelling you, where all of theNrains fallen. AfterwardMqueries\r\nfollows, with numberi- the i-th plant for which you want to know, the\r\nnumber of rains, which has fallen onto it.InputThe first line will contain0 < N, M ≤ 105,0 < W ≤ 106, number of\r\nrains, number of questions and size of furrow respectively.ThenNlines follow, each containing two integers0 ≤ L ≤ R < W, symbolizing left and right plant in segment on which\r\ni-th rain has fallen.AfterwardMlines follow, each containing a number0 ≤ a < W, asking for number of rains which has fallen on plant numbera.OutputPrintMlines (for each query of second type), with integer indicating\r\nnumber of rains, which has fallen on the plant in query.Example Input6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7Example Output2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
  "sample_input": "6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7",
  "sample_output": "2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
  "link": "https://www.spoj.com/problems/ADARAIN",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "6 7 10\r\n0 9\r\n3 5\r\n4 6\r\n4 8\r\n1 8\r\n5 5\r\n1\r\n5\r\n9\r\n4\r\n9\r\n6\r\n7",
      "expected_output": "2\r\n6\r\n1\r\n5\r\n1\r\n4\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 7 4\n2 2\n4 10\n6 5\n8 4\n1 4\n10 7\n10\n10\n5\n10\n6\n10\n4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 7\n10 8\n4 4\n10 4\n5 6\n10 8\n5 9\n1\n5\n4\n10\n8\n2\n5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 5 7\n3 10\n8 10\n7 2\n7 4\n8 6\n3 7\n9\n6\n6\n7\n3\n9\n2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 30 64\n38 8\n95 97\n52 41\n95 86\n54 98\n74 77\n77\n89\n76\n16\n21\n4\n18",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 1 79\n38 7\n71 85\n64 2\n20 71\n43 10\n66 34\n60\n75\n59\n55\n87\n88\n98",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 85 62\n69 67\n37 43\n47 51\n1 88\n72 36\n74 76\n8\n46\n16\n23\n4\n87\n38",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "7 13 49\n66 54\n36 77\n28 60\n16 23\n90 53\n24 61\n15\n10\n24\n46\n12\n45\n63",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 57 32\n88 34\n72 74\n66 46\n20 31\n74 75\n46 93\n72\n76\n71\n35\n88\n38\n5",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "131 160 378\n234 389\n81 67\n191 390\n446 258\n434 212\n482 400\n400\n400\n172\n159\n375\n447\n250",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "158 59 79\n150 220\n372 326\n214 270\n244 301\n65 301\n173 498\n430\n109\n71\n314\n73\n441\n183",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "487 209 378\n62 83\n287 114\n242 317\n394 259\n361 193\n55 52\n88\n198\n244\n239\n362\n109\n362",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "499 183 161\n442 215\n289 220\n228 247\n462 475\n439 206\n373 214\n66\n465\n302\n262\n85\n62\n176",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "233 191 490\n481 162\n243 402\n315 308\n278 67\n215 309\n71 372\n159\n342\n445\n113\n375\n126\n365",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "355 233 178\n85 364\n322 94\n229 302\n380 125\n160 122\n369 109\n485\n356\n118\n266\n459\n68\n151",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 97 492\n107 414\n137 316\n420 448\n148 98\n243 173\n262 348\n387\n114\n150\n198\n252\n422\n451",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000\n1000\n1000\n1000\n1000\n1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 1000\n1000 1000\n1000 2\n2 1\n1000 1\n2 1000\n1000 1\n999\n1000\n2\n2\n2\n1000\n2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999 999\n999 1000\n999 2\n2 999\n1000 1000\n2 999\n1 2\n2\n2\n1000\n999\n999\n1000\n2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:49"
}