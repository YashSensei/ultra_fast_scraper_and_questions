{
  "problem_code": "problems",
  "title": "Periodic function, trip 5",
  "tags": [],
  "text": "Solar cycle predictions are used by various agencies and many industry groups.\r\n The solar cycle is important for determining the lifetime of satellites in low-Earth orbit,\r\n as the drag on the satellites correlates with the solar cycle [...].(NOAA)(Solar Cycle)Sunspot Number Progression : Observed data through May 2008 ; Dec 2012 ; Nov 2014 ; Jun 2016The goal of the problem is to propose a perfect prediction center, with not so weak constraints.Let us consider periodic functions fromZtoR.deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...For example,fis a 3-periodic function, withf(0) =f(3) =f(6) =f(9) = 4. \r\nWith a simplified notation we will denote f as [4, -6, 7].\r\n\r\n\r\n\r\nFor two periodic functions (with integral period), the quotient of periods will be rational, in that case it can be shown that the sum of the functions is also a periodic function. Thus, the set of all such functions is a vector space overR.For that problem, we consider a function that is the sum of several periodic functions all with as period an integerNat maximum. You will be given some starting values, you'll have to find new ones.InputOn the first line, you will be given an integerN.\r\nOn the second line, you will be given integersy: the first (0-indexed)N×Nvalues of a periodic functionfthat is sum of periodic functions all with as period an integerNat maximum.\r\nOn the third line, you will be givenN×Nintegersx.OutputPrintf(x)for all requiredx. See sample for details.ExampleInput:3\r\n15 3 17 2 16 4 15 3 17\r\n10 100 1000 10000 100000 1000000 10000000 100000000 1000000000Output:16 16 16 16 16 16 16 16 16ExplanationFor examplefcan be seen as the sum of three periodic functions : [10] + [5, -8] + [0, 1, 2] (with simplified notations ; periods are 1,2 and 3)\r\nIn that casef(10) = [10][10%1] + [5, -8][10%2] + [0, 1, 2][10%3] = 10 + 5 + 1 = 16, and so on.ConstraintsN < 258\r\nabs(y) < 10^9\r\n0 <= x < 10^9For PERIOD4 you can have AC withO(N⁶) method,  for PERIOD3 the awaited solution is about π⁶/27 faster.For PERIOD5 a new complexity is awaited.InformationsYou can safely assume output fit in a signed 32bit container.\r\nThere's 6 input files, with increasing value ofN.\r\nMy modest C code ended in 1.27s ; no optimization.\r\nSome details (#i,N, TL, t) :\r\n(#0, around 50, 1s, 0s),\r\n(#1, around 50, 1s, 0s),\r\n(#2, around 100, 1s, 0.04s),\r\n(#3, around 150, 3s, 0.14s),\r\n(#4, around 200, 7s, 0.36s),\r\n(#5, around 250, 15s, 0.74s).You may first try the medium editionPERIOD3.Have fun ;-)(Edit 2017-02-11 ; compiler update ; here ×2 speedup) Some updated details (#i,N, TL, t) :\r\n(#0, around 50, 1s, 0s),\r\n(#1, around 50, 1s, 0s),\r\n(#2, around 100, 1s, 0.02s),\r\n(#3, around 150, 3s, 0.07s),\r\n(#4, around 200, 7s, 0.18s),\r\n(#5, around 250, 15s, 0.36s).",
  "sample_input": "deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...",
  "sample_output": "Input:3\r\n15 3 17 2 16 4 15 3 17\r\n10 100 1000 10000 100000 1000000 10000000 100000000 1000000000Output:16 16 16 16 16 16 16 16 16",
  "link": "https://www.spoj.com/problems/PERIOD5",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\r\n15 3 17 2 16 4 15 3 17\r\n10 100 1000 10000 100000 1000000 10000000 100000000 1000000000",
      "expected_output": "16 16 16 16 16 16 16 16 16",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "10 2 7 2 1 1 10 4 6 8 8 6 7 3 1 8 2 5 4\nmyxdaamosnhtkbsudtjisftucmox ll fkhl qespjo c ffoef t mtb z ia atvb fthv hmfs nnf xe mgue npii zgt cfuz a",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 9 10 2 1 4 3 1 8 6 6 4 3 2 5 3 1 5\nlimxkjdj h xbmgvn fkdemhbaoqu eedg d idoq ka ieqm rwtj t rkx nl nwm vhg vk og mlol ephsp g",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 5 10 2 8 4 8 2 3 3 3 4 6 2 7 6 7 4 2\npuwzemlxoclihjfhueixbfpaqvsu k eyus qdnob yyb laab vdvwd cbkcb i r xwe iyh spgy u arh a eeqxu hx vl a",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "91 50 98 7 100 83 16 100 41 82 26 88 14 44 57 80 94 60 15\nyklxqkmpcksbag vlypt zgxlz fvzxttfzs dj qbm hha zoqr e awivq nud aal wjk tqao x fhl gm ti be rxd",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 98 64 61 33 6 82 38 81 10 70 5 69 37 32 9 73 17 60\nqjgaljqtezajafflnjdxrfkql tzqwb vkea k yimfc bsyga zcyfi foua auiz f vo flzk nwso zzjid mcgif gvn eypn mhzt ee e",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "53 75 87 41 71 4 8 67 17 16 35 35 85 12 41 27 88 76 44\npbud hxk cneb rmnjvakiv dznsx qpq vod hso oyw icx yakpu uc nuaic t s veizn fjmf ikiv mujed qssj",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "23 59 90 61 11 25 83 75 51 11 3 13 83 3 87 46 27 93 80\nypvhddasnwpxdzxigzyasrvsdnq cp hycyyj yqjs ubyph klsai pobz stpe tfuk nop xo kwaxc lmu cdgdi n j tshsz qoyn swa ivvw",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "93 5 5 24 73 20 48 81 7 53 31 54 1 58 100 40 11 80 7\nouuaubzfryawjdewyypze k d vip okqwv hg m apisy hat bp j f pj aadeb bsjqg e gv w liqmr iz",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "276 466 245 163 51 208 302 268 80 401 266 344 409 213 405 119 344 159 421\nfxa nmyz trvsf ebzfcc aijf kuv qfey iamoq uvg mbxyh goljc bakm xoovs o kvt nn h hipmi jam b",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "276 300 430 313 230 340 285 191 110 236 166 372 460 129 263 384 320 80 236\nzsfm rztb vcpbv f a r sjnqe syh x wpki gpb ijs lf ywu sd m qghu p gu jico",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "417 481 306 266 472 440 351 372 213 255 407 121 310 66 380 394 412 152 232\nb xje c ez fygr hvhds cwuw uod v b iy mzfi umv w xoni t sbcug pdskw yh t",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "184 376 377 67 120 482 308 237 363 354 409 76 250 468 109 216 217 463 136\ntbrqcvljtxbgjnsg zy kz dlipms rdfl jlrgh pch qk o ccbii ov pzxxt vrhzi q sdn vzh tzj s c fg",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "467 154 489 420 225 348 190 111 481 419 174 394 160 204 200 238 181 224 53\nirjjjdgldyqwnb umo eep prcolbek ihssx fjn c ag rmohf m bklif loxn hwkp y mrm fievr b kx mhxff rpcdt",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "261 340 160 367 306 74 321 159 499 126 375 137 376 281 127 220 75 474 243\nrkqghuygaueh qsuzc iqzla blrqfzogpnr rvdjc d phkxm rsvkm zx sgter maxf krzsg oaeau qiyek nz om wlhu b t cfp",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "190 126 447 256 121 146 142 404 494 56 327 374 450 87 204 408 133 402 91\nkjuowfxqr ibzz o tt uboxp ty xndv rzmax waua pj pbrlr hn fduap cw mgrq ofs hpq hjeh igxrj rkgo",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nxwiqnguwfml ucg dn c x l owk pqium f cx kd h gdl tvgqq ttb gjib ran fcx x zzd",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\ngpdlvm oodo zaatb vstuvom qzgf gd nd uejme lvfj rzl ovuo lw fvxpz o r gpav i fr tvl us",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1 999 1 999 999 1 999 1 2 999 1000 999 999 2 1 1000 2\nhgqjstxwt yqxcs ak cqmlqyhuam qrmp o p cxhl ew rspzj v pucei i yr orx mwpef lmixu krv gtdz xgik",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}