{
  "problem_code": "problems",
  "title": "Sum of Vectors",
  "tags": [],
  "text": "EnglishVietnameseWe can represent a 2D vector as a pair (X, Y). The sum of two or more vectors is a vector whose coordinates are the sums of the corresponding coordinates of all the vectors in the sum. e.g. (1, 2) + (3, 4) + (5, 6) = (1 + 3 + 5, 2 + 4 + 6) = (9, 12) Weight of a vector (x, y) is defined as x * x + y * y. You are given N vectors on a plain.Your task is to write a program that will determine a subset of those vectors so the weight of the sum of all vectors in that subset is maximal.Note: Use 64-bit integers (int64 in pascal or long long in c)InputIn the first line of the input file is an integer N, 1 ≤ N ≤ 30,000, the number of vectors.The following N lines contain descriptions for each of the vectors. A description is made of two integers X and Y, separated by a single blank, -30,000 ≤ X, Y ≤ 30,000.None of the given vectors will be (0, 0)OutputIn the first and only line of the output file you have to write the weight of the maximum sum.ExampleInput:5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4Output:202Input:4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4Output:64Input:9\r\n0 1\r\n6 8\r\n0 -1\r\n0 6\r\n-1 1\r\n-1 2\r\n5 -4\r\n1 0\r\n6 -5Output:360",
  "sample_input": "Input:5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4Output:202",
  "sample_output": "Input:4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4Output:64",
  "link": "https://www.spoj.com/problems/MVECTOR",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "5\r\n5 -8\r\n-4 2\r\n4 -2\r\n2 1\r\n-6 4",
      "expected_output": "202",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\r\n1 4\r\n-1 -1\r\n1 -1\r\n-1 4",
      "expected_output": "64",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3\n1\n4\n6",
      "expected_output": "3\n1\n4\n6",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n6",
      "expected_output": "1\n6",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n10\n9\n2",
      "expected_output": "3\n10\n9\n2",
      "type": "small_case_5",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n65077986\n17436918\n68228400\n71813710\n13846833\n44169268\n50062429\n51310144",
      "expected_output": "8\n65077986\n17436918\n68228400\n71813710\n13846833\n44169268\n50062429\n51310144",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n44571282\n2092785\n93366895\n43550867\n32211543\n43544580",
      "expected_output": "6\n44571282\n2092785\n93366895\n43550867\n32211543\n43544580",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n94879669\n65230821\n81379910\n21526598\n34844917\n31188062\n59721595\n73330977\n28438793\n92362117\n7322691",
      "expected_output": "11\n94879669\n65230821\n81379910\n21526598\n34844917\n31188062\n59721595\n73330977\n28438793\n92362117\n7322691",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n77401281\n96713965\n29513117\n45739668\n88804831\n60495808\n33064871\n9882826\n23609824",
      "expected_output": "9\n77401281\n96713965\n29513117\n45739668\n88804831\n60495808\n33064871\n9882826\n23609824",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n29981049\n33868285\n17681660\n54405995\n65897848\n92259823\n40341823\n88381743\n93340976\n59818802\n3466751",
      "expected_output": "11\n29981049\n33868285\n17681660\n54405995\n65897848\n92259823\n40341823\n88381743\n93340976\n59818802\n3466751",
      "type": "medium_case_10",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "22\n83344\n35740\n36632\n98006\n24940\n16238\n12492\n23458\n37797\n75897\n75410\n61390\n40097\n23098\n79468\n70272\n15415\n86164\n93935\n64556\n20154\n5417",
      "expected_output": "22\n83344\n35740\n36632\n98006\n24940\n16238\n12492\n23458\n37797\n75897\n75410\n61390\n40097\n23098\n79468\n70272\n15415\n86164\n93935\n64556\n20154\n5417",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n43765\n27207\n24479\n98935\n18032\n85521\n30565\n3586\n10194\n10540\n60589\n3770\n49641\n48192\n91932\n91215\n48013\n19937\n32227\n46327\n42925\n44227",
      "expected_output": "22\n43765\n27207\n24479\n98935\n18032\n85521\n30565\n3586\n10194\n10540\n60589\n3770\n49641\n48192\n91932\n91215\n48013\n19937\n32227\n46327\n42925\n44227",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n45222\n73017\n60163\n97651\n85656\n43361\n93403\n84495\n96446\n56507\n87598\n86773\n83147\n23466\n22906\n24163\n57870\n47894\n36109\n67807\n73684\n54396\n7745\n85047",
      "expected_output": "24\n45222\n73017\n60163\n97651\n85656\n43361\n93403\n84495\n96446\n56507\n87598\n86773\n83147\n23466\n22906\n24163\n57870\n47894\n36109\n67807\n73684\n54396\n7745\n85047",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n82567\n59736\n29629\n21011\n73724\n92102\n87966\n30941\n96992\n43761\n1755\n68711\n20312\n11769\n60860\n75101\n74207\n16275\n52965\n95256\n25161\n10466",
      "expected_output": "22\n82567\n59736\n29629\n21011\n73724\n92102\n87966\n30941\n96992\n43761\n1755\n68711\n20312\n11769\n60860\n75101\n74207\n16275\n52965\n95256\n25161\n10466",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n72658\n80338\n2710\n23687\n93412\n95211\n78165\n76571\n53335\n25504\n26720\n88446\n48432\n70358\n45503\n68478\n76545\n67635\n84338\n92417\n93626\n4494\n64571\n61900\n24429\n63750\n20432\n87708",
      "expected_output": "28\n72658\n80338\n2710\n23687\n93412\n95211\n78165\n76571\n53335\n25504\n26720\n88446\n48432\n70358\n45503\n68478\n76545\n67635\n84338\n92417\n93626\n4494\n64571\n61900\n24429\n63750\n20432\n87708",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n95672\n50598\n19596\n66316\n9756\n38591\n36829\n34647\n5350\n95468\n74187\n32800\n83709\n53589\n93274\n39863\n63960\n67431\n15171\n66677\n8081\n62588\n47558\n25090",
      "expected_output": "24\n95672\n50598\n19596\n66316\n9756\n38591\n36829\n34647\n5350\n95468\n74187\n32800\n83709\n53589\n93274\n39863\n63960\n67431\n15171\n66677\n8081\n62588\n47558\n25090",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n75691\n44332\n53458\n26785\n13554\n65405\n61098\n74810\n81054\n92639\n17897\n38183\n66970\n11217\n53413\n13279\n75709\n48075\n16177\n62581\n76295\n71714\n9727\n93248",
      "expected_output": "24\n75691\n44332\n53458\n26785\n13554\n65405\n61098\n74810\n81054\n92639\n17897\n38183\n66970\n11217\n53413\n13279\n75709\n48075\n16177\n62581\n76295\n71714\n9727\n93248",
      "type": "large_case_17",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n33792741\n62355557\n91321764\n5898730\n94904736\n70184\n13319229\n74656085\n48452149\n68066212\n91093901\n94969155\n38289825\n7135468\n88690310\n21326320\n52813070\n25231407\n32824319\n32945198\n76955818\n28730972\n94276919\n94515810\n65047120\n57906902\n13562064\n12855634\n96055011\n39538020",
      "expected_output": "30\n33792741\n62355557\n91321764\n5898730\n94904736\n70184\n13319229\n74656085\n48452149\n68066212\n91093901\n94969155\n38289825\n7135468\n88690310\n21326320\n52813070\n25231407\n32824319\n32945198\n76955818\n28730972\n94276919\n94515810\n65047120\n57906902\n13562064\n12855634\n96055011\n39538020",
      "type": "max_case_18",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "30\n12067053\n18332653\n77374371\n98836951\n59327594\n65028453\n73876254\n39910966\n45124371\n42142153\n21029940\n53729445\n3154852\n53734570\n12439841\n73275146\n67298397\n90531870\n12106998\n95906095\n38144980\n99476544\n52999918\n66952762\n30846956\n52299651\n64649963\n64147107\n25369369\n77216333",
      "expected_output": "30\n12067053\n18332653\n77374371\n98836951\n59327594\n65028453\n73876254\n39910966\n45124371\n42142153\n21029940\n53729445\n3154852\n53734570\n12439841\n73275146\n67298397\n90531870\n12106998\n95906095\n38144980\n99476544\n52999918\n66952762\n30846956\n52299651\n64649963\n64147107\n25369369\n77216333",
      "type": "max_case_19",
      "description": "Maximum size array (N = 30)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "1\n100000000",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}