{
  "problem_code": "problems",
  "title": "Police Business",
  "tags": [],
  "text": "Cops are one of the most fascinating types of people. In the movies they are usually shown as fat and lazy, but they are so much more! Our today's specimen, officer Acab is, for example, very much into philosophy. All the criminals are afraid of Acab so when he appears in a city no criminals can come there. He's often engaged in car chases, so he usually asks himself the following questions: If I know a criminal has to travel from city a to city b, how many cities are there (other than a and b) such that there are no other cops there, and if I come to that city the criminal won't be able to accomplish his trip? If I sort those cities by distance from a, which one will be the k-th in the sorted list? How many roads are there such that there are no other cops on them, and if I'm present on that road the criminal won't be able to travel from a to b? Which is the k-th such road if I sort the available roads by their distance from a?Given a list of bidirectional roads that connect the cities write a program that will answer Acab's questions. In the beginning we know that there are no other cops in any of the cities. There will be one or more paths between each pair of cities.Sometimes Acab's cop-friends contact him to tell him they have entered a city or road. There is never more than one cop present in a city or on a road. Thus, when a road or city is reported for the second time, we assume the cop has left there. This only means that after each even report of the same city or a road there are no cops there, and for odd reports there is a cop there.Note:we define the distance of a road from a city as the minimum of the distances of its endpoints from that city. Even though Acab is a good cop, he doesn't have any special powers such as multilocation, so he can only be present in one city at a time. If you, for some reason, find two cities or roads equidistant from the city a, output the one with the smaller index.Also, the other cops aren't as good as Acab, so they only block Acab from visiting a city, and not the criminals.InputThe first line of input contains two integers N and M (1 ≤ N ≤ M ≤ 100000).The next M lines contain a pair of integers a and b (1 ≤ a, b ≤ N).All the cities are numbered from 1 to N.The next line contains a single integer Q (1 ≤ Q ≤ 200000).The next Q lines contain queries. There are six possible types of queries:1 n   -  a cop has contacted Acab to let him know he's in city n2 e   -  a cop has contacted Acab to let him know he's on the road e3 a b  -  tell Acab how many cities he can block the criminal with4 a b  -  tell Acab how many roads he can block the criminal with5 a b k  -  tell Acab which is the k-th city he can block the criminal with6 a b k  -  tell Acab which is the k-th road he can block the criminal withOutputFor each query of type 3, 4, 5 or 6 output a single line containing the answer. If for a query of type 5 or 6 k is greater than the actual number of possible cities, output -1. Also, in queries 2 and 6 the number of the road is assumed to be its index from the input.ExampleInput:9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2Output:5421122Explanation:In the first query, there are 5 blockable cities: 4, 2, 1, 3, 8.In the second query there are 4 blockable roads: 6, 1, 2, 10.In the third query the second city is 2 (4, 2, 1, 3, 8).In the fourth query the second road is 1 (6, 1, 2, 10).In the fifth query we've been reported there's a cop in city 2.In the sixth query the second blockable city is 1 (city 2 already contains a cop).In the seventh query we've been reported there's a cop on road 1.In the eighth query the second blockable road is 2 (road 1 already contains a cop).In the ninth query we've been reported the cop from city 2 has left.In the tenth query the second city is 2 again.",
  "sample_input": "Input:9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2Output:5421122",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ACAB",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "9 101 21 32 42 54 54 63 73 87 88 9103 6 94 6 95 6 9 26 6 9 21 25 6 9 22 16 6 9 21 25 6 9 2",
      "expected_output": "5421122",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 6 4 3 2 9 8 9 6 3 1 6 5 4 7 9 10 1 2 8 6 6 7 2 4 10 7 7 5 6 7 8 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 6 3 3 1 10 2 1 1 7 2 3 7 5 9 9 7 5 9 2 8 9 3 5 7 9 5 2 3 10 10 1 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 1 1 3 4 9 5 2 5 3 2 3 1 9 2 5 4 1 7 4 8 2 7 6 7 3 7 3 8 2 8 10 8 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "29 59 74 88 63 27 83 98 45 62 21 63 18 50 95 66 46 61 97 44 87 61 85 95 9 81 53 25 91 42 99 16 31 47",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "27 7 1 4 25 96 41 10 89 93 70 97 11 88 31 64 3 71 92 26 6 17 100 95 10 55 94 16 43 34 21 44 53 80",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 29 28 27 92 41 94 72 24 57 75 76 75 77 93 94 11 31 44 96 95 68 15 90 44 35 34 77 39 15 78 30 91 35",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 90 89 47 62 89 4 93 43 8 90 54 19 48 8 60 37 81 38 11 26 85 13 67 2 56 69 12 57 22 30 74 10 58",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 32 72 90 54 74 45 54 56 79 5 93 47 4 7 23 26 97 11 34 32 4 76 74 15 81 76 49 72 70 34 50 9 41",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "246 259 408 148 78 139 139 260 358 71 496 223 460 65 404 394 304 452 392 166 438 152 239 130 491 360 150 346 418 404 85 111 499 112",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "320 455 295 152 134 413 295 139 468 157 110 494 295 69 480 264 363 324 112 224 276 350 55 453 182 406 182 285 474 389 286 438 317 445",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "79 407 189 98 200 377 123 149 296 283 262 136 473 346 249 62 78 267 440 439 255 271 264 200 196 298 474 289 252 130 281 108 494 498",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "254 491 258 262 375 420 123 349 306 290 51 429 231 241 484 247 257 446 431 288 144 134 90 371 381 427 304 412 432 179 183 221 227 54",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "304 430 121 61 322 488 292 102 423 471 67 140 195 499 306 471 221 451 375 338 126 318 94 423 332 354 244 78 370 113 215 462 108 444",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "349 94 91 492 346 74 378 233 217 476 192 207 174 451 101 62 484 181 271 298 485 338 440 324 478 334 77 198 389 68 197 360 351 230",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "89 437 242 146 314 408 53 322 489 57 366 340 190 61 112 337 305 282 424 334 100 326 263 394 472 242 172 150 56 138 291 84 120 61",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 1000 999 2 2 2 1 999 999 1000 999 999 999 1000 999 1 1000 999 999 1000 1000 999 1 1 2 1 1 1000 1000 2 1000 1000 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 2 1000 999 2 1 1000 1 1000 2 1000 1 1 1 999 1000 1 1000 2 2 1000 1 2 1 2 999 2 1000 1000 999 999 999 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:48"
}