{
  "problem_code": "problems",
  "title": "The Revenge Of Anti Hash",
  "tags": [],
  "text": "Given a baseBand a modulusM, the polynomial hash of a stringS, consisting of only lowercase letters(a-z)is defined as below:int GetHash(string str, int B, int M){\r\n \tlong long hash = 0;\r\n \tfor (auto chr: str)\r\n \t \thash = (hash * B + chr - 'a' + 1) % M;\r\n \treturn hash;\r\n}In other words, first the letters of the string are replaced by numbers (equivalent to their position,'a'gets mapped to1,'b'to2, ... and'z'to26). This is then considered to be a number in baseB(the rightmost number is the least significant digit), and the value of this number taken moduloMis called the polynomial hash of the string.Limak the bear loves to hack other contestants in Codeforces. After the recent educational round, he came to know that his friend Swistak used the polynomial hash function stated above to solve the hardest problem! And believe it or not, he was the only one to solve that problem which eventually made him the round champion! Limak is very angry, how can Swistak solve a problem which Limak himself couldn't solve? And worst of all, Swistak used hashing to solve that problem. Limak believes people who use hashing have no real skill, getting 'Accepted' just implies getting lucky, nothing more.Limak is just a little bear, he is not very good at solving problems. But after hours of scratching his head, he was able to come up with a solution involving birthday attacks. That should hack Swistak’s solution since educational rounds allow hacking for 24 hours after the round ends. And voila! When he coded it later that night, he was finally able to come up with a case that broke Swistak’s solution. And down he goes. From the top place to 153, even below Limak! Limak was overwhelmed with joy.When Swistak woke up the next morning and casually checked the rank list he was furious. He could not believe what he saw, rolling his eyes in disbelief. He was the only contestant to solve the last problem and that earned him the top place. But alas! No more, because someone hacked his solution and he dropped down more than a hundred fifty places. He clicked on the problem to see who hacked him, and his disbelief grew to anger and frustration when he realized it was his friend Limak! He couldn’t believe his eyes. “I thought he was my friend, how could he do this to me?”, he wondered. He vowed to take revenge. He modified his solution to use double hashing. But just to be extra sure so that Limak can never hack his solution ever again, he hashed it a few more times resulting inKtotal hashes. Then he submitted his solution which passed the tests and Limak’s initial hack as expected.Afterward, he rushed to Limak’s place and challenged him to a duel. He claimed Limak was jealous and just got lucky while hacking his solution and has no real hacking skills. Feeling overconfident with his new solution, Swistak challenged Limak to hack his new solution and suggested he will retire from competitive programming if Limak can hack his new solution. But if however, Limak fails, then Limak must retire instead!Limak, being provoked like this, takes up the challenge without thinking it through. But he has no clue how to solve it, he is just a little bear after all. He thought about it throughout the whole day but has no idea how to crack it. With just 4 hours left before the hacking phase ends, he desperately turns to you for help. He knows this isn’t exactly fair, but nothing’s fair in love and war as they say and he doesn’t want to retire from competitive programming. Not now and not ever. Please help Limak solve the following problem and beat Swistak once and for all, thereby saving his career.Limak will give youKpairs of numbers,(B1, M1), (B2, M2), … , (BK, MK). Each pair consists of a baseBand a modulusM. These are the numbers Swistak used to hash stringsKtimes in his new solution. Limak needs you to findtwo different stringsconsisting of lowercase letters only. The strings must have the same hash value when hashed with each of theKbase/mod pairs with the above described function. Since Codeforces will not accept just any string of arbitrary length as hack inputs, each of the strings also need to be non-empty and cannot exceed more than65536characters in length. They can be of different lengths though.InputThe first line containsT, denoting the number of test cases. ThenTtest cases follow. The first line of each case contains an integerK. The nextKlines consist of two integers(Bi, Mi). These are the base and mod pairs Swistak used in his hash function.Constraints1 ≤ T ≤ 201 ≤ K ≤ 1232 ≤ Bi≤ 2561 ≤ Mi≤ 256OutputFor each test case, output the required two strings separated by a single space. If there is more than one solution satisfying all the above criteria then you may output any of them. You can be assured that there will always be at least one pair of strings.Sample Input1\r\n1\r\n32 1Sample Outputhello worldChallengeYou might also enjoy:Anti HashAnti Hash II",
  "sample_input": "int GetHash(string str, int B, int M){\r\n \tlong long hash = 0;\r\n \tfor (auto chr: str)\r\n \t \thash = (hash * B + chr - 'a' + 1) % M;\r\n \treturn hash;\r\n}",
  "sample_output": "1\r\n1\r\n32 1",
  "link": "https://www.spoj.com/problems/AHASHREV",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "int GetHash(string str, int B, int M){\r\n \tlong long hash = 0;\r\n \tfor (auto chr: str)\r\n \t \thash = (hash * B + chr - 'a' + 1) % M;\r\n \treturn hash;\r\n}",
      "expected_output": "1\r\n1\r\n32 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "jddr wdyyisvnvd n yvync o n tyhe\n8\na qyl atpj ytkyw xmyn\np nch lvykx yvq\n4\nkbgsz m oz gsy t r jlvmo vv zu dw oi h y\nwkpjxo gcoqf\nm",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "yshvb aaqepi wl qb m ezomd oyyyc\n3\no jo pdpdb jacp cbli\nimrf yzbj xdo i\n7\nwagna jzn vwgsb mjy hond sgm frbd cryag es zvdn czqzu xfl j\nxtn e\nkl",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "aijtu kvntkqzgd o c gqb w b\n4\nfutrv quvsc coft dmtp krtkh\nft p lrlzh dn\n4\njn raze wzdw yndj f wewlc zt tuldw v sbw f v mq\nvi c\nu",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "axl v fe ma hku endmp c\n20\nzw w p g hxx\nfkwll e woav qqi\n83\nkpcg omn czsuo qgtw o crg d vbo usm x g mr lffc\nobhqgh zqpb\nch",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ce bogqnq e sl ytjfq rsop a\n86\njciuy rw wg zo yaop\niwwir saiyn dcvbl hqcz\n8\nuwk fqxu nfqi txmid qw c jgftb ah luoh ulaiv y jg noe\njcjboj mki\ni",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "vln qyw jvhv sbxwc wgp bf lep\n8\ntq guzoo ph emk ocum\nepprp yyy fowml icj\n86\nzxn jt gtm gxoh a z mlj m o op kkiiz rtq xj\nvb bpvz\nf",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "g fjvphbjhmijpnl kgz v cekjb je rq\n99\nkv oiewh z j xssh\nz i qow x\n70\ndsequ rqvsw ug ocsv fkq xpndj iept eqkk jxhc ufmwv d gvfzh ndq\njo tdec\nni",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "ax jz zx gfsta w z rc\n75\nz joqi gtl of bjep\nfj epjh sg lay\n67\ntypcg wgevk zd azr wiwdz madsd oewlv gz za asku zwdew rh sdman\nvzwmnb f\nj",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "r oenhqcezjr n gxaxl v u zd\n119\nzel en kud kh c\nwzx a ruagx nr\n405\njg gd cberm yfwo mr hfsd wmt unoe c ter ndp i tcqm\nz acyzz\nqe",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "nczhu zganbpgeou u igws ykjrt oodzo jfag\n168\nlwklq vt ka tpfv yoq\nfvzl kcfz d yhxk\n302\nmlw b trqw en wdh jhx e beb sudka qpv ad bpyq gph\nb gko\nb",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "m z pz xg am fhzr dd\n414\ngv yi asuj orghj vmn\noigh gdwer t popf\n167\nqbk mirq qca q kqdb uvzwx otw mfob jjyq pchvx rden olsj pjcm\nw v\nbo",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "etnkf cjrcjtpuinw aan vs nv v tbce\n121\nv r fzwvx uhv kzaze\nen jnmnv vfsba um\n62\njnic zifu gwc myhjz zk ixu bk blhu whpk epcg m jxhzy mj\nlnyp fye\nq",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "l exanppyzdrwwa am xhe myfx kctg i\n431\nlnay e jegij r tcbr\nr rpa ttuyh z\n387\nybocf oyac q bmscz mzc yovh somd goqkj ou bpvyu d qki oqqx\nb wqd\ny",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "kjemk fs qs sw gloo soq dxora\n428\np k omj uenqx z\nryrd myhpk ka wm\n248\ngm rlij jx zmfr ke zofx zj zny he vysk l nvse m\nguc qjhmk\nr",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "al pa hzc g wkto es paw\n376\nor wib b deujd vbz\nsk ys qspw k\n59\np hrech eij kbjx ein uiaso ot w b rre gy xnyh vfvrm\ntuowio jqh\nq",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "x iuolw oirg e ixc kqxn nk\n1000\na pn hwsf ufjb rp\nva px dki oi\n1000\nb v j fchy o sa b avs ogmwf ozv y z assfz\nsrbnv yec\npg",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "um akqa nsyf aresg zp rjwmh ygbg\n1000\nmkl y gbs imshf hep\nwp sw lmslx ffc\n1000\nw ql ah mzm s gip gpuzk qeb hgrp evm zsm m qnl\nht cihau\ncn",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "jnuio zenrasbkw xw nsxvm zope cjt wzslj\n1000\nihm akgem litbp nro sb\nkpsf nda w tq\n2\nuksa hozy obgn xj veau wo eo bz hcvxw lsfp kemh vbro eej\ngcoz r\nmw",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "xvi rppalwh kpjt ua z n lloit\n1\netjqi pzak o f w\ngj uw e ps\n999\nq utwwk ssmv yzgi i xqtc droc rno duo pk ui m qb\nk eq\nas",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:33"
}