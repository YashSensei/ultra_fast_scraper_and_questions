{
  "problem_code": "problems",
  "title": "Roman Patrollers",
  "tags": [],
  "text": "In ancient times, patrollers were used to ensure that all the cities of the Roman Empire were\r\nunder control. A patroller’s job consisted in continuously visiting the cities of the empire, trying\r\nto minimise the interval between two visits to each city. The Military Society (MS) wants to\r\nsimulate the behavior of one such patroller to see how effective they were.Each cycle of the simulation corresponds to one time unit. The instantaneous city idleness\r\n(ICI) for a city X after T cycles of the simulation is the number of cycles elapsed since the\r\nlast visit of the patroller to the city X (i.e. the number of time units the city X remained\r\nunvisited). All of the cities have initial instantaneous city idleness equal to zero at the start of\r\nthe simulation. The instantaneous empire idleness (IEI) after each given cycle is the sum of\r\nthe instantaneous city idleness of all cities after that given cycle. Finally, the empire idleness\r\n(EI) for an N-cycle simulation is the sum of the instantaneous empire idleness after each of\r\nthe N cycles of simulation.After visiting a city X, the patroller always chooses to visit the neighbour city Y with the\r\nhighest instantaneous city idleness (if more than one city has the highest idleness, the one with\r\nthe lowest identifier is chosen). Cities X and Y are neighbour if there is a road linking the two\r\ncities directly, without going through any intermediate city. In the beginning of the simulation,\r\nthe patroller is located in one of the cities, and is given a map of the Roman Empire containing\r\na description of all the roads in the empire, indicating the length (in kilometers) and which two\r\ncities each road connects. A road between cities X and Y can be used both to go from X to Y\r\nand from Y to X.Assuming that a patroller travels one kilometer in one time unit (one simulation cycle) and\r\nthat the time to visit a city is negligible (equal to zero), MS asks you to determine the empire\r\nidleness after an N-cycle simulation.For clarity, consider the example of an empire which contains 3 cities (1, 2 and 3) and two roads\r\nof length 1 km. The first road connects cities 1 and 2, while the second road connects cities 2\r\nand 3. Below you find a trace of a 3-cycle simulation for such a scenario, considering that the\r\npatroller starts at city 1.Start of the simulationPatroller at: 1ICI1 = 0, ICI2 = 0, ICI3 = 0IEI = 0EI = 0After cycle 1Patroller at: 2ICI1 = 1, ICI2 = 0, ICI3 = 1IEI = 2EI = 2After cycle 2Patroller at: 1ICI1 = 0, ICI2 = 1, ICI3 = 2IEI = 3EI = 5After cycle 3\r\nPatroller at: 2ICI1 = 1, ICI2 = 0, ICI3 = 3IEI = 4EI = 9Therefore, for such a scenario, after 3 simulation cycles the empire idleness is 9.InputThe input consists of several test cases. The first line of a test case contains four integers\r\nC,R,N, and S, indicating respectively the quantity of cities in the empire (2 · C · 1000), the\r\nnumber of roads (1 · R · C(C − 1)/2), the number of cycles to be simulated (1 · N · 1000)\r\nand the identifier of the starting city of the patroller (1 · S · C). Each city is identified\r\nby a distinct integer from 1 to C. Each of the following R lines contains three integers X, Y\r\nand D describing a road; X and Y represent cities (1 · X 6= Y · C) and D represents the\r\ndistance (1 · D · 1000), in kilometers, of the road that connects X and Y directly, without\r\npassing through any other city. Each pair of cities X and Y will appear at most once in a road\r\ndescription. You can assume that it is always possible to travel from any city to any other city\r\nin the empire using the roads available. The end of input is indicated by C = R = N = S = 0.OutputFor each test case in the input, your program must produce one line containing the empire\r\nidleness after the N-cycle simulation.ExampleInput:2 1 1 1\r\n1 2 2\r\n2 1 2 1\r\n1 2 2\r\n2 1 3 1\r\n1 2 2\r\n2 1 4 1\r\n1 2 2\r\n3 2 3 1\r\n1 2 1\r\n2 3 1\r\n0 0 0 0Output:2\r\n4\r\n8\r\n10\r\n9",
  "sample_input": "Input:2 1 1 1\r\n1 2 2\r\n2 1 2 1\r\n1 2 2\r\n2 1 3 1\r\n1 2 2\r\n2 1 4 1\r\n1 2 2\r\n3 2 3 1\r\n1 2 1\r\n2 3 1\r\n0 0 0 0Output:2\r\n4\r\n8\r\n10\r\n9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SA04C",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "2 1 1 1\r\n1 2 2\r\n2 1 2 1\r\n1 2 2\r\n2 1 3 1\r\n1 2 2\r\n2 1 4 1\r\n1 2 2\r\n3 2 3 1\r\n1 2 1\r\n2 3 1\r\n0 0 0 0",
      "expected_output": "2\r\n4\r\n8\r\n10\r\n9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 8 1 7\n4 1 3\n1 5 5 5\n6 10 2\n5 6 9 5\n5 8 4\n1 1 8 4\n8 5 8\n6 7 5 4\n8 9 10\n8 6 7\n5 1 8 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 8 10\n9 1 9\n8 9 4 6\n9 8 10\n7 3 2 5\n5 6 10\n9 7 6 8\n6 5 2\n3 1 9 3\n1 10 5\n7 7 9\n6 6 10 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 8 4 2\n9 6 9\n2 7 8 5\n8 1 2\n3 7 5 6\n5 4 9\n2 5 6 7\n9 8 2\n1 2 5 6\n4 6 1\n7 1 4\n2 8 3 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 42 46 17\n96 42 86\n100 39 62 94\n48 35 87\n14 58 62 27\n78 89 71\n41 97 82 79\n6 32 72\n22 34 95 82\n88 26 98\n4 53 71\n55 12 20 31",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "17 46 5 1\n42 96 96\n54 96 35 49\n54 25 83\n82 81 29 11\n30 32 90\n32 18 51 20\n34 98 84\n41 73 90 48\n1 10 35\n23 20 85\n67 38 38 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "14 35 17 95\n55 95 2\n90 96 6 10\n93 86 14\n91 7 84 1\n65 65 30\n56 3 58 25\n38 47 7\n15 52 82 65\n76 93 16\n92 31 25\n32 70 22 58",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 95 46 38\n54 53 47\n94 83 3 86\n9 87 74\n14 62 69 13\n57 15 63\n79 10 18 62\n21 52 17\n1 70 9 11\n54 86 82\n63 25 67\n12 26 62 72",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "63 25 45 85\n3 22 26\n22 83 24 3\n55 63 31\n56 95 6 28\n8 34 40\n5 36 90 97\n57 9 14\n51 72 87 61\n41 36 41\n35 21 72\n60 56 10 48",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "94 68 196 122\n68 380 209\n301 443 230 211\n340 80 176\n211 62 271 300\n203 356 276\n311 455 354 489\n208 367 273\n272 119 468 350\n53 445 57\n438 245 319\n84 136 349 415",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "250 167 449 104\n314 444 121\n169 167 125 296\n95 456 369\n219 236 333 439\n204 439 495\n494 103 354 255\n67 449 343\n242 270 96 478\n374 237 59\n500 414 348\n490 412 448 346",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "432 164 378 357\n343 58 336\n374 86 54 221\n309 84 367\n483 290 395 484\n110 249 433\n308 280 471 397\n55 447 349\n222 141 149 361\n178 471 333\n203 130 500\n367 471 261 278",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "237 393 130 479\n401 451 143\n87 367 279 310\n218 449 453\n415 310 457 290\n432 398 334\n162 456 407 371\n228 163 170\n125 296 143 417\n361 418 117\n179 117 74\n466 481 108 182",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "424 246 350 305\n185 224 446\n211 257 342 120\n174 396 248\n192 121 392 252\n71 126 410\n114 464 373 138\n499 480 417\n332 480 195 355\n453 361 294\n492 252 210\n87 65 469 424",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "497 151 83 164\n108 401 500\n305 162 212 344\n375 452 92\n84 491 193 256\n72 196 304\n226 383 165 305\n110 457 78\n480 294 377 400\n73 347 473\n224 420 249\n315 255 102 425",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "104 82 313 405\n227 234 272\n125 195 251 211\n362 475 361\n261 278 105 212\n361 237 312\n297 319 386 115\n387 344 319\n103 392 308 318\n277 439 362\n54 79 225\n486 284 169 221",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000 999 1\n1 1 1\n1000 1000 1000 999\n2 2 1000\n999 999 1000 999\n1000 2 1000\n999 999 999 1\n2 999 1\n1000 999 999 1\n1 999 1000\n2 2 999\n999 1000 999 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000 1000 2\n1000 2 1000\n2 999 1000 999\n999 2 2\n1 1 2 1000\n999 1 1\n2 1000 1 1000\n1000 999 2\n999 2 2 2\n1000 1000 1000\n2 999 2\n2 1 2 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:04"
}