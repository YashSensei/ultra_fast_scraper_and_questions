{
  "problem_code": "problems",
  "title": "DOJO Corridor I",
  "tags": [],
  "text": "There's a long rectangular corridor in the hall's dojo, one place is already taken by a magic hanjō (1×1 square). You have to put tatamis (1×2 rectangle) in order to cover exactly the rest of the corridor. Sometimes it's possible, sometimes not!InputThe input begins with the number T of test cases in a single line. In each of the next T lines there are two integers : N, M the size of the corridor, I, J coordinates of the magic hanjō, and K the modulo for the output.OutputFor each test case, print the number of possibility to do the job, modulo K.ExampleInput:3\r\n1 3 1 3 100\r\n2 3 2 2 100\r\n3 7 1 3 100Output:1\r\n0\r\n56Constraints1 ≤ T ≤ 300001 ≤ N ≤ 41 ≤ M ≤ 1091 ≤ I ≤ N1 ≤ J ≤ M1 ≤ K ≤ 109Uniform, independent, random input in the range.Time limit is set to allow one half kB of python3 code to get AC.Edit(19/1/2015, after cluster switch) : now my old code ends in 0.16s using PY3.4.Edit(11/2/2017, after compiler update) : new TL. My old code ends in 0.09s using PY3.5.",
  "sample_input": "Input:3\r\n1 3 1 3 100\r\n2 3 2 2 100\r\n3 7 1 3 100Output:1\r\n0\r\n56",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOJ1",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "3\r\n1 3 1 3 100\r\n2 3 2 2 100\r\n3 7 1 3 100",
      "expected_output": "1\r\n0\r\n56",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n7\n4\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n10\n1\n1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "18\n66252409\n87424504\n23911847\n90607619\n92546028\n85309929\n88634730\n38056221\n6540584\n68596286\n68828809\n11071425\n91455024\n71762957\n21725420\n85742072\n45883319\n49566741",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n45949362\n2732981\n44736219\n83585700\n58228854\n18106500\n73813639\n74933443\n78770924\n5985431\n90108408\n92971709\n87093001\n12314848\n63767699\n28145499\n17348527\n196847",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n52571457\n36234537\n88170219\n33269609\n80752817\n44890325\n13385897\n46636047\n38455848\n7416074\n33441272\n55149\n58612308\n38904642",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n11195255\n68929473\n80638397\n71248655\n59615095\n57216236\n84854497\n95714086\n45231967\n5825148\n21429049\n65328252\n39920106\n19060082",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n63330176\n68221072\n13814628\n72469540\n82851055\n24327715\n58320481\n28866315\n77974462\n30839756\n64314938\n51899848",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "27\n4851\n16520\n3879\n19995\n68868\n17371\n87183\n11097\n66832\n74353\n46037\n29930\n56992\n35458\n34940\n98586\n13181\n91761\n58350\n75342\n73954\n96999\n30191\n94778\n33352\n28523\n46188",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n69154\n27581\n29419\n84004\n89353\n45418\n2363\n75903\n45419\n46391\n88570\n38273\n68056\n1561\n32298\n87949\n72309\n39123\n81365\n44237\n27902\n18337\n60164\n10071\n46403\n10058\n54866\n64275\n5179\n31423\n72424\n66114\n90243\n86292",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "36\n13909\n95465\n60785\n73637\n51731\n36691\n28750\n5608\n84907\n1890\n65231\n935\n17018\n75283\n78964\n14866\n15193\n26502\n51537\n33256\n58049\n21355\n91607\n12609\n38405\n99938\n91260\n43690\n88868\n21176\n18383\n98016\n62972\n47659\n25743\n53877",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n64845\n4248\n22476\n12867\n18529\n9593\n2834\n30562\n910\n6952\n73362\n59879\n45354\n78295\n47858\n18825\n27136\n88284\n7387\n54004\n65371\n14718\n74115\n9546",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "36\n4909\n84466\n72393\n92511\n69563\n6844\n4294\n1800\n54220\n54685\n17270\n82652\n40370\n89058\n3884\n39419\n66873\n22364\n84424\n24076\n85026\n57842\n5420\n87059\n32630\n46139\n84888\n1803\n17229\n34685\n90266\n26524\n50945\n23797\n23575\n3603",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "40\n34324\n50114\n38191\n21753\n97559\n22004\n61457\n32909\n24763\n19259\n15085\n30856\n25079\n90460\n45849\n45639\n67771\n25016\n40360\n93854\n26986\n36066\n1300\n72466\n50516\n71662\n63592\n99140\n22087\n22732\n91266\n33609\n39913\n80608\n94043\n89091\n77802\n66187\n62302\n91779",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n33691\n59436\n78303\n24027\n63968\n91645\n64902\n92749\n68697\n86767\n98006\n91299\n91634\n30857\n3971\n27819\n19752\n38718\n98750\n1458",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n7188183\n17943017\n13305590\n32479525\n68355423\n65979843\n17136838\n14367247\n58499571\n11838529\n80351050\n55577666\n5996506\n75498914\n46552226\n57020347\n21821827\n78318768\n90885181\n49081744\n50029546\n10695570\n91523056\n71558183\n85016279\n69355551\n62937347\n75695175\n67176387\n26928260\n62886269\n26789380\n86424153\n87107780\n22964380\n11561748\n20525660\n16033597\n71199058\n11171552\n41534446",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 41)"
    },
    {
      "input": "41\n93599967\n64815168\n26179088\n29113652\n24181525\n49358402\n97796801\n55505156\n92740946\n3276951\n23269053\n53102255\n84645642\n63592673\n68625172\n87890132\n4422443\n73124199\n50110381\n91922640\n45419991\n6714774\n86877551\n62927669\n17760858\n41664819\n93470902\n63524047\n37544874\n5625161\n7882485\n42455132\n83165311\n819769\n24551018\n94211520\n24177517\n59046229\n34756710\n52990034\n88163005",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 41)"
    },
    {
      "input": "2\n100000000\n88081473",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "41\n1\n46233791\n40296573\n100000000\n1\n24143512\n1\n1\n21192203\n14221702\n1\n100000000\n54878862\n10841350\n100000000\n1\n100000000\n1\n68786419\n1\n1\n100000000\n100000000\n49800571\n52955541\n1\n100000000\n1\n100000000\n1\n100000000\n100000000\n68120637\n86133090\n1\n100000000\n53235982\n66928675\n100000000\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 41)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}