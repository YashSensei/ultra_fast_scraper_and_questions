{
  "problem_code": "problems",
  "title": "To Poland",
  "tags": [],
  "text": "Little Russell and Mr. Fredricksen are embarking in a new journey  with their balloon house. After visiting South America and helping  Kevin, the Snipe, they decided to travel to Warsaw, Poland where new  specimens of birds might be found.Their trip is divided into  several parts. Due to pressure levels and wind speed, each part of their  journey requires that their house is equipped with a minimum number of  balloons. As a good boy scout, Russell has already figured out how many  balloons are necessary to go through each of the parts. The problem is  that atmosphere conditions change and Russel is having trouble  determining how many balloons the house should be equipped with to go  through continuous parts of the journey, so they don't have to fill up  more balloons than necessary.To help out Russell, you are to develop a program that must deal with the following queries:Russell has added or removed balloons from the houseThe minimum number of balloons at certain part has changedHow  many balloons should be added or removed so that the house goes through  continuous parts of the journey with the minimum necessary number of  balloons?InputThe first line contains a numberT(T≤ 100), the number of testcases.Each testcase starts with numbersN(1 ≤ N ≤ 105) andM(0 ≤ M ≤ 103) whereNis the number of parts in the journey andMis the initial number of balloons in the house. ThenNnumbers follow, one per line, where each numberNi(0 ≤Ni≤ 109, 0 ≤i<N) represents the initial number of balloons necessary to go through parti.On the next line there is a numberQ(1 ≤ Q ≤ 105), the number of queries that you should answer. Each of the nextQlines contains a query in one of the following formats:\"A K\" -  whereAis the actual character 'A' (quotes for clarity) andK(-103≤K≤ 103)  is the number of balloons that have been added or removed from the  house.  It is assured that the total number of balloons in the house is  never negative;\"BJK\" - whereBis the actual character 'B' (quotes for clarity),J(0 ≤J<N) is the number of the part of the journey (0-indexed) andK(0 ≤K≤ 109) is the new minimum number of balloons required to go through partJ;\"C I J\"- whereCis the actual character 'C' (quotes for clarity), and[I, J], 0 ≤I≤J< N$ is the range that Russell would like to query. For each query of this type, print the difference between the number of balloons currently in the house and theminimumnecessary to go through all the parts betweenIandJinclusive. Note that this query doesn't change the number of balloons in the house.OutputFor each testcase print one line with \"Testcase X:\" (quotes for clarity) whereXis the number of the testcase (0-indexed). For each query of the type \"C I J\"  print one line with the difference between the number of balloons  currently in the house and the minimum necessary to go through all the  parts betweenIandJinclusive.Print one blank line after each testcase.ExampleInput:23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1Output:Testcase 0:6Testcase 1:687",
  "sample_input": "Input:23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1Output:Testcase 0:6Testcase 1:687",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TOPOLAND",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "23 115 2 41C 0 23 1116 2 175C 0 2A -2C 1 2B 0 0C 0 1",
      "expected_output": "Testcase 0:6Testcase 1:687",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10 10 2 4 6 5 10 7 2 9 9 10 6 3 8 3 3\n7 4 6 rbf 2 4 1 3 k 3 f ms 1 qrn 4 lmh 2 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 2 9 5 6 6 1 2 3 10 9 6 10 9 8 2 8 5\n1 2 8 dbwk 9 8 7 4 nynjn 10 nejc mfw 3 mfq 7 g 9 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 1 7 1 6 3 1 3 3 6 9 2 1 10 8 10 1\n4 7 5 ajdrf 6 10 6 7 ygxqi 4 vavia lgne 3 o 7 ayciq 3 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "49 70 80 44 48 25 52 87 37 38 50 81 97 51 94 86 27 14\n42 74 91 gr 3 3 34 55 mf 65 q lgv 61 ng 79 v 2 8",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 80 28 88 95 62 91 87 87 48 73 57 9 81 72 95 23 73\n77 34 66 r 36 94 1 13 m 80 i jtqaj 21 jjtfn 29 cmau 55 20",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "70 41 47 32 91 34 45 8 75 75 83 87 21 86 37 47 27 71\n27 1 51 ltmp 6 71 26 70 cp 59 an dcq 2 zpq 79 bwfn 70 45",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "48 64 93 17 10 14 67 36 6 26 9 97 37 46 84 25 9 81\n68 79 83 nvnd 60 72 31 48 hijim 81 wa l 31 git 31 y 74 18",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 87 66 2 26 84 58 40 78 96 83 18 93 11 57 46 97 31\n55 5 35 lcy 27 36 97 4 nhym 7 lpsvu dw 33 dsm 38 q 2 49",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16 43 22 23 47 42 30 41 52 48 48 10 52 20 14 18 6 25\n21 39 18 ap 21 7 37 10 uswq 32 err xl 29 ixo 39 a 46 24",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "12 14 8 26 21 21 38 49 5 19 35 23 5 46 14 32 28 12\n36 19 52 kttu 34 38 26 30 yz 50 zxj bc 5 en 38 kuh 21 39",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 23 33 7 20 15 5 9 23 49 17 16 33 27 41 52 8 45\n35 23 28 ctp 7 45 17 13 foqzq 8 idr m 50 xwlp 10 hw 31 47",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "19 42 33 15 43 33 51 39 52 22 35 18 34 43 44 36 5 6\n26 8 48 snqim 33 17 31 52 cqipx 44 pymf bckm 44 x 51 jt 50 28",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 14 39 37 46 30 31 22 13 37 42 31 7 27 45 7 36 39\n30 13 39 epgo 10 9 47 24 ejg 16 tjww ffptw 14 dl 41 xv 34 34",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14 18 48 39 46 29 41 33 42 30 51 43 14 13 45 44 15 45\n32 6 31 f 27 22 36 17 f 28 njs z 51 vlool 46 qio 7 46",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "52 22 28 19 30 21 26 39 41 21 15 30 47 15 51 32 24 24\n9 25 35 knjmg 43 11 35 26 mmf 24 lvt opv 31 i 43 eqxbv 31 6",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\n105 105 105 rv 105 105 105 105 b 105 n pxd 105 igpxw 105 p 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\n105 105 105 ouiug 105 105 105 105 eqtp 105 crz yzjo 105 x 105 fs 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 104 2 1 2 105 2 2 104 105 1 2 2 2 2 2 105 2\n2 2 1 kwwk 104 1 1 104 sccpt 104 x ejjjv 105 pc 1 lrk 1 105",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 1 1 104 104 1 2 105 1 104 104 104 105 105 1 105 2 104\n1 104 2 j 1 1 105 1 ljgub 2 kvdh h 105 igkbp 105 hbtx 105 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}