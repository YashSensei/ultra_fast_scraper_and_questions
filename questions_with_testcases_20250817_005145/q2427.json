{
  "problem_code": "problems",
  "title": "Highway",
  "tags": [],
  "text": "As we all know, every day, there are hundreds of trucks passing through the highway. As some of the trucks might carry several tons of goods, the highway will be damaged unless it is frequently repaired. The administration of highway is worried about this, so it invented repairing cars to ensure that the cars can pass through the highway.The highway has an initial durability. If a truck with x tons’ goods pass the highway, its durability will be decreased by x. Once the highway’s durability is less or equal to zero, it will be broken and can never be repaired. The trucks can’t pass through the broken ones.There are two kinds of repairing cars: T1 can increase the highway’s durability by r, T2 can increase the highway’s durability to p, if the highway’s durability is less than p. Although the repairing cars can pass through the broken parts, the broken parts can’t be repaired.InputThe input consists of several test cases.For every test case, there are three integers N (1<=N<=100000), M (1<=M<=100000), I (1<=I<=1000) in the first line, indicating the highway’s length, the numbers of cars and the initial durability of the highway.Each of the next M lines described the information of cars in the following format:1 s t d -- There is a truck with d tons’ goods wanted to pass the interval [s, t]. You should check whether the truck can pass it. Notice that if the truck can't pass the whole interval, it will give up the whole passing; otherwise it can pass the highway freely, even if the highway will be broken after the truck’s passing.2 s t r -- A T1 car will pass the interval [s, t] and increase its durability by r.3 s t p -- A T2 car will pass the interval [s, t] and increase its durability to p.You can assume that 1<=s<=t<=N, 1<=d, p, r<=1000The input ends with N=M=I=0.OutputFor each case, you should return how many trucks can successfully pass the interval.ExampleInput:5 5 5\r\n1 1 3 3\r\n2 2 3 10\r\n1 1 3 3\r\n1 1 3 1\r\n1 2 3 1\r\n5 3 10\r\n1 1 2 5\r\n1 2 3 5\r\n1 1 3 5\r\n0 0 0Output:3\r\n2HintIn the second test case, the third truck can’t pass the road, because although the durability of interval [1, 2) and (2, 3] is larger than 0, in position 2, the durability is 0.",
  "sample_input": "Input:5 5 5\r\n1 1 3 3\r\n2 2 3 10\r\n1 1 3 3\r\n1 1 3 1\r\n1 2 3 1\r\n5 3 10\r\n1 1 2 5\r\n1 2 3 5\r\n1 1 3 5\r\n0 0 0Output:3\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HIGHWAY1",
  "scraped_at": "2025-08-17 00:34:02",
  "test_cases": [
    {
      "input": "5 5 5\r\n1 1 3 3\r\n2 2 3 10\r\n1 1 3 3\r\n1 1 3 1\r\n1 2 3 1\r\n5 3 10\r\n1 1 2 5\r\n1 2 3 5\r\n1 1 3 5\r\n0 0 0",
      "expected_output": "3\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 4\n8 7 9 9\n4 5 4 8\n1 10 8 5\n2 3 4 3\n10 4 8 4\n5 2 1\n4 5 4 9\n5 7 2 7\n4 1 7 8\n4 3 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 3\n10 2 5 10\n5 6 5 2\n2 3 7 4\n4 3 10 9\n3 10 4 3\n6 2 7\n1 4 4 6\n10 1 5 5\n1 5 1 2\n6 5 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 10 3\n7 2 3 10\n3 3 9 1\n1 6 4 2\n4 3 2 9\n2 9 1 3\n5 3 10\n3 7 9 8\n1 7 2 1\n10 10 5 1\n5 6 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "76 83 49\n43 33 67 94\n29 44 98 53\n67 48 88 33\n38 65 7 59\n61 97 45 28\n25 31 59\n99 33 20 71\n89 63 80 51\n65 82 62 88\n69 16 48",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 95 49\n27 14 85 72\n7 35 37 9\n67 18 60 96\n61 34 49 16\n13 97 17 81\n93 93 24\n94 3 19 5\n44 46 34 32\n11 25 36 88\n8 35 42",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "38 7 34\n95 93 52 82\n22 92 99 41\n84 58 30 69\n39 82 62 44\n80 13 34 21\n51 70 58\n80 19 54 29\n2 58 58 29\n93 74 67 69\n27 68 18",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 86 14\n84 21 50 95\n25 38 77 64\n7 5 49 34\n16 74 77 67\n25 83 69 68\n57 21 92\n17 57 34 64\n22 85 15 22\n10 29 93 62\n60 100 75",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 7 73\n94 10 13 43\n59 55 36 64\n31 3 12 46\n69 4 31 11\n85 80 73 7\n24 82 87\n18 10 15 52\n82 17 3 23\n46 22 77 98\n16 24 43",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "420 354 455\n434 366 235 485\n52 56 253 238\n232 239 233 420\n500 294 120 254\n130 303 344 208\n435 248 95\n119 262 461 168\n407 464 219 277\n156 348 347 117\n140 50 305",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "186 421 217\n214 108 103 201\n389 500 98 384\n410 197 204 94\n492 242 77 112\n368 271 175 429\n327 119 338\n351 404 227 431\n191 314 463 174\n335 208 482 365\n63 440 161",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "379 137 74\n431 170 291 308\n434 63 113 467\n268 368 204 462\n409 122 433 420\n470 483 226 388\n352 167 85\n470 403 222 55\n448 165 356 488\n191 209 122 176\n430 418 476",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "177 135 343\n440 347 453 284\n129 343 91 492\n237 419 225 198\n65 465 279 398\n403 379 368 251\n110 355 262\n308 471 259 214\n59 121 383 437\n99 242 146 370\n68 299 392",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "333 347 199\n247 483 389 415\n132 120 150 196\n110 218 479 413\n204 210 407 132\n239 256 290 342\n366 356 240\n67 136 263 199\n155 362 113 62\n196 218 208 212\n181 123 148",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "368 352 439\n50 241 360 237\n366 198 385 384\n189 67 345 375\n195 496 400 313\n67 65 144 407\n459 61 174\n382 498 405 260\n100 136 232 467\n235 477 161 304\n289 209 380",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "181 468 421\n412 247 194 176\n197 358 163 450\n266 138 183 463\n138 469 408 475\n88 312 271 198\n153 280 450\n310 186 417 448\n453 127 74 377\n482 276 109 254\n108 279 433",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 2\n1 1 2 1000\n1000 999 999 2\n2 1000 2 999\n2 1000 1 2\n999 999 1 1\n2 1 1\n999 1000 1000 999\n1 1 999 1\n999 999 1000 1000\n1000 1000 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1000\n1 999 1 1000\n999 999 2 1\n1 1000 999 1\n1 1 999 1\n999 999 2 999\n1 2 2\n999 999 999 999\n2 1000 2 2\n2 999 1000 999\n2 2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:35"
}