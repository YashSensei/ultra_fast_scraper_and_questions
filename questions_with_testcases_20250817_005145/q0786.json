{
  "problem_code": "problems",
  "title": "Ghost Town",
  "tags": [],
  "text": "You are givennnumbers initially. You have to maintain amultisetfor thosennumbers. Then you are givenqqueries. Queries will be one of the following types:1 x: Letabe the count of elements smaller than or equal tox. Addx+ainto the multiset.2 y: report the number of numbers in the multiset that are smaller than or equal toy.3 z: report thezth smallest number of the multiset. Note that if any numberdappears more than once, it is to be counted as many times it appears! Also, if z exceeds the number of elements in themultiset, that is answer for this query doesn't exist, print \"invalid\". Look at the sample input for clarification.NoteSince it is amultiset, it will also store duplicates. Also, lets say our multiset has elements 1, 2, 2, 3, 3, 3. then for z=3, answer would be2.Constraints1 ≤ n ≤ 1000001 ≤ q ≤ 1000001 ≤ x ≤ (109- 2 × 105)1 ≤ y, z ≤ 1091 ≤ Initial elements of the multiset ≤ (109- 2 × 105)InputThe first line will contain two integers, n and q, denoting the number of initial members of the multiset and the number of queries.Next q lines will be of he form:Type D :That is, the queries will be of the one of given 3 types and accordingly, you will be given an integer D.OutputYou have to print the output for query numbers2and3.ExampleInput:10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26Output:11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
  "sample_input": "Input:10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26Output:11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COUNT1IT",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "10 20\r\n7 35 44 25 15 10 21 42 12 33\r\n1 6\r\n1 39\r\n2 47\r\n2 96\r\n1 29\r\n2 40\r\n3 27\r\n3 5\r\n1 22\r\n1 44\r\n3 32\r\n1 28\r\n3 2\r\n2 39\r\n3 23\r\n2 31\r\n1 13\r\n1 50\r\n3 38\r\n2 26",
      "expected_output": "11\r\n12\r\n10\r\ninvalid\r\n15\r\ninvalid\r\n7\r\n12\r\ninvalid\r\n8\r\ninvalid\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1\n7 5 10 10 8 10 3 6 6 7\n7 4\n5 8\n2 9\n10 6\n6 10\n5 7\n6 8\n3 1\n4 4\n8 3\n1 6\n7 10\n5 9\n9 7\n4 7\n1 10\n9 10\n6 1\n4 7\n8 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 10\n7 5 5 6 3 3 9 7 10 6\n8 6\n1 2\n6 6\n5 5\n5 8\n2 5\n4 3\n9 4\n5 4\n8 6\n5 9\n4 2\n1 5\n4 10\n1 1\n2 4\n9 5\n5 6\n10 3\n10 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n6 4 1 4 8 8 10 6 7 5\n1 7\n8 6\n9 5\n4 7\n5 9\n3 1\n7 4\n2 4\n5 9\n10 6\n4 6\n3 2\n9 10\n3 5\n2 3\n1 4\n8 7\n8 10\n2 10\n1 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "87 44\n58 78 73 99 74 35 72 88 86 48\n62 78\n74 8\n65 33\n94 32\n45 32\n90 10\n16 64\n35 67\n59 99\n51 38\n54 64\n65 74\n29 25\n76 24\n32 86\n98 1\n14 51\n16 56\n58 23\n96 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "51 96\n54 44 80 45 23 63 40 100 90 66\n43 2\n41 98\n32 49\n49 7\n91 8\n38 31\n61 23\n55 59\n1 94\n79 60\n86 82\n35 82\n89 22\n64 91\n87 28\n44 75\n5 21\n38 35\n66 17\n6 17",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "50 14\n17 97 38 5 27 85 19 100 7 63\n16 71\n99 41\n30 40\n37 52\n54 9\n96 81\n65 33\n83 10\n36 54\n2 43\n67 4\n92 50\n21 1\n60 65\n92 50\n49 12\n70 38\n80 40\n27 82\n75 66",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "42 72\n51 41 66 6 44 21 86 94 4 78\n59 57\n4 55\n38 77\n70 41\n4 3\n97 74\n31 10\n37 56\n88 4\n96 55\n95 7\n86 39\n6 3\n49 91\n86 37\n7 75\n10 52\n85 65\n97 9\n93 41",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "69 24\n16 80 2 84 82 31 34 61 45 78\n15 96\n70 79\n95 27\n72 31\n66 21\n15 53\n31 19\n91 33\n26 47\n47 91\n78 15\n28 75\n45 40\n12 64\n26 53\n11 38\n54 59\n82 3\n11 32\n67 21",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "53148 187076\n328124 274853 251868 298853 104756 248980 55994 352322 302898 265092\n396311 66148\n276381 168370\n401272 198876\n263359 475696\n461776 295904\n93534 128576\n334571 288350\n321113 256467\n448715 179149\n142943 165404\n223249 430439\n267209 148665\n83679 362951\n364948 73265\n471703 446631\n462942 93716\n107159 357233\n119021 386418\n354063 259067\n112789 251292",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "428883 352605\n325718 345248 99496 366907 294504 498979 361527 355803 422750 129957\n200429 490898\n165019 133587\n232771 151085\n370628 126221\n316607 102253\n111821 171770\n330037 454716\n53707 153466\n404384 176841\n206461 108403\n154799 349212\n112715 91642\n206188 158288\n253937 115384\n140365 419971\n464432 313902\n188940 158995\n83044 276722\n497347 129305\n359351 363674",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "85202 425117\n129330 399398 479274 408198 402496 275242 402450 115528 433071 254286\n189107 491699\n420455 319104\n380046 225169\n469152 410377\n88054 351041\n151124 478417\n275352 195015\n313404 91131\n303257 179323\n85529 321733\n293965 277372\n311842 457302\n239306 82175\n84467 336874\n440578 385351\n150452 127489\n74506 57701\n357736 332000\n101550 253202\n313301 210331",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "329925 107842\n229821 157568 76810 229041 132993 271610 76678 312557 151007 438730\n104376 463116\n419689 436978\n489980 317664\n254348 69800\n78263 354008\n343938 191302\n375065 339900\n375730 191681\n331845 143922\n360958 81138\n134484 468465\n156384 161915\n121944 111595\n145304 402482\n215730 327308\n55679 369159\n222301 408919\n97506 481118\n132119 454011\n266997 440126",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "252125 368842\n78948 304138 84806 485509 246798 464779 207981 75789 289489 92504\n231163 116254\n346225 235076\n58438 166073\n213359 344367\n153439 262861\n450442 113910\n253844 325061\n238125 330756\n82112 333559\n126087 114744\n136125 473047\n348343 244319\n141203 483732\n98765 187494\n231004 446210\n355202 84012\n409924 68943\n61398 303843\n140961 488244\n74305 77775",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "361156 214908\n316509 484445 116915 165361 275932 300670 52133 399720 333386 337738\n405875 242272\n83399 208657\n282743 121020\n101062 261233\n370106 473357\n269042 401367\n95840 204511\n361685 161017\n325861 108280\n224857 192254\n189205 451783\n264518 178829\n487950 238111\n66269 465488\n135779 257915\n326048 397078\n294728 314312\n120022 223232\n226531 217299\n166221 302221",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "345811 445449\n496570 450691 91780 122682 259346 80903 289133 168168 275984 440900\n139580 246257\n479676 215616\n221016 123321\n450384 408166\n84542 296176\n455481 368583\n392930 473008\n110604 240459\n428591 58886\n395887 186468\n95131 441757\n401024 334824\n447175 348214\n329006 117451\n162826 240324\n429881 151932\n331025 116293\n165313 103016\n393546 274246\n472826 485814",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 1000000 999999 2 2 999999 2 2 999999 1\n2 1000000\n2 999999\n1 1000000\n1 999999\n1000000 1000000\n2 999999\n2 1000000\n2 1000000\n2 1000000\n1000000 1\n2 1000000\n999999 1000000\n1 999999\n2 999999\n999999 999999\n2 2\n999999 1\n1 999999\n2 1000000\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999999\n1 1 1000000 999999 999999 1 1000000 999999 1000000 1000000\n1000000 999999\n999999 999999\n999999 999999\n2 999999\n999999 999999\n2 1000000\n2 999999\n999999 2\n999999 1\n2 999999\n1000000 999999\n2 1000000\n1 1000000\n1 2\n999999 1000000\n1000000 2\n1 1000000\n2 999999\n1 999999\n2 1000000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:44"
}