{
  "problem_code": "problems",
  "title": "Birthday Present",
  "tags": [],
  "text": "Today is problem setter's best friend Jenny’s birthday. Long ago, Jenny, being a very clever girl, asked the problem setter to perform some queries on a tree but he couldn’t do it. Now, he seeks your help to impress her on her birthday by answering those queries.Recall that a tree is a connected acyclic undirected graph withnnodes andn-1edges. In each node there are some flowers. The two type of queries are described as:1 u v x2 u yFor first type, you have to calculate the minimum number of vertices needed to be visited on the path fromvtou, starting atv, to collect at leastx (1 ≤ x ≤ 1018)flowers, wherevis a descendant ofu.Note that you cannot visit any node that is not in the path from v to u and you cannot skip any node of the path from v to that node you've chosen at last.If it's impossible to collect at leastxflowers visiting all the vertices fromvtouthen you have to print-1.For second type, you have to add y(y can be negative)to the existing amount flowers in nodeu. It is guaranteed that after this operation, flowers in a node will be non-negative and sum of flowers of all node of the tree will be at most 1018.Note that 1 is the root of the tree.InputThe first line of the input contains two integersn(2 ≤ n ≤ 105) andq(1 ≤ q ≤ 105) where n is the number of vertices of the tree and q is the number of queries you have to perform.Each of the next n-1 lines contains two integersa(1 ≤ a ≤ n) andb(1 ≤ b ≤ n) which denote an edge between a and b. The next line contains n non-negative integers c[1], c[2] ... c[n] (0 ≤ c[i] ≤ 1013) where c[i] denotes the number of flowers in i’th node. Next q lines contain queries of the format described above.OutputFor each query of the first type print minimum number of nodes you have to visit to collect at leastx(1 ≤ x ≤ 1018) flowers. If it's impossible to collect at leastxflowers visiting all the vertices fromvtouthen print-1.ExampleInput:6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23Output:1\r\n2\r\n3\r\n2",
  "sample_input": "Input:6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23Output:1\r\n2\r\n3\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HBD",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "6 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n5 6\r\n2 3 13 5 7 11\r\n1 1 6 10\r\n1 1 6 12\r\n1 1 6 19\r\n2 5 5\r\n1 1 6 23",
      "expected_output": "1\r\n2\r\n3\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1\n7 7\n4 6\n10 2\n1 2\n9 9\n9 4 8 9 3 9\n5 3 3 8\n2 8 7 4\n9 10 10 1\n8 4 4\n1 1 6 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n9 4\n7 9\n6 5\n1 1\n10 3\n9 4 2 6 1 4\n5 4 4 1\n3 5 9 3\n6 10 10 7\n7 1 10\n7 8 3 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n7 10\n5 5\n1 6\n5 7\n10 1\n7 5 10 1 8 10\n6 1 2 10\n4 6 10 2\n9 3 2 1\n9 2 7\n1 10 3 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "60 9\n95 17\n17 16\n32 67\n24 14\n8 57\n95 81 23 83 31 53\n96 90 26 88\n88 93 48 39\n64 33 81 28\n90 36 2\n66 39 45 53",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "64 8\n84 71\n87 75\n84 59\n55 78\n9 54\n36 72 58 3 33 21\n20 79 88 24\n96 84 57 84\n52 90 72 19\n92 39 98\n33 63 92 68",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "78 29\n74 66\n93 50\n46 59\n94 34\n90 71\n51 93 94 10 100 17\n77 5 44 73\n81 81 9 12\n71 97 80 38\n90 69 53\n11 25 68 44",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "83 19\n66 71\n11 16\n44 95\n100 96\n51 93\n73 63 38 2 82 98\n36 31 5 87\n11 50 18 86\n70 26 45 72\n16 43 21\n34 87 3 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "75 72\n6 16\n100 93\n3 64\n22 74\n95 3\n2 44 80 89 5 83\n45 68 94 30\n52 22 50 8\n64 15 6 12\n61 7 47\n70 99 84 88",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "45 30\n15 21\n36 50\n12 9\n45 48\n17 17\n14 51 51 51 24 36\n21 18 43 26\n52 5 18 48\n36 42 25 18\n17 22 47\n22 47 30 12",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "17 52\n38 41\n15 47\n29 12\n7 51\n34 13\n30 44 30 17 33 38\n20 40 43 35\n7 22 23 41\n32 39 34 34\n17 50 47\n20 46 51 33",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "34 33\n13 34\n31 50\n17 38\n23 42\n17 41\n11 25 50 19 24 16\n7 13 33 24\n35 13 49 7\n43 51 8 23\n34 20 11\n14 31 21 45",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 16\n25 14\n32 28\n45 31\n31 46\n40 37\n5 24 42 34 48 29\n33 22 18 28\n31 50 10 7\n10 7 12 33\n19 21 33\n37 29 38 42",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "42 35\n30 24\n31 20\n15 42\n39 47\n51 36\n38 5 33 23 24 12\n19 29 7 38\n22 48 18 49\n25 29 17 5\n49 43 11\n5 19 9 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "43 10\n26 17\n48 45\n20 32\n36 24\n31 33\n32 28 18 48 30 18\n25 40 11 25\n25 13 7 31\n35 29 31 27\n31 41 31\n28 37 19 39",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "31 35\n45 24\n49 19\n31 52\n32 48\n46 7\n7 5 19 29 29 30\n31 40 26 24\n11 43 19 17\n22 51 11 46\n42 51 36\n35 33 22 26",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105\n105 105 105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105 105\n105 105 105\n105 105 105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n2 104\n2 1\n105 104\n105 2\n104 104\n2 2 104 104 104 105\n105 1 2 2\n104 105 104 105\n2 1 2 104\n1 2 104\n1 104 104 104",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 2\n2 104\n1 105\n2 2\n2 1\n2 105\n105 105 2 2 104 104\n1 2 2 1\n1 1 2 1\n2 104 1 105\n2 105 2\n2 104 105 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:33"
}