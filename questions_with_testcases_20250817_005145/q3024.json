{
  "problem_code": "problems",
  "title": "Ada and Harvest",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She has a very long furrow with many kinds of vegetables (represented by integer numbers). Whenever she wants to harvest a single vegetable, she always replace it with another vegetable (possibly same kind).After each replacement, she wants to know the number of vegetables of the same kind (at the new vegetable) which are before it (have lower position in furrow).InputThe first line of input contains1 ≤ N, Q ≤ 2*105, the length of furrow and number of harvests.The next line containsNnumbers0 ≤ Ai≤     109the kind of vegetable which is currently onithspot in furrow (indexed from 0).The nextQlines contains two numbers0 ≤ i < N(the index of harvested plant) and0 ≤ a ≤ 109(the kind of newly planted vegetable)OutputFor each harvest, print the number of vegetables of the same kind before the newly planted vegetable.Example Input5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3Example Output1\r\n3\r\n0\r\n1\r\n2Example Input 210 10\r\n2 3 5 3 9 3 5 2 9 9\r\n7 2\r\n0 5\r\n0 2\r\n1 2\r\n9 2\r\n4 3\r\n8 2\r\n4 2\r\n2 5\r\n3 5Example Output 21\r\n0\r\n0\r\n1\r\n3\r\n1\r\n3\r\n2\r\n0\r\n1",
  "sample_input": "5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3",
  "sample_output": "1\r\n3\r\n0\r\n1\r\n2",
  "link": "https://www.spoj.com/problems/ADACROP",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "5 5\r\n1 2 1 2 1\r\n2 2\r\n4 2\r\n2 3\r\n3 3\r\n4 3",
      "expected_output": "1\r\n3\r\n0\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 8\n9 3 1 4 4\n5 8\n3 1\n6 10\n10 9\n9 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n10 6 9 4 6\n10 4\n6 10\n2 10\n2 4\n2 8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 6\n8 4 5 10 5\n4 5\n5 3\n1 10\n1 9\n9 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "75 37\n62 81 6 30 53\n53 14\n87 55\n77 58\n84 83\n94 100",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "18 83\n40 14 51 20 98\n66 92\n41 43\n93 40\n17 98\n41 7",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 29\n69 38 39 31 16\n81 6\n19 88\n90 93\n69 63\n73 48",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "37 87\n58 76 99 74 22\n74 49\n98 40\n88 64\n68 85\n84 5",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 15\n60 27 13 73 1\n62 85\n74 6\n46 86\n53 75\n94 67",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "287 202\n471 493 230 339 474\n192 339\n147 398\n427 357\n268 381\n464 259",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "459 188\n50 357 396 127 154\n408 439\n315 235\n394 297\n381 101\n298 376",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "70 406\n390 429 137 329 264\n184 357\n356 60\n370 136\n126 124\n114 124",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "272 238\n347 51 131 79 370\n193 407\n87 113\n468 105\n367 137\n325 118",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "484 447\n493 464 266 352 251\n75 426\n363 248\n215 320\n453 312\n164 154",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "267 91\n324 194 471 211 411\n259 383\n235 344\n344 94\n393 180\n489 314",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "362 261\n498 274 486 418 177\n336 151\n154 194\n132 220\n187 52\n227 232",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1 1 1000 2 1000\n999 999\n2 999\n1000 1\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999\n2 1000 1000 2 1\n2 1\n999 1\n999 999\n1 999\n1 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:54"
}