{
  "problem_code": "problems",
  "title": "Petya Brother and Repairment of Roads",
  "tags": [],
  "text": "Petya lives in a city named Mayapur. As in the morning, everybody likes to drink hot tea in bed. So the citizens of Mayapur need milk to produce tea. For this purpose, they want to be able to go to a milkman using the bi-directional roads. There are m roads in the city. Every year these roads become unfit for transportation, hence they have to be repaired each year.Last year Petya repaired those roads. As Petya was short of money last year, he repaired them such that with minimum budget everyone could get milk from someone. Since then he received some complaints that some people had to walk for a long distance to get milk. So this year Petya want to repair the roads such that everyone can go to their nearest milkmen to get milk. So he has to select some roads to repair such that every citizen is connected to at least one milkman and that milkman is the nearest one for that citizen. For repairing each road he needs to pay the necessary cost. As he does not want to spend a lot of money in it, He wants to minimize the cost needed in this project. Note that a milkman does not need to go to some other milkman for milk as he can take milk from his own home. But Petya was a little bit bored to plan this time so he asked his brother to help him.Now it is your job to help Petya's Brother in finding the minimum cost needed to repair the roads in the above given way. If it is not possible for a citizen to connect to any of the milkmen, output \"impossible\" (without quotes).PS: Note that you should print the minimum cost needed such that everyone can go to their nearest milkman.InputFirst line contains two space separated numbers n and m: n is the number of citizens in Mayapur and m is the number of unrepaired roads.Next line contains n space separated integers either 0 or 1 which indicates that citizen is milkman or not [1 means he is a milkman].Then each of the next m lines contain three space separated integers u, v and c, denoting that there exists an unrepaired road between u and v such that the cost of repairing the road is c.1 ≤ n ≤ 1051 ≤ m ≤ min(n × (n - 1) / 2, 2 × 105)1 ≤ u, v ≤ n and u ≠ v1 ≤ c ≤ 109OutputPrint the cost, or if not possible print \"impossible\".ExampleInput:5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5Output:5PS: for python users please make your submission using fastio or you can submit the solution into pypy.",
  "sample_input": "Input:5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5Output:5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PETYABRO",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "5 7\r\n0 1 0 1 0\r\n1 2 11\r\n1 3 1\r\n1 5 17\r\n2 3 1\r\n3 5 18\r\n4 5 3\r\n2 4 5",
      "expected_output": "5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 9\n4 3 6 3 4\n5 7 9\n4 9 8\n7 1 1\n7 6 5\n7 6 7\n7 7 6\n5 1 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 7\n3 5 10 6 1\n4 4 4\n9 9 7\n8 10 1\n10 10 4\n9 1 8\n10 2 9\n9 4 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 2\n3 2 1 1 10\n9 7 1\n9 6 9\n8 3 8\n10 10 4\n8 4 2\n9 10 5\n6 9 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "78 9\n86 5 27 49 62\n39 53 31\n2 72 23\n15 80 5\n6 11 83\n27 52 41\n9 53 25\n3 63 26",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "44 99\n6 70 56 45 32\n78 37 44\n7 22 55\n27 76 5\n10 22 25\n27 75 12\n34 91 59\n1 77 62",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "82 87\n26 50 43 1 92\n70 43 27\n34 2 100\n38 81 47\n4 79 7\n68 40 25\n11 72 44\n95 89 94",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 47\n65 29 89 26 50\n24 18 57\n40 24 60\n93 14 43\n47 91 78\n57 68 59\n86 82 34\n74 61 67",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "96 88\n23 98 90 11 2\n48 59 96\n38 7 69\n24 13 24\n37 10 88\n100 40 81\n100 61 95\n73 27 79",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "85 114\n222 428 190 452 501\n321 393 387\n374 447 198\n109 444 317\n288 216 363\n97 304 257\n438 97 59\n418 70 88",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "491 316\n151 214 137 90 165\n229 404 252\n136 367 232\n344 520 451\n315 255 168\n438 270 374\n388 147 257\n417 315 177",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "333 237\n204 227 252 240 348\n148 138 225\n442 79 362\n221 407 164\n199 390 234\n462 310 307\n282 284 323\n354 466 456",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "229 382\n82 86 514 499 262\n153 62 208\n370 220 351\n353 294 323\n434 216 271\n437 410 189\n232 97 198\n137 111 413",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "396 474\n54 345 99 426 188\n514 424 253\n457 418 178\n442 215 239\n422 355 152\n520 399 451\n475 150 374\n260 216 204",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "133 450\n406 312 198 305 126\n171 242 112\n424 285 505\n115 194 366\n169 309 85\n218 364 324\n429 327 117\n511 453 292",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "143 306\n53 155 127 296 440\n149 301 222\n329 138 318\n79 279 150\n241 282 301\n107 478 367\n375 279 389\n516 357 402",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1051 1051\n1051 1051 1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1051 1051\n1051 1051 1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051\n1051 1051 1051",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1050 1051\n1051 2 2 1051 1051\n2 1050 1051\n2 1051 2\n2 1051 2\n2 1 1050\n1050 1050 1\n1 2 1050\n1051 1 1050",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n1050 2 1051 1050 1051\n1050 1051 2\n1 1050 1051\n1051 1 1050\n1 1 1051\n1 1 1050\n1051 1051 2\n1 1051 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:51"
}