{
  "problem_code": "problems",
  "title": "Jollo",
  "tags": [],
  "text": "Jollo is a simple card game which the children from Logonia love to play. It is played between two players with a normal deck of 52 cards. In the game, cards are ordered according to their rank and suit, forming a sequence of 52 distinct values.The game is composed of three rounds, played in a best-of-three series (a player must win two rounds to win the game). At the beginning of the game the deck is shuffled and each player is given a hand of three cards. In each round the players show one card to each other and the player with the highest card wins the round. The cards shown in a round are discarded (i.e., they cannot be shown again).The King’s son loves to play the game. But he is not very smart, losing frequently to his little sister. And when he loses, he cries so loud no one can stand it. The servant who deals the cards to the Prince and his sister is afraid he will be sent to prison if the Prince continues to lose. The servant is allowed to see every card he deals, and after dealing ﬁve cards (three to the Princess and two to the Prince) he wants to know which is the lowest card he should deal to the Prince so that there is no chance he will lose the game, no matter how badly he plays.InputEach test case is given in a single line that contains ﬁve distinct integers A, B, C, X and  Y, describing the cards dealt to the players. The ﬁrst three cards are given to the Princess (1 ≤ A, B, C ≤ 52) and the last two cards are given to the Prince (1 ≤ X, Y ≤ 52). The last test case is followed by a line containing ﬁve zeros.OutputFor each test case output a single line. If there exists a card that will make the Prince win the game no matter how badly he plays, you must print the lowest such a card. Otherwise, print -1.Exampleinput28 51 29 50 52\r\n50 26 19 10 27\r\n10 20 30 24 26\r\n46 48 49 47 50\r\n0 0 0 0 0output30\r\n-1\r\n21\r\n51",
  "sample_input": "input28 51 29 50 52\r\n50 26 19 10 27\r\n10 20 30 24 26\r\n46 48 49 47 50\r\n0 0 0 0 0output30\r\n-1\r\n21\r\n51",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MJLAR10",
  "scraped_at": "2025-08-17 00:33:25",
  "test_cases": [
    {
      "input": "input28 51 29 50 52\r\n50 26 19 10 27\r\n10 20 30 24 26\r\n46 48 49 47 50\r\n0 0 0 0 0output30\r\n-1\r\n21\r\n51",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 7 6 2 2\ngmmeeg 8 4 7 5\n2 3 4 7 4\n8 5 7 5 9\n3 4 9 7 9\n1 7 4 1 8 7\n10 9 10 4 ljvdidmdb\n9\n7\n5",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 4 1 6 3\nr 6 8 1 3\n8 6 9 6 5\n5 3 4 5 9\n10 6 10 1 3\n4 10 7 10 10 4\n2 2 9 6 cefuxorex\n5\n8\n6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 3 10 6\njaohzl 8 5 1 4\n9 10 4 7 5\n6 10 5 5 1\n8 2 8 3 10\n8 4 7 7 3 6\n8 3 4 1 nae\n1\n3\n1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "71 72 43 43 62\nysh 21 48 50 39\n12 88 83 42 16\n33 17 19 23 20\n64 84 2 64 7\n62 17 46 75 88 34\n29 100 32 87 xiivx\n85\n46\n25",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "3 94 69 41 38\nuc 56 56 15 87\n56 12 38 54 71\n61 85 97 72 20\n28 74 24 10 38\n8 51 83 78 88 73\n93 21 16 22 sdx\n13\n14\n8",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "64 76 93 62 2\nygsy 72 59 2 59\n17 91 17 84 94\n89 79 100 60 77\n74 57 44 91 68\n66 63 6 78 70 47\n7 95 75 67 pzisn\n67\n25\n26",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "44 49 63 48 68\nlwpjh 28 19 99 2\n5 90 8 39 1\n85 74 84 88 6\n9 14 33 22 60\n66 2 12 31 51 100\n82 97 13 43 oxif\n31\n52\n35",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 37 54 85 73\nxtneu 8 91 52 48\n90 96 36 37 100\n57 49 41 86 55\n67 70 6 3 84\n84 32 80 76 26 86\n63 14 29 26 ngzzkvahy\n80\n36\n76",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "285 185 156 97 351\nfs 487 382 317 472\n302 222 458 115 499\n240 445 375 63 133\n459 479 131 308 489\n281 352 292 126 370 235\n483 279 381 103 ehyirq\n500\n254\n68",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "296 131 76 213 103\nwcpbo 334 164 284 444\n186 497 240 208 157\n331 310 134 138 60\n462 96 156 434 404\n401 327 432 200 217 353\n441 132 411 265 lookmvoq\n208\n389\n209",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "411 322 160 249 256\nnsrsg 271 360 409 299\n372 67 54 176 145\n240 261 328 198 94\n178 168 343 424 321\n492 259 248 308 394 110\n410 465 302 452 nhoub\n196\n227\n287",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "358 422 127 56 425\nuqucqf 92 135 361 71\n272 366 188 488 208\n219 373 340 389 399\n437 442 386 334 221\n476 410 148 420 428 200\n447 217 500 209 ejfxbpwr\n147\n269\n234",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "266 328 416 84 445\na 166 483 210 470\n260 149 496 168 150\n342 126 335 495 469\n452 264 183 106 70\n201 451 399 496 122 445\n217 175 107 115 zjitrb\n122\n396\n125",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "471 177 475 92 315\ny 428 371 185 73\n423 50 440 286 483\n144 397 449 307 195\n460 167 472 247 236\n126 384 257 239 140 198\n320 479 303 433 z\n104\n147\n207",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "362 333 267 94 375\nxihgdm 280 408 184 465\n191 197 410 332 325\n408 459 109 74 417\n102 194 320 181 291\n154 306 61 94 324 168\n268 275 184 436 gduofpvmt\n201\n101\n494",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\napalhz 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 v\n1000\n1000\n1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\nk 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 gyqijtcw\n1000\n1000\n1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 1 1 999\nwdozi 1 2 2 999\n1 1000 999 1 2\n1 1 999 1000 1000\n1 1000 2 999 2\n2 2 1000 1000 1 1\n1 1000 1 2 aub\n999\n1000\n1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1000 1000 999\naswda 1 1 1 999\n999 1 1000 1 999\n1000 2 2 999 1000\n999 1000 1000 1000 2\n999 1 2 999 1000 999\n999 1000 1000 1 jnqdco\n2\n2\n999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:58"
}