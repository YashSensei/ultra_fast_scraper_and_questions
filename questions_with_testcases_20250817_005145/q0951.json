{
  "problem_code": "problems",
  "title": "Bye Bye Cakes",
  "tags": [],
  "text": "John is moving to a different city and he wants to use all his perishable food before doing it, to avoid wasting. Luckily all he has now is eggs, flour, sugar and milk, so he is going to make his famous cakes and give them to his friends as a goodbye gift. John only knows how to make an entire cake and not half a cake, a third of a cake, or any other portion. So, he will buy whatever is needed of each ingredient so that he can make an integer number of cakes and have nothing left. Of course, he wants to spend as little money as possible. You must help John to decide how much he should buy of each ingredient.InputThe input contains several test cases. Each test case is described in a single line that contains eight integers E, F, S, M, E', F', S' and M' separated by single spaces. Values E and E' are numbers of eggs, F and F' are grams of flour, S and S' are grams of sugar, and M and M' are centiliters of milk. For each ingredient, X is the amount John has (0 ≤ X ≤ 1000), while X' is the amount needed to make a single cake (1 ≤ X ≤ 1000). The last line of the input contains the number −1 eight times separated by single spaces and should not be processed as a test case.OutputFor each test case output a single line with four non-negative integers separated by single spaces, representing the amount of each ingredient John needs to buy, in the same order and units as the input.ExampleInput:2 3 4 5 1 1 1 13 6 9 0 1 2 3 4-1 -1 -1 -1 -1 -1 -1 -1Output:3 2 1 00 0 0 12",
  "sample_input": "Input:2 3 4 5 1 1 1 13 6 9 0 1 2 3 4-1 -1 -1 -1 -1 -1 -1 -1Output:3 2 1 00 0 0 12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BYECAKES",
  "scraped_at": "2025-08-17 00:33:05",
  "test_cases": [
    {
      "input": "2 3 4 5 1 1 1 13 6 9 0 1 2 3 4-1 -1 -1 -1 -1 -1 -1 -1",
      "expected_output": "3 2 1 00 0 0 12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 8 1 2 3 7 8 2 9 5 4 10 3 5 9 2 4 4 6 10 5 3 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 9 10 5 9 3 4 8 5 2 7 1 8 3 5 3 2 4 10 10 6 1 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 10 6 2 10 9 6 4 6 3 1 4 9 9 1 10 7 1 2 6 6 5 4",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 91 46 97 83 11 12 3 70 13 1 74 99 86 19 76 51 31 1 92 39 96 25",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "7 61 36 75 77 2 46 72 81 83 69 61 24 54 85 93 54 49 5 72 15 55 70",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 65 100 51 7 12 80 87 95 17 1 87 65 80 12 89 23 74 5 79 29 62 42",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "65 43 79 11 4 54 97 52 59 25 72 39 11 94 88 8 23 85 38 14 60 68 80",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 42 67 85 70 48 50 69 39 80 91 85 69 80 12 48 73 4 32 87 88 68 17",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "207 71 393 190 116 244 342 213 399 243 347 420 149 364 117 344 156 89 241 64 475 69 435",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "233 165 353 101 100 51 344 172 237 309 309 60 92 105 225 151 158 413 438 426 410 269 239",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "500 302 102 321 471 144 134 457 313 103 63 491 181 478 408 296 173 460 118 348 80 241 349",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "55 452 53 459 370 331 215 300 80 381 96 308 306 500 135 55 59 325 256 114 105 413 185",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "166 205 396 434 316 256 408 445 250 191 308 430 95 347 373 158 214 246 492 482 487 248 200",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "249 466 308 460 378 113 67 424 83 77 479 346 90 285 247 297 89 426 492 389 456 126 364",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "234 156 283 390 309 304 460 454 274 330 267 401 375 389 435 251 434 459 151 347 163 467 86",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 2 1000 1000 999 1 1 999 2 1 1000 2 2 1 1000 1000 999 1 2 999 999 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 1 2 2 999 999 2 999 1000 1000 1 1 1000 2 1000 1000 1 1 1000 1 1000 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:49"
}