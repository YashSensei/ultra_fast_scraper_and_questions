{
  "problem_code": "problems",
  "title": "Sequence Function",
  "tags": [],
  "text": "We define a sequence {x}: {x} = {x0, x1... xn-1} where xiis an integer.We have a function f: {x} → {x’} where {x} is a finite sequence.After we have a finite sequence {x}, we can get f({x}) follow these rules :Remove all 0 in x : a 0 b 0 c d 0 e f 0 g → a b c d e f gTurn 1 into 100 and -1 into -100 : a 1 b 1 -1 c d e f g → a 100 b 100 -100 c d e f gAdd all 2k(k>1) at the end of the sequence : a 2 b 8 c d e 1024 f g → a 2 b 8 c d e 1024 f g 2 8 1024Add any positive odd prime x at the end of the sequence x-1 times: a 3 b c 7 d e f 5 g → a 3 b c 7 d e f 5 g 3 3 7 7 7 7 7 7 5 5 5 5For any positive composite number (not 2k, k>1), we just keep it once: a 6 b 6 c d 6 e 4 4 f g → a 6 b c d e 4 4 f gKeep any t (t < -1) in the sequence.For example:{x} = {-5 1 0 2 9 16 7 5 3 2 9 9 -1}f({x}) = {-5 100 2 9 16 7 5 3 2 -100 2 2 16 7 7 7 7 7 7 5 5 5 5 3 3}We define g({x}) is the sum of all the element in sequence x.We define h({x}) = g(f({x})) - g({x}).A consecutive sequence of x is a sequence {xi, xi+1, xi+2... xj} where 0 ≤ i ≤ j < n.Now I will give you a sequence {x}.I want to ask you the maximal h({y}) where {y} is a consecutive sequence of {x}.InputOne line consists one integer N, the length of {x}. (N ≤ 105, |xi| ≤ 10000)Next N lines, each line consists one integer.OutputThe maximal h({y}) where {y} is a consecutive sequence of {x}. (|h({y})| ≤ 263-1)ExampleInput:5\r\n1\r\n2\r\n6\r\n6\r\n3Output:101",
  "sample_input": "Input:5\r\n1\r\n2\r\n6\r\n6\r\n3Output:101",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SEQFUN",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "5\r\n1\r\n2\r\n6\r\n6\r\n3",
      "expected_output": "101",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n6\n9\n9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n4\n5\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n2\n2\n7\n5\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "18\n81766087\n86937177\n62978070\n99505410\n81556837\n65706404\n81473213\n1183520\n86781195\n30144796\n22581835\n70338201\n70038182\n77193317\n88375202\n28304393\n29048357\n70250148",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n65721989\n35866746\n55596202\n45992597\n19777453\n77289815\n89574802\n86081223\n16478028\n52772738\n99620356\n90301772\n86558513",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n17343696\n25782481\n49155794\n30972219\n81228896\n2590682",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n63508022\n41692981\n73055329\n24358075\n40312297\n42671543\n84920107\n30130184",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n537675\n66669664\n16354510\n37112495\n12226541\n55539142",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "75\n41583\n32727\n12944\n32929\n97264\n23003\n93629\n95910\n38642\n15094\n28302\n78549\n79411\n75525\n31034\n10290\n7296\n4784\n14507\n26889\n52085\n4141\n8940\n38834\n80538\n52707\n34446\n54264\n54937\n79476\n78613\n95696\n86476\n25832\n74433\n11877\n88186\n82204\n90336\n85533\n89966\n65222\n16014\n44911\n94363\n1828\n62428\n67586\n49956\n38585\n71518\n74148\n69624\n51635\n41630\n24319\n82135\n94766\n70921\n8511\n94501\n98923\n66259\n31833\n57393\n51060\n1435\n9094\n23920\n235\n47385\n81755\n19905\n47053\n64664",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n71926\n87452\n66295\n26000\n65772\n29416\n33947\n14895\n14976\n52782\n60505\n75823\n1058\n59587\n47730\n36756\n40835\n34419\n68872\n93609\n98398\n53737\n70273\n32068\n83225\n63690\n14314\n2061\n77973\n82263\n31998\n88470\n83302\n52127\n98098\n56300\n45564\n7290\n18104\n50239\n20965\n78213\n91493\n66629\n25649\n25398\n25004\n15090\n16148\n77402\n88131\n77555\n9231\n54799\n16067\n92221\n10420\n32295\n90177\n71279\n59020\n55257\n60283\n67046\n88188\n31435\n45510\n21621\n69410\n36323\n67231\n92149\n86861\n87098\n78090\n34395\n60464\n55641\n75412\n44\n82539\n53673\n33973\n81380\n19457\n10706\n29128\n33519\n63277\n73576\n9830\n39873\n762\n34863\n85283\n77928\n6252\n78139\n85145\n96416\n62400\n16484\n31838\n89132\n64329",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n43993\n61358\n8780\n59309\n84492\n25336\n68991\n79362\n47605\n61732\n45141\n13597\n8796\n42270\n42935\n65168\n9794\n17050\n3960\n48952\n54759\n6982\n83465\n7345",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "80\n49199\n19774\n32525\n42547\n8023\n81053\n93399\n66793\n62139\n6435\n16405\n84690\n81208\n70708\n54419\n43193\n14446\n64177\n47356\n30856\n70438\n72423\n26967\n32215\n64969\n79927\n41551\n30193\n31815\n36407\n69504\n28891\n14630\n71643\n23935\n28828\n90638\n17203\n93876\n66442\n12638\n52791\n63429\n91487\n70913\n32271\n74284\n28273\n27424\n70644\n97210\n99335\n37873\n43297\n5427\n64777\n65317\n72524\n39276\n12378\n5087\n11248\n58969\n47286\n59392\n65866\n4233\n20112\n47841\n73827\n13980\n71956\n22574\n88677\n90610\n51491\n15225\n45970\n50763\n78205",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n775\n17897\n20505\n57006\n8567\n65345\n27770\n99958\n55645\n25326\n84080\n96562\n38248\n30977\n90110\n59952\n22311\n85943\n52286\n92356\n98971\n86953\n99111\n87410\n56696\n22230\n7360\n70369\n30080\n95509\n20357\n61430\n5686\n94885\n42633\n37221\n21291\n29511\n3828\n13415\n94210\n21634\n46752\n49659\n98974\n71119\n75735\n88820\n34860\n31589\n26568\n70853\n28929\n11312\n20092\n44077\n74234\n79120\n49588\n47814\n13496\n96742\n20703\n52383\n409\n83827\n88238\n71448\n96193\n85771\n80375\n33921\n83636\n62590\n65660\n56579\n87980\n72202\n20890\n53247\n19512\n2273\n70298\n9465\n54747\n30340\n38727\n65714\n33826\n50435\n89634\n36226\n96566\n30239",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "73\n22391\n97773\n23926\n39909\n39284\n95861\n57999\n84333\n22260\n45522\n63239\n14321\n82523\n56816\n65245\n86877\n26878\n317\n40519\n79200\n18894\n54224\n39408\n1655\n31319\n45045\n41375\n84517\n16376\n90486\n61693\n62963\n5295\n49333\n86132\n28594\n65808\n86563\n18027\n14299\n79474\n50734\n12446\n31653\n64400\n35316\n13592\n1147\n87037\n70299\n45498\n94751\n66118\n47962\n30327\n61755\n46338\n77552\n89571\n73034\n11561\n28886\n23991\n7571\n44730\n9659\n11920\n36994\n70226\n43572\n26401\n94194\n57601",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n40292\n60272\n93715\n99342\n33509\n7959\n37664\n21155\n7965\n35162\n67554\n38954\n54493\n53542\n83575\n80512\n10192\n61065\n72700\n98484\n13921\n15613\n91963\n5206\n87367\n25747\n69650\n83725\n86360\n88724\n92948\n39772\n28929\n97023\n99022",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n82073854\n1663927\n58048584\n15007217\n35152372\n99838092\n83277692\n87927886\n40032215\n68040898\n1204874\n32425848\n92202764\n39225858\n11316661\n13985745\n33966087\n29915798\n52563179\n84688553\n39151404\n71884294\n63228680\n23284707\n95909463\n50273379\n33606247\n12523278\n7563597\n96152527\n73785544\n61162901\n31634345\n26588503\n85185093\n11232719\n73929375\n92986364\n14613282\n62831228\n42197347\n78746877\n84548413\n68691565\n45255018\n53612372\n37531126\n21209053\n21218874\n88824547\n50865255\n22751547\n21009652\n54234962\n45399656\n5855539\n29335804\n25633465\n91469866\n3303090\n95991588\n64529692\n85508690\n84173546\n63605540\n70391858\n21551926\n66718609\n39718498\n94428692\n53507127\n80266663\n50291577\n25354960\n77146197\n91849920\n77745910\n8455495\n15418461\n63158570\n55709206\n15900\n64148093\n90753180\n34884694\n81406699\n52730967\n50308512\n50000865\n98493636\n99217293\n43276736\n99319921\n47628112\n34935011\n2859031\n17411169\n26118730\n44767568\n89193752\n72509850\n64741934\n92417049\n37285667\n8454473",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n25173569\n50988029\n19142453\n1066452\n94327311\n73502389\n85347415\n615751\n3831742\n92268991\n44511372\n49298511\n45286631\n31321633\n45538184\n38984438\n93515207\n63676053\n75750462\n41992653\n35406606\n52967149\n51030256\n7469128\n36847966\n69368557\n39354864\n55282865\n83749195\n39539225\n50406099\n21768891\n13351636\n31496198\n87442265\n67226704\n49476183\n76605698\n11712440\n74889041\n22614113\n28896563\n66471978\n67012092\n68930491\n23145468\n68039048\n17956213\n31637309\n59792711\n50169853\n50576135\n80427548\n20650321\n5457753\n85190180\n108416\n96951149\n97644471\n43071690\n93560565\n86580153\n95060899\n24518652\n97082160\n92415641\n86603674\n96394451\n5909199\n54028762\n69066927\n66220809\n53714547\n49711830\n20642575\n26763999\n4487219\n35575037\n51973237\n13551211\n26402537\n81322426\n67217809\n69079730\n65324703\n21629379\n20290316\n4309514\n72557035\n40495914\n87670953\n78125468\n66026891\n48832499\n26951079\n10508808\n74423255\n76008958\n21581956\n65842924\n25506776\n14785125\n90282174\n95908002\n7354512",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n100000000\n100000000\n100000000\n5366259\n51830258\n40166302\n1\n1\n1\n99350308\n35199213\n100000000\n1\n100000000\n100000000\n1\n1\n1\n45892460\n1\n100000000\n1\n100000000\n100000000\n1\n1\n100000000\n1\n100000000\n100000000\n100000000\n100000000\n100000000\n1\n1\n100000000\n100000000\n37884930\n100000000\n82775763\n59547866\n1\n11595513\n100000000\n100000000\n57771552\n64129857\n1\n1\n100000000\n85082258\n89032559\n78600735\n100000000\n1\n41691791\n100000000\n1\n100000000\n1\n73853553\n100000000\n100000000\n100000000\n100000000\n12838451\n1\n1\n43439151\n1\n100000000\n100000000\n1\n88956582\n85987143\n30599171\n6934063\n21240808\n1\n19664366\n75454535\n100000000\n1\n100000000\n95959589\n64563897\n1\n10327169\n100000000\n1\n100000000\n1\n11515784\n88937823\n1\n1\n100000000\n100000000\n100000000\n46198239\n94441181\n79581665\n72888852\n1\n89014755",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "2\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}