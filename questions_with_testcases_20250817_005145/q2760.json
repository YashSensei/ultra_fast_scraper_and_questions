{
  "problem_code": "problems",
  "title": "Supraiden",
  "tags": [],
  "text": "Duck is playing a game named \"Supraiden\", which is another version of a famous shooting game named \"Raiden\". On aD× 109map, initially Duck is at the left top coordinates (1, 1), and there areNenemies at the bottom of the map but with different horizontial positionLi. That is, the first enemy is at (D, L1), the second one is at (D, L2), and so on. The i-th enemy hasMibullets, and he will shoot the j-th bullet at timeSij.All enemies are fixed, so they cannot move; and Duck can choose to stay at the same position, or move one unit on map horizontally per unit of time. For example, moving from (1, 1) to (1, 5) takes 4 units of time. But Duck can only move to a cell where currently no bullets at there.Assume Duck will move to right at next unit of time, the following are two examples will cause valid move, followed by two invalid move examples:(D = Duck, E = enemy, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D^.       ..D..   ..D^.\r\n.....   .^^..       ...^.   ...^.\r\n...^.   .....       ..^..   ...^.\r\n.EEE.   .EEE.       .EEE.   .EEE.Bullet speed is one unit on map per unit of time. Shooting takes 0 unit of time, but Duck and enemies can only shoot one bullet per unit of time and shoot vertically. For example, moving from (1, 1) to (1, 5) and shoot immediately only takes 4 units of time. When two bullets collide with each other, both disappear. Collision only occurs when one side shoots before the bullet from another side reaches his current position.Assume Duck will shoot at next unit of time, the following are two examples will cause valid collision, followed by two invalid collision examples:(D = Duck, E = enemy, v = bullet from Duck, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D..       ..D..   ..D..\r\n..v..   .....       ..^..   ..^..\r\n..^..   ..^..       .....   ..^..\r\n..E..   ..E..       ..E..   ..E..Duck has infinite amount of bullets, starting at time 0, your task is find the minimum time to kill all enemies without getting hit.InputThe first line is the number of test casesT.  (1 ≤ T ≤ 20)For each test case, it starts with two integersD,N. (3 ≤ D ≤ 109, 1 ≤ N ≤ 8)Following N lines, each starts withLi,Mi, followed by Midistinct integersSij. (1 ≤ Li≤ 109, 1 ≤ Mi, ≤ 1000, 1 ≤ Sij≤ 109)*Liand Sijare already sorted in ascending order.OutputOutput the minimum time to kill all enemies.ExampleInput:3\r\n100 1\r\n1 1 100\r\n5 3\r\n12 9 0 1 4 5 6 7 8 9 19\r\n14 2 12 88\r\n20 5 23 27 29 35 100\r\n6 2\r\n6 7 1 2 3 4 5 6 7\r\n8 1 0Output:99\r\n29\r\n18ExplanationIn case 1, Duck can shoot one bullet at time 0.In case 2, Duck reaches (1, 12) at time 14, and shoots. Then he moves and reaches (1, 14) at time 17 and shoots. Lastly he reaches (1, 20) at 23 and shoots three bullets. The first two bullets collided with the first two bullets shooted by enemy 3, and the last bullet hits the enemy at time 29.In case 3, Duck reaches (1, 6) but doesn't shoot, then moves to (1, 8) immediately and shoots one bullet. After that, he goes back and reaches (1, 6) at time 13 and shoots. The bullet hits enemy 1 at time 18.",
  "sample_input": "(D = Duck, E = enemy, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D^.       ..D..   ..D^.\r\n.....   .^^..       ...^.   ...^.\r\n...^.   .....       ..^..   ...^.\r\n.EEE.   .EEE.       .EEE.   .EEE.",
  "sample_output": "(D = Duck, E = enemy, v = bullet from Duck, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D..       ..D..   ..D..\r\n..v..   .....       ..^..   ..^..\r\n..^..   ..^..       .....   ..^..\r\n..E..   ..E..       ..E..   ..E..",
  "link": "https://www.spoj.com/problems/SUPRAID",
  "scraped_at": "2025-08-17 00:34:14",
  "test_cases": [
    {
      "input": "(D = Duck, E = enemy, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D^.       ..D..   ..D^.\r\n.....   .^^..       ...^.   ...^.\r\n...^.   .....       ..^..   ...^.\r\n.EEE.   .EEE.       .EEE.   .EEE.",
      "expected_output": "(D = Duck, E = enemy, v = bullet from Duck, ^ = bullet from enemy)\r\n    Valid              Invalid (Duck will get hit)\r\n..D..   ..D..       ..D..   ..D..\r\n..v..   .....       ..^..   ..^..\r\n..^..   ..^..       .....   ..^..\r\n..E..   ..E..       ..E..   ..E..",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "amao omg eo o v koagea gv jgqjw qganzi o mnx\nq eoqa gi hry bf yfwtc\nx nqats f fxk\nt tl xjgyj stw\nhux hvoqk l vyoj\nrv pfeu ihqu y",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "j yac djx c lqea lw do efucj rwcuic no ipvnwj\nmn mydch loemp zvu lz xwvo\nrcdm efez m ay\ns xibfm vydi j\nvkt elex ayp vmie\nor xlu en eb",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "fl chth hsb dwh w br wbozb xe swdg lyr vao\nzubh qfeqsau ivns v wq qr\nyu xuzh y napf\nlp uff odor xdyu\npmb v qvi b\nltqwz wksns qyqye skn",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "nmia zhmna row y tk uysgau x tq cxqnxr o da\nnb oeah irzs wb fi fzwns\nx a pgqn ali\nx pi oi zlfr\nujzfd yaayd ngdsq qs\nxldr o zfnl xbhc",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "gk ar ksgg bvzc qc py aqzdl qgpk x dv fxtr\ngnshu ik xh n yoh mdd\ncp efh qn avso\nskocg mvsve f lkjvw\nvu gkj frz c\nrfrvd nz jbbi xhso",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "ly lumgz qpwbd nmzvy nbqp ohb fuv pu ohxp l rcf\nhd rqjh wsi b w ws\nxuf gp fim z\nwvxhz j khqhs djxxh\nevpw o g kse\nati w osp jwflc",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "wzkxa dnh mswj rlfxa m njbf m a k pq pp\njto cfkw r el hncga jabjy\nxum lv oubng rxxe\nudn rojvj kny ngjr\ndii l sp hwmlt\nttpm rjem ogol cwha",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "x vk t pfn kaujl d n gprv rbjqia bykbx wg\nn paetv wfycu ujjmb ny om\nehgl au r lgzd\npw a swt l\nrdk ewp m miya\nhri twhyg edk nup",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "b gm jyo prj glod z xo sfof fvsi ivo m\nvj fvmugyt lm lvuzm ty hz\ngcp t tboyo hlju\nlm tfd sa fwxz\nacq rcip twfy pmm\nqsa vnz a jsooq",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "ebg pvv a p c svluzy lu h u uxfw iz\nu bpm jmw oey p m\nw c k jfh\nefog p nc q\ngrrsv vnp taqlz bnr\nvgvb oiesz xolr aa",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "mb izp o e cu r k zl jq zurgs vdy\nimgff yvpo dphw zd g mo\nw kswv crbp akel\nbrc xo cruj ml\nxopu z svymp kt\nafxvc mo kejg edcad",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "xn jtsdn fsf etg gcyu xbo pp b nh tjth kkfudp\nwmgry hrb hvy tysku bgnh fxem\nr axewu p fb\nys yv asevj pyra\nbc a vqywv fx\nkl wxmou mq uwy",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "z l rhh e mwywh fkupt mfjf tgp adc mhm eeh\nckh qulvrf gsrsl cgtem nw pjn\nz s xc dmsj\nsb uqh ywxt iz\nbz i ebm gzcmf\nb blvaz ovr gnv",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "u hrj rjoys itc ymp rgaw t b ljbsp upr dfupat\nuhg jxj wser ft iwtjm pu\nq gdkkd um ndeyn\nuitt o zo javi\npdswq pg xtha acnbv\nzyrrh mhg gathc md",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "du xx szsc ywn dzwxh aeq wbp iieyc abaxna fwsy kf\nj ddurp d qnrrl prhqs dcfni\ns nwq reyc riies\nyl yhw g y\ngi h asime kwiry\neaf z qg r",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "g b xbhel clml teutp dfdewo vjlvb pxyo uhkxao rqcm pmgi\nttb pk hg vfbra crpl orf\nwzu u topom vta\niyc kuiy pu zgd\nif q yjh wp\nesfj f nvqy tm",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "kkqp lic te cugfd curh ev wyiux vidr ezp hpex zht\nty yhggjtz dei lwz fised q\nlw rg sidnf we\nd p pwubf fuf\nmp owqsi oga gn\nuix ihmuy szsxq a",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "pkff irlwi fndoz rjeqb bofq py puol sak qovf xui jyxu\nz k k n xub gqjt\ncon ougtv rfvce frmh\naeil e y vsq\nmtd rd jrwzu he\nlf g gbdge x",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "ewd nsa i idi vb nz kwdjd elbgn kz dtsii urkd\naq m i zityd oub vcwq\nhsg roa fchv aonb\na dx jbkt qaa\nr dygo qin iem\nzpxk zyej a mlyv",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}