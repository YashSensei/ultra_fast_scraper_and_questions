{
  "problem_code": "problems",
  "title": "Coins Game",
  "tags": [],
  "text": "EnglishVietnameseAsen and Boyan are playing the following game. They choose two different positive integers K and L, and start the game with a tower of N coins. Asen always plays first, Boyan – second, after that – Asen again, then Boyan, and so on. The boy in turn can take 1, K or L coins from the tower. The winner is the boy, who  takes  the  last  coin  (or  coins). After  a  long,  long playing, Asen  realizes  that  there  are cases in which he could win, no matter how Boyan plays. And in all other cases Boyan being careful can win, no matter how Asen plays.So, before the start of the game Asen is eager to know what game case  they have. Write a program coins which help Asen  to predict  the game  result  for given K, L and N.INPUTThe input describes m games.The first line of the standard input contains the integers K, L and m, 1 < K < L < 10, 3 < m < 50. The second  line contains m integers N1, N2 … Nm, 1 ≤ Ni ≤ 1 000 000,  i = 1, 2 … m, representing  the number of coins in each of the m towersSAMPLE INPUT2 3 53 12 113 25714 88888OUTPUTThe  standard output contains a  string of  length m composed of letters A and B.  If Asen wins  the  ith game (no matter how the opponent plays), the ith letter of the string has to be A. When Boyan wins the ith game (no matter how Asen plays), the ith letter of the string has to be B.SAMPLE OUTPUTABAABProblem for kid - Please, think like kid.",
  "sample_input": "SAMPLE INPUT2 3 53 12 113 25714 88888",
  "sample_output": "SAMPLE OUTPUTABAAB",
  "link": "https://www.spoj.com/problems/MCOINS",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "SAMPLE INPUT2 3 53 12 113 25714 88888",
      "expected_output": "SAMPLE OUTPUTABAAB",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 8 1 9 7 8 4\np yibtg 9 7 9 8 1 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 4 9 6 10 9\nl vwyh 3 10 7 9 10 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 5 4 7 9 1 7\nq flbkt 10 4 6 1 8 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "27 89 47 11 78 44 94\nhb ciub 33 87 31 29 80 11",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "15 86 96 53 18 23 14\nf anf 84 66 94 89 66 77",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "28 81 31 96 10 86 48\nt ipwsz 2 5 57 30 45 71",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 23 75 8 65 81 83\nmsgd zp 17 17 66 10 4 69",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "70 59 42 42 34 5 75\nhkw lw 85 61 76 13 75 62",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "446 264 204 52 298 307 427\nb k 178 499 304 273 298 490",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "113 151 170 196 329 124 192\nmjuvug h 440 147 399 464 95 410",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "53 181 458 268 256 238 384\nx aaxu 319 69 170 180 393 401",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "464 224 139 281 333 212 101\nbbhp ulx 146 112 136 247 409 111",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "478 179 361 159 75 113 183\ns ryfs 163 221 198 385 88 139",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "116 68 335 155 279 219 268\nnszo usydt 494 361 451 292 351 475",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "196 226 438 138 236 344 434\nnutbn fkdb 411 94 183 94 255 114",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\nenk wva 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\ntek gnkqv 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1 999 1000 1 2 2\ngj awvz 1000 2 1000 1 999 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1000 999 999 1000 999\nq mx 1 1000 1000 1000 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:37"
}