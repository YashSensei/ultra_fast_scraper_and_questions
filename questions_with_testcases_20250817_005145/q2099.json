{
  "problem_code": "problems",
  "title": "Happy Telephones",
  "tags": [],
  "text": "In the land of Eden, all phone conversations are happy ones. People complaining on the phone are immediately put in jail. To enforce this law, the police taps all phone conversations.The police wants to hire the appropriate number of operators to listen to all conversations in a given period of time. Unfortunately, each of their operators can listen to one conversation only before needing a really long break to rest from the effort.As a contractor of the police department, you have been asked to provide a program capable of determining the required number of operators. If the program does not work correctly, you will be put in jail as well, along with all the unhappy complainers. Do you really want to end up there?InputEach test case starts with two integers denoting the number of phone callsN(1 ≤N< 10 000) and the number of intervalsM(1 ≤M< 100). This is followed byNlines describing the telephone calls, each one consisting of four integersSource,Destination,StartandDuration.SourceandDestinationidentify the pair of telephone numbers establishing the connection (0 ≤Source,Destination≤ 10 000 000).StartandDurationare the start time and duration of the call in seconds (1 ≤Duration≤ 10 000 andStart≥ 0). You can safely assume that the sum ofStartandDurationfits into a 32-bit signed integer.Afterwards followMlines containing the time intervals the police are interested in, each described by two integersStartandDuration, in the same format and with the same meaning and constraints as those in the telephone calls. The last test case is represented byN=M= 0 and must not be processed.OutputFor each of theMintervals of each test case, print the number of calls that are active during at least one second of the interval.ExampleInput:3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0Output:3\r\n2\r\n1\r\n0Problem setter: Manuel Freire",
  "sample_input": "Input:3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0Output:3\r\n2\r\n1\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HAPPYTL",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "3 2\r\n3 4 2 5\r\n1 2 0 10\r\n6 5 5 8\r\n0 6\r\n8 2\r\n1 2\r\n8 9 0 10\r\n9 1\r\n10 1\r\n0 0",
      "expected_output": "3\r\n2\r\n1\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10\n5 1 3 9\n2 1 7 10\n7 9 10 5\n2 2\n1 2\n8 2\n8 3 4 5\n1 5\n10 7\n2 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n4 4 1 7\n7 5 4 3\n1 3 5 3\n3 10\n8 3\n5 6\n2 9 10 6\n1 10\n3 7\n6 5",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 1\n6 3 2 9\n8 10 3 1\n6 2 8 2\n2 4\n4 2\n2 2\n9 1 2 4\n8 1\n9 8\n3 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "26 24\n66 34 36 84\n60 40 40 11\n83 74 55 27\n18 27\n7 8\n66 75\n100 19 81 33\n69 91\n82 22\n12 13",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "4 41\n46 47 12 14\n26 69 62 33\n30 80 68 92\n66 20\n46 67\n37 81\n59 75 70 80\n91 23\n30 21\n35 63",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "82 62\n85 69 21 18\n7 28 13 4\n76 54 3 19\n89 39\n94 11\n67 85\n46 65 7 20\n29 24\n48 59\n24 18",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 60\n46 52 69 32\n39 23 56 69\n99 100 23 1\n77 64\n33 47\n73 8\n39 65 57 43\n95 21\n21 34\n79 78",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 25\n6 18 61 67\n4 41 56 61\n93 60 98 30\n53 68\n36 81\n88 88\n57 25 95 67\n88 25\n83 23\n21 81",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1567 4379\n1048 2431 2869 3688\n2076 1249 634 3588\n2307 4078 2626 3959\n729 1327\n1821 2142\n1448 2259\n1722 4118 1223 2754\n4415 2859\n4450 3229\n2537 4198",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4044 3655\n2143 2005 3455 3968\n3240 1810 4648 3247\n773 2629 3603 4242\n1948 4895\n2155 3648\n3908 4204\n4056 855 3223 2634\n4769 1115\n1066 4609\n3577 1349",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2933 2346\n4535 4750 1247 4480\n3616 2809 3577 3896\n4965 610 2790 2978\n3030 1273\n1166 969\n4246 4126\n758 1453 1324 3442\n4121 4375\n4218 4964\n4645 790",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "592 1816\n4757 2183 1208 3893\n3124 2635 3845 717\n556 994 4020 1752\n2344 3619\n1851 2164\n3753 1153\n4948 1785 2328 593\n1829 1331\n4221 4466\n3670 2408",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "4107 2091\n4336 2986 767 4181\n2428 4600 1783 3010\n1993 749 3708 2288\n3795 3680\n1604 560\n4116 1502\n2789 1570 3192 4989\n2296 4015\n2856 2557\n2769 1089",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2910 4328\n3220 3025 4621 510\n3807 3616 4141 799\n2742 797 3702 852\n1906 3091\n4599 4583\n2039 874\n846 4225 1377 3433\n2949 4542\n2456 4891\n536 728",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2249 1851\n4231 623 3096 1634\n4599 3804 3570 1674\n4383 3281 2602 2994\n2697 4469\n3251 2297\n2177 2574\n2185 4390 4428 633\n4365 1735\n822 2589\n2987 1169",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000\n10000 10000 10000 10000\n10000 10000\n10000 10000\n10000 10000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n9999 10000 9999 10000\n2 10000 10000 9999\n9999 9999 2 2\n10000 2\n9999 1\n2 10000\n1 2 10000 1\n1 9999\n2 9999\n2 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9999 9999\n1 2 2 10000\n9999 1 10000 2\n9999 1 1 2\n10000 1\n9999 9999\n10000 10000\n1 10000 9999 9999\n10000 10000\n10000 1\n10000 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:25"
}