{
  "problem_code": "problems",
  "title": "Operators (new ver)",
  "tags": [],
  "text": "Given a sequence a1, a2 ... an and a integer S, your task is find a way to insert an operator ‘+’ , ‘-‘, ‘.‘, ‘~‘ \r\nto every neighbor pair of A, that the result of the expression after insert equal to S.Note that :a . b = a + 2 * ba ~ b = a - 2 * bInputFirst line : N and S (2 ≤ N ≤ 22, |S| ≤ 5 * 1016)Second line : N integers, a1, a2 ... an  (|ai| ≤ 1015)OutputIf there are way(s) to insert, output any of them, otherwise output “Impossible” (without quotes).ExampleInput:9 5\r\n1 2 3 4 5 6 7 8 9Output:-~~~++++Input:3 -1\r\n-2 5 7Output:ImpossibleDetails:In first test case : 1 - 2 - 2 * 3 - 2 * 4 - 2 * 5 + 6 + 7 + 8 + 9 = 5You may want to try another versionhere.",
  "sample_input": "Input:9 5\r\n1 2 3 4 5 6 7 8 9Output:-~~~++++",
  "sample_output": "Input:3 -1\r\n-2 5 7Output:Impossible",
  "link": "https://www.spoj.com/problems/BLOPER2",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "9 5\r\n1 2 3 4 5 6 7 8 9",
      "expected_output": "-~~~++++",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 -1\r\n-2 5 7",
      "expected_output": "Impossible",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "8 9\n1 3 4 3 8 3 6 2 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 10\n6 5 7 2 2 3 7 8 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n6 5 7 4 3 4 4 9 9",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "20 21\n8 14 17 16 21 9 20 16 9",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "8 10\n7 17 21 19 18 8 3 18 3",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "21 18\n12 19 6 11 5 17 20 21 19",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 18\n13 6 14 22 18 1 18 13 6",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10 6\n14 6 18 1 21 17 17 5 18",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "7 3\n5 5 1 9 11 3 6 2 8",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "11 9\n9 4 1 3 3 5 4 2 11",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "11 7\n9 2 6 1 11 5 10 2 5",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "7 10\n2 3 7 3 7 4 6 1 4",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "6 2\n6 4 1 2 6 8 4 6 5",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2 1\n10 10 8 6 10 11 10 5 3",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 2\n6 7 10 11 8 11 11 2 2",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "22 22\n22 22 22 22 22 22 22 22 22",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "22 22\n22 22 22 22 22 22 22 22 22",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n22 21 2 22 2 22 22 22 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:57"
}