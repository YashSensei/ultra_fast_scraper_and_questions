{
  "problem_code": "problems",
  "title": "Dinosaur Menace",
  "tags": [],
  "text": "After a failed but interesting DNA project, a lot of dinosaurs spread over the lab devouring most of the staff. Jeff, a scientist that worked in the project, managed to survive by hiding in the southwest corner of the lab. Now that all dinosaurs are asleep, he is going to try to leave. The exit of the lab is located at the northeast corner.Jeff knows that if any of the dinosaurs wakes up, he does not stand a chance, so he needs to minimize the likelihood of that happening. For that, he wants to follow a path that maximizes the minimum distance from him to a dinosaur along the path. The length of the path is of no interest to Jeff.For this problem we consider that Jeff and the dinosaurs are points on the plane, and that Jeff’s path is a continuous curve connecting the southwest and northeast corners of the lab. As we mentioned, Jeff wants to maximize the minimum distance between this curve and the position of any dinosaur.InputThe input contains several test cases, each one described in several lines. The first line of each test case contains three integers N, W, and H separated by single spaces. The value N is the number of dinosaurs in the lab (1 ≤ N ≤ 300). The values W (width) and H (height) are the size of the lab on the x and y coordinates, respectively (2 ≤ W, H ≤ 106). This means that the starting position of Jeff is at (0, 0), while the exit of the lab is located at (W, H). Each of the next N lines contains two integers X and Y separated by a single space, representing the coordinates of a different dinosaur (1 ≤ X ≤ W − 1 and 1 ≤ Y ≤ H − 1). Note that no dinosaur is located on the border of the lab. You may assume that no two dinosaurs have the same location. The last line of the input contains the number −1 three times separated by single spaces and should not be processed as a test case.OutputFor each test case output a single line with the maximum possible distance to the closest dinosaur. Write the result rounded to the closest number with exactly three decimal places, using the highest in case of ties, as usual.ExampleInput:1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1Output:1.000\r\n1.581\r\n1.803",
  "sample_input": "Input:1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1Output:1.000\r\n1.581\r\n1.803",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DINOSM",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "1 2 2\r\n1 1\r\n3 5 4\r\n1 3\r\n4 1\r\n1 2\r\n2 5 4\r\n1 3\r\n4 1\r\n-1 -1 -1",
      "expected_output": "1.000\r\n1.581\r\n1.803",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 9 10\n1 5\n9 6 3\n5 5\n10 5\n9 10\n10 5 7\n7 8\n4 6\n8 1 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 3\n5 2\n3 7 1\n10 5\n6 10\n5 4\n2 5 10\n6 8\n10 6\n1 9 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4 8\n2 3\n6 7 8\n10 10\n9 6\n3 10\n9 10 6\n2 3\n8 5\n2 9 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 59 69\n84 84\n46 68 71\n26 54\n60 18\n8 61\n74 22 14\n62 77\n64 13\n94 83 49",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "43 39 44\n20 45\n89 40 2\n3 92\n35 60\n95 90\n1 94 48\n30 86\n44 35\n60 80 37",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "20 19 15\n38 90\n32 60 55\n60 71\n25 55\n99 75\n57 34 51\n18 44\n67 41\n45 90 66",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "62 66 95\n83 10\n85 39 66\n42 72\n62 22\n6 17\n85 17 95\n26 46\n98 27\n35 39 46",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 5 5\n84 30\n1 23 35\n43 6\n57 88\n9 38\n10 30 68\n46 57\n67 88\n78 68 100",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "92 141 46\n66 95\n73 127 41\n128 36\n128 90\n80 103\n109 16 98\n82 50\n114 46\n15 62 85",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "45 78 144\n68 105\n91 82 47\n90 75\n79 95\n92 127\n76 78 122\n94 75\n138 67\n25 57 104",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "42 78 19\n100 23\n94 141 24\n62 33\n120 137\n142 131\n72 120 85\n16 123\n114 90\n129 147 142",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "61 97 86\n23 46\n33 150 118\n76 113\n35 111\n95 42\n39 107 131\n135 84\n123 59\n133 149 54",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "117 66 50\n104 50\n32 145 150\n51 38\n66 93\n22 69\n130 79 95\n111 138\n64 47\n94 148 20",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 15 33\n150 112\n141 99 48\n15 29\n75 112\n63 75\n127 61 130\n54 118\n113 111\n126 62 89",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "82 148 123\n140 62\n73 42 47\n70 97\n111 44\n57 37\n73 38 71\n138 57\n83 21\n93 26 43",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300 300",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300\n300 300\n300 300 300",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 299 1\n299 1\n1 299 299\n1 300\n1 300\n2 299\n300 1 299\n1 299\n300 2\n1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "299 300 300\n2 1\n300 299 1\n300 300\n300 299\n2 2\n1 2 1\n1 299\n1 299\n300 1 299",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}