{
  "problem_code": "problems",
  "title": "Sequence Partitioning II",
  "tags": [],
  "text": "Given a sequence ofNordered pairs of positive integers (Ai,Bi), you have to \r\n\r\npartition it into several contiguous parts. Letpbe the number of these parts, whose boundaries are \r\n\r\n(l1,r1), (l2,r2), ... ,(lp,rp), which satisfyli=ri-1+ 1,li<=ri,l1= 1,rp=n. The parts themselves \r\n\r\nalso satisfy the following restrictions:For any two pairs (Ap,Bp), \r\n\r\n(Aq,Bq), where (Ap,Bp) is belongs to theTpth part and (Aq,Bq) theTqth part. IfTp<Tq, thenBp>Aq.LetMibe the maximumA-component of elements in theith part, sayMi= max\r\n\r\n{Ali,Ali+1...Ari}, 1 <=i<=pit is provided thatwhere Limit is a given integer.LetSibe the sum ofB-components of elements \r\n\r\nin theith part.Now I want to minimize the valuemax{Si:1 <=i<= \r\n\r\np}Could you tell me the minimum?InputThe input contains exactly one test case. The first line of input contains two positive integers N (N <= 50000), Limit \r\n\r\n(Limit <= 231-1). Then follow N lines each contains a positive integers pair (A,B). It's always \r\n\r\nguaranteed thatmax{A1,A2...An} <= LimitOutputOutput the minimum target value.ExampleInput:4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4Output:9ExplanationAn available assignment is the first two pairs are assigned into the first part and the last two pairs are assigned into \r\n\r\nthe second part. ThenB1>A3,B1>A4,B2>A3,B2>A4, max{A1,A2}+max{A3,A4} <= 6, and minimum max\r\n\r\n{B1+B2,B3+B4}=9.",
  "sample_input": "Input:4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4Output:9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SEQPAR2",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "4 6\r\n4 3\r\n3 5\r\n2 5\r\n2 4",
      "expected_output": "9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8\n4 5\n5 6\n2 4\n10 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4\n7 10\n9 7\n1 8\n3 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n8 3\n6 9\n7 6\n1 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "78 87\n52 37\n18 72\n66 80\n2 81",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "90 16\n36 8\n85 65\n58 98\n14 4",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "78 53\n36 58\n96 21\n80 84\n67 89",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 90\n75 88\n11 18\n9 27\n85 93",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 33\n88 99\n38 38\n14 77\n76 65",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "346 367\n297 219\n59 236\n409 377\n304 295",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "484 297\n360 98\n440 408\n160 99\n467 416",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "483 345\n332 227\n193 109\n454 65\n62 478",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "436 282\n87 229\n169 371\n475 304\n92 313",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "230 244\n139 182\n55 316\n328 121\n82 460",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "279 479\n473 398\n297 95\n226 405\n494 177",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "148 400\n239 447\n59 395\n430 346\n403 299",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1000 999\n999 999\n2 1000\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\n2 2\n1 1000\n999 1000\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}