{
  "problem_code": "problems",
  "title": "I LOVE Kd",
  "tags": [],
  "text": "The \"I-Love-Kd-trees'' annual con is receiving too many applicants so they decided to complicate a bit the task used to select participants. (They realized some people were using other data structures to solve their problems, so they designed this problem, almost only solvable with Kd-trees).You are given a list ofNnumbers andQqueries. Each query can be of two types.Type-0queries (marked with 0 in the input), consist of three integers:i,landk; letdbe thek-thsmallest element until the indexi(i.e. if the first i +1 elements were sorted in non-descending way,dwould be the element at index k - 1). Then, the answer to each query is the index of thel-thoccurrence ofdin the array. If there's no such index, the answer is -1.Type-1queries (marked with 1 in the input) are contiguous-swap update-queries, and consists of a single integeri. When a type-1 query is executed the elements at index i and i +1 in the list must be swapped.You have to consider that all indexes are counted starting with 0.InputInput consists of one test case.The first line contains two integers,N(1 ≤ N ≤ 106) andQ(1 ≤ Q ≤ 105).The next line containsNpossible distinct integersai(-109≤ ai ≤ 109).ThenQlines follow. Each of them starts with an integer which can be 0 or 1, denoting the type of the query. If it’s 0, then three integersi,landkfollow (0 ≤ i < N, 1 ≤ k ≤ i+1, 1 ≤ l ≤ N).If it’s 1, then an integerifollows, meaning that you have to swap the elements at indexes i and i+1 (0 ≤ i ≤ N-1).OutputFor each query of type-0 (in the same order as the input) output a single line with the answer to that query.ExampleInput:10 62 3 1 1 2 7 9 1 2 60 2 3 21 11 20 2 3 21 00 0 2 1Output:872",
  "sample_input": "Input:10 62 3 1 1 2 7 9 1 2 60 2 3 21 11 20 2 3 21 00 0 2 1Output:872",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ILKQUERYIII",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "10 62 3 1 1 2 7 9 1 2 60 2 3 21 11 20 2 3 21 00 0 2 1",
      "expected_output": "872",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 8 4 9 8 9 3 9 1 3 2 4 3 2 9 6 2 4 2 5 4 5 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 5 9 4 3 5 4 7 10 4 10 7 2 10 8 2 7 5 10 7 1 10 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 2 1 3 10 7 8 9 7 9 1 1 10 9 4 7 4 5 5 9 9 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "18 4 52 13 40 33 58 78 12 30 7 34 99 43 58 73 39 69 17 26 100 8 6",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "29 53 56 64 48 1 80 77 16 3 98 80 23 49 96 9 70 44 28 22 56 53 23",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "92 54 1 20 67 92 50 74 57 59 76 45 42 17 71 34 30 30 96 14 59 40 4",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "87 36 38 65 8 7 42 37 36 39 7 78 9 40 96 59 40 41 67 74 28 94 36",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 64 15 99 26 8 87 71 32 38 99 62 26 38 47 15 6 15 27 15 83 99 95",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12 12 36 13 11 25 17 40 9 23 6 39 18 40 19 14 42 27 19 5 28 10 38",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "45 43 46 28 51 47 49 6 26 37 39 14 36 50 42 46 48 17 20 44 19 35 45",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "20 45 7 18 48 9 11 50 10 34 33 46 5 51 28 47 43 14 10 53 43 32 29",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "6 17 26 35 16 20 29 32 39 16 32 37 25 28 40 13 28 45 48 44 22 39 38",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23 30 52 17 9 7 8 16 39 53 40 37 8 50 27 9 30 32 12 48 12 17 23",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 38 31 16 18 36 46 10 23 33 51 23 17 29 48 12 46 20 38 28 41 28 36",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "52 35 36 11 35 44 44 53 18 51 11 23 32 45 51 24 53 17 26 6 40 7 35",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106 106",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 2 105 105 106 106 1 2 2 106 106 105 105 106 106 1 1 106 1 1 1 105",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1 2 2 2 2 2 2 105 1 105 1 1 106 106 106 105 105 2 106 105 105",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:51"
}