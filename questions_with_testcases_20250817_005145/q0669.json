{
  "problem_code": "problems",
  "title": "Growing Strings",
  "tags": [],
  "text": "Gene and Gina have a particular kind of farm. Instead of growing animals and vegetables, as it is usually the case in regular farms, they grow strings. A string is a sequence of characters. Strings have the particularity that, as they grow, they add characters to the left and/or to the right of themselves, but they never lose characters, nor insert new characters in the middle.Gene and Gina have a collection of photos of some strings at diﬀerent times during their growth. The problem is that the collection is not annotated, so they forgot to which string each photo belongs to. They want to put together a wall to illustrate strings growing procedures, but they need your help to ﬁnd an appropriate sequence of photos.Each photo illustrates a string. The sequence of photos must be such that if si comes immediately before si+1 in the sequence, then si+1 is a string that may have grown from si (i.e., si appears as a consecutive substring of si+1). Also, they do not want to use repeated pictures, so all strings in the sequence must be different.Given a set of strings representing all available photos, your job is to calculate the size of the largest sequence they can produce following the guidelines above.InputEach test case is given using several lines. The ﬁrst line contains an integer N representing the number of strings in the set (1 ≤ N ≤ 104). Each of the following N lines contains a diﬀerent non-empty string of at most 1000 lowercase letters of the English alphabet. Within each test case, the sum of the lengths of all strings is at most 106.The last test case is followed by a line containing one zero.OutputFor each test case output a single line with a single integer representing the size of the largest sequence of photos that can be produced.ExampleInput:6\r\nplant\r\nant\r\ncant\r\ndecant\r\ndeca\r\nan\r\n2\r\nsupercalifragilisticexpialidocious\r\nrag\r\n0Output:4\r\n2",
  "sample_input": "Input:6\r\nplant\r\nant\r\ncant\r\ndecant\r\ndeca\r\nan\r\n2\r\nsupercalifragilisticexpialidocious\r\nrag\r\n0Output:4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MGLAR10",
  "scraped_at": "2025-08-17 00:33:30",
  "test_cases": [
    {
      "input": "6\r\nplant\r\nant\r\ncant\r\ndecant\r\ndeca\r\nan\r\n2\r\nsupercalifragilisticexpialidocious\r\nrag\r\n0",
      "expected_output": "4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n2\n6\n8\n2\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n3\n9\n7\n4\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n54422456\n42708477\n31916428\n57458474\n86061095\n64363752\n11282928\n68776091\n91854637\n25704825\n16044656\n81159435\n43587364\n24079628\n5196059\n7906581\n95153263\n72442259\n20933343",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n42785403\n28808912\n9022174\n58384476\n10053716\n74405125\n72135630\n77904178\n58626419\n26625665\n85557190",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n79152509\n8099929\n54223051\n75988609\n42255220\n9105023\n44330250\n9147003\n6289913\n86473772\n85326332\n65121011\n3385208",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n19775493\n16176186\n7746297\n4315687\n74895329\n46414768",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n2355166\n36719342\n95845856\n19235710\n11181678",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "21\n28323\n86731\n86254\n53784\n15186\n28569\n83493\n23022\n2491\n13718\n7278\n39807\n80095\n12003\n41717\n24939\n61684\n747\n70870\n62300\n96683",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "98\n48187\n57884\n96598\n68940\n21237\n25729\n38322\n4853\n16648\n7231\n33989\n85039\n24539\n4860\n33378\n51570\n34344\n98320\n52091\n59346\n83535\n73420\n70703\n62214\n88163\n47936\n17695\n33885\n11188\n90992\n77894\n29086\n44436\n83888\n98309\n53057\n42787\n25669\n81744\n39888\n65797\n24375\n40503\n51629\n86517\n83418\n33620\n2426\n78835\n32131\n10769\n56709\n59583\n74886\n55744\n42280\n24902\n73941\n39285\n28344\n46308\n29280\n45622\n87394\n96280\n86660\n83009\n2214\n92453\n56855\n34358\n25193\n3503\n85698\n41388\n83943\n77980\n52403\n24619\n10692\n58482\n59558\n90703\n38992\n18093\n78931\n21701\n66269\n11203\n42345\n3385\n13913\n36841\n76813\n21601\n39763\n18672\n13482",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "104\n74326\n62787\n9821\n83053\n34723\n69330\n46929\n17790\n95521\n1705\n12206\n30408\n25488\n98636\n86465\n37551\n91597\n94222\n20022\n36614\n45435\n44524\n4636\n12074\n78761\n97681\n23761\n13418\n90739\n13710\n60618\n89673\n61707\n28315\n87255\n84729\n71791\n17462\n2277\n59877\n50289\n88741\n64802\n99532\n678\n59929\n93424\n36254\n73902\n41678\n76258\n95766\n32427\n73557\n82415\n83810\n1374\n15137\n42275\n79708\n16166\n88989\n27686\n11474\n38635\n4437\n76839\n8844\n76802\n34849\n80350\n31317\n15678\n99319\n11245\n48159\n48156\n66089\n86779\n89683\n31163\n1408\n20292\n3612\n71975\n69697\n55326\n96708\n84807\n13367\n63660\n70678\n38101\n55311\n73345\n99345\n92137\n92478\n63422\n77414\n20656\n65324\n6088\n83925",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "53\n36237\n97770\n49571\n97980\n36122\n78732\n87551\n52666\n55350\n66762\n8434\n77610\n4660\n81674\n64656\n51161\n17390\n50108\n8118\n3824\n70008\n27548\n67571\n25164\n61804\n56199\n92809\n63396\n4265\n21980\n26670\n2689\n1393\n77695\n38947\n55493\n98092\n81736\n46847\n90512\n39319\n56118\n49313\n43078\n7332\n5065\n36137\n31485\n76758\n70594\n57435\n40983\n26066",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "37\n60133\n46178\n12400\n40596\n9666\n73172\n49622\n87881\n56435\n78892\n78819\n63640\n55516\n67820\n48358\n3334\n46631\n60023\n46575\n97659\n79773\n42233\n82296\n46240\n65227\n45804\n1243\n34548\n21450\n67445\n96381\n20611\n61671\n3850\n3886\n80334\n58879",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "93\n47964\n65661\n81258\n90264\n58376\n25650\n50751\n22991\n72576\n40066\n76804\n58853\n31113\n28396\n63796\n58558\n20842\n19932\n43013\n78975\n9827\n55706\n76583\n64615\n80887\n78202\n74436\n10405\n19298\n55490\n58352\n85006\n61102\n86986\n37044\n38563\n49268\n29569\n67001\n92016\n60487\n9911\n38307\n75439\n17423\n90575\n87534\n65689\n4127\n93640\n48752\n41524\n98049\n8198\n66176\n96287\n18924\n1455\n42718\n50358\n2801\n98954\n23\n90598\n79000\n50811\n61685\n21785\n25161\n67674\n17107\n39349\n36422\n97528\n96643\n77726\n39636\n63231\n66840\n75460\n15221\n30832\n5405\n80445\n77190\n5985\n84222\n22970\n99410\n44704\n12358\n58300\n46292",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n96476\n85558\n44617\n81609\n33366\n68445\n76262\n55704\n52900\n91849\n32058\n59233\n12684\n79465\n83811\n2539\n93087\n17679\n45057\n3941\n36139\n88875\n22520\n62662\n83827\n83395\n76661\n94352",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "104\n86090207\n70217626\n4331010\n45390176\n85940133\n36326734\n99970969\n97530682\n54517205\n95065705\n8180691\n11389176\n53544252\n37243951\n11404587\n23399532\n2975995\n80114505\n15208446\n58328824\n67110014\n1445527\n35442656\n28082690\n59495651\n12511838\n26633083\n90553044\n8423573\n29150013\n85757384\n227840\n13570060\n50712122\n84153969\n86126656\n46926189\n23787091\n70410472\n10612508\n15233913\n11302620\n45772577\n49522465\n91171149\n80167831\n45493133\n42139841\n56881848\n74687649\n97405851\n95492305\n80736449\n38354343\n9924547\n96514908\n36663352\n34877560\n91161174\n89177442\n94051416\n26645372\n96042976\n44986806\n6165079\n3755382\n1826388\n80822361\n48923057\n68628601\n51445117\n1456369\n62349154\n69956773\n13973801\n78728996\n87081807\n79614742\n26400821\n1235702\n36461722\n47992486\n67021225\n70358844\n19705258\n71582300\n55069216\n83785598\n64812624\n23363091\n13824599\n54418778\n31745769\n13480161\n68036548\n29292641\n16434959\n86918211\n45490145\n13440518\n45528175\n41946436\n75946784\n53040356",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 104)"
    },
    {
      "input": "104\n93772793\n32246812\n12216084\n14898366\n66507735\n54561807\n92128252\n83956554\n30010185\n8768798\n16467653\n40053587\n8679007\n85002104\n62540858\n43692802\n67902137\n33904201\n98414562\n24353349\n43793045\n69497664\n79045290\n85620704\n5600244\n17636285\n6380855\n65710609\n99311534\n10671988\n11189936\n36824947\n51030043\n78388239\n18627501\n31469497\n28528220\n37428998\n3124309\n32324539\n26573734\n36648142\n14108318\n53715801\n42976777\n62652846\n80461593\n41942341\n12089003\n97771833\n77045784\n881840\n79091858\n29851041\n6124414\n88390192\n97151241\n54684870\n27740790\n31695860\n92899779\n19004221\n10025104\n14678905\n11806031\n41033579\n1615453\n36358128\n13403496\n4427446\n82695608\n24836355\n11829099\n8918944\n86405946\n89513483\n79883827\n77739503\n44947031\n65137163\n39680082\n74799283\n11980294\n46878740\n1206173\n99404534\n13969984\n43936400\n84797056\n60786962\n33786957\n35797188\n765945\n9867882\n85859775\n85252156\n30268778\n13827086\n60176321\n76792396\n62336640\n90667575\n75515217\n70441097",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 104)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}