{
  "problem_code": "problems",
  "title": "Digital Image Recognition",
  "tags": [],
  "text": "According to Wikipedia, image processing is any form of signal processing for which the input is an image, such as photographs or frames of video; the output of image processing can be either an image or a set of characteristics or parameters related to the image. Most image-processing techniques involve treating the image as a two-dimensional signal and applying standard signal-processing techniques to it.The task you are facing here is a relatively easy one (compared to our general conception of image processing!). Given a black-and-white image of size R × C with some digits (and possibly other shapes) on it, your program needs to figure out the digits written on the image. Specifically, the digits drawn on the graph will adhere to the following rules:1) Digits are drawn with a series ofstrokes. Astrokecan be regarded as arectangleof any size on the image, and its edges will always be parallel to eitherx-axisory-axis. The number of strokes required to draw each digit will be exactly as follows:0 \t1 \t2 \t3 \t4 \t5 \t6 \t7 \t8 \t9\r\n4 \t1 \t5 \t4 \t3 \t5 \t5 \t2 \t5 \t5Refer to thefigure belowif you are unclear about how the digits are drawn.2) Although thewidthof strokes used to draw a digit might bedifferent, theouter shapes of digitswill strictly follow those specified in thefigure below.3) In order for a digit to be recognizable,allparts (strokesandjoints) presented in the graph below must also be clearlydistinguishablein the image.(Refer to the last sample test case if you are unsure about this requirement; in that test case, when the middle stroke of 2 is omitted, the number should not be considered as recognizable.)4) You may assume that the image is not rotated, and there isno noisein the input.Please output the sum of digits recognizable in the graph. In the case that no characters is recognizable, please output 0 instead.InputThere are multiple test cases in the input file.Each test case starts with two integers, R and C (1 ≤ R, C ≤ 500), specifying the number of rows / columns of the graph. Each of the following R lines contains consecutive C characters (\"0\" or \"1\"), describing the image to be processed.Two successive test cases are separated by a blank line. A case with R = 0, C = 0 indicates the end of the input file, and should not be processed by your program.OutputFor each test case, please print a single integer, the sum of recognizable numbers. See the sample output for format details.ExampleInput:5 12\r\n001101011111\r\n000101000011\r\n000101001111\r\n001101000011\r\n000000000111\r\n\r\n5 3\r\n111\r\n010\r\n110\r\n010\r\n110\r\n\r\n6 14\r\n11111000011111\r\n11001000000011\r\n11111001000000\r\n11111001001110\r\n11001011001010\r\n11111000001110\r\n\r\n5 2\r\n11\r\n01\r\n11\r\n01\r\n11\r\n\r\n6 9\r\n111100111\r\n000100001\r\n000100011\r\n011100010\r\n010000011\r\n011110000\r\n\r\n0 0Output:Case #1: 4\r\nCase #2: 0\r\nCase #3: 15\r\nCase #4: 3\r\nCase #5: 2",
  "sample_input": "0 \t1 \t2 \t3 \t4 \t5 \t6 \t7 \t8 \t9\r\n4 \t1 \t5 \t4 \t3 \t5 \t5 \t2 \t5 \t5",
  "sample_output": "Input:5 12\r\n001101011111\r\n000101000011\r\n000101001111\r\n001101000011\r\n000000000111\r\n\r\n5 3\r\n111\r\n010\r\n110\r\n010\r\n110\r\n\r\n6 14\r\n11111000011111\r\n11001000000011\r\n11111001000000\r\n11111001001110\r\n11001011001010\r\n11111000001110\r\n\r\n5 2\r\n11\r\n01\r\n11\r\n01\r\n11\r\n\r\n6 9\r\n111100111\r\n000100001\r\n000100011\r\n011100010\r\n010000011\r\n011110000\r\n\r\n0 0Output:Case #1: 4\r\nCase #2: 0\r\nCase #3: 15\r\nCase #4: 3\r\nCase #5: 2",
  "link": "https://www.spoj.com/problems/IMGREC2",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "0 \t1 \t2 \t3 \t4 \t5 \t6 \t7 \t8 \t9\r\n4 \t1 \t5 \t4 \t3 \t5 \t5 \t2 \t5 \t5",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 12\r\n001101011111\r\n000101000011\r\n000101001111\r\n001101000011\r\n000000000111\r\n\r\n5 3\r\n111\r\n010\r\n110\r\n010\r\n110\r\n\r\n6 14\r\n11111000011111\r\n11001000000011\r\n11111001000000\r\n11111001001110\r\n11001011001010\r\n11111000001110\r\n\r\n5 2\r\n11\r\n01\r\n11\r\n01\r\n11\r\n\r\n6 9\r\n111100111\r\n000100001\r\n000100011\r\n011100010\r\n010000011\r\n011110000\r\n\r\n0 0",
      "expected_output": "Case #1: 4\r\nCase #2: 0\r\nCase #3: 15\r\nCase #4: 3\r\nCase #5: 2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "6 10 5 3 1 7 6 2 3 10\n2 5 3 10 1 2 10 10 2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10 6 2 8 4 5 4 9 2\n10 5 5 2 4 1 8 7 9 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 4 6 1 3 5 8 7 2 3\n8 9 10 6 7 9 7 10 1 9",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "64 40 29 72 61 75 40 62 98 86\n20 100 13 15 65 18 70 29 34 16",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "83 80 29 91 81 61 2 38 18 84\n2 90 55 24 42 17 78 20 79 16",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "45 56 77 15 25 51 40 95 87 81\n1 100 5 30 64 58 76 42 84 88",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "43 98 85 51 68 78 15 10 44 32\n78 99 12 81 59 41 29 46 22 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "24 18 44 4 4 19 81 11 77 7\n75 30 100 28 67 39 78 91 91 68",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "174 366 445 462 447 491 218 318 65 119\n123 474 397 99 476 105 119 118 467 386",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "444 302 343 483 140 462 84 70 165 107\n423 304 68 211 151 117 418 245 402 374",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "129 55 373 293 358 403 72 342 203 244\n186 212 213 198 366 165 67 359 318 499",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "355 302 373 86 366 471 134 134 80 429\n394 414 327 371 267 265 232 336 372 464",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "95 180 407 266 77 419 97 288 338 344\n122 383 410 198 117 245 306 311 253 203",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "298 292 449 396 350 268 387 322 417 58\n290 380 289 476 97 453 409 375 416 381",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "147 437 476 64 118 365 372 82 83 311\n81 181 321 331 70 374 209 63 409 278",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 2 2 1000 1000 1 999 2 1000\n1 2 999 999 1000 999 2 999 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}