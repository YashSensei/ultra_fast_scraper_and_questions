{
  "problem_code": "problems",
  "title": "Game",
  "tags": [],
  "text": "EnglishVietnameseNote: C, S, B are used instead of H, F, I, respectively, in test case.Hal and Dave are playing an interesting game on a rectangular\nchess-like board consisting of squares arranged in R rows and C columns.\nHere are the rules of the game:There is only one piece on a board alternately moved by the\nplayers.One move of the piece consists of moving it to an adjacent square\nin one of following directions: down, right or diagonally right–down.Some squares on a board are ‘forbidden’, i.e. the piece cannot\nenter such squares.A square may contain at most one of the following: a\nhamburger, french fries, ice cream. A player who moves the piece to\na square with a hamburger receives 1 point, with french fries 3 points\nand with ice cream 5 points.The game ends when a player who should make a move cannot\nmake it (because piece would fall off of board or enter a forbidden\nsquare in all three directions).If at the end of a game both players have same number of\npoints, then the one who cannot make a legal move lost that game.If at the end of a game players have different numbers of\npoints, then the player with more points won the game.Both players have 0 points at the beginning of a game. Hal\nmakes first move. The initial position of the piece is a square that\nis not forbidden and it does not contain any food.Since there is a finite number of sequence of moves finishing any\ngiven game, it can be proved that for any given initial position of\nthe piece either Dave or Hal can win no matter how the other player\nplays, i.e. he has a winning strategy.A board, positions of forbidden squares, positions of squares with\nfood and some initial positions are given. Write a program that\nwill determine for each given initial position which player has a\nwinning strategy.InputThe first line of input file contains two integers R, number of rows\n(2 ≤ R ≤ 100) and C, number of columns (2 ≤ C ≤ 100) of a board,\nseparated by a space character.Each of next R lines contains a sequence of C characters representing\na corresponding row of the board. Forbidden squares are represented\nwith ‘#’ character. Squares containing food are represented\nwith letters H (hamburger), F (french fries) and I (ice cream). Other\nsquares are represented with a dot character (‘.’).The next line contains an integer N, 1 ≤ N ≤ 100, the number of given initial\npositions for which a program should find which player has a winning strategy.\nEach of the following N lines contain two integers A (1 ≤ A ≤ R) and\nB (1 ≤ B ≤ C), separated with a space character, which determine a\nrow and a column of an initial position of a piece.Rows are numbered from top to bottom with number from 1 to R, and\ncolumns are numbered from left to right with numbers from 1 to C.OutputOutput file should contain N lines. The ithline should contain name\nof a player (i.e. DAVE or HAL) having a winning strategy for ithgiven\ninitial position.SampleInput:3 4\n.H#.\nI...\n##H.\n3\n1 1\n1 4\n2 3Output:HAL\nDAVE\nHALInput:4 5\n.#...\n#.#.F\n.#..F\n.#...\n3\n3 1\n3 3\n1 5Output:HAL\nHAL\nHALInput:5 6\n##..#.\n..#FH#\n..#..#\n###...\n.....I\n4\n2 1\n5 1\n1 4\n1 6Output:HAL\nHAL\nDAVE\nDAVE",
  "sample_input": "Input:3 4\n.H#.\nI...\n##H.\n3\n1 1\n1 4\n2 3Output:HAL\nDAVE\nHAL",
  "sample_output": "Input:4 5\n.#...\n#.#.F\n.#..F\n.#...\n3\n3 1\n3 3\n1 5Output:HAL\nHAL\nHAL",
  "link": "https://www.spoj.com/problems/MGAME1",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "3 4\n.H#.\nI...\n##H.\n3\n1 1\n1 4\n2 3",
      "expected_output": "HAL\nDAVE\nHAL",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5\n.#...\n#.#.F\n.#..F\n.#...\n3\n3 1\n3 3\n1 5",
      "expected_output": "HAL\nHAL\nHAL",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "9 2\nwavpf\nqzk\nqv\n10\n6 9\n7 9\n5 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\nopvkeci\nn\nbvzfd\n1\n2 4\n9 10\n2 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 3\nkx\nmdfi\njjw\n9\n1 10\n10 6\n8 6",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "33 72\nekhlx\nfexk\npe\n60\n1 45\n75 22\n23 98",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 62\nz\nnxy\nnsl\n27\n86 29\n13 94\n63 25",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "77 72\nmw\nvoxfmv\nth\n3\n11 93\n12 31\n25 73",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 11\nfffffqa\nfghg\nnrascjg\n95\n23 29\n40 71\n7 81",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 36\npnrt\nlyivv\nfp\n19\n87 46\n20 42\n53 5",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "11 30\ngkcvzod\nzd\nck\n12\n14 5\n41 48\n43 18",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "27 47\nxesiwua\ntuk\niq\n19\n14 33\n13 19\n11 30",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "10 37\nbmit\nt\nmkqihbo\n41\n8 45\n10 8\n5 43",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "39 31\nljcxk\ndcvvdu\nrp\n14\n22 47\n31 32\n16 9",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38 14\nr\nxyq\nyeopssca\n49\n38 10\n30 49\n12 26",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 50\nlygtj\nxrtogxu\ngzoiunxu\n21\n47 21\n29 47\n25 13",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "25 46\nszlxrirq\ncv\ncbnqhj\n42\n45 9\n49 47\n30 7",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\nomaz\nvzykxkz\nztzzhacr\n100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\nj\nttqzds\nlbygyqqv\n100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\nlvbcq\ndnht\nezmix\n100\n99 99\n99 2\n1 99",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}