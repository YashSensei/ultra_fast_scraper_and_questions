{
  "problem_code": "problems",
  "title": "Count on a tree II",
  "tags": [],
  "text": "You are given a tree withNnodes.  \r\nThe tree nodes are numbered from1toN.  \r\nEach node has an integer weight.We will ask you to perform the following operation:u v: ask for how many different integers that represent the weight of nodes there are on the path fromutov.InputIn the first line there are two integersNandM. (N≤ 40000,M≤ 100000)In the second line there areNintegers. The i-th integer denotes the weight of the i-th node.In the nextN-1lines, each line contains two integersuv, which describes an edge (u,v).In the nextMlines, each line contains two integersuv, which means an operation asking for how many different integers that represent the weight of nodes there are on the path fromutov.OutputFor each operation, print its result.ExampleInput:8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8Output:4\r\n4",
  "sample_input": "Input:8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8Output:4\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/COT2",
  "scraped_at": "2025-08-17 00:33:03",
  "test_cases": [
    {
      "input": "8 2\r\n105 2 9 3 8 5 7 7\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n4 8\r\n2 5\r\n7 8",
      "expected_output": "4\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10\n3 6 1 3 8 5 4 5\n8 9\n7 6\n5 2\n6 6\n1 6\n5 5\n9 9\n3 3\n9 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 8\n2 8 6 5 2 3 10 7\n2 3\n2 9\n8 4\n7 4\n5 6\n1 9\n8 2\n2 4\n10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 5\n7 9 6 2 5 1 1 10\n1 8\n6 6\n10 5\n3 5\n6 7\n9 1\n2 3\n6 10\n3 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 51\n37 90 32 51 74 4 51 70\n24 19\n28 65\n48 87\n49 7\n31 21\n80 2\n22 100\n74 44\n46 89",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 66\n53 79 39 87 42 56 25 44\n6 95\n78 41\n5 87\n65 62\n98 22\n68 50\n76 70\n84 83\n69 63",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 35\n23 11 77 81 12 73 3 84\n84 100\n33 49\n91 18\n34 27\n22 52\n66 88\n22 60\n8 23\n79 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "12 77\n2 45 33 95 40 20 70 50\n73 70\n26 27\n98 99\n89 72\n93 79\n76 82\n28 11\n48 31\n96 69",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 24\n6 90 24 39 43 92 58 57\n5 61\n95 85\n4 79\n94 74\n79 60\n59 41\n21 76\n15 18\n97 2",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "18630 19211\n6309 12670 2867 9062 18911 16609 3756 10552\n12120 18241\n10254 5912\n3435 13436\n18868 4951\n3092 3517\n15951 17529\n18396 15817\n16332 7686\n5702 16595",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "14610 16280\n8076 5093 5761 19802 17387 7086 5898 17895\n2695 5298\n6797 16088\n17511 18021\n14247 13063\n12242 13323\n14434 17259\n9701 10437\n9404 7608\n16648 9740",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8078 13356\n17317 17968 7328 13447 2297 12844 11708 10443\n4832 13165\n4041 9254\n4134 13658\n10822 2189\n7311 19050\n6764 11285\n14100 4514\n11050 15935\n8136 18471",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17161 3814\n14496 8702 5431 5423 6891 16145 4549 9006\n13722 17683\n9049 6567\n18460 18008\n11371 14362\n13828 5876\n18726 12290\n12395 16392\n3889 13002\n3670 18353",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19165 6621\n7823 14997 4230 12046 11488 13361 19219 4181\n11828 9883\n18920 16442\n11401 15170\n7378 19270\n8423 19755\n3934 18594\n10483 9913\n11905 14186\n3566 6882",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "13239 2625\n19087 14207 11579 4255 12971 11245 15426 13411\n4595 2503\n19366 16861\n3608 5673\n3598 9869\n10678 11791\n10476 14071\n5565 10814\n10295 6219\n8268 2425",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5537 17966\n10242 16274 13522 2119 5192 16469 19271 16625\n19141 8080\n15319 3518\n5112 10655\n16932 14809\n4271 19360\n14257 4495\n4644 14681\n18941 17466\n16580 6100",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "40000 40000\n40000 40000 40000 40000 40000 40000 40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "40000 40000\n40000 40000 40000 40000 40000 40000 40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000\n40000 40000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 40000\n40000 39999 1 40000 2 1 1 40000\n2 2\n1 39999\n40000 40000\n1 40000\n1 39999\n1 1\n2 39999\n40000 40000\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "40000 1\n2 39999 40000 1 2 39999 40000 2\n39999 1\n39999 2\n39999 2\n1 2\n1 2\n40000 2\n1 1\n1 2\n39999 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}