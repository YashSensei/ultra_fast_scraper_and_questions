{
  "problem_code": "problems",
  "title": "Hackers",
  "tags": [],
  "text": "The network of your office is composed of several computers and bidirectional links. Each link connects a given pair of computers and has an access value. Each user in the network has an access privilege, and is able to use any link with access value not exceeding his access privilege.Everything was fine until you notice that a bunch of hackers are accessing the network. You know that if there is a link between computers A and B, with access value V, and a hacker with access privilege of at least V controls A, then he can control B. Hackers wish to control the most important computers by exploiting problems in the network. They are trying to increase their access privileges in order to use the links, and your task is to measure how safe the network is.Given the description of the network, the computer each hacker currently controls and the target computer each hacker wishes to control, you need to calculate the minimum access privilege each hacker needs to get in order to control his target computer. Hackers act independently, neither they collaborate nor interfere with each other. This means that each hacker may control each computer and use each link independently of what the other hackers do.InputEach test case is described using several lines. The first line contains three integers C, L and H, indicating the number of computers, links and hackers in the network, respectively (2 ≤ C ≤ 3000, 1 ≤ L, H ≤ 105).Each computer is identified by an integer number between 1 and C. Each of the next L lines describes a different bidirectional link using three integers A, B and V; the numbers A and B identify two distinct computers that are the endpoints of the link (1 ≤ A < B ≤ C); the number V is the access value of the link, that is, any hacker must have an access privilege of at least V to use the link (1 ≤ V ≤ 109).Each of the last H lines describes a different hacker using two distinct integers S and T that identify the computer that the hacker currently controls and the computer that the hacker wishes to control, respectively (1 ≤ S, T ≤ C).You may assume that within each test case no two links connect the same pair of computers, and that for any pair of computers there is at least one sequence of links that allow to reach one computer starting from the other.The end of input is indicated with a line containing the number −1 three times.OutputFor each test case, output a single line with H integers representing the minimum access privilege each hacker needs to achieve his goal. The result for each hacker must appear in the same order that the hackers are described in the input.ExampleInput:5 6 4\r\n1 2 4\r\n1 3 5\r\n2 4 3\r\n2 5 1\r\n3 4 2\r\n4 5 2\r\n3 2\r\n2 4\r\n1 5\r\n3 1\r\n2 1 1\r\n1 2 1\r\n2 1\r\n2 1 3\r\n1 2 1000000000\r\n2 1\r\n2 1\r\n1 2\r\n-1 -1 -1Output:2 2 4 4\r\n1\r\n1000000000 1000000000 1000000000",
  "sample_input": "Input:5 6 4\r\n1 2 4\r\n1 3 5\r\n2 4 3\r\n2 5 1\r\n3 4 2\r\n4 5 2\r\n3 2\r\n2 4\r\n1 5\r\n3 1\r\n2 1 1\r\n1 2 1\r\n2 1\r\n2 1 3\r\n1 2 1000000000\r\n2 1\r\n2 1\r\n1 2\r\n-1 -1 -1Output:2 2 4 4\r\n1\r\n1000000000 1000000000 1000000000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HACKERS",
  "scraped_at": "2025-08-17 00:33:16",
  "test_cases": [
    {
      "input": "5 6 4\r\n1 2 4\r\n1 3 5\r\n2 4 3\r\n2 5 1\r\n3 4 2\r\n4 5 2\r\n3 2\r\n2 4\r\n1 5\r\n3 1\r\n2 1 1\r\n1 2 1\r\n2 1\r\n2 1 3\r\n1 2 1000000000\r\n2 1\r\n2 1\r\n1 2\r\n-1 -1 -1",
      "expected_output": "2 2 4 4\r\n1\r\n1000000000 1000000000 1000000000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3 5\n6 6 10\n1 6 6\n8 5 10\n10 5 9\n4 7 5\n4 8 3\n9 9\n8 3\n6 8\n6 1\n5 6 1\n6 5 2\n8 7\n6 7 7\n5 3 4\n7 8\n7 7\n3 7\n9 9 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 1\n3 9 1\n1 9 2\n5 2 7\n6 3 9\n6 5 6\n4 3 6\n1 5\n7 10\n2 3\n5 9\n5 10 6\n3 3 5\n8 10\n1 6 4\n6 2 7\n6 4\n4 2\n9 1\n9 7 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7 1\n3 8 2\n5 9 4\n3 1 6\n10 8 8\n5 1 4\n1 3 7\n10 10\n2 4\n1 4\n9 8\n1 2 2\n7 10 10\n9 3\n2 5 1\n4 10 9\n4 10\n1 8\n10 3\n3 6 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 98 7\n88 75 2\n99 41 3\n61 16 41\n80 52 67\n59 30 25\n38 86 52\n6 96\n99 74\n16 93\n27 13\n30 27 28\n66 90 16\n87 1\n92 95 5\n38 63 63\n49 65\n88 60\n35 73\n83 74 62",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 69 34\n57 99 78\n8 85 11\n15 92 89\n69 10 23\n42 15 32\n56 90 8\n66 95\n90 30\n21 48\n79 5\n27 40 49\n79 54 60\n41 72\n78 43 15\n80 85 85\n54 90\n18 33\n52 44\n96 43 89",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "32 25 37\n69 4 26\n74 35 60\n58 2 41\n11 25 64\n86 13 33\n31 58 44\n3 65\n89 34\n91 21\n73 71\n42 74 41\n47 87 26\n27 95\n98 42 39\n61 52 22\n57 38\n31 25\n4 66\n18 64 24",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 29 57\n96 20 97\n18 94 23\n80 81 85\n50 55 4\n64 93 90\n98 22 30\n69 19\n46 36\n84 99\n76 11\n99 4 41\n46 89 43\n91 39\n15 59 30\n92 61 81\n79 31\n82 7\n10 53\n10 39 65",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "80 68 32\n16 60 91\n98 16 6\n46 20 71\n73 61 1\n12 11 16\n86 76 96\n90 23\n34 61\n77 43\n12 40\n26 8 83\n27 57 15\n10 31\n30 85 31\n4 51 21\n5 82\n100 9\n47 8\n55 48 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "221 423 459\n488 222 492\n113 481 232\n351 299 451\n163 245 274\n61 112 347\n176 486 107\n80 488\n469 216\n289 138\n247 110\n485 125 384\n103 114 311\n488 232\n141 247 171\n243 155 96\n326 93\n150 171\n310 333\n402 104 130",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "247 418 478\n386 118 182\n63 56 337\n427 423 111\n341 409 334\n266 219 442\n254 211 191\n78 199\n104 355\n156 483\n449 436\n51 269 190\n348 376 332\n56 309\n131 402 67\n328 107 295\n261 115\n53 207\n167 376\n126 367 198",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "61 239 496\n387 253 94\n81 60 76\n330 478 246\n437 354 92\n390 470 211\n218 104 313\n213 75\n489 425\n166 269\n363 245\n401 447 488\n276 326 251\n96 384\n157 251 209\n174 353 478\n90 196\n100 251\n454 143\n120 250 58",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "125 296 309\n134 116 111\n271 339 355\n359 496 108\n301 458 177\n431 341 448\n240 457 416\n420 123\n312 243\n490 137\n206 263\n197 443 266\n480 455 319\n279 288\n242 472 343\n332 286 248\n340 477\n476 249\n487 276\n404 271 227",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "457 197 379\n382 357 259\n110 278 437\n386 399 413\n73 214 478\n166 402 150\n354 101 475\n298 264\n420 98\n257 296\n323 440\n75 234 239\n98 277 213\n458 207\n199 467 232\n124 270 112\n403 495\n342 163\n191 446\n459 102 405",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "134 95 460\n271 337 50\n59 171 285\n54 264 177\n228 274 497\n199 79 200\n433 456 117\n267 402\n168 118\n105 342\n378 388\n105 258 75\n100 441 69\n317 144\n159 367 478\n209 365 100\n276 335\n478 373\n362 286\n437 335 58",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "89 363 175\n286 93 169\n235 105 72\n241 357 245\n74 346 224\n87 443 472\n363 243 385\n413 444\n420 329\n74 121\n317 407\n190 192 337\n251 386 410\n107 267\n276 286 402\n271 304 154\n137 385\n468 134\n157 290\n395 149 368",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 999\n1 1 1\n1 1 999\n2 1000 1\n1000 2 999\n1 1 999\n1 999 1000\n1000 1\n1 999\n999 2\n999 2\n999 1 2\n1 1000 1000\n999 999\n1000 1 999\n2 1 1\n1000 999\n999 1\n1 999\n999 999 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 1000\n999 999 2\n1000 2 2\n1000 1 999\n1 999 999\n1 2 1000\n999 999 1\n1000 1000\n1 1\n999 999\n999 2\n1 2 1\n999 2 2\n2 1000\n1 1 1\n1 1000 1\n2 1\n1000 1\n1000 999\n1 1 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:38"
}