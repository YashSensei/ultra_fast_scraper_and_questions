{
  "problem_code": "problems",
  "title": "The Embarrassed Cryptographer",
  "tags": [],
  "text": "The young and very promising cryptographer Odd Even has implemented the security module of a large system with thousands of users, which is now in use in his company. The cryptographic keys are created from the product of two primes, and are believed to be secure because there is no known method for factoring such a product effectively.What Odd Even did not think of, was that both factors in a key should be large, not just their product. It is now possible that some of the users of the system have weak keys. In a desperate attempt not to be fired, Odd Even secretly goes through all the users keys, to check if they are strong enough. He uses his very poweful Atari, and is especially careful when checking his boss’ key.InputThe input consists of no more than 20 test cases. Each test case is a line with the integers 4 ≤ K ≤ 10100and 2 ≤ L ≤ 106. K is the key itself, a product of two primes. L is the wanted minimum size of the factors in the key. The input set is terminated by a case where K = 0 and L = 0.OutputFor each number K, if one of its factors are strictly less than the required L, your program should output “BAD p”, where p is the smallest factor in K. Otherwise, it should output “GOOD”. Cases should be separated by a line-break.ExampleInput:143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0Output:GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
  "sample_input": "Input:143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0Output:GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CRYPTON",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "143 10\r\n143 20\r\n667 20\r\n667 30\r\n2573 30\r\n2573 40\r\n0 0",
      "expected_output": "GOOD\r\nBAD 11\r\nGOOD\r\nBAD 23\r\nGOOD\r\nBAD 31",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 9\n8 7\n7 1\n9 7\n7 7\n2 10\n9 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n6 1\n8 10\n10 8\n3 7\n1 5\n2 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n4 3\n2 1\n4 4\n5 9\n6 8\n3 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "97 4\n64 70\n47 84\n87 70\n66 45\n20 12\n27 30",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "3 11\n94 34\n47 57\n31 30\n35 12\n96 2\n18 53",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 70\n54 20\n63 7\n22 14\n68 14\n40 8\n99 27",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 31\n77 3\n91 77\n39 46\n35 85\n83 35\n56 89",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "56 12\n1 7\n75 28\n18 79\n90 31\n10 83\n38 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "133 329\n64 292\n166 342\n237 358\n367 458\n315 270\n122 292",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "350 217\n464 96\n90 322\n50 369\n240 255\n490 469\n168 288",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "232 258\n265 408\n87 413\n266 403\n235 275\n408 478\n385 337",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "297 250\n279 134\n323 496\n377 472\n225 326\n218 145\n138 82",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "75 444\n366 316\n148 334\n405 464\n109 50\n467 474\n322 205",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "131 346\n214 463\n275 350\n410 432\n88 273\n183 384\n84 150",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "477 125\n442 62\n389 195\n181 290\n450 397\n242 305\n205 190",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n1000 999\n2 1000\n1 2\n1 1\n999 1000\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n1 999\n1 999\n1 1\n999 1000\n999 1\n999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}