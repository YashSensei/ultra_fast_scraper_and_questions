{
  "problem_code": "problems",
  "title": "Roger and tree III",
  "tags": [],
  "text": "Roger was able to solve his problem based on tree last time, only because of your help. He has been doing good and is learning and practicing various problems on trees (as he likes solving problems on connected undirected acyclic graphs). This time he is stuck with a harder problem and has spent almost a week trying to solve this problem, with no efficient solution till now. But, he has you as his friend and he knows that only you can help him with your excellent programming skills.You will be given an input in the form of a growing tree. i.e.; Initially you have a tree consisting only of vertex1. At each step, the tree will grow. So next, vertexuwill be connected to vertex1, then vertexvwill be connected to either vertex1or vertexu, and so on till you get a tree consisting of 'N' vertex. However, at any instant, while adding the vertexes you will be given a vertex 'x' (which is already present in the tree grown so far), and you will be asked to print the eccentricity of the given vertexx.LetGbe a graph and 'x' be a vertex of G.The eccentricity of the vertex 'x' is the maximum distance from 'x' to any vertex present in G.That is,e (x) = max {d (x, y) : y is in G}.Of course vertexy, should also be present in the tree, grown so far.Along with the eccentricity, you should also print the vertex 'y'.Please help Roger.InputThe first line contains 'N' and 'M', where N = Number of nodes in the tree and M = Number of Queries.Next M lines will either have an input of the type \"U x y\" or \"Q x\".For the input of type\"U x y\",  you have to connect the vertex 'y' to the vertex 'x', where vertex 'x' is already present in the tree and vertex 'y' is the new vertex. Obviously, there will be(N - 1)inputs of the type \"U x y\".OutputFor each input of the type \"Q x\", you have to print the eccentricity of vertex 'x', followed by the vertex 'y'.If there are multiple such 'y'. Print thesmallest 'y'.ExampleInput:5 8\r\nQ 1\r\nU 1 4\r\nQ 1\r\nU 4 2\r\nU 1 5\r\nU 5 3\r\nQ 1\r\nQ 2Output:0 1\r\n1 4\r\n2 2\r\n4 3ExplanationInitially, the tree has vertex 1.Q 1   → Eccentricity of vertex 1 is 0.U 1 4 → Connect vertex 4 to vertex 1.Q 1   → Eccentricity of vertex 1 is 1.U 4 2 → Connect vertex 2 to vertex 4.U 1 5 → Connect vertex 5 to vertex 1.U 5 3 → Connect vertex 3 to vertex 5.Q 1   → Eccentricity of vertex 1 is 2. Vertex 2 and Vertex 3 both are at a distance of 2 from vertex 1. Print the smaller one.Q 2   → Eccentricity of vertex 2 is 4.Constraints1 ≤ N ≤ 105N - 1 ≤ M ≤ 2×N1 ≤ x, y ≤ NLike trees? Try the problems:RTREEandRTREE2too.",
  "sample_input": "Input:5 8\r\nQ 1\r\nU 1 4\r\nQ 1\r\nU 4 2\r\nU 1 5\r\nU 5 3\r\nQ 1\r\nQ 2Output:0 1\r\n1 4\r\n2 2\r\n4 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RTREE3",
  "scraped_at": "2025-08-17 00:34:37",
  "test_cases": [
    {
      "input": "5 8\r\nQ 1\r\nU 1 4\r\nQ 1\r\nU 4 2\r\nU 1 5\r\nU 5 3\r\nQ 1\r\nQ 2",
      "expected_output": "0 1\r\n1 4\r\n2 2\r\n4 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6\n5\nykncj 4\n10 9\no 5 2\n4\njpp 1\n2 3\nrwlt 9 3\n10 3\nvlo 4 10\n1 5\npmuq 5 1\n10\ndx 8\n6\nyd 1",
      "expected_output": "0\n5\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n10\n0\n6\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 3\n1\neyb 4\n6 7\nq 10 3\n9\nfkel 6\n8 6\ngb 4 2\n5 3\nt 3 7\n5 8\nn 9 3\n6\nyjgpd 9\n7\novrj 9",
      "expected_output": "0\n1\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n6\n0\n7\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 8\n1\nh 4\n5 2\nhoiuu 4 7\n2\nrqcz 9\n6 7\naexaz 8 5\n1 3\nkmxqj 10 2\n5 8\nnsmyq 7 3\n5\npe 2\n1\nqiljo 1",
      "expected_output": "0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n5\n0\n1\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 91\n24\nhph 100\n84 16\nc 27 100\n7\nfpkb 59\n14 19\nh 5 68\n87 29\nnphu 33 33\n32 28\noxz 12 86\n76\ne 79\n17\nng 73",
      "expected_output": "0\n24\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n76\n0\n17\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "19 93\n16\nz 28\n73 15\nqsq 21 30\n6\nkoxt 46\n10 9\nlyrgn 8 14\n10 6\ndqs 11 51\n20 7\nqngli 30 74\n78\ncft 6\n14\nb 64",
      "expected_output": "0\n16\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n78\n0\n14\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 90\n21\nffrh 48\n95 50\nl 31 93\n92\nndkpp 66\n76 78\nr 78 28\n48 15\ney 24 28\n30 70\nutllg 89 42\n21\ngoak 65\n32\nbo 32",
      "expected_output": "0\n21\n0\n0\n0\n92\n0\n0\n0\n0\n0\n0\n0\n21\n0\n32\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "80 51\n70\nj 64\n7 1\nsak 47 53\n23\nbalfv 54\n29 39\nz 34 28\n56 18\nqtqa 15 98\n86 80\nk 46 86\n43\nw 82\n73\nadmi 13",
      "expected_output": "0\n70\n0\n0\n0\n23\n0\n0\n0\n0\n0\n0\n0\n43\n0\n73\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 69\n14\nbpvl 7\n73 84\nrjxa 70 3\n87\nju 92\n30 5\nc 50 28\n87 69\nwzd 76 25\n95 67\nr 50 100\n100\ncs 6\n14\nmixjf 76",
      "expected_output": "0\n14\n0\n0\n0\n87\n0\n0\n0\n0\n0\n0\n0\n100\n0\n14\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "21 7\n7\nj 16\n32 43\nesxxx 20 51\n24\nrlifs 26\n46 32\njbpfe 20 29\n6 17\nw 13 32\n33 14\nnjb 21 39\n48\nhxlu 40\n45\nz 36",
      "expected_output": "0\n7\n0\n0\n0\n24\n0\n0\n0\n0\n0\n0\n0\n48\n0\n45\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "15 43\n43\ncub 12\n38 41\nnrsa 24 5\n29\nxkme 43\n39 26\ndxhkb 48 11\n26 19\nevl 14 31\n52 8\nux 16 49\n25\nglmuu 44\n9\no 46",
      "expected_output": "0\n43\n0\n0\n0\n29\n0\n0\n0\n0\n0\n0\n0\n25\n0\n9\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36 45\n17\nxl 36\n49 43\np 5 51\n39\nagnk 25\n34 13\nrsqna 23 40\n8 25\nudob 39 18\n21 11\nlmxd 32 43\n24\naenhw 51\n49\nvy 15",
      "expected_output": "0\n17\n0\n0\n0\n39\n0\n0\n0\n0\n0\n0\n0\n24\n0\n49\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "29 17\n15\nr 41\n15 29\nvkk 23 24\n25\nao 16\n7 48\nik 6 12\n12 17\nhv 23 45\n52 40\nx 26 21\n39\nbqpgf 10\n5\nmluso 37",
      "expected_output": "0\n15\n0\n0\n0\n25\n0\n0\n0\n0\n0\n0\n0\n39\n0\n5\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "51 15\n31\nc 51\n49 44\nmgdx 19 10\n21\npsn 17\n43 23\ncurl 31 45\n23 45\nvn 7 29\n25 21\nyooeb 48 11\n8\na 8\n48\npu 43",
      "expected_output": "0\n31\n0\n0\n0\n21\n0\n0\n0\n0\n0\n0\n0\n8\n0\n48\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "33 21\n49\nnvtu 37\n21 9\nv 47 50\n51\nfsrgt 46\n30 26\nwe 28 35\n14 50\nkqbht 27 49\n39 43\nkbjv 8 24\n42\ndc 17\n25\nmcwuq 9",
      "expected_output": "0\n49\n0\n0\n0\n51\n0\n0\n0\n0\n0\n0\n0\n42\n0\n25\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "50 15\n28\nrb 28\n20 31\nag 36 13\n27\ntmxg 44\n34 8\npf 36 36\n35 49\nvgvr 45 29\n52 13\ngrp 47 52\n6\nt 14\n26\nobjkr 26",
      "expected_output": "0\n28\n0\n0\n0\n27\n0\n0\n0\n0\n0\n0\n0\n6\n0\n26\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105\nhpvwh 105\n105 105\nkxhcu 105 105\n105\nih 105\n105 105\nbqeac 105 105\n105 105\nz 105 105\n105 105\nqyep 105 105\n105\nvdc 105\n105\ngums 105",
      "expected_output": "0\n105\n0\n0\n0\n105\n0\n0\n0\n0\n0\n0\n0\n105\n0\n105\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105\nqh 105\n105 105\na 105 105\n105\nw 105\n105 105\nvj 105 105\n105 105\nnxkt 105 105\n105 105\nxat 105 105\n105\noi 105\n105\nlmab 105",
      "expected_output": "0\n105\n0\n0\n0\n105\n0\n0\n0\n0\n0\n0\n0\n105\n0\n105\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n104\ncsha 1\n104 2\nkssm 2 104\n1\nlv 1\n2 1\nnwtq 2 105\n1 104\ncdm 2 104\n1 2\nnqg 2 2\n104\nx 2\n2\ncld 104",
      "expected_output": "0\n104\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n104\n0\n2\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 104\n1\nsbhh 2\n104 104\ngw 105 1\n104\nshwh 105\n104 2\ni 104 1\n105 104\nlpkuv 105 2\n105 1\nzvlw 1 104\n1\nipe 105\n105\ngzojj 105",
      "expected_output": "0\n1\n0\n0\n0\n104\n0\n0\n0\n0\n0\n0\n0\n1\n0\n105\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:58",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:24"
}