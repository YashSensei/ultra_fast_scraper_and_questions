{
  "problem_code": "problems",
  "title": "Help the soldier",
  "tags": [],
  "text": "Igor, a famous Russian soldier, must go to war in Afghanistan (we are in late 80â€™s). His superiors allowed him to buy himself his equipment. So, he must buy 6 items: helmet, bulletproof vest, trousers, boots,  tunic and a firearm. This items are represented with numbers from 1 to 6. There are N (6 < N < 101) items of these 6 types. Each item is characterized by its price p[i] (in rublas) and is quality q[i]. Igor has T (0 < T < 1001) rublas and he wants to maximize the total quality of his equipment. The total quality is the quality of the item with the lowest quality. Help him.InputOn the first line there are two integers N and T. On the lines 2 ... N+1 there are 3 integers, type[i] (from 1 to 6) p[i] and q[i]. (0 < p[i], q[i] < T )OutputOutput the total quality.ExampleInput:7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5Output:1NoteIf there is no answer, output 0.There can be less than 6 types of items.[ Edited by EB ]Warning:Some input files are incomplete and broken.",
  "sample_input": "Input:7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5Output:1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SOLDIER",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "7 53\r\n5 8 2\r\n2 4 8\r\n6 8 13\r\n1 13 12\r\n4 5 1\r\n3 2 7\r\n3 13 5",
      "expected_output": "1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 2\n6 3 7\n1 5 9\n7 10 2\n2 7 9\n9 2 8\n2 2 8\n5 8 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n3 9 10\n3 2 5\n2 5 8\n2 7 7\n2 5 1\n10 7 3\n5 3 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n7 6 2\n7 7 9\n5 9 9\n4 6 8\n8 8 10\n4 6 10\n6 4 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "60 22\n95 11 55\n81 35 4\n43 23 11\n44 46 1\n8 6 57\n95 84 35\n45 19 31",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 96\n81 85 39\n71 18 65\n81 61 97\n32 71 25\n74 67 28\n24 8 22\n32 31 80",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "52 56\n63 28 54\n79 31 99\n67 79 42\n46 70 39\n13 41 39\n54 13 38\n25 13 26",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "67 10\n23 36 31\n22 60 66\n10 26 48\n50 85 19\n77 6 45\n95 96 24\n74 94 88",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 55\n26 82 65\n91 84 62\n41 59 40\n85 27 92\n41 51 66\n84 100 66\n10 33 92",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "35 11\n12 23 35\n25 24 14\n24 8 36\n19 13 38\n42 27 46\n47 47 12\n14 48 41",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "49 47\n19 24 34\n9 49 50\n15 21 40\n36 50 9\n11 49 24\n44 27 17\n40 8 25",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "38 41\n30 31 36\n12 5 28\n26 36 40\n6 33 26\n40 50 14\n24 18 42\n37 23 12",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 12\n46 43 14\n27 39 33\n11 37 16\n14 25 15\n21 35 44\n49 39 12\n14 26 49",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8 49\n22 7 50\n45 44 21\n32 35 12\n25 47 7\n12 20 6\n20 30 17\n20 37 17",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "11 34\n46 48 36\n42 25 29\n41 22 35\n26 26 16\n48 32 23\n11 15 7\n40 17 47",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "27 8\n38 24 46\n8 38 30\n46 44 41\n7 33 18\n15 6 32\n35 9 15\n14 6 38",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101\n101 101 101",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "101 2\n100 1 101\n101 1 101\n1 2 100\n101 101 2\n100 2 100\n100 2 100\n100 101 100",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 100\n101 2 100\n101 101 100\n2 2 100\n100 100 1\n100 100 100\n1 100 2\n2 1 101",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:03"
}