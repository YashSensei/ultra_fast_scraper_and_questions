{
  "problem_code": "problems",
  "title": "Cestarine",
  "tags": [],
  "text": "In a single day, N of Luka's trucks travel a specific highway. The highway has a number of exits and entrances. An exit with a particular number is in the same location as the entrance with that number.Upon entering the highway, a truck driver receives a ticket which indicates the entrance he used. When exiting, the driver pays a toll equal to the absolute difference of the entrance and exit numbers. For example, if a ticket says he used entrance 30, then exiting at exit 12 will cost him 18.Luka has figured out a way to save toll money that his company daily spends. Any two drivers can meet on the highway and exchange tickets, even if their routes don't overlap. Tickets can be exchanged an arbitrary number of times.However, a driver cannot use an exit if his ticket says he used the same entrance, since that would be suspicious.Write a program that calculates the least total amount of tolls that the drivers can achieve by exchanging tickets.InputOn the first line of the input is the integer T (1 ≤ T ≤ 5), the number of test cases. T cases follow, each beginning with the single integer N (2 ≤ N ≤ 100,000). Each of the next N lines contains two integers between 1 and 1,000,000,000 inclusive, representing the entrance and exit numbers of a truck. Note that no two trucks will have the same entrance or exit numbers.OutputFor each test case, output the least total amount of tolls Luka's company must pay.ExampleInput:2\r\n3\r\n3 65\r\n45 10\r\n60 25\r\n3\r\n5 5\r\n6 7\r\n8 8Output:32\r\n5In the first example, the first and third drivers will exchange tickets. After this, the second and third drivers exchange tickets. After this, the drivers will have the tickets 60, 3, 45, respectively. The total amount in tolls is |65 - 60| + |10 - 3| + |25 - 45| = 32.Warning: large input/output data.",
  "sample_input": "Input:2\r\n3\r\n3 65\r\n45 10\r\n60 25\r\n3\r\n5 5\r\n6 7\r\n8 8Output:32\r\n5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/HIGHWAY",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "2\r\n3\r\n3 65\r\n45 10\r\n60 25\r\n3\r\n5 5\r\n6 7\r\n8 8",
      "expected_output": "32\r\n5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\n7\n8\n1\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n1\n4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n3\n6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n91415689\n67414920\n13589790\n84485411\n62936045\n48614990\n86148937\n78225185\n83270376\n81803402\n78667153\n14711564\n48915618\n24687484",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n55030932\n75761051\n69957629\n56399265\n30922480\n2086964\n60314053\n89167553\n23647095\n71400601\n92967358\n36961375\n70684725\n6496653\n15329334\n35719429\n8870887\n14611591\n19641172\n29406350",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n628082\n78113558\n83660763\n32986056\n8905023\n14866130\n54189104\n45462193\n13081851\n98176236\n15673968\n21591837\n67402617\n95226918\n79433965",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n42105037\n87026644\n64259495\n13361670\n70633638\n94252376\n72774012\n48827669\n32068495\n35257675\n42063002\n50256130\n15110507\n44981023\n19093669\n50146333\n39333798\n34431313",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n63610603\n62806222\n96313858\n22447419\n39408385\n54059732\n15409017\n96253732\n13416272\n82361001\n80418840\n70776050\n67471534\n82406168\n71946381\n11352855\n58764409\n37306619\n97596404",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "66\n77666\n40381\n35482\n481\n91397\n48103\n53855\n51821\n83047\n99926\n66887\n13117\n16946\n81152\n25454\n16768\n92983\n13967\n60636\n29279\n27380\n82414\n86414\n70717\n2002\n88062\n13762\n95750\n87359\n25244\n67407\n29534\n37178\n30213\n11463\n31171\n41795\n14281\n36082\n3200\n12331\n86139\n5826\n4743\n86707\n30113\n34262\n3239\n9206\n4865\n2057\n3027\n17510\n59107\n46531\n50856\n99756\n53447\n66142\n56625\n57111\n14376\n38071\n66771\n50066\n39721",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "23\n50266\n29344\n11559\n50390\n48833\n45897\n41686\n74911\n78587\n62514\n25338\n75698\n9148\n74533\n68933\n93786\n99344\n2321\n91149\n98579\n65777\n8059\n5397",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "54\n55368\n16416\n16142\n54736\n53222\n78524\n15006\n99430\n28257\n71707\n89247\n39770\n77041\n16938\n24855\n83491\n15282\n8387\n98453\n56627\n23824\n51383\n46627\n60407\n14108\n69488\n72085\n28981\n80465\n38515\n22790\n34342\n47620\n95236\n75096\n95080\n31903\n8786\n22929\n64648\n76257\n15946\n11295\n11509\n74173\n22505\n1017\n1704\n40323\n14702\n31281\n68021\n50077\n25050",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n85910\n68502\n33142\n67405\n92989\n13593\n18195\n92211\n65948\n40709\n39086\n65110\n63530\n88974\n7370\n32373\n65211\n93134\n24161\n75640\n16457\n94360\n7939\n5350\n79420\n90639\n92589\n19274\n60605\n70336\n70687\n8402\n1630",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n74296\n95875\n12065\n66204\n22255\n59405\n38671\n90616\n12375\n3277\n87371\n1892\n40022\n79866\n96358\n84265\n46712\n74697\n72522\n41600\n51540\n79483\n6985\n86469\n7832\n69622\n6444\n67707\n59561\n43868\n68759\n2953\n15284\n67743",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "81\n21055\n77818\n23441\n89074\n50053\n69891\n92595\n91004\n23949\n61936\n7952\n72875\n46330\n47353\n63273\n47452\n12719\n40577\n81620\n65265\n56065\n81576\n81744\n49930\n64418\n57685\n31672\n30327\n63389\n39479\n58665\n28034\n24911\n13143\n53431\n28481\n19588\n69761\n36020\n37065\n14825\n32385\n40048\n9260\n93000\n49738\n53012\n45790\n39776\n84265\n14919\n90261\n42390\n891\n63451\n3689\n39628\n74766\n31065\n41709\n73620\n27233\n31127\n52055\n13602\n45594\n97430\n8329\n71607\n38074\n23306\n63315\n90192\n71738\n58881\n27581\n27246\n60961\n55058\n42874\n34794",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "69\n81185\n70198\n75111\n66063\n3219\n87084\n34246\n77723\n94055\n30958\n46617\n7717\n42358\n38047\n18359\n82999\n6162\n93165\n50905\n62739\n79732\n92314\n33220\n52875\n82676\n6394\n51459\n74679\n4688\n95426\n10792\n98773\n72559\n57078\n41524\n1437\n40504\n90936\n68904\n38872\n68345\n36609\n81995\n20952\n44929\n54313\n59997\n88831\n59300\n19224\n40338\n46838\n19300\n17756\n6366\n73998\n15100\n31171\n17696\n17284\n97374\n83500\n27794\n41463\n49370\n12007\n40493\n42957\n23912",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n86880109\n70502190\n89794124\n18747251\n38680952\n92948181\n61902408\n65446793\n87543546\n92057470\n48561354\n68845949\n38058057\n84309044\n80602451\n43098956\n27555109\n73752798\n3515744\n56787966\n27160976\n99084644\n30200010\n27136873\n97706408\n20609970\n7357597\n27884826\n31925348\n19876728\n72336939\n99739575\n79066810\n79739568\n67778656\n36709427\n82894774\n33962316\n40153373\n6401104\n34505899\n23529269\n40827076\n91043090\n34118935\n28654184\n31958371\n57866817\n4071158\n73859095\n91429895\n3849530\n58077870\n82500969\n7275910\n91610758\n54221424\n41558388\n7498166\n35424846\n14938037\n92279867\n88093650\n2447912\n14503188\n2520184\n414928\n4673705\n78342942\n63905982\n64788188\n34394078\n73255027\n75986287\n32324664\n77587885\n18084936\n61653730\n69194369\n15410741\n63037910\n79117266\n20401535\n98352080\n97466820\n60544470\n61805876\n24552511\n18683506\n21744745\n85869980\n78419418\n41563028\n91735974\n53032020\n59511442\n79990117\n220653\n5056463\n21004817",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n48571298\n92277947\n35739943\n18724781\n94595351\n76703425\n55037797\n58276405\n8832992\n99192160\n23304912\n64917178\n48250083\n50867967\n26388761\n4951371\n19501941\n71177298\n25260700\n18205404\n96522323\n75365436\n68478295\n67069646\n47099709\n81419301\n16265945\n1519921\n32389979\n10530998\n3832253\n48876856\n31199813\n76261501\n5501569\n89451533\n41816607\n69636750\n22786320\n94089929\n96650205\n94641545\n53860366\n53467312\n10158924\n72382375\n50283384\n16481289\n93135987\n9514921\n17127978\n65432360\n12618376\n396049\n29820576\n52253439\n48141620\n24013858\n47853877\n37732887\n47357216\n535056\n1738400\n88169349\n34914183\n983075\n201983\n44654663\n49764787\n34300470\n52275717\n40627421\n14908398\n2100185\n37976731\n83354777\n70857687\n10609611\n71125199\n85019891\n64339791\n7703991\n10515733\n3936928\n28503024\n87872138\n4229038\n68792430\n87074327\n180517\n17428226\n53938821\n64297982\n90841125\n25592677\n35744899\n27366394\n14714136\n22441527\n10196340",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n27621323",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}