{
  "problem_code": "problems",
  "title": "Race Against Time",
  "tags": [],
  "text": "As another one of their crazy antics, the N (1 ≤ N ≤ 100,000) cows want Farmer John to race against the clock to answer some of their pressing questions.The cows are lined up in a row from 1 to N, and each one is holding a sign representing a number, Ai(1 ≤ Ai≤ 1,000,000,000). The cows need FJ to perform Q (1 ≤ Q ≤ 50,000) operations, which can be either of the following:Modify cow i's number to X (1 ≤ X ≤ 1,000,000,000). This will be represented in the input as a line containing the letter M followed by the space-separated numbers i and X.Count how many cows in the range [P, Q] (1 ≤ P ≤ Q ≤ N) have Ai≤ X (0 ≤ X ≤ 1,000,000,000). This will be represented in the input as a line containing the letter C followed by the space-separated numbers P, Q, and X.Of course, FJ would like your help.InputThe first line gives the integers N and Q, and the next N lines give the initial values of Ai. Finally, the next Q lines each contain a query of the form \"M i X\" or \"C P Q X\".OutputPrint the answer to each 'C' query, one per line.ExampleInput:4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9Output:2\r\n3\r\n4\r\n2FJ has 4 cows, whose initial numbers are 3, 4, 1, and 7. The cows then give him 6 operations; the first asks him to count the how many of the last three cows have a number at most 4, the second asks him to change the fourth cow's number to 1, etc.Warning: large input/output data.",
  "sample_input": "Input:4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9Output:2\r\n3\r\n4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RACETIME",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "4 6\r\n3\r\n4\r\n1\r\n7\r\nC 2 4 4\r\nM 4 1\r\nC 2 4 4\r\nC 1 4 5\r\nM 2 10\r\nC 1 3 9",
      "expected_output": "2\r\n3\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 5\n5\n8\n1\n5\n3 8 1\nkoiob 8 9 5\n9 1\nqg 6 5\n5 6 7\nvgy 8 2 2\n4 1 4\nqz 8 10 7\n10 5\nnfvf 10 5\n10 4 10\nfgpx 5 5 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 10\n9\n9\n3\n5\n1 3 2\niz 3 10 7\n1 2\nvsr 1 3\n7 3 6\nrsl 9 5 7\n10 5 1\nzew 7 7 4\n7 6\nks 6 8\n3 8 10\nrfgrx 3 5 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 4\n5\n10\n9\n2\n2 10 4\nq 5 6 8\n10 7\nisf 7 4\n4 10 9\neiipr 8 10 6\n1 7 5\nfxwdo 6 6 4\n1 3\nneth 9 8\n9 7 3\netczi 2 4 5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "42 94\n63\n42\n15\n82\n12 6 1\noatw 8 1 9\n24 25\nwt 91 23\n77 38 46\nhipq 45 87 30\n57 68 85\nc 99 63 50\n98 87\ncj 57 8\n87 50 79\nzn 11 97 71",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "72 39\n44\n75\n83\n34\n10 81 24\nuwhg 65 9 99\n54 54\nece 32 85\n3 48 88\nz 47 91 99\n87 18 78\nrpn 75 80 75\n68 44\nxx 85 69\n92 10 74\nn 64 68 64",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 22\n86\n35\n37\n74\n26 62 22\ncc 43 24 49\n1 71\nhoc 39 59\n54 43 93\npft 40 31 5\n45 23 51\nfv 28 42 63\n62 23\nv 96 83\n98 78 36\nfibdr 56 5 94",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "68 2\n41\n37\n20\n30\n35 69 64\naqqsn 29 44 19\n10 83\nntnjj 36 38\n38 25 22\nkw 89 91 29\n53 1 72\nalyg 93 40 95\n77 23\nff 33 99\n9 79 66\nn 49 39 79",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 37\n89\n59\n10\n25\n75 75 82\nsomb 48 79 5\n88 18\nod 9 2\n91 29 44\nz 61 86 70\n13 54 25\nac 52 26 59\n56 50\nxnbtj 80 87\n100 14 61\nnq 68 98 48",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "19 34\n19\n12\n10\n48\n27 40 30\nx 41 38 22\n28 16\nlba 34 33\n13 27 36\nmcnn 9 24 22\n40 42 32\nwf 45 33 14\n9 10\nikox 25 26\n14 46 20\nveq 32 14 7",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "39 15\n15\n25\n47\n29\n21 7 34\nchr 19 45 13\n28 39\npxeta 20 9\n39 29 33\nxq 6 32 49\n37 47 14\nfeyed 13 21 29\n44 23\nbmvx 48 22\n34 7 43\nji 24 31 23",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "41 13\n46\n23\n26\n39\n13 38 36\nh 50 25 38\n31 5\nec 49 23\n29 11 45\ndjewd 18 41 17\n10 8 50\nbc 42 6 37\n27 40\nich 19 39\n29 48 16\nv 43 48 10",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "19 40\n17\n7\n6\n29\n48 6 44\nvz 34 28 41\n40 40\nzf 25 27\n40 22 28\nnny 40 49 23\n20 38 10\nsq 11 16 29\n49 8\nhyo 14 37\n41 29 40\nhpqdt 46 41 20",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23 33\n46\n6\n39\n7\n16 23 33\nmtaq 30 9 31\n11 28\nxhr 33 33\n18 35 36\ndlsix 44 48 45\n14 12 50\npxcf 30 12 46\n24 24\nsujm 32 21\n21 18 44\nsy 27 40 14",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "18 46\n45\n27\n10\n25\n20 19 5\nwy 15 5 48\n27 39\nnpy 28 15\n19 6 45\nv 41 42 14\n40 5 23\nipkwe 11 42 26\n19 26\nmex 36 17\n17 24 41\nx 49 15 46",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20 44\n40\n17\n26\n36\n15 45 50\ndkg 24 49 35\n43 22\nqkqp 28 17\n37 41 32\nl 42 33 27\n37 22 11\nbn 11 26 5\n41 12\nqosma 47 23\n6 43 42\njc 22 7 30",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100\n100\n100\n100\n100 100 100\np 100 100 100\n100 100\ngsb 100 100\n100 100 100\nyio 100 100 100\n100 100 100\nh 100 100 100\n100 100\ncuw 100 100\n100 100 100\nx 100 100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100\n100\n100\n100\n100 100 100\nco 100 100 100\n100 100\nmiegk 100 100\n100 100 100\njnqtm 100 100 100\n100 100 100\nfbq 100 100 100\n100 100\ncg 100 100\n100 100 100\nsswin 100 100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n2\n2\n2\n2\n99 100 1\ns 100 2 99\n100 1\nnr 100 100\n100 1 2\npkwt 100 100 100\n1 1 100\ntzdxh 99 100 99\n99 99\nh 2 100\n100 2 100\njt 99 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n100\n2\n100\n1\n100 2 1\nmvw 100 2 100\n1 99\nvoz 2 1\n99 1 2\nhy 2 99 99\n100 99 99\nuggpt 100 100 100\n100 99\nsdo 1 1\n99 1 100\ns 100 2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:04"
}