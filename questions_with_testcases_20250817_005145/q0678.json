{
  "problem_code": "problems",
  "title": "Coding",
  "tags": [],
  "text": "A binary code for an alphabet of 2Nsymbols is a bijection between the 2Nsymbols and 2Nbinary codewords. For example, in the table below 3 different binary codes are presented for a 4-symbol alphabet (a,b,c,d).SymbolCode 1Code 2Code 3a0001b011010c10110100d111111000A code is said to be prefix-free if none of the codewords is a prefix of another codeword. For example, in the table above, codes 1 and 2 are prefix-free. However, code 3 is not prefix-free. Prefix-free codes are widely used, as encoding and decoding becomes very simple.For this problem, givenNand a message containingMalphabet symbols, the task is to find a prefix-free code for the entire alphabet (including symbols possibly not present in the message) that minimizes the number of necessary bits to represent the message. For example, letN=2, with symbols (a, b, c, d), and the message \"a a a a b b b b a a a a c c d d\"The message encoded with codes 1 and 2 above becomes, respectively:00 00 00 00 01 01 01 01 00 00 00 00 10 10 11 11, for a total of 32 bits.0 0 0 0 10 10 10 10 0 0 0 0 110 110 111 111, for a total of 28 bits.It is possible to show that no prefix-free code can encode the message above in less than 28 bits.InputThe input contains several test cases. Each test case has two lines. The first line of a test case contains two integersN,Mseparated by a single space (1 ≤N≤ 15, 1 ≤M≤ 106,D≤ 15).On the second line areMintegersXi, 0 ≤Xi≤ 2N– 1, representing the message to be encoded. The end of the input is marked by a case withN=M=0. This case must not be processed.OutputFor each test case, print a single line with one integer, the minimum number of bits necessary to encode the message using a prefix-free code.ExampleInput:2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0Output:28",
  "sample_input": "Input:2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0Output:28",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CODING2",
  "scraped_at": "2025-08-17 00:33:19",
  "test_cases": [
    {
      "input": "2 160 0 0 0 1 1 1 1 0 0 0 0 2 2 3 30 0",
      "expected_output": "28",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 3 1 3 4 2 9 6 7 8 6 6 3 8 2 1 2 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 7 3 2 3 2 5 1 9 8 2 10 3 8 4 5 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2 8 4 1 8 9 9 1 10 4 4 7 10 2 10 7 3",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 5 5 14 2 13 15 9 8 5 9 4 15 6 5 7 14",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "13 5 4 4 11 5 11 11 14 4 9 1 9 1 12 3 2 11",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "3 13 7 3 2 13 3 12 1 15 12 2 6 2 6 15 3 11",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 15 12 14 3 10 7 8 9 10 8 11 3 15 2 15 11 13",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 11 10 15 2 5 9 10 7 9 3 1 4 6 12 13 4 1",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "6 3 4 6 4 4 2 2 3 6 6 3 4 1 5 6 2 5",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4 2 4 3 2 3 2 6 6 3 7 5 3 3 5 1 3 4",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "6 5 1 4 6 6 5 1 6 3 6 6 5 4 5 5 3 2",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 7 4 1 4 4 5 2 2 7 4 5 7 3 4 4 6",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6 5 4 3 4 7 5 4 7 3 5 2 7 3 4 2 5 7",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "4 1 1 7 5 1 7 3 1 4 4 7 5 5 4 1 4 7",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 5 6 3 6 7 7 3 5 4 3 6 2 1 2 7 3",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "14 1 14 2 14 1 1 15 1 15 14 1 2 14 14 2 15 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 14 1 15 15 1 15 1 2 2 1 15 2 2 1 2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:40"
}