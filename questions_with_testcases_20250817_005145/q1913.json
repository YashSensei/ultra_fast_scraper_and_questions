{
  "problem_code": "problems",
  "title": "Schedules",
  "tags": [],
  "text": "PEPE the singer has released a new song. He wants to control how many times his songs is played on RUMBA FM radio station. PEPE has hired two companies (A and B) to perform this task. Every day, they give him a schedule indicating the time when the song has been played on the radio. Song always takes the same number of seconds to play, so end times are not important. We are only interested in start times.On the first day PEPE received both schedules. They were almost identical. He verified that each entry of A corresponds to exactly one entry in B. He simply took a pencil, and he marked one entry in A, and then the corresponding entry in B. He continued with this approach as long as unmarked entries exist. The second day PEPE again received both schedules, but he found that the number of entries in both schedules is not the same. Moreover, the times did not match at all due to a human error. He said, \"Oh Gosh!, I have to reconcile both schedules, finding the best possible match between them\". He only trusts the entries that can be matched in both schedules. But how to match them? PEPE started by deciding how many seconds of error (difference) he is able to tolerate for two matched entries. Then he tried to find the largest number of possible matches. For equally large matchings, he is interested in smallest average time difference in seconds. Unfortunately, it may take too long since his new song are very popular, having many hits in RUMBA FM. So, we need your help to perform this task automatically.InputThe input consists in several test cases. Each test case starts with a line containing three integer numbers Na, Nb, and S, separated by single spaces. Na and Nb are the number of entries in A and B respectively (1 <= Na, Nb <= 200), and S is the tolerance in seconds (0 <= S <= 7200). The second line contains Na time stamps in the format hh:mm:ss separated by single spaces. The third line contains Nb time stamps in same format as the previous one. Note that all start times are in the same day.The end of the input is an empty test case, where Na = Nb = S = 0 and should not be processed.OutputFor each test case, the output is a single line containing an integer K and floating point number V rounder to one decimal place. K is the largest number of matches between schedule A and schedule B. V is the average time difference in seconds between the K matched entries. In case there is no possible match, your program should instead print \"No matches\"ExampleInput:4 2 12003:00:00 03:00:59 07:40:00 12:40:0402:59:14 12:41:453 2 6003:00:59 07:40:00 12:40:0402:59:14 12:41:450 0 0Output:2 73.5No matches",
  "sample_input": "Input:4 2 12003:00:00 03:00:59 07:40:00 12:40:0402:59:14 12:41:453 2 6003:00:59 07:40:00 12:40:0402:59:14 12:41:450 0 0Output:2 73.5No matches",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013G",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "4 2 12003:00:00 03:00:59 07:40:00 12:40:0402:59:14 12:41:453 2 6003:00:59 07:40:00 12:40:0402:59:14 12:41:450 0 0",
      "expected_output": "2 73.5No matches",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 9 10 8 3 1 5 6 9 7 7 8 5 1 4 9 2 5 6 8 10 4 4 7 2 9 8 5 3 1 8 5 7 7 3\n2 9 v zykah oke xfjwhlhqnhajkcmh rarqsns 3 mtygkruv ht cpcculdlirv vqg 3 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 9 2 9 5 10 8 9 9 1 9 4 3 2 1 4 8 1 1 9 9 4 6 1 1 7 8 10 4 4 9 2 1 3 1\n7 6 fvqrcxlgd m r whfnli edrhhcdt 1 ia x zeeopudxx f 3 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 6 1 10 10 5 1 8 9 4 7 10 1 10 7 10 3 6 9 1 6 10 7 7 7 6 9 6 5 9 5 9 2 7 3\n2 2 gnkc njcz yszvoj rebwjm cwgbdc 9 ijduhtpf m rouxeti fgrmk 7 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "62 95 83 86 13 4 69 4 32 18 48 61 3 58 30 69 28 81 31 72 29 45 48 41 38 73 13 26 27 12 63 33 36 88 60 78\n93 29 eqtizqvfwq kdgeh pjrlh ebctb r 29 fqnlwwj qobzkod khwnrcieyailz yspeo 33 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 21 10 77 4 68 52 88 85 34 90 18 72 6 93 81 54 1 28 81 53 20 83 74 50 92 76 62 95 90 5 75 14 53 35 56\n93 15 ixivnxeqord vwemu w svgtd xslfyya 19 wzlx ehafdkld edc dik 96 44",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 41 29 57 100 8 23 98 6 17 91 85 66 47 12 3 20 28 32 68 54 91 33 62 80 34 83 20 7 4 35 44 28 78 16 98\n89 7 tmtulnaqd evuslybm ieh lccyhuupcq uwf 71 anzgb rtba szmgihpdaj pf 66 47",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "3 9 6 100 23 61 20 52 9 38 63 53 29 82 78 59 74 30 100 75 65 18 24 69 33 32 12 48 42 69 85 10 28 70 61 76\n72 20 nxwfglzoqbu azmhx ce vpz o 24 tzu uunnc cxaudyccm jin 84 34",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "72 44 66 55 36 45 22 76 92 13 3 67 5 70 81 82 6 83 14 10 29 95 95 83 71 89 24 12 30 85 60 17 28 9 65 37\n74 25 wqpfgnz twzpfam pjb judbmye htk 88 az iiola tyluyguyxdcqlpl gooe 33 25",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "113 286 145 64 151 310 279 185 109 212 397 387 270 470 104 279 409 466 180 228 203 330 431 125 240 367 380 445 331 349 278 248 120 200 104 315\n392 443 s b oiaeymmc zulhzurddkbx p 461 eomb dapns wolabwpaqjsfyyim oel 262 492",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "187 305 466 130 283 273 339 269 362 273 261 160 154 391 292 80 149 119 239 352 125 499 410 472 453 155 422 248 413 198 225 108 360 484 177 127\n165 366 movdspmztb jegup ml lmmszjiepw zsb 387 ykdealcso yjelt k hwwhf 423 318",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "192 276 276 185 442 161 391 460 346 54 363 230 261 490 110 121 329 130 499 409 497 447 74 116 397 305 394 446 195 232 375 185 372 413 346 388\n167 338 jdodc cfgpnhi grdfpk ayvbdvllyj btpvfjj 452 qspbjxguwo b ybgbl wmih 486 212",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "238 259 448 195 103 158 286 265 499 289 364 283 346 318 115 176 372 208 298 103 404 71 248 480 230 60 159 196 418 200 219 313 400 438 375 292\n417 440 nyqdjo ecjoivhl tqyzd p hfsls 254 ukmfvvlbcy lwwas zrr akqfy 90 183",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "463 486 184 446 382 72 134 431 260 260 472 276 121 303 96 408 141 73 54 103 181 475 450 283 52 430 185 220 326 299 249 411 423 310 266 205\n361 396 rolxfzeb gxmpxlzn nv hcshgioecomxq itagdrzc 411 vfzor ajv hjlqrysvepl phiqi 433 170",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "479 168 424 99 457 339 236 498 166 230 484 389 270 194 183 262 331 90 130 92 76 382 104 92 374 312 244 457 177 257 119 253 387 190 379 141\n119 92 hgfklrtyr r etx wkbcte eiaegc 117 zqo jt fypplzljq muwouyoj 472 326",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "449 397 402 277 198 201 279 318 449 75 466 404 246 230 68 205 126 376 387 430 343 212 143 339 456 98 348 64 155 309 428 384 217 252 417 333\n352 409 ssllqnd pusnlkrw tkikmll waupr yvemfgi 420 ema bhwbtza xcybprvyxfnkpiy vbkbpc 379 295",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 wo ndtju va optoueguyjqm f 1000 gqiuyp jzxsd ecnardfqfz ncz 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 ttkbizw qk vfsb nfuhxajfe irrtkdx 1000 did mjk ocbwihcxl wnanddemd 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 999 999 2 1000 2 999 2 999 999 2 1 1 2 2 2 1 999 1000 1 999 2 999 999 1 1 1 1000 1000 1000 2 2 999 1000 2\n2 1000 qbqjbntyzf fdanw rvowjv pyxeznwvqdjinrqt k 1 rrpitby p oistwwvhcnkr wiltixvga 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000 1 1000 2 999 1000 2 1000 999 1 2 1 2 999 1 1000 2 1000 1 999 999 1 2 1 1000 1 1000 999 2 2 1 2 999 1000 1\n2 1 tdehdywxrl xuxwzx bf rmpt wanm 2 gsonxgxl rvybfii oahuhvypsnsx i 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}