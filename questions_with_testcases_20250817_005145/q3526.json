{
  "problem_code": "problems",
  "title": "Gao on a tree",
  "tags": [],
  "text": "There's a tree, with each vertex assigned a number. For each query (a, b, c), you are asked whether there is a vertex on the path from a to b, which is assigned number c?InputThere are multiple cases, end by EOF.For each case, the first line contains n (n ≤ 100000) and m (m ≤ 200000), representing the number of vertexes (numbered from 1 to n) and the number of queries.Then n integers follows, representing the number assigned to the i-th vertex.Then n-1 lines, each of which contains a edge of the tree.Then m lines, each of which contains three integers a, b and c (0 ≤ c ≤ n), representing a query.OutputYou should output \"Find\" or \"NotFind\" for every query on one line.Output a blank line AFTER every case.ExampleInput:5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3Output:NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
  "sample_input": "Input:5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3Output:NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOT",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 3 4\r\n2 4 3\r\n2 4 5\r\n4 5 1\r\n4 5 3",
      "expected_output": "NotFind\r\nFind\r\nNotFind\r\nNotFind\r\nFind",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 3\n1 1 2 8 8\n6 8\n1 1\n8 3\n4 3\n6 8 6\n4 10 6\n3 3 9\n8 5 5\n8 5 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9\n3 10 5 3 9\n10 10\n1 6\n8 10\n10 9\n6 9 6\n9 7 1\n7 2 9\n6 9 4\n3 5 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 8\n2 8 2 4 4\n1 5\n6 10\n1 8\n7 4\n1 9 8\n7 9 5\n3 9 9\n3 6 4\n8 3 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "20 79\n26 68 43 80 72\n81 68\n11 90\n57 72\n61 66\n31 9 89\n62 14 94\n11 27 33\n8 49 75\n67 20 60",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 50\n32 7 84 2 56\n22 50\n100 6\n79 77\n37 33\n66 45 80\n14 87 16\n92 81 38\n40 72 60\n15 8 90",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "43 38\n76 54 93 68 63\n52 41\n46 60\n88 73\n40 61\n88 22 92\n58 89 67\n89 15 9\n90 84 80\n11 15 72",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 75\n42 38 63 98 84\n54 7\n98 73\n18 37\n82 63\n89 83 89\n58 92 60\n70 5 11\n53 42 30\n82 42 27",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 23\n77 11 75 30 67\n29 94\n75 9\n63 54\n11 37\n60 74 72\n96 54 90\n18 80 72\n46 84 100\n51 3 97",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "10634 25517\n11685 36437 37820 31396 31581\n23972 31249\n28250 27048\n37771 23434\n32184 12489\n28109 23005 24738\n41176 35923 27196\n8600 33306 5348\n22974 24171 37187\n42047 20431 30424",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "41345 31150\n36219 49876 8968 17347 39065\n23548 9134\n24557 15576\n45543 44737\n5675 37976\n16604 36521 48595\n31787 38513 31805\n35477 12317 45722\n14230 9000 18964\n20423 9398 11960",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "32508 40020\n47923 20242 26202 48743 35154\n44793 41028\n26640 39341\n43411 12292\n32212 21781\n41960 26545 31984\n36740 15007 22513\n22778 15835 25340\n37045 20709 23667\n46271 36082 30152",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "37129 23212\n43750 21763 14307 43064 24746\n6440 32032\n37985 17411\n30590 11741\n13142 30008\n14875 36911 10540\n44837 14487 22329\n49644 25684 21661\n35776 8325 9215\n37896 23166 19869",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "25502 9467\n46698 48393 47435 47136 43160\n28223 19639\n27792 33103\n46056 48413\n49111 41204\n29906 44826 13251\n19228 36970 31476\n39187 32748 24219\n27436 24414 7829\n11302 19260 17528",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "47806 15254\n18461 16139 6012 35333 30432\n22777 10187\n12812 11676\n17393 13274\n12910 29149\n21973 21364 36854\n22740 29070 12984\n49411 44016 34891\n27311 9658 34546\n30578 40116 12362",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20734 25954\n34246 37307 31393 14705 44559\n32219 17863\n42709 23873\n33375 28278\n24037 36401\n46675 37948 36505\n11842 6694 21493\n15123 5804 6523\n45949 33632 26561\n20047 14657 42613",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 100000\n1 1 1 2 99999\n1 100000\n100000 99999\n100000 100000\n1 99999\n99999 2 100000\n100000 100000 1\n1 2 99999\n100000 99999 99999\n100000 99999 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 99999\n99999 2 100000 99999 100000\n1 99999\n2 99999\n1 99999\n99999 100000\n99999 99999 100000\n2 99999 2\n99999 1 2\n100000 99999 1\n1 2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:10"
}