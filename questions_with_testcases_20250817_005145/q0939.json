{
  "problem_code": "problems",
  "title": "Feanor The Elf",
  "tags": [],
  "text": "Feanor is an elf, and of course, he really likes arrows and bows. Surprisingly enough, Feanor has a laptop, but he knows nothing about programming, so he requires your help.Feanor lives in a tower of height H, and he loves throwing arrows from the top of it. He had a good amount of intensive training and he knows that he always throws his arrows with the same initial speed V. He wants you to make a program that given H and V returns the maximum distance that a Feanor’s arrow can reach when it hits the ground, measured from the base of the tower. With this information, he will be able to place a nice circular fence to prevent disoriented little elves from being killed. Newtonian laws apply in Feanor’s world and the gravity has the same strength as in ours. These laws can be summarized as follows:The position of Feanor is assumed to be a point. The same occurs with the position of his arrow at each moment in time.The initial speed V of the arrow can be expressed as Vx2+ Vy2= V2, where Vx and Vy are the horizontal and vertical components of V , respectively. Speed Vx is always non- negative, while speed Vy is positive if the arrow is thrown up, and negative if the arrow is thrown down.The initial position of the arrow is the position of Feanor.The horizontal position of the arrow (relative to Feanor’s position) at time t is x(t) = Vx * t.The vertical position of the arrow (relative to Feanor’s position) at time t is y(t) = Vy * t − gt2/ 2, where g = 9.8 m/s2.InputThe input contains several test cases. Each test case is described in a single line that contains two integers V and H separated by a single space. The value V is the initial speed of Feanor’s arrow measured in m/s (0 ≤ V ≤ 1000), while the value H is the tower’s height in meters (0 ≤ H ≤ 1000). The last line of the input contains the number −1 twice separated by a single space and should not be processed as a test case.OutputFor each test case output a single line with the radius of Feanor’s fence in meters, rounded up to 6 decimal digits (he wants to be sure that he doesn’t kill those cute little elves).ExampleInput:1 0\r\n10 0\r\n100 0\r\n1000 0\r\n-1 -1Output:0.102041\r\n10.204082\r\n1020.408163\r\n102040.816327",
  "sample_input": "Input:1 0\r\n10 0\r\n100 0\r\n1000 0\r\n-1 -1Output:0.102041\r\n10.204082\r\n1020.408163\r\n102040.816327",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FTHEELF",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "1 0\r\n10 0\r\n100 0\r\n1000 0\r\n-1 -1",
      "expected_output": "0.102041\r\n10.204082\r\n1020.408163\r\n102040.816327",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 4\n2 3\n8 2\n1 3\n4 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n10 5\n3 6\n5 8\n2 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n7 2\n4 4\n10 2\n4 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 22\n42 100\n3 84\n81 21\n47 34",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 74\n64 52\n12 35\n92 88\n37 25",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 20\n12 18\n58 71\n13 75\n81 82",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "13 83\n18 33\n11 81\n80 95\n100 18",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "36 78\n48 60\n15 25\n90 75\n27 56",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "61 217\n204 245\n210 389\n123 422\n485 271",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "53 368\n452 332\n255 259\n420 312\n232 141",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "262 219\n442 453\n350 67\n359 148\n493 390",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "188 425\n307 493\n165 174\n466 431\n432 160",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "336 478\n188 498\n99 180\n84 133\n266 205",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "208 452\n345 88\n281 168\n237 240\n293 62",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "284 63\n481 254\n374 450\n379 117\n473 71",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 2\n1000 999\n1 1\n2 999",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 999\n2 1000\n1 2\n1 999\n2 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:49"
}