{
  "problem_code": "problems",
  "title": "Round Trip",
  "tags": [],
  "text": "EnglishVietnameseJim is planning to visit one of his best friends in a town in the mountain area. First, he leaves his hometown and goes to the destination town. This is called the go phase. Then, he comes back to his hometown. This is called the return phase. You are expected to write a program to find the minimum total cost of this trip, which is the sum of the costs of the go phase and the return phase.There is a network of towns including these two towns. Every road in this network is one-way, i.e., can only be used towards the specified direction. Each road requires a certain cost to travel.In addition to the cost of roads, it is necessary to pay a specified fee to go through each town on the way. However, since this is the visa fee for the town, it is not necessary to pay the fee on the second or later visit to the same town.The altitude (height) of each town is given. On the go phase, the use of descending roads is inhibited. That is, when going from townatob, the altitude ofashould not be greater than that ofb. On the return phase, the use of ascending roads is inhibited in a similar manner. If the altitudes ofaandbare equal, the road fromatobcan be used on both phases.InputThe input consists of multiple datasets, each in the following format.n md2e2d3e3...dn-1en-1a1b1c1a2b2c2...ambmcmEvery input item in a dataset is a non-negative integer. Input items in a line are separated by a space.nis the number of towns in the network.mis the number of (one-way) roads. You can assume the inequalities 2 ≤n≤ 50 and 0 ≤m≤n(n−1) hold. Towns are numbered from 1 ton, inclusive. The town 1 is Jim's hometown, and the townnis the destination town.diis the visa fee of the towni, andeiis its altitude. You can assume 1 ≤di≤ 1000 and 1 ≤ei≤ 999 for 2 ≤i≤n−1. The towns 1 andndo not impose visa fee. The altitude of the town 1 is 0, and that of the town n is 1000. Multiple towns may have the same altitude, but you can assume that there are no more than 10 towns with the same altitude.Thej-th road is from the townajtobjwith the costcj(1 ≤j≤m). You can assume 1 ≤aj≤n, 1 ≤bj≤n, and 1 ≤cj≤ 1000. You can directly go fromajtobj, but not frombjtoajunless a road frombjtoajis separately given. There are no two roads connecting the same pair of towns towards the same direction, that is, for anyiandjsuch thati≠j,ai≠ajorbi≠bj. There are no roads connecting a town to itself, that is, for anyj,aj≠bj.The last dataset is followed by a line containing two zeros (separated by a space).OutputFor each dataset in the input, a line containing the minimum total cost, including the visa fees, of the trip should be output. If such a trip is not possible, output “-1”.ExampleInput:3 6\r\n3 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n3 6\r\n5 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n4 5\r\n3 1\r\n3 1\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n4 2 5\r\n3 1 5\r\n2 1\r\n2 1 1\r\n0 0Output:7\r\n8\r\n36\r\n-1",
  "sample_input": "Input:3 6\r\n3 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n3 6\r\n5 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n4 5\r\n3 1\r\n3 1\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n4 2 5\r\n3 1 5\r\n2 1\r\n2 1 1\r\n0 0Output:7\r\n8\r\n36\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FUKU11J",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "3 6\r\n3 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n3 6\r\n5 1\r\n1 2 1\r\n2 3 1\r\n3 2 1\r\n2 1 1\r\n1 3 4\r\n3 1 4\r\n4 5\r\n3 1\r\n3 1\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n4 2 5\r\n3 1 5\r\n2 1\r\n2 1 1\r\n0 0",
      "expected_output": "7\r\n8\r\n36\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 3\n9 7\n3 4 6\n9 4 2\n1 4 3\n8 1 2\n8 5 8\n7 2 7\n4 9\n8 6\n2 7 9\n8 1 10\n8 3 1\n4 4 8\n9 10 2\n5 7 8\n7 7\n1 6\n9 10\n8 1 9\n3 2 6\n5 1 10\n9 2 2\n9 1 10\n4 5\n2 9 7\n9 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 4\n10 7\n4 2 8\n9 1 10\n3 1 8\n8 1 4\n4 4 1\n4 4 9\n1 5\n3 6\n4 10 3\n6 1 10\n2 5 5\n2 5 7\n3 6 6\n8 1 1\n2 10\n8 10\n1 5\n5 6 5\n1 9 2\n8 10 9\n2 7 10\n9 9 9\n7 2\n7 2 7\n1 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n8 6\n3 8 7\n5 4 4\n2 5 10\n5 8 2\n2 1 3\n10 2 5\n4 1\n9 3\n7 6 7\n4 2 5\n9 7 7\n5 10 2\n2 7 9\n4 6 1\n8 6\n2 10\n2 4\n7 4 9\n4 9 8\n6 2 8\n3 8 6\n7 10 4\n7 5\n9 6 3\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 29\n28 39\n29 29 26\n45 48 44\n2 2 4\n41 21 26\n33 34 24\n28 35 41\n35 1\n36 31\n2 7 6\n25 5 34\n36 1 42\n39 5 12\n47 39 26\n23 2 38\n5 27\n18 3\n10 43\n22 50 42\n32 5 2\n5 47 48\n8 17 21\n36 15 23\n34 36\n2 27 42\n43 33",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 25\n9 12\n34 30 14\n33 4 30\n14 39 2\n4 20 19\n18 46 2\n22 18 33\n26 31\n36 21\n27 19 27\n11 16 2\n29 30 3\n22 6 42\n24 37 49\n48 46 24\n30 38\n4 33\n12 28\n29 40 36\n47 24 8\n29 24 32\n6 48 39\n8 15 32\n8 13\n6 46 46\n11 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 18\n1 13\n26 5 41\n38 18 11\n29 8 11\n40 46 22\n2 6 35\n18 35 33\n8 27\n5 30\n44 20 3\n19 44 35\n49 37 20\n37 45 21\n42 18 22\n13 28 25\n49 29\n34 38\n7 4\n17 7 7\n7 10 44\n47 10 12\n44 47 16\n39 44 10\n34 37\n27 15 34\n35 41",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "41 16\n6 12\n43 21 22\n50 28 43\n9 26 12\n4 19 2\n21 10 37\n44 33 7\n31 23\n15 31\n18 36 37\n37 14 24\n44 12 12\n23 27 23\n48 32 13\n35 31 1\n45 11\n42 50\n13 49\n39 8 33\n8 42 29\n15 27 28\n44 10 45\n23 8 29\n48 40\n50 36 36\n2 22",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 43\n38 8\n22 1 27\n40 46 45\n36 15 37\n7 46 19\n2 47 14\n39 45 14\n10 38\n49 12\n17 31 25\n38 30 45\n41 24 1\n28 38 2\n38 3 43\n15 31 37\n47 36\n15 21\n21 11\n46 43 34\n14 16 49\n35 28 18\n40 12 37\n46 38 27\n17 49\n44 33 36\n16 15",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2 20\n13 9\n23 2 6\n18 16 16\n9 19 2\n4 14 5\n10 16 25\n20 4 16\n13 9\n9 20\n11 5 2\n25 20 14\n13 10 11\n13 11 15\n15 20 16\n6 21 23\n7 18\n8 7\n21 22\n22 2 4\n13 5 9\n17 22 2\n6 3 23\n8 18 4\n22 8\n13 6 24\n17 12",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "11 17\n25 7\n18 5 8\n14 24 12\n25 24 20\n18 20 4\n25 21 14\n6 20 17\n15 22\n2 9\n11 10 20\n19 25 12\n22 10 11\n24 2 24\n23 25 23\n19 12 6\n12 2\n22 3\n20 7\n12 4 3\n23 19 19\n14 18 21\n16 19 23\n11 11 12\n3 16\n5 9 17\n8 2",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "12 15\n9 3\n6 24 12\n21 6 17\n2 7 20\n24 7 19\n24 5 21\n18 13 9\n24 19\n11 3\n25 22 4\n11 24 9\n22 22 21\n23 8 4\n21 20 3\n12 24 19\n13 6\n10 8\n22 16\n6 5 14\n5 6 4\n4 17 11\n20 16 22\n24 23 13\n21 18\n19 22 11\n9 3",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16 18\n13 7\n17 18 4\n22 18 13\n19 16 25\n8 12 7\n12 19 12\n20 12 9\n24 19\n24 11\n15 15 8\n3 15 22\n13 21 9\n5 18 16\n13 22 15\n24 23 8\n5 11\n5 4\n4 22\n18 4 25\n16 4 8\n13 23 21\n7 2 15\n10 2 2\n14 19\n9 12 22\n12 17",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "25 13\n11 8\n8 24 6\n14 12 9\n23 17 11\n9 6 24\n17 13 14\n8 2 22\n17 2\n23 14\n8 3 24\n14 18 11\n4 17 8\n8 21 9\n20 9 7\n3 2 15\n22 6\n14 3\n24 5\n17 7 21\n2 23 11\n2 12 25\n14 2 10\n5 8 21\n23 2\n9 16 8\n21 15",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2 13\n13 4\n17 2 11\n17 12 14\n8 5 14\n13 20 17\n25 2 2\n7 13 23\n7 17\n9 2\n25 10 10\n4 2 3\n25 16 21\n2 25 6\n10 22 13\n25 17 11\n12 18\n16 18\n9 11\n18 6 19\n2 18 17\n16 19 13\n7 11 22\n11 2 25\n17 13\n4 8 2\n3 23",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "8 25\n18 8\n10 21 17\n9 14 14\n5 24 16\n16 21 14\n2 8 9\n6 8 2\n5 10\n25 21\n2 3 9\n22 24 23\n11 12 10\n15 24 18\n3 25 2\n7 7 5\n24 20\n8 10\n10 4\n11 22 7\n6 10 5\n7 13 10\n6 10 11\n9 22 19\n22 16\n7 21 10\n12 4",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50\n50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50 50\n50 50\n50 50 50\n50 50",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 50\n49 1 2\n1 2 1\n1 50 49\n1 2 50\n2 2 50\n1 2 49\n49 49\n1 49\n2 1 49\n1 2 2\n2 49 49\n50 1 2\n1 49 1\n2 50 2\n1 49\n50 50\n49 49\n50 1 1\n2 1 2\n50 49 2\n1 50 2\n50 1 2\n50 50\n2 50 1\n2 49",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 50\n2 50\n50 49 1\n50 1 1\n50 50 2\n49 2 49\n2 49 49\n2 2 49\n49 1\n49 50\n50 50 1\n49 2 50\n2 49 50\n1 50 49\n50 50 50\n49 49 49\n1 1\n49 49\n2 1\n1 1 1\n50 2 2\n1 2 2\n50 49 2\n49 50 2\n1 50\n1 49 50\n50 49",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}