{
  "problem_code": "problems",
  "title": "Folding Stick",
  "tags": [],
  "text": "Folding StickToday Satria really excited about fractals (recurrence pattern), the first fractal type he learn is the dragon curve fractal. To make the dragon curve, it can be easily simulated by folding the paper and open it 90 degrees (parellel to X axis or Y axis) like this image below:Satria realized that the can be many ways to fold the paper, so he make an experiment. Initially there is a stick length 2N, he then place the stick parallel to x axis with one end lies on coordinate (0,0) and the other end lies on coordinate (2N,0). He then fold the stick, so the new folded stick occupy (0,0) to (2N-1,0) he keep doing that until the final folded stick occupy (0,0) to (1,0). In each foding there are two types of folding, folding UP (via possitive Y coordinate) and folding down (via negative Y coordinate). he then open all the folding with angle 90 degrees so each stick segment will be parallel ot X axis or Y axis. Now he wonder if he open all the folding with angle 90 degrees, what is the coordinate of the other end of that stick. Can you help him?InputThe first line there is an integer N denoting number of folding and a string S the sequence of folding and the type of folding.OutputYou sould output two integers x and y which is the coordinate of the other end of that stick.Constraint1 ≤ N ≤ 50Length of string S is equal to N, in other word: |S|=N.String S containing two possible characters:'U' means folding UP (positive Y direction)'D' means folding DOWN (negative Y direction)Sample 1Input1 UOutput1 1Sample 2Input1 DOutput1 -1Sample 3Input2 UDOutput2 0Sample 4Input2 DUOutput2 0Sample 5Input3 UUUOutput-2 2Sample 3 ExplanationHere is the image illustrating sample 3 on how the stick is folded and openned with 90 degrees angle.As seen in the picture above the other end of the stick after folding and openning lies on coordinate (2,0).Sample 5 explanationHere is the final openned stick on test case 5, the other end of the stick after folding and openning lies on coordinate (-2,2)",
  "sample_input": "1 U",
  "sample_output": "1 1",
  "link": "https://www.spoj.com/problems/JC15B",
  "scraped_at": "2025-08-17 00:34:07",
  "test_cases": [
    {
      "input": "1 U",
      "expected_output": "1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n2\n1\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n4\n3\n4\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "12\n47776401\n1931409\n39344602\n20540839\n62470399\n49459990\n46513954\n89639856\n6444345\n70856645\n51528835\n67569814",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n21359613\n58920327\n15139681\n29808549\n88213351\n45050278",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n89348289\n29970897\n59652498\n88322919\n97779687\n36103225\n3326828\n92571718\n74172245\n29257789\n7734750\n99739473\n55409427\n68506252\n59013143\n59180967\n12039277\n7645873\n30569312\n36824546",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n43402390\n83878345\n73384622\n61718517\n46874368\n40993377\n68026219\n90538399\n47023420\n66253163\n59382494\n40613688\n21932097\n85964063\n40454234",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n41063897\n45617827\n58532815\n19822315\n36863983\n9527446\n85305213\n38559492\n16365324\n68691820\n70633147\n36313943\n42118216\n25345550\n38916895",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "34\n55251\n99488\n65598\n11184\n49948\n82761\n26768\n97487\n62043\n58466\n42020\n7717\n71850\n41514\n10151\n96572\n78096\n42929\n52622\n62119\n95587\n24545\n9401\n60019\n68922\n42065\n96265\n72220\n82326\n95482\n53959\n70240\n31092\n21203",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n67848\n54163\n71067\n81207\n1731\n63536\n94013\n88562\n56488\n16779\n85202\n56636\n89305\n91281\n87949\n94888\n38045\n10980\n53055\n23326\n19117\n62240\n47481\n63387\n77230\n5474\n25614\n85650\n43674\n29575\n61066\n72321\n5274\n70065\n98236\n39402\n75045\n86526\n88428\n54856\n88912\n80529\n32992\n23649\n55925\n62994\n55084\n55845\n54577\n71329",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n49371\n13141\n98092\n19766\n77499\n82434\n77646\n37183\n96560\n90668\n69601\n73257\n36578\n84465\n19619\n30040\n69844\n85858\n16042\n7757\n21710\n84617\n46658\n12758\n37750\n84619\n62072\n55547\n5657\n68546\n54049\n45322",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "33\n7578\n14869\n62462\n92455\n30740\n38950\n38734\n80251\n48328\n89356\n75551\n64045\n28649\n20178\n38862\n16538\n23411\n77559\n22221\n47194\n6866\n85238\n499\n87315\n85839\n71331\n72923\n62036\n8650\n35955\n58741\n75576\n67530",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "44\n44980\n75615\n33888\n13252\n44618\n83971\n30904\n61182\n98637\n48086\n32253\n22406\n86047\n51991\n81056\n9272\n92824\n62600\n94841\n56726\n63504\n82750\n27238\n30348\n56762\n30797\n42763\n59245\n1594\n10995\n81715\n22720\n88081\n87857\n29503\n81681\n43135\n94769\n61051\n56594\n66976\n52101\n76007\n52867",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n8768\n25003\n5562\n43961\n24293\n85567\n1857\n22659\n86729\n40947\n58478\n10729\n77238\n49711\n91867\n75437\n54383\n93208\n36730\n30547",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n60847\n14940\n30439\n58712\n32772\n1679\n42635\n25340\n87320\n59433\n17733\n98296\n53637\n44716\n47046\n52560\n16448\n11379\n44332\n29208\n31680\n28452\n81693\n48132\n93411\n43704\n50167\n69509\n55938\n1899\n20555\n11563\n23089\n61817\n97406\n93372\n96286\n38290\n29927\n60489\n94315\n16534\n34227",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n76511317\n43630604\n80974528\n17804319\n14472579\n62530787\n66151480\n24177609\n21200129\n69472157\n14700125\n57434164\n89525508\n26646542\n57605069\n7210996\n60929277\n19620925\n50673911\n27437117\n58468648\n53714644\n80452836\n19285818\n37389715\n8754479\n44135630\n88227250\n10131133\n67771801\n50458731\n10622159\n84190243\n73307120\n84679646\n5935142\n78942424\n18342974\n64432941\n70855414\n65581986\n6492701\n15628473\n27799680\n26324429\n17378223\n74712719\n57143593\n55339670\n58598972",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n76182537\n33438556\n95191024\n58663995\n70504815\n55482169\n18185247\n59267658\n58547242\n21933338\n43878362\n87829212\n61250434\n59771803\n99610998\n72069140\n24859955\n10080330\n62588747\n6792814\n62920635\n44389034\n47767380\n22160975\n24391840\n90469660\n87943819\n66365613\n30108150\n47677701\n63032370\n93913655\n63975649\n39833814\n11870537\n69871580\n29152716\n68845445\n93697900\n90013433\n24503510\n34064650\n95079857\n23879342\n36558346\n56000784\n46265001\n45838723\n73021580\n44969297",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "50\n71125857\n1\n1\n100000000\n100000000\n100000000\n89390186\n88780322\n99130086\n23828174\n12726214\n100000000\n43604338\n100000000\n1\n34684487\n51868678\n100000000\n100000000\n49091496\n35306143\n100000000\n77251035\n71946821\n1\n80980247\n100000000\n100000000\n1\n1\n1\n1\n100000000\n69267094\n92210683\n24753841\n100000000\n1\n1\n100000000\n100000000\n1\n44166321\n100000000\n14137114\n69013405\n1\n1\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 50)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}