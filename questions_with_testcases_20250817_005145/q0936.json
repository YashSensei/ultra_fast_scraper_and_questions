{
  "problem_code": "problems",
  "title": "Charly And Nito",
  "tags": [],
  "text": "Charly and Nito are friends and they like to be together at a nice bar in Palermo Hollywood. About at 3 a.m. they start to feel sleepy and want to go home. They want to get home quickly so each of them uses a path that minimizes the distance to his home. However, Charly and Nito also like to walk together while they talk about the “good old times”, so they want to walk together as much as possible.Charly and Nito live in a city that can be modelled as a set of streets and junctions. Each street connects a pair of distinct junctions and can be walked in both directions. No two streets connect the same pair of junctions. Charly and Nito do not live together, and they do not live at the bar. There is at least one path from the bar to Charly’s home; the same occurs with Nito’s home.Given information about the streets and junctions in the city, the locations of the bar, Charly’s home and Nito’s home, you must tell Charly and Nito the maximum distance that they can walk together without forcing them to walk more than the minimum distance from the bar to their respective homes. Charly and Nito also want to know how much each of them will walk alone.InputThe input contains several test cases, each one described in several lines. The first line of each test case contains five integers J, B, C, N and S separated by single spaces. The value J is the number of junctions in the city (3 ≤ J ≤ 5000); each junction is identified by an integer number between 1 and J. The values B, C and N are the identifiers of the junctions where the bar, Charly’s home and Nito’s home are located, respectively (1 ≤ B, C, N ≤ J); these three junction identifiers are different. The value S is the number of streets in the city (2 ≤ S ≤ 150000). Each of the next S lines contains the description of a street. Each street is described using three integers E1, E2 and L separated by single spaces, where E1 and E2 identify two distinct junctions that are endpoints of the street (1 ≤ E1, E2 ≤ J), and L is the length of the street (1 ≤ L ≤ 104). You may assume that each street has a different pair of endpoints, and that there exist paths from junction B to junctions C and N.The last line of the input contains the number −1 five times separated by single spaces and should not be processed as a test case.OutputFor each test case output a single line with three integers T, C and N separated by single spaces, where T is the maximum distance that Charly and Nito can walk together, C is the distance that Charly walks alone, and N is the distance that Nito walks alone.ExampleInput:5 3 2 1 63 4 104 5 105 1 35 2 41 3 232 3 248 1 7 8 81 2 12 4 12 3 14 5 13 5 15 6 16 8 16 7 1-1 -1 -1 -1 -1Output:20 4 34 1 1",
  "sample_input": "Input:5 3 2 1 63 4 104 5 105 1 35 2 41 3 232 3 248 1 7 8 81 2 12 4 12 3 14 5 13 5 15 6 16 8 16 7 1-1 -1 -1 -1 -1Output:20 4 34 1 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CANDN",
  "scraped_at": "2025-08-17 00:33:12",
  "test_cases": [
    {
      "input": "5 3 2 1 63 4 104 5 105 1 35 2 41 3 232 3 248 1 7 8 81 2 12 4 12 3 14 5 13 5 15 6 16 8 16 7 1-1 -1 -1 -1 -1",
      "expected_output": "20 4 34 1 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 3 4 3 5 8 5 7 3 3 4 7 6 2 4 4 3 7 7 1 7 1 3 3 7 9 10 7 1 8 4 8 8 2 4 8 6 5 8 2 7 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 4 7 1 5 8 4 4 8 4 2 5 8 5 2 2 6 9 3 8 2 10 2 9 9 1 10 6 9 2 1 3 1 7 2 9 10 4 2 4 4 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 2 7 1 6 2 4 2 5 10 1 3 9 1 2 8 9 3 9 6 9 2 3 5 8 5 6 8 1 3 6 4 2 1 7 10 2 2 2 3 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "51 20 37 21 14 70 86 47 9 77 98 75 63 3 8 34 55 32 82 10 60 93 99 43 62 14 94 38 21 59 63 76 26 98 9 82 34 10 100 9 42 44",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "57 17 51 8 38 40 73 12 24 77 19 9 1 62 87 8 30 99 40 75 81 57 97 45 47 97 22 92 26 48 69 82 51 81 45 93 44 83 61 9 9 2",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 67 60 64 26 65 63 33 16 95 35 57 26 37 31 93 40 1 42 28 61 10 87 16 62 56 1 65 65 51 45 81 17 81 76 15 45 19 30 56 40 34",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "23 28 55 97 39 75 47 55 25 3 48 58 94 74 88 20 17 67 25 92 42 41 91 70 96 53 57 21 22 86 70 39 43 50 18 35 35 54 70 94 14 17",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 57 9 54 94 30 61 60 96 73 73 81 73 27 82 79 5 32 89 80 38 2 57 83 60 30 92 52 58 59 5 4 42 6 69 91 3 98 7 51 77 86",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "275 262 230 476 60 298 341 213 259 90 185 403 87 187 344 196 364 61 325 57 407 220 371 244 450 224 141 355 54 165 481 406 436 384 394 285 158 431 368 245 468 148",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "437 491 260 55 438 280 242 63 188 55 269 106 132 210 67 333 427 160 66 181 78 172 351 132 376 202 114 383 104 256 211 288 308 337 108 474 319 299 301 400 274 484",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "334 382 443 487 453 396 77 494 383 437 255 195 231 268 129 249 167 280 283 153 398 382 498 141 266 360 278 380 255 76 185 471 336 393 471 443 416 231 387 447 160 174",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "61 321 166 366 53 293 187 146 81 387 286 109 232 304 132 152 179 263 256 362 263 364 451 217 93 191 261 50 61 201 112 106 355 320 334 370 287 141 398 139 285 279",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "474 194 302 466 253 453 266 62 408 221 478 434 361 254 91 201 413 289 62 174 131 398 81 385 160 287 199 342 140 122 456 404 284 205 146 459 352 414 456 422 457 264",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "425 415 287 397 390 174 472 51 325 70 158 115 488 53 81 163 132 233 84 392 449 467 418 209 269 170 340 471 70 221 94 324 402 390 151 50 153 392 327 195 162 457",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "99 158 59 55 283 260 347 465 484 171 442 280 262 180 112 450 372 191 403 116 455 68 250 255 95 232 284 463 367 268 330 427 342 311 157 465 94 164 55 371 144 436",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1 999 1000 2 2 2 999 1 1 1000 2 999 1 1000 999 1000 999 1000 1000 1000 2 1 2 1000 1000 2 2 2 2 2 1000 2 1000 1 999 1000 1 999 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1000 1 999 999 2 1 2 1000 2 999 999 999 1000 1 1 1000 1000 1000 1000 1000 1000 2 1000 999 1000 1 1000 1000 1 1000 2 2 999 2 999 1000 1000 2 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}