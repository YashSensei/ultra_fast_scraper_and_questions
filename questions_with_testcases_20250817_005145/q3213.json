{
  "problem_code": "problems",
  "title": "Seating Arrangement",
  "tags": [],
  "text": "In DA-IICT, the end sems are just around the corner and it seems like all the students are working very hard. But it's not just students, the professors are hard at work too. In particular, the Dean (Students) is very busy working out the exam seating arrangements for all the students.Now normally, as we all know, the benches in each of the exam halls can seat exactly 2 students. Also, it is ensured that every bench contains exactly 2 students from different batches (so that there is no copying). But in spite of this, the Dean has noticed that even if the 2 students are from totally different batches, if they are friends, then they tend to help each other (or at least try to, depending on how much they both know). The Dean wants to prevent this, so the seating arrangement is such that no two friends sit side by side during any exam, so that the students prepare well for the exams. But he is falling short of ideas to work this out.Please help him out. You are given a list of pairs of IDs (A, B), such that the student with ID A is friends with the student with ID B. For every query (C, D) please print out whether or not these 2 students are friends (meaning they cannot be seated with each other).Note: In this case, please assume friendship to be bothsymmetricandtransitive. That is, if A is friends with B, B is also friends with A. Moreover, if A and B are friends and B and C are friends, this implies that A and C are also friends.InputThe input comprises of several lines. The first line contains 2 integers - n and m, where n is the number of students who will be writing the exam (2 ≤ n ≤ 100000) and m is the number of pairs of student IDs in the input. (0 ≤ m ≤ 100000. Also m ≤ n*(n+1) / 2).This is followed by m lines of the form : A BThis indicates that the student with ID A is friends with the student with ID B. (0 ≤ A,B < n).This is followed by a line containing a single integer q (1 ≤ q ≤ 100000) indicating the number of queries you have to answer. q lines of queries follow. Each query consists of a single line containing 2 space separated integers C and D. (0 ≤ C,D < n). These are the 2 student IDs for which you have to state whether or not they are friends.Note: All student IDs are unique, and range from 0 to n-1.OutputFor each query, output a single line with \"YES\" if the 2 students are friends, and \"NO\" otherwise. Please note that the quotes are just for clarity, and that the output is case-sensitive.ExampleInput:7 41 22 31 34 541 34 65 15 4Output:YESNONOYES",
  "sample_input": "Input:7 41 22 31 34 541 34 65 15 4Output:YESNONOYES",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/QN02",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "7 41 22 31 34 541 34 65 15 4",
      "expected_output": "YESNONOYES",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 5 2 3 1 4 10 5 1 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5 5 6 2 3 4 2 4 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 8 2 4 3 3 4 3 8 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "66 64 55 31 78 70 56 33 24 22",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 25 6 14 96 31 26 88 46 6",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "59 98 77 75 1 9 27 19 99 83",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "75 82 84 93 77 35 25 65 80 82",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "83 23 91 76 65 88 62 47 15 8",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "9581 41249 38404 27329 14672 45855 48986 46039 17043 39496",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "7154 31586 16014 34974 27556 9110 16141 43709 10085 10963",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "45717 36415 26778 11150 11414 45378 38077 34457 21956 45807",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "36332 30781 6447 33364 8802 34747 26836 9151 32196 20323",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "47059 29946 23020 21053 8620 36356 5476 38080 43082 48482",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "19102 29175 32565 22317 27229 8930 14836 33328 36985 13510",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "36338 8898 39765 31303 40364 12078 41617 19155 44541 39812",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 100000 99999 1 99999 99999 99999 99999 100000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2 99999 1 2 1 1 100000 100000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:00"
}