{
  "problem_code": "problems",
  "title": "For Loops Challenge",
  "tags": [],
  "text": "Bjarne is learning about programming. Yesterday’s lesson was aboutforloops. To put his skills into practice, he had to write a number offorloops that printed consecutive positive integers. He was so proud of his creation that he stored the output of his program into a file. For example, the contents of the file could have looked like this:5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106Today, he opened his file and realized it is now inconsistent: the numbers weren’t sorted in ascending order anymore! His wife told him she was bored so she swapped some numbers around. He’s so frustrated he can’t rewrite the program.Your task is to help him out. Read out the numbers and print all the C++ for loops that recreate the original file.InputThere are many lines in the input. The i-th line contains a sequence of space-separated positive integers, where each integer is between 0 and 1000000000. It is guaranteed there are no repeated integers and that there will be at minimum one line with one integer, no line will have more than 1000 integers.OutputOutput all the for loops that generate Bjarne’s original file, one per line. Print the for loops in  order. That is, if the numbers of the i-th loop are less than the numbers of the j-th loop, the i-th for loop must be printed first.NotesName ‘i’ the variable of each for loop.Don’t use brackets.Theforloop condition must be inclusive, that is, use ‘<=’.The increment section of the for loop must be \"i++\".The C++ code you print need not include a line ending command.Beware of spaces. All yourforloops must contain the same number of spaces as this sample:for(inti=a;i<=b;i++)cout<<i<<\"\";ExampleInput9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
  "sample_input": "5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106",
  "sample_output": "Input9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
  "link": "https://www.spoj.com/problems/PFORLOOP",
  "scraped_at": "2025-08-17 00:34:22",
  "test_cases": [
    {
      "input": "5 6 7 8 9 10 11 12 13 14\r\n    56 57 58 59 60 61 62 63 64 65\r\n    100 101 102 103 104 105 106",
      "expected_output": "Input9 6 100 1 3 105\r\n2 4 101 102 103 104 5 7 8Outputfor (int i = 1; i <= 9; i++) cout << i << \" \";\r\nfor (int i = 100; i <= 105; i++) cout << i << \" \";",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 7 6 4 10 9 8 4 6 1\n8 7 9 5 5 1 9 10 10 9\n3 9 5 4 6 7 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 5 1 8 7 3 7 7 2\n10 5 2 2 2 3 5 7 10 9\n9 6 8 5 4 3 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 2 9 8 10 4 10 4 2 4\n5 2 5 4 6 10 7 1 8 7\n2 2 2 10 9 4 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "92 70 70 8 58 95 24 59 28 97\n68 27 85 38 58 22 27 37 82 65\n66 65 7 13 93 53 84",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "54 92 89 29 66 48 29 87 39 98\n37 60 28 36 52 10 100 60 32 2\n50 70 27 68 61 94 47",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 47 100 100 48 60 65 71 53 25\n4 56 13 26 22 55 23 28 12 50\n83 24 62 71 99 84 55",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 82 67 54 100 25 96 22 40 17\n79 15 16 95 33 76 32 58 85 84\n74 40 33 70 42 51 82",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "19 89 31 39 33 83 20 46 30 96\n65 57 57 48 57 38 35 60 6 65\n5 50 70 1 23 18 70",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "87 487 92 215 222 361 253 65 209 407\n441 323 415 335 492 272 327 375 216 200\n465 146 263 54 111 50 172",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "330 98 468 253 328 389 248 119 138 403\n161 343 417 390 227 298 182 197 111 265\n59 455 357 406 253 443 456",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "142 436 490 475 440 132 154 284 382 190\n270 74 395 339 167 235 106 96 432 393\n85 454 437 295 468 103 437",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "177 442 193 98 156 435 461 135 85 338\n124 353 449 173 425 430 315 450 342 398\n369 209 97 257 114 144 172",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "499 153 87 409 136 301 388 460 466 335\n58 479 254 418 85 285 133 166 187 112\n104 63 282 416 138 263 275",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "479 425 94 364 370 119 261 50 321 74\n315 406 363 416 109 78 345 137 297 490\n482 245 460 151 236 265 298",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "75 221 171 158 112 396 498 157 499 80\n336 423 307 160 119 422 392 452 357 496\n144 347 182 354 453 210 361",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 999 1 2 2 1 999 2 1\n999 2 2 2 1000 1 2 1 1 2\n1000 1000 2 2 1 2 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 1 2 1000 1000 2 1000 1 999\n1 1000 999 2 999 999 1000 2 1000 1000\n1 2 1 1000 1000 999 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:01"
}