{
  "problem_code": "problems",
  "title": "Primitive Root",
  "tags": [],
  "text": "In the field of Cryptography, prime numbers play an important role. We are interested in a scheme called \"Diffie-Hellman\" key exchange which allows two communicating parties to exchange a secret key. This method requires a prime numberpandrwhich is a primitive root of p to be publicly known. For a prime number p, r is a primitive root if and only if it's exponents r, r2, r3... rp-1are distinct (mod p).Cryptography Experts Group (CEG) is trying to develop such a system. They want to have a list of prime numbers and their primitive roots. You are going to write a program to help them. Given a prime number p and another integer r < p, you need to tell whether r is a primitive root of p.InputThere will be multiple test cases. Each test case starts with two integersp(p < 231) andn(1 ≤ n ≤ 100) separated by a space on a single line. p is the prime number we want to use and n is the number of candidates we need to check. Then n lines follow each containing a single integer to check. An empty line follows each test case and the end of test cases is indicated by p=0 and n=0 and it should not be processed. The number of test cases is at most 60.OutputFor each test case print \"YES\"  (quotes for clarity) if r is a primitive root of p and \"NO\" (again quotes for clarity) otherwise.ExampleInput:5 2\r\n3\r\n4\r\n\r\n7 2\r\n3\r\n4\r\n\r\n0 0Output:YES\r\nNO\r\nYES\r\nNOExplanationIn the first test case  31, 32, 33and 34are respectively 3, 4, 2 and 1 (mod 5). So, 3 is a primitive root of 5.41, 42, 43and 44are respectively 4, 1, 4 and 1 respectively. So, 4 is not a primitive root of 5.",
  "sample_input": "Input:5 2\r\n3\r\n4\r\n\r\n7 2\r\n3\r\n4\r\n\r\n0 0Output:YES\r\nNO\r\nYES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PROOT",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "5 2\r\n3\r\n4\r\n\r\n7 2\r\n3\r\n4\r\n\r\n0 0",
      "expected_output": "YES\r\nNO\r\nYES\r\nNO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 2\n8\n3\n5 10\n8\n1\n1 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 6\n3\n1\n10 7\n6\n2\n7 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6\n2\n3\n1 6\n5\n9\n6 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "53 91\n25\n2\n69 66\n12\n4\n56 46",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "10 95\n43\n79\n53 39\n2\n47\n23 29",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 64\n70\n32\n26 13\n93\n55\n94 16",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "50 69\n100\n95\n47 97\n87\n83\n31 75",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 48\n79\n35\n17 62\n51\n76\n63 69",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "31 8\n44\n22\n40 39\n12\n23\n20 36",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "44 13\n37\n6\n43 30\n42\n7\n12 39",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "39 33\n37\n12\n5 32\n43\n16\n42 16",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16 21\n17\n7\n12 13\n42\n39\n42 49",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "40 45\n33\n35\n50 13\n44\n41\n27 19",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28 5\n18\n5\n6 35\n5\n44\n31 7",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "48 31\n40\n33\n12 9\n49\n16\n23 49",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100\n100\n100 100\n100\n100\n100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100\n100\n100 100\n100\n100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 100\n100\n2\n2 99\n1\n1\n100 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 100\n100\n2\n100 100\n100\n100\n99 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:36"
}