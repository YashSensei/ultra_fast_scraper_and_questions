{
  "problem_code": "problems",
  "title": "Encoding",
  "tags": [],
  "text": "Chip and Dale have devised an encryption method to hide their (written) text messages. They first\r\nagree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a\r\nmatrix. The sender encodes an intermediate format using the following rules:The text is formed with uppercase letters [A-Z] and.Each text character will be represented by decimal values as follows:<space> = 0, A = 1, B = 2, C = 3 ... Y = 25, Z = 26The sender enters the 5 digit binary representation of the characters’ values in a spiral pattern along\r\nthe matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For\r\nexample, if the text to encode is: \"ACM\" and R=4 and C=4, the matrix would be filled in as follows:A = 00001, C = 00011, M = 01101\r\n         (one extra 0)The bits in the matrix are then concatenated together in row major order and sent to the receiver.\r\nThe example above would be encoded as: 0000110100101100InputThe first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that\r\nfollow.Each dataset consists of a single line of input containing R (1 ≤ R ≤ 20), a space, C (1 ≤ C ≤ 20),\r\na space, and a text string consisting of uppercase letters [A-Z] and. The length of the text\r\nstring is guaranteed to be <= (R×C)/5.OutputFor each dataset, you should generate one line of output with the following values: The dataset\r\nnumber as a decimal integer (start counting at one), a space, and a string of binary digits (R*C) long\r\ndescribing the encoded text. The binary string represents the values used to fill in the matrix in row-\r\nmajor order. You may have to fill out the matrix with zeroes (0) to complete the matrix.ExampleInput:4\r\n4 4 ACM\r\n5 2 HI\r\n2 6 HI\r\n5 5 HI HOOutput:1 0000110100101100\r\n2 0110000010\r\n3 010000001001\r\n4 0100001000011010110000010",
  "sample_input": "A = 00001, C = 00011, M = 01101\r\n         (one extra 0)",
  "sample_output": "Input:4\r\n4 4 ACM\r\n5 2 HI\r\n2 6 HI\r\n5 5 HI HOOutput:1 0000110100101100\r\n2 0110000010\r\n3 010000001001\r\n4 0100001000011010110000010",
  "link": "https://www.spoj.com/problems/GNY07C",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "A = 00001, C = 00011, M = 01101\r\n         (one extra 0)",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4\r\n4 4 ACM\r\n5 2 HI\r\n2 6 HI\r\n5 5 HI HO",
      "expected_output": "1 0000110100101100\r\n2 0110000010\r\n3 010000001001\r\n4 0100001000011010110000010",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 8 6\ntpjc nr fwqk luma tri cygbjd xjsw mfaqf 10\n6\nd q smhik",
      "expected_output": "0\n0\n6\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 1 3\nmbk yc irq u z onyo snq tlm 5\n2\nhnuz pqb airm",
      "expected_output": "0\n0\n2\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 10\noo cahl wsgbr asmuv ile fq m khbb 2\n8\nqp p sop",
      "expected_output": "0\n0\n8\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "96 58 15\nbstyh ocvpb dhju ckr ksy m yjvw wxpa 95\n86\nl ujui qnj",
      "expected_output": "0\n0\n86\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "58 87 52\nlwpl zurx rqqtug pvgmr dnkk hilt pnww oushk 18\n16\npeq zk v",
      "expected_output": "0\n0\n16\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 12 63\ndezq bg cfz rqgdy ggbqk fvb tkqb ittjh 49\n11\nfmji h pgz",
      "expected_output": "0\n0\n11\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "32 41 67\ntpduo v q q bn esgpn vp ktwa 56\n26\niuwh dbuh uxtd",
      "expected_output": "0\n0\n26\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "89 12 25\nc lvgre ceym pws mpet yjvsz d vr 57\n82\nbm cgoek q",
      "expected_output": "0\n0\n82\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "56 396 449\nmkzm srphy jgt ib xo txpuid gok yhow 130\n52\nynx wcxk cdzc",
      "expected_output": "0\n0\n52\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "106 60 282\nisj i dje crz q x cuj h 251\n459\nvpvs qvx t",
      "expected_output": "0\n0\n459\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "453 393 301\nj izuf mzdsyc c d dmkup tzkio fevlc 57\n388\nkngk gp quxl",
      "expected_output": "0\n0\n388\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "261 90 85\nj f i ru qkuhi b bfbrp b 268\n249\ndhuf rxkk ttxwf",
      "expected_output": "0\n0\n249\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "486 251 99\nlvt veg loawf ajemq yaq rg x vxq 287\n141\nbbq oaf nrgrb",
      "expected_output": "0\n0\n141\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "486 371 467\nk ss nbgery p sk cx ody ptj 88\n431\nbnf hlh x",
      "expected_output": "0\n0\n431\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "159 449 82\nogc ioty afj nvsz s mj ftse gxp 237\n371\nq hwufw kx",
      "expected_output": "0\n0\n371\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\nuoch xclpk hzr b l p tprug m 1000\n1000\nh kb gxvy",
      "expected_output": "0\n0\n1000\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\nnip obw ludwa t uanbq fvp tdk isttn 1000\n1000\nfdc ytf sstb",
      "expected_output": "0\n0\n1000\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 1000\nju trchb jgp y zq ch wj ukzb 1000\n1\nbpjx wlp zmhz",
      "expected_output": "0\n0\n1\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:28"
}