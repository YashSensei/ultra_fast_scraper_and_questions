{
  "problem_code": "problems",
  "title": "Money Transfers",
  "tags": [],
  "text": "Sonia is the CEO of the South Western Economic Research Consortium (SWERC). The main asset of SWERC is a group of banks spread out in several countries, which specialize in wire transfers between these countries.Money is transferred between banks which have transfer agreements. Such agreements settle a fixed fee  whenever there is a transfer between these banks. When a client wishes to transfer money to an account in a different bank, the money flows between banks with transfer agreements until it reaches the destination account. For each intermediary transaction, the client will have to pay the corresponding transfer fee.SWERC's goal is to provide the cheapest fees for its clients, using only its banks as intermediaries, and profit from its commissions. Things were going quite well until the recent economic crisis. Due to the current situation,  governments agreed to impose an extra tax on each wire transfer. Their objective is to both increase the  tax income and avoid losing money to tax havens around the world. Hence, the intention is make this extra tax as large as possible (while avoiding too much unrest).Sonia, being a savvy executive, wants to take advantage of this situation and make sure SWERC provides the  cheapest way to transfer money between banksXandY(their most frequent transfer requests). She will try to lobby the politicians so that the new fee makes this happen.  She gathered data about the transfer agreements between banks (including competitors)  but has no idea what should be the value of the new fee.TaskCan you help Sonia compute the largest fee so that SWERC can provide cheapest way to transfer money betweenXandY?InputThe first line consists of four space-separated integers:N P X Y, the number of existing banks, the number of transfer partnerships, and the identifiers of banksXandY, respectively.  The nextPlines have three space-separated integers:aibici, meaning there is a partnership between banks aiand biwith fee ci.A line with an integerM, the number of banks owned by SWERC, follows. The next line containsMspace-separated integers, the identifiers of these banks.XandYare always in this list.Constraints2 ≤ M ≤ N ≤ 1 000and1 ≤ P ≤ 10 0001 ≤ X, Y, ai, bi≤ NandX ≠ Y and ai≠ bi1 ≤ ci≤ 1 000 000 000OutputThe output should be a single integer greater than zero: the largest fee so that SWERC can provide cheapest way to transfer money between X and Y. However,  if there is no value such that this happens, outputImpossibleinstead. If the fee on each transfer can be infinitely large, outputInfinity.Sample Input 16 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4Sample Output 13Sample Output 1 ExplanationIf the extra fee is 4 or more, then SWERC can not provide the cheapest transaction fee. Example: if the fee is 4,  SWERC provides a cost of 20, using banks 1, 3, 4, 5 and 6, in this order.  However, using bank 2 as an intermediary, we can pay only 19.Sample Input 23 3 1 2\r\n1 2 6\r\n1 3 2\r\n2 3 3\r\n2\r\n1 2Sample Output 2InfinitySample Input 34 4 1 4\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n3 4 1\r\n3\r\n1 2 4Sample Output 3ImpossibleAuthor: Miguel Oliveira",
  "sample_input": "6 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4",
  "sample_output": "3",
  "link": "https://www.spoj.com/problems/SWERC14H",
  "scraped_at": "2025-08-17 00:34:29",
  "test_cases": [
    {
      "input": "6 8 1 6\r\n1 2 5\r\n1 3 1\r\n2 6 6\r\n2 3 6\r\n4 2 3\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n5\r\n1 3 6 5 4",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2 7 8\n10 5 10\n8 7 8\n3 10 3\n3 9 3\n8 1 10\n5 2 10\n1 10 2\n5 2 3\n3\n7 4 5 6 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8 7 8\n5 10 4\n2 4 4\n6 2 1\n10 6 6\n1 1 9\n8 2 4\n4 8 10\n8 8 3\n6\n1 5 10 6 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1 10 9\n8 7 7\n2 6 9\n10 9 1\n1 10 10\n10 5 4\n1 9 6\n6 4 2\n3 6 8\n7\n7 10 10 1 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 39 82 62\n26 21 54\n76 14 13\n24 16 88\n7 13 58\n37 28 63\n54 3 89\n39 4 12\n27 17 7\n73\n33 16 62 87 53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 12 8 67\n81 41 26\n34 43 39\n30 25 8\n64 17 49\n72 12 66\n93 67 79\n76 24 76\n90 92 30\n92\n17 29 99 86 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "73 89 25 77\n28 68 16\n36 17 94\n39 73 12\n60 28 26\n2 93 75\n38 86 47\n83 94 68\n24 71 98\n98\n95 35 67 18 10",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "69 6 54 6\n14 87 68\n10 84 90\n65 73 75\n51 13 80\n39 3 68\n98 1 35\n75 23 25\n67 76 1\n78\n42 90 55 58 77",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "85 74 65 86\n97 36 36\n54 12 32\n65 94 36\n47 31 47\n66 9 9\n50 37 57\n11 58 42\n3 54 16\n63\n92 28 61 60 85",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "302 491 120 237\n87 361 299\n398 494 368\n160 244 335\n105 421 356\n230 426 353\n319 334 452\n357 408 337\n249 177 76\n70\n262 72 455 302 56",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "239 160 482 469\n430 93 105\n328 291 256\n475 328 355\n335 442 197\n78 487 460\n174 52 271\n110 258 192\n355 250 70\n492\n214 123 75 297 270",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "150 328 64 113\n293 193 177\n347 121 141\n68 144 341\n409 325 427\n250 158 416\n396 471 242\n432 98 171\n499 248 234\n346\n141 135 389 143 340",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "404 309 206 92\n473 159 487\n497 107 155\n282 464 396\n310 266 115\n444 287 305\n201 244 138\n264 325 185\n450 272 228\n490\n387 160 340 77 298",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "249 73 193 383\n359 328 453\n173 82 457\n405 429 72\n242 444 266\n375 90 209\n215 435 271\n288 371 279\n211 472 53\n166\n92 383 412 451 405",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "384 475 214 91\n219 78 181\n105 86 418\n333 462 313\n387 345 324\n67 419 356\n350 313 367\n400 381 55\n79 251 303\n380\n333 456 333 62 485",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "399 60 496 160\n231 165 468\n151 254 106\n127 492 388\n333 99 271\n306 102 208\n427 476 274\n417 267 306\n392 391 226\n264\n411 404 370 447 59",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 1000 1000\n1000 2 999\n2 1000 1\n999 2 1000\n2 2 1000\n2 999 999\n1000 1 1000\n999 1000 2\n2 1 2\n1000\n999 999 999 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1000 2 1\n1 2 1\n1000 999 1000\n2 1 999\n1000 999 999\n999 999 999\n2 1000 1000\n2 999 1\n999 1 1\n999\n1 2 999 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:58",
  "total_test_cases": 20
}