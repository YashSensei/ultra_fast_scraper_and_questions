{
  "problem_code": "problems",
  "title": "Cactus",
  "tags": [],
  "text": "In the mathematical field of graph theory, a spanning tree T of a connected, undirected graph\r\nG is a tree composed of all the vertices and some (or perhaps all) of the edges of G. Informally,\r\na spanning tree of G is a selection of edges of G that form a tree spanning every vertex. That is,\r\nevery vertex lies in the tree, but no cycles (or loops) are formed. On the other hand, every\r\nbridge of G must belong to T (a bridge is an edge whose deletion increases the number of\r\nconnected components).A spanning tree of a connected graph G can also be defined as a maximal set of edges of G that\r\ncontains no cycle, or as a minimal set of edges that connect all vertices. - Wikipedia\r\nIn graph theory, a cactus (sometimes called a cactus tree) is a connected graph in which any\r\ntwo simple cycles have at most one vertex in common. Equivalently, every edge in such a graph\r\nbelongs to at most one simple cycle. Equivalently, every block (maximal subgraph without a\r\ncut-vertex) is an edge or a cycle. - WikipediaIn the mathematical field of graph theory, a spanning tree T of a connected, undirected graph G is a tree composed of all the vertices and some (or perhaps all) of the edges of G. Informally, a spanning tree of G is a selection of edges of G that form a tree spanning every vertex. That is, every vertex lies in the tree, but no cycles (or loops) are formed. On the other hand, every bridge of G must belong to T (a bridge is an edge whose deletion increases the number of connected components).A spanning tree of a connected graph G can also be defined as a maximal set of edges of G that contains no cycle, or as a minimal set of edges that connect all vertices. - WikipediaIn graph theory, a cactus (sometimes called a cactus tree) is a connected graph in which any two simple cycles have at most one vertex in common. Equivalently, every edge in such a graph belongs to at most one simple cycle. Equivalently, every block (maximal subgraph without a cut-vertex) is an edge or a cycle. - Wikipediacactus graphYour task in this problem is to count the number of ways you can convert a cactus graph to a spanning tree.InputThe first line of input will be the number of test cases. Each test case will start with a two numbers N and E where N is the number of vertices of the cactus graph, vertices are numbered from 1 to N, 3 ≤ N ≤ 81 and E is the number of edges in the graph, 2 ≤ E ≤ 120. The next E lines each one will have two numbers v and w and that means there is an edge between vertex v and w.OutputFor each test case print “Case C: X” without quotes where C is the case number starting with 1 and X is the number of ways you can convert the given cactus graph to a spanning tree.ExampleInput:2\r\n3 3\r\n1 2\r\n2 3\r\n1 3\r\n5 5\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n4 5Output:Case 1: 3\r\nCase 2: 3",
  "sample_input": "Input:2\r\n3 3\r\n1 2\r\n2 3\r\n1 3\r\n5 5\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n4 5Output:Case 1: 3\r\nCase 2: 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CAC",
  "scraped_at": "2025-08-17 00:33:43",
  "test_cases": [
    {
      "input": "2\r\n3 3\r\n1 2\r\n2 3\r\n1 3\r\n5 5\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n4 5",
      "expected_output": "Case 1: 3\r\nCase 2: 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n6\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n3\n5\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "20\n31329430\n83906773\n20512008\n95523606\n72383813\n40315325\n76772376\n91313995\n94917730\n42864365\n61018819\n16765301\n20149904\n66225\n45635034\n72743728\n50530350\n67360681\n70131427\n88485470",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n4120805\n74563901\n85762630\n26725365\n83270409\n3968983\n24496092\n76421715\n99699520\n40705456\n96398849\n51989850\n29700585\n69149979\n79425838\n62639444",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "17\n37565844\n90938358\n33455566\n95803513\n95992222\n78408579\n72583496\n59246648\n20329565\n71024209\n35066769\n76854331\n84737988\n23888096\n44594744\n19374612\n21943384",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n55983842\n16178693\n65581971\n75540852\n50674567\n59549147\n85147180\n75179360\n23858984",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n37458246\n47039968\n19637726\n5079315\n22349367\n57954722\n27986680\n6291567\n25191449\n37358221\n92787769\n49807366",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "30\n65441\n22206\n66575\n20237\n73008\n34980\n44130\n1477\n87463\n7397\n21242\n50061\n91837\n29276\n51189\n13355\n90792\n49906\n5307\n86127\n37083\n1167\n82753\n60472\n95330\n57614\n61079\n7250\n41057\n26658",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n32276\n20341\n63559\n10219\n58030\n96302\n51534\n62799\n14881\n35951\n94833\n55295\n3351\n26824\n18361\n41415\n91469\n74780\n59090\n78926\n23714\n50929\n84745\n32103\n63617\n70939\n82693\n41718\n5387\n98067\n61535\n5366\n40702\n73450\n36736\n56667\n72282\n54268\n17111\n34434\n93659",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "73\n13727\n94650\n28718\n23840\n15741\n95084\n24960\n16161\n47975\n51785\n40220\n14112\n32153\n61542\n11848\n25225\n1520\n72999\n13271\n55572\n94270\n80487\n35239\n42844\n28290\n61450\n20709\n35224\n3283\n18497\n89665\n10142\n42018\n73960\n58079\n65269\n16683\n77220\n37611\n90981\n55970\n66742\n14216\n90700\n67184\n88602\n31084\n56608\n39997\n69274\n86659\n32742\n82706\n85906\n84177\n36458\n91451\n17653\n28562\n64523\n29757\n51740\n66895\n87066\n46774\n70835\n87483\n44393\n60121\n54917\n48841\n64265\n32514",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "32\n9971\n47584\n20963\n33800\n94470\n36827\n54958\n12325\n68016\n50406\n96073\n29772\n78526\n24420\n22446\n42015\n51322\n26770\n73637\n13069\n25832\n85965\n65463\n55493\n98137\n65453\n78392\n21138\n96687\n87756\n31382\n79769",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n54515\n90697\n27933\n21414\n35206\n56051\n99550\n27891\n33418\n90219\n43663\n43842\n4457\n87571\n7349\n91435\n59618\n4269\n24431\n23708\n65492\n5401\n31224\n71527\n71685\n49419\n98968\n9185\n85745\n23110\n30463\n24944\n52759\n13222\n8651\n26650\n6318\n65871\n58836\n53539\n40996\n61140\n24643\n28998\n17904\n64902\n81302\n19803\n24563\n20191\n15142\n57861\n27856\n60390\n75131\n67420\n41324\n73066\n15347\n10482",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "38\n20588\n71516\n48819\n69233\n94523\n91387\n10194\n38180\n16197\n62893\n31420\n55755\n45454\n53742\n32379\n37410\n65731\n2827\n21722\n41331\n92890\n1590\n90965\n93136\n53150\n15952\n70131\n57467\n50491\n50019\n11812\n57061\n28497\n41418\n44955\n36374\n40247\n74219",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n95371\n67371\n25710\n95143\n99964\n74756\n71305\n27397\n56533\n86032\n29721\n95097\n83523\n17212\n20972\n17371\n99226\n13139\n1394\n79036\n53585\n79752\n45177\n36041\n25944\n73024\n35311\n91537\n6113\n9772\n88486\n42247\n52992\n28410\n20981\n57921\n60187\n27547\n22153\n78441\n4273\n8054\n98703\n75882\n85480\n63336\n26740\n91764\n94575\n38399\n77144\n73862\n45965\n54540\n84245\n12724\n32319\n41509\n96913\n21695",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "81\n35420326\n7917742\n71586771\n38383237\n99656489\n13353278\n37587801\n58233440\n80591543\n34564300\n69675066\n86385373\n43406754\n45774121\n34571634\n44503992\n18808484\n83248051\n29418011\n72200884\n93119301\n8213768\n37044534\n83919599\n36046383\n86615328\n94248617\n98522107\n41152365\n51100534\n78531941\n79936415\n75472876\n14794073\n41854283\n33164090\n76464291\n9816746\n89516635\n99484666\n34812895\n30833831\n41182962\n14648559\n12748162\n24227299\n8791365\n44367778\n72296211\n90077896\n88705881\n88576416\n43432637\n72568188\n43238965\n18150338\n3192863\n43921677\n33721516\n64980521\n84916226\n13318594\n90548376\n74159934\n45697132\n83207743\n34548347\n48212047\n83198403\n27123303\n46123106\n37737240\n21989420\n57306708\n18963690\n9193863\n11606168\n3117961\n16197473\n1165610\n89527997",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 81)"
    },
    {
      "input": "81\n30398526\n84914820\n52439236\n19868311\n15152392\n58063193\n54653647\n28561376\n42305877\n75220355\n57629912\n70229177\n7845550\n44673513\n98584398\n61727589\n52759958\n15717674\n12117217\n1289108\n59272998\n78734479\n51737513\n5855812\n24408772\n10537056\n65057070\n40130096\n50763419\n71461422\n49330861\n42834230\n97703861\n5720167\n35607890\n7362118\n65026470\n38758060\n41192239\n95124698\n81712431\n78890475\n86704818\n13114903\n46271251\n61532362\n23396584\n77862523\n27113254\n41553564\n53219092\n87183299\n11649960\n27877255\n10672586\n32452984\n78577709\n20733939\n37735577\n35496191\n79117974\n31675871\n11265676\n56295589\n58299004\n24834155\n62288796\n6832258\n44012194\n31342937\n76919100\n88680843\n83447484\n2945308\n28602829\n63166439\n48467193\n55930553\n99092582\n54918540\n71358363",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 81)"
    },
    {
      "input": "2\n28077999\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}