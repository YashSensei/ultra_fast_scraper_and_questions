{
  "problem_code": "problems",
  "title": "Ada and Contact",
  "tags": [],
  "text": "You might already know that Ada the Ladybug has some friends who live on a plumtree. Those friends are numbered from1toN(whereNis the number of her friends). Ada freely travels on the tree from one friend to another. As she passes a friend (with IDi), he/she always tells her \"Hey     Ada! If you meet i+1 or i-1, please give him my phone number.\". Also note that as long as someone obtains phone number of someone else, he distributes it to all friends whose number he/she has.Ada will undertake many walks on the tree (from one friend to another) and she ask you (for each walk), how many independent sets of friends she will make during her walk. The two sets are independent if nobody from one set has a number of someone else in the other set (and vice versa).NOTE:All walks are independent of each other (so no phone-distribution remains from previous walks).InputThe first line will contain two integers1 ≤ N, Q ≤     2×105, the number of Ada's friends and the number of walksThe nextN-1lines will contain two integers1 ≤ a, b ≤     N, meaning that there is a branch (edge) betweenathandbthfriend.The nextQlines will contain two integers1 ≤ a, b ≤     N, meaning that Ada will take walk betweenathandbthfriend.OutputFor each query, print the number of independent sets Ada will create by her walk (counting only friends on her path).Example Input7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5Example Output3\r\n1\r\n2\r\n2\r\n2\r\n1Example Input 26 5\r\n1 4\r\n4 6\r\n1 2\r\n2 5\r\n2 3\r\n6 5\r\n6 3\r\n3 5\r\n2 6\r\n4 5Example Output 22\r\n2\r\n2\r\n3\r\n2Example Input 310 10\r\n7 10\r\n2 10\r\n4 10\r\n1 7\r\n8 7\r\n3 10\r\n9 10\r\n5 8\r\n6 2\r\n4 3\r\n7 7\r\n2 5\r\n7 8\r\n7 6\r\n5 2\r\n4 9\r\n7 3\r\n9 6\r\n8 8Example Output 22\r\n1\r\n4\r\n1\r\n3\r\n4\r\n2\r\n3\r\n3\r\n1",
  "sample_input": "7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5",
  "sample_output": "3\r\n1\r\n2\r\n2\r\n2\r\n1",
  "link": "https://www.spoj.com/problems/ADAPHONE",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "7 6\r\n1 6\r\n1 3\r\n3 5\r\n5 7\r\n3 2\r\n2 4\r\n6 7\r\n1 4\r\n2 5\r\n4 7\r\n3 1\r\n5 5",
      "expected_output": "3\r\n1\r\n2\r\n2\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1\n1 10\n1 10\n8 4\n5 9\n7 8\n1 4\n8 10\n5 8\n3 4\n1 6\n5 4\n2 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 5\n7 5\n7 7\n4 1\n10 2\n4 8\n3 8\n7 6\n3 6\n3 10\n1 6\n6 9\n6 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 3\n8 10\n2 9\n10 10\n6 8\n1 7\n8 6\n4 9\n5 1\n6 4\n3 10\n6 3\n6 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "11 91\n1 83\n84 6\n15 75\n17 12\n50 23\n67 88\n29 20\n27 45\n86 81\n31 56\n11 72\n1 62",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "66 49\n92 72\n8 32\n40 37\n50 100\n84 60\n4 48\n22 32\n25 17\n50 77\n39 12\n57 82\n75 72",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 69\n45 73\n71 79\n55 68\n42 99\n38 36\n81 30\n33 59\n68 56\n66 3\n13 91\n39 46\n37 26",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "35 23\n54 16\n7 88\n61 98\n25 33\n50 65\n41 97\n28 64\n78 46\n28 5\n67 85\n6 95\n74 100",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 49\n65 30\n74 60\n99 20\n71 66\n87 39\n91 61\n37 94\n98 82\n96 62\n70 65\n2 19\n100 51",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "453 63\n107 261\n86 275\n354 441\n470 166\n273 366\n336 334\n138 276\n396 396\n245 288\n219 452\n240 93\n196 172",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "230 190\n54 405\n261 474\n137 312\n157 166\n322 441\n424 419\n191 487\n200 229\n263 387\n388 392\n239 151\n198 69",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "251 299\n246 317\n295 309\n123 248\n195 213\n286 185\n251 294\n231 58\n464 91\n289 275\n362 319\n97 398\n261 397",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "323 128\n215 220\n166 416\n183 330\n79 465\n117 53\n257 348\n87 358\n99 358\n110 323\n254 391\n336 58\n276 380",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "152 465\n103 482\n287 449\n210 169\n494 124\n216 477\n121 183\n328 276\n242 170\n442 145\n369 408\n356 353\n156 224",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "264 490\n485 383\n397 174\n331 162\n247 133\n163 394\n384 304\n330 218\n295 330\n457 414\n424 251\n373 198\n357 170",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "478 171\n104 303\n148 247\n90 202\n201 332\n93 444\n264 213\n336 333\n375 439\n189 273\n183 418\n325 379\n386 171",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000\n2 1000\n1 999\n2 1\n999 1000\n1000 2\n1 999\n999 2\n1 2\n1000 1000\n2 1000\n2 999\n2 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2\n1000 999\n2 2\n1000 2\n2 1\n1000 1\n1000 1\n2 1\n999 1\n999 999\n1000 1\n999 2\n999 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:54"
}