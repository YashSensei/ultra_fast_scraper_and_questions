{
  "problem_code": "problems",
  "title": "Illumination",
  "tags": [],
  "text": "Two cubes and a light bulb are placed in a three-dimensional euclidean space. You are expected to find out\r\nif one of them casts shadow on the other one and if so, calculate the area of this shadow.InputMultiple test cases. For each test case:The first line of the input contains the coordinates of the bulb. It is followed\r\nby two groups of four lines each that describe the cubes. Each line of the\r\ncube description contains the coordinates of a vertex (see the figure where\r\nthe vertices are marked and labeled in the same order as they are given in the\r\ninput).All the coordinates are given with 5 digits after decimal point. It is guaranteed that the cubes do not intersect,\r\nthe light bulb is outside both of them, and doesnâ€™t lie on any of the planes that contain their faces. A light\r\nbulb should be regarded as a point light source.Input terminates by EOF.OutputFor each test case:The output should contain a single line with two numbers separated with a space character. The first one is\r\nthe number of the cube that has a shadow on it (1 or 2). The second is the area of the shadow. If none of the given cubes casts shadow on the other the output should contain a single number -1.Note:if your output has an error with absolute value less than 10-2, it will be judged as Accepted. i.e. You may output any number of digits after decimal point.ExampleInput:-1.00000 1.00000 1.00000\r\n0.00000 0.00000 0.00000\r\n2.00000 0.00000 0.00000\r\n0.00000 2.00000 0.00000\r\n0.00000 0.00000 2.00000\r\n5.00000 0.00000 0.00000\r\n7.00000 0.00000 0.00000\r\n5.00000 2.00000 0.00000\r\n5.00000 0.00000 2.00000\r\n0.00000 0.00000 0.00000\r\n1.00000 1.00000 1.00000\r\n2.00000 1.00000 1.00000\r\n1.00000 2.00000 1.00000\r\n1.00000 1.00000 2.00000\r\n-1.00000 -1.00000 -1.00000\r\n-1.00000 -2.00000 -1.00000\r\n-2.00000 -1.00000 -1.00000\r\n-1.00000 -1.00000 -2.00000Output:2 4.000\r\n-1",
  "sample_input": "Input:-1.00000 1.00000 1.00000\r\n0.00000 0.00000 0.00000\r\n2.00000 0.00000 0.00000\r\n0.00000 2.00000 0.00000\r\n0.00000 0.00000 2.00000\r\n5.00000 0.00000 0.00000\r\n7.00000 0.00000 0.00000\r\n5.00000 2.00000 0.00000\r\n5.00000 0.00000 2.00000\r\n0.00000 0.00000 0.00000\r\n1.00000 1.00000 1.00000\r\n2.00000 1.00000 1.00000\r\n1.00000 2.00000 1.00000\r\n1.00000 1.00000 2.00000\r\n-1.00000 -1.00000 -1.00000\r\n-1.00000 -2.00000 -1.00000\r\n-2.00000 -1.00000 -1.00000\r\n-1.00000 -1.00000 -2.00000Output:2 4.000\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ILLUM",
  "scraped_at": "2025-08-17 00:33:05",
  "test_cases": [
    {
      "input": "-1.00000 1.00000 1.00000\r\n0.00000 0.00000 0.00000\r\n2.00000 0.00000 0.00000\r\n0.00000 2.00000 0.00000\r\n0.00000 0.00000 2.00000\r\n5.00000 0.00000 0.00000\r\n7.00000 0.00000 0.00000\r\n5.00000 2.00000 0.00000\r\n5.00000 0.00000 2.00000\r\n0.00000 0.00000 0.00000\r\n1.00000 1.00000 1.00000\r\n2.00000 1.00000 1.00000\r\n1.00000 2.00000 1.00000\r\n1.00000 1.00000 2.00000\r\n-1.00000 -1.00000 -1.00000\r\n-1.00000 -2.00000 -1.00000\r\n-2.00000 -1.00000 -1.00000\r\n-1.00000 -1.00000 -2.00000",
      "expected_output": "2 4.000\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8 5\n2 9 3\n2 2 8\n10 7 1\n3 2 4\n4 2 7\n1 5 5\n6 10 5\n3 5 3\n9 1 9\n3 6 6\n2 4 6\n7 2 6\n2 1 5\n10 3 6\n4 4 5\n9 4 4\n8 10 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 4 2\n2 10 5\n7 1 5\n9 6 2\n8 4 9\n8 10 5\n1 8 8\n5 5 3\n2 8 6\n5 5 9\n4 4 6\n10 5 1\n4 9 9\n3 3 6\n4 9 4\n2 10 9\n2 1 9\n9 7 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 10\n9 9 9\n1 6 7\n8 3 3\n7 8 2\n2 2 7\n4 8 6\n6 7 10\n7 2 4\n6 8 8\n2 2 9\n1 1 8\n9 1 1\n8 8 2\n8 2 6\n1 5 7\n1 2 10\n7 9 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 15 39\n81 86 90\n23 1 83\n41 60 6\n27 85 1\n56 43 94\n39 28 92\n54 58 44\n4 48 54\n90 23 79\n89 60 27\n59 4 21\n7 96 45\n20 13 89\n15 90 49\n23 13 68\n15 62 10\n22 26 36",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 50 23\n80 32 51\n53 100 85\n89 52 35\n48 5 79\n16 29 19\n36 2 53\n23 93 65\n6 46 65\n57 95 60\n13 43 47\n16 80 71\n76 39 95\n25 51 64\n12 74 22\n29 87 86\n31 8 51\n26 33 59",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 54 61\n75 34 8\n32 12 60\n33 27 35\n61 20 64\n69 11 79\n82 23 98\n48 44 65\n18 57 29\n94 79 45\n51 4 79\n55 96 33\n69 95 38\n81 67 19\n95 31 58\n18 65 69\n54 91 44\n28 65 22",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 55 7\n85 1 7\n17 58 60\n7 45 50\n81 32 67\n14 44 60\n9 69 49\n30 61 90\n46 3 69\n18 93 15\n14 71 34\n35 62 85\n31 89 54\n50 67 75\n66 83 3\n53 4 25\n87 87 84\n88 81 34",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 37 67\n96 15 86\n60 17 49\n2 50 67\n81 36 87\n70 86 46\n25 36 34\n84 89 8\n69 11 84\n53 74 4\n41 98 39\n78 43 81\n62 36 10\n66 9 97\n59 99 2\n27 1 98\n88 44 4\n19 16 100",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "486 411 124\n352 235 409\n108 122 77\n223 399 407\n243 325 452\n448 154 366\n192 317 137\n116 109 341\n271 381 196\n236 124 203\n187 190 246\n442 228 421\n457 410 204\n395 456 90\n252 117 455\n439 230 162\n195 54 309\n331 177 260",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "295 410 117\n97 284 239\n375 458 458\n63 76 159\n430 458 409\n136 265 246\n282 328 190\n243 243 145\n314 470 310\n165 398 139\n176 386 344\n455 72 190\n162 315 483\n331 164 451\n158 380 198\n143 130 282\n173 462 325\n220 250 321",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "456 273 245\n186 182 120\n356 468 203\n431 153 270\n459 265 86\n433 159 262\n248 53 287\n252 416 376\n437 354 285\n233 148 97\n405 431 95\n281 118 217\n461 397 334\n473 452 217\n50 395 132\n254 183 135\n254 465 206\n273 361 308",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "497 241 413\n470 229 381\n149 242 362\n225 170 126\n193 487 224\n205 188 451\n144 406 264\n234 350 453\n455 395 250\n278 186 292\n138 179 285\n496 216 311\n340 60 324\n299 421 350\n446 241 177\n376 134 159\n139 187 165\n374 292 237",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "377 458 82\n332 122 195\n445 352 349\n309 85 230\n400 52 321\n458 96 173\n453 86 173\n170 317 394\n174 291 450\n458 345 185\n365 432 478\n312 269 443\n480 141 225\n230 374 330\n104 333 126\n324 403 125\n136 57 290\n235 363 401",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "257 305 225\n124 231 254\n370 194 383\n293 84 185\n345 235 195\n349 420 305\n444 359 227\n423 219 80\n310 376 417\n339 52 303\n394 459 333\n427 170 317\n243 104 111\n397 108 125\n364 346 345\n68 480 436\n253 275 120\n376 374 238",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "111 470 451\n216 285 388\n486 454 314\n177 407 460\n339 129 133\n122 354 438\n328 361 136\n310 404 90\n113 136 390\n307 225 101\n102 207 442\n313 202 473\n341 307 199\n373 492 222\n474 480 151\n202 416 149\n427 353 94\n384 447 477",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999 999\n1000 999 1000\n1 1 1000\n1 2 1\n999 1000 2\n999 1 999\n1000 2 2\n999 1 999\n1000 1000 1000\n999 999 1000\n999 1 2\n999 999 1000\n2 999 999\n1000 1 1\n2 999 1\n2 999 2\n1 1000 999\n999 1 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2\n1 1000 999\n2 999 2\n1000 1000 1000\n1 1 1000\n1 1000 1\n999 1000 999\n1 999 1000\n1 1000 999\n1 999 1\n999 1 2\n1000 1000 1000\n999 1 1\n1000 2 999\n1 2 1000\n2 2 1000\n1000 1 1\n999 1000 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:28"
}