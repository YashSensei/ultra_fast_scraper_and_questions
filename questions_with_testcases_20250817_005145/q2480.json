{
  "problem_code": "problems",
  "title": "The Prime Minister",
  "tags": [],
  "text": "DCE Coders mentors got fed up by making problems, they are deciding upon the toughest problem for contest. Everybody started to tease Ankur sir that he can’t make a single tough problem for juniors. He got very angry, now you only handle Ankur sir’s anger (Beware: All the tough number theory problems given to you as assignments are like 2+2=4 for Ankur sir). Here is the problem given by him (Say thanks to Jyoti ma’am that she softens the problem slightly.. ;)). You are given an integer n. There will be 2 different numbers K1 and K2, such that K1 × K2 = n.Both of which satisfies the equation  (Totient(K!)  mod K) !=0.You are also given value of a function, F(n) = Sum of squares  of factor of n. (example F(20) = 546)Now you have to calculate the value of x and y which satisfies the equation K1x + K2y = m. Where m is given. Since there are many roots you have to find a single pair (x, y) which satisfies the equation having minimum absolute value of (x + y). If no pair is possible output -1. Else output(abs(x + y)m) % mod.InputFirst line contains T (1 ≤ T ≤ 10000) number of test cases. Each test case consist of single line containing 3 integers n, F(n) and m.OutputOutput  T lines, each line contains a single integer ((x + y)m) % mod.ConstraintsT ≤ 10000N ≤ 108F(n) ≤ 1018M ≤ 100mod = 10000000000283ExampleInput:1\r\n6 50 3Output:0",
  "sample_input": "Input:1\r\n6 50 3Output:0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPC200",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "1\r\n6 50 3",
      "expected_output": "0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n10\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n4\n6\n4\n2\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n31014374\n67846145\n30734835\n63624070\n6008793\n88409227\n34426017\n13594614\n18209168\n71809205\n93161329",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n8533431\n67847809\n87633245\n62969476\n46901068\n85789772\n46724431\n86822169\n39786870\n65931735\n24450030\n31664707\n85199929\n98147967\n74548934\n44415449\n77937916\n56545452",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n64620621\n29459122\n88901825\n13354614\n42313583\n4370238\n6424693\n83673435\n89759131\n24295329\n403108\n65355534\n15063555\n12673623\n78754019",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n93563537\n70235295\n93184487\n22857686\n74624688",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n68878144\n76092095\n34317535\n61096005\n29830316\n51832138",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "46\n4598\n49697\n78728\n20993\n23694\n83356\n97298\n71859\n56549\n82990\n561\n84616\n73694\n61242\n94362\n71249\n43081\n61269\n73494\n48212\n23046\n69337\n81132\n94926\n94898\n9390\n74818\n37846\n9642\n33843\n51752\n14814\n73944\n71077\n78727\n76148\n12044\n52721\n60901\n66418\n12861\n34407\n95084\n16326\n7836\n84143",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "85\n70977\n48985\n17677\n1305\n38170\n31863\n29581\n77407\n5382\n6219\n3787\n61471\n4201\n32816\n80249\n49948\n63159\n21517\n34473\n67474\n49611\n20271\n63559\n29039\n89610\n29518\n79118\n54790\n67682\n26320\n22476\n67567\n90874\n58972\n88114\n83645\n36096\n94666\n69268\n38622\n15901\n83243\n47540\n1068\n58250\n71129\n40225\n80442\n47278\n42939\n21557\n74018\n27401\n38775\n2477\n47551\n5298\n83432\n81330\n79518\n56747\n5399\n75437\n8807\n54409\n53121\n31840\n44118\n84266\n58308\n35692\n11436\n84738\n77920\n87309\n21777\n29524\n11106\n24374\n37347\n4800\n83131\n40920\n85235\n33795",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "79\n86488\n97753\n19497\n27676\n55990\n61617\n30055\n77386\n13329\n10969\n16549\n6481\n85866\n7272\n20933\n3479\n77494\n74900\n88813\n76922\n92221\n75568\n42816\n94781\n83339\n72185\n78927\n78750\n25343\n69814\n40229\n83683\n27664\n7998\n98983\n22349\n94806\n6220\n67501\n92930\n17672\n8948\n29981\n24183\n82641\n33040\n78944\n86406\n31947\n38980\n94638\n71998\n73700\n55100\n94813\n34887\n41631\n39187\n27643\n91734\n74326\n51762\n81957\n91061\n17986\n67762\n29391\n32412\n81402\n15894\n87947\n69470\n8731\n38629\n59909\n55266\n30252\n18894\n67082",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "77\n24884\n55020\n2019\n68670\n35255\n52493\n87801\n2370\n89651\n45687\n88432\n34728\n42073\n2525\n71936\n64927\n62935\n3710\n50327\n67436\n98853\n73562\n39833\n46543\n60507\n58597\n88213\n36152\n42309\n76324\n28233\n76564\n47504\n66732\n62294\n99485\n79700\n52395\n23201\n34304\n78425\n21785\n555\n44201\n88028\n15107\n15194\n41913\n44335\n1887\n79359\n49933\n17669\n86546\n56835\n85087\n73740\n64063\n52924\n15181\n56324\n43673\n11069\n94663\n96275\n69672\n30615\n90382\n72195\n35855\n96458\n32108\n2939\n43363\n8942\n83445\n8252",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "27\n46997\n29895\n9080\n4565\n79279\n26387\n11525\n94119\n92015\n33355\n76756\n23809\n82384\n85405\n71921\n9822\n2798\n33880\n1469\n27602\n86836\n73771\n42553\n13670\n30345\n30556\n40102",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n7685\n13812\n41704\n78730\n26308\n45691\n66398\n34269\n26207\n9030\n79739\n76879\n45349\n95876\n44188\n63631\n91834\n32570\n95962\n47993\n48805\n79030\n95928\n73274\n92146\n74075\n74532\n76574\n50635\n34553\n1383\n87386\n45301\n82059\n4328\n14912\n94179\n96186\n12710\n60486\n5453\n703\n62697\n38548\n64848\n36685\n91560\n96677\n7531\n28029\n97125\n64344\n41959\n69430\n4193\n74664\n12258\n19808\n71248\n89795",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "76\n7753\n71602\n41099\n92499\n94507\n91432\n78691\n91297\n14897\n67949\n43237\n26085\n48752\n12897\n99877\n70433\n660\n79369\n32309\n17411\n14229\n90487\n84608\n16109\n16937\n4550\n10243\n78046\n13126\n10533\n59094\n91538\n17208\n15434\n52039\n57458\n66602\n69404\n49439\n62616\n99082\n85456\n1750\n10455\n56643\n41816\n43116\n15245\n91412\n56750\n76416\n76166\n50789\n99089\n26715\n84158\n42319\n60514\n29948\n49503\n97426\n76255\n84517\n69965\n77820\n9140\n31537\n88256\n8649\n9722\n23881\n68843\n78374\n99747\n87680\n55045",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "108\n58795092\n70308095\n53506203\n4857083\n15512493\n95234508\n5757785\n98208808\n29565936\n78241973\n8185317\n99307398\n43289254\n29049474\n8787095\n42724970\n52601430\n13412280\n78404155\n12837645\n27875814\n55267705\n27780653\n71057063\n80053427\n76913632\n57725767\n82846939\n23228377\n65408973\n52062237\n72490390\n30167390\n58634986\n5094722\n65119458\n5031857\n81064533\n58288772\n26438582\n4276422\n70969740\n91741349\n59504387\n98739223\n80830387\n87035093\n77470579\n31889638\n82484412\n87764976\n89673697\n16729448\n8798111\n16705195\n26629895\n80435326\n79372636\n48301200\n27459087\n38372409\n64248633\n28279849\n85138518\n64166548\n63520122\n65772690\n76020143\n712611\n56936394\n34614662\n37821905\n82898565\n9894884\n79212398\n728267\n209907\n4434619\n59411401\n86449433\n57640879\n49541803\n52095249\n96693641\n98898429\n54432680\n43775505\n64073271\n18899191\n22694207\n18437707\n10636837\n57232753\n32932002\n43785099\n99100723\n30483709\n67034405\n37099831\n98405788\n50567555\n43057811\n72987882\n52137766\n14815401\n84352503\n56375408\n26007591",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 108)"
    },
    {
      "input": "108\n92369131\n30666947\n44839206\n48777789\n33597761\n82498483\n72910090\n17927137\n56936807\n35242426\n88452147\n19002902\n56359376\n29983589\n9573009\n83637694\n23834021\n51894919\n31152617\n99657084\n39127988\n32694246\n14620328\n76347900\n66200895\n24356414\n40042643\n38998444\n73898043\n44367860\n85588194\n97732515\n55454351\n34957860\n41870553\n7741619\n21071794\n64126833\n19337121\n95038229\n29487111\n25846505\n13161432\n87048833\n45557256\n12367386\n74983285\n83487867\n35932568\n86126648\n10551837\n10046080\n7698401\n82051024\n26585968\n37136200\n11774660\n21331840\n20318989\n42745144\n4346787\n72695176\n34130807\n54399884\n69446384\n21068602\n10284862\n67113699\n56359755\n50042840\n17088183\n32009776\n58345744\n9309117\n78190794\n6540740\n51990998\n27012703\n40918591\n16232398\n63997356\n71944798\n89632980\n80145858\n8265525\n55499095\n40104801\n39664320\n43027217\n95688281\n42164827\n45947699\n22523210\n33153658\n70515998\n48119514\n47994183\n26029083\n67152718\n75914939\n42085229\n81834125\n45185386\n33975814\n58653797\n75966966\n72694988\n42816623",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 108)"
    },
    {
      "input": "108\n100000000\n100000000\n51237329\n100000000\n1\n1\n13645475\n100000000\n1\n100000000\n1\n100000000\n1847438\n1\n1\n100000000\n100000000\n100000000\n1\n100000000\n13129211\n74491048\n66800802\n1\n16628590\n48526815\n1\n1\n100000000\n61698442\n100000000\n100000000\n78433555\n1\n94819652\n100000000\n100000000\n17296228\n1\n34716490\n100000000\n1\n100000000\n1\n100000000\n94355849\n1\n76020456\n1\n1\n1\n1\n58425653\n100000000\n100000000\n1\n100000000\n100000000\n100000000\n47365022\n20812016\n22870483\n100000000\n58278899\n100000000\n1\n15120292\n8125707\n1\n56613697\n100000000\n21610674\n100000000\n100000000\n50587587\n6745303\n91177011\n1\n41355338\n1\n1\n1\n52791151\n59863062\n1\n1\n1\n1\n100000000\n100000000\n59559575\n1\n1\n26017912\n42652958\n1\n100000000\n1\n25733761\n100000000\n91459274\n47816774\n99057654\n1\n213096\n85088976\n52164984\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 108)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}