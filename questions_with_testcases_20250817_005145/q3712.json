{
  "problem_code": "problems",
  "title": "Joy of CompuTenis",
  "tags": [],
  "text": "The Modern Club Association organizes every year a tournament of CompuTenis, which is a sport specially adapted to a public without any mensurable physical qualities. The rules of CompuTenis are very complex (suffices to say that they involve coding with your elbow glued to your ear), but fortunately it is not necessary to know them in detail to solve this problem. You just need to know that in a CompuTenis match two players oppose each other, and the match is won by the player that first winsSsets; in turn, each set is composed of several games, and to win a set a player must win at leastJgames, with a difference of at leastDmore games won than the opponent.The tournament hasKrounds, and there areN= 2Kplayers in it, who all participate in the first round. In each round each of the remaining participating players is paired with another participating player, in order to play a single match. The winning player of each of these matches advances to the next round, whereas the losing player is automatically disqualified from the tournament. The winner of the only match of roundKis thus the winner of the tournament.It is desirable to make the tournament as long as possible, considering that the  matches are broadcast on television and the Association is paid for every minute on air. Given any pair of different players, the Association knows the probability for one of them to win a game against the other. You are a member of the organizing committee, and your task is to prepare the fixture for the matches of each round in order to maximize the expected number of games played in the tournament. Doing this involves deciding which pairs of players will play a match in the first round, and then for each of the following rounds deciding which pair of matches from the previous round will provide the winning players for each match in that round. Note that this can only depend on the identification of the matches in the previous round. The following figure shows a possible fixture forK= 3 rounds andN= 23= 8 players.For the moment, the Association only wants to estimate their earnings, so it is sufficient to tell them the maximum expected number of games that can be played in the tournament.InputThe input contains several test cases. Each test case is described using several lines. The first line contains four integer numbers,K,S,JandD. The valueKdenotes the number of rounds in the tournament (1 <=K<= 3). The valueSdenotes the number of sets that a player must win to win a match (1 <=S<= 10). The valueJdenotes the minimum number of games that a player must win in order to win a set, whereasDindicates that a player should winDmore games than its opponent for him to win the set (1 <=D<=J<= 100). The players are identified by different integer numbers from 1 toN= 2K. Each of the followingNlines containsNvalues. In thei-th line, thej-th value is an integer numberP_ijsuch thatp_ij=P_ij/100 is the probability that player numberiwins a game against player numberj(0 <=P_ij<= 100 for 1 <=i,j<=N). You may assume thatP_ii= 0 (no player opposes himself) and thatP_ij+P_ji= 100 foriandjdifferent.The end of the input is denoted by a line containing four times the number -1.OutputFor each test case, you should print a line containing a rational number representing the maximum expected number of games that the given tournament can have. The result should be rounded to the nearest rational number with 2 decimal digits. In case of ties, round up. Note that you should always print 2 digits after the dot, even if this means ending with a zero.ExampleInput:1 1 2 2\r\n0 50\r\n50 0\r\n3 3 6 2\r\n0 88 2 76 71 24 50 4\r\n12 0 54 37 84 95 88 98\r\n98 46 0 66 36 13 33 33\r\n24 63 34 0 29 21 96 63\r\n29 16 64 71 0 0 47 13\r\n76 5 87 79 100 0 56 89\r\n50 12 67 4 53 44 0 23\r\n96 2 67 37 87 11 77 0\r\n-1 -1 -1 -1Output:4.00\r\n224.08",
  "sample_input": "1 1 2 2\r\n0 50\r\n50 0\r\n3 3 6 2\r\n0 88 2 76 71 24 50 4\r\n12 0 54 37 84 95 88 98\r\n98 46 0 66 36 13 33 33\r\n24 63 34 0 29 21 96 63\r\n29 16 64 71 0 0 47 13\r\n76 5 87 79 100 0 56 89\r\n50 12 67 4 53 44 0 23\r\n96 2 67 37 87 11 77 0\r\n-1 -1 -1 -1",
  "sample_output": "4.00\r\n224.08",
  "link": "https://www.spoj.com/problems/JOCTENIS",
  "scraped_at": "2025-08-17 00:34:20",
  "test_cases": [
    {
      "input": "1 1 2 2\r\n0 50\r\n50 0\r\n3 3 6 2\r\n0 88 2 76 71 24 50 4\r\n12 0 54 37 84 95 88 98\r\n98 46 0 66 36 13 33 33\r\n24 63 34 0 29 21 96 63\r\n29 16 64 71 0 0 47 13\r\n76 5 87 79 100 0 56 89\r\n50 12 67 4 53 44 0 23\r\n96 2 67 37 87 11 77 0\r\n-1 -1 -1 -1",
      "expected_output": "4.00\r\n224.08",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 3 10 6\n10 4\n9 2\n6 6 3 1\n6 3 3 9 2 8 8 6\n4 3 4 10 5 2 1 7\n10 10 5 2 7 4 1 9\n3 2 6 7 3 3 5 8\n4 9 5 2 3 5 1 9\n6 7 2 3 8 4 8 2\n9 9 5 8 10 3 5 2\n8 5 10 5 10 4 1 1\n7 4 1 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 3 3\n10 3\n4 5\n1 8 4 4\n5 6 2 4 5 1 4 1\n9 7 6 5 10 7 6 10\n2 2 5 1 4 3 2 4\n5 8 4 2 10 8 6 2\n5 2 2 10 7 9 6 9\n4 9 5 9 3 2 2 7\n6 6 3 5 6 4 10 4\n1 4 4 5 1 1 4 4\n2 3 5 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 9 4 7\n8 7\n2 10\n3 8 5 7\n2 10 9 8 1 1 10 3\n6 7 7 1 8 5 3 9\n2 7 3 3 2 4 3 7\n2 6 3 6 2 2 4 4\n2 7 9 4 5 10 8 10\n4 1 5 1 4 9 7 10\n5 5 7 1 5 9 10 10\n9 7 5 9 1 9 5 6\n6 1 1 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "62 57 70 25\n87 80\n21 18\n5 62 7 30\n62 89 71 44 51 100 46 66\n91 95 52 14 28 39 71 25\n60 71 18 30 55 58 66 89\n57 84 77 53 54 62 1 42\n39 55 60 89 83 12 1 27\n38 50 3 69 38 7 21 4\n100 17 72 38 35 72 57 56\n73 8 38 85 55 86 85 17\n45 99 24 15",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 49 93 45\n44 16\n24 81\n79 4 87 19\n25 52 49 80 90 62 97 28\n2 77 21 22 71 60 71 27\n58 30 23 5 96 42 55 85\n98 75 5 72 22 21 72 17\n58 33 20 95 35 11 63 58\n87 40 97 57 98 60 19 98\n71 42 75 57 51 24 55 40\n93 55 52 95 59 47 1 27\n30 72 52 45",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "42 63 6 66\n94 33\n44 81\n59 90 3 40\n15 7 91 86 96 7 24 43\n81 15 97 99 54 85 2 43\n9 35 80 10 42 71 61 8\n98 58 71 87 73 38 55 77\n47 3 31 24 58 99 85 12\n4 37 54 8 20 90 90 59\n99 24 54 24 49 50 84 65\n27 74 98 85 63 68 36 20\n72 89 37 90",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "33 39 78 33\n5 88\n49 95\n70 89 63 45\n66 16 89 10 81 83 57 3\n7 94 31 63 31 68 77 42\n45 73 65 32 98 82 3 28\n33 12 7 95 54 30 47 44\n71 42 98 41 6 86 71 71\n33 78 54 14 40 13 76 50\n3 74 4 7 1 68 52 39\n79 87 45 63 55 100 40 28\n50 38 68 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "29 52 58 70\n96 83\n3 39\n80 92 1 23\n29 74 24 96 97 36 47 94\n6 9 89 20 31 76 86 96\n70 81 25 63 76 65 94 48\n44 21 70 33 26 84 92 92\n64 71 8 69 95 78 42 94\n21 13 89 9 82 72 20 55\n10 91 88 19 83 82 16 60\n71 31 59 67 17 15 44 30\n73 58 96 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "84 390 158 287\n336 452\n421 77\n378 367 369 287\n67 386 266 243 230 496 238 379\n185 192 84 295 52 281 172 235\n147 147 307 419 216 351 184 160\n285 159 348 488 452 307 355 177\n394 310 286 52 199 352 311 364\n108 125 296 403 250 471 144 160\n87 107 285 123 225 488 262 175\n495 402 420 449 300 333 450 213\n113 142 382 420",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "352 498 197 219\n386 419\n396 88\n157 64 440 237\n225 58 175 161 98 67 178 251\n330 63 353 364 53 57 430 214\n453 294 390 102 141 489 99 89\n274 288 103 231 251 204 386 416\n400 196 331 216 420 257 500 109\n301 141 141 454 486 462 422 160\n173 418 323 144 359 374 234 301\n353 442 155 273 416 86 53 353\n347 376 107 190",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "499 273 92 453\n185 158\n69 465\n404 386 376 491\n489 254 68 178 370 59 66 68\n150 138 199 442 58 279 192 345\n55 135 499 64 164 430 284 213\n431 366 76 481 455 206 225 271\n50 170 65 396 91 284 260 404\n437 457 263 276 162 219 329 162\n132 245 60 433 283 417 481 295\n169 75 268 399 274 120 172 187\n265 216 312 273",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "109 181 169 158\n60 302\n458 101\n439 90 207 481\n336 479 141 401 332 123 171 273\n429 300 395 411 129 255 318 130\n139 318 199 405 461 170 398 224\n262 114 217 123 145 214 168 113\n405 395 144 467 92 375 260 466\n421 101 343 170 406 402 98 248\n116 408 400 92 304 390 234 488\n83 443 116 141 299 245 312 420\n310 383 217 194",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "384 373 289 174\n304 352\n378 259\n204 445 182 391\n284 431 458 484 155 399 201 250\n205 59 342 118 82 352 390 80\n481 110 488 402 159 493 493 493\n440 462 81 93 211 347 194 236\n249 222 123 167 238 402 169 344\n260 204 176 86 262 128 175 347\n474 411 413 196 429 279 140 482\n347 331 224 219 385 91 298 93\n290 106 388 342",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "374 109 346 379\n296 341\n90 166\n406 76 382 409\n425 159 184 372 210 419 434 447\n477 88 385 252 66 156 450 293\n110 409 58 375 147 305 473 492\n50 472 395 308 391 227 458 61\n91 397 51 133 412 450 241 140\n375 397 259 413 307 192 450 139\n285 340 114 166 410 78 264 274\n67 336 161 219 209 51 148 78\n374 283 314 455",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "419 248 220 109\n220 169\n76 163\n321 435 157 132\n301 357 398 282 400 110 59 69\n411 182 303 99 96 80 458 288\n64 83 500 271 55 204 402 181\n464 228 427 120 483 301 184 373\n259 261 217 438 270 119 113 69\n215 385 84 343 51 303 130 103\n63 475 53 212 317 480 229 272\n338 483 319 171 416 449 79 165\n295 307 96 236",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 2 2\n1 1\n1 999\n2 999 1000 1000\n999 1000 999 999 999 999 1 1\n1000 2 999 2 1000 1000 1000 1000\n999 1000 2 1 999 2 1 1000\n1000 999 1 1 1000 999 999 1\n2 1 2 1000 1000 1 1 1\n1000 1000 1000 999 999 2 2 1\n2 999 1000 1 2 1000 2 1000\n999 1 1 1 1000 2 1 2\n1 2 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 1000 1000\n999 999\n2 1000\n1 1 999 999\n1 1000 999 2 1000 1 2 1\n1000 1000 2 2 2 1000 2 2\n2 999 2 1000 2 1 1000 2\n999 999 1000 999 1 1000 1000 999\n2 1000 2 2 1 2 2 1000\n999 1 1000 1000 2 2 1 1000\n2 2 1 1 1 2 2 1000\n1 2 999 1000 1 1000 2 1000\n1 2 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}