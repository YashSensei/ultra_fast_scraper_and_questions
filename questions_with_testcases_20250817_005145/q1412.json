{
  "problem_code": "problems",
  "title": "Paid Roads",
  "tags": [],
  "text": "A network ofmroads connectsNcities (numbered from 1 toN). There may be more than one road connecting one city with another. Some of the roads are paid. There are two ways to pay for travel on a paid roadifrom cityaito citybi:in advance, in a cityci(which may or may not be the same asai);after the travel, in the citybi. The payment isPiin the first case andRiin the second case. Write a program to find a minimal-cost route from the city 1 to the cityN.InputThe first line of the input contains the values ofNandm. Each of the followingmlines describes one road by specifying the values ofai,bi,ci,Pi,Ri(1 ≤ i ≤ m). Adjacent values on the same line are separated by one or more spaces. All values are integers, 1 ≤ m, N ≤ 10, 0 ≤ Pi, Ri ≤ 100, Pi ≤ Ri (1 ≤ i ≤ m).OutputThe first and only line of the output must contain the minimal possible cost of a trip from the city 1 to the cityN. If the trip is not possible for any reason, the line must contain the word 'impossible'.ExampleInput:4 51 2 1 10 102 3 1 30 503 4 3 80 802 1 2 10 101 3 2 10 50Output:110",
  "sample_input": "Input:4 51 2 1 10 102 3 1 30 503 4 3 80 802 1 2 10 101 3 2 10 50Output:110",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MMINPAID",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "4 51 2 1 10 102 3 1 30 503 4 3 80 802 1 2 10 101 3 2 10 50",
      "expected_output": "110",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 1 6 9 10 9 8 8 10 4 5 6 1 8 6 2 9 8 9 7 7 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 2 7 9 2 6 4 5 6 7 7 6 7 10 8 2 10 10 7 6 9 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 4 4 8 7 4 3 6 9 2 9 5 8 5 1 9 7 6 8 2 10 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 8 3 10 2 5 10 9 6 8 7 4 2 4 1 4 3 1 10 3 2 8",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "6 2 2 4 7 2 5 5 1 10 4 7 1 1 7 9 5 10 5 4 9 4",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 8 8 8 5 1 1 3 4 4 3 9 7 4 3 6 7 8 7 10 10 2",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 3 10 5 1 4 10 10 7 5 10 1 2 6 8 7 6 4 6 8 6 7",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "2 2 5 2 7 2 1 10 5 3 7 5 4 6 2 3 2 5 5 4 9 7",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "4 3 4 2 4 4 3 2 5 5 3 5 4 5 2 2 4 5 2 5 5 5",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 5 1 5 1 4 1 2 2 4 3 3 4 1 5 4 5 4 2 2 3",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4 2 4 4 1 1 4 1 5 3 2 2 2 2 2 2 4 2 4 1 5 1",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1 3 5 5 4 3 2 5 3 5 2 4 2 1 4 3 4 5 2 5 4 3",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "3 3 4 4 2 2 1 3 4 4 5 1 1 2 1 2 5 4 5 5 4 5",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3 2 3 5 4 2 3 5 1 2 5 4 4 1 4 1 5 2 4 1 2 5",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 1 2 2 3 2 4 1 1 3 2 4 3 3 1 2 2 5 5 1 5",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10 9 1 2 2 1 2 10 9 1 10 10 1 10 9 1 10 10 9 10 2 10",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "10 10 9 10 2 10 2 1 2 1 2 10 9 1 2 2 10 10 2 1 9 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:03"
}