{
  "problem_code": "problems",
  "title": "Adjacent Bit Counts",
  "tags": [],
  "text": "For a string of n bits x1, x2, x3 ... Xn the adjacent bit count of the string (AdjBC(x)) is given byX1*X2 + X2*X3 + X3*X4 + ... + Xn-1 * Xnwhich counts the number of times a 1 bit is adjacent to another 1 bit. For example:AdjBC(011101101) = 3AdjBC(111101101) = 4AdjBC(010101010) = 0Write a program which takes as input integers n and k and returns the number of bit strings x of n bits (out of 2ⁿ) that satisfy AdjBC(x) = k. For example, for 5 bit strings, there are 6 ways of getting AdjBC(x) = 2:11100, 01110, 00111, 10111, 11101, 11011InputThe first line of input contains a single integer P, (1 ≤ P ≤ 1000), which is the number of data sets that follow. Each data set is a single line that contains the data set number, followed by a space, followed by a decimal integer giving the number (n) of bits in the bit strings, followed by a single space, followed by a decimal integer (k) giving the desired adjacent bit count. The number of bits (n) will not be greater than 100 and the parameters n and k will be chosen so that the result will fit in a signed 32-bit integer.OutputFor each data set there is one line of output. It contains the data set number followed by a single space, followed by the number of n-bit strings with adjacent bit count equal to k.ExampleInput:101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90Output:1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
  "sample_input": "Input:101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90Output:1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GNYR09F",
  "scraped_at": "2025-08-17 00:33:37",
  "test_cases": [
    {
      "input": "101 5 22 20 83 30 174 40 245 50 376 60 527 70 598 80 739 90 8410 100 90",
      "expected_output": "1 62 634263 18612254 1682125015 448747646 1609167 229373088 991679 1547610 23076518",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 5 6 4 1 5 6 7 6 1 5 6 4 8 9 2 8 9 3 3 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 9 8 4 7 2 6 10 1 8 9 7 8 1 3 10 5 7 10 5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 1 1 8 6 9 6 1 8 3 9 3 1 4 3 9 4 5 7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 66 35 34 73 99 94 36 87 70 75 55 36 30 96 38 18 21 24 97 75",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "80 32 1 11 54 59 32 87 91 26 28 96 97 24 29 95 30 50 90 16 75",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 55 82 35 91 72 41 41 58 89 30 47 87 25 36 47 20 100 15 93 83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "5 79 14 81 61 58 34 42 14 55 75 61 79 23 60 93 66 53 87 13 10",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "43 34 95 100 2 13 1 30 49 53 31 13 10 74 41 49 21 100 54 23 54",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "472 123 282 385 456 241 64 397 415 126 456 50 223 355 405 310 152 270 178 187 292",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "324 151 406 458 121 470 84 425 456 120 354 81 161 105 131 255 251 499 321 456 98",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "215 321 357 94 234 353 484 383 159 463 205 284 331 186 421 72 73 364 352 384 293",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "358 374 142 465 263 473 150 230 264 258 229 207 482 325 260 168 500 143 209 446 158",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "487 186 93 176 139 306 296 498 442 330 191 374 401 458 186 323 159 445 73 490 225",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "167 467 344 259 424 74 121 326 487 237 118 226 346 480 237 366 475 476 361 200 215",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "334 246 279 381 391 277 369 105 78 317 90 137 88 135 173 237 338 281 401 258 122",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2 2 999 2 999 2 1 1000 2 1000 2 999 1 2 999 999 999 2 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1000 1 2 999 999 2 2 1000 999 1000 1000 999 999 999 999 999 2 2 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}