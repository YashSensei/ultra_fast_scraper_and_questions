{
  "problem_code": "problems",
  "title": "Inversion Sort",
  "tags": [],
  "text": "You have just bought an old fashioned jukebox that can hold 10 music albums. Albums are maintained as a sequence, each album represented by a unique lowercase letter between “a” and “j”, inclusive. The jukebox allows you to select a subsequence of contiguous albums and a mechanical arm inverts that part of the sequence. For instance, if the current sequence is “abcdefghij” and you select the subsequence “bcd”, the result of the inversion would be “adcbefghij”. Soon you notice that it is possible to get the albums into any desired order using simply inversions. However, you are interested in doing so with the minimum number of operations. Given the current order and a desired order of the 10 music albums, find the minimum number of inversion operations needed to obtain the desired order.InputThe input contains several test cases, each one described in a single line. The line contains two strings C and D separated by a single space, representing the current and desired orders of the music albums, respectively. Each of the strings has exactly 10 characters and contains the characters of “abcdefghij” in some order. The last line of the input contains two asterisks (“*”) separated by a single space and should not be processed as a test case.OutputFor each test case output a single line with an integer representing the minimum number of inversions needed to transform the current order given by C, into the desired order given by D.ExampleInput:abcdefghij adcbefghij\r\nabcdefghij abcdefghij\r\nbcdaefghji beagfcdhji\r\n* *Output:1\r\n0\r\n2",
  "sample_input": "Input:abcdefghij adcbefghij\r\nabcdefghij abcdefghij\r\nbcdaefghji beagfcdhji\r\n* *Output:1\r\n0\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/INVESORT",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "abcdefghij adcbefghij\r\nabcdefghij abcdefghij\r\nbcdaefghji beagfcdhji\r\n* *",
      "expected_output": "1\r\n0\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "lthbw hohqok\ncl thyuluum\nzv eqfbhitxv\nwmabe viadj",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "bqpupezcy urzunpv\ns vgwfazh\nrej wwpjaiw\nvn b",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "lvmv upfqhgkmwo\nvll hdzunbuu\ni czbgmrce\nvzi k",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "lnhus jhraqtg\nj odm\necpixunwit xb\nwez y",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "vzl rtobwrfjri\nlksffu xo\nbhnjfwdcjk pvhjhs\nnum pdcjt",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "zbcvwenbee fqxdrrv\nf vzjzcnmxf\nrixpohb wmmu\nj hw",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "tpftjmz gdwud\nuxin tf\njh ores\ntv g",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "hrmufjrhkx ocodiaggc\nqvg fww\nrpy ad\nlr thz",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "u aninus\netugatnd yodnfvrr\nvaimum ikn\nb exzg",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "louplbl cz\nbrk j\ne xu\nvtlv oj",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "stt zkormx\nffsfgtupro asru\nvxokwfd ho\nolrn m",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "zudcdj urmfbz\nrmhydqq kycvsnxxm\nazkkriydi dlcemqhgd\ntjl verqz",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "ycf fwulpi\ncr qciehh\nezvxir necroft\nkssz be",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "suk p\ndmmj ffksocdm\nqtrcmyuaix my\nsjzzn zg",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "kokmmbca vxzaf\nv r\njbfquxyvdu khmthjarc\nemsv maxpc",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "yov suzaayj\no zz\nvfqdz tmatz\nfxttq sch",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "qigxnvy tarkwogm\nxalmpdxke zkcn\nrrc uvuc\nnnek ict",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "bqqe vyiawjzw\ny pskmvmmgs\nvsxw agl\nzal ulsh",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "d k\nshzzrnkjk zrfjhzphiv\nexzyl iwmeli\nzm wu",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}