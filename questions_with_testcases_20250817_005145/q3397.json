{
  "problem_code": "problems",
  "title": "Nuclear Plants",
  "tags": [],
  "text": "The Great Plain of Algorithmia plays an extremely important role in the agriculture of the Bandulu Kingdom: this is the only place where barley (Hordeum vulgare), an essential ingredient of beer, can be produced. Unfortunately, it is not possible to grow barley on the full area of the plain, as several nuclear plants have recently been built, and you cannot grow barley near a nuclear plant (since you do not want to produce giant-size, aggressive, man-eating barley-mutants). Your task is to write a program that determines the size of the area that can be used for growing barley.The Great Plain of Algorithmia is an n * m km2rectangle, the coordinates of the four corners being (0, 0),(0, m),(n, 0) and (n, m). There are two types of nuclear plants: small and large. You are not allowed to grow barley within 0.58km of a small nuclear plant or within 1.31km of a large nuclear plant.InputThe input contains several blocks of test cases. Each block begins with a line containing four integers: 1 <= n, m <= 10000 describe the size of the plain, ks <= 100 is the number of small nuclear plants, and kl <= 100 is the number of large nuclear plants. The next ks lines describe the coordinates of the small nuclear plants, each line contains two integers 0 <= x <= n and 0 <= y <= m . The next kl lines describe the large nuclear plants in a similar fashion.The input is terminated by a block with n = m = ks = kl = 0 .OutputFor each test case, you have to output a single line containing the area that can be used for growing barley. This number should be a real value with two digits of precision. To avoid rounding problems, we accept solutions with a maximum of 0.01(positive or negative) error.ExampleInput:10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0Output:87.46\r\n98.94",
  "sample_input": "Input:10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0Output:87.46\r\n98.94",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ORZ",
  "scraped_at": "2025-08-17 00:34:23",
  "test_cases": [
    {
      "input": "10 10 2 2\r\n2 2\r\n4 4\r\n5 6\r\n1 8\r\n10 10 1 0\r\n5 5\r\n0 0 0 0",
      "expected_output": "87.46\r\n98.94",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 9 9 10\n9 2\n7 4\n2 4\n7 8\n7 4 6 9\n3 7\n3 10 2 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 1 10 9\n2 9\n1 4\n2 1\n7 7\n4 7 4 1\n5 5\n5 1 7 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 2 10\n3 8\n3 10\n1 10\n4 3\n5 3 9 2\n4 4\n5 7 2 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "90 84 48 53\n17 29\n32 5\n38 23\n11 23\n9 3 15 55\n7 70\n77 40 74 45",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "36 57 53 41\n5 33\n4 100\n64 61\n36 1\n35 27 44 22\n63 7\n45 68 28 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "8 44 94 26\n32 35\n94 92\n7 78\n91 42\n77 44 36 53\n67 67\n31 55 87 87",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "46 28 8 36\n53 61\n78 92\n50 26\n2 28\n87 18 41 49\n88 84\n25 50 31 89",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "48 20 2 57\n92 16\n69 47\n2 92\n99 46\n11 45 64 54\n99 87\n31 87 85 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "255 390 380 477\n238 136\n137 143\n415 390\n276 185\n269 286 352 271\n62 94\n105 61 294 482",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "250 186 313 135\n347 65\n195 473\n451 279\n168 103\n339 500 348 74\n408 316\n280 210 377 336",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "438 428 91 377\n392 472\n158 435\n434 239\n359 500\n214 399 308 353\n52 307\n54 315 192 364",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "470 275 252 206\n256 382\n120 80\n256 241\n93 218\n334 250 337 359\n195 379\n303 354 197 231",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "363 351 53 174\n436 498\n341 168\n144 216\n107 497\n392 262 166 116\n434 117\n146 133 329 293",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "329 442 100 434\n469 437\n456 344\n71 150\n336 282\n147 374 453 416\n303 334\n199 458 398 451",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "488 285 295 221\n154 344\n321 204\n192 456\n259 63\n306 341 73 469\n497 489\n202 138 203 370",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 2 999\n2 2\n999 999\n1 1000\n1000 999\n2 1 1000 999\n999 1\n1 999 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1 1000\n1000 1000\n1000 2\n999 1000\n999 999\n1000 2 999 1000\n1000 2\n1000 1 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}