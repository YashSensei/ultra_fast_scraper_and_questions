{
  "problem_code": "problems",
  "title": "Journey",
  "tags": [],
  "text": "In Byteland there arencities numbered from1ton. These cities are connected by a network ofmbidirectional roads. It is known that each pair of cities is connected by at most one road.Byteman admitted recently that he likes some cities more than others. More precisely, he spends his time especially well in cities with numbers from1tok, so during every journey he visits each of them at least once.Byteman's journey is a sequence ofdcities, such that each pair of consecutive cities is connected by a road. The journey can start and end in any city. Your task is to compute the number of distinct journeys around Byteland that Byteman can make. Because this number might be quite large, it will be enough to find it modulo109+ 9.InputThe first line of input contains four integersn, m, kandd(1 ≤n≤ 20, 1 ≤k≤ min(n, 7), 1 ≤d≤ 109), separated by single spaces. The followingmlines contain descriptions of connections between cities of Byteland. A description of a road consists of two numbersai,bi(1 ≤ai,bi≤n,ai≠bi), separated by a single space and denoting the numbers of cities connected by thei'th road.OutputThe output should contain one integer, denoting the number of distinct journeys that Byteman can make, modulo109+ 9.ExampleInput:4 4 2 3\r\n1 2\r\n2 3\r\n3 1\r\n2 4Output:10",
  "sample_input": "Input:4 4 2 3\r\n1 2\r\n2 3\r\n3 1\r\n2 4Output:10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IE2",
  "scraped_at": "2025-08-17 00:33:29",
  "test_cases": [
    {
      "input": "4 4 2 3\r\n1 2\r\n2 3\r\n3 1\r\n2 4",
      "expected_output": "10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 3 8 10\n1 4\n5 9\n2 7\n9 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1 3 7\n1 4\n2 4\n8 5\n1 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 3 5 6\n2 10\n3 10\n5 8\n1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 6 20 11\n18 6\n20 12\n3 18\n2 15",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "13 7 2 20\n16 19\n3 13\n4 7\n1 3",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 19 17 1\n7 19\n13 13\n9 8\n3 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 14 15 12\n3 17\n12 3\n15 9\n20 3",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 10 4 14\n2 13\n4 3\n19 11\n13 19",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "3 4 4 2\n4 10\n4 1\n5 5\n5 4",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 7 5 10\n7 9\n6 4\n10 4\n10 10",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "4 3 4 9\n3 4\n2 6\n6 3\n9 8",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "10 1 1 9\n6 3\n5 6\n10 6\n10 1",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 4 1\n8 3\n1 4\n5 6\n5 4",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 3 6\n6 1\n7 5\n3 6\n5 9",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7 8 5 6\n10 8\n4 10\n4 10\n2 4",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "20 20 20 20\n20 20\n20 20\n20 20\n20 20",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "20 20 20 20\n20 20\n20 20\n20 20\n20 20",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "20 1 20 1\n2 1\n1 1\n20 20\n19 20",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "20 1 20 19\n20 2\n20 1\n20 1\n20 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}