{
  "problem_code": "problems",
  "title": "The Game of Efil",
  "tags": [],
  "text": "Almost anyone who has ever taken a class in computer science is familiar with the “Game of Life,” John\r\nConway’s cellular automata with extremely simple rules of birth, survival, and death that can give rise\r\nto astonishing complexity.The game is played on a rectangular field of cells, each of which has eight neighbors (adjacent cells). A\r\ncell is either occupied or not. The rules for deriving a generation from the previous one are:If an occupied cell has 0, 1, 4, 5, 6, 7, or 8 occupied neighbors, the organism dies (0, 1: of loneliness;\r\n4 thru 8: of overcrowding).If an occupied cell has two or three occupied neighbors, the organism survives to the next generation.If an unoccupied cell has three occupied neighbors, it becomes occupied (a birth occurs).One of the major problems researchers have looked at over the years is the existence of so-called “Garden\r\nof Eden” configurations in the Game of Life — configurations that could not have arisen as the result of\r\nthe application of the rules to some previous configuration. We’re going to extend this question, which\r\nwe’ll call the “Game of Efil”: Given a starting configuration, how many possible parent configurations\r\ncould it have? To make matters easier, we assume a finite grid in which edge and corner cells “wrap\r\naround” (i.e., a toroidal surface). For instance, the 2 by 3 configuration:has exactly three possible parent configurations; they are:You should note that when counting neighbors of a cell, another cell may be counted as a neighbor\r\nmore than once, if it touches the given cell on more than one side due to the wrap around. This is the\r\ncase for the configurations above.InputThere will be multiple test cases. Each case will start with a line containing a pair of positive integersmandn, indicating the number of rows and columns of the configuration, respectively. The next line will\r\ncontain a nonnegative integerkindicating the number of “live” cells in the configuration. The followingklines each contain the row and column number of one live cell, where row and column numbering\r\nboth start at zero. The final test case is followed by a line wherem=n= 0 — this line should not be\r\nprocessed. You may assume that the product ofmandnis no more than 16.OutputFor each test case you should print one line of output containing the case number and the number of\r\npossible ancestors. Imitate the sample output below. Note that if there are 0 ancestors, you should\r\nprint outGarden of Eden.ExampleInput:2 3\r\n2\r\n0 0\r\n0 1\r\n3 3\r\n4\r\n0 0\r\n0 1\r\n0 2\r\n1 1\r\n3 3\r\n5\r\n0 0\r\n1 0\r\n1 2\r\n2 1\r\n2 2\r\n0 0Output:Case 1: 3 possible ancestors.\r\nCase 2: 1 possible ancestors.\r\nCase 3: Garden of Eden.",
  "sample_input": "Garden of Eden.",
  "sample_output": "Input:2 3\r\n2\r\n0 0\r\n0 1\r\n3 3\r\n4\r\n0 0\r\n0 1\r\n0 2\r\n1 1\r\n3 3\r\n5\r\n0 0\r\n1 0\r\n1 2\r\n2 1\r\n2 2\r\n0 0Output:Case 1: 3 possible ancestors.\r\nCase 2: 1 possible ancestors.\r\nCase 3: Garden of Eden.",
  "link": "https://www.spoj.com/problems/GAMEFIL",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "Garden of Eden.",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 3\r\n2\r\n0 0\r\n0 1\r\n3 3\r\n4\r\n0 0\r\n0 1\r\n0 2\r\n1 1\r\n3 3\r\n5\r\n0 0\r\n1 0\r\n1 2\r\n2 1\r\n2 2\r\n0 0",
      "expected_output": "Case 1: 3 possible ancestors.\r\nCase 2: 1 possible ancestors.\r\nCase 3: Garden of Eden.",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "rs gwr ixj",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "xcfozf lume itzl",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "nvwbgz j quz",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "pywct bg dl",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "pht i g",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "t iqqem ovlq",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "hbmd r onmu",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "u mych ves",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "mygz ko vwjqx",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "hggz qwzsp gx",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "opmqu au yp",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "aqrd e tbee",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "iv lxm myij",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "sqarzu mu ctkfy",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "sv bzk efm",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "v so ngx",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "m une vlr",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "ighsok j w",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:55"
}