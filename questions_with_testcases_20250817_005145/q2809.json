{
  "problem_code": "problems",
  "title": "LIS and tree",
  "tags": [],
  "text": "You are given a tree withNvertices. Every vertex has an unique number from the interval[1, N]. Consider all simple paths on this tree. For every simple path you can write the sequence of numbers taken from consecutive vertices on this path. For every such sequence you can find theLongest Increasing Subsequence. Find the longest of all Longest Increasing Subsequences and print its length.InputThe size of each input file is not greater than 2 MB.In the first line of the input there is an integerT (1 ≤ T ≤ 1000)- the number of data sets.In the first line of each data set there is an integerN (1 ≤ N ≤ 105).In each of the nextN - 1lines of the data set you can find two integersaandb (1 ≤ a, b ≤ N)meaning that there is an edge connecting vertex with numberaand vertex with numberb.OutputFor each data set print one number: the length of the longest LIS of all simple paths.ExampleInput:2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7Output:4\r\n5One of the solutions for the second tree in the example:",
  "sample_input": "Input:2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7Output:4\r\n5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LISTREE",
  "scraped_at": "2025-08-17 00:34:14",
  "test_cases": [
    {
      "input": "2\r\n12\r\n3 1\r\n1 4\r\n4 12\r\n12 8\r\n4 5\r\n5 11\r\n5 6\r\n5 2\r\n3 9\r\n9 10\r\n9 7\r\n12\r\n1 8\r\n8 6\r\n8 3\r\n3 12\r\n3 10\r\n3 5\r\n5 4\r\n5 2\r\n1 9\r\n9 11\r\n9 7",
      "expected_output": "4\r\n5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5\n1\n7\n4\n1\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n6\n5\n5\n3\n5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n8\n10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "7\n99447363\n4409388\n91057576\n49218066\n5136717\n16525049\n88212215",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n78053639\n35110124\n27316083\n67367441\n42390844\n35966567\n87622504\n67500541\n25771015\n74962082\n46618089\n13497182\n42620498\n22242938\n50016707\n27802292",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n834471\n87871667\n83168070\n40520815\n440187\n95044114\n75073317\n33018124\n76490338\n94173154\n7131715\n46548008\n35684070\n91363776\n78036225\n65564035",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n74843237\n17954416\n3177229\n70637059\n25404632",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n83739810\n37446212\n16259711\n18948258\n52611018\n59703208\n21603273\n64872793\n85213694\n597060\n46920438\n26746027\n47518151\n89587747",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "76\n32347\n16726\n34949\n2786\n47059\n38168\n79691\n73519\n76932\n72284\n84876\n81036\n25772\n95604\n80743\n16807\n5628\n57434\n9779\n22590\n79473\n50195\n36455\n6770\n40490\n5356\n36754\n17325\n78299\n82041\n879\n93564\n45272\n87580\n55045\n83383\n43482\n82933\n75390\n35490\n44923\n82561\n24833\n2339\n8049\n2651\n53833\n96793\n19758\n32750\n5513\n13672\n43336\n37043\n26600\n87815\n43645\n64433\n32997\n27397\n12945\n29812\n72683\n99238\n20633\n12920\n62419\n31139\n46912\n17435\n55015\n22146\n51735\n73829\n30461\n78625",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "92\n97572\n41699\n94243\n5735\n49029\n53951\n4029\n52846\n76824\n33729\n81575\n71861\n42840\n68269\n72364\n5594\n75089\n12911\n85912\n20548\n55710\n1115\n18598\n44240\n54936\n7446\n19126\n59276\n86819\n9875\n25508\n30299\n16215\n76496\n13507\n71872\n95461\n87139\n19705\n91752\n61659\n12920\n84992\n50927\n37674\n38111\n2680\n70866\n47089\n51870\n88381\n59039\n97413\n40274\n73697\n93403\n6852\n3623\n47823\n2536\n94947\n97188\n82959\n75332\n79033\n22475\n29159\n50297\n45892\n81767\n21587\n74537\n70940\n32903\n16781\n11748\n68265\n63956\n63473\n82346\n88815\n30672\n86100\n54634\n54222\n67689\n63632\n47695\n29416\n97071\n16537\n98143",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "86\n57862\n34659\n66232\n41519\n18288\n81430\n85434\n36401\n41993\n31541\n52329\n50785\n77886\n85805\n39931\n61620\n93449\n52939\n71134\n11735\n66904\n65118\n33349\n57474\n39990\n48898\n88821\n31662\n20832\n24667\n9390\n92420\n25221\n37636\n60087\n22929\n67232\n56681\n10362\n27500\n66882\n84240\n67000\n20977\n85280\n15998\n65641\n55121\n10118\n38497\n60967\n26964\n23168\n23189\n82048\n50567\n81615\n12686\n99060\n59374\n80360\n91613\n87420\n62740\n11467\n96192\n21781\n9015\n5730\n10932\n78022\n68318\n98354\n10312\n24019\n16609\n20808\n42031\n83541\n84051\n26387\n34190\n64402\n28236\n78258\n10135",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "30\n81664\n70765\n68223\n34142\n47911\n32081\n68177\n9082\n9368\n72458\n61914\n16976\n6050\n69758\n93581\n65100\n9829\n75018\n70196\n34664\n87733\n8123\n9652\n43709\n75375\n28466\n99200\n14397\n98891\n62817",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "40\n80891\n87202\n74173\n90932\n83259\n43207\n57160\n47744\n45763\n7068\n69484\n85243\n15423\n4341\n72431\n46141\n75015\n17793\n63533\n56121\n31869\n79793\n56779\n67978\n60548\n60198\n3184\n28168\n40937\n45160\n1286\n31112\n84992\n3555\n21684\n26451\n36920\n93507\n15741\n95759",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n58303\n23261\n21137\n56888\n75131\n87371\n50123\n21484\n16015\n22332\n14198\n48330\n38146\n675\n87768\n43377\n96421\n78381\n77176\n44122\n93969\n32268\n89331\n87891\n41816\n17203\n68875\n83953\n99267\n91703\n4723\n89928\n18354\n40762\n78499\n82\n86440\n32131\n61120\n48250\n9509\n44389\n44020\n14104\n75729\n24470\n4168\n85056\n35017\n61128\n67687\n24681\n81336\n89677\n57104\n65333",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n2221\n48142\n40736\n76537\n3151\n80953\n5706\n8161\n77369\n12735\n81907\n4452\n87805\n27539\n29722\n25851\n35801\n75556\n21593\n65138\n6763\n75731\n93010\n83975\n59532\n79431\n65235\n44813\n90173\n2574\n78746\n16065\n45276\n79422\n10556\n14356\n37559\n20580\n29443\n62984\n95919\n55672\n10288\n22718\n56508\n89281\n98253\n9074\n30011\n49600\n61207\n12959\n90237\n17453\n76199\n26984\n2167\n78693\n54795\n55754",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n92045244\n51671762\n32753187\n30999057\n98008267\n57475017\n63799302\n59545303\n96448591\n14003242\n27516308\n69280186\n67490850\n86431996\n7555159\n9606852\n9201881\n57768189\n54198167\n90298308\n17574455\n68301581\n43716098\n91818874\n41209301\n46184273\n54908919\n54331712\n3930798\n45050780\n41560402\n71746364\n18289890\n69685269\n9338425\n53265906\n84167347\n84254451\n72407119\n96858237\n23834968\n40593452\n55520507\n51043711\n60198678\n10836404\n6563734\n74937664\n75652622\n53080341\n59402567\n60916218\n51324011\n33822851\n43920798\n85843746\n5308763\n11295329\n62442492\n34912207\n19259758\n32930849\n8112532\n1484208\n64486714\n57980748\n96724089\n27747109\n76792487\n73628823\n98395219\n37373716\n41451584\n17313347\n85667113\n81861143\n35440894\n97406490\n73378772\n96883021\n6734438\n48825302\n991781\n45153909\n11998822\n30735518\n24568627\n3505100\n78249115\n41378698\n90733931\n70201935\n73229001\n27582866\n51917144\n30648204\n91982390\n5039163\n90674715\n42567886\n95771637\n65915773\n22623631\n40439006\n36469224",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n34523382\n82542625\n70785984\n47399451\n45767585\n45824896\n20852125\n24748848\n93958125\n65529643\n30348048\n9381416\n10447749\n7094774\n5641303\n49553163\n54042860\n23268637\n42662751\n96729642\n31328672\n87557498\n89048072\n64479451\n66355582\n61328693\n15267951\n77432076\n20598990\n55220756\n15514883\n46256384\n21269008\n48584665\n12814497\n54849942\n25545540\n31494883\n48612881\n38976958\n600544\n68163586\n30711882\n49452587\n27465145\n34696461\n95421065\n90316806\n96011777\n24273714\n42279455\n13755178\n80106695\n3937009\n49483371\n43242200\n33134297\n31866988\n70882816\n60624641\n98697084\n62884852\n30089820\n54917081\n3840154\n77065690\n61530034\n97815167\n92444185\n2086614\n72065435\n62046029\n60645630\n95458398\n27360432\n55193169\n48024825\n91652983\n39283865\n91551938\n75363936\n53447463\n64502142\n82966986\n21981156\n36254251\n13166606\n68823502\n30359380\n21621563\n17889300\n25410385\n23433298\n87155834\n4419450\n91210631\n30673185\n1795849\n61620096\n13248591\n55299126\n73546562\n94008452\n8980619\n13998976",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n100000000\n67465223\n1\n1\n74691849\n100000000\n1\n1\n100000000\n1\n1\n1\n100000000\n38344229\n100000000\n60869848\n77827455\n100000000\n100000000\n32766381\n100000000\n43908480\n100000000\n62349405\n100000000\n29793505\n5129457\n100000000\n1\n1\n100000000\n92030514\n100000000\n1\n1\n1\n1\n100000000\n65943844\n1\n1\n1\n3324123\n67264316\n1\n100000000\n1\n100000000\n100000000\n100000000\n1\n1\n35037589\n1\n27959486\n100000000\n1\n1\n1\n1\n1\n1\n100000000\n100000000\n79158198\n51085542\n1\n100000000\n35817401\n1\n62718674\n22933753\n100000000\n68817370\n1\n1\n100000000\n100000000\n1\n49486601\n1\n1\n37785840\n100000000\n1\n13378537\n81365650\n1\n100000000\n6077363\n80857732\n100000000\n1\n29987553\n8925662\n100000000\n100000000\n57212578\n99165307\n39539665\n41898571\n1\n78650298\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}