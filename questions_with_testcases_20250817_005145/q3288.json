{
  "problem_code": "problems",
  "title": "The Cow Doctor",
  "tags": [],
  "text": "Texas is the state having the largest number of cows in the US: according to the 2005 report of the National Agricultural Statistics Service, the bovine population of Texas is 13.8 million. This is higher than the population of the two runner-up states combined: there are only 6.65 million cows in Kansas and 6.35 millions cows in Nebraska.There are several diseases that can threaten a herd of cows, the most feared being \"Mad Cow Disease\" or Bovine Spongiform Encephalopathy (BSE); therefore, it is very important to be able to diagnose certain illnesses. Fortunately, there are many tests available that can be used to detect these diseases.A test is performed as follows. First a blood sample is taken from the cow, then the sample is mixed with a test material. Each test material detects a certain number of diseases. If the test material is mixed with a blood sample having any of these diseases, then a reaction takes place that is easy to observe. However, if a test material can detect several diseases, then we have no way to decide which of these diseases is present in the blood sample as all of them produce the same reaction. There are materials that detect many diseases (such tests can be used to rule out several diseases at once) and there are tests that detect only a few diseases (they can be used to make an accurate diagnosis of the problem).The test materials can be mixed to create new tests. If we have a test material that detects diseases A and B; and there is another test material that detects diseases B and C, then they can be mixed to obtain a test that detects diseases A, B, and C. This means that if we have these two test materials, then there is no need for a test material that tests diseases A, B, and C-such a material can be obtained by mixing these two.Producing, distributing, and storing many different types of test materials is very expensive, and inmost cases, unnecessary. Your task is to eliminate as many unnecessary test materials as possible. It has to be done in such a way that if a test material is eliminated, then it should be possible to mix an equivalent test from the remaining materials. (\"Equivalent\" means that the mix tests exactly the same diseases as the eliminated material, not more, not less).InputThe input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 300 of diseases, and the number 1 ≤ m ≤ 200 of test materials. The next m lines correspond to the m test materials. Each line begins with an integer, the number 1 ≤ k ≤ 300 of diseases that the material can detect. This is followed by k integers describing the k diseases. These integers are between 1 and n .The input is terminated by a block with n = m = 0 .OutputFor each test case, you have to output a line containing a single integer: the maximum number of test materials that can be eliminated.ExampleInput:10 5\r\n2 1 2\r\n2 2 3\r\n3 1 2 3\r\n4 1 2 3 4\r\n1 4\r\n3 7\r\n1 1\r\n1 2 \r\n1 3\r\n2 1 2\r\n2 1 3\r\n2 3 2\r\n3 1 2 3\r\n0 0Output:2\r\n4Warning: large input/output data, be careful with certain languages",
  "sample_input": "Input:10 5\r\n2 1 2\r\n2 2 3\r\n3 1 2 3\r\n4 1 2 3 4\r\n1 4\r\n3 7\r\n1 1\r\n1 2 \r\n1 3\r\n2 1 2\r\n2 1 3\r\n2 3 2\r\n3 1 2 3\r\n0 0Output:2\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOCTOR",
  "scraped_at": "2025-08-17 00:34:31",
  "test_cases": [
    {
      "input": "10 5\r\n2 1 2\r\n2 2 3\r\n3 1 2 3\r\n4 1 2 3 4\r\n1 4\r\n3 7\r\n1 1\r\n1 2 \r\n1 3\r\n2 1 2\r\n2 1 3\r\n2 3 2\r\n3 1 2 3\r\n0 0",
      "expected_output": "2\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 10\n6 2 10\n8 7 3\n3 5 5 7\n5 3 10 8 10\n8 9\n9 10\n6 2\n1 4\n4 10\n10 2 7\n3 4 9\n7 5 5\n3 1 9 2\n5 3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1\n2 7 6\n3 3 6\n2 7 10 6\n7 2 7 9 8\n2 5\n3 10\n5 9\n4 8\n4 2\n5 5 10\n5 4 3\n6 3 7\n9 1 6 9\n4 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 5\n3 9 9\n5 10 9\n4 10 5 4\n7 4 2 5 8\n9 9\n3 4\n6 10\n9 7\n5 6\n10 4 1\n7 8 9\n10 5 10\n6 7 3 4\n7 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "94 48\n83 67 93\n91 46 51\n88 34 74 13\n90 72 10 13 24\n54 16\n67 35\n54 55\n28 45\n25 66\n85 3 24\n61 72 84\n21 86 18\n37 7 36 34\n9 14",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 8\n4 1 47\n86 27 27\n29 77 39 10\n67 64 69 51 56\n87 86\n86 36\n18 80\n80 10\n2 28\n60 95 63\n16 36 24\n11 65 27\n51 7 48 10\n47 12",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "50 29\n94 13 33\n59 22 93\n58 7 46 86\n69 68 32 13 51\n55 74\n6 17\n43 51\n32 64\n1 36\n2 82 30\n61 86 94\n53 64 92\n79 59 25 3\n95 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 28\n11 80 97\n10 34 96\n43 42 32 43\n67 37 72 82 22\n16 72\n70 100\n79 86\n42 52\n88 27\n47 89 60\n83 86 44\n70 75 2\n79 79 92 85\n96 39",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "13 6\n79 62 31\n73 6 90\n72 64 70 63\n77 66 26 75 94\n15 79\n98 42\n10 18\n72 7\n54 92\n32 65 78\n55 53 18\n74 67 44\n100 34 78 16\n51 98",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "66 103\n33 64 144\n128 91 45\n16 117 41 142\n73 69 19 41 44\n74 101\n31 109\n24 24\n113 128\n97 35\n44 70 76\n136 93 104\n119 104 92\n116 22 131 16\n106 38",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "58 147\n94 79 66\n100 108 68\n36 45 74 60\n120 130 33 48 75\n108 101\n72 72\n140 77\n115 58\n73 106\n21 119 99\n115 118 26\n119 46 55\n111 86 126 137\n25 94",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "84 79\n112 133 141\n69 106 27\n145 124 71 135\n81 44 90 144 61\n27 18\n53 60\n113 117\n146 144\n75 147\n57 46 58\n120 64 149\n73 80 50\n95 109 90 40\n140 78",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "99 73\n99 48 77\n105 34 55\n88 38 89 133\n101 140 108 18 44\n73 105\n58 72\n115 55\n57 76\n52 58\n62 32 109\n79 107 40\n44 87 127\n79 125 138 61\n49 31",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "73 88\n55 61 141\n60 32 149\n55 119 61 24\n142 112 81 106 141\n45 150\n81 119\n148 145\n37 27\n48 34\n103 21 140\n141 42 44\n60 91 97\n80 148 50 35\n24 124",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "16 29\n149 28 49\n125 51 144\n52 135 25 114\n89 78 78 77 61\n104 100\n38 87\n56 49\n90 24\n119 78\n97 96 88\n58 105 17\n135 75 61\n75 117 147 100\n76 149",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "131 83\n116 57 98\n83 22 111\n62 120 117 115\n84 105 115 116 140\n33 125\n118 37\n83 132\n83 124\n55 121\n138 16 51\n64 135 119\n59 70 104\n65 16 118 132\n24 127",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "300 300\n300 300 300\n300 300 300\n300 300 300 300\n300 300 300 300 300\n300 300\n300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300 300\n300 300",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "300 300\n300 300 300\n300 300 300\n300 300 300 300\n300 300 300 300 300\n300 300\n300 300\n300 300\n300 300\n300 300\n300 300 300\n300 300 300\n300 300 300\n300 300 300 300\n300 300",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "299 1\n300 2 2\n299 1 2\n1 300 299 299\n300 299 299 2 300\n2 299\n300 1\n299 2\n2 2\n2 2\n1 300 1\n1 1 299\n1 1 1\n299 299 1 1\n1 299",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "300 1\n300 2 300\n299 300 2\n1 2 2 2\n299 2 300 2 1\n299 299\n300 299\n300 299\n300 2\n300 1\n2 2 300\n1 299 299\n2 300 2\n1 299 299 2\n1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}