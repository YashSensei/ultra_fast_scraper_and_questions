{
  "problem_code": "problems",
  "title": "Distributing V",
  "tags": [],
  "text": "As you probably know there is a new kind of energy called V-energy which is more affordable than electricity, and has some really interesting properties. The Universal Company on V-Energy has just reached your city and is currently planning the location of the distribution centers. You are given a map of the city, the list of the location of the distribution centers, and they need you to report which is the minimum amount of energy that would reach a building of the city, and how many buildings share that amount of energyV-Energy has the following properties:If a building has K units of V-Energy it will consume C units and distribute K - C to every building it is connected to. If K < C the building will consume K units and will not distribute any units of energy.If a building receives V-Energy from different sources it will only consume and distribute the energy with maximum value. For example, if a building receives K = 8 units of energy, and C = 3 it will consume 3 and distribute 5. But, if later the same building receives K = 6 units of energy, it will not consume or distribute this energy since previously it received a larger amount of energy. If later on the same building receives K = 15 units of energy, it will consume 3 units, and distribute 12 units to its neighbors.As you know, your city is a grid, with buildings on every intersection of the streets. Since V-Energy propagates only through streets, the streets map of the city is perfect for your job. Avenues run horizontally while streets run vertically. Note that sometimes a street or avenue can be blocked. The next figure shows a possible view of a city where street 1 is blocked between avenues 1 and 2, and avenue 2 is blocked between streets 0 and 1.InputThe input contains several test cases. Each case starts with a line containing the values K and C (amount of V-energy each distribution center has and amount of V-energy each building consumes). (0 <= C,KÂ  <= 10000). The next line contains two values N and M denoting the number of avenues and streets on the city (1 <= N,M <= 1000). The following line will have one value B which denotes the number of street and avenues segments that are blocked and cannot distribute V-energy (0 <= B<=  N*M-N-M). The following B lines will have four values T I J1 J2. T indicates the type of the segment, can be either 'A' of 'S' to denote an avenue segment or a street segment. I denotes the street or avenue index (0 <=I < N). If it is an avenue segment then J1, J2 are the indexes of the starting street and ending street where the avenue is blocked. If it is a street segment, J1, J2 are the indexes of the starting and ending avenues where the street is blocked (0 <= J1 < J2 <= M). The next line will have the number D of deposits (0 <=  D <= min(1000, N*M)). The following D lines will have a pair Ai Si indicating that on the intersection of avenue Ai with street Si there will be a distribution center. (0 <= Ai < N, 0 <= Si < M).The end of input is indicated by a test case with K = C = 0.OutputFor each test cases you have to print a line containing two numbers Q and P indicating the minimum amount of energy that reaches a building on the city, and the number of building with that amount of energy.ExampleInput:2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0Output:0 12 1",
  "sample_input": "Input:2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0Output:0 12 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UCV2013D",
  "scraped_at": "2025-08-17 00:34:04",
  "test_cases": [
    {
      "input": "2 12 3020 00 212 23 32A 2 0 1S 1 1 212 00 0",
      "expected_output": "0 12 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 1 7 6 2 4 10 10 5 4 6 10 2 3\n10 10 8 5 5 5 wkb 5 9 fudy 5 2 4 2 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 8 7 1 8 5 1 10 1 5 8 5 3 4 2\n7 6 5 2 2 8 vb 7 10 vqg 10 6 6 5 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7 3 10 5 3 6 5 8 1 4 9 6 10 2\n3 10 2 10 4 9 bmfxu 4 3 ctktb 7 4 5 9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "44 62 32 98 81 19 94 19 74 98 30 17 11 99 99\n71 96 89 4 17 98 whab 88 51 za 53 88 29 64 8",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "2 58 48 80 81 22 50 83 13 37 79 68 5 91 55\n67 47 62 35 47 46 rqt 55 88 w 24 18 65 82 78",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "75 23 89 79 69 47 42 70 58 24 17 97 64 60 18\n22 29 41 65 20 55 rmr 77 42 b 73 9 78 98 48",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "20 24 92 1 2 92 69 91 99 84 8 12 61 83 58\n40 21 86 67 90 95 pw 85 80 ag 56 51 61 68 97",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 22 74 14 51 22 30 12 62 36 18 31 67 47 58\n92 72 96 38 98 20 ylyv 26 90 ol 87 37 83 5 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "79 420 204 358 390 99 387 254 129 178 182 193 284 75 448\n332 309 332 325 411 273 ajm 489 261 hd 61 85 95 493 383",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "335 308 178 364 131 99 293 316 294 451 266 350 224 340 112\n416 425 260 359 251 389 v 68 218 dsx 79 135 323 109 60",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "384 213 302 283 248 339 189 79 86 398 284 105 463 460 164\n444 191 499 474 130 305 ln 166 356 n 248 158 488 494 482",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "371 453 423 206 72 185 192 353 194 200 313 423 252 80 365\n304 108 239 70 317 453 kvm 177 397 nronq 203 123 255 488 139",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "60 198 129 416 167 144 372 167 243 163 442 250 304 98 136\n354 298 362 268 62 256 f 496 144 dhlz 437 302 278 480 105",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "397 316 76 318 494 253 456 124 342 186 294 101 356 105 439\n404 270 493 147 143 77 d 336 332 qaz 394 142 467 189 483",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "67 206 433 451 80 222 314 160 344 368 320 441 86 196 151\n476 427 247 452 193 161 jrq 172 440 zwbq 79 67 77 120 357",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 vdagd 1000 1000 iv 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 rzfge 1000 1000 a 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2 2 1 2 1 1000 1 2 1000 1000 1000 999 1000 1\n2 1 1 1 999 999 x 999 1000 a 999 999 1000 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 2 1000 999 999 1 2 999 999 999 2 2 1 2\n2 999 999 2 1 999 xwhg 2 1 nsoys 1 999 999 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}