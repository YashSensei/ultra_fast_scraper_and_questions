{
  "problem_code": "problems",
  "title": "PBCGAME",
  "tags": [],
  "text": "The company \"PBC\" has made a game which consists of small platforms and pipes. There are 3 types of platforms: starting platforms (there are N1 of them), finishing platforms (there are N3 of them) and middle platforms (there are N2 of them). All starting platforms stand at identical height. Finishing platforms stand also at identical height. All heights of middle platforms are various. They have less height than starting, but greater height than finishing platforms. Each platform has an unique number from 1 up to N1+N2+N3. First N1 numbers are starting platforms, next N2 numbers are middle platforms, and the last N3 numbers are finishing platforms. All middle platforms are numbered in order of decrease of height. It means that if number of middle platform A is less than number of platform B, than height of A is greater than height of B.There is a ball on each of starting platforms. The ball can move from platform A to platform B if they are connected by a pipe, and height A is greater than height B. Each finishing platform can hold only one ball. If there is a ball on a platform the player can choose a direction of the further way of the ball, it means that he can choose a platform, where the ball will go. Also given a number C for each middle platform which means a maximum quantity of balls which can pass it during the game. The goal of the game is to drive the greatest possible number of ball to the finishing platforms.You need to find out what maximum quantity of balls can appear on finishing platforms at the end of the game.InputThe input file has the following order:N1 N2 N3CN1+1...CN1+N2K1 A[1,1] ... A[1,K1]K2 A[2,1] ... A[2,K2]...KN1+N2A[N1+N2,1] ... A[N1+N2,KN1+N2]Where N1, N2, N3 are the amounts of starting, middle and finishing platforms. Cj is the maximum amount of balls, which can pass the middle platform with the number j (N1+1 ≤ j ≤ N1+N2) during the game. Ki is the number of pipes, connected with the platform i (1 ≤ i ≤ N1+N2). The elements of the array A, are the numbers of platforms where the ball can move from the appropriate platform (platforms with numbers i and A[i] are connected with a pipe).OutputThe output file must contain a number, which means the maximum number of balls, which can appear at the finishing platforms at the end of the game.ExampleInput:3 4 3\r\n3\r\n2\r\n1\r\n2\r\n1 4\r\n1 4\r\n1 4\r\n2 5 6\r\n1 7\r\n1 7\r\n3 8 9 10Output:2Limitations:All the numbers are integer.0 < N1, N3 < 511 < N1+N2+N3 < 2010 ≤ Cj ≤ 50There are no pipes between starting platforms.There are no pipes between finishing platforms.",
  "sample_input": "Input:3 4 3\r\n3\r\n2\r\n1\r\n2\r\n1 4\r\n1 4\r\n1 4\r\n2 5 6\r\n1 7\r\n1 7\r\n3 8 9 10Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PBCGAME",
  "scraped_at": "2025-08-17 00:33:53",
  "test_cases": [
    {
      "input": "3 4 3\r\n3\r\n2\r\n1\r\n2\r\n1 4\r\n1 4\r\n1 4\r\n2 5 6\r\n1 7\r\n1 7\r\n3 8 9 10",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 1 8\n10\n9\n7\n4\n1 10\n3 1\n1 2\n7 1 8\n3 2\n5 6\n7 2 7 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 9\n4\n6\n4\n7\n10 10\n3 3\n5 2\n1 5 1\n5 2\n8 6\n2 5 10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 3 9\n8\n3\n10\n2\n2 8\n5 7\n5 1\n3 6 8\n6 6\n4 2\n2 7 9 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "54 48 2\n85\n52\n44\n2\n15 35\n3 88\n46 78\n99 17 2\n50 51\n15 87\n12 11 41 15",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "28 18 65\n31\n59\n7\n62\n33 53\n98 33\n31 41\n50 29 62\n97 99\n1 43\n46 30 53 24",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "36 73 76\n7\n11\n17\n27\n52 18\n96 58\n84 99\n20 99 22\n4 61\n99 44\n27 63 59 95",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 95 48\n30\n32\n17\n17\n97 7\n36 16\n12 25\n79 49 76\n71 10\n98 32\n72 65 61 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "79 68 80\n66\n61\n74\n77\n74 59\n51 52\n83 25\n27 12 50\n36 9\n36 51\n11 53 23 48",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "247 433 486\n72\n352\n248\n295\n240 494\n66 199\n185 205\n72 141 242\n169 337\n66 269\n67 107 452 80",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "353 248 282\n263\n467\n345\n450\n108 249\n155 322\n299 373\n435 64 236\n431 202\n294 453\n149 344 498 103",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "332 105 452\n225\n117\n369\n378\n346 355\n57 276\n473 125\n163 433 193\n431 203\n191 434\n423 287 194 214",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "286 439 472\n111\n362\n442\n98\n494 185\n276 485\n271 485\n495 115 412\n84 482\n283 367\n265 102 219 251",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "229 267 285\n427\n230\n213\n346\n365 287\n200 451\n82 226\n350 76 215\n133 407\n421 486\n86 393 116 90",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "163 266 440\n115\n82\n440\n75\n487 430\n341 424\n254 83\n119 327 220\n340 376\n205 393\n273 97 111 444",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "95 404 450\n271\n125\n67\n431\n164 232\n295 300\n222 238\n178 362 488\n319 158\n94 161\n144 445 51 439",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000\n1000\n1000\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 1000\n999\n1000\n1000\n1\n1 999\n1 1\n1 1000\n1 2 1\n999 1000\n1000 1000\n2 1000 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1000\n999\n2\n1\n1000\n1 2\n1000 1\n2 2\n1 1 2\n1 2\n1 2\n2 1 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}