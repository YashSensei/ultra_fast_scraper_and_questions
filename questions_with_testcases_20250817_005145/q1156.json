{
  "problem_code": "problems",
  "title": "Two Ends",
  "tags": [],
  "text": "In the two-player game “Two Ends”, an even number of cards is laid out in a row. On each card, face\r\nup, is written a positive integer. Players take turns removing a card from either end of the row and\r\nplacing the card in their pile. The player whose cards add up to the highest number wins the game.\r\nNow one strategy is to simply pick the card at the end that is the largest — we’ll call this the greedy\r\nstrategy. However, this is not always optimal, as the following example shows: (The first player would\r\nwin if she would first pick the 3 instead of the 4.)3 2 10 4You are to determine exactly how bad the greedy strategy is for different games when the second player\r\nuses it but the first player is free to use any strategy she wishes.InputThere will be multiple test cases. Each test case will be contained on one line. Each line will start with\r\nan even integer n followed by n positive integers. A value ofn= 0 indicates end of input. You may\r\nassume thatnis no more than 1000. Furthermore, you may assume that the sum of the numbers in\r\nthe list does not exceed 1,000,000.OutputFor each test case you should print one line of output of the form:In game m, the greedy strategy might lose by as many as p points.wheremis the number of the game (starting at game 1) andpis the maximum possible difference\r\nbetween the first player’s score and second player’s score when the second player uses the greedy strategy.\r\nWhen employing the greedy strategy, always take the larger end. If there is a tie, remove the left end.ExampleInput:4 3 2 10 4\r\n8 1 2 3 4 5 6 7 8\r\n8 2 2 1 5 3 8 7 3\r\n0Output:In game 1, the greedy strategy might lose by as many as 7 points.\r\nIn game 2, the greedy strategy might lose by as many as 4 points.\r\nIn game 3, the greedy strategy might lose by as many as 5 points.",
  "sample_input": "Input:4 3 2 10 4\r\n8 1 2 3 4 5 6 7 8\r\n8 2 2 1 5 3 8 7 3\r\n0Output:In game 1, the greedy strategy might lose by as many as 7 points.\r\nIn game 2, the greedy strategy might lose by as many as 4 points.\r\nIn game 3, the greedy strategy might lose by as many as 5 points.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TWENDS",
  "scraped_at": "2025-08-17 00:33:35",
  "test_cases": [
    {
      "input": "4 3 2 10 4\r\n8 1 2 3 4 5 6 7 8\r\n8 2 2 1 5 3 8 7 3\r\n0",
      "expected_output": "In game 1, the greedy strategy might lose by as many as 7 points.\r\nIn game 2, the greedy strategy might lose by as many as 4 points.\r\nIn game 3, the greedy strategy might lose by as many as 5 points.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3 10 3 8\n10 9 9 6 6 1 1 7 3\n3 3 5 5 5 4 6 8 1\n8",
      "expected_output": "0\n0\n0\n8",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 8 1 1\n9 2 10 7 6 10 3 8 10\n2 6 8 8 9 2 8 5 2\n9",
      "expected_output": "0\n0\n0\n9",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 2 9 10\n8 1 10 8 9 5 6 5 1\n3 2 2 5 3 5 1 6 3\n2",
      "expected_output": "0\n0\n0\n2",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "57 69 8 31 91\n76 100 87 88 58 56 1 18 93\n57 81 23 47 70 97 94 54 82\n93",
      "expected_output": "0\n0\n0\n93",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "79 37 67 65 60\n45 4 25 75 14 86 50 40 2\n64 58 79 19 11 16 59 56 11\n100",
      "expected_output": "0\n0\n0\n100",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 38 91 19 96\n41 89 38 88 9 60 47 51 89\n85 61 87 7 69 57 95 99 100\n56",
      "expected_output": "0\n0\n0\n56",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "93 71 85 4 71\n23 89 41 10 21 41 1 60 91\n76 46 60 94 15 54 26 78 12\n91",
      "expected_output": "0\n0\n0\n91",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "96 26 74 82 48\n27 71 2 45 21 79 69 4 37\n68 50 92 57 49 79 87 47 46\n2",
      "expected_output": "0\n0\n0\n2",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "83 485 220 409 470\n84 97 77 475 312 107 387 276 398\n495 56 132 329 464 225 109 238 339\n258",
      "expected_output": "0\n0\n0\n258",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "57 150 496 127 213\n181 421 176 147 476 226 293 434 240\n357 465 173 113 236 358 76 73 134\n475",
      "expected_output": "0\n0\n0\n475",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "424 104 144 492 141\n103 382 413 484 173 158 247 461 265\n292 140 409 439 358 318 336 407 82\n363",
      "expected_output": "0\n0\n0\n363",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "93 363 243 301 62\n94 464 119 251 379 181 185 272 195\n242 469 133 291 283 291 332 401 250\n366",
      "expected_output": "0\n0\n0\n366",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "476 77 197 475 110\n206 123 229 352 298 491 477 205 229\n333 184 222 301 147 236 499 301 480\n65",
      "expected_output": "0\n0\n0\n65",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "188 204 500 321 290\n153 259 470 242 207 171 500 79 289\n281 164 168 74 215 111 191 188 424\n220",
      "expected_output": "0\n0\n0\n220",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "136 364 398 242 85\n452 135 476 65 348 306 290 499 493\n85 343 180 496 202 376 267 56 499\n319",
      "expected_output": "0\n0\n0\n319",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "0\n0\n0\n1000",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "0\n0\n0\n1000",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 999 2 1\n2 1 2 999 1000 2 999 1000 1\n999 1 999 1000 1000 999 999 1000 2\n1000",
      "expected_output": "0\n0\n0\n1000",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 999 1 2\n2 1000 1000 1 1000 1 2 2 2\n1000 1 1 1 999 2 999 2 1\n1",
      "expected_output": "0\n0\n0\n1",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:55"
}