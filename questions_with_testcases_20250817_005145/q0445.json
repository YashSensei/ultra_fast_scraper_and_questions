{
  "problem_code": "problems",
  "title": "Ambitious XOXO",
  "tags": [],
  "text": "Life is a growth.If we stop growing,Technically and spiritually,We are as good as DEAD- Morihei UeshibaOur heroXOXO_Bunnyfaceis a programmer. He loves to append his name just after the precious word, “Competitive”. He is not much intelligent, nor much logical. But he loves to learn new algorithms and he loves to practice.The world he is currently living hasNalgorithms. You will be given anarray of efficiencyof sizeN, where if the ithelement is x, that means the initial efficiency of XOXO on that algorithm isx.XOXO will doMtasks in this month in order. The tasks will be of two types.1 K XThat means, the efficiency of XOXO on thekthalgorithm will be changed toX. It’s not guaranteed that the new value ofkthindex will be greater than the initial value. The efficiency might also decrease. XOXO is a human being after all.2 A BThere will be a contest arranged on which the efficiency of XOXO will be tested on the algorithms in the range betweenAandBinclusive. In that case, you have to tell the performance of XOXO on that contest which will be the sum of efficiencies inside that range.InputThe first input line has two integersNandM: the number of values and tasks. The second line hasNintegers e1, e2 ... eN: the values of the array of efficiency. Finally, there areMlines describing the tasks list. Each line has three integers: either \"1 K X\" or \"2 A B\"OutputPrint the result of each query of type 2.Constraints1 ≤ N, M ≤ 2×1051 ≤ ei, X ≤ 1091 ≤ k ≤ N1 ≤ A, B ≤ NSamplesInput:5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4Output:15\r\n8\r\n10\r\n8",
  "sample_input": "Input:5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4Output:15\r\n8\r\n10\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DEV_CP",
  "scraped_at": "2025-08-17 00:33:12",
  "test_cases": [
    {
      "input": "5 5\r\n2 3 6 4 8\r\n2 1 4\r\n2 5 5\r\n1 3 1\r\n2 1 4\r\n2 2 4",
      "expected_output": "15\r\n8\r\n10\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1\n8 6 4 9 1\n6 3 1\n9 3 1\n6 2 2\n10 5 3\n10 6 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 3\n3 5 6 8 4\n3 9 2\n4 7 6\n3 8 9\n9 10 7\n3 7 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 10\n8 6 4 3 1\n4 6 10\n7 6 4\n10 7 4\n1 10 1\n3 5 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "18 81\n39 14 82 58 18\n26 94 60\n61 71 26\n39 65 14\n42 34 96\n26 15 90",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "42 56\n2 47 13 25 86\n3 52 42\n96 7 23\n60 53 30\n60 6 35\n45 67 7",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 57\n3 43 3 68 59\n58 96 100\n95 77 93\n77 25 48\n76 46 51\n52 38 36",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 39\n66 9 100 18 27\n55 73 70\n86 75 72\n38 4 93\n40 79 73\n23 32 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 38\n32 41 37 11 87\n19 22 71\n52 3 65\n72 31 61\n86 2 82\n57 50 29",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "446 256\n452 255 436 315 333\n252 472 363\n470 488 367\n470 416 295\n194 112 389\n364 289 446",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "223 293\n312 81 494 475 183\n278 472 78\n469 436 222\n179 169 164\n161 339 263\n203 462 306",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "66 267\n338 379 328 466 343\n142 394 214\n173 183 237\n455 136 222\n173 464 91\n76 114 368",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "264 390\n282 350 269 267 337\n402 463 264\n227 460 131\n267 68 198\n166 469 183\n101 476 109",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "83 246\n425 230 78 344 223\n285 232 338\n458 425 394\n464 433 378\n172 369 208\n299 460 81",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "352 219\n438 200 318 292 73\n447 429 273\n467 64 211\n247 368 147\n239 230 409\n137 211 390",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "136 94\n52 100 492 336 492\n117 57 311\n244 226 364\n103 459 108\n478 292 56\n481 292 345",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n2 1000 1 999 1\n999 999 1\n2 1000 999\n999 1000 2\n999 1 2\n1000 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n999 1 1000 1 1\n1000 1 1\n1 2 1\n1 1 1\n2 999 1\n2 999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}