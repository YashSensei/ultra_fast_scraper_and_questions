{
  "problem_code": "problems",
  "title": "Doors and Penguins",
  "tags": [],
  "text": "The organizers of the Annual Computing Meeting have invited a number of vendors to set up booths in a large exhibition hall during the meeting to showcase their latest products. As the vendors set up their booths at their assigned locations, they discovered that the organizers did not take into account an important fact — each vendor supports either the Doors operating system or the Penguin operating system, but not both. A vendor supporting one operating system does not want a booth next to one supporting another operating system.\r\n\r\nUnfortunately the booths have already been assigned and even set up. There is no time to reassign the booths or have them moved. To make matter worse, these vendors in fact do not even want to be in the same room with vendors supporting a different operating system.\r\n\r\nLuckily, the organizers found some portable partition screens to build a wall that can separate the two groups of vendors. They have enough material to build a wall of any length. The screens can only be used to build a straight wall. The organizers need your help to determine if it is possible to separate the two groups of vendors by a single straight wall built from the portable screens. The wall built must not touch any vendor booth (but it may be arbitrarily close to touching a booth). This will hopefully prevent one of the vendors from knocking the wall over accidentally.InputThe input consists of a number of cases. Each case starts with 2 integers on a line separated by a single space: D and P, the number of vendors supporting the Doors and Penguins operating system, respectively (1 ≤ D, P ≤ 500). The next D lines specify the locations of the vendors supporting Doors. This is followed by P lines specifying the locations of the vendors supporting Penguins. The location of each vendor is specified by four positive integers: x1, y1, x2, y2. (x1, y1) specifies the coordinates of the southwest corner of the booth while (x2, y2) specifies the coordinates of the northeast corner. The coordinates satisfy x1 < x2 and y1 < y2. All booths are rectangular and have sides parallel to one of the compass directions. The coordinates of the southwest corner of the exhibition hall is (0, 0) and the coordinates of the northeast corner is (15000, 15000). You may assume that all vendor booths are completely inside the exhibition hall and do not touch the walls of the hall. The booths do not overlap or touch each other.\r\n\r\nThe end of input is indicated by D = P = 0.OutputFor each case, print the case number (starting from 1), followed by a colon and a space. Next, print the sentence:\r\n\r\nIt is possible to separate the two groups of vendors.\r\n\r\nif it is possible to do so. Otherwise, print the sentence:\r\n\r\nIt is not possible to separate the two groups of vendors.\r\n\r\nPrint a blank line between consecutive cases.ExampleInput:3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0Output:Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
  "sample_input": "Input:3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0Output:Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DOORSPEN",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "3 3\r\n10 40 20 50\r\n50 80 60 90\r\n30 60 40 70\r\n30 30 40 40\r\n50 50 60 60\r\n10 10 20 20\r\n2 1\r\n10 10 20 20\r\n40 10 50 20\r\n25 12 35 40\r\n0 0",
      "expected_output": "Case 1: It is possible to separate the two groups of vendors.\r\n\r\nCase 2: It is not possible to separate the two groups of vendors.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6\n4 1 10 1\n9 2 9 10\n8 4 5 2\n2 2 8 2\n10 10 4 4\n8 1 1 10\n7 9\n6 9 5 3\n3 8 10 6\n6 3 3 7\n4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n9 5 1 7\n2 7 10 3\n5 6 7 4\n5 3 10 4\n8 4 4 6\n3 6 5 2\n6 4\n9 5 10 3\n3 7 2 3\n1 8 4 1\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n3 8 5 2\n10 7 2 9\n4 7 2 9\n8 6 2 10\n6 4 6 10\n3 10 9 8\n7 7\n7 7 8 6\n2 5 8 6\n7 4 2 4\n9 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "29 51\n93 28 10 98\n55 89 4 47\n78 83 7 85\n51 58 49 86\n37 92 8 77\n36 57 51 68\n47 34\n93 5 96 25\n64 80 98 91\n4 19 8 4\n57 11",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 25\n74 82 85 81\n51 80 14 17\n39 17 47 31\n60 79 46 28\n27 18 44 67\n25 35 2 13\n11 18\n29 92 50 84\n23 69 48 83\n100 69 87 50\n43 59",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "26 99\n99 21 47 12\n75 98 32 2\n82 38 100 24\n17 48 79 50\n66 61 60 11\n2 62 97 78\n2 73\n91 6 84 41\n81 26 40 85\n84 87 22 12\n76 73",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "48 94\n74 27 86 68\n54 12 58 37\n51 8 21 2\n58 87 44 35\n99 73 54 85\n92 39 33 16\n83 6\n90 43 35 17\n20 75 29 73\n60 43 46 70\n36 17",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 58\n21 48 92 68\n98 83 80 63\n84 11 43 33\n49 6 6 41\n73 43 22 95\n77 100 17 28\n65 22\n31 90 83 55\n65 96 94 56\n76 29 40 84\n11 52",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "326 270\n410 111 221 87\n277 275 214 59\n124 112 299 118\n191 288 253 408\n329 408 188 274\n350 296 438 203\n351 305\n473 316 90 153\n483 65 395 315\n391 315 337 386\n487 447",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "479 227\n290 464 159 255\n413 164 443 336\n111 133 210 352\n245 156 443 134\n411 259 69 359\n342 431 462 193\n74 58\n284 312 138 221\n276 286 235 426\n258 496 212 270\n415 389",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "240 454\n337 382 479 386\n435 409 124 184\n256 171 361 85\n434 302 425 200\n451 184 76 216\n446 321 200 388\n221 99\n233 347 126 203\n135 138 75 305\n356 69 359 131\n276 94",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "366 127\n337 131 76 378\n51 363 157 307\n337 226 238 289\n300 126 103 84\n89 197 133 161\n246 485 366 498\n423 376\n70 334 308 111\n200 388 297 329\n81 453 65 269\n377 403",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "312 67\n169 422 251 402\n218 152 57 281\n271 392 337 206\n190 134 219 346\n206 210 331 311\n65 284 259 87\n190 190\n170 475 305 122\n295 429 418 310\n129 217 343 352\n453 496",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "320 159\n294 355 377 155\n181 164 147 75\n401 253 392 61\n298 58 70 470\n338 65 471 189\n274 163 439 177\n140 80\n119 282 484 220\n195 495 99 273\n176 399 148 312\n264 239",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "278 119\n198 164 186 469\n204 373 191 83\n167 440 497 259\n129 431 65 254\n299 495 363 168\n313 238 480 296\n68 214\n271 476 423 374\n210 219 474 206\n85 237 434 305\n50 301",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1000\n999 1000 1000 2\n2 2 999 2\n999 1000 999 1000\n1000 1 1000 2\n2 1 2 2\n999 1000 1000 999\n1000 1000\n1000 999 1000 1\n2 999 1000 1\n999 1 1 1\n1 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1000 999 1000 2\n999 999 999 1000\n2 999 1 999\n2 2 1 2\n1 1 1 1\n2 2 1000 1\n1000 1000\n1000 1000 1000 1\n999 2 1000 1\n999 1 1 2\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}