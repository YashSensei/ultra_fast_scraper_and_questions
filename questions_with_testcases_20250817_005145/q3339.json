{
  "problem_code": "problems",
  "title": "Slink",
  "tags": [],
  "text": "Slitherlink is a puzzle published by Nikoli, the Japanese company that\r\n   popularized Sudoku. Slitherlink puzzles are gaining momentum, and books of\r\n   Slitherlink puzzles have started showing up around the world. The puzzles\r\n   are simple to understand, but can be challenging to solve. The puzzle is\r\n   simply a rectangular grid of dots that forms a collection of cells, every\r\n   cell being either blank or containing an integer from zero to three. The\r\n   challenge is to connect the dots with line segments to form a cycle (a\r\n   connected path such that every vertex has precisely two incident edges), in\r\n   such a way that every cell with a value has exactly the number of incident\r\n   edges as the digit it contains. Cells with no value may have any number of\r\n   incident edges. A valid Slitherlink puzzle always contains sufficient\r\n   non-empty cells to guarantee a unique solution. Below is an example from the\r\n   Nikoli web site of a Slitherlink puzzle and its solution.It was shown by Takayuki Yato at the University of Tokyo that the general\r\n   Slitherlink problem is NP-complete. (If you are not familiar with this\r\n   concept, informally it means there is no \"efficient\" algorithm to solve the\r\n   problem.) With a slight modification and some simple heuristics, however,\r\n   programmatic solutions are possible. Our new puzzle, which we will term\r\n   Slink, differs from Slitherlink only in that the puzzle may not have empty\r\n   cells. That is, every cell must specify the number of incident edges. Below\r\n   is the Slitherlink puzzle above converted to Slink (the added numbers are\r\n   shown in gray). Note that the solution does not change, only the information\r\n   given in the puzzle itself.The heuristics for solving Slink arise from the nature of the puzzle\r\n   itself. For example, consider a cell containing a zero. There must be no\r\n   incident edges, therefore all edges incident to all zeros can be immediately\r\n   removed from consideration as part of the solution path. Consider a three\r\n   next to a zero. Because all the edges incident to the zero will be\r\n   eliminated, the common edge shared with the three is also eliminated. But\r\n   that leaves only three edges around the three, and therefore those three\r\n   edges must be part of the solution path. The following table specifies the\r\n   heuristic rules that must be properly applied to solve a Slink puzzle. The\r\n   \"x\" characters between vertices mark edges that are not part of the solution\r\n   path, while line segments between vertices mark edges that form part of the\r\n   solution. Grey elements are the pattern the rule is based on, black elements\r\n   indicate the additional edges that should be included or excluded if the\r\n   rule is matched. Note that the pictured examples are for demonstration\r\n   purposes only and donotillustrate every possible arrangement of the\r\n   stated rule!ExamplesRule SpecificationThe easiest and most obvious of all the rules. Cells containing a\r\n         zero have no incident edges, so all the edges around a zero should be\r\n         removed from consideration as part of the solution path.If a cell contains the valuenand onlynincident\r\n         edges remain (i.e. have not been eliminated), then thenremaining edges must be part of the solution path. Two examples of\r\n         this occurring are shown here.If a cell contains the valuenandnincident edges\r\n         have already been included in the path, the remaining edges can be\r\n         eliminated. Two examples of this occurring are shown here.If two 3's are adjacent to one another, the common edge between\r\n         the cells as well as the outer edges of both cells are part of the\r\n         solution path. One example of this arrangement occurring is shown\r\n         here.If two 3's occur diagonally adjacent, the opposing corners as\r\n         shown here must be part of the solution path. One example of such an\r\n         arrangement is shown here.If an edge enters a vertex for which only a single exit remains,\r\n         that exit must be part of the solution path. One such example is shown\r\n         here.If a vertex has two incident edges, the other edges can be\r\n         eliminated from consideration as part of the solution path. One such\r\n         example is shown here.If any vertex has three incident edges excluded, the fourth\r\n         incident edge can be excluded as well. One possible arrangement of\r\n         this occurring is shown here.A 3 for which two of the exits are blocked as shown, such as in a\r\n         corner of the puzzle, must include the two edges incident to the\r\n         blocked vertex.If the exits at one corner of a 2 are blocked, and one exit at an\r\n         adjacent vertex around the 2 is also blocked, then the unblocked exit\r\n         at that adjacent vertex must be part of the solution path. One example\r\n         of this arrangement is shown here.A 1 for which the exit paths at one of its incident vertices are\r\n         both blocked as shown, such as might occur in the corner of the\r\n         puzzle, must also eliminate the other two edges incident to that\r\n         vertex as shown.If the solution path enters the corner of a 3, and the exit that\r\n         goes away from the 3 at that same corner is blocked, then the two\r\n         edges around the three incident to the opposite corner must be part of\r\n         the solution path.If a 3 and 1 are diagonally adjacent, and the corner of the 3\r\n         furthest from the 1 has the exit segments blocked as shown, then the\r\n         edges incident to the far corner of the 1 becomes blocked. The\r\n         opposite is also true; if the far corner of the 1 had been blocked,\r\n         then the exit segments at the far corner of the 3 would become blocked\r\n         in the same manner.If the solution path enters the corner of 2 and the path leading\r\n         away from the 2 at the same corner is blocked, then if one of the\r\n         paths leading away from the 2 at the diagonally opposite corner is\r\n         also blocked, the other edge leading away from the 2 at that same\r\n         corner must be part of the solution path. One example of this\r\n         arrangement occurring is shown here.If the solution path enters the corner of a 1, and the exit that\r\n         goes away from the 1 at that same corner is blocked, then the two\r\n         edges around the three incident to the opposite corner must be\r\n         eliminated from the solution path.InputThe input for this problem is a set of Slink puzzles to be\r\n   solved. The first line of a Slink problem's input contains two integers,randc, separated by a space, the number of rows and the\r\n   number of columns in the puzzle. The nextrrows of the input containcintegers, space delimited, valued from 0 to 3, which specify the\r\n   content of the puzzle. The minimum dimension of a puzzle is 2 by 2 cells,\r\n   and the maximum dimension is 20 by 20 cells. It is guaranteed that a unique\r\n   solution to every input puzzle exists and can be determined with the above\r\n   rules if a rule is always applied when it can be applied. A line with values\r\n   of zero forrandcmarks the end of the input.OutputThe output for this problem is a graphical representation\r\n   of the Slink puzzle solution. The first data set is 1, the second data set\r\n   is 2, etc. On a line by itself display the data set number, followed by the\r\n   solution in exactly the format demonstrated below. Vertical edges are output\r\n   as the vertical bar '|' character, horizontal edges are output as dash '-'\r\n   characters, vertices where the path changes direction are output as plus\r\n   signs '+', and cell numbers are always displayed with a blank to the left\r\n   and to the right. Further, surround the entire output with a border made up\r\n   of hash marks '#' such that the number in the upper left cell of the puzzle\r\n   always occurs four positions to the right of the border and three position\r\n   below the border, and the number in the lower right cell always occurs four\r\n   positions to the left of the border and three positions above the\r\n   border.ExampleInput:8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0Output:1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
  "sample_input": "Input:8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0Output:1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SLINK",
  "scraped_at": "2025-08-17 00:34:25",
  "test_cases": [
    {
      "input": "8 8\r\n1 0 1 1 2 2 1 3\r\n3 3 3 3 2 3 3 2\r\n2 2 0 1 1 2 2 0\r\n2 3 1 1 0 1 2 2\r\n2 1 2 3 1 1 0 2\r\n1 2 2 2 2 3 2 1\r\n3 2 1 3 1 1 3 2\r\n1 0 0 2 3 2 3 2\r\n6 6\r\n0 0 1 1 0 0\r\n0 2 2 2 2 0\r\n1 2 0 0 2 1\r\n1 2 0 0 2 1\r\n0 2 2 2 2 0\r\n0 0 1 1 0 0\r\n2 2\r\n2 2\r\n2 2\r\n3 5\r\n3 3 3 2 3\r\n1 2 1 3 2\r\n3 3 2 2 2\r\n0 0",
      "expected_output": "1\r\n#####################################\r\n#                                   #\r\n#                 +---------------+ #\r\n#   1   0   1   1 | 2   2   1   3 | #\r\n# +---+   +---+   |   +---+   +---+ #\r\n# | 3 | 3 | 3 | 3 | 2 | 3 | 3 | 2   #\r\n# |   +---+   +---+   |   +---+     #\r\n# | 2   2   0   1   1 | 2   2   0   #\r\n# +-------+           +-------+     #\r\n#   2   3 | 1   1   0   1   2 | 2   #\r\n# +-------+   +---+           +---+ #\r\n# | 2   1   2 | 3 | 1   1   0   2 | #\r\n# |       +---+   |   +---+       | #\r\n# | 1   2 | 2   2 | 2 | 3 | 2   1 | #\r\n# |   +---+   +---+   |   +---+   | #\r\n# | 3 | 2   1 | 3   1 | 1   3 | 2 | #\r\n# +---+       +---+   |   +---+   | #\r\n#   1   0   0   2 | 3 | 2 | 3   2 | #\r\n#                 +---+   +-------+ #\r\n#                                   #\r\n#####################################\r\n2\r\n#############################\r\n#                           #\r\n#                           #\r\n#   0   0   1   1   0   0   #\r\n#         +-------+         #\r\n#   0   2 | 2   2 | 2   0   #\r\n#     +---+       +---+     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     |               |     #\r\n#   1 | 2   0   0   2 | 1   #\r\n#     +---+       +---+     #\r\n#   0   2 | 2   2 | 2   0   #\r\n#         +-------+         #\r\n#   0   0   1   1   0   0   #\r\n#                           #\r\n#                           #\r\n#############################\r\n3\r\n#############\r\n#           #\r\n# +-------+ #\r\n# | 2   2 | #\r\n# |       | #\r\n# | 2   2 | #\r\n# +-------+ #\r\n#           #\r\n#############\r\n4\r\n#########################\r\n#                       #\r\n# +---+   +---+   +---+ #\r\n# | 3 | 3 | 3 | 2 | 3 | #\r\n# |   +---+   |   |   | #\r\n# | 1   2   1 | 3 | 2 | #\r\n# |   +---+   +---+   | #\r\n# | 3 | 3 | 2   2   2 | #\r\n# +---+   +-----------+ #\r\n#                       #\r\n#########################",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5\n3 5 6 2 9 9 10 4\n9 3 10 8 7 10 10 3\n5 8 6 9 1 9 7 5\n1 7 7 4 9 6 5 6\n1 8 6 9 2 8 2 10\n10 6 9 1 1 10 4 1\n1 3 2 9 7 7 7 9\n5 10 8 6 10 1 2 8\n3 1\n7 6 7 4 1 2\n7 8 5 5 2 6\n6 8 1 5 8 7\n2 6 10 9 3 5\n8 4 6 1 9 8\n9 9 6 1 8 5\n10 1\n9 6\n8 8\n5 4\n6 1 7 1 7\n7 8 4 5 7\n8 5 5 2 9\n2 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 10\n1 9 8 9 8 1 7 8\n9 7 6 5 6 8 7 3\n3 3 1 2 5 5 1 7\n9 8 4 9 7 4 3 9\n4 1 7 10 10 7 9 9\n10 1 6 3 10 9 1 5\n1 6 8 7 3 7 10 2\n10 3 8 7 3 6 3 1\n5 7\n4 8 5 2 1 2\n9 10 7 3 2 9\n5 4 2 7 1 9\n4 9 10 6 3 10\n10 2 3 7 4 9\n8 5 6 3 5 7\n8 10\n6 1\n4 2\n6 6\n3 8 5 4 5\n10 5 6 3 4\n5 4 1 10 6\n6 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n5 2 9 2 6 8 7 9\n10 9 10 8 5 9 10 3\n3 1 3 7 8 2 1 2\n9 5 4 9 2 1 5 7\n2 6 8 1 5 5 5 5\n7 5 6 1 5 5 6 8\n3 2 7 2 9 2 10 4\n7 3 9 2 8 5 10 1\n5 1\n4 8 2 6 10 10\n1 7 7 10 3 3\n9 7 3 6 4 3\n3 6 8 5 10 9\n7 2 1 2 3 1\n3 4 3 9 7 3\n6 1\n6 10\n7 5\n5 8\n2 6 4 3 3\n8 5 4 10 2\n8 5 1 1 8\n7 10",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "84 89\n57 98 29 3 77 29 39 30\n17 2 11 98 28 14 3 98\n81 80 72 68 45 25 64 27\n24 59 75 39 76 74 15 68\n19 65 77 22 30 1 80 82\n45 14 79 12 98 33 75 47\n2 97 18 73 19 21 48 33\n13 77 64 71 78 18 43 39\n41 91\n32 9 2 20 56 85\n29 87 48 75 16 25\n98 57 70 29 31 60\n87 69 43 100 27 91\n18 69 40 49 92 20\n51 15 40 89 6 26\n83 37\n95 50\n70 55\n4 75\n70 17 31 75 70\n46 44 6 68 28\n80 98 84 24 67\n6 29",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "67 15\n55 30 60 52 49 58 46 26\n90 16 59 10 12 98 4 47\n6 56 60 80 77 21 20 34\n15 95 91 98 76 16 8 90\n57 3 50 73 98 6 34 63\n5 87 60 54 54 57 14 19\n79 66 18 23 94 59 33 51\n52 69 73 84 22 49 83 61\n11 9\n11 97 1 70 34 75\n57 29 27 93 97 46\n96 74 37 94 44 37\n88 46 91 7 71 24\n55 58 42 50 12 85\n77 90 66 73 59 84\n93 39\n42 85\n33 17\n69 12\n4 91 15 70 82\n10 73 36 83 75\n59 43 60 30 95\n51 85",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "82 82\n28 25 18 23 3 9 83 6\n33 98 100 91 28 59 57 55\n35 78 35 57 27 40 64 34\n74 21 1 39 4 53 77 6\n5 34 39 16 20 62 35 87\n12 25 98 89 48 79 57 86\n17 28 3 63 75 67 30 38\n64 62 43 19 3 77 100 68\n15 60\n37 99 100 29 98 56\n38 55 52 32 10 68\n41 26 80 42 73 92\n99 65 23 35 57 61\n79 37 69 95 29 55\n66 84 26 65 70 98\n91 32\n74 98\n44 99\n98 61\n34 70 56 77 76\n99 13 5 17 13\n15 5 68 52 25\n81 17",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "100 33\n77 96 96 75 82 16 19 15\n88 84 82 57 14 99 43 66\n60 85 63 65 32 49 36 9\n59 63 18 72 36 55 74 16\n9 86 4 26 5 93 4 8\n84 53 28 62 37 63 42 55\n93 57 71 86 77 60 36 89\n1 22 17 42 56 34 34 9\n42 48\n56 7 27 35 66 92\n26 77 48 22 14 48\n78 11 55 57 76 17\n56 83 56 64 86 65\n68 91 37 99 28 66\n32 63 38 85 40 49\n92 85\n24 94\n65 71\n88 51\n52 84 68 36 85\n67 24 8 12 8\n50 8 44 63 84\n50 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "8 33\n74 78 9 67 1 88 68 42\n51 76 42 66 83 23 49 39\n35 94 29 77 96 59 13 8\n96 63 4 79 70 50 58 94\n44 2 44 68 50 11 37 84\n83 80 3 65 35 94 23 62\n9 85 8 44 4 41 38 42\n7 68 12 7 16 94 94 92\n13 61\n10 33 76 54 30 59\n45 91 23 61 78 54\n64 15 9 89 95 40\n34 74 69 16 55 14\n20 16 75 74 21 25\n96 26 90 3 63 75\n84 1\n30 97\n31 8\n97 83\n45 65 44 31 25\n19 84 22 99 86\n40 3 88 20 50\n34 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "207 448\n144 438 52 238 264 380 411 341\n233 339 101 407 223 469 477 455\n158 251 463 119 426 122 151 465\n284 345 204 234 130 115 94 357\n293 415 59 174 392 347 114 232\n395 254 356 161 295 155 226 53\n199 240 440 358 141 461 267 462\n497 312 353 434 89 174 160 318\n399 460\n89 253 244 72 441 172\n305 263 338 465 191 283\n116 280 468 344 123 181\n374 257 472 155 172 476\n498 286 337 61 283 338\n172 118 328 353 63 248\n406 372\n214 188\n456 97\n172 306\n161 434 231 386 212\n274 154 80 465 177\n113 409 215 408 341\n350 234",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "484 230\n436 281 208 245 173 473 280 81\n199 300 308 183 263 52 140 127\n82 76 380 86 399 200 276 226\n421 299 458 383 161 63 102 152\n106 322 70 214 339 262 227 297\n391 495 412 214 214 400 84 178\n133 227 165 159 320 118 328 77\n481 402 432 490 216 191 355 218\n304 51\n236 144 393 426 476 51\n325 199 319 170 482 479\n333 477 177 139 131 414\n479 375 129 293 392 479\n354 377 87 336 111 432\n339 290 417 474 332 68\n303 460\n341 232\n498 288\n462 94\n233 423 116 492 243\n116 392 165 145 150\n71 380 367 444 179\n281 293",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "467 237\n387 196 95 359 329 325 64 272\n202 56 314 213 74 187 330 353\n215 137 113 53 400 471 55 280\n348 246 379 479 477 97 365 164\n243 477 296 173 430 271 377 204\n333 425 242 481 322 291 412 152\n469 85 495 500 318 472 470 126\n470 187 441 440 353 376 138 406\n130 444\n156 61 179 493 67 108\n227 305 407 211 53 140\n311 398 350 219 63 464\n352 70 187 480 288 99\n180 149 253 155 441 217\n51 66 444 282 371 150\n489 410\n302 254\n439 285\n229 382\n405 94 115 160 311\n296 190 391 408 304\n280 235 166 161 494\n356 250",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "139 382\n50 314 285 369 119 177 333 125\n245 82 51 165 188 255 136 247\n443 343 118 255 222 243 407 307\n64 485 279 202 423 493 462 382\n102 122 388 321 99 260 125 495\n96 111 312 461 469 139 184 246\n495 363 332 244 314 341 348 339\n408 494 204 141 495 126 410 166\n426 157\n439 92 380 297 267 59\n290 146 245 252 493 168\n84 395 230 193 406 339\n354 492 411 308 185 99\n153 68 189 307 55 51\n316 450 415 276 377 372\n445 355\n209 455\n428 285\n454 234\n490 449 116 388 453\n474 291 396 295 382\n356 236 457 228 237\n379 77",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "102 150\n129 492 400 151 59 431 74 270\n381 278 462 233 373 140 363 53\n447 103 422 427 301 268 482 409\n151 404 500 242 210 307 444 259\n131 228 170 66 386 281 393 256\n431 173 85 63 130 58 258 401\n292 420 427 237 96 171 253 168\n262 248 140 51 431 122 267 64\n393 387\n424 228 349 166 324 405\n61 370 459 292 216 291\n359 464 244 251 100 225\n194 461 166 227 107 379\n421 167 322 270 435 219\n332 126 74 354 365 374\n296 106\n146 447\n362 218\n275 442\n443 216 357 61 206\n315 64 130 169 286\n422 378 62 269 438\n363 471",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "434 207\n161 141 326 198 70 107 476 435\n166 86 443 249 194 241 391 327\n249 139 204 175 284 256 491 109\n288 349 356 142 100 304 389 268\n375 445 138 337 338 373 116 477\n259 154 302 197 196 57 292 158\n414 474 68 123 271 365 119 81\n60 452 301 438 382 355 130 299\n93 484\n280 396 52 297 160 397\n468 476 355 452 129 266\n276 111 497 407 422 348\n87 121 162 384 433 325\n469 66 267 243 228 299\n71 233 272 148 349 475\n410 91\n164 292\n369 126\n271 423\n279 276 463 436 259\n137 259 105 260 292\n268 181 123 491 478\n392 102",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "376 205\n469 161 202 427 50 267 463 111\n200 266 261 310 189 220 309 367\n78 60 217 393 225 358 159 56\n133 323 74 183 191 153 386 333\n385 201 432 93 216 339 85 354\n366 352 339 257 390 419 116 421\n168 243 312 262 365 50 450 302\n380 156 333 428 156 393 110 199\n410 80\n121 301 213 211 271 349\n423 405 276 50 324 159\n332 209 396 57 479 357\n310 249 216 332 100 341\n363 223 343 240 462 307\n483 451 472 206 322 343\n224 213\n126 174\n408 470\n314 473\n135 448 374 437 328\n72 315 86 358 233\n442 438 479 410 409\n56 500",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n1 999 999 1 999 1 1 2\n2 2 999 1000 2 999 1 2\n2 1000 2 1000 1000 999 999 1000\n1 2 1000 1 2 1000 999 1\n999 1000 1000 999 1000 999 1000 1\n2 999 999 999 1000 1 2 1000\n1 999 999 2 2 2 1 1\n2 1000 1 1000 999 2 1000 1000\n1 1\n1000 999 999 2 1000 1\n1000 1000 1000 1 1000 2\n999 1000 1 1000 999 999\n999 999 1000 2 999 2\n2 1000 1000 2 999 999\n2 1000 1000 1 2 1000\n1 1\n1000 999\n1000 999\n1 2\n1000 2 2 999 1\n1000 1 2 2 1000\n2 2 1 999 999\n1 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2\n1000 2 999 999 2 1000 1000 1000\n999 999 1000 1 999 1 999 1000\n1000 2 1 2 1 2 1000 1\n1 999 1000 1 999 2 1 1000\n2 999 2 2 999 2 999 1000\n1 1 2 1000 2 1 1 1\n999 999 999 2 999 1 2 999\n2 2 2 1 1000 2 999 999\n1000 2\n2 1 1 999 999 999\n1 2 999 1000 999 1000\n1 1000 999 1 2 1\n999 1000 1000 1000 1 999\n1000 2 1 999 999 2\n2 1000 2 999 2 1000\n1000 999\n2 1000\n999 1\n1 1\n1000 999 1 2 1\n1 1 1 999 1000\n999 999 2 999 999\n1 999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:04"
}