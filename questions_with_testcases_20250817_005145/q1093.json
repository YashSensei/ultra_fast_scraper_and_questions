{
  "problem_code": "problems",
  "title": "The Secret of an Aerolite",
  "tags": [],
  "text": "A huge aerolite had fallen in Antarctica!!!Many disasters happened and lots of people lost their lives, homes or even everything. Blue Mary, the well-known scientist, is to work out the secret of this aerolite for further study.Blue Mary has found out that their are some numbers on this aerolite, 5 per line:1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845With her genius, Blue Mary knows that the 5th number is the key to solve the problem, but in some lines the 5th numbers were destroyed and we cannot know what they are instantly.After some days, she finds out the way to calculate the 5th number finally, which is:A Regular Expression(RE) is a string which only contains characters '{', '[', '(', ')', ']', '}' and satisfies the rules below.An empty string is an RE.If there's no character '[', ']', '{', '}' in RE A, then (A) is an RE.If there's no character '{', '}' in RE A, then [A] is an RE.If A is an RE, {A} is an RE.If both A and B are REs, AB is an RE.For example \"()(())[]\", \"{()[()]}\", \"{{[[(())]]}}\"(all without quotes) are REs and \"()([])()\", \"[()\" are not REs.The deep of an RE A, D(A), is defined as below:If A is an empty string, D(A) = 0;If A can be written as BC, D(A) = max(D(B), D(C));If A can be written as (B) or [B] or {B}, D(A) = D(B)+1.Such as D(\"(){()}[]\") = 2.Suppose the first 4 numbers in current line are L1, L2, L3 and D, then the 5th number in current line is the number of REs modulo 11380. Each of the REs must have a depth of D and is made of L1 {}, L2 [] and L3 ().Now Mary needs your help to work out the 5th number.InputInput contains exactly 10 test cases. Each test case contains one line, which contains 4 numbers L1, L2, L3, D (0 ≤ L1, L2, L3 ≤ 10, 0 ≤ D ≤ 30), separated by single spaces.OutputTen lines, each contains a single integer denoted the 5th number.ExampleInput:1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]Output:6\r\n57\r\n8\r\n[and 7 test cases more]",
  "sample_input": "1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845",
  "sample_output": "Input:1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]Output:6\r\n57\r\n8\r\n[and 7 test cases more]",
  "link": "https://www.spoj.com/problems/AEROLITE",
  "scraped_at": "2025-08-17 00:33:29",
  "test_cases": [
    {
      "input": "1 1 1 1 6\r\n0 0 6 3 57\r\n8 0 11 3 2845",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 1 1 1\r\n0 0 6 3\r\n1 1 1 2\r\n[and 7 test cases more]",
      "expected_output": "6\r\n57\r\n8\r\n[and 7 test cases more]",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 5 7 3 2\n6 6 6 1 1\n7 4 3 9 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 8 7 3 5\n7 2 5 7 1\n6 9 2 5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 2 9 2 1\n5 2 4 6 10\n4 1 4 5 3",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "21 80 15 97 40\n22 62 96 13 25\n21 67 44 55 77",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "36 22 33 6 19\n46 51 6 21 1\n19 17 31 63 46",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 21 71 72 44\n67 29 60 97 70\n30 7 80 48 68",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "74 53 63 71 23\n14 76 69 77 9\n69 68 72 33 18",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 93 31 13 26\n25 36 85 30 6\n68 87 60 65 27",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "431 260 198 342 106\n449 489 114 400 288\n296 292 353 136 294",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "83 487 372 51 144\n302 176 211 283 465\n415 456 280 136 240",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "151 72 163 223 487\n303 146 359 75 430\n437 141 221 242 139",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "286 285 303 321 280\n412 287 470 492 400\n433 100 438 352 396",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "487 118 411 222 375\n248 316 499 98 366\n209 134 159 96 319",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "252 358 474 270 478\n422 241 374 205 219\n236 248 494 81 334",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "239 129 353 231 378\n447 364 225 488 366\n238 130 315 172 365",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1 999 999 2\n2 2 1000 999 1000\n2 1000 1000 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}