{
  "problem_code": "problems",
  "title": "Another Version of Inversion",
  "tags": [],
  "text": "DCE Coders admins are way much geekier than they actually seem! Kartik has been following that tradition lately. How? Well, he took the inversion count problem to a whole new level!Sounds pretty normal to you, huh? Wanna challenge him? Try solving his version of inversion count then!You are given a 2-d array of integers. You need to find out the inversion count of that array. A pair of integers in the 2-d array counts as an inversion pair (A,B) if and only if:There exists a valid path from top-left corner (0, 0) to bottom right corner (r, c) such that A and B integers lie on that path.A occurs before B on that path.And, A > B.A valid path is defined as a path that can be traversed from top-left corner (0, 0) to bottom-right corner (r, c) by moving only in right or downwards direction, without moving out of the grid.Are you geekier than Kartik?Constraints:0 < R, C ≤ 3000 < Ai ≤ 105, where Ai stands for an integer in the array.InputFirst line contains space separated 2 integers, R and C, denoting the number of rows and columns.Next R lines contain C space separated integers representing the 2-d array.OutputOutput the number of inversion pairs as described in the problem statement.ExampleInput:4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14Output:10",
  "sample_input": "Input:4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14Output:10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPC14A",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "4 4\r\n3 4 2 5\r\n1 7 11 16\r\n8 9 6 12\r\n10 13 15 14",
      "expected_output": "10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 9\n3 4 6 9\n5 2 3 10\n5 6 1 6\n2 5 3 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n8 2 5 8\n1 2 2 3\n5 7 5 2\n6 7 6 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 7\n6 9 4 6\n6 10 8 1\n1 10 7 8\n2 10 1 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 69\n61 93 84 38\n92 97 66 95\n27 7 27 12\n33 9 44 54",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "69 34\n22 51 21 33\n36 23 44 23\n3 1 2 10\n20 4 13 1",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 39\n70 73 49 71\n19 68 64 7\n96 18 71 55\n54 94 80 42",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "27 39\n1 75 96 76\n57 74 30 90\n22 79 20 26\n44 38 65 83",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "16 84\n41 54 51 79\n78 33 32 75\n72 37 49 30\n17 63 27 45",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "324 105\n220 317 466 130\n161 288 351 121\n153 273 475 230\n484 269 218 336",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "154 484\n319 342 209 59\n273 57 195 356\n264 375 341 332\n87 292 167 470",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "160 210\n322 386 164 360\n328 448 424 250\n317 216 287 395\n426 454 164 337",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "255 247\n53 347 203 381\n280 279 246 395\n376 158 300 446\n444 250 329 228",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "195 99\n347 381 480 368\n494 452 441 485\n98 301 222 77\n455 170 216 198",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "353 428\n70 277 192 367\n309 56 324 425\n236 471 95 380\n226 83 106 215",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 488\n441 476 158 137\n147 331 301 112\n270 51 263 63\n314 54 494 372",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n2 2 1000 2\n999 999 1 1\n2 999 2 999\n1000 999 2 1000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n2 2 2 1000\n2 1000 999 2\n1 999 2 1000\n1 999 999 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:50"
}