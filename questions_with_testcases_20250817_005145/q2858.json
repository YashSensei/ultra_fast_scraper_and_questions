{
  "problem_code": "problems",
  "title": "Friend Zoned",
  "tags": [],
  "text": "Pavel proposed a girl. Of course, she didn’t say yes, rather she gave him an array having N integers and asked him M queries over the array. Each query can be represented as two integers L and R.For each query, Pavel should do the following:First, he has to insert the numbers at index L, L+1, L+2 ... R of the given array into a multi-set. Multi-set is a set where an element can appear multiple times. Suppose that the size of this multi-set after inserting the numbers is k. Formally, k is equal to R-L+1.Then he has to generate all possible subset of the multi-set which he constructed in step 1. Then for each subset he needs to xor the numbers of that subset. In this way, he will get 2kvalues. Note that, for the empty set he will get 0.Finally, he has to xor the 2kvalues which he got at step 2 and say this value to his dream girl.If Pavel can answer all the queries correctly then she will reconsider his proposal. Can you help him to answer the queries?InputThe first line of input contains two integers N and Q. The next line contains N integers, the numbers in the array. Then each of the following Q lines contains 2 integers L and R.OutputFor each query output an integer in a separate line, the answer for that query. Queries should be answered in the order given in the input.Constraints1 ≤ N ≤ 1000001 ≤ Q ≤ 1000000 ≤ Value of a number in the array ≤ 10000000001 ≤ L ≤ N1 ≤ R ≤ NL ≤ RExampleInput:4 2\r\n1 3 3 3\r\n1 1\r\n2 4Output:1\r\n0Explanation:In the first query, there will be only 1 element in the multi-set: {1}. There are 2 possible subset of this multi-set. They are: { }, {1}. If we xor the numbers of each subset we get 0 and 1 respectively. Xor of theses two values is equal to 1.In the second query, there are 3 elements in the multi-set: {3,3,3}. There are 8 possible subset of this multi-set. They are: { }, {3}, {3}, {3}, {3,3}, {3,3}, {3,3}, {3,3,3}. By applying xor operation on the numbers of each subset we get 0, 3, 3, 3, 0, 0, 0, 3 respectively. Xor of these values is equal to 0.",
  "sample_input": "Input:4 2\r\n1 3 3 3\r\n1 1\r\n2 4Output:1\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FRNDZND",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "4 2\r\n1 3 3 3\r\n1 1\r\n2 4",
      "expected_output": "1\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 7\n1 10 5 6\n6 2\n4 9",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1\n6 1 4 2\n10 4\n3 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n5 1 4 1\n8 7\n5 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "99 93\n86 8 94 36\n65 37\n39 93",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 63\n35 47 54 66\n37 9\n61 43",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 67\n63 20 76 69\n89 86\n88 63",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "79 31\n75 72 43 39\n53 93\n25 54",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "77 55\n38 81 72 21\n41 92\n75 17",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "199247 128404\n220834 380222 340332 72366\n294280 379962\n412788 468641",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "347418 189401\n182844 247023 397592 337091\n297359 258914\n364555 194733",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "451940 329486\n345777 220226 206486 140787\n301295 279783\n95856 197848",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "350164 181057\n120282 189170 290957 347043\n406236 236627\n470070 270225",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "448409 138325\n194512 343398 489723 280648\n288745 175454\n368994 370706",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "251491 358447\n422555 283670 164351 281100\n131426 403898\n468205 240217",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "154751 257250\n93957 312927 468653 482092\n485959 168079\n282682 224774",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000\n1000000 1000000\n1000000 1000000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999999 999999\n1 1 1000000 1\n1000000 2\n999999 1000000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 1000000\n1 1 999999 2\n1 999999\n999999 999999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:49"
}