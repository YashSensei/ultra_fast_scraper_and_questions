{
  "problem_code": "problems",
  "title": "Ninja",
  "tags": [],
  "text": "A ninja is practicing and he is very fast he can make two cuts in one second and his master give he a new challenge. The master take a cube, thrown through the air and quickly says four numbers. The ninja has to think fast to make two cuts and get desired values.Given a cube of size N×N×N, he need to cut it into four entire pieces of size A, B, C and D. He needs to divide the cube in these pieces with only two cuts, one vertical and one horizontal.InputThe input consists of multiple test cases.Each test case begins a line containing five integers N (2 ≤ N ≤ 1000000), A, B, C and D (1 ≤ A, B, C, D ≤ 263).The end of input is indicated by a line with five zeros. This is not a part of any test case.OutputFor each test case print \"Possible\" if it is possible to obtain the pieces and print \"Impossible\" if it is not possible to obtain the pieces with two cuts.ExampleInput:2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0Output:Impossible\r\nPossible\r\nPossible",
  "sample_input": "Input:2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0Output:Impossible\r\nPossible\r\nPossible",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VUDBOL5",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "2 5 1 1 1\r\n2 2 2 2 2\r\n3 12 3 6 6\r\n0 0 0 0 0",
      "expected_output": "Impossible\r\nPossible\r\nPossible",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 5 5 3 5\n1 1 5 6 6\n1 9 6 9 6\n10 2 2 9 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 5 10 1 10\n4 6 3 10 2\n8 3 5 1 8\n4 2 6 4 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 3 3 7\n2 7 9 7 6\n6 4 6 6 9\n4 6 9 2 2",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 1 21 6 76\n87 92 63 65 37\n4 10 98 9 71\n59 79 48 91 87",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "58 14 66 10 51\n55 8 57 52 99\n11 26 54 9 48\n95 25 31 6 95",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 64 81 80 8\n40 96 98 97 65\n78 69 33 68 27\n23 31 9 9 4",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 48 36 72 61\n92 26 12 22 92\n44 55 34 68 87\n25 23 4 30 9",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "44 32 47 79 69\n15 61 90 38 32\n20 48 52 74 36\n79 16 53 14 14",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "395395 439762 87667 93123 194188\n489969 254524 450703 346912 309535\n345129 172062 200774 375977 143331\n443752 234162 195672 480241 301071",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "355913 387583 193303 52896 59711\n87139 318773 314674 164503 417635\n138042 285322 176152 161631 156880\n260260 265011 355302 342059 308514",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "318419 101745 271659 163948 426504\n69744 483299 305509 140324 57282\n105581 303831 288886 298684 257415\n148653 336379 111511 356960 236414",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "406160 399808 298141 329037 252739\n251600 470654 127240 498734 161173\n89200 118908 191534 457270 331751\n227318 122568 184365 445059 269971",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "469040 446546 410023 268714 114470\n384392 430472 200284 284322 250986\n253375 185742 379789 104735 233120\n125018 453675 112243 211350 456632",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "291366 359649 150523 63762 111256\n331776 122056 98840 219197 409906\n483583 116547 383415 290818 95313\n387402 373422 193099 349651 356821",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "229490 151749 282292 471027 458570\n80592 413040 252576 234373 136493\n459806 498629 420055 212949 479661\n209992 449106 317856 195028 289065",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999999 1 1 1 1\n1 999999 999999 999999 2\n2 2 1 1000000 1000000\n2 1 1 1000000 999999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000000 999999 1 999999 1000000\n1000000 999999 1000000 999999 1\n1000000 1 1 2 1000000\n2 2 1 1000000 999999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:38"
}