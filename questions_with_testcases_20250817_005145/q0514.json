{
  "problem_code": "problems",
  "title": "Najkraci",
  "tags": [],
  "text": "A road network in a country consists of N cities and M one-way roads. The cities are numbered 1 through N. For each road we know the origin and destination cities, as well as its length.We say that the road F is a continuation of road E if the destination city of road E is the same as the origin city of road F. A path from city A to city B is a sequence of road such that origin of the first road is city A, each other road is a continuation of the one before it, and the destination of the last road is city B. The length of the path is the sum of lengths of all roads in it.A path from A to B is a shortest path if there is no other path from A to B that is shorter in length.Your task is to, for each road, output how many different shortest paths containing that road, modulo 1 000 000 007.InputThe first line contains two integers N and M (1 ≤ N ≤ 1500, 1 ≤ M ≤ 5000), the number of cities and roads.Each of the following M lines contains three positive integers O, D and L. These represent a one-way road from city O to city D of length L. The numbers O and D will be different and L will be at most 10000.OutputOutput M integers, each on its own line – for each road, the number of different shortest paths containing it, modulo 1 000 000 007. The order of these numbers should match the order of roads in the input.ExampleInput:4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8Output:2\r\n3\r\n2\r\n1Input:5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20Output:0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6Note: The test data for this problem consist of the official test cases from the contest, as well some cases of my own.",
  "sample_input": "Input:4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8Output:2\r\n3\r\n2\r\n1",
  "sample_output": "Input:5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20Output:0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6",
  "link": "https://www.spoj.com/problems/NAJKRACI",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "4 4\r\n1 2 5\r\n2 3 5\r\n3 4 5\r\n1 4 8",
      "expected_output": "2\r\n3\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8\r\n1 2 20\r\n1 3 2\r\n2 3 2\r\n4 2 3\r\n4 2 3\r\n3 4 5\r\n4 3 5\r\n5 4 20",
      "expected_output": "0\r\n4\r\n6\r\n6\r\n6\r\n7\r\n2\r\n6",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 2\n4 5 8\n6 3 8\n8 6 8\n10 10 6",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\n9 4 8\n5 10 10\n7 3 8\n5 8 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n6 1 10\n7 5 9\n8 7 1\n7 1 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "20 92\n33 37 90\n61 7 89\n88 10 97\n62 91 65",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "91 87\n28 17 37\n96 27 52\n62 7 56\n62 99 65",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "46 66\n31 85 42\n79 96 36\n41 61 43\n95 61 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "67 69\n6 23 37\n57 18 62\n28 57 51\n28 4 28",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48 15\n57 39 72\n97 88 30\n20 26 90\n90 40 92",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "709 329\n471 689 573\n177 666 584\n745 363 739\n730 254 452",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "676 319\n214 488 252\n312 648 554\n421 339 441\n204 322 103",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "533 553\n81 411 154\n259 343 203\n547 548 515\n110 315 372",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "348 266\n223 124 668\n672 343 241\n443 483 441\n165 664 684",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "734 215\n609 290 338\n146 560 548\n238 150 748\n293 304 604",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "388 104\n553 484 209\n575 100 385\n747 733 536\n539 709 330",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "77 517\n175 242 615\n724 103 350\n606 669 353\n280 639 406",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500\n1500 1500 1500",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1499 1\n1500 1 1499\n1500 1499 1500\n1 2 1\n2 1500 1500",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:35"
}