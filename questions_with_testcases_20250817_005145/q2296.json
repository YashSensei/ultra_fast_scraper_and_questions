{
  "problem_code": "problems",
  "title": "Catapult that ball",
  "tags": [],
  "text": "Bob has unusual problem. In Byteland we can find a lot of hills and cities. King of Byteland ordered Bob to deliver magic balls from one city to another. Unfortunately, Bob has to deliver many magic balls, so walking with them would take too much time for him. Bob came up with great idea - catapulting them.Byteland is divided into intervals. Each interval contains city and hill.Bob can catapult magic ball accurately from city A to city B, if between them there isn't higher hill than A's hill.InputEvery test case contains N and M (N ≤ 50000, M ≤ 50000), number of intervals and number of balls.In next line there's N numbers H (H ≤ 109) separated by one space.In next M lines numbers A and B (1 ≤ A, B ≤ N), number of city from which we want to catapult the ball and number of city to which we want to catapult the ball.OutputWrite one number - number of magic balls that Bob can catapult successfully.ExampleInput:7 3\r\n2 3 5 4 2 1 6\r\n3 5\r\n2 5\r\n4 6Output:2ExplanationBob can catapult balls numbered 1 and 3.",
  "sample_input": "Input:7 3\r\n2 3 5 4 2 1 6\r\n3 5\r\n2 5\r\n4 6Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/THRBL",
  "scraped_at": "2025-08-17 00:33:57",
  "test_cases": [
    {
      "input": "7 3\r\n2 3 5 4 2 1 6\r\n3 5\r\n2 5\r\n4 6",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 5\n10 2 10 2 5 5 6\n6 3\n3 9\n2 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n9 4 3 7 7 9 4\n10 7\n2 4\n3 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 7\n8 3 4 3 9 8 1\n9 4\n7 4\n3 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "98 51\n75 64 86 70 7 32 12\n94 90\n82 51\n25 51",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 37\n18 92 95 55 49 55 63\n92 14\n99 53\n56 67",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 63\n85 14 53 85 77 4 16\n74 17\n69 42\n54 76",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "85 11\n32 18 65 73 30 14 26\n34 96\n9 29\n85 56",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "31 49\n31 7 30 65 55 72 28\n3 73\n86 49\n69 56",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "17146 6695\n24289 6656 22506 12536 17964 12963 6293\n17271 21388\n23593 21857\n12826 16326",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "3006 8866\n18939 6602 11917 22310 8387 3683 23788\n23578 24429\n16623 6920\n6845 24088",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15203 23680\n13134 22308 8179 16282 3047 4353 9714\n15577 10257\n17756 11100\n23839 14938",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2740 6062\n2597 20270 5493 18222 12322 17680 17197\n15712 18802\n19673 5872\n18531 8278",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "22502 14620\n21267 10488 2711 21428 6807 8137 19386\n4990 3223\n3899 12151\n5959 10395",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15565 4232\n12019 11497 18425 17220 3461 22518 14660\n24249 14283\n18089 14130\n5806 20207",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2794 17246\n19612 19355 3792 6975 24798 23479 10494\n17051 16895\n24171 5391\n19178 22904",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000\n50000 50000 50000 50000 50000 50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n50000 50000 50000 50000 50000 50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n49999 50000 1 49999 2 2 50000\n1 2\n2 1\n2 50000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n49999 50000 2 49999 50000 50000 50000\n49999 49999\n2 50000\n49999 49999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:31"
}