{
  "problem_code": "problems",
  "title": "Prime Pesticide",
  "tags": [],
  "text": "NSlovakistan farmers own neighbouring fields alongside a river, forming a straight line. Each field is infested with (possibly zero) pests.Thanks to ingenious Slovakistan science, each species of pest can be assigned a prime number. Each field can then be assigned a positive number, representative of the pests that are infesting it - the prime factorization of this number indicates which pests are present, with the powers of each prime number representing how strongly the field is infested with that pest. The resulting number indicates how much damage is done to the crops on that field.To help the farmers, the government is planning to spray pesticide on some contiguous segment of fields. Due to environmental concerns, the pesticide can only be effective against a single species of pest. However, what segment of fields to spray and with what pesticide has given rise to a huge debate in the parliament - there simply isn't enough data to decide. GivenQproposalsL R p, meaning that pesticide against the pest assigned prime numberpcould be sprayed on fieldsLthroughR, find out how much damage to crops it would prevent.InputThe first line of input contains two integersNandQ(1 ≤ N,Q ≤ 500,000): the number of fields and the number of proposals.The second line containsNnumbersf1, ... , fN-the numbers assigned to the fields. They will be positive and not greater than106.Qlines follow, each containing three numbersL R p(1  ≤ L ≤ R ≤ N, 1 ≤ p≤ 106,pis a prime number), meaning that the government proposes to spray pesticide against pestpon fields [L,R]OutputFor each proposalL R p, output how much crop damage is mitigated; that is, output  (fL+ ... + fR-f'L- ... - f'R), wheref'iisfiafter all factors ofphave been removed from it.ExampleInput:5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2Output:5\r\n128\r\n0\r\n20\r\n65In the fourth proposal, the result is (20 + 30 + 40 - 20 - 10 - 40) = 20.",
  "sample_input": "Input:5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2Output:5\r\n128\r\n0\r\n20\r\n65",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRIMEP",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "5 5\r\n10 20 30 40 50\r\n1 1 2\r\n1 5 5\r\n1 5 47\r\n2 4 3\r\n2 4 2",
      "expected_output": "5\r\n128\r\n0\r\n20\r\n65",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 6\n10 3 7 2 6\n5 7 2\n8 5 7\n8 3 1\n8 10 5\n8 10 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 4\n4 8 3 9 4\n2 7 3\n4 9 5\n1 4 5\n5 8 4\n10 7 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 7\n7 4 5 3 9\n4 1 4\n7 10 3\n1 3 5\n4 8 5\n2 7 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "2 60\n53 56 4 41 67\n34 27 57\n35 93 7\n69 29 11\n89 85 25\n38 65 74",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 100\n31 11 33 81 36\n31 16 35\n90 67 20\n92 41 94\n34 8 16\n23 83 27",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 33\n37 50 71 57 78\n59 61 63\n51 80 85\n13 56 84\n61 21 22\n43 70 1",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "51 93\n86 66 66 40 13\n39 84 96\n78 1 86\n50 1 88\n62 70 25\n41 100 10",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "40 43\n62 64 80 54 93\n38 91 8\n74 87 86\n18 80 26\n96 74 11\n82 91 71",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "391 399\n264 338 146 215 421\n163 121 418\n123 483 54\n430 387 195\n50 496 326\n148 155 396",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "191 311\n309 341 290 336 125\n200 431 174\n222 208 274\n135 231 75\n95 127 404\n97 391 78",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "161 496\n93 140 136 361 479\n314 366 235\n410 398 66\n82 202 169\n383 96 309\n336 244 336",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "82 88\n214 236 175 149 352\n350 157 305\n225 302 424\n108 230 488\n497 272 334\n248 496 174",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "76 67\n103 89 79 206 425\n116 64 184\n377 79 286\n389 60 121\n484 246 483\n209 84 472",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "419 454\n299 191 308 162 241\n182 189 393\n220 440 328\n275 112 206\n230 156 348\n245 227 99",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "371 245\n98 73 432 248 280\n74 435 124\n225 205 245\n394 465 357\n208 135 277\n63 75 383",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999\n1000 1000 1000 2 999\n1 999 999\n1000 999 2\n1 1 2\n1000 1 2\n1 1000 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1\n1000 1 999 999 999\n2 1 1000\n999 1000 2\n1000 1000 2\n2 1000 1000\n1000 999 999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:05"
}