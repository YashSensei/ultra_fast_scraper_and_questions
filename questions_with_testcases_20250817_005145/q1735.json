{
  "problem_code": "problems",
  "title": "Game of stones II",
  "tags": [],
  "text": "[An easier version of this problem was used in the Argentinian Programming Tournament of 2013. You may want to try it before proceeding with this one:http://www.spoj.com/problems/TAP2013J/]Jaimito loves to play with theNidentical stones that he was given for his birthday, piling them to form mountains of various sizes. His happiness would be perfect if her mother, Jimena, did not constantly remind him that at the end of the day comes theTime to Arrange the Piles(TAP). It is then that Jaimito must destroy his mountains of stones, which he had piled up with so much effort.Because Jimena knows how much Jaimito is bothered by the TAP, she suggests to play a game with him in order to make this task more fun. Jaimito and his mother take turns to play, with Jaimito starting because he is the youngest. Initially there are one or more mountains, each one of them composed of a certain number of stones. In his turn each player chooses a mountain with more than one stone and divides it to form two mountains, not necessarily of the same size. The game continues in this way until one of the players cannot make a valid move, at which point this player is declared the looser, the other player being the winner.Jaimito is a very smart kid, and he has realized that he can distribute theNstones to form the mountains in a strategic way, so as to be certain that when they begin to play with these mountains he will undoubtedly win during the TAP. Because of the way the game works, Jaimito will not consider that two initial arrangements of the stones are different if they only change in the order in which the mountains are given. This means that in order for him to consider two initial distributions to be different, these need to have a different number of mountains or, if the number of mountains is the same, then the stones must be distributed in a different way among the mountains. For example, if Jaimito hasN = 4stones, there are five ways in which he can initially distribute them in mountains: four mountains of one stone each; two mountains of one stone each, and another mountain with two stones; one mountain of one stone, and another mountain with three stones; two mountains of two stones each; and, lastly, a single mountain with all four stones.Because Jaimito does not want his mother to realize that he is cheating, he wants to change the initial distribution of theNstones every day. He is convinced that there are many different ways to initially arrange the stones that will guarantee him the victory, but he does not know how many exactly. For example, in the case withN = 4stones Jaimito only has two possible ways to choose from: a single mountain with four stones, or two mountains of one stone each and another mountain with two stones. Your team's task in this problem is to help Jaimito count the number of different ways in which he can distribute hisNstones in mountains in such a way that his victory is certain when playing against Jimena. In this way, Jaimito will rest assured knowing how many days he can win without his mother doubting of his good intentions.InputThe first line contains an integer numberT, the number of test cases (1≤T≤104). Each of the followingTlines contains an integer numberN, representing the number of stones Jaimito has (2 ≤ N ≤ 105).OutputFor each test case print a line containing a single integer number representing the number of different ways in which theNstones can initially be arranged in mountains so as to guarantee that Jaimito will win the game against Jimena. Because the answer can be a very large number, you only have to print the remainder of its division by109+7.ExampleInput:2412345Output:2483042273",
  "sample_input": "Input:2412345Output:2483042273",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GOSTONES",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "2412345",
      "expected_output": "2483042273",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n10\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n7\n7\n10\n6\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n99788870\n78180975\n57495342\n56047867\n95682495\n10782781\n38364358\n56537278\n79878144\n52495702\n80735663",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n47801733\n65175431\n59790460\n32478197\n44339614\n32184883\n27760417\n80736365\n92863643\n96680418\n78219876",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n92021642\n72842505\n93880310\n69062110\n51454884\n75116897\n53550897\n66742783\n3454644\n58102615\n62926050\n56793961",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "8\n57512203\n69807810\n86292712\n22528586\n95800296\n11046604\n52312978\n65914479",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n10176142\n40723716\n7045044\n29381440\n60222243\n7157554\n12484747\n76854954\n28508309\n63136917",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "60\n7445\n48598\n98421\n89424\n28569\n95746\n76866\n95941\n53147\n31374\n91857\n75097\n39009\n43535\n72847\n72034\n54311\n2669\n32844\n72102\n31009\n23521\n64895\n41326\n29369\n59428\n94406\n76203\n59514\n52457\n94185\n77815\n28316\n8278\n3192\n40724\n53066\n95165\n59887\n66234\n87350\n65298\n86948\n28449\n24452\n18784\n32592\n37549\n77338\n10729\n28191\n83727\n44740\n13344\n65181\n82003\n21158\n27451\n84876\n1737",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n32296\n68316\n14960\n65947\n44879\n64397\n370\n88615\n15959\n98807\n1596\n95068\n522\n62830\n46748\n43021\n17691\n77583\n95348\n57586\n42135\n24911\n47250\n47728\n76014\n99731\n74990\n18068\n95945\n29254\n67880\n89686\n78540\n7628\n22658\n26254\n95378\n69365\n54962\n95740\n9526\n18586\n49073\n64020\n74374\n13446\n80378\n19425\n7741\n10613\n12774\n94545\n8289\n40888\n7141\n5758\n35778\n11112\n89496\n47575\n17148\n1418",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "86\n52029\n79748\n17386\n78860\n54427\n25070\n30451\n32886\n76810\n23122\n46539\n55364\n82874\n50988\n56435\n90480\n77530\n74220\n93772\n25076\n90257\n79423\n37514\n76092\n48123\n65273\n93205\n5491\n31248\n37099\n34028\n81976\n89209\n21811\n6198\n89751\n70739\n72426\n71617\n69103\n57224\n32011\n95890\n69393\n45031\n71732\n96598\n97594\n1208\n46883\n15750\n28763\n60705\n90679\n59504\n16246\n56396\n6098\n51465\n3805\n79251\n31608\n67573\n94587\n51858\n12076\n3006\n50840\n89413\n2386\n9574\n32583\n16902\n74626\n67828\n18844\n91445\n16460\n78786\n97154\n56212\n4282\n88839\n70950\n40998\n45794",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "54\n99233\n83683\n54208\n28953\n32389\n71108\n17479\n40858\n77887\n91146\n72640\n22533\n44609\n59908\n55342\n50582\n42036\n85020\n77912\n46479\n75745\n98455\n87963\n96461\n2574\n20629\n41837\n2473\n67884\n39795\n31557\n84804\n544\n42754\n33182\n32916\n31727\n68989\n37056\n63619\n12196\n91710\n75315\n22293\n86643\n74310\n56564\n25931\n48240\n12053\n24872\n48708\n58273\n484",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n7686\n31553\n17358\n49423\n47076\n45402\n60002\n17672\n61704\n90226\n33559\n89155\n53850\n27150\n30406\n3168\n32992\n78505\n1418\n80175\n76874\n75122\n85436\n65168\n72041\n11241\n49709\n48206\n47393\n36347\n88650\n68652\n91820\n67998\n45881\n78657\n42814\n87280\n67158\n53275\n91385\n74955\n79661\n33256\n61550\n95178\n23916\n3616\n78598\n84398\n3431\n5757\n65933\n28399\n82208\n96556\n38712\n77279\n58938\n50856\n73752\n25179\n51888\n74404\n23124\n73874\n24537\n55008\n96737\n91487\n36533\n44084\n29232\n49508\n84174\n51810\n25825\n17187\n9716\n73095\n41558\n2631\n40442\n32338\n28900\n87869\n7439\n14219\n34940\n15801\n76543\n18171\n86644\n41229\n89598\n40736\n7825\n81310\n75705\n40209\n85994\n99382\n77678\n71567\n84679",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "48\n93594\n13833\n86933\n79949\n55529\n62907\n173\n8610\n45919\n26446\n52779\n13753\n8644\n65999\n89725\n84374\n53255\n66219\n77908\n21555\n37209\n51244\n92563\n90150\n44633\n76488\n43865\n75848\n62615\n86389\n13543\n89166\n98327\n13336\n94938\n41771\n23702\n5411\n65220\n59833\n81420\n46253\n14303\n88685\n52047\n12268\n33553\n80778",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "51\n13235\n80663\n45808\n4231\n81022\n88821\n59342\n72565\n63856\n59894\n39677\n96267\n55553\n60010\n7030\n60100\n59617\n88362\n11242\n5894\n89916\n60615\n59522\n92281\n69416\n44182\n57820\n30788\n54816\n61739\n42353\n54734\n74538\n59280\n26111\n65136\n7723\n37626\n84529\n43198\n71647\n76077\n67465\n25897\n488\n87034\n48106\n15564\n24185\n19929\n60498",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n23388052\n58410849\n35055191\n4349635\n55242670\n23437926\n29185909\n2410586\n77538382\n20866502\n26951673\n62255770\n5761062\n90014976\n30478289\n5762939\n77902865\n67811702\n59539883\n51753346\n69474837\n81393635\n61035316\n53520975\n63190665\n41445510\n51549577\n13152866\n90994906\n33958601\n17941638\n46958394\n83571529\n11224492\n86137336\n70234155\n3919951\n73152103\n8620715\n74476656\n13673142\n41867666\n22245312\n99084032\n55893804\n97332589\n50505551\n71797267\n24079093\n86873403\n3617326\n47137487\n3077575\n81165789\n3677890\n64027467\n92899437\n29328916\n68264907\n3538176\n39603192\n14401322\n61792196\n90995021\n4441223\n18454836\n75617162\n43933587\n21951875\n63664585\n37743579\n68264772\n46122666\n37325089\n19188115\n63107602\n71616414\n16119193\n52014089\n39949481\n82780014\n13997734\n84153541\n11533683\n28713658\n35658731\n49022054\n91663517\n79814321\n7980878\n90744641\n90414983\n90991492\n63672541\n39747084\n10418702\n54014326\n22104463\n69579787\n88226266\n19453914\n78533917\n94302318\n41862838\n39552432",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n15259162\n90901752\n52826117\n40333718\n80389564\n30193025\n82475166\n34533421\n65681296\n93483056\n77018157\n57121377\n21346839\n44696094\n66253927\n71965288\n26520276\n51663475\n24612081\n40481409\n94532703\n38638736\n5298638\n7710973\n93314217\n3852226\n94254856\n90244674\n12842954\n84144026\n77689755\n52667597\n15995405\n99494534\n69965227\n19822986\n30972283\n83414367\n38520323\n1599566\n28180229\n35929492\n40823899\n12251691\n57943581\n23630514\n18286800\n75319804\n81675751\n9366641\n34818200\n42660403\n18293652\n2895682\n84234384\n64727423\n5287153\n68806436\n24336122\n59838241\n61986865\n71711280\n98620431\n21388013\n30530478\n65056572\n43425620\n7144622\n12419618\n59898646\n47524344\n35010200\n95703014\n28934429\n51126474\n98510313\n64558872\n10714240\n46856647\n18152688\n2200283\n52229233\n94099317\n98539916\n53399475\n33053808\n19413409\n95227852\n17468298\n14381708\n68809548\n63507591\n20884047\n71164500\n7230655\n15169507\n79304488\n26238963\n26900020\n97523399\n24306572\n44620626\n28777046\n74172146\n98820337",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n100000000\n100000000\n92794289\n1\n91738897\n1\n100000000\n100000000\n1\n51514805\n100000000\n46729350\n100000000\n100000000\n1\n1\n100000000\n1\n1\n1\n1\n1\n100000000\n84419970\n100000000\n100000000\n100000000\n8704256\n1\n1\n27739709\n100000000\n91406752\n1\n1\n1\n1\n100000000\n73298718\n82341205\n82188089\n100000000\n100000000\n60722253\n1\n100000000\n72539847\n100000000\n54412648\n1\n1\n1\n100000000\n1\n100000000\n69476680\n24015942\n1\n1\n100000000\n1\n1\n1\n1\n1\n39108299\n29296295\n100000000\n46772100\n1\n100000000\n100000000\n58165044\n1\n56609564\n100000000\n55296578\n76470669\n1\n100000000\n1\n100000000\n36658641\n100000000\n18421475\n4202974\n90010978\n100000000\n100000000\n100000000\n100000000\n646863\n86717385\n1\n12458082\n36597164\n1\n55630728\n1\n1\n1\n100000000\n1\n86624740\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 105)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}