{
  "problem_code": "problems",
  "title": "Range Sum",
  "tags": [],
  "text": "You are initially given an array of N integers (1 ≤ N ≤ 105). Given this array, you have to perform 2 kinds of operations:(i) Operation 1 : Op1(l, r)You are given 2 integers l and r. (1 ≤ l ≤ r ≤ current size of the array). You need to return the sum of all the elements with indices between l and r (both inclusive). That is, if the elements currently in the array are a1, a2, a3.... an, you need to return the following sum : al+ al+1+ al+2... + ar.(ii) Operation 2 : Op2(x)You are given a single integer x (|x| ≤ 109). Add this element to thebeginningof the array. After this operation, x will now become a1, the old a1will now become a2, and so on. The size of the array will increase by 1.InputThe first line contains a single integer N (1 ≤ N ≤ 105), the number of elements initially in the array.This is followed by a line containing N space separated integers, a1a2... aN. (|ai| ≤ 109)The next line contains a single integer Q, the number of operations you will be asked to perform. (1 ≤ Q ≤ 105)Q lines of input follow. Each such line starts with either the number 1 or the number 2. This indicates the type of operation that you are required to perform. The format of these queries are as follows:1 l r : Carry out operation 1 with arguments l and r. (1 ≤ l ≤ r ≤ current size of the array)That is, return the sum of the following array elements : al+ al+1... + ar2 x : Carry out operation 2 with the argument x. (|x| ≤ 109)That is, add the value x at the beginning of the array.OutputFor each query of type 1, output the return value on a new line. No output needs to be printed for queries of type 2.ExampleInput #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
  "sample_input": "Input #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027",
  "sample_output": "Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
  "link": "https://www.spoj.com/problems/RANGESUM",
  "scraped_at": "2025-08-17 00:33:49",
  "test_cases": [
    {
      "input": "Input #1:101 2 3 4 5 6 7 8 9 1041 1 101 1 11 10 101 2 7Output #1:5511027",
      "expected_output": "Input #2:56 7 8 9 1092 52 41 2 72 32 22 11 1 101 1 11 10 10Output #2:4555110",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 3 9 8 9 6 7 6 1 8 6 3 4 2 10 8 10 1 1 6 3\nwsy fduzj 4 3 9 6 3 9 4 3 7 6 6 8 1 9 2 9 ur kmlkqeqd",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 4 8 7 8 9 2 6 10 7 3 2 7 3 8 2 10 2 7 9 3\nn rhfysh 1 4 1 2 3 6 9 4 1 4 3 1 3 10 7 7 gisl iajdqif",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5 5 2 1 6 3 3 6 4 10 9 10 2 7 4 9 6 4 3 8\nn ei 4 2 4 1 5 5 4 5 4 10 8 1 4 5 10 1 txxt qn",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 56 82 50 44 28 26 71 13 74 96 70 38 8 36 48 52 88 84 80 81\nqq j 29 34 51 63 91 94 81 48 60 63 61 70 73 9 82 29 pjwxcy vlw",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 76 39 91 93 53 51 97 63 4 59 8 42 96 53 45 99 84 40 46 46\nmgl vzvr 16 6 11 28 38 49 84 65 64 10 86 39 100 43 32 42 xed ffplvkkzhl",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "42 85 80 27 18 45 51 10 56 61 7 38 72 39 3 14 59 55 72 97 80\nw bej 50 78 18 23 3 22 14 74 15 45 65 35 90 67 94 63 wkqpku m",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "60 27 27 52 92 92 20 96 76 62 74 90 79 97 83 65 67 51 39 82 94\nng h 19 65 5 91 93 2 3 73 11 4 4 10 48 65 29 100 pdxij yo",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "75 49 43 27 5 40 29 55 86 43 100 96 38 41 98 58 60 38 3 84 48\nvbw fk 50 48 68 72 50 56 84 13 74 43 100 88 63 84 80 13 h nbjquxl",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "23 7 13 51 25 31 36 5 43 50 31 27 25 39 13 46 11 16 24 8 31\ndvfb fwnd 20 19 28 36 15 31 15 48 33 12 19 31 28 42 15 13 nhfvy zwpls",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "23 27 45 26 21 44 20 10 44 43 34 24 45 12 36 51 13 34 29 42 9\ncaru p 40 41 5 44 35 33 18 43 29 9 37 22 13 36 45 20 lkt heiyreqbv",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "13 26 23 30 44 31 50 32 16 15 8 20 47 10 50 44 29 20 46 47 51\nrop q 36 20 27 8 30 48 49 52 5 8 9 52 38 48 20 12 mgn keha",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 45 28 26 20 9 44 51 36 24 47 50 30 40 12 15 17 23 48 6 30\nyxhtr r 23 27 12 6 8 10 50 10 24 40 26 39 50 30 14 11 poin bvzvgbdlew",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "35 31 16 5 27 26 48 25 49 25 8 9 18 42 30 7 48 41 40 42 42\niyca hdwhtg 6 46 34 9 52 18 48 22 37 42 17 18 30 51 28 7 gu e",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14 26 51 48 17 43 39 50 28 31 6 24 17 38 28 11 17 43 34 26 37\nejcyu zk 40 52 23 33 24 42 26 19 47 12 16 7 43 48 12 30 njyytto n",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "5 18 51 24 33 20 23 17 29 47 36 8 22 18 47 52 10 26 16 12 38\nyaxwh unjlhr 44 26 16 15 33 37 13 21 49 22 32 12 16 8 8 42 hozmmw ximdxbyfl",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\nrofru lqk 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 egos vxfuvadqn",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105\nxufb txyy 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 u rqaiu",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 105 105 105 105 105 104 105 105 2 104 104 2 105 2 104 2 105 2 104 105\ngn sfj 2 1 105 1 1 104 2 105 105 105 1 104 104 105 2 1 eqcjxf gkkfksca",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105 1 105 105 2 104 105 104 105 1 2 104 105 2 104 104 1 2 105 104\ndx ohcxpw 2 105 105 2 1 1 1 104 104 2 2 104 2 2 1 2 bbcsrt ckeui",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}