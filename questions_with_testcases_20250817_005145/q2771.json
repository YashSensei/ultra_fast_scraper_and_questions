{
  "problem_code": "problems",
  "title": "Recursive Sequence (Version III)",
  "tags": [],
  "text": "Sequence(ai)of natural numbers is defined as follows:ai= biifi ≤ kai= c1ai-1+ c2ai-2+ ... +  ckai-kifi > kwherebjandcjare given natural numbers for1≤ j≤k. Your task is to computea2m+a2m+1+a2m+2+ ... +a2nfor givenm≤nand output it modulo a given positive integerp(not necessarily prime).InputOn the first row there is the numberTof test cases (T≤50).Each following test case contains four lines:k- number of elements of(c)and(b)(1≤k≤15)b1... bk-knatural numbers where0≤bj≤109separated by spacesc1... ck-knatural numbers where0≤cj≤109separated by spacesm,n,p- natural numbers separated by spaces (1≤m≤n≤1018,1≤p≤108)OutputExactlyTlines, one for each test case:  (a2m+a2m+1+a2m+2+ ... +a2n) modulop.ExampleInput:232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991Output:24878332397016NoteYou can try the problemSPPfirst.",
  "sample_input": "Input:232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991Output:24878332397016",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SPP3",
  "scraped_at": "2025-08-17 00:33:58",
  "test_cases": [
    {
      "input": "232 3 51 2 310 15 100000015401 131 940 406 673 592 532 452 733 966 602 600 61 212 25713 12 81 75 37 12 10 35 25 75 16 90 27 33 472 85704376 99999991",
      "expected_output": "24878332397016",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 2 7 7 8 1 1 2 10 5 1 6 9 7 10 1 10 7 9 1 2 8 4 6 9 4 6 2 3 3 3 2 1 4 3 10 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 10 8 3 3 4 3 8 5 9 8 5 9 6 5 2 3 6 3 3 3 9 10 5 1 10 1 9 6 9 4 4 1 9 6 10 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 1 4 4 3 2 1 3 6 7 2 8 10 2 4 8 4 9 8 1 4 7 3 10 7 1 2 1 2 6 1 2 7 9 3 7 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "40 19 48 92 55 96 100 30 36 87 14 6 98 76 75 79 24 48 75 99 52 2 25 60 52 62 13 24 19 79 58 72 3 22 31 24 26",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "30 19 60 59 65 75 38 43 77 85 23 72 95 99 73 77 62 92 42 95 74 50 22 41 20 78 14 6 27 9 4 73 18 75 20 91 41",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "40 62 95 51 92 15 27 82 23 9 44 44 43 19 62 36 68 2 8 36 18 85 86 87 56 98 65 68 99 50 61 6 8 53 38 66 6",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "53 95 18 1 44 28 46 99 79 15 41 35 50 57 34 93 48 73 41 21 44 88 49 96 64 79 57 82 56 10 51 54 88 38 37 14 15",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "81 69 21 7 39 73 64 33 43 90 7 61 96 62 36 26 18 66 86 51 3 59 72 47 81 4 14 94 73 65 79 32 86 77 70 77 76",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "349 201 369 137 299 258 144 312 507 52 269 150 324 58 339 298 289 357 215 446 208 130 265 103 251 106 250 487 212 308 496 265 164 314 507 387 51",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "380 461 415 227 52 493 443 460 346 322 299 178 322 65 189 214 356 172 75 421 191 304 142 504 62 407 365 370 459 463 178 274 257 311 172 360 273",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "394 463 271 278 483 356 205 493 160 191 326 231 374 388 58 132 299 412 138 86 376 348 209 350 410 50 200 202 148 281 207 461 505 190 289 411 236",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "331 453 59 454 471 318 248 358 330 366 251 82 147 289 412 405 193 227 244 508 418 269 451 312 383 468 113 231 263 389 199 341 443 251 383 96 174",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "127 299 344 274 71 101 285 293 137 317 366 318 275 58 60 302 399 374 505 408 222 231 203 221 131 289 221 211 240 448 248 133 393 147 446 191 416",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "192 345 452 121 83 455 430 337 401 442 367 317 113 348 418 320 205 463 443 128 138 240 229 324 237 90 142 169 157 156 86 313 175 161 368 269 129",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "251 53 88 235 456 504 348 251 83 64 143 132 446 121 252 470 119 64 273 413 104 125 198 218 428 199 450 303 407 99 57 140 301 252 361 404 485",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018 1018",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1017 1 1017 1 2 1017 1018 2 1018 2 1017 1018 1018 1 1 1017 1017 1017 1 1017 1017 1017 1 1018 1018 1017 1 2 2 1017 1 1 1017 2 1018 1017 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1018 1017 1017 1018 1017 1017 2 1 1 1017 1017 1 1 1018 2 1 1018 1018 2 1 1018 1018 1 1 1018 1 1018 1017 1 1018 1017 2 1 1 1018 1018 1018",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:46"
}