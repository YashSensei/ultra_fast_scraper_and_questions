{
  "problem_code": "problems",
  "title": "The GbAaY Kingdom",
  "tags": [],
  "text": "Jiajia is the king of the GbAaY Kingdom. He always squeezes his 20 ministers as coolies.\r\n    There arencities andmtwo-way roads connecting cities in the kingdom.\r\n    Because of the increasing cost of fuel, he wants to simplify the road system\r\n    in the GbAaY Kingdom.\r\n    Thus, some roads will be removed. But he requests the ministers to guarantee\r\n    that there is always a path between any two cities.\r\n    GbAaY Minister Loner suggests Jiajia for the convenience of the traffic management,\r\n    the farthest distance between cities should be minimal. Unhesitatingly, Jiajia agrees this resolution.\r\n    As the GbAaY Kingdom's minister (cooly), you must work hard for Jiajia to make the simplification plan.InputThe first line contains two integersn,m(1 ≤n≤ 200,n- 1 ≤m≤ 20000).\r\n    Each line of the followingmlines contains three integersu,v,w(u≠v, 0 ≤w≤ 105).\r\n    They denote there is a road with lengthwbetween cityuand cityv.OutputThe first line contains one integer which is the farthest distance between cities after the simplification.\r\n    Each line of the follown- 1 contains two integersu,v(u<v).\r\n    They denote there is a road between cityuand cityvin the simplification plan.\r\n    If there are many optimal solutions, any of them will be accepted.ExampleInput:3 3\r\n1 2 1\r\n2 3 1\r\n1 3 1Output:2\r\n1 2\r\n1 3",
  "sample_input": "Input:3 3\r\n1 2 1\r\n2 3 1\r\n1 3 1Output:2\r\n1 2\r\n1 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PT07C",
  "scraped_at": "2025-08-17 00:33:38",
  "test_cases": [
    {
      "input": "3 3\r\n1 2 1\r\n2 3 1\r\n1 3 1",
      "expected_output": "2\r\n1 2\r\n1 3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 3\n3 10 8\n5 10 1\n7 1 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\n9 10 9\n3 5 5\n6 10 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 1\n9 3 7\n6 7 4\n7 5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 72\n74 44 6\n20 49 38\n13 73 72",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "39 57\n93 93 68\n45 90 58\n11 55 14",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 37\n2 100 62\n20 93 20\n17 51 65",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "80 50\n93 77 31\n23 72 5\n19 83 75",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "69 90\n52 29 3\n27 50 97\n99 39 5",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "40 70\n83 73 72\n70 88 75\n80 49 88",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "65 32\n87 87 77\n21 96 97\n88 32 57",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "50 15\n43 21 74\n33 78 81\n78 40 17",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "28 14\n88 43 46\n92 19 31\n87 27 25",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "73 90\n94 64 11\n88 55 93\n54 20 69",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "41 46\n56 19 42\n88 83 28\n57 89 17",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "31 84\n79 54 40\n67 11 56\n14 44 66",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200 200\n200 200 200\n200 200 200\n200 200 200",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200 200\n200 200 200\n200 200 200\n200 200 200",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n200 200 2\n199 200 200\n199 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "200 2\n200 199 199\n1 200 1\n2 2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}