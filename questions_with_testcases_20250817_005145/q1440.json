{
  "problem_code": "problems",
  "title": "NERED",
  "tags": [],
  "text": "EnglishVietnameseIn the nearby kindergarten they recently made up an attractive game  of strength and agility that kids love. The surface for the game is a large flat area divided into N×N squares. The children lay large spongy cues onto the surface. The sides of the cubes are the same length as the sides of the squares. When a cube is put on  the surface, its sides are aligned with some square. A cube may be put  on another cube too. Kids enjoy building forts and hiding them, but they  always leave behind a huge mess. Because of this, prior to closing the  kindergarten, the teachers rearrange all the cubes so that they occupy  a rectangle on the surface, with exactly one cube on every square in the rectangle. In one moving, a cube is taken off the top of a square to the top of any other square.Write a program that, given the state of the surface, calculates the  smallest number of moves needed to arrange all cubes into a rectangle.InputThe first line contains the integers N and M (1 ≤ N ≤ 100, 1 ≤ M ≤ N2),  the dimensions of the surface and the number of cubes currently on the  surface.Each of the following M lines contains two integers R and C (1 ≤ R, C ≤ N), the coordinates of the square that contains the cube.OutputOutput the smallest number of moves. A solution will always exist.SampleInput:4 3\r\n2 2\r\n4 4\r\n1 1Output:2Input:5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3Output:3In the second example, a cube is moved from (2, 3) to (3, 3), from (4, 2)\r\nto (2, 5) and from (4, 4) to (3, 5).",
  "sample_input": "Input:4 3\r\n2 2\r\n4 4\r\n1 1Output:2",
  "sample_output": "Input:5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3Output:3",
  "link": "https://www.spoj.com/problems/MNERED",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "4 3\r\n2 2\r\n4 4\r\n1 1",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 8\r\n2 2\r\n3 2\r\n4 2\r\n2 4\r\n3 4\r\n4 4\r\n2 3\r\n2 3",
      "expected_output": "3",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "7 4\n9 8\n8 2\n6 8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n4 3\n1 10\n9 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n8 10\n9 10\n7 7",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "63 31\n71 72\n45 38\n5 29",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 5\n79 31\n76 6\n47 92",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 2\n32 61\n46 80\n51 12",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "66 47\n10 26\n49 72\n65 99",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "88 53\n66 7\n95 96\n88 77",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "35 33\n31 15\n19 25\n21 24",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "10 14\n27 14\n17 44\n37 15",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "17 8\n41 27\n14 23\n27 33",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "33 23\n37 50\n42 14\n27 17",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "20 30\n22 40\n5 20\n36 35",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "26 34\n31 38\n29 11\n27 34",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "34 15\n33 16\n34 6\n24 15",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 99\n2 100\n99 1\n100 100",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}