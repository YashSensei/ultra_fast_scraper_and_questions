{
  "problem_code": "problems",
  "title": "Variable Radix Huffman Encoding",
  "tags": [],
  "text": "Huffman encoding is a method of developing an optimal encoding of the symbols\r\nin asource alphabetusing symbols from atarget alphabetwhen the frequencies\r\nof each of the symbols in the source alphabet are known. Optimal means the\r\naverage length of an encoded message will be minimized. In this problem you\r\nare to determine an encoding of the firstNuppercase letters (the source\r\nalphabet,S1throughSN, with frequenciesf1throughfN) into the\r\nfirstRdecimal digits (the target alphabet,T1throughTR).Consider determining the encoding whenR= 2. Encoding proceeds in several\r\npasses. In each pass the two source symbols with the lowest frequencies, sayS1andS2, are grouped to form a new \"combination letter\" whose frequency is\r\nthe sum off1andf2. If there is a tie for the lowest or second lowest\r\nfrequency, the letter occurring earlier in the alphabet is selected. After\r\nsome number of passes only two letters remain to be combined. The letters\r\ncombined in each pass are assigned one of the symbols from the target\r\nalphabet.The letter with the lower frequency is assigned the code 0, and the\r\nother letter is assigned the code 1. (If each letter in a combined group has\r\nthe same frequency, then 0 is assigned to the one earliest in the alphabet.\r\nFor the purpose of comparisons, the value of a \"combination letter\" is the\r\nvalue of the earliest letter in the combination.) The final code sequence for\r\na source symbol is formed by concatenating the target alphabet symbols\r\nassigned as each combination letter using the source symbol is formed.The target symbols are concatenated in the reverse order that they are assigned so\r\nthat the first symbol in the final code sequence is the last target symbol\r\nassigned to a combination letter.The two illustrations below demonstrate the process forR= 2.SymbolFrequencyA5B7C8D15Pass 1: A and B groupedPass 2: {A, B} and C groupedPass 3: {A, B, C} and D groupedResulting codes: A=110, B=111, C=10, D=0Average length = (3*5 + 3*7 + 2*8 + 1*15) / 35 = 1.91SymbolFrequencyA7B7C7D7Pass 1: A and B groupedPass 2: C and D groupedPass 3: {A, B} and {C, D} groupedResulting codes: A=00, B=01, C=10, D=11Average length = (2*7 + 2*7 + 2*7 + 2*7) / 28 = 2.00WhenRis larger than 2,Rsymbols are grouped in each pass. Since each pass\r\neffectively replacesRletters or combination letters by 1 combination letter,\r\nand the last pass must combineRletters or combination letters, the source\r\nalphabet must containk*(R-1)+Rletters, for some integerk.SinceNmay not be this large, an appropriate number of fictitious letters with zero\r\nfrequencies must be included. These fictitious letters are not to be included\r\nin the output. In making comparisons, the fictitious letters are later than\r\nany of the letters in the alphabet.Now the basic process of determining the Huffman encoding is the same as for\r\ntheR= 2 case. In each pass, theRletters with the lowest frequencies are\r\ngrouped, forming a new combination letter with a frequency equal to the sum of\r\nthe letters included in the group. The letters that were grouped are assigned\r\nthe target alphabet symbols 0 throughR-1. 0 is assigned to the letter in the\r\ncombination with the lowest frequency, 1 to the next lowest frequency, and so\r\nforth. If several of the letters in the group have the same frequency, the one\r\nearliest in the alphabet is assigned the smaller target symbol, and so forth.The illustration below demonstrates the process forR= 3.SymbolFrequencyA5B7C8D15Pass 1: ? (ficticious symbol), A and B are groupedPass 2: {?, A, B}, C and D are groupedResulting codes: A=11, B=12, C=0, D=2Average length = (2*5 + 2*7 + 1*8 + 1*15) / 35 = 1.34InputThe input will contain one or more data sets, one per line. Each data set\r\nconsists of an integer value forR(between 2 and 10), an integer value forN(between 2 and 26), and the integer frequenciesf1throughfN, each of which\r\nis between 1 and 999.The end of data for the entire input is the number 0 forR; it is not considered to be a separate data set.OutputFor each data set, display its number (numbering is sequential starting with\r\n1) and the average target symbol length (rounded to two decimal places) on one\r\nline. Then display theNletters of the source alphabet and the corresponding\r\nHuffman codes, one letter and code per line.Print a blank line after each test case.The examples below illustrate the required output format.ExampleInput:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_input": "Input:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VHUFFM",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0",
      "expected_output": "Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 7 9 8 4 2\n8 8 10 6 1 1 9\n3 7 7 6 8 2 2 4 5\n9 3 10 2 5 2 3 3\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 1 2 3 3 8 2\n1 5 3 5 10 6 3\n5 3 9 7 3 10 10 6 9\n10 2 5 5 7 10 10 3\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6 3 9 5 1 10\n5 1 5 5 1 8 3\n1 5 7 10 8 9 2 4 3\n10 9 6 6 1 2 6 8\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "88 86 1 76 66 5 57\n98 23 59 99 100 89 56\n34 45 20 92 19 97 73 76 7\n87 26 41 54 50 16 15 80\n54",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "74 36 14 33 75 37 1\n71 79 12 63 59 22 3\n48 23 89 36 26 35 62 99 78\n53 27 50 90 78 93 68 53\n43",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "87 6 97 9 30 56 21\n21 54 71 53 75 52 2\n89 78 62 27 57 12 27 31 28\n65 97 64 66 20 71 58 4\n30",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "59 10 83 89 45 82 93\n58 36 20 29 33 51 83\n36 27 100 90 19 95 66 84 43\n17 73 81 75 92 50 68 35\n12",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "87 23 76 1 76 6 97\n38 77 5 74 65 89 85\n86 32 61 25 49 33 100 93 66\n56 83 60 70 46 3 89 87\n32",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "76 152 344 406 341 341 434\n464 143 165 446 486 432 381\n340 145 342 202 123 244 229 410 54\n168 255 358 433 112 56 152 203\n236",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "187 79 467 102 478 196 247\n427 180 230 241 95 220 68\n175 152 288 124 478 342 440 450 260\n403 205 136 411 331 383 316 87\n154",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "397 156 138 160 59 471 107\n398 314 222 64 270 101 119\n487 201 331 68 255 472 342 241 349\n201 108 468 461 441 164 267 188\n171",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "385 448 397 214 349 173 328\n462 300 143 476 162 323 317\n213 228 289 374 477 320 251 173 253\n146 168 83 400 195 430 273 70\n478",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "422 394 451 309 244 450 368\n393 419 296 199 227 79 53\n333 90 79 71 296 292 379 56 287\n262 170 461 135 95 254 391 165\n234",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "232 266 335 70 290 389 494\n492 107 466 144 490 287 218\n446 220 486 365 255 105 212 75 82\n134 128 421 469 337 236 77 488\n273",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "156 492 334 468 107 445 294\n183 127 440 177 72 476 371\n367 485 345 315 437 405 260 261 65\n73 72 92 351 468 379 384 367\n204",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999 999 999 2 1000 999\n999 1 1 1 2 1000 2\n2 2 2 1 2 1000 1 2 1\n999 2 2 2 2 999 999 1\n999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000 1000 1 999 999 1000\n2 1 1 1 1000 1 1000\n2 1000 2 1000 1000 1 1000 1000 2\n1 1 1000 1 999 1 999 1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}