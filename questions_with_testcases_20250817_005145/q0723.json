{
  "problem_code": "problems",
  "title": "Ball Stacking Again",
  "tags": [],
  "text": "The XYZ TV channel is developing again a new game show, where a contestant has to make a choice in order to get a prize. The game consists of a triangular stack of balls, each of them having an integer value, as the example shows.The contestant must choose exactly one ball and his prize is the sum of the value of that ball and the balls directly on top of it. Notice that the prize can be negative!Your friend is going to participate on the game show, and he wants you to develop a program that can tell the maximum prize possible.InputEach test case is described using several lines. The first line contains an integer N representing the number of rows of the stack (0 < N < 1001). The i-th of the next N lines contains i integers Bij (-1000 ≤ Bij ≤ 1000 for 1 ≤ j ≤ i ≤ N); the number Bij is the value of the j-th ball in the i-th row of the stack (the first row is the topmost one, and within each row the first ball if the leftmost one). After each test case there is a blank line.The last test case is followed by a line containing one zero.OutputFor each test case output a line with an integer representing the maximum prize a contestant can make from the stack.ExampleInput:2-21 -1031-5 36 -4 10Output:-15Note:On the first test case, the optimal solution is to take the ball with value 1, making you remove the ball with value -2, resulting in -1.On the second test case the best option is to take the ball with value 1 on the bottom row, resulting in 1+3+1 = 5.",
  "sample_input": "Input:2-21 -1031-5 36 -4 10Output:-15",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BALLSAG",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "2-21 -1031-5 36 -4 10",
      "expected_output": "-15",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2 6 8 3 10 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 8 1 10 1 5 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 3 7 9 3 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "50 74 85 51 98 1 17",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "1 56 11 43 87 28 75",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "69 41 2 46 24 87 15",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "75 70 45 71 24 28 54",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 61 37 35 72 73 44",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "479 113 325 66 305 441 378",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "349 401 143 200 431 390 66",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "397 67 126 381 256 345 165",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "111 402 291 236 417 312 232",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "277 70 300 420 145 462 152",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "89 344 429 381 413 458 194",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "156 312 114 227 342 223 413",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1001 1001 1001 1001 1001 1001 1001",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1001 1001 1001 1001 1001 1001 1001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000 1000 1001 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 1 2 1001 2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}