{
  "problem_code": "problems",
  "title": "Boundary 2003",
  "tags": [],
  "text": "Farmer Don watches the fence that surrounds his N meter by N meter square, flat field (2 ≤ N ≤ 500,000). One fence corner is at the origin (0, 0) and the opposite corner is at (N,N); the sides of Farmer Don's fence are parallel to the X and Y axes. Fence posts appear at all four corners and also at every meter along each side of the fence, for a total of 4×N fence posts. The fence posts are vertical and are considered to have no radius. Farmer Don wants to determine how many of his fence posts he can watch when he stands at a given location within his fence. Farmer Don’s field contains R (1 ≤ R ≤ 30,000) huge rocks that obscure his view of some fence posts, as he is not tall enough to look over any of these rocks. The base of each rock is a convex polygon with nonzero area whose vertices are at integer coordinates. The rocks stand completely vertical. Rocks do not overlap, do not touch other rocks, and do not touch Farmer Don or the fence. Farmer Don does not touch the fence, does not stand within a rock, and does not stand on a rock. Given the size of Farmer Don's fence, the locations and shapes of the rocks within it, and the location where Farmer Don stands, compute the number of fence posts that Farmer Don can see. If a vertex of a rock lines up perfectly with a fence post from Farmer Don's location, he is not able to see that fence post.InputThe first line of input contains two space-separated integers: N and R. The next line of input contains two space-separated integers that specify the X and Y coordinates of Farmer Don's location inside the fence. The rest of the input file describes the R rocks: Rock i’s description starts with a line containing a single integer pi (3 ≤ pi ≤ 20), the number of vertices in the rock's base. Each of the next pi lines contains a space-separated pair of integers that are the X and Y coordinates of a vertex. The vertices of a rock’s base are distinct and given in counterclockwise order.OutputThe output file should contain a single line with a single integer, the number of fence posts visible to Farmer Don.ExampleInput:100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60Output:319",
  "sample_input": "Input:100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60Output:319",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IOIBOUND",
  "scraped_at": "2025-08-17 00:33:13",
  "test_cases": [
    {
      "input": "100 1\r\n60 50\r\n5\r\n70 40\r\n75 40\r\n80 40\r\n80 50\r\n70 60",
      "expected_output": "319",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8\n3 9\n4\n6 8\n6 6\n2 8\n9 7\n10 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n10 2\n10\n10 1\n2 10\n7 4\n1 10\n9 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 1\n4 7\n5\n6 7\n7 7\n8 3\n4 2\n7 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "29 15\n75 61\n32\n44 58\n93 99\n27 29\n62 54\n21 37",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "90 74\n41 17\n33\n48 19\n78 62\n80 51\n89 98\n91 15",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "93 4\n7 16\n26\n78 17\n5 74\n75 42\n8 73\n55 76",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 36\n53 3\n60\n15 77\n34 78\n93 91\n32 32\n55 69",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 27\n28 42\n99\n10 12\n54 30\n76 59\n83 11\n57 24",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "248 28\n249 31\n151\n186 203\n100 156\n197 135\n37 63\n248 243",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "59 167\n82 174\n25\n188 54\n226 37\n140 31\n32 176\n217 117",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "35 84\n80 53\n166\n154 160\n93 53\n226 182\n53 195\n68 48",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "63 91\n177 42\n36\n73 150\n247 188\n146 106\n98 178\n192 57",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "141 145\n71 91\n150\n136 163\n93 154\n116 114\n72 206\n43 113",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "115 194\n245 214\n180\n28 189\n78 224\n25 25\n183 205\n98 39",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "38 118\n160 67\n89\n83 94\n45 226\n38 130\n181 191\n65 181",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "500 500\n500 500\n500\n500 500\n500 500\n500 500\n500 500\n500 500",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "500 500\n500 500\n500\n500 500\n500 500\n500 500\n500 500\n500 500",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "500 2\n500 500\n499\n2 500\n499 2\n1 499\n500 2\n500 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "499 2\n500 2\n2\n1 499\n1 499\n1 499\n1 499\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}