{
  "problem_code": "problems",
  "title": "Roads Repair",
  "tags": [],
  "text": "EnglishVietnameseThe traffic network in a country consists of N cities (labeled with integers 1 to N) and N-1 roads connecting the cities. There is a unique path between each pair of different cities.Because of the many years of lazy maintenance the roads are pretty damaged and for each road two numbers A and B are known – the integer A represents the current time (in seconds) needed to travel along the road, and the integer B represents the smallest possible time (in seconds) needed to travel along this road if we repair all the damage.We want to invest a certain amount of money into road repair. For a particular road, the result will be proportional to the amount of invested money. For each euro invested in some road, the time needed to travel along that road will be reduced by one second (the amount of money invested in some road has to be an integer). The travel time cannot be reduced beyond the smallest possible time B described above.We are given a certain amount of money. We want to distribute this money along different roads in such a way that the time needed to travel from the city 1 to the most distant city (after all the repairs) is as small as possible.Write a program that will find this smallest time.InputThe first line of input contains two integers N and K, 2 ≤ N ≤ 100 000, 0 ≤ K ≤ 1 000 000, the number of cities and the total amount of money (in euros).Each of the next N-1 lines contains four integers X, Y, A and B, 0 ≤ B ≤ A ≤ 10 000. It means that there is a road between cities X and Y, with the numbers A and B representing the current time and the minimum time as described above.OutputThe first and only line of output should contain a single integer – the minimum time from the task description.SampleInput:3 200\r\n1 2 200 100\r\n2 3 450 250Output:450Input:5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3Output:6Input:11 12\r\n1 2 7 5\r\n1 3 20 15\r\n2 4 10 8\r\n2 5 5 3\r\n2 6 6 2\r\n4 7 3 0\r\n4 8 7 2\r\n5 9 8 4\r\n5 10 9 8\r\n5 11 6 5Output:17",
  "sample_input": "Input:3 200\r\n1 2 200 100\r\n2 3 450 250Output:450",
  "sample_output": "Input:5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3Output:6",
  "link": "https://www.spoj.com/problems/MROADS",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "3 200\r\n1 2 200 100\r\n2 3 450 250",
      "expected_output": "450",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 11\r\n1 2 10 5\r\n1 3 3 2\r\n1 4 9 6\r\n3 5 7 3",
      "expected_output": "6",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 3\n5 7 1 9\n5 2 1 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7\n1 7 5 7\n7 10 8 5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 1\n1 2 9 6\n1 10 6 7",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "38 85\n19 86 21 87\n4 26 57 11",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 71\n89 2 47 76\n33 54 16 25",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "4 51\n45 57 64 62\n14 6 71 94",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "1 5\n39 27 79 79\n59 29 36 41",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "83 51\n44 49 6 89\n48 43 19 58",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "10647 33868\n5393 11170 37784 26653\n16874 42825 44659 10957",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "15986 29697\n27419 12038 39637 8136\n11007 48860 49811 33640",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "16992 38821\n24698 11187 12151 37486\n28711 24461 13668 31193",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "22107 46703\n39922 48548 21873 25820\n44253 14380 11588 36774",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "38973 35073\n26037 35117 7662 38905\n33892 21309 39543 20602",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "7659 27936\n19464 23453 31238 16007\n23736 44807 10440 29256",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "13707 20828\n23408 21318 49470 46080\n40248 27615 44941 15399",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000\n100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000\n100000 100000 100000 100000",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "99999 99999\n1 1 2 1\n1 100000 99999 100000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:35"
}