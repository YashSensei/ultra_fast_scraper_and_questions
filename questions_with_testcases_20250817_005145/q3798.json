{
  "problem_code": "problems",
  "title": "LAZY FRIENDS",
  "tags": [],
  "text": "Jai and Gopi are best friends. Both of them have a lot of girlfriends although they are nerds!!! One day one of Gopi’s girlfriends came to him and asked him to prove his love for her. Unfortunately Gopi has a meeting with another girlfriend and asks his best friend Jai to help him. Jai with an idea of increasing his girlfriend count accepts immediately. Jai on hearing the task finds it so simple and so asks his junior to complete the task which is you.You are given a room of lengthLand breadthBwhich is divided into unit cells. In each unit cell there are some gems which amount to a certain value which can be positive, negative or even zero. You are asked to answerTqueries. Each query consists of a numberNand you need to collect gems fromNunit cells such that the value ofNunit cells when summed up must be maximum. The selection ofNunit cells in a room of length L and breadth B must be in such a way that it must be a small room of length say somexand breadth someyprovidedx × y = N. If no such value for x and y exist then print -1.InputFirst line of input contains two space separated integers L and B which denotes the length and breadth of the room.Following L lines contains B elements in each line each element specifying the value of the gems.Next line contains T which is the number of queries.Following T lines contains T elements where each element is the number N.1 ≤ L, B ≤ 1000All the L × B elements (x) will be in the range-100 ≤ x ≤ 1001 ≤ T ≤ 101 ≤ N ≤ 10000OutputPrint the maximum value that can be obtained for each value of N.ExampleInput:3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6Output:11\r\n-1\r\n4",
  "sample_input": "Input:3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6Output:11\r\n-1\r\n4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GEMS",
  "scraped_at": "2025-08-17 00:34:33",
  "test_cases": [
    {
      "input": "3 4\r\n1 -2 3 -4\r\n-5 6 -7 8\r\n9 -10 11 -12\r\n3\r\n1\r\n5\r\n6",
      "expected_output": "11\r\n-1\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 1\n6 10 4 8\n4 10 8 4\n8 5 2 4\n1\n1\n10\n2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 6\n6 2 8 2\n5 4 3 2\n9 3 5 8\n8\n9\n3\n10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4\n7 7 10 5\n2 8 8 6\n7 6 1 10\n4\n3\n2\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 90\n26 33 8 90\n73 68 68 16\n27 61 62 79\n27\n71\n52\n53",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "25 50\n5 65 61 45\n72 70 10 16\n87 87 87 55\n76\n36\n87\n83",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "81 85\n9 65 58 99\n24 7 82 75\n34 53 10 91\n47\n45\n73\n64",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "31 86\n98 36 74 11\n94 78 25 52\n93 38 93 63\n7\n62\n11\n74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "58 42\n32 68 100 2\n82 100 75 6\n30 74 71 25\n23\n5\n8\n36",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "4810 2008\n2571 2644 2267 3580\n3838 1898 2881 1309\n3855 2692 1968 4652\n3702\n4304\n4442\n3191",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "3582 4607\n2842 1362 1917 2438\n1780 591 4664 1444\n4728 3996 3232 2702\n2178\n4177\n2867\n4833",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "3016 2939\n4192 3657 3867 4754\n2277 2817 4782 2299\n1496 636 769 2430\n2177\n2786\n2200\n2602",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1738 3437\n2968 3047 1595 4448\n566 2132 3215 3385\n4251 2963 3947 4365\n518\n1254\n1818\n2111",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "3399 2778\n4505 2846 3936 3021\n993 1721 3883 3388\n1286 3938 3003 2200\n4846\n3637\n3202\n4307",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2698 4195\n832 4496 4621 2505\n1579 4821 1502 4671\n565 3121 4548 2582\n1065\n2901\n623\n1992",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "4399 2746\n1877 4822 2772 2031\n3840 2106 1155 4508\n1146 1822 2414 1105\n1278\n622\n1750\n2498",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000\n10000\n10000\n10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000 10000 10000 10000\n10000\n10000\n10000\n10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 10000 2 10000\n1 10000 1 1\n2 10000 10000 1\n2\n9999\n9999\n2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9999 1\n1 10000 10000 10000\n2 2 2 9999\n2 10000 10000 10000\n1\n2\n10000\n10000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}