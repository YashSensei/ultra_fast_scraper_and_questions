{
  "problem_code": "problems",
  "title": "Boa viagem, Roim",
  "tags": [],
  "text": "Computer Engineering student Roim is getting ready for a trip to Mexico. For that, he has studied the airplane network, so he knows the details of allRregular flights currently in operation on all of theNavailable airports. Unfortunately, one of his school mates is very annoying and keeps saying the same stuff to him all the time.To solve that issue, he will organize two different flight plans: one for the team and one for the annoying guy. The condition is that the flight plans may not contain the same flight (note that it is possible for both to pass through the same airport, and that the same flight may not be used by both even if the times are different). As this may not be possible using only regular flights, he has also considered using some of theCflights chartered by travel agencies, but he'd like to keep those to a minimum as they usually suffer from large delays. Of course, as long as the least number of chartered flights is picked, Roim will pick the plans with the least total cost (defined as the sum of the costs of all flights used).InputThe input consists of several test cases. On the first line of a test case are three integersN(2 ≤ N ≤ 225),RandC(0 ≤ R+C ≤ N(N-1)/2) separated by spaces. The starting airport is 0, and the destination is N-1.The next R lines contain integersa,b(0 ≤ a, b ≤ N-1),c(1 ≤ c ≤ 100), meaning that there exists a one-way regular flight between airports a and b, with cost c. The following C lines give details for chartered flights in the same manner. There is a blank line at the end of each test case. The last test case is followed by a line containing three zeros.You may assume that any pair of cities is only connected in at most a single direction by a single flight.OutputIf it is possible to make the plans, print two integers separated by spaces. The first should be the minimum amount of chartered flights used, and the second is the total cost of the solution.If it's impossible that both the team and the guy get to their destination, print \"Boa viagem, Roim\" instead.ExampleInput:4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0Output:0 121 8Boa viagem, Roim",
  "sample_input": "Input:4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0Output:0 121 8Boa viagem, Roim",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ROIM",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "4 5 00 1 11 3 50 2 51 2 12 3 14 4 10 1 21 3 20 2 21 2 12 3 22 1 00 1 100 0 0",
      "expected_output": "0 121 8Boa viagem, Roim",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 5 5 10 6 8 1 4 4 4 5 10 8 5 4 8 5 3 9 1 6 5 1 3 6 4 2 9 1 2 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 1 10 2 7 8 3 1 3 8 6 8 9 3 5 3 4 7 4 1 5 3 1 3 10 2 4 1 9 3 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 2 5 2 9 2 3 2 3 1 10 4 4 9 4 8 7 8 4 8 9 2 8 9 4 3 2 6 1 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "99 27 1 13 34 52 4 18 7 18 12 32 96 88 17 10 28 38 67 16 37 100 30 79 99 82 52 93 12 73 64",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "99 67 6 40 87 17 66 6 50 73 78 24 16 53 10 56 56 68 15 11 44 96 65 77 43 38 82 11 25 91 93",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "7 38 37 61 79 37 78 21 77 94 74 53 88 3 42 11 72 22 83 78 92 19 21 35 15 64 75 69 39 92 41",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "94 16 51 79 87 51 87 21 85 19 67 31 17 92 10 10 66 22 9 39 80 36 42 77 60 41 72 58 97 41 47",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 27 83 67 69 76 49 52 43 9 52 2 6 96 76 56 5 9 75 52 91 13 80 73 65 1 24 51 35 68 16",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "110 108 100 38 54 88 40 110 71 33 90 96 71 47 49 79 84 108 72 63 94 83 54 100 91 77 60 67 74 23 16",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "47 27 100 63 103 91 51 84 30 65 18 25 24 101 95 77 20 91 27 64 65 72 48 24 46 59 61 42 96 73 106",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "46 18 92 26 37 38 38 73 99 69 82 92 59 30 48 71 68 36 16 73 66 32 21 69 87 27 70 104 84 53 29",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "81 101 48 15 102 93 11 19 42 24 60 24 14 67 15 89 68 49 56 112 40 29 36 68 17 25 98 41 112 97 22",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "79 45 65 78 109 69 82 23 98 71 51 27 92 64 28 41 106 67 52 52 92 47 43 101 60 52 13 82 30 109 55",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "40 78 44 31 68 39 92 107 32 51 87 71 16 26 67 42 64 67 89 24 101 68 38 26 53 27 14 53 42 37 30",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "14 36 19 83 23 45 26 86 18 89 73 53 45 86 27 68 83 53 16 97 76 70 45 47 12 37 105 106 19 55 71",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "225 1 1 2 1 224 225 224 1 2 2 225 225 225 2 1 225 224 1 224 2 224 225 2 225 225 224 1 1 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "224 225 1 225 224 2 225 225 225 1 225 224 224 2 1 224 1 224 2 1 2 1 1 224 224 224 2 225 1 225 225",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}