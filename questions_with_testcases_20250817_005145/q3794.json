{
  "problem_code": "problems",
  "title": "Zero Query",
  "tags": [],
  "text": "EnglishVietnameseGiven an array havingNelements, each element is either-1or1.You haveMqueries, each query has two numbersLandR, you have to answer the length of the longest subarray in rangeLtoR(inclusive) whose sum is equal to0.InputThe first line contains two numbersNandM(1≤N,M≤50000) - the number of elements and the number of queries.The second line containsNnumbers - the elements of the array, each element is either-1or1.In the nextMlines, each line contains two numbersLandR(1≤L≤R≤N).OutputFor each query, print the length of the longest subarray that satisfies the query in one line. If there isn't any such subarray, print0.NoteSubarray in an array is like substring in a string, i.e. subarray should contain contiguous elements.ExampleInput:6 4\r\n1 1 1 -1 -1 -1\r\n1 3\r\n1 4\r\n1 5\r\n1 6Output:0\r\n2\r\n4\r\n6",
  "sample_input": "Input:6 4\r\n1 1 1 -1 -1 -1\r\n1 3\r\n1 4\r\n1 5\r\n1 6Output:0\r\n2\r\n4\r\n6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ZQUERY",
  "scraped_at": "2025-08-17 00:34:27",
  "test_cases": [
    {
      "input": "6 4\r\n1 1 1 -1 -1 -1\r\n1 3\r\n1 4\r\n1 5\r\n1 6",
      "expected_output": "0\r\n2\r\n4\r\n6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 4\n1 6 7 9 8 10\n2 5\n4 3\n1 3\n6 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 3\n3 10 10 10 1 1\n9 9\n2 5\n2 10\n4 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 9\n7 1 10 4 2 3\n4 6\n7 7\n9 7\n7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 99\n85 95 67 31 59 66\n44 9\n57 53\n53 23\n83 90",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "82 71\n51 59 47 86 25 1\n59 30\n11 64\n30 17\n14 43",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "33 23\n89 28 76 33 57 67\n61 55\n15 96\n24 96\n64 10",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "57 68\n91 81 16 47 46 42\n77 65\n55 3\n63 37\n16 65",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "15 84\n22 61 7 9 61 18\n53 28\n80 61\n46 90\n83 58",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "443 485\n168 149 195 141 137 368\n477 414\n439 145\n103 199\n413 334",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "262 375\n200 463 93 333 481 254\n86 479\n181 327\n459 301\n270 281",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "367 484\n258 206 423 217 141 326\n394 228\n175 389\n156 188\n360 449",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "475 335\n233 499 188 257 391 278\n492 86\n396 206\n436 150\n216 289",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "366 159\n476 324 472 227 348 173\n394 343\n197 449\n243 473\n132 435",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "175 281\n81 423 368 122 407 164\n167 387\n61 357\n234 264\n79 251",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "341 70\n387 133 135 468 268 500\n390 242\n145 95\n325 110\n243 288",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n2 1000 1000 999 999 2\n1 999\n2 1000\n999 2\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n2 1000 1000 2 1000 999\n1000 1000\n999 1000\n1 2\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}