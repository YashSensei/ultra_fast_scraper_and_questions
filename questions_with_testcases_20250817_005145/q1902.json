{
  "problem_code": "problems",
  "title": "World Record Lunch",
  "tags": [],
  "text": "A group of people is trying to beat the world record for the largest number of people having lunch at the same time. In order achieve this goal, they are using the country's\t largest bridge and they have decided to arrange the tables following the shape of the letter 'S'.The table layout can be described by 4 integers:NH,NV,HandV. The two first integers,NHandNV, represent respectively the number or rows and number of columns in the layout. The last two integers represent respectively the number of tables in each row and column. For a given layout, the tables are numbered consecutively, starting with table #1 in the top-right corner. The following figure illustrates several possible layouts:Thousands of groups of people are expected to come, and the organizers have to define where to seat everyone. Each group needs a certain number of tables and they do not share tables with other groups. Furthermore, a group wants their tables to be together and not split among rows and columns, that is, they want a set of consecutive tables either on the same row or on the same column. If this condition cannot be met, the group prefers to go away and have lunch at another place. The groups also enjoy having some privacy and prefer unoccupied adjacent tables, that is, no one at the table exactly before the first table of the group, and no one at the table exactly after the last table of the group. If this happens, we say that the group found aprivateplace.Whenever a group arrives, the organization must decide where to seat that group based solely on the table occupation at the moment, without taking into account further groups that may be coming. Since a group will always be seated on consecutive tables, the position of a group can be defined by the index of the first table of the group. So, when a group arrive, the organization wants the following:If there is a suitable private place for the group, then choose the lowest possible index guaranteeing privacy;If no privacy can be ensured, but there is space for the group, then choose the lowest possible index with space for the entire group;If there is no space available on a single row or column where the group would fit, then the organizers must send the group away.An example would be the following. Imagine a layout withNH=3,NV=2,H=5 andV=3 (the first layout give on the figure above). And now imagine that groups needing 5, 2, 3, 5, 4 and 2 tables arrive, in that order. This is what happens:In the beginning all tables are emptyGroup 1 needs 5 tables. It is put on index 1.Group 2 needs 2 tables. It is put on index 7.Group 3 needs 3 tables. It is put on index 11.Group 4 needs 5 tables. No position is available.Group 5 needs 4 tables. It is put on index 14 (with no privacy).Group 6 needs 2 tables. It is put on index 9 (with no privacy).Can you help the organizers on this task?The ProblemGiven a table layout (number of rows, columns and number of tables per row and column) and the description of groups arriving (specifying number of tables needed per group), your task is to calculate where each group should be seated following the rules described above.InputThe first line contains 5 integersNH NV H V N, separated by single spaces.NHandNVindicate respectively the number of rows and columns of the table layout.HandVindicate respectively the number of tables per row and column.Nindicates the number of groups arriving.Then comeNlines, each one indicatingGi, the number of tables thei-th group needs. These lines come in order of arrival of the groups.OutputThe output should have exactlyNlines, each one indicating where the respective group should seat. If there is a suitable position, the line should contain an integer indicating the index of the first table of the group. If no position is available, the line should contain the string\"no\", without the quotes.RestrictionsThe following limits are guaranteed for all the test cases that will be used for evaluating your program:1 ≤ NH ≤ 10 000Number of rowsNH-1 ≤ NV ≤ NHNumber of columns3 ≤ H,V ≤ 1 000Number of tables in each row/column1 ≤ N ≤ 50 000Number of groups1 ≤ Gi≤ 1 000Number of tables each group needsExample Input 13 2 5 3 6\r\n5\r\n2\r\n3\r\n5\r\n4\r\n2Example Output 11\r\n7\r\n11\r\nno\r\n14\r\n9Input Explanation 1It is the example given before in the problem statement.Example Input 22 2 3 3 3\r\n3\r\n3\r\n1Example Output 21\r\n5\r\n9Input Explanation 2In the end the tables would look like this:A few notes:This is the first problem I add to SPOJ, hope you like it :)The time limit is at least 6x the runtime of my C++ solution with no low-level optimizations or fast input/output. I have a Java solution passing within these time limits.I'm not proficient enough in languages like Python to ensure the time limit is ok for those languages. I can increase the limits if needed.",
  "sample_input": "3 2 5 3 6\r\n5\r\n2\r\n3\r\n5\r\n4\r\n2",
  "sample_output": "1\r\n7\r\n11\r\nno\r\n14\r\n9",
  "link": "https://www.spoj.com/problems/WRLUNCH",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "3 2 5 3 6\r\n5\r\n2\r\n3\r\n5\r\n4\r\n2",
      "expected_output": "1\r\n7\r\n11\r\nno\r\n14\r\n9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 2 2 6 3\n9\n10\n2\n2\n6\n4",
      "expected_output": "0\n9\n10\n2\n2\n6\n4",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 9 2 1 9\n9\n9\n10\n6\n3\n7",
      "expected_output": "0\n9\n9\n10\n6\n3\n7",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 10 9 5 5\n7\n6\n5\n8\n7\n10",
      "expected_output": "0\n7\n6\n5\n8\n7\n10",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "19 37 93 54 86\n39\n82\n26\n37\n30\n42",
      "expected_output": "0\n39\n82\n26\n37\n30\n42",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "78 35 33 50 71\n78\n63\n59\n84\n90\n23",
      "expected_output": "0\n78\n63\n59\n84\n90\n23",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 46 95 30 82\n29\n100\n91\n11\n37\n42",
      "expected_output": "0\n29\n100\n91\n11\n37\n42",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "37 98 18 66 69\n62\n66\n62\n53\n10\n32",
      "expected_output": "0\n62\n66\n62\n53\n10\n32",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 82 81 55 92\n56\n75\n5\n79\n51\n62",
      "expected_output": "0\n56\n75\n5\n79\n51\n62",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "16011 9811 3251 17299 8683\n23563\n23955\n23921\n19200\n16377\n16232",
      "expected_output": "0\n23563\n23955\n23921\n19200\n16377\n16232",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "24626 8899 3671 21430 9004\n9144\n19965\n15641\n9199\n24208\n12498",
      "expected_output": "0\n9144\n19965\n15641\n9199\n24208\n12498",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "16598 9987 4362 12886 17035\n6413\n5743\n2998\n12845\n19480\n24378",
      "expected_output": "0\n6413\n5743\n2998\n12845\n19480\n24378",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5688 21773 2892 3908 21374\n13919\n12904\n14799\n7446\n7549\n17308",
      "expected_output": "0\n13919\n12904\n14799\n7446\n7549\n17308",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "5991 19516 10392 20852 13549\n20162\n2513\n20441\n5442\n13651\n15084",
      "expected_output": "0\n20162\n2513\n20441\n5442\n13651\n15084",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "18123 16325 15607 18801 6767\n3316\n11526\n23665\n3097\n14327\n24475",
      "expected_output": "0\n3316\n11526\n23665\n3097\n14327\n24475",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24430 8631 11108 10460 23293\n17059\n17282\n9655\n16868\n15994\n17669",
      "expected_output": "0\n17059\n17282\n9655\n16868\n15994\n17669",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000 50000 50000 50000\n50000\n50000\n50000\n50000\n50000\n50000",
      "expected_output": "0\n50000\n50000\n50000\n50000\n50000\n50000",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000 50000 50000 50000\n50000\n50000\n50000\n50000\n50000\n50000",
      "expected_output": "0\n50000\n50000\n50000\n50000\n50000\n50000",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "49999 1 2 1 1\n49999\n1\n2\n50000\n50000\n50000",
      "expected_output": "0\n49999\n1\n2\n50000\n50000\n50000",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "49999 2 1 49999 1\n50000\n49999\n2\n50000\n50000\n1",
      "expected_output": "0\n50000\n49999\n2\n50000\n50000\n1",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:19"
}