{
  "problem_code": "problems",
  "title": "Blockade",
  "tags": [],
  "text": "There are exactly N towns in Byteotia. Some towns are connected by bidirectional roads. There are no crossroads outside towns, though there may be bridges, tunnels and flyovers. Each pair of towns may be connected by at most one direct road. One can get from any town to any other-directly or indirectly.Each town has exactly one citizen. For that reason the citizens suffer from loneliness. It turns out that each citizen would like to pay a visit to every other citizen (in his host's hometown), and do it exactly once. So exactly N*(N-1) visits should take place. That's right,should. Unfortunately, a general strike of programmers, who demand an emergency purchase of software, is under way. As an act of protest, the programmers plan to block one town of Byteotia, preventing entering it, leaving it, and even passing through. As we speak, they are debating which town to choose so that the consequences are most severe.TaskWrite a programme that:reads the Byteotian road system's description from the standard input,for each town determines, how many visits could take place if this town were not blocked by programmers,writes out the outcome to the standard output.InputIn the first line of the standard input there are two positive integers: N and N (1 ≤ N ≤ 100000, 1 ≤ M ≤ 500000) denoting the number of towns and roads, respectively. The towns are numbered from 1 to N. The following M lines contain descriptions of the roads. Each line contains two integers Xiand Yi(1 ≤ Xi, Yi≤ N) and denotes a direct road between towns numbered Xiand Yi.OutputYour programme should write out exactly N integers to the standard output, one number per line. The i-th line should contain the number of visits that could not take place if the programmers blocked the town no. i.ExampleInput:5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5Output:8\r\n8\r\n16\r\n14\r\n8",
  "sample_input": "Input:5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5Output:8\r\n8\r\n16\r\n14\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STC10",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "5 5\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n4 5",
      "expected_output": "8\r\n8\r\n16\r\n14\r\n8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 8\n3 8\n8 7\n10 7\n2 9\n10 8",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 5\n10 4\n6 9\n8 10\n4 7\n6 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 1\n2 6\n3 5\n4 3\n2 10\n3 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 26\n91 36\n41 12\n27 52\n30 67\n74 99",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "24 50\n86 13\n16 74\n41 88\n60 35\n46 35",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 42\n62 80\n44 89\n84 44\n28 6\n14 39",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "36 89\n25 54\n65 65\n61 10\n98 57\n49 90",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 16\n44 8\n6 67\n92 86\n84 83\n43 55",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "41099 37428\n5358 29816\n42795 35525\n5909 21263\n9656 11339\n25194 21208",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "18801 13059\n7018 8672\n33911 13385\n26871 30153\n48594 32769\n32258 33675",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "43365 10456\n43488 37680\n34550 20069\n13182 43522\n47881 5725\n49103 32475",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "49762 10704\n10830 39307\n11106 25320\n41788 5690\n7285 17984\n18153 37065",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "23970 44097\n38083 11274\n45038 45950\n31235 27237\n47038 25312\n28147 43144",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42807 37741\n30018 15252\n26725 6369\n12319 16959\n30498 42120\n38056 16323",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "24082 26370\n20001 38225\n23175 40818\n12370 42927\n8872 12156\n34622 38035",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n100000 100000\n1 100000\n100000 100000\n99999 99999\n2 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 99999\n99999 2\n100000 99999\n100000 2\n99999 2\n2 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:20"
}