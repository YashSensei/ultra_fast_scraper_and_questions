{
  "problem_code": "problems",
  "title": "The Toy Store",
  "tags": [],
  "text": "One day Amit had an idea to open up a toy store. Though he realised that he must do something to attract customers to his store otherwise his store would not be successful. So he comes up with a plan to give each customer a free Lego (blocks) set. Hearing about this, you go to the store to get your free sample.You are provided with a set of Legos. The set given to you consists of N different kinds of Lego. The set has an infinite number of pieces of each kind of Lego. Each kind of Lego has some fixed height. Note that 2 different kinds of Lego may have the same height.Now you want to check the actual price of your Lego set. The price of the set is equal to the number of distinct Beautiful Buildings that can be built using the set.A Beautiful Building is a stack of Lego pieces such that it is made of exactly K Lego pieces (not necessarily of different kind) and its height is equal to X modulo M for given values of X, M and K (these values are printed on the box).2 Buildings are distinct if there exists a height H at which the block used in both buildings is not the same.You want to find out the price of the free sample provided to you.InputThe input starts with an integer T, indicating the number of test cases. Then T test cases follow. Each test cases consists of 3 lines. The first line contains an integer N, indicating the number of different kinds of Lego in the set. The second line contains N space separated integers, the ith of which represents the height of pieces of ith kind. The third line contains 3 space separated integers representing the values of M, K and X respectively.OutputFor each test case print a line containing the price of the set modulo 1000000007.CONSTRAINTST ≤ 1001 ≤ N ≤ 1000001 ≤ M ≤ 1001 ≤ K ≤ 10000000000 ≤ X1 ≤ Height of Each Lego ≤ 1000000000ExampleInput:231 2 33 1 031 2 33 2 0Output:13",
  "sample_input": "Input:231 2 33 1 031 2 33 2 0Output:13",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPC14F",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "231 2 33 1 031 2 33 2 0",
      "expected_output": "13",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 8 1 8 4 1 4 9 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 5 5 10 8 1 1 1 2",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 1 8 3 2 10 2 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "23 57 40 29 57 79 13 63 3",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 46 30 22 2 70 45 12 4",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 45 87 22 50 3 20 4 35",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 54 62 51 86 44 38 6 16",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "95 45 74 27 16 100 10 73 6",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "203056 313796 268757 384054 149055 172024 391285 304174 132205",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "378743 100748 403904 354695 181443 360045 202502 97872 432602",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "131667 423802 303663 186674 364352 365376 141315 375576 142971",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "477910 215404 432316 146728 231270 162771 385586 300718 357803",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "114379 271315 279644 447647 412196 311891 119735 438772 406144",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "216613 149793 215974 116081 381619 102029 358053 181995 442656",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "481566 250287 402377 495577 366703 291055 368237 113670 397000",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999999 2 999999 2 1 999999 999999 1 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1 2 999999 1 999999 999999 999999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:50"
}