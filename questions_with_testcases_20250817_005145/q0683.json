{
  "problem_code": "problems",
  "title": "Stun Boosting",
  "tags": [],
  "text": "People in Nloglônia are very addicted to video games as they spend hours playing every day. As they are a very competitive community, everyone competes to see who has more gaming achievements or trophies. Every time someone starts a new game, they spend some time playing the single player portion of the game, but what they really like is the multiplayer.There's a game that became very famous in the city involving some assassins and their creed. Anyway, the objective of the multiplayer game is to hunt and assassinate others assassins. The player's skill is measured by how much experience (XP) he has, which can be accumulated by doing various actions in the game, i.e. killing or poisoning a target, running away from who wants to kill you or stunning someone, and so on.But there's a problem, everyone wants to complete the game as fast as they can, in order to start a new one. To complete this game, there's an achievement that's obtained when a player reachesXexperience points. You possibly need to play a lot of multiplayer rounds to reach that amount of XP, and that's why a group of friends decided to boost their XP, it consists of helping everybody in the group to reach a desired amount as fast as possible.Here's how this match goes. There are always 6 players separated in 3 teams with 2 players each. Let's give each player an identifier from 1 through 6, and assume that the teams are organized as follows: players 1 and 2 in the first team, players 3 and 4 in the second team, and players 5 and 6 in the third team. The game is separated in rounds, each taking 4 minutes to complete.To boost their experiences, the players agreed that an easy and fast way to do it is through the stun boosting. This boosting method consists of stunning each other instead of killing. It's true that killing will give you more XP points, but the dead player end up spending too much time to respawn and to meet with the someone else again. The boosting will happens as follows. Everyone must meet at the center of the map to start stunning each other. Two groups with one player from each team will be formed in this location. The players takes different amount of time to reach the center of the map (depending on where they first spawned) so the group that reaches the center first will start boosting first. If both players from the same team gets to the center at the same time, the one with lower identifier must be chosen to be part of the first group.As soon as a group meet at the center of the map they start stun boosting. Every time a player gets stunned he lands on the ground for some time, and then gets up. A stun round consists of all players in the group stunning and getting stunned. An example of a stun round:player 1 stuns player 2, player 3 stuns player 1, player 2 waits to get up and stuns player 3. In this problem, a stun round takes 7 seconds. This happens over and over until the round is over.If this wasn't enough, the players are following these two guidelines that they created to raise the experience even faster, and be as fair as possible with everyone in the group. First, if two players from opposing teams meet up at the center, they must wait for the third one to come, and then start boosting (they hold still until the group has three members). Second, if they know there's no time left in the round to complete a stun round, they will not do it, instead, if there's 2 or more seconds remaining they have time to poison each other, getting some extra and welcome XP.For each stun the player gets 300XP, and for each poison kill the player gets 1800XP. Note that the XP earned stunning will be granted to the player at the end of the stun round (that takes 7 seconds) and the XP earned poisoning will be granted in the end of the 4 minutes round. Also, you must note that when poisoning, the three players are able to poison someone else because it takes some time for it to really kill them. The players will choose to poison each other if and only if there's no time left for a stun round (even though poisoning should work better to raise the experience).You are given the amount of XP the players want to reach, the number of rounds they played and the initial amount of experience the players had before starting boosting. For each round, you are given the time that each player takes to reach the center of the map. The players want to know who was the player that reached the experience goal first, and in which round he did. If no player reached the goal, they want to know the experience of everyone after they played all the rounds.InputThe input contains several test cases. The first line of a test case contains two integers,XandR(1 ≤X≤ 650000, 1 ≤R≤ 1000), which represents the amount of experience the players want to achieve and the number of rounds they played, respectively.The second line of a test case contains six integersXi(1 ≤i≤ 6) that represents the initial experience of the ithplayer. ThenRlines follows, each containing six integersTi(1 ≤i≤ 6; 0 <Ti< 240) representing the time that theithplayer reached the center of the map on that round.The end of the input is marked byX=R= 0.OutputFor each test case your program should output one line. If some player reached the desired experience, you should output two integers indicating the identifier of the first player to reach the desired experience, and the numbers of rounds necessary to this player to do so. If more than one player reached the desired experience at the same time, output the one with lower identifier. In the case that no player reached the desired experience, you should output \"-1\" and then six integers containing the amount of experience each player had after playing all the rounds.ExampleInput:10000 1\r\n1000 12345 50000 9000 100 1\r\n30 10 20 20 10 30\r\n650000 1\r\n100 200 300 400 500 600\r\n20 10 30 20 20 30\r\n0 0Output:2 0\r\n-1 9100 11300 9300 11500 11600 9600",
  "sample_input": "Input:10000 1\r\n1000 12345 50000 9000 100 1\r\n30 10 20 20 10 30\r\n650000 1\r\n100 200 300 400 500 600\r\n20 10 30 20 20 30\r\n0 0Output:2 0\r\n-1 9100 11300 9300 11500 11600 9600",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/STUN",
  "scraped_at": "2025-08-17 00:33:07",
  "test_cases": [
    {
      "input": "10000 1\r\n1000 12345 50000 9000 100 1\r\n30 10 20 20 10 30\r\n650000 1\r\n100 200 300 400 500 600\r\n20 10 30 20 20 30\r\n0 0",
      "expected_output": "2 0\r\n-1 9100 11300 9300 11500 11600 9600",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 8\n7 2 3 1 10 8\n4 9 10 4 4 5\n4 9\n9 1 9 7 10 8\n10 4 1 9 9 2\n4 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 2\n7 9 1 9 7 1\n4 3 5 1 1 5\n3 3\n7 4 3 4 7 10\n10 7 2 9 7 2\n5 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 3\n1 2 2 6 10 5\n6 7 7 7 8 5\n10 8\n10 8 6 10 1 7\n7 4 6 2 8 7\n7 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "26 73\n87 20 49 83 31 20\n91 42 25 6 77 53\n80 51\n27 66 36 16 49 37\n14 92 17 38 53 55\n38 56",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 2\n41 65 54 84 19 23\n32 3 68 79 12 74\n98 45\n23 52 87 2 89 31\n52 31 17 43 99 24\n100 48",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 2\n71 67 45 9 64 10\n94 35 46 3 70 34\n100 61\n52 19 71 74 76 56\n86 73 73 41 34 20\n67 19",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "58 45\n81 50 83 61 6 77\n60 86 65 61 18 1\n10 25\n24 28 67 58 92 4\n43 89 24 66 83 66\n40 84",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 33\n67 20 67 92 70 19\n62 53 23 64 61 69\n83 34\n41 6 20 50 9 55\n29 51 81 33 91 56\n83 36",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "451 254\n234 496 478 136 203 412\n242 177 154 474 400 280\n156 187\n152 257 158 350 87 167\n165 448 446 482 497 271\n427 439",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "243 394\n472 469 197 445 76 351\n134 437 359 269 478 304\n147 60\n224 443 143 140 373 57\n439 212 421 125 161 197\n159 244",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "231 491\n244 463 492 114 247 163\n370 253 441 203 122 106\n308 356\n381 279 96 498 464 394\n263 94 249 364 416 247\n124 55",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "78 138\n88 379 64 441 142 411\n180 307 302 147 198 422\n492 195\n243 86 393 349 411 317\n325 152 427 204 447 383\n326 294",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "331 57\n117 159 493 265 444 249\n256 274 421 500 131 75\n105 56\n241 199 241 85 273 341\n347 289 453 155 91 498\n92 375",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "453 478\n105 387 163 431 165 413\n460 116 143 136 266 439\n463 101\n445 109 94 149 483 179\n355 393 455 464 492 64\n192 318",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "250 433\n174 379 454 389 70 466\n142 145 94 110 211 272\n425 290\n482 460 170 437 170 388\n65 412 99 319 211 186\n136 355",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 1000 1000 1000 1000 1000\n1000 2 2 1 999 1\n1000 2\n999 1 999 2 999 1\n999 999 1 999 1 1000\n2 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1\n2 1 1000 1 2 2\n1 2 1000 999 1 1000\n999 1000\n999 1 1000 2 1 1000\n1000 1000 2 2 1000 999\n2 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:41"
}