{
  "problem_code": "problems",
  "title": "Avantgarde and Bicycle",
  "tags": [],
  "text": "Mr. Avantgarde loves to ride his bicycle and visit all his CSI-DTU friends once in a while. His town is a N×N grid. He has to visit M friends marked by the letter 'F'. Empty land is marked with '.'. He is initially located at his house marked by 'S' and after visiting all of his friends he will return to his home. He is allowed to move horizontally, vertically and diagonally to adjacent squares only. Additionally, each cell in a grid has some altitude and the tiredness associated with the whole trip is equal to the difference between highest altitude and the lowest altitude encountered in the whole trip. But Mr. Avantgarde is very lazy and wants you to calculate the minimum tiredness he can achieve in the whole trip.InputThe first line of input contains an integer N (2 ≤ N ≤ 50). The following N lines represents the required grid. The character ‘S’ will appear exactly once, while the character ‘F’ will appear at least once. The following N lines each contain N positive integers less than 106, the altitudes of the fields mentioned in the corresponding above grid.OutputPrint the least possible tiredness that Mr. Avantgarde can achieve.SampleInput3\r\nS..\r\n.FF\r\n...\r\n3 2 4\r\n7 4 2\r\n2 3 1Output2",
  "sample_input": "Input3\r\nS..\r\n.FF\r\n...\r\n3 2 4\r\n7 4 2\r\n2 3 1Output2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CLZBICYC",
  "scraped_at": "2025-08-17 00:34:40",
  "test_cases": [
    {
      "input": "Input3\r\nS..\r\n.FF\r\n...\r\n3 2 4\r\n7 4 2\r\n2 3 1Output2",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n1\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "16\n38624948\n34076855\n22451135\n89500806\n42169033\n57595408\n40821038\n19303697\n32433515\n40115773\n15127241\n87904443\n33388401\n57652509\n49636783\n26727229",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "13\n66780276\n20858616\n29179610\n93788797\n49472000\n76229515\n31735145\n20138322\n80469429\n47831535\n63884908\n78349417\n81714864",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n62364402\n57282316\n63799633\n85059490\n44424744\n30437549\n41137379\n24449402\n69806436\n40229454\n34718784\n97693175\n82596726\n65197972\n28567917\n91690127",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n7345522\n76219859\n10678822\n83501085\n88600000\n97319426\n52495100\n65784196\n16494025\n53739264\n25248949\n259566",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n91537616\n39321947\n3839217\n18345483\n79938000\n62057613\n17043358\n67664307\n88546600\n1072509\n86873243\n76802622",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "25\n38226\n67785\n42876\n63605\n48560\n40828\n46356\n90633\n69055\n94355\n94197\n29870\n97621\n52587\n47807\n56326\n96878\n64169\n39616\n64766\n55373\n37485\n50712\n46971\n46654",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "39\n16212\n91960\n13328\n89526\n90399\n56078\n82700\n19861\n50739\n25935\n38134\n41168\n12625\n9690\n84490\n59501\n22947\n21853\n57000\n66820\n68204\n6238\n72106\n23083\n3237\n5308\n15805\n44736\n87859\n98240\n96091\n73539\n30734\n3877\n80142\n37446\n33958\n2868\n93703",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "22\n48462\n25429\n27368\n54990\n32771\n17707\n63784\n96925\n45653\n55380\n91052\n68745\n18737\n50109\n78863\n77801\n85450\n19396\n75699\n88334\n14536\n6219",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "35\n12020\n8312\n83211\n57788\n40982\n18498\n73162\n74295\n12970\n24144\n71553\n6957\n8626\n30578\n75295\n78170\n98398\n50331\n40229\n5094\n65777\n49544\n72794\n18351\n12782\n18373\n34956\n43737\n96531\n76671\n91205\n7557\n87538\n30249\n14356",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "43\n4566\n80732\n84533\n64857\n64912\n41921\n77504\n61482\n25214\n7555\n40802\n40723\n79867\n23168\n48618\n47638\n77570\n62419\n97548\n45200\n24136\n56320\n23463\n37618\n57377\n62994\n93512\n50472\n85077\n84167\n27831\n50323\n83594\n18762\n36605\n24848\n11586\n16494\n84475\n20888\n62828\n64761\n31090",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "26\n77374\n65476\n51451\n78744\n51520\n23831\n41075\n10744\n53796\n61311\n91916\n56239\n67490\n53686\n68651\n63846\n84398\n31649\n48429\n25182\n49223\n85037\n8957\n54276\n16364\n10900",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n97989\n51049\n22566\n3486\n82668\n88137\n39829\n64316\n77834\n73091\n16647\n82619\n54711\n46337\n62869\n3469\n91840\n45736\n64330\n62551\n88326\n68609\n47702\n93179\n86706",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "50\n45037813\n93368222\n27903326\n41132579\n53692295\n23782758\n3199880\n79478672\n94888057\n81733649\n77912751\n9634705\n43009202\n13142336\n941813\n53930198\n62319704\n10757391\n97419615\n40420039\n32473505\n41383637\n20049130\n18608196\n88779201\n57124913\n75393172\n78814802\n80198338\n54043678\n94306960\n68386324\n13397754\n97090233\n98809580\n48633145\n23223799\n22583584\n66897755\n59778342\n86031669\n45848490\n50365420\n74080874\n80128597\n88034026\n81697394\n55939452\n44581157\n24265449",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "50\n4444450\n3270261\n38466311\n8112626\n37726144\n58000689\n61187717\n84814564\n67492216\n90877032\n27815867\n42037487\n52984696\n66902031\n66757073\n53522723\n62304239\n61063388\n73917700\n73102404\n67328107\n23006110\n64688456\n8824739\n19534399\n84809134\n29632464\n17966719\n42604183\n41924560\n8049172\n58812414\n52796869\n78680076\n29911067\n75240555\n49645447\n12535940\n86375168\n45871163\n55074179\n63081569\n68406088\n20188192\n65851430\n30469970\n29780064\n91128560\n59649509\n57369956",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 50)"
    },
    {
      "input": "1\n30486901",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}