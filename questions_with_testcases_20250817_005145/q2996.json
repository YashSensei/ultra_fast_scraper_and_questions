{
  "problem_code": "problems",
  "title": "Where The Friends Meet!",
  "tags": [],
  "text": "As you might be knowing, Blackhood, Kira and BaZ are very good friends. They are going to meet after a long time (not that long though :p). They live in a country with N cities. Each city has a GDP (not necessarily distinct). The roads of the country are such that there is only one road connecting any two cities in the country. Kira and Blackhood decide to meet anywhere in the unique path between their cities (including their cities too). But BaZ is not ready to meet anywhere, since he likes numbers having at least K distinct prime factors, he agrees to meet only in those cities whose GDP is a number he likes. Given Blackhood's and Kira's home cities, you need to find the number of cities where they can meet. i.e. you need to tell the number of cities between Blackhood's and Kira's home city which have their GDP a number BaZ likes.InputFirst line of the input contains three integers N, representing the number of cities in the country, K (as explained above) and Q, the number of queries which are to be answered). (1 ≤ N, Q ≤ 200000, 0 ≤ K ≤ 100). Next line contains N integers, where the ith integer represents the GDP of the ith country (1 ≤ GDP[i] ≤ 1000000). The next N-1 lines contain two integers u and v, representing a road between city u and city v (1 ≤ u, v ≤ N). Then the Q following lines contain two integers u and v, representing Blackhood's and Kira's home cities.OutputFor each query, output an integer representing the number of cities where the three can meet.Note: Large input data, use FAST I/O. Be careful with certain languages too.ExampleInput:5 2 510 1 6 9 141 22 41 33 51 24 52 32 53 5Output:13232",
  "sample_input": "Input:5 2 510 1 6 9 141 22 41 33 51 24 52 32 53 5Output:13232",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WTFM",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "5 2 510 1 6 9 141 22 41 33 51 24 52 32 53 5",
      "expected_output": "13232",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 2 9 10 10 9 3 5 1 8 4 7 1 9 6 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 9 6 5 6 7 2 4 9 1 7 6 4 4 5 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 4 8 10 6 4 1 1 9 1 3 6 4 4 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "48 10 53 77 27 45 13 70 46 74 39 75 16 49 9 60",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "97 72 72 34 100 88 44 84 8 25 27 91 95 79 90 41",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "75 61 56 50 58 79 60 10 76 100 29 9 54 43 73 83",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 49 98 100 9 53 31 64 61 71 10 80 90 57 1 39",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "78 5 58 35 51 34 4 31 57 46 20 51 15 26 8 92",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "118 451 144 458 276 279 467 233 219 96 439 275 247 192 382 445",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "105 64 180 284 110 257 361 350 263 318 163 205 389 178 159 353",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "464 407 209 415 123 219 180 497 363 492 422 473 482 283 199 277",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "423 231 417 371 470 439 203 345 412 247 191 486 291 409 125 484",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "423 398 187 102 329 492 118 499 257 211 227 256 371 320 361 343",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "252 200 289 476 370 440 139 271 365 215 284 156 173 216 196 384",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "354 279 455 189 56 286 275 96 272 75 351 152 430 91 102 132",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 1000 1000 1 1 1 999 1000 1 999 1 1000 1 1000 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 1000 999 1000 999 999 2 2 1000 1 2 999 999 2 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:53"
}