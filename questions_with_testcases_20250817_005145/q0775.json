{
  "problem_code": "problems",
  "title": "Leonardo de Pisa",
  "tags": [],
  "text": "Leonardo de Pisa is a very cautious man, and even though Christmas is still many months away, he has already bought his Christmas tree. It is a very, very high tree, even higher than the Tower of Pisa. Leonardo wishes to decorate his tree by using colored balls and lights. To that end, he has bought many balls of each possible integer diameter between1andN. In fact, he has bought so many balls that he has no idea of what to do with all of them.In Pisa, each ball has two cords hanging from it, to which other balls can be attached. By doing so, they make sure that the balls never fall from the tree and roll all the way across the floor, until finally stopping underneath a big piece of furniture where they cannot easily be found. All of the cords hanging from all of the balls have a length of 20 centimeters.Just like any good Christmas tree, Leonardo's tree has a top. On it, Leonardo will place a ball of diameterN, as those are the most alluring. All of the other balls in the tree will hang from this top ball either directly, or indirectly by means of other balls. Leonardo has carefully studied the way in which he must hang the balls so that his tree is the most beautiful tree in all of Pisa, and he has arrived at the following conclusions:No ball of diameter1or2must have another ball hanging from it.Every ball of diameterk ≥ 3must have two balls hanging from it: one of diameterk-1, and the other of diameterk-2.The following pictures show two examples of how Leonardo's tree would look after decorating it with balls. The left figure corresponds to the case in which he buys every ball up to diameterN = 4, while the right figure corresponds to the case with balls of diameter up toN = 5(the number written on each ball indicates its diameter).There is always enough room for Leonardo to add as many balls as he wants, for his tree is incredibly tall. However, he still feels that his tree is not the most beautiful tree in the city: It is missing colored lights!Leonardo has bought a special string of lights suitable for trees with balls. The string hasKlights tied together by cord, such that the lights are separated from each other by 20 centimeters of cord. Each light fits perfectly onto some balls, depending solely on their size: a light of typeionly fits onto balls of diameteri, for eachibetween1andN. If the diameter of the ball is larger thani, the ball will not fit, and if it is smaller thani, the light will fall to the floor. Two lights can never be attached to the same ball, and the cord between the lights must always be perfectly tight. In particular, that means that if there is no cord in the tree between two balls, then their distance will not be exactly 20 centimeters, and so it will not be possible to place two consecutive lights on top of them.The following picture shows four different strings of lights, colored gray.By the time that Leonardo bought the string of lights, he had already finished decorating his tree with balls. It was such an effort to do so, that he is completely determined not to add, remove, or move any ball from the tree. Now he does not know if he will be able to use the string of lights that he bought, as he needs to find a sequence of balls in the tree that are adequately hanging from each other, and that have precisely the diameters that the lights fit onto.For example, the first string previously shown can be placed on each of the two trees; the second one can only be placed in the second tree; the third and fourth strings cannot be placed on any tree. The following picture shows the first string placed on the first tree, and the second string placed on the second tree.Help Leonardo to know, given the string of lights and the diameterNof the largest ball that he bought, whether it is possible to place the string of lights on his tree.InputThere are multiple test cases in the input file. For each test case, the first line contains two integersNandK, withNrepresenting the maximum diameter of the balls, andKrepresenting the number of lights in the string (2 ≤ N, K≤105). The second line containsKintegersL1, L2... Lkdescribing the string of lights. The ith integerLirepresents the type of thei-th light in the string (1≤Li≤Nforibetween1andK).OutputFor each test case, write a single line containing a single character, indicating whether Leonardo can place the string of lights or not. The character must be an 'S' if Leonardo can place the string of lights, and an 'N' otherwise.ExampleInput:3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1Output:S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
  "sample_input": "Input:3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1Output:S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016L",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "3 2\r\n2 3\r\n4 4\r\n1 3 4 2\r\n5 2\r\n3 5\r\n4 2\r\n4 1\r\n6 3\r\n2 3 2\r\n8 4\r\n2 3 3 1\r\n10 10\r\n2 3 4 5 6 8 7 5 3 1",
      "expected_output": "S\r\nS\r\nS\r\nN\r\nN\r\nN\r\nS",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 4\n5 7\n9 4\n10 1 4 4\n9 7\n3 4\n6 7\n2 8\n10 3\n5 1 10\n8 5\n10 6 8 5\n6 8\n10 8 3 1 4 7 2 5 4 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "7 10\n8 6\n1 3\n10 2 4 10\n5 3\n9 5\n9 7\n2 5\n7 4\n3 9 4\n5 8\n10 2 6 8\n8 3\n5 2 9 5 8 9 7 10 5 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n7 1\n9 4\n5 1 7 4\n4 8\n6 4\n3 1\n1 6\n4 10\n10 1 1\n6 7\n10 6 9 6\n7 9\n7 8 2 3 10 6 9 10 1 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "20 35\n4 42\n19 5\n69 1 60 80\n47 84\n76 10\n30 67\n2 86\n45 59\n80 98 89\n44 45\n17 44 31 18\n84 50\n42 7 77 96 71 32 63 40 73 40",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "78 43\n7 76\n31 28\n55 82 55 97\n41 97\n29 63\n78 62\n86 36\n16 55\n27 35 4\n33 79\n94 89 69 67\n65 56\n80 29 80 91 1 42 6 97 61 23",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "61 54\n48 20\n65 37\n45 89 83 76\n2 66\n54 44\n54 4\n31 86\n51 71\n29 87 33\n39 10\n65 53 67 19\n54 92\n72 56 97 90 11 40 59 72 73 24",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 93\n88 32\n70 46\n81 65 64 73\n65 7\n70 32\n84 42\n58 3\n83 66\n72 71 32\n58 40\n76 36 72 53\n91 77\n31 98 82 62 59 26 45 37 47 37",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "33 43\n19 56\n27 3\n8 51 16 67\n71 40\n2 25\n31 7\n17 44\n48 70\n64 100 49\n56 66\n59 10 38 89\n69 42\n17 40 91 23 3 77 45 97 19 14",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "344 215\n124 142\n97 63\n114 240 246 354\n470 338\n107 262\n300 291\n197 336\n468 181\n406 428 473\n154 143\n73 320 500 64\n418 464\n497 301 251 320 176 485 492 194 495 426",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "229 168\n483 184\n239 348\n366 489 393 383\n443 432\n175 378\n51 214\n159 168\n479 159\n426 349 79\n275 133\n443 138 289 129\n177 188\n418 311 59 367 232 203 129 444 292 493",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "424 411\n259 90\n118 339\n429 407 275 107\n482 182\n395 414\n168 268\n253 374\n171 491\n197 318 327\n203 466\n311 135 418 494\n291 229\n486 167 350 468 354 339 165 70 342 401",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "326 308\n476 286\n305 224\n317 313 451 369\n159 447\n81 171\n135 198\n491 289\n282 208\n477 500 312\n110 337\n366 190 375 127\n239 124\n87 189 165 463 357 440 431 144 353 361",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "118 340\n326 426\n153 109\n103 152 274 451\n324 416\n171 345\n220 289\n311 270\n447 191\n168 113 306\n380 327\n99 207 388 174\n345 310\n57 364 346 67 318 254 494 479 196 128",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "205 231\n209 318\n442 102\n108 395 223 209\n395 331\n268 407\n182 66\n266 87\n309 358\n419 379 424\n95 417\n211 147 266 56\n289 459\n225 378 433 230 470 236 85 72 332 136",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "236 495\n448 371\n417 347\n393 130 458 245\n345 121\n482 323\n489 161\n415 250\n70 154\n183 299 105\n236 349\n98 360 194 334\n244 71\n479 190 493 62 453 457 184 93 321 358",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n1 2\n999 1000\n1000 999 1 1\n1000 999\n1000 1\n1000 1000\n2 999\n2 999\n1 1000 1000\n999 999\n999 1000 1000 2\n999 1\n2 2 999 1 1 999 2 1000 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999\n1 2\n1000 2\n1000 1 1000 2\n1 999\n1 1000\n1000 2\n1000 2\n1000 999\n1000 999 999\n1000 1\n1 1000 1000 1\n2 1\n1 1 2 2 999 1 1 999 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}