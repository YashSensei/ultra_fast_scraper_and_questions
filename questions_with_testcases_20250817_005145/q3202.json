{
  "problem_code": "problems",
  "title": "Halt The War",
  "tags": [],
  "text": "The war was terrible, thousands of humans and rainbow people lying down on the streets.\r\nRonny didn’t know what to do, so he decided to go and search for the Rainbowland Castle\r\nand talk to the King. The rainbowlandians stared at Ronny with caution, waiting him to do\r\nsomething bad just to get him and rainbow-kill him. Finally, Ronny made it to the King’s room\r\nand talked to him about stopping this horrible war. The King accepted Ronny’s proposal, but\r\nonly with one condition, Ronny needed to prove once again what human beings were capable\r\nof. The King said that if Ronny answered the Q queries that he had for him about an order\r\nline of rainbow people numbered from 1 to N , he and his nation would go away. These rainbow\r\npeople had a letter with a number on it (Initially this number it’s 0).There are two types of queries, modification queries and answer queries. The modification\r\nqueries consists on, given an interval from A to B inclusive ([A,B]), Ronny needed to update\r\nthose rainbow people’s letter, adding one to the number on it; so, by instance, if the interval is\r\n[1,2], then Ronny needed to add one to the first and second rainbowlandian on the line. The\r\nanswer queries consists on, given an interval from A to B inclusive, Ronny should say the sum\r\nof every rainbow people’s letter.If Ronny can do this, the humans are saved! So he need your help, because he is not really that\r\ngood in maths and fast sums.InputThe first line contains an integer T, which specifies the number of test cases. Then will follow\r\nthe descriptions of T test cases.For each test case you will get an integer N and an integer Q, that represents the number of\r\nrainbowlandian in the line and the number of queries the King asks for. Then, Q lines will\r\nfollow, each containing a string and 2 integers, the type of query, that can be \"modification\"\r\nor \"answer\" (Quotes for clarity), the first and the last rainbowlandian that Ronny must have<\r\nin mind in order to answer the query.OutputFor each input case you must print the string \"Scenario #i:\" where i is the number of the\r\ntest case (Starting by 1), followed by Q lines with the answer of each query. If the query was\r\na modification query, then you should output \"OK\" (Quotes for clarity), otherwise, output the\r\nsum of the number from A to B inclusive.SampleInput:2\r\n4 4\r\nanswer 1 4\r\nmodification 1 2\r\nmodification 2 3\r\nanswer 2 2\r\n8 6\r\nmodification 2 4\r\nmodification 4 8\r\nmodification 4 5\r\nanswer 8 8\r\nmodification 5 7\r\nanswer 4 8Output:Scenario #1:\r\n0\r\nOK\r\nOK\r\n2\r\nScenario #2:\r\nOK\r\nOK\r\nOK\r\n1\r\nOK\r\n11Constraints1 ≤ T ≤ 1001 ≤ N ≤ 100,0001 ≤ Q ≤ 100,000",
  "sample_input": "Input:2\r\n4 4\r\nanswer 1 4\r\nmodification 1 2\r\nmodification 2 3\r\nanswer 2 2\r\n8 6\r\nmodification 2 4\r\nmodification 4 8\r\nmodification 4 5\r\nanswer 8 8\r\nmodification 5 7\r\nanswer 4 8Output:Scenario #1:\r\n0\r\nOK\r\nOK\r\n2\r\nScenario #2:\r\nOK\r\nOK\r\nOK\r\n1\r\nOK\r\n11",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CDC12_H",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "2\r\n4 4\r\nanswer 1 4\r\nmodification 1 2\r\nmodification 2 3\r\nanswer 2 2\r\n8 6\r\nmodification 2 4\r\nmodification 4 8\r\nmodification 4 5\r\nanswer 8 8\r\nmodification 5 7\r\nanswer 4 8",
      "expected_output": "Scenario #1:\r\n0\r\nOK\r\nOK\r\n2\r\nScenario #2:\r\nOK\r\nOK\r\nOK\r\n1\r\nOK\r\n11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n10\n6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n8\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n58589427\n39940821\n49706047\n38435971\n29690371\n46935446\n89325687\n82958339",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n46929315\n56287807\n67792335\n78162956\n15691094\n41941003\n29553594",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n39435643\n34961619\n87071800\n73906832\n58347000\n61501547\n60376595\n49643614\n4046766\n19712763\n17120028",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n81167262\n20071114\n19617346\n54111045\n37810147\n14027251",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n35273876\n5622248\n71435256\n60766113\n82235493\n61089133\n56012102\n30241217\n18534440\n71466835\n73131089\n77317547\n53260901\n26517916\n22742266",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "79\n13243\n62505\n34460\n82152\n89147\n18550\n79292\n50871\n62212\n52028\n54003\n7372\n20023\n72111\n87827\n91838\n61501\n53056\n73060\n46119\n2334\n8080\n44110\n81831\n10565\n19999\n79516\n23927\n34092\n3924\n24027\n51889\n1181\n97711\n66784\n65296\n3722\n33466\n61459\n81580\n98494\n7379\n10781\n95264\n90704\n48044\n66506\n92994\n28598\n94414\n4871\n58795\n91582\n73571\n28353\n32639\n36665\n13768\n11973\n29171\n23114\n37138\n63102\n71585\n6067\n1869\n81840\n46674\n77851\n79951\n30705\n94241\n77180\n63640\n85072\n23538\n16969\n25299\n6117",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "94\n99714\n41618\n92689\n52505\n91258\n69328\n34006\n12531\n25736\n4841\n73112\n4968\n37886\n5407\n11305\n82364\n56925\n47261\n76855\n40547\n61716\n40862\n43944\n41939\n16251\n84730\n83914\n46280\n91020\n10359\n11055\n47398\n56016\n59859\n85413\n23971\n16223\n93846\n32167\n21403\n89729\n75453\n9604\n84657\n67387\n16674\n19136\n7460\n44301\n25515\n5263\n17707\n45803\n29778\n89880\n62186\n78940\n19011\n7864\n46639\n67443\n31512\n67614\n14033\n84961\n45783\n43464\n21900\n99857\n79270\n23413\n63226\n66498\n5853\n11308\n29549\n81484\n6881\n74198\n52490\n44981\n89169\n66815\n1052\n25811\n55880\n30597\n34734\n63777\n38046\n6034\n41468\n65688\n78467",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "68\n13512\n17751\n47925\n12469\n95598\n43235\n20825\n98629\n30201\n19351\n58995\n79043\n17594\n95579\n34620\n53498\n51634\n7610\n22711\n38809\n17686\n662\n22964\n33586\n10354\n64548\n35290\n5745\n66978\n49223\n19436\n76189\n16641\n91140\n94457\n95659\n59266\n50635\n60831\n24472\n49976\n38572\n97806\n8165\n72895\n10037\n47783\n93286\n73375\n911\n55432\n22012\n82457\n63311\n47932\n38655\n68316\n85864\n84454\n63248\n12696\n93736\n17275\n52267\n60784\n16942\n34272\n94844",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "41\n19781\n91554\n38591\n91432\n19469\n56405\n73882\n10799\n98030\n8691\n47653\n82066\n26253\n28504\n859\n12626\n39185\n42657\n31212\n67516\n45010\n42546\n79458\n59080\n75970\n47017\n19486\n38723\n63827\n26476\n3902\n22020\n9981\n44096\n94190\n86008\n45217\n70608\n66532\n35879\n26767",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "66\n75062\n84598\n63132\n45570\n31253\n12563\n69312\n90624\n66014\n22472\n59590\n20602\n59240\n65572\n2388\n73656\n57909\n70447\n29433\n25467\n34455\n66976\n87695\n67000\n10089\n15789\n72848\n2801\n53175\n77750\n86048\n81562\n23147\n10036\n60449\n46879\n7846\n34996\n63462\n41428\n16391\n71651\n34057\n79840\n65853\n51304\n33220\n83221\n69205\n61524\n23945\n67349\n56404\n58693\n69954\n15892\n63714\n88638\n70561\n93259\n23101\n43396\n41130\n48075\n69300\n57813",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "76\n50608\n92627\n98197\n10402\n49640\n96756\n437\n20562\n3794\n7888\n29056\n20825\n31470\n91070\n69555\n82544\n7733\n17033\n16258\n55800\n28922\n1454\n66969\n39220\n66946\n32173\n50441\n7359\n61059\n58449\n41444\n45425\n97711\n38938\n93075\n19419\n59706\n83794\n98786\n20\n31543\n50495\n64906\n65569\n4089\n93598\n43459\n79896\n37127\n76742\n46760\n49480\n92570\n96570\n70468\n45680\n11469\n89865\n59849\n15667\n83905\n66490\n73471\n58557\n74669\n40952\n7974\n93637\n7756\n18796\n84093\n8509\n24026\n61878\n12716\n66402",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "58\n32525\n32609\n94803\n45974\n5903\n5047\n24620\n84629\n28366\n56681\n21492\n21531\n40333\n69899\n14134\n60775\n51335\n932\n27275\n20578\n16478\n69333\n30690\n95652\n36821\n83164\n11701\n65246\n78924\n4932\n78246\n25297\n69755\n32108\n81799\n74660\n16228\n64664\n77802\n17815\n48105\n83613\n80253\n25916\n60224\n44140\n35341\n5835\n2958\n55898\n98508\n92884\n15353\n24575\n42516\n9986\n30108\n32415",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n95045607\n67510057\n18056056\n92580729\n27579316\n63365461\n34089181\n50467649\n23773899\n14417057\n95159568\n12942980\n8923694\n81779901\n10196819\n20142455\n56683250\n24896868\n19865103\n78261722\n93322494\n21820709\n17024342\n46130957\n43096214\n89400326\n81210917\n53321468\n27020814\n82825501\n84119420\n43115769\n35797497\n96985726\n92073277\n8292300\n12677051\n75793870\n84369124\n29358240\n31221998\n68903567\n47339345\n97494376\n76118647\n7087633\n70379863\n31940573\n96261214\n98727727\n42642998\n17367354\n6370613\n34560883\n45876209\n62893878\n17060779\n77927453\n79894808\n84576479\n89841833\n28453657\n88435072\n35909076\n87806110\n92483246\n31502757\n63634838\n90988760\n24692430\n40799617\n7805042\n36487340\n72444735\n32418408\n6059203\n68773929\n33752097\n41480301\n30572028\n43737162\n62666188\n49747484\n88133911\n16638618\n1546730\n34451665\n78110385\n254310\n29838741\n11621114\n13847609\n34091238\n92251757\n31120305\n66402642\n88244893\n69302713\n90314907\n71409435",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n52448797\n62163696\n75578181\n49616747\n19050474\n6710430\n38265211\n62277683\n2399051\n42646114\n75862528\n38077627\n70875367\n33734599\n22933883\n40062798\n32835403\n82329233\n19149728\n22637632\n44220874\n30951028\n27260897\n90127208\n99880399\n74517089\n38747925\n33867876\n55024201\n25763012\n53712515\n60834838\n19150492\n16395101\n54083200\n4784923\n62648822\n22421534\n50961541\n31558258\n86248438\n84686708\n40021201\n18112652\n34587625\n3620746\n19762364\n57747738\n31705796\n96797584\n25826803\n71771029\n85663102\n12381360\n68989523\n18516558\n50525454\n26199169\n82420652\n30658039\n32637365\n65439339\n738929\n22235166\n10936919\n13177959\n63570599\n6913961\n18385422\n24528923\n47768763\n916510\n66049094\n53549669\n47547899\n54427210\n3079603\n33953257\n78639493\n52443883\n88794818\n10146611\n37125467\n48832050\n69031533\n47573104\n23353331\n13236960\n62364561\n53686200\n49156675\n31670364\n18187489\n63780211\n20438013\n53398834\n6652995\n34163782\n67096445\n35816052",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "1\n68330753",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "2\n100000000\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 2)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}