{
  "problem_code": "problems",
  "title": "Boolean Logic",
  "tags": [],
  "text": "Propositions are logical formulas consisting of proposition symbols and connecting operators.\r\nThey are recursively defined by the following rules:All proposition symbols (in this problem, lower-case alphabetic characters, e.g.,aandz) are propositions.IfPis a proposition,(!P)is a proposition, andPis a direct subformula of it.IfPandQare propositions,(P&Q),(P|Q),(P-->Q), and(P<->Q)are propositions, andPandQare direct subformulas of them.Nothing else is a proposition.The operations!,&,|,-->, and<->denote logical negation, conjunction, disjunction, implication, and equivalence, respectively.\r\nA propositionPis a subformula of a propositionRifP=RorPis a direct subformula of a propositionQandQis a subformula ofR.LetPbe a proposition and assign boolean values (i.e.,0or1) to all proposition symbols that occur inP.\r\nThis induces a boolean value to all subformulas ofPaccording to the standard semantics of the logical operators:negationconjunctiondisjunctionimplicationequivalence!0=10&0=00|0=00-->0=10<->0=1!1=00&1=00|1=10-->1=10<->1=01&0=01|0=11-->0=01<->0=01&1=11|1=11-->1=11<->1=1This way, a value forPcan be calculated.\r\nThis value depends on the choice of the assignment of boolean values to the proposition symbols.\r\nIfPcontainsndifferent proposition symbols, there are2ndifferent assignments.\r\nTo evaluate all possible assignments we may use truth tables.A truth table contains one line per assignment (i.e.,2nlines in total).\r\nEvery line contains the values of all subformulas under the chosen assignment.\r\nThe value of a subformula is aligned with the proposition symbol, if the subformula is a proposition symbol, and with the center of the operator otherwise.Input SpecificationThe input contains several test cases, each on a separate line.\r\nEvery test case denotes a proposition and may contain arbitrary amounts of spaces in between.\r\nThe input file terminates immediately after the newline symbol following the last test case.Output SpecificationFor each test case generate a truth table for the denoted proposition.\r\nStart the truth table by repeating the input line.\r\nEvaluate the proposition (and its subformulas) for all assignments to its variables, and output one line for each assignment.\r\nThe line must have the same length as the corresponding input line and must consist only of spaces and the characters0and1.\r\nOutput an empty line after each test case.Lets1,...,snbe the proposition symbols in the denoted proposition sorted in alphabetic order.\r\nThen, all assignments of0tos1must precede the assignments of1tos1.\r\nWithin each of these blocks of assignments, all assignments of0tos2must precede the assignments of1tos2, and so on.Sample Input((b --> a) <-> ((! a) --> (! b)))\r\n  ((y &  a)   -  ->(c |c))Sample Output((b --> a) <-> ((! a) --> (! b)))\r\n  0  1  0   1    1 0   1   1 0   \r\n  1  0  0   1    1 0   0   0 1   \r\n  0  1  1   1    0 1   1   1 0   \r\n  1  1  1   1    0 1   1   0 1   \r\n\r\n  ((y &  a)   -  ->(c |c))\r\n    0 0  0       1  0 00  \r\n    1 0  0       1  0 00  \r\n    0 0  0       1  1 11  \r\n    1 0  0       1  1 11  \r\n    0 0  1       1  0 00  \r\n    1 1  1       0  0 00  \r\n    0 0  1       1  1 11  \r\n    1 1  1       1  1 11",
  "sample_input": "((b --> a) <-> ((! a) --> (! b)))\r\n  ((y &  a)   -  ->(c |c))",
  "sample_output": "((b --> a) <-> ((! a) --> (! b)))\r\n  0  1  0   1    1 0   1   1 0   \r\n  1  0  0   1    1 0   0   0 1   \r\n  0  1  1   1    0 1   1   1 0   \r\n  1  1  1   1    0 1   1   0 1   \r\n\r\n  ((y &  a)   -  ->(c |c))\r\n    0 0  0       1  0 00  \r\n    1 0  0       1  0 00  \r\n    0 0  0       1  1 11  \r\n    1 0  0       1  1 11  \r\n    0 0  1       1  0 00  \r\n    1 1  1       0  0 00  \r\n    0 0  1       1  1 11  \r\n    1 1  1       1  1 11",
  "link": "https://www.spoj.com/problems/BOOLE",
  "scraped_at": "2025-08-17 00:34:27",
  "test_cases": [
    {
      "input": "((b --> a) <-> ((! a) --> (! b)))\r\n  ((y &  a)   -  ->(c |c))",
      "expected_output": "((b --> a) <-> ((! a) --> (! b)))\r\n  0  1  0   1    1 0   1   1 0   \r\n  1  0  0   1    1 0   0   0 1   \r\n  0  1  1   1    0 1   1   1 0   \r\n  1  1  1   1    0 1   1   0 1   \r\n\r\n  ((y &  a)   -  ->(c |c))\r\n    0 0  0       1  0 00  \r\n    1 0  0       1  0 00  \r\n    0 0  0       1  1 11  \r\n    1 0  0       1  1 11  \r\n    0 0  1       1  0 00  \r\n    1 1  1       0  0 00  \r\n    0 0  1       1  1 11  \r\n    1 1  1       1  1 11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "lpua bhh hg yxzth snglv ro uigop sisx xhqs\npqhwv bkaw ffeu bzdnz alk fgk",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "pguq rtlxq zk wyak oprn ro grzmy fzr ys\ncws xsuxb jdp p ybunv agfvy",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "b hx mhm ozdc qegxs o mwi ycgu nnc\nzalxq j tm e pmwfc zouhj",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "gwhb ld l ypqk ngf pqyej y coev fkt\njq d ggr zqco ag lg",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ju bq zhvgr uq jgjp xox utuj d ssuid\nkvv ch f hwb jm iy",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "cgs dl kwne mtpv nane im v f e\ns sxyru tvmiq z pv igyk",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "jybx wzy yj ljrhx drmz o x cm kn\nqfhzr flpl rzob dzu dwvwk xs",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "aqt vm vpz vcmq d fvgvo ja jqre k\nke l z ktme hs kfrcb",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "pcw v ozei o g f xpg oq hfdgc\nmmr e qfrc fp zds bl",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "dza d xhan dkmmb c iroi u xp sr\nnwjny mbo ad qbu gb nn",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "bmv qqkl fe qoq wzmy qkp cdyc v pfzk\ncsff lbhld mldmc rjnyg zvj b",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "sys a j bgh zfdra w fdtk vsg uk\nsdt f vz tpbqd jqx kz",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "pz dm stw rulm wjtx b febsv bbaf lelhz\nf ffbz zaxoj qx j srybg",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "w d yj lpab j ub ader vvqm vlymt\nfxv bn riz kazfj ldd mey",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "zfhz xpl kjyt pdtrh maxs vftb e z kz\ni qay i u pr h",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "dptxk byfg a hw z i nw jz bh\nzox l trsco wybo qelt xvlbl",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "vtv q xjzrb ud vtrm ppvbz dun ckpz on\nbl c bdb dtzwv qzfuo h",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "jfz npu wk jng kf m u nep w\nzxssp drfe vq r lvx e",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "gx nrnjp ti vfqdc e i a avjh pstw\nfo yob m j kxwpr ptjjd",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}