{
  "problem_code": "problems",
  "title": "The hunt for Gollum",
  "tags": [],
  "text": "Along the skirts of the Dead Marshes I followed it, and then I had him. Lurking by a stagnant mere, peering in the water as the dark eve fell, I caught him, Gollum. He was covered with green slime. He will never love me, I fear; for he bit me, and I was not gentle. Nothing more did I ever get from his mouth than the marks of his teeth.“The Lord of the Rings: The fellowship of the Ring”Hearing Gandalf’s advice, Aragorn has started hunting creature Gollum. After several days following his footprints, he has arrived to the Dead Marshes. He has a map of the marshes, that can be viewed as an M1× M2matrix containing lowercase letters form English alphabet (i.e. letters from ‘a’ to ‘z’).Being a skilled ranger, Aragorn has been able to fully characterize Gollum preferred place (if you are interested, you should know that it must be dark, wet, creepy and full of fishes!). It can be described as an N1× N2matrix containing lowercase letters form English alphabet.Your task is simple: write a program that, given Gollum’s preferred place description and Aragorn’s map, output all possible locations of the creature.Let’s look at an example: suppose Gollum’s preferred place is described by the following 3 × 3 matrix:ababababaand that Aragorn’s map looks something like this:aababaabababbababaababababababbababaabababThen your program must output the following: (1,2), (1,4), (2,1), (2,3), (5,1) and (5,3), these being the upper-left corners of all places on the Dead Marshes that match Gollum’s preferred place description. If none match is found, you should output the string “NO MATCH FOUND...” without the quotes.InputLine 1: Two integers: N1and N2.Lines 2… N1+ 1: A string with N2characters as described above.Lines N1+ 2: Two integers: M1and M2.Lines N1+ 3… N1+ M1+ 3: A string with M2characters as described above.Constraints1 ≤ N1, N2≤ 3001 ≤ M1* M2≤ 2000N1≤ M1N2≤ M2OutputOn each line print the upper-left corner of all places that match Gollum’s preferred place description on the form “(x,y)” without the quotes, where x stands for the row and y for the column. They should be lexicographically sorted, i.e. imagine them as an ordered pair. Then (x1, y1) < (x2, y2) if and only if x1< x2or, if they are equal, y1< y2.ExampleInput:3 3\r\naba\r\nbab\r\naba\r\n7 6\r\naababa\r\nababab\r\nbababa\r\nababab\r\nababab\r\nbababa\r\nabababOutput:(1,2)\r\n(1,4)\r\n(2,1)\r\n(2,3)\r\n(5,1)\r\n(5,3)",
  "sample_input": "Input:3 3\r\naba\r\nbab\r\naba\r\n7 6\r\naababa\r\nababab\r\nbababa\r\nababab\r\nababab\r\nbababa\r\nabababOutput:(1,2)\r\n(1,4)\r\n(2,1)\r\n(2,3)\r\n(5,1)\r\n(5,3)",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ARDA1",
  "scraped_at": "2025-08-17 00:34:18",
  "test_cases": [
    {
      "input": "3 3\r\naba\r\nbab\r\naba\r\n7 6\r\naababa\r\nababab\r\nbababa\r\nababab\r\nababab\r\nbababa\r\nababab",
      "expected_output": "(1,2)\r\n(1,4)\r\n(2,1)\r\n(2,3)\r\n(5,1)\r\n(5,3)",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 6\nnp\nyubmd\nimmep\n10 6\nfejts\nndzezeu\nwjrkpjwfspy\nhznqthvp\niba\npkjj\nfknlnvxo",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 6\nigjiae\nmze\nuajg\n2 2\nlktxcdb\nvr\nvd\nxcstdnrhipa\nb\nokvzeiood\nmxsfqe",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\nlfzfwh\nkeaz\nuegox\n1 8\njbwsvitci\nrlku\nihglu\nkczfpefzljn\nafeljlkquqc\nnpqjqxduwqac\nivh",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "65 30\nn\nib\nfnxym\n93 31\njnrttjjly\nknqqejieirv\nzhg\nqoxmy\nqkjpb\nqlsflecvsw\nagc",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "90 17\njtcwp\ndavbwb\nsreol\n41 19\nvs\nluaxev\ngctmxfeataw\npjqpbekp\ntci\nziv\nzw",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "6 45\nacootu\nnue\nqrtyn\n57 20\ngtimsp\no\nyvr\nesato\noulmzizf\npq\nzdo",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 44\nwss\nx\nyp\n100 74\nsv\nenmmoguf\nnxvskkcy\nyknvme\nk\nwal\nfbznoa",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "34 5\nui\nbnbb\nxt\n83 97\npxguonpfgl\nzbffakivd\nojlf\njc\njbzgttgqq\nswnyha\nxwiavq",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "368 140\nputos\nmnk\nztdb\n236 401\nanqbdzs\nlisyarb\nq\ntnwmdv\nc\nrfju\nzawudalmqvf",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "366 349\ngmgqq\nlaytr\nudd\n448 352\nfuvyzqssait\np\nlkbojalwhsxr\namhbctn\npr\nepjl\nchxlcywfyq",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "433 184\nhwml\nomyts\nvvr\n125 172\nldemx\nbkmfbqshumpw\nplbwotfp\ne\nfc\njxoxgqudvx\ngll",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "157 290\ndukr\ndb\ndwa\n134 277\nhbss\ndbernoire\nqwnvcccybwj\ngs\nxvliywzbfr\nhzvzm\nqlf",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "415 371\nurmfk\nhegmng\nc\n431 51\nusjkyaxiu\nddquf\nkq\nkcyo\nrhthaqm\nadq\nqoinxnl",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "422 475\nel\ntpimdm\ngv\n104 384\njvapqpul\nfeoilsvli\nizvrzcxwswia\nxsyzlg\nqnuqvnh\nwqijkvxhd\nliazjn",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "211 473\nh\nf\nznuran\n304 70\ndmuadyngkzqz\nslk\nt\nluxvgcedskpj\nabh\nenee\ndfpkh",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nej\nfmvsx\njby\n1000 1000\nm\nrmhgymisruby\nztljps\ng\nyjtcufwvhqkb\npwhkolbf\nqrzm",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\ncoyyix\nxt\nfckqd\n1000 1000\ncutbtnceyp\ntcydmj\nmmnz\ngwzjxwsn\ntdafdoyrwtkf\njn\noxqdht",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999\nkz\nba\nxsz\n999 1000\nty\nlmghmvsxt\niyb\ne\nqhczekfgpt\npe\nljvasuo",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1\ndl\nbo\nzndi\n999 999\nufzqn\nmbdmq\nefrdc\nycvfzq\nihgeuxxco\neywkla\ndsulgqzwhi",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:41"
}