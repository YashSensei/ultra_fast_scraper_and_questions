{
  "problem_code": "problems",
  "title": "Grass Planting",
  "tags": [],
  "text": "Problem descriptionFarmer John has N barren pastures (2 ≤ N ≤ 100,000) connected by N-1 bidirectional roads, such that there is exactly one path between any two pastures.  Bessie, a cow who loves her grazing time, often complains about how there is no grass on the roads between pastures.  Farmer John loves Bessie very much, and today he is finally going to plant grass on the roads.  He will do so using a procedure consisting of M steps (1 ≤ M ≤100,000).At each step one of two things will happen:FJ will choose two pastures, and plant a patch of grass along each road in between the two pastures, or,Bessie will ask about how many patches of grass on a particular road, and Farmer John must answer her question.Farmer John is a very poor counter -- help him answer Bessie's questions!Input* Line 1: Two space-separated integers N and M* Lines 2..N: Two space-separated integers describing the endpoints of a road.* Lines N+1..N+M: Line i+1 describes step i. The first character of the line is either P or Q, which describes whether or not FJ is planting grass or simply querying. This is followed by two space-separated integers Aiand Bi(1 ≤ Ai, Bi≤ N) which describe FJ's action or query.Output* Lines 1..???: Each line has the answer to a query, appearing in the same order as the queries appear in the input.ExampleInput:4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4Output:2\r\n1\r\n2[ Edited by EB ]Warning:Some input files are broken.",
  "sample_input": "Input:4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4Output:2\r\n1\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GRASSPLA",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "4 6\r\n1 4\r\n2 4\r\n3 4\r\nP 2 3\r\nP 1 3\r\nQ 3 4\r\nP 1 4\r\nQ 2 4\r\nQ 1 4",
      "expected_output": "2\r\n1\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 2\n10 2\n7 6\n2 4\n10 1\nk 9 5\n6 10\npde 4 9\n5 3\nokou 1 9\n10 8\ni 5 7\n6 4\nd 7 3\n7 4\ndoul 4 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n1 3\n6 6\n1 4\n5 2\nwz 10 10\n8 1\nbcix 9 6\n5 2\ncsxgh 8 7\n3 6\nyqh 8 1\n6 10\ni 6 4\n10 5\ne 1 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 1\n1 3\n7 1\n5 7\n2 7\nxzgpu 2 6\n2 4\npxo 8 6\n5 1\neal 3 4\n3 10\njkm 5 5\n3 9\nkxsn 5 8\n5 1\npjdvw 8 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 89\n100 1\n53 24\n57 20\n82 99\nnht 47 32\n62 63\nxjfr 16 73\n85 14\njva 64 71\n5 29\nn 78 45\n1 76\nzmp 13 30\n38 59\nvv 12 58",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "35 90\n72 65\n27 81\n88 88\n13 47\nbzyga 75 98\n49 61\nzjwaq 49 65\n21 83\nngrih 83 50\n61 35\npzkzb 40 69\n75 61\nclzeo 93 33\n49 31\ne 58 48",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 65\n94 97\n82 7\n68 46\n100 97\npeyif 7 59\n54 77\ncd 55 71\n24 45\nmiqrn 84 44\n87 98\njv 25 82\n15 56\nrxixg 53 85\n90 88\neqguh 10 86",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "80 36\n34 68\n34 100\n45 34\n77 88\nkduzb 1 57\n2 72\nkyw 25 93\n71 52\nmzals 92 99\n13 60\nbjs 41 41\n93 88\nta 20 42\n45 53\nowiye 21 15",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 95\n81 61\n20 54\n46 12\n52 29\npq 11 95\n19 56\nvmy 8 3\n75 40\nlsr 34 56\n23 34\nty 85 4\n73 82\nnz 62 43\n52 25\nza 63 35",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 30\n9 10\n19 14\n25 11\n38 16\nalr 47 50\n30 7\nfwmpe 27 44\n33 23\nufrm 39 17\n39 20\nvtr 39 47\n19 32\nlq 19 38\n23 33\ndsurg 11 38",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "20 8\n12 20\n33 16\n42 7\n8 43\nz 17 13\n26 24\nv 26 20\n36 44\nurtmr 32 12\n9 36\nmqppd 44 37\n46 30\nmpns 23 49\n15 35\nuroul 29 24",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "22 35\n49 44\n39 12\n20 40\n22 25\nhwgwf 15 9\n22 31\nsrhwi 19 22\n43 5\ndhqa 43 19\n6 29\ni 6 28\n33 32\neep 28 22\n30 20\nghri 18 14",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "30 15\n6 45\n12 45\n6 17\n33 12\nl 49 35\n18 24\nh 9 46\n42 15\nkymlr 10 24\n14 32\nwtbbl 15 23\n37 16\njtfyq 47 40\n29 49\nz 12 19",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "41 9\n17 25\n19 29\n36 34\n29 13\nk 33 41\n45 38\nrz 27 37\n13 13\ndlo 33 29\n43 21\nasv 46 14\n10 5\noxuk 28 39\n42 23\nv 47 43",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "39 33\n23 48\n21 18\n9 20\n50 37\nulr 5 46\n33 8\nvfq 25 45\n13 14\nmxw 7 8\n19 50\nl 47 27\n23 36\nhvbkb 40 46\n10 48\nzvex 7 15",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "18 7\n30 44\n11 31\n43 43\n39 27\ncit 11 15\n15 18\nmzhk 20 12\n13 9\nl 14 35\n7 49\ndc 14 7\n42 40\nvis 21 7\n16 45\nj 50 21",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\nfdxn 100 100\n100 100\ncc 100 100\n100 100\nr 100 100\n100 100\naqip 100 100\n100 100\nfa 100 100\n100 100\ng 100 100",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100\nfat 100 100\n100 100\nk 100 100\n100 100\nsupoa 100 100\n100 100\nrh 100 100\n100 100\np 100 100\n100 100\nncsy 100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 99\n100 100\n2 100\n1 99\n2 1\najb 2 1\n1 1\npbry 100 99\n99 100\nc 100 100\n99 2\nmylxw 1 2\n99 99\nk 1 1\n100 2\nhqpm 1 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 99\n100 99\n99 100\n2 99\n99 2\ndo 2 2\n2 1\nq 1 100\n1 100\ncm 100 99\n1 1\nsds 100 100\n1 1\nonp 1 2\n100 1\ngz 99 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:10"
}