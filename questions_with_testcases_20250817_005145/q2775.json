{
  "problem_code": "problems",
  "title": "Ceiling Function",
  "tags": [],
  "text": "Advanced Ceiling Manufacturers (ACM) is analyzing the     properties of its new series of Incredibly Collapse-Proof     Ceilings (ICPCs). An ICPC consists of      $n$ layers of material, each with a     different value of collapse resistance (measured as a positive     integer). The analysis ACM wants to run will take the     collapse-resistance values of the layers, store them in a     binary search tree, and check whether the shape of this tree in     any way correlates with the quality of the whole construction.     Because, well, why should it not?To be precise, ACM takes the collapse-resistance values for     the layers, ordered from the top layer to the bottom layer, and     inserts them one-by-one into a tree. The rules for inserting a     value $v$ are:If the tree is empty, make          $v$ the root of the tree.If the tree is not empty, compare          $v$ with the root of the tree. If         $v$ is smaller, insert         $v$ into the left         subtree of the root, otherwise insert          $v$ into the right subtree.ACM has a set of ceiling prototypes it wants to analyze by     trying to collapse them. It wants to take each group of ceiling     prototypes that have trees of the same shape and analyze them     together.Given a set of prototypes, your task is to determine how     many different tree shapes they induce.InputMultiple test cases. Please process until EOF is reached. For each test case:The first line contains two integers     $n$ (     $1 \\le n \\le 50$), which is the number     of ceiling prototypes to analyze, and      $k$ ($1     \\le k \\le 20$), which is the number of layers in each of     the prototypes.The next $n$ lines     describe the ceiling prototypes. Each of these lines contains     $k$ distinct integers     (between $1$ and     $10^6$, inclusive), which     are the collapse-resistance values of the layers in a ceiling     prototype, ordered from top to bottom.OutputFor each test case, display the number of different tree shapes.ExampleInput:5 3\r\n2 7 1\r\n3 1 4\r\n1 5 9\r\n2 6 5\r\n9 7 3\r\n3 4\r\n3 1 2 40000\r\n3 4 2 1\r\n33 42 17 23Output:4\r\n2",
  "sample_input": "Input:5 3\r\n2 7 1\r\n3 1 4\r\n1 5 9\r\n2 6 5\r\n9 7 3\r\n3 4\r\n3 1 2 40000\r\n3 4 2 1\r\n33 42 17 23Output:4\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FN16CEIL",
  "scraped_at": "2025-08-17 00:34:07",
  "test_cases": [
    {
      "input": "5 3\r\n2 7 1\r\n3 1 4\r\n1 5 9\r\n2 6 5\r\n9 7 3\r\n3 4\r\n3 1 2 40000\r\n3 4 2 1\r\n33 42 17 23",
      "expected_output": "4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 5\n10 1 3\n2 1 3\n8 8 9\n7 1 3\n10 5 6\n4 2\n3 1 2 2\n4 9 4 8\n10 10 3 3",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\n2 2 9\n2 2 2\n5 9 5\n3 5 3\n2 8 9\n1 1\n2 3 6 7\n3 6 8 6\n9 6 1 3",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 2\n4 5 8\n5 2 5\n4 8 6\n7 7 4\n1 9 6\n7 6\n9 4 9 9\n7 1 4 10\n2 5 10 1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "53 93\n63 26 67\n73 10 60\n84 4 67\n39 65 20\n5 42 8\n25 9\n57 34 58 31\n62 11 88 30\n80 51 83 16",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 27\n38 24 5\n24 69 92\n88 33 28\n58 60 61\n30 44 6\n40 90\n95 92 86 63\n71 64 9 38\n36 4 50 80",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "12 72\n71 72 83\n51 98 14\n39 28 70\n57 92 16\n26 87 86\n57 42\n75 21 33 93\n64 77 67 42\n39 51 63 94",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "56 39\n100 71 72\n19 69 24\n96 21 71\n54 58 18\n24 91 78\n4 70\n5 85 83 12\n100 76 34 35\n22 49 12 65",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "38 75\n76 31 19\n19 98 50\n80 72 50\n85 1 98\n36 14 30\n1 2\n65 87 8 69\n93 53 87 27\n54 20 100 19",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "218 185\n284 459 354\n405 342 224\n361 317 148\n483 446 381\n105 372 157\n456 152\n171 217 321 303\n121 463 498 360\n286 104 192 381",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "468 249\n235 87 437\n356 315 377\n194 256 262\n258 157 410\n86 347 183\n116 324\n266 261 137 61\n137 498 199 113\n434 50 456 350",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "151 346\n91 310 265\n371 99 121\n63 426 435\n355 136 153\n214 447 291\n489 368\n394 387 237 230\n279 305 224 52\n237 222 104 181",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "285 55\n387 94 141\n251 194 146\n306 205 137\n374 356 157\n326 385 114\n260 394\n58 322 124 113\n137 365 113 148\n199 306 240 221",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "484 224\n221 488 474\n58 171 187\n198 60 259\n114 267 341\n499 446 273\n126 256\n349 280 184 160\n166 69 350 111\n285 254 163 132",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "425 154\n213 296 324\n450 490 161\n200 182 219\n307 125 293\n361 81 249\n272 209\n423 116 158 255\n332 142 310 465\n383 308 215 337",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "261 184\n225 379 420\n214 346 405\n216 446 438\n195 138 369\n384 221 460\n232 296\n91 59 437 240\n484 50 293 295\n163 216 476 255",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999\n1000 2 1000\n1000 1 999\n999 1 2\n1000 1000 2\n1000 2 999\n1000 1000\n999 1000 1 1\n1 1 1000 999\n1000 1000 1 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n2 1000 999\n2 999 999\n1000 2 999\n2 999 1\n1000 2 1\n1000 2\n999 999 1000 1000\n1 999 2 1000\n1 1000 999 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:46"
}