{
  "problem_code": "problems",
  "title": "To and Fro",
  "tags": [],
  "text": "Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of\r\ncolumns and write the message (letters only) down the columns, padding with extra random letters so\r\nas to make a rectangular array of letters. For example, if the message is “There’s no place like home on\r\na snowy night” and there are five columns, Mo would write downt o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w xNote that Mo includes only letters and writes them all in lower case. In this example, Mo used the\r\ncharacter ‘x’ to pad the message out to make a rectangle, although he could have used any letter.\r\nMo then sends the message to Larry by writing the letters in each row, alternating left-to-right and\r\nright-to-left. So, the above would be encrypted astoioynnkpheleaigshareconhtomesnlewxYour job is to recover for Larry the original message (along with any extra padding letters) from the\r\nencrypted one.InputThere will be multiple input sets. Input for each set will consist of two lines. The first line will contain\r\nan integer in the range 2...20 indicating the number of columns used. The next line is a string of up\r\nto 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of\r\ninput.OutputEach input set should generate one line of output, giving the original plaintext message, with no spaces.ExampleInput:5\r\ntoioynnkpheleaigshareconhtomesnlewx\r\n3\r\nttyohhieneesiaabss\r\n0Output:theresnoplacelikehomeonasnowynightx\r\nthisistheeasyoneab",
  "sample_input": "t o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w x",
  "sample_output": "toioynnkpheleaigshareconhtomesnlewx",
  "link": "https://www.spoj.com/problems/TOANDFRO",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "t o i o y\r\nh p k n n\r\ne l e a i\r\nr a h s g\r\ne c o n h\r\ns e m o t\r\nn l e w x",
      "expected_output": "toioynnkpheleaigshareconhtomesnlewx",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "kg r h hoqvz fbww\nn d sz mmnla ed\nity hcta tsno wnwp gqu\nedy mio xkxph jeyr adfsc\nqwikh ny xsbj trhcj g\nrmc vc j i aon\nq ymmj zw fsj g",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "kxr l qpp k hdd\nobbir jxql y ybfj czbof\nxebv bxc zkkf db rc\ncte hcuto is bliaj q\nq jfaf yq rw geeg\nsfbv mduf cnek zale xk\nsqkt r of dwppw ymsv",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "teav ip bgj xol rawjw\nn m mth gagph hlt\nylz o qydqw basbo h\nhqo bsy e xpfs u\nuvk tb dxmlu aezyw r\nlrz wvezr cei ehr q\nd qjwai emiwa e wu",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "gsjj ssnpa vus nzwcy fvavd\nalui h onzl i o\nxra reqzm ztqbe q vixm\nu dbzas och qky imu\niqvcd lvvay antrx lyk ua\nz rr nnmz p rjuh\ncvzd gels ksi htw v",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "ydtbq uhhne ityf vcbow sspql\ng nlvp q zjs anzok\nnbcr ks hyv lilvh kkdp\nce d h rxj f\noln r aydh es gvu\nmhw h y euit frl\njfu oshcq viv lffs libl",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "inlj tdp jvba xbna kfwdp\ny k bm mmwcb barb\nquls lfuf ehvh cvi h\nno o lb nzul ubs\na xpgnv si sq i\ntslx cn uzcd z sph\nv v bpfj cnvk ddq",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "u cxn bkk qndp hpf\nn pflyb wyrww q xidzr\nn dsoi cx reuww q\nsodg br we pcqui skrv\nsrf uz irqjd olk sjj\nzdlgc uh hpg j nya\njs ew ysdjb zwna shl",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "dpyg rkb e do cwe\nuwhzf yysj puy r qo\nse garmb y tl kk\nulo ggsbz p d ekcpq\nj sl zs zchbi w\nkoer ey puelt luwre ezh\nbgpa k vuekr x jfct",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "g bqy j cxvns fxmb\nizu iq zzvea pxe wbz\ntcnb ylvc lsol uixj u\npigm j aceyf hs cvaqm\nsvzet zvkhy qq hwqn z\ne o ig oe mvt\nmhlgs unwm pffzd c ivm",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "vw onmk zfl cvmp t\nq awo n vrtfs e\nfzo ws gq b ck\nkmhz yc acmsd fzzy lzcdl\nq f l nrc y\na kly pgx fsz x\ntwnt kr lwwx nnt sgfle",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "vn loc cybf tj t\nfr q zrvrj yodeh fy\nqapb xyh mc jo fo\nkvtfr i jeizw pepff lbj\ndfb curfz qzs kywd a\nk nkjx rl oh wqgz\nefzm lin t jr jds",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "ogz ko mjjph dmcvp s\nw rtmbo zaaw icswy fz\nqfypk r nrfaq mo tfyk\negvtw mph oxgq n hsh\nthg ug tbd fw k\noyfq rjfz v xprn ekltj\nv xwtq juhy f qhjcn",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "hqzwi rqvj hix potkb nswlv\nkjjm wbt muxyz nmkvt e\nz zu kbxai uh gwlvu\nocsm lxcdo m dgpdl ihsc\nrgxj kjzkl qz stfjz qjie\nu vptf o x znnx\nroz sh tkfx c pc",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "k s cmerz nu xp\np kzyr zlcf yvw lcyh\ng qk ktuvy u mvr\nxgh wnp rbxdc pnf sojv\nnia gaux kkjvx baqy dx\nbjn t n hzip oi\nla gmbqq kdi dzlab t",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "eqhin bva c p xg\ni f hsjxo l omg\ng x gfgu ozao zn\nber b uhikv afwnj isei\nmtcb q z vle zwl\nsutyr mac gdib g qzik\nxyjpp qnrqt a mlelq marm",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "dze y h j twc\nfpvov w hqefy qzrld wwdx\nqci lepda e yas qtfa\nhgcdr kwne fmjfx qphl e\nf ochis kea anffh i\nrsp wopys vquh x g\nqvqi zypx jjd qpz exut",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "xuseg vvvs xisp vwo xite\nns wc dna yda tgef\ngon dnl rxm ekccz xi\nobpr chwlv ao x u\nscq axa tz mbczb x\ntflz pr w jlgo p\nfyjb ig f mfx qti",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "uchjs bmyqz ophm tr qqiz\ntpfpl dv c tp ni\nrni sac orbw ww qeltu\npyqx vsxe vkqq fu zztig\nlwjgt x ixq jkcms prt\nk m nq ptl hj\nyebat b cnwyt yhoko xmt",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "ko oym zhu kjsj o\nlkbrb s k y xtcn\nnug cg oh feuut hvot\nyy jpsu y z kdean\ncww rnkzz wzk qsb rg\nlfoba jsc qnl pos tho\njtye qgbpm xt ci t",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}