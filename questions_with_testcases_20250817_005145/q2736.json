{
  "problem_code": "problems",
  "title": "Friendship",
  "tags": [],
  "text": "I live for a world full of chaos, mayhem is my dream. Sadly, friendship bonds keep the world together. This has to end.Initially, there areNpeople living in the world, and I know the strength of each one and the friendship bonds between them. A group of connected people will sum up their strengths if attacked (the power of friendship...disgusting, right?), so I'm interested in the strength of full groups of connected people, specially in the maximum strength of a group.I have already set a plan of action, the order in which I will destroy friendships! But, turns out, that when one destroys friendships, people may react and increase or decrease their strength. I need your help to find out how successful my plan is.I'll give you the initial information (strengths and bonds) and a list ofQevents, each event will be either a destruction event, or a strength change event.I need to know the maximum strength of a group after each event.InputThe first line of input consists of two integersNandM, the number of people and the initial number of bonds respectively.Next line will containNintegers s1, s2... sNseparated with exactly one white space, being sithe initial strength of the i-th person.NextMlines will contain two integers aiand bi, representing a friendship bond between those two people.The next line will contain a single integerQ, the number of events.The following Q lines will be either:1 k: Indicating the destruction of bond number k (in the input order)2 p x: Indicates that the person p changed her strength to xOutputPrint Q lines, the maximum strength of a group after each event.ExampleInput:5 6\r\n3 3 3 3 3\r\n1 2\r\n1 3\r\n2 3\r\n2 5\r\n3 4\r\n4 5\r\n5\r\n2 1 2\r\n1 5\r\n1 4\r\n2 4 8\r\n2 3 7Output:14\r\n14\r\n8\r\n11\r\n12Constraints1 ≤ N, M, Q ≤ 1051 ≤ si, xi≤ 1051 ≤ ai, bi≤ N1 ≤ ki≤ M1 ≤ pi≤ Nevery bond will be deleted at most once.between two people there is at most one bond.",
  "sample_input": "Input:5 6\r\n3 3 3 3 3\r\n1 2\r\n1 3\r\n2 3\r\n2 5\r\n3 4\r\n4 5\r\n5\r\n2 1 2\r\n1 5\r\n1 4\r\n2 4 8\r\n2 3 7Output:14\r\n14\r\n8\r\n11\r\n12",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VZLA2019F",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "5 6\r\n3 3 3 3 3\r\n1 2\r\n1 3\r\n2 3\r\n2 5\r\n3 4\r\n4 5\r\n5\r\n2 1 2\r\n1 5\r\n1 4\r\n2 4 8\r\n2 3 7",
      "expected_output": "14\r\n14\r\n8\r\n11\r\n12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6\n8 7 1 4 4\n4 6\n2 3\n1 6\n4 4\n9 10\n8 8\n4\n1 6 6\n5 9\n5 6\n6 3 7\n10 10 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n7 5 4 3 4\n6 2\n8 3\n8 4\n6 8\n7 5\n6 4\n7\n6 5 3\n1 1\n3 3\n1 4 10\n3 8 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 3\n4 7 4 3 9\n1 8\n4 10\n3 4\n8 8\n6 2\n4 8\n10\n7 4 1\n10 10\n9 1\n10 4 2\n3 9 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 31\n48 38 9 34 39\n10 59\n59 83\n65 84\n95 45\n85 32\n1 25\n22\n59 95 6\n56 73\n7 50\n45 80 75\n58 16 73",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n22\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "26 60\n47 73 51 13 24\n20 66\n5 3\n72 77\n15 61\n86 36\n85 59\n2\n36 12 38\n72 58\n97 98\n5 51 84\n10 26 83",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "72 15\n23 73 32 11 31\n32 70\n54 94\n96 52\n10 51\n61 78\n23 92\n3\n58 67 68\n63 40\n14 35\n90 3 6\n23 47 18",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "55 81\n58 52 41 67 90\n92 72\n25 72\n69 20\n27 90\n39 90\n90 48\n79\n93 67 4\n5 27\n3 99\n60 14 90\n30 99 58",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n79\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "49 16\n32 75 74 83 5\n99 61\n36 41\n75 82\n74 71\n79 53\n83 100\n63\n20 27 15\n1 81\n8 18\n98 66 55\n58 93 85",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n63\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "478 345\n163 498 344 456 344\n414 138\n145 84\n197 370\n172 286\n154 385\n111 398\n93\n378 119 101\n65 394\n242 282\n107 356 346\n201 470 87",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n93\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "178 228\n167 152 312 216 465\n75 362\n164 148\n397 222\n226 144\n316 396\n176 262\n435\n469 144 225\n195 188\n441 310\n246 424 436\n232 406 465",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n435\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "243 266\n327 476 192 377 115\n263 364\n476 109\n267 90\n333 356\n447 178\n98 383\n302\n432 469 439\n157 176\n57 248\n289 333 466\n370 449 224",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n302\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "482 224\n452 406 72 164 163\n484 376\n175 457\n359 413\n374 447\n369 216\n309 333\n490\n350 242 268\n236 422\n496 362\n492 331 109\n464 373 375",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n490\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "493 108\n351 301 373 186 410\n496 439\n53 223\n447 473\n446 474\n301 492\n358 61\n252\n261 261 446\n120 182\n277 349\n84 265 478\n184 416 429",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n252\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "446 244\n460 366 311 366 439\n462 350\n90 324\n231 303\n241 440\n268 238\n326 467\n203\n432 467 320\n96 417\n260 321\n394 113 235\n122 363 341",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n203\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "316 271\n450 483 271 367 119\n352 335\n173 219\n239 477\n120 316\n70 272\n306 189\n162\n329 206 245\n251 377\n50 415\n258 399 479\n419 272 134",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n162\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000\n1000 1000 1000\n1000 1000\n1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n1000 999 1000 999 2\n999 2\n1000 2\n1 1\n1 1\n2 999\n999 1000\n999\n999 1000 1000\n999 1000\n1 999\n1 2 999\n1 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n999\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2\n2 1000 999 1000 1000\n1000 1\n1000 999\n1 1\n1000 1000\n999 1\n1 2\n2\n1000 999 999\n999 999\n999 1000\n1000 1000 999\n999 999 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:45"
}