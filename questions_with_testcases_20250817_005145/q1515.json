{
  "problem_code": "problems",
  "title": "Pripyat",
  "tags": [],
  "text": "Pripyat is an abandoned city in Ukraine. On April 27, 1986, the whole population of Pripyat was evacuated because of the Chernobyl nuclear power plant accident.Today (April 26) is the 32nd anniversary of the Chernobyl nuclear disaster, and Duck plans to visit Chernobyl to know more about this disaster. He has a list ofNmust-visit places in Pripyat, with its excitation levelEXC, time required to visitVTand radiation levelRL. Of course, sometimes it is impossible to visit all places because of limited visiting time and the danger of radiation. Given his maximum of available time to visitMVTand tolerance to radiation levelTRL, can you help him to select some places to visit so that the total EXC is maximized and the VT and RL are less than or equal to the given limit.Based on your finding, given a matrixMXshowing some barriers that are not allowed to pass through, Duck's hotel location and all must-visited places' location, determine the minimum distance to be moved to visit all the selected places starting from his hotel location. Duck can only move to adjacent cells that share one edge horizontally or vertically, and he can only visit the selected place once. That is, he cannot pass through the selected place twice or more. Also, he cannot pass through the unselected places.InputThe first line is the number of test casesT. (1 ≤ T ≤ 25)For each test case, it starts with two integers: number of must-visit placesN(1 ≤ N ≤ 20) and his maximum of available time to visitMVT(1 ≤ MVT ≤ 100) , and one real number: tolerance to radiation levelTRL. (0.01 ≤ TRL ≤ 10)Following N lines, each showing ith place's information, consisting of two integers: excitation levelEXC(1 ≤ EXC ≤ 100) and time required to visitVT(1 ≤ VT ≤ 100), and one real number: radiation levelRL. (0.01 ≤ RL ≤ 10)After that, a line consists of two integers: number of rows of the matrixR, and number of columns of the matrixC. (1 ≤ R, C ≤ 50)Next R lines, each has C characters, representing the map of PripyatMX. '+' means hotel location, '.' means available cells Duck can walk, '#' means barriers Duck cannot pass through, and N consecutive upper letters counting from A corresponding to ith place, eg. A = 1 (N1), B = 2 (N2) and so on up to T = 20 (N20).It is guaranteed that R × C ≥ N + 1, and all real numbers are with at most two digits after the decimal point.OutputOne integer indicating the minimum distance to be moved to visit all the selected places starting from his hotel location. If there are multiple combinations, choose the first in alphabetical order.If no places are selected, output '0'; if it is impossible to visit all selected places, output '-1' (without quotes).ExampleInput:2\r\n\r\n5 8 0.8\r\n3 1 0.04\r\n9 9 0.1\r\n4 2 0.12\r\n10 5 0.2\r\n7 2 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#.C\r\n..A.....#.\r\n..##.##.##\r\n....#..E..\r\n#.........\r\n#.....##..\r\n#..#..D...\r\n\r\n5 18 1.6\r\n8 6 0.04\r\n9 9 0.1\r\n4 5 0.12\r\n10 5 0.2\r\n3 1 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#..\r\n........#.\r\n..########\r\n....#...DE\r\n#.......##\r\n#.##..###A\r\n...#..C...Output:17\r\n-1ExplanationIn test case 1, A, D, E are selected and the minimum distance to visit all of them from '+' is 17.In test case 2, A, C, D, E are selected. But D blocks E and C blocks A, it is impossible to visit all selected places once only. Duck has to visit C twice or D twice.",
  "sample_input": "Input:2\r\n\r\n5 8 0.8\r\n3 1 0.04\r\n9 9 0.1\r\n4 2 0.12\r\n10 5 0.2\r\n7 2 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#.C\r\n..A.....#.\r\n..##.##.##\r\n....#..E..\r\n#.........\r\n#.....##..\r\n#..#..D...\r\n\r\n5 18 1.6\r\n8 6 0.04\r\n9 9 0.1\r\n4 5 0.12\r\n10 5 0.2\r\n3 1 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#..\r\n........#.\r\n..########\r\n....#...DE\r\n#.......##\r\n#.##..###A\r\n...#..C...Output:17\r\n-1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PRIPYAT",
  "scraped_at": "2025-08-17 00:33:40",
  "test_cases": [
    {
      "input": "2\r\n\r\n5 8 0.8\r\n3 1 0.04\r\n9 9 0.1\r\n4 2 0.12\r\n10 5 0.2\r\n7 2 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#.C\r\n..A.....#.\r\n..##.##.##\r\n....#..E..\r\n#.........\r\n#.....##..\r\n#..#..D...\r\n\r\n5 18 1.6\r\n8 6 0.04\r\n9 9 0.1\r\n4 5 0.12\r\n10 5 0.2\r\n3 1 0.02\r\n8 10\r\n.B...#....\r\n...#.+.#..\r\n........#.\r\n..########\r\n....#...DE\r\n#.......##\r\n#.##..###A\r\n...#..C...",
      "expected_output": "17\r\n-1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n3\n6\n1",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "4\n6\n8\n3\n2",
      "expected_output": "0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n3\n3\n6\n5\n4",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "15\n75231592\n17794214\n47068144\n76238414\n44873101\n64968775\n85680329\n39583605\n71286598\n20137970\n69670757\n88231644\n466396\n40097335\n74678893",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n77946196\n20917915\n9513065\n70549130\n8268569\n66682202\n73707993\n37527461\n94564186\n81878047\n60025587\n75253346\n56261432\n5118406\n84884190\n15846834\n52299421\n82820003\n5676814\n78913879",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n83830888\n9070508\n81280302\n17755443\n9171471\n48398549",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n92368275\n57259035\n7776963\n98004274\n13813582\n69484057\n31776783\n52140748\n54348603\n32955760\n68627540\n63506571\n50022442\n40600856\n80322973\n66247867\n99524781\n8935358",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n18819817\n37849292\n51041090\n31469967\n34978476\n64351787\n50399506\n86838577\n76860429",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n20820\n80026\n32183\n77461\n84716\n86839\n71408\n95875\n69232\n42778\n73733\n76233\n59920\n6952\n66496\n3070\n84161\n70623\n38567\n63959",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n83299\n13543\n2509\n23018\n75173\n96525\n59442\n81250\n18219\n85925\n60580\n43918\n72028\n80535\n7796\n46804\n45898\n56386\n63506\n43533",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n42269\n71392\n14654\n95171\n75843\n73238\n35004\n57440\n23192\n29715\n63677\n5104\n54739\n79777\n96201\n7303\n58062\n13320\n32068\n27656",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n2910\n10951\n18979\n9226\n3025\n25611\n47556\n60097\n35881\n64702\n6292\n36523\n74928\n96964\n67652\n21423\n73741\n45088\n96625\n32162",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n29363\n84200\n81206\n5804\n79950\n50477\n99032\n42184\n65152\n67814\n99061\n53186\n45530\n52916\n36667\n17756\n82040\n80752\n69886\n17807",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n13392\n90560\n37105\n69527\n52084\n18711\n98981\n95649\n50616\n3018\n85878\n71475\n58867\n69905\n20496\n61784\n19473\n7325\n24111\n43581",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n54491\n46003\n15019\n50832\n36618\n68015\n48458\n75390\n45830\n85011\n98683\n36994\n71665\n22156\n46923\n60576\n49513\n76758\n8302\n25900",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n98879376\n22288453\n43885937\n27452448\n23084092\n88878402\n53706684\n97804233\n19091551\n95568635\n6198916\n67508932\n34958979\n11126014\n55290999\n57924097\n81709473\n69036913\n76728064\n36445155",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n80288721\n92169646\n77570843\n70666169\n40659858\n65070117\n98033807\n54510332\n15508687\n59665748\n13361016\n20854013\n34136832\n39930237\n15637188\n66160743\n24478602\n96028540\n38226264\n51511603",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "2\n1\n100000000",
      "expected_output": "0\n0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:06"
}