{
  "problem_code": "problems",
  "title": "Lennys Lucky Lotto Lists",
  "tags": [],
  "text": "Lotto is a lottery, typically with an accumulating jackpot, in which participants play numbers of their choice in a random drawing. Lenny likes to play the lotto in Lincoln county Louisiana. In the game, he picks a list ofnnumbers in the range from 1 tom. If his list matches the drawn list, he wins the big prize, a lifetime supply of large lemons.Lenny has a scheme that he thinks is likely to be lucky. He likes to choose his list so that each number in it is at least twice as large as the one before it. So, for example, ifn= 4 andm= 10, then the possible lucky lists Lenny could pick are:1 2 4 8\r\n    1 2 4 9\r\n    1 2 4 10\r\n    1 2 5 10Thus Lenny has 4 lists to choose from.Your job, givennandm, is to count how many lucky lists Lenny has to his disposal.InputThe first line of input is a single non-negative integer, which is the number of data sets to follow. All data sets should be handled identically. The next lines, one per data set, contain two integers,nandm. It is guaranteed that 1 ≤n≤ 10 and 1 ≤m≤ 2000 andn≤m.OutputFor each data set, print a line like the following:Data seti:nmnumberwhereiis the data set number (beginning with 1), andnumberis the maximum number of lucky lists corresponding to the provided values ofnandm.ExampleInput1\r\n4 10OutputData set 1: 4 10 4",
  "sample_input": "1 2 4 8\r\n    1 2 4 9\r\n    1 2 4 10\r\n    1 2 5 10",
  "sample_output": "Input1\r\n4 10OutputData set 1: 4 10 4",
  "link": "https://www.spoj.com/problems/GNYR04C",
  "scraped_at": "2025-08-17 00:33:46",
  "test_cases": [
    {
      "input": "1 2 4 8\r\n    1 2 4 9\r\n    1 2 4 10\r\n    1 2 5 10",
      "expected_output": "Input1\r\n4 10OutputData set 1: 4 10 4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 6 8 7\n4 2 4 7\n5 9 3 9\n7 4 10 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 10 9 7\n4 7 1 10\n6 6 7 4\n7 8 9 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2 3 6\n5 3 9 5\n5 3 9 9\n2 3 3 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 5 4 9\n7 2 9 10\n4 5 10 6\n9 1 7 7",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "4 7 7 5\n2 5 8 9\n10 2 1 10\n7 2 7 7",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "9 1 1 1\n3 5 10 1\n2 10 10 7\n1 10 1 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "2 2 6 2\n3 8 8 3\n2 5 10 10\n9 4 2 8",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "7 10 4 5\n9 5 8 3\n8 7 1 4\n7 6 8 1",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2 5 1 2\n3 1 5 5\n2 3 1 1\n1 3 3 4",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4 2 2 1\n5 2 1 4\n2 5 4 2\n5 3 5 3",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 5 5\n5 3 2 2\n4 2 4 2\n3 1 4 1",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 3 3\n3 2 2 1\n5 5 4 4\n5 4 5 4",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 1 2 1\n5 3 3 4\n4 4 5 2\n1 3 4 3",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3 1 2 3\n4 3 4 1\n2 1 4 3\n3 2 1 2",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2 3 1 4\n3 3 3 3\n3 4 2 2\n4 5 5 5",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 10 10 1\n2 9 2 10\n1 10 9 1\n1 10 9 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9 1 10 9\n10 1 1 2\n9 1 2 1\n1 2 10 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}