{
  "problem_code": "problems",
  "title": "Ada and Trees",
  "tags": [],
  "text": "Ada the Ladybug is a farmer. She has a long furrow in which she grows trees. Each tree has some weight. The task is simple, she wants to know the biggest tree on some part of the furrow which is not greater than some heightH. As Ada asks for this very often, she asked you to write a program for this.InputThe first line will contain two integer1 ≤ N, Q ≤     3×105, the number trees and the number of questions.The next line will containNintegers0 ≤ Ai≤     106, the heights of trees.The sum nextQwill contain three integers:0 ≤ l ≤ r <     N, the segment of furrow she is interested in and0 ≤ H ≤ 106OutputFor each query output either the size of highest tree lesser/equal toHor output0if such tree doesn't grow on given segment.Example Input9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12Example Output0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
  "sample_input": "9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12",
  "sample_output": "0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
  "link": "https://www.spoj.com/problems/ADATREE",
  "scraped_at": "2025-08-17 00:34:36",
  "test_cases": [
    {
      "input": "9 8\r\n1 5 9 11 9 7 6 2 1\r\n1 6 4\r\n1 6 10\r\n0 8 97\r\n0 8 4\r\n1 4 5\r\n2 6 8\r\n2 8 5\r\n3 3 12",
      "expected_output": "0\r\n9\r\n11\r\n2\r\n5\r\n7\r\n2\r\n11",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 4\n8 1 6 6 6 10 5 7 1\n10 5 4\n8 7 4\n6 3 3\n5 1 8\n4 5 2\n9 10 4\n5 10 5\n9 1 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 6\n7 4 5 7 3 1 5 3 10\n4 2 2\n6 7 5\n6 4 1\n8 9 8\n2 5 9\n5 4 2\n6 9 2\n6 9 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n7 7 10 2 7 8 4 5 3\n5 6 3\n5 3 3\n3 4 7\n4 3 3\n1 8 3\n5 9 5\n3 2 7\n8 4 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "93 12\n19 25 89 54 99 95 90 81 72\n50 39 50\n43 4 19\n32 64 85\n12 32 28\n1 48 79\n17 82 23\n81 18 49\n14 39 32",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "94 15\n81 17 95 35 77 14 80 63 95\n16 82 13\n19 43 54\n94 39 84\n85 12 49\n12 76 42\n4 8 67\n54 1 43\n20 39 48",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "18 69\n61 91 57 61 65 64 7 5 60\n75 74 39\n32 57 51\n91 75 9\n66 23 25\n89 2 48\n97 81 36\n65 9 15\n45 46 52",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "3 5\n5 96 45 30 20 4 91 87 56\n61 67 28\n37 92 26\n17 11 98\n97 43 80\n55 56 54\n7 61 15\n28 37 32\n55 96 87",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "89 39\n28 80 72 9 3 14 6 31 84\n19 52 6\n82 29 77\n15 63 62\n28 41 56\n57 17 5\n34 85 10\n99 29 9\n12 48 86",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "86 432\n421 107 238 54 146 434 300 308 183\n467 441 182\n281 257 327\n419 343 89\n368 338 243\n302 467 64\n180 373 288\n454 373 476\n370 154 427",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "61 294\n386 309 232 163 199 330 109 187 405\n105 212 478\n334 338 297\n245 359 372\n465 190 478\n402 202 315\n416 177 369\n429 485 163\n475 338 390",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "172 92\n355 330 91 286 486 88 63 420 338\n198 293 446\n133 364 87\n56 430 356\n383 215 133\n330 366 400\n120 185 361\n131 317 132\n87 144 184",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "251 95\n254 394 139 177 497 170 87 70 497\n232 409 129\n53 177 398\n228 328 332\n73 175 426\n180 253 382\n474 85 275\n486 341 303\n333 367 88",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "316 121\n493 356 316 88 127 134 67 222 223\n374 463 268\n278 354 302\n56 94 379\n342 256 387\n466 135 300\n103 290 128\n433 442 202\n94 405 321",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "101 113\n422 150 425 173 125 369 212 63 308\n383 459 350\n54 441 321\n143 284 168\n417 57 183\n183 441 176\n185 182 67\n102 325 104\n419 488 313",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "104 451\n406 295 314 262 159 415 398 168 107\n308 71 68\n462 248 283\n54 372 224\n272 139 462\n319 460 128\n188 468 390\n364 280 407\n287 87 73",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 2\n1 1 2 2 1 2 2 1 1000\n2 1000 999\n1 2 999\n1000 2 1\n1000 999 1000\n2 999 2\n2 1 999\n999 1000 999\n999 1000 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n999 2 1000 1000 2 999 2 2 2\n1000 999 999\n2 2 1\n1 1 2\n1000 1000 999\n2 2 1\n2 1000 1000\n1000 2 999\n1000 999 1000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:54"
}