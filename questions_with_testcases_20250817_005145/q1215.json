{
  "problem_code": "problems",
  "title": "Base Conversion",
  "tags": [],
  "text": "Leo didn't do all the job in hislast problem, somebody gave him the numbers in a convenient base. It was the bottleneck of the problem... Now your task is to do this job.InputThe first line of input contains three integersT, the number of test cases,B1, the first base,B2, the second base. \r\n \r\nFollow 2×Tlines.\r\nFor each test case, on the first line your are given one integerk.\r\nOn the second line you are givenkintegers : the digits ofNin baseB1.N = a0×B10+ ... + ai×B1i+ ... + ak-1×B1k-1OutputFor each test case, you have to print the numberNin baseB2.\r\nSee sample for details.ExampleInput:1 10 100\r\n5\r\n5 4 3 2 1Output:3\r\n45 23 1ExplanationsFor the lonely case, N = 5×100+ 4×101+ 3×102+ 2×103+ 1×104= 12345.\r\nWe have: N = 45×1000+ 23×1001+ 1×1002. You have to print 3, the number of digits,\r\n then the digits: 45, 23 and 1.Constraints0 < T <= 50\r\n1 < B1,B2 <= 10^9\r\n1 < k <= 10000\r\n0 <= ai< B1  , ak-1>0Time limit is sqrt(T_basic_pike_code * T_awaited_python_code) = sqrt(13.34*6.97), based on my Python3/Pike experiments.\r\nYou may try before thetutorial edition.Have fun ;-)Edit(2017-02-11) : With compiler updates, a new time limit is set.\r\nTime limit is sqrt(T_basic_pike_code * T_awaited_python_code) = sqrt(3.93*1.57), based on my Python3/Pike experiments.\r\nThanks @Blue_Mary for pointing this out.",
  "sample_input": "Input:1 10 100\r\n5\r\n5 4 3 2 1",
  "sample_output": "Output:3\r\n45 23 1",
  "link": "https://www.spoj.com/problems/BASECONV",
  "scraped_at": "2025-08-17 00:33:31",
  "test_cases": [
    {
      "input": "1 10 100\r\n5\r\n5 4 3 2 1",
      "expected_output": "Output:3\r\n45 23 1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8 2\n3\n2 4 7 8 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8 8\n8\n4 7 4 1 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 6 4\n6\n3 1 5 3 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "32 17 42\n44\n40 26 44 40 36",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "7 27 16\n19\n32 19 30 25 34",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "38 35 21\n13\n44 10 40 22 11",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 24 42\n11\n26 23 3 6 11",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "30 7 23\n30\n25 23 9 41 41",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "11 15 19\n5\n2 6 2 15 7",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "21 19 13\n8\n21 16 8 17 13",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8 7 21\n11\n11 19 5 4 14",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "21 7 22\n12\n14 13 10 11 22",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "10 15 16\n22\n19 3 2 5 12",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "8 16 22\n8\n3 7 16 5 11",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "21 2 11\n19\n17 4 5 8 10",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "45 45 45\n45\n45 45 45 45 45",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "45 45 45\n45\n45 45 45 45 45",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "45 45 2\n2\n44 44 1 44 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "45 44 44\n44\n44 2 1 2 45",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:57"
}