{
  "problem_code": "problems",
  "title": "Card Sorting",
  "tags": [],
  "text": "EnglishVietnameseDave’s little son Maverick likes to play card games, but being only four years old, he always lose when playing with his older friends. Also, arranging cards in his hand is quite a problem to him.When Maverick gets his cards, he has to arrange them in groups so that all the cards in a group are of the same color. Next, he has to sort  the cards in each group by their value – card with lowest value should be the leftmost in its group. Of course, he has to hold all the cards  in his hand all the time.He has to arrange his cards as quickly as possible, i.e. making as  few moves as possible. A move consists of changing a position of  one of his cards.Write a program that will calculate the lowest number of moves needed  to arrange cards.InputThe first line of input file contains two integers C, number of colors (1 ≤ C ≤ 4), and N, number of cards of the same color (1 ≤ N ≤ 100),  separated by a space character.Each of the next C×N lines contains a pair of two integers X  and Y, 1 ≤ X ≤ C, 1 ≤ Y ≤ N, separated by a space character.Numbers in each of those lines determine a color (X) and a value (Y)  of a card dealt to little Maverick. The order of lines corresponds  to the order the cards were dealt to little Maverick. No two lines describe the same card.OutputThe first and only line of output file should contain the lowest number  of moves needed to arrange the cards as described above.SampleInput:2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2Output:2Input:4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1Output:0Input:3 2\r\n3 2\r\n2 2\r\n1 1\r\n3 1\r\n2 1\r\n1 2Output:2",
  "sample_input": "Input:2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2Output:2",
  "sample_output": "Input:4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1Output:0",
  "link": "https://www.spoj.com/problems/MCARDS",
  "scraped_at": "2025-08-17 00:33:48",
  "test_cases": [
    {
      "input": "2 2\r\n2 1\r\n1 2\r\n1 1\r\n2 2",
      "expected_output": "2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 1\r\n2 1\r\n3 1\r\n1 1\r\n4 1",
      "expected_output": "0",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "1 6\n10 8\n3 5\n6 2\n6 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n2 9\n1 2\n3 8\n6 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 9\n1 7\n9 7\n8 2\n7 8",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "30 68\n53 55\n32 72\n79 1\n39 21",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "23 38\n86 64\n61 81\n9 42\n1 38",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 77\n67 35\n76 45\n32 89\n32 90",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 18\n19 11\n3 63\n71 66\n68 47",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "34 2\n63 50\n41 75\n96 89\n5 81",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "42 15\n6 44\n49 37\n46 38\n41 21",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "32 29\n19 18\n37 45\n50 7\n42 25",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "42 12\n27 27\n27 22\n35 13\n18 49",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8 29\n39 47\n9 18\n49 21\n28 49",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "21 36\n17 23\n18 17\n7 24\n27 42",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "8 33\n35 39\n26 29\n7 14\n30 22",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "30 33\n40 34\n13 38\n21 15\n37 24",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 2\n1 2\n99 100\n2 2\n1 100",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}