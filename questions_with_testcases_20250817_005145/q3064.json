{
  "problem_code": "problems",
  "title": "Lannister Army",
  "tags": [],
  "text": "\"A Lannister Always Pays His Debts.\"That's true, now here is a chance for you to get paid by Jaime Lannister.In Jaime's army there are totalNnumber of warriors.And all them are standing in a single row.Now Jaime wants to convey a message to his warriors. But it's very difficult to convey a message if warriors are standing in a single row.So, Jaime wants to break that single row intoKrows. Such that in each row at least one warrior should be there.Also, there is an amount of unhappiness associated with each warrior x which is equal to : number of warriors in front of x (in his row) whose height is greater than the height of x. And, total unhappiness is sum of unhappiness of all warriors. Jaime wants that his army should be happy as much as possible.Now, Jaime wants you to break the single row intoKrows such that total unhappiness should be minimum.Note: You just have to break the row, you are not allowed to change the position of the warriors.InputFirst line of input contain two integersNandK.Second line of input containNnumber of integers,ith of which denotes height ofith warrior standing in that single row (represented asH[i]).Constraints1 ≤N≤ 50001 ≤K≤ N1 ≤H[i]≤ 105OutputOutput the minimum possible value of \"total unhappiness\".ExamplesInput:6 3\r\n20 50 30 60 40 100Output:0ExplanationBreak as:Row 1 : 20 50Row 2 : 30 60Row 3 : 40 100Input:8 3\r\n20 50 30 60 40 100 5 1Output:2ExplanationRow 1 : 20 50 30 60, Unhappiness = 1Row 2 : 40 100, Unhappiness = 0Row 3 : 5 1, Unhappiness = 1Total = 2",
  "sample_input": "Input:6 3\r\n20 50 30 60 40 100Output:0",
  "sample_output": "Input:8 3\r\n20 50 30 60 40 100 5 1Output:2",
  "link": "https://www.spoj.com/problems/LARMY",
  "scraped_at": "2025-08-17 00:34:12",
  "test_cases": [
    {
      "input": "6 3\r\n20 50 30 60 40 100",
      "expected_output": "0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3\r\n20 50 30 60 40 100 5 1",
      "expected_output": "2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "10 2\n1 4 7 1 4 2",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3\n1 6 9 7 1 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 9\n8 6 7 8 4 10",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "63 32\n58 10 9 21 78 93",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "78 99\n59 78 81 27 85 59",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "48 81\n98 80 45 18 19 40",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "94 84\n48 69 48 22 21 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "6 9\n21 23 76 84 78 71",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "19926 19372\n22185 11300 18986 24104 7000 3507",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19710 7199\n18570 5960 23974 15872 2660 7728",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4996 23195\n9024 17516 3501 24509 8032 9803",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "20545 14637\n22270 16207 21476 21371 22375 22753",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "24655 2787\n23682 21291 8365 20520 8364 16847",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20886 23719\n6953 8713 17269 15205 9023 5400",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "18653 6983\n15065 13377 18466 12832 10946 11499",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "50001 50001\n50001 50001 50001 50001 50001 50001",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "50001 50001\n50001 50001 50001 50001 50001 50001",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n1 2 2 1 50000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}