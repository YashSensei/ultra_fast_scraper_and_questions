{
  "problem_code": "problems",
  "title": "Driving Direction",
  "tags": [],
  "text": "Contrary to the popular belief, alien flying saucers cannot fly arbitrarily around our planet Earth. Their touch down and take off maneuvers are extremely energy consuming, so they carefully plan their mission to Earth to touch down in one particular place, then hover above the ground carrying out their mission, then take off. It was all so easy when human civilization was in its infancy, since flying saucers can hover above all the trees and building, and their shortest path from one mission point to the other was usually a simple straight line -- the most efficient way to travel. However, modern cities have so tall skyscrapers that flying saucers cannot hover above them and the task of navigating modern city became quite a complex one. You were hired by an alien spy to write a piece of software that will ultimately give flying saucers driving directions throughout the city. As your first assignment (to prove your worth to your alien masters) you should write a program that computes the shortest distance for a flying saucer from one point to another. This program will be used by aliens as an aid in planning of mission energy requirements.The problem is simplified by several facts. First of all, since flying saucer can hover above most of the buildings, you are only concerned with locations of skyscrapers. Second, the problem is actually two-dimensional -- you can look at everything \"from above\" and pretend that all objects are situated onOXYCartesian plane. Flying saucer is represented by a circle of radiusr, and since modern cities with skyscrapers tend to be regular, every skyscraper is represented with a rectangle whose sides are parallel toOXandOYaxes.By definition, the location of flying saucer is the location of its center, and the length of the path it travels is the length of the path its center travels. During its mission flying saucer can touch skyscrapers but it cannot intersect them.At the first picture a flying saucer ofr= 1 has to get from pointAto pointB. The straight dashed line would have been the shortest path if not for skyscraper 1. The shortest way to avoid skyscraper 1 is going around its top right corner, but skyscraper 2 is too close to fly there. Thus, the answer is to go around the bottom left corner of skyscraper 1 for a total path length of 10.570796.In the second picture it is impossible for a flying saucer ofr= 2 to get from pointAto pointB, since all skyscrapers are too close to fly in between them.In the third picture flying saucer ofr= 1 has to fly in a slalom-like way around two skyscrapers in order to achieve the shortest path of length 11.652892 betweenAandB.InputThe input file contains several test cases, each of them as described below.The first line of the input file contains integer numbersrandn(1 ≤ r ≤ 100, 0 ≤ n ≤ 30), whereris the radius of the flying saucer, andnis the number of skyscrapers. The next line contains four integer numbersxA,yA,xB, andyB(-1000 ≤xA,yA,xB,yB≤ 1000), where (xA,yA) are the coordinates of the starting point of the flying saucer's mission and (xB,yB) are the coordinates of its finishing point.The followingnlines describe skyscrapers. Each skyscraper is represented by four integer numbersx1,y1,x2, andy2(-1000 ≤x1,y1,x2,y2≤ 1000,x1<x2,y1<y2) -- coordinates of the corners of the corresponding rectangle.Skyscrapers neither intersect nor touch each other. Starting and finishing points of the flying saucer's mission are valid locations for flying saucer, that is, it does not intersect any skyscraper in those points, but may touch some of them.OutputFor each test case, write to the output a line with the text \"no solution\" (without quotes) if the flying saucer cannot reach its finishing point from the starting one. Otherwise, write to the output a line with a single number -- the shortest distance that the flying saucer needs to travel to get from the starting point to the finishing point. Answer has to be precise to at least 6 digits after the decimal point.ExampleInput:1 3\r\n2 7 7 1\r\n3 2 6 4\r\n7 5 9 8\r\n1 8 5 9\r\n2 4\r\n0 0 5 6\r\n8 3 10 6\r\n5 9 9 10\r\n1 4 2 8\r\n3 1 5 3\r\n1 2\r\n0 5 10 5\r\n2 2 4 5\r\n6 5 8 8Output:10.570796\r\nno solution\r\n11.652892",
  "sample_input": "Input:1 3\r\n2 7 7 1\r\n3 2 6 4\r\n7 5 9 8\r\n1 8 5 9\r\n2 4\r\n0 0 5 6\r\n8 3 10 6\r\n5 9 9 10\r\n1 4 2 8\r\n3 1 5 3\r\n1 2\r\n0 5 10 5\r\n2 2 4 5\r\n6 5 8 8Output:10.570796\r\nno solution\r\n11.652892",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NE06D",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "1 3\r\n2 7 7 1\r\n3 2 6 4\r\n7 5 9 8\r\n1 8 5 9\r\n2 4\r\n0 0 5 6\r\n8 3 10 6\r\n5 9 9 10\r\n1 4 2 8\r\n3 1 5 3\r\n1 2\r\n0 5 10 5\r\n2 2 4 5\r\n6 5 8 8",
      "expected_output": "10.570796\r\nno solution\r\n11.652892",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 3\n9 4 7 3\n7 2 4 6\n4 1 6 3\n4 1 1 4\n2 2\n5 9 2 8\n10 7 1 10\n4 3 7 1\n3 5 1 2\n10 7 7 4\n9 10\n8 6 4 8\n8 5 5 2\n9 6 2 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 6\n1 5 8 8\n6 6 8 6\n6 6 5 2\n9 10 10 8\n1 5\n5 3 6 1\n5 1 8 5\n4 8 3 5\n8 10 1 3\n2 2 8 10\n5 3\n7 2 9 10\n2 3 3 10\n10 5 9 6",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 2\n6 7 8 4\n2 10 2 2\n7 7 9 1\n2 7 3 8\n9 6\n10 7 5 10\n8 7 1 7\n10 4 8 9\n7 8 1 4\n6 4 2 8\n4 9\n3 1 5 2\n10 7 1 3\n6 8 5 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 30\n23 6 18 24\n2 22 7 20\n25 1 5 5\n25 24 29 15\n12 15\n29 20 25 1\n1 16 13 3\n13 6 10 5\n26 9 18 19\n15 23 23 19\n7 18\n17 9 17 17\n17 15 15 17\n19 3 11 19",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 6\n6 30 12 28\n16 16 26 7\n17 7 11 6\n30 9 21 27\n29 15\n23 18 21 16\n3 15 27 8\n18 24 27 18\n22 28 7 27\n30 17 13 15\n18 5\n6 20 12 19\n10 7 14 14\n3 19 17 19",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "27 7\n16 25 28 26\n28 4 26 7\n24 24 20 4\n14 22 1 6\n14 28\n15 19 2 9\n10 3 13 21\n17 5 5 7\n25 22 17 20\n14 8 19 12\n11 5\n21 5 13 9\n6 9 20 4\n14 23 18 16",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "24 14\n22 19 6 1\n11 27 6 7\n26 30 18 27\n25 12 7 18\n22 1\n5 8 15 26\n4 15 1 13\n22 5 14 6\n22 9 3 4\n29 9 28 20\n16 10\n17 3 9 9\n12 13 15 13\n18 10 25 27",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 30\n17 7 22 1\n6 20 2 16\n10 5 17 17\n9 18 14 1\n23 29\n16 29 8 17\n12 15 27 20\n27 17 7 24\n18 1 21 28\n10 12 3 18\n15 4\n15 7 18 22\n6 22 16 5\n23 13 23 12",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "12 12\n10 9 2 9\n3 15 5 4\n7 7 13 5\n15 1 13 13\n8 4\n4 15 12 5\n11 3 15 9\n12 1 4 12\n10 7 13 13\n10 10 4 5\n10 11\n3 10 1 11\n12 10 13 13\n15 10 10 14",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10 9\n14 1 2 2\n15 11 13 10\n10 15 8 2\n14 6 12 8\n4 4\n8 13 5 12\n14 14 11 15\n1 3 9 10\n4 5 8 4\n9 3 11 8\n11 15\n6 8 3 7\n12 14 11 2\n9 1 10 7",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "13 4\n9 13 4 12\n11 6 12 9\n3 9 8 12\n11 6 6 9\n5 11\n8 3 6 8\n7 12 9 9\n12 4 1 6\n2 1 12 2\n7 13 14 12\n13 14\n7 2 9 3\n4 1 5 10\n9 11 10 3",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 10\n4 4 2 6\n1 10 11 8\n2 9 5 10\n2 1 6 7\n13 14\n1 12 4 12\n12 4 14 11\n15 7 14 5\n1 10 8 7\n4 1 2 6\n3 9\n7 2 13 4\n12 9 12 14\n7 13 3 4",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "8 4\n15 6 3 8\n2 4 15 10\n7 7 13 8\n3 10 8 12\n1 7\n14 4 7 4\n5 15 6 5\n2 4 13 4\n4 14 3 9\n13 5 10 2\n1 7\n4 13 14 7\n4 15 8 7\n7 14 1 4",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3 3\n12 3 2 5\n8 10 4 8\n12 7 14 3\n4 15 15 14\n13 13\n7 10 15 7\n9 12 12 14\n9 1 13 12\n11 2 7 4\n8 8 2 12\n7 1\n4 6 11 1\n11 6 4 2\n14 13 4 8",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "11 13\n14 15 4 4\n10 11 3 3\n7 10 11 5\n5 12 13 9\n1 13\n5 12 3 8\n2 14 13 1\n2 14 4 3\n7 7 4 1\n10 14 7 3\n2 9\n7 9 13 1\n11 3 1 13\n14 10 13 15",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30\n30 30\n30 30 30 30\n30 30 30 30\n30 30 30 30",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "30 30\n2 30 1 30\n1 29 29 2\n29 29 2 2\n2 1 29 29\n29 29\n29 30 1 2\n29 30 2 1\n30 30 30 30\n29 2 2 2\n2 30 29 2\n2 29\n29 1 29 30\n2 1 30 1\n29 30 29 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 29\n1 1 29 1\n29 1 29 2\n2 29 2 2\n29 30 30 29\n2 29\n30 2 1 1\n1 1 1 1\n29 1 2 1\n29 29 29 1\n2 1 2 30\n1 2\n29 30 29 2\n1 1 1 2\n2 30 29 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}