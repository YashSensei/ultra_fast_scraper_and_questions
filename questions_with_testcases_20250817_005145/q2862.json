{
  "problem_code": "problems",
  "title": "Ada and List",
  "tags": [],
  "text": "Ada the Ladybug has a TODO-list (containing only numbers - for simplicity). She is still doing something, so she sometimes eraseskthnumber, sometimes she inserts something onkthposition and sometime she asks forkthnumber.Sadly, she is now searching for a work at positionkso she doesn't have time to do this herself. Can you help her?InputThe first line will contain0 < N ≤ 105,0 < Q <             5*105, the number of elements in TODO-list and         number of queries.Then a line withNnumbers follows. Each number0 ≤ Ak≤ 109meanskthnumber in her TODO-list.Afterward,Qlines follow, each beginning with number1 ≤ a     ≤ 31k xmeans that you will add numberxto positionk2kmeans that you will erase number from positionk3kmeans that you will print number from positionkFor all queries, it is true that1 ≤ k ≤ #SizeOfList,0     ≤ x ≤ 109(for query1, it can be also put to position#SizeOfList + 1)You will never get query of type2or3if the list is emptyOutputFor each query of type3, printkthnumbersExample Input6 10\r\n1 2 4 8 16 32\r\n3 4\r\n1 1 7\r\n3 2\r\n2 2\r\n2 2\r\n3 2\r\n1 6 666\r\n3 6\r\n2 1\r\n3 1Example Output8\r\n1\r\n4\r\n666\r\n4Queries explanations1 2 4816 32\r\n7 1 2 4 8 16 32\r\n712 4 8 16 32\r\n7 2 4 8 16 32\r\n7 4 8 16 32\r\n748 16 32\r\n7 4 8 16 32 666\r\n7 4 8 16 326664 8 16 32 66648 16 32 666",
  "sample_input": "6 10\r\n1 2 4 8 16 32\r\n3 4\r\n1 1 7\r\n3 2\r\n2 2\r\n2 2\r\n3 2\r\n1 6 666\r\n3 6\r\n2 1\r\n3 1",
  "sample_output": "8\r\n1\r\n4\r\n666\r\n4",
  "link": "https://www.spoj.com/problems/ADALIST",
  "scraped_at": "2025-08-17 00:34:10",
  "test_cases": [
    {
      "input": "6 10\r\n1 2 4 8 16 32\r\n3 4\r\n1 1 7\r\n3 2\r\n2 2\r\n2 2\r\n3 2\r\n1 6 666\r\n3 6\r\n2 1\r\n3 1",
      "expected_output": "8\r\n1\r\n4\r\n666\r\n4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 2\n1 10 7 6 2 5\n2 5\n6 3 8\n2 8\n7 9\n5 10\n1 6\n7 7 1\n2 1\n1 9\n4 1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 4\n10 1 5 1 8 3\n9 8\n4 9 5\n2 2\n5 5\n6 10\n1 2\n2 2 2\n2 4\n7 5\n5 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 2\n3 7 7 1 6 8\n3 3\n2 9 6\n6 9\n10 1\n3 9\n8 3\n6 9 2\n1 3\n4 7\n8 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 57\n30 77 16 6 100 76\n76 29\n18 95 68\n48 64\n25 12\n43 59\n96 85\n31 77 25\n65 88\n11 25\n9 49",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "8 57\n21 92 54 91 61 59\n72 8\n26 6 65\n20 45\n96 6\n29 56\n85 70\n15 87 62\n23 94\n92 87\n56 97",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "47 90\n62 2 43 2 38 70\n17 71\n64 6 12\n30 55\n16 39\n23 90\n55 81\n1 87 68\n53 28\n39 44\n15 13",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "12 8\n75 16 100 79 40 52\n44 67\n93 48 36\n49 87\n66 65\n7 52\n67 44\n14 18 95\n89 53\n69 34\n40 18",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "51 69\n30 93 62 99 1 19\n57 73\n67 55 50\n38 39\n71 11\n7 11\n45 29\n45 35 43\n97 52\n91 58\n78 82",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "44 49\n18 27 17 6 30 50\n15 51\n47 8 27\n16 20\n49 33\n7 41\n23 24\n44 11 16\n36 48\n42 34\n25 17",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "10 25\n21 7 52 17 15 9\n32 33\n38 51 25\n15 45\n28 14\n45 17\n37 31\n46 20 11\n41 50\n27 28\n46 29",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "19 46\n21 20 50 42 5 38\n8 46\n40 46 39\n22 7\n42 37\n13 17\n39 44\n33 23 18\n52 16\n15 30\n37 33",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "32 36\n6 20 45 6 52 28\n50 31\n38 8 34\n47 36\n49 47\n16 46\n18 32\n51 44 51\n24 19\n33 45\n7 13",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19 27\n42 16 18 45 38 37\n44 30\n31 51 13\n51 36\n8 37\n6 38\n37 17\n32 45 34\n7 35\n44 19\n40 22",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "24 51\n44 38 41 22 43 43\n22 47\n43 39 37\n16 32\n19 38\n52 39\n41 48\n43 34 13\n26 23\n41 25\n39 47",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "20 25\n10 34 45 37 46 21\n22 51\n44 32 45\n22 35\n36 40\n18 41\n26 22\n19 12 14\n40 12\n7 42\n52 14",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105\n105 105 105 105 105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105\n105 105 105 105 105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 1\n104 104 1 104 104 1\n105 1\n104 104 104\n104 104\n104 105\n1 104\n2 105\n104 1 105\n2 1\n105 1\n104 104",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 105\n2 1 2 1 2 1\n105 104\n1 2 104\n1 1\n1 1\n105 2\n105 2\n104 104 1\n105 2\n105 1\n105 104",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:49"
}