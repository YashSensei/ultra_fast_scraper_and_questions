{
  "problem_code": "problems",
  "title": "Garden 2005",
  "tags": [],
  "text": "Byteman owns the most beautiful garden in Bytetown. He planted n roses in his garden. Summer has come and the flowers have grown big and beautiful. Byteman has realized that he is not able to take care of all the roses on his own. He has decided to employ two gardeners to help him. He wants to select two rectangular areas, so that each of the gardeners will take care of the roses inside one area. The areas should be disjoint and each should contain exactly k roses. Byteman wants to make a fence surrounding the rectangular areas, but he is short of money, so he wants to use as little fence as possible. Your task is to help Byteman select the two rectangular areas.The garden forms a rectangle l meters long and w meters wide. It is divided into l · w squares of size 1 meter × 1 meter each. We fix a coordinate system with axes parallel to the sides of the garden. All squares have integer coordinates (x, y) satisfying 1 ≤ x ≤ l, 1 ≤ y ≤ w. Each square may contain any number of roses. The rectangular areas, which must be selected, should have their sides parallel to the sides of the garden and the squares in their corners should have integer coordinates. For 1 ≤ l1 ≤ l2 ≤ l and 1 ≤ w1 ≤ w2 ≤ w, a rectangular area with corners (l1, w1), (l1, w2), (l2, w1) and (l2, w2):contains all the squares with coordinates (x, y) satisfying l1 ≤ x ≤ l2 and w1 ≤ y ≤ w2, andhas perimeter 2 · (l2 − l1 + 1) + 2 · (w2 − w1 + 1).The two rectangular areas must be disjoint, that is they cannot contain a common square. Even if they have a common side, or part of it, they must be surrounded by separate fences.Write a program, that:reads from the standard input the dimensions of the garden, the number of roses in the garden, the  number of roses that should be in each of the rectangular areas, and the positions of the roses.finds the corners of two such rectangular areas with minimum sum of perimeters that satisfy the given conditions.writes to the standard output the minimum sum of perimeters of two non-overlapping rectangular areas,  each containing exactly the given number of roses (or a single word NO, if no such pair of areas exists).InputThe first line of standard input contains two integers: l and w (1 ≤ l, w ≤ 250) separated by a single space — the length and the width of the garden. The second line contains two integers: n and k (2 ≤ n ≤ 5000, 1 ≤ k ≤ n/2) separated by a single space — the number of roses in the garden and the number of roses that should be in each of the rectangular areas. The following n lines contain the coordinates of the roses, one rose per line. The (i+2)-nd line contains two integers li, wi (1 ≤ li ≤ l, 1 ≤ wi ≤ w) separated by a single space — the coordinates of the square containing the i-th rose. Two or more roses can occur in the same square.OutputThe standard output should contain only one line with exactly one integer—the minimum sum of perimeters of two non-overlapping rectangular areas, each containing exactly k roses, or a single word NO, if no such pair of areas exists.ExampleInput:6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1Output:22",
  "sample_input": "Input:6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1Output:22",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IOIGARD",
  "scraped_at": "2025-08-17 00:33:09",
  "test_cases": [
    {
      "input": "6 5\r\n7 3\r\n3 4\r\n3 3\r\n6 1\r\n1 1\r\n5 5\r\n5 5\r\n3 1",
      "expected_output": "22",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10\n6 2\n7 1\n4 7\n7 2\n10 7\n2 4\n2 8\n3 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 5\n9 6\n10 8\n8 5\n1 5\n6 10\n10 2\n1 1\n10 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n3 8\n5 10\n9 2\n8 6\n4 5\n4 4\n1 3\n2 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "88 54\n73 71\n46 37\n39 30\n97 16\n26 99\n70 23\n50 61\n94 39",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "77 58\n65 53\n60 63\n6 42\n91 4\n99 5\n54 27\n42 44\n42 56",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 28\n49 50\n92 20\n23 98\n22 51\n50 67\n76 79\n40 59\n68 72",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 21\n33 77\n24 78\n47 66\n20 38\n5 81\n39 81\n31 75\n6 60",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "15 68\n8 63\n48 96\n71 42\n85 27\n74 67\n65 76\n39 97\n50 74",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "357 1480\n913 747\n594 2313\n824 1819\n1291 886\n1842 1591\n1218 2381\n2250 634\n1179 1746",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "1164 1064\n1269 2181\n436 1308\n2435 376\n553 833\n1860 461\n1599 609\n2073 1763\n1419 382",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1251 1809\n748 711\n1250 2247\n1604 1133\n1081 612\n1031 1537\n1079 1874\n1499 273\n511 1347",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "324 1832\n494 1492\n343 1541\n1051 1260\n1597 1121\n1511 1030\n803 2059\n1009 1475\n902 1699",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1246 995\n2207 268\n1905 2170\n1512 757\n456 478\n297 664\n2330 457\n2021 631\n1273 2215",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2292 1684\n2284 339\n2312 1977\n843 2482\n1598 2417\n1288 875\n2309 318\n1802 2222\n2336 2077",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1219 2361\n715 1828\n1038 941\n529 562\n571 1391\n2327 756\n1297 2450\n1668 1711\n1196 1339",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "4999 4999\n1 1\n1 2\n1 5000\n2 1\n4999 2\n1 4999\n1 2\n4999 5000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "4999 5000\n2 2\n4999 1\n1 4999\n1 2\n1 4999\n2 1\n5000 1\n1 4999",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:49"
}