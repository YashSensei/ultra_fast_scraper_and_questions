{
  "problem_code": "problems",
  "title": "MONO",
  "tags": [],
  "text": "Mirko soon realised that number sequences are not the best career choice, and went right back to letter table business.Mirko’s table has R rows and C columns and consists of lowercase letters. Each cell of the table is a square of equal size. We assign coordinates to vertices of those squares, so that upper-left corner of the table has coordinates (0, 0), upper-right (C, 0), lower-left (0, R), and lower-right (C, R).We say that polygon within the table is monoliteral if the following holds:its vertices are from the described set of cell-square vertices,its edges are parallel to coordinate axes,all letters inside the polygon are equal.A simple polygon for which first two conditions are true (third one may or may not be true) is given.Mirko would like to know the number of monoliteral polygons that can be obtained by moving the given one up, down, left, or right or any combination thereof, but not rotating.InputThe first line of input contains two space separated integers R and C (1 ≤ R, C ≤ 500).Each of the next R lines contains exactly C lowercase letters, this is Mirko’s table.The following line contains integer V (4 ≤ V ≤ 500), number of vertices of given polygon.Each of the next V lines contains two integers X, Y (0 ≤ X ≤ C, 0 ≤ Y ≤ R). These are the coordinatesof the vertices of the given polygon. Vertices are given in clockwise order.The given polygon will satisfy conditions 1 and 2 from above.OutputIn the first and only line of output, print expected number of polygons.ExamplesInput:3 3\r\naaa\r\naaa\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0Output:4Input:3 3\r\naaa\r\naba\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0Output:0Input:5 4\r\nxyyx\r\nxyyy\r\nxxyy\r\nxxxx\r\nxxxx\r\n8\r\n1 3\r\n1 2\r\n0 2\r\n0 0\r\n2 0\r\n2 1\r\n3 1\r\n3 3Output:2",
  "sample_input": "Input:3 3\r\naaa\r\naaa\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0Output:4",
  "sample_output": "Input:3 3\r\naaa\r\naba\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0Output:0",
  "link": "https://www.spoj.com/problems/MONO",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "3 3\r\naaa\r\naaa\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 3\r\naaa\r\naba\r\naaa\r\n4\r\n2 0\r\n2 2\r\n0 2\r\n0 0",
      "expected_output": "0",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 4\ntk\nee\nfcnwy\n9\n2 9\n7 4\n6 1\n6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 6\nyjlsk\neuvg\nf\n4\n9 7\n1 7\n9 10\n8 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 3\nszlqmo\nyjubs\norrvz\n3\n3 1\n9 2\n7 9\n3 6",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "58 9\npi\nqb\nkumbl\n12\n42 15\n6 21\n79 73\n49 1",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "44 27\ny\nmkcmn\nelu\n98\n41 93\n47 25\n38 100\n93 92",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "54 15\nhnj\nckupnc\neapf\n6\n34 45\n77 88\n3 37\n23 69",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 18\nlriq\nphp\nzly\n89\n67 21\n68 59\n40 18\n31 68",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "81 56\ndtvfus\nwielga\nid\n94\n28 80\n6 71\n92 63\n62 52",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "108 178\nbgbn\nfi\nm\n423\n125 287\n214 73\n459 260\n162 422",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "353 183\nj\ntsmz\njayyyn\n427\n365 234\n378 206\n170 456\n114 335",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "411 161\nrjpsgk\nqxjicz\nn\n434\n195 419\n281 454\n496 163\n339 402",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "317 301\nnqahlh\ntmc\nux\n288\n248 345\n185 98\n464 398\n176 415",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "464 448\nf\nyeztv\ntfzw\n237\n378 462\n121 259\n123 212\n159 88",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "268 91\nywrxe\no\nr\n481\n183 361\n263 497\n86 294\n279 389",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "355 473\nrveytu\nlkv\nbxe\n117\n458 429\n467 259\n145 262\n124 473",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\nzitr\norzs\nou\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\nnlm\nz\nik\n1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\np\na\ntj\n1\n2 1000\n1 999\n2 999\n1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}