{
  "problem_code": "problems",
  "title": "Anils Proposal",
  "tags": [],
  "text": "Anil is the best coder in his class. He is in love with his classmate Gowthami. One day he proposes her. She wants him to prove that his love is actually true. So, she poses the following problem:There is an array of sizen. Initially all the elements are zero. Now there will be two types of operations:Update the array.Query the array.In case of update, you will be given a range [l,r]. To the kth element in this range (l and r inclusive), you need toadd kth Fibonacci number.In case of query, you will be given a range [l,r], for which you need to find the sum of all elements in the range (including l and r).Anil hopes you can help him in this regard.InputThe first line containsn (1 ≤ n ≤ 106)andq (1 ≤ q ≤ 5×104), the number of operations to be performed. The nextqlines contain 3 space separated integers. If the first integer is0, then it's an update operation. If it is1, then it's a query operation. The next two integers specifylandr.(1 ≤ l ≤ r ≤ n)OutputFor each query print one integer per line specifying the sum in the corresponding range. Since the sum can be very large, outputAnswer modulo 109+ 7.ExampleInput:5 6\r\n0 1 5\r\n0 2 4\r\n0 1 3\r\n1 2 4\r\n1 1 5\r\n1 4 5Output:13\r\n20\r\n10ExplanationAfter the first update the array looks as follows: 1 1 2 3 5After 2nd update: 1 2 3 5 5After 3rd update: 2 3 5 5 5Hence from the above array, we have the outputs for the queries.Note: Fibonacci Series starts as 1, 1, 2, 3, ...",
  "sample_input": "Input:5 6\r\n0 1 5\r\n0 2 4\r\n0 1 3\r\n1 2 4\r\n1 1 5\r\n1 4 5Output:13\r\n20\r\n10",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ANIL_PRO",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "5 6\r\n0 1 5\r\n0 2 4\r\n0 1 3\r\n1 2 4\r\n1 1 5\r\n1 4 5",
      "expected_output": "13\r\n20\r\n10",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6\n2 8 10\n2 3 3\n4 7 6\n1 8 10\n9 4 9\n3 5 8",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n7 2 2\n8 5 8\n6 5 6\n8 9 5\n1 3 1\n3 2 7",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 5\n3 8 6\n3 2 5\n4 9 2\n9 4 8\n9 1 10\n4 1 4",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "89 60\n14 13 44\n51 91 40\n78 9 55\n13 97 62\n74 62 46\n92 36 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "49 74\n79 38 23\n10 55 43\n100 83 50\n15 56 66\n99 90 82\n98 37 99",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "38 25\n73 18 94\n67 61 93\n100 67 15\n7 16 92\n92 89 40\n97 18 37",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "100 66\n36 73 22\n73 74 26\n5 99 96\n55 96 40\n50 20 69\n53 78 87",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "69 59\n35 29 32\n91 10 23\n78 91 82\n96 55 14\n38 100 82\n37 18 3",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "48 27\n19 8 48\n21 28 37\n41 16 30\n53 22 39\n43 15 9\n49 11 38",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "13 49\n41 43 19\n52 30 25\n43 33 38\n26 43 23\n40 40 37\n17 40 9",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36 32\n20 49 25\n45 12 20\n30 37 46\n23 50 32\n36 10 10\n45 41 28",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "47 41\n11 50 31\n12 39 8\n20 12 8\n39 36 18\n48 11 51\n18 39 20",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "52 34\n40 10 26\n17 28 39\n9 24 43\n45 41 37\n41 16 17\n38 27 23",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "31 20\n50 8 35\n43 39 30\n45 12 53\n11 27 44\n24 42 19\n44 13 14",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "30 8\n52 7 12\n19 6 22\n19 19 14\n53 41 16\n49 19 9\n14 5 6",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106\n106 106 106",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n105 1 1\n106 1 1\n105 105 1\n105 105 105\n105 105 106\n105 106 105",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "105 105\n2 105 106\n106 2 105\n106 105 106\n105 105 106\n105 105 105\n1 105 2",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:56"
}