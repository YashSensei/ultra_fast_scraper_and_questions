{
  "problem_code": "problems",
  "title": "Pizza Location",
  "tags": [],
  "text": "EnglishVietnameseOur friend Picko is very reach and he wants to open lots of restaurants with delivery. The main food will be, of course, pizza.  He has certain number of potential locations for the restaurants,  and he knows the locations of the solitairs with lots of people which will often be his customers.  Delivery of each restaurant will cover all the solitairs in given radius.Picko can open only limited number of restaurants, and he wants that  restaurants on the locations which will cover maximal  number of people in solitairs.Write a program that will calculate maximal number of people which  we can cover with delivery.InputIn the first line of the input file there are two integers K  and R, separated with space, number of restaurants and radius of  delivery, 1 ≤ K ≤ 10, 1 ≤ R ≤ 500.In the second line there is integer M, number of locations, K ≤ M ≤ 20.In each of the next M lines there are two integer X and Y, separated  with space, coordinates of each location, -1000 ≤ X,Y ≤ 1000.In the next line there is integer N, number of solitairs, 1 ≤ N ≤ 100.In each of the next N lines there are three integers X, Y and S,  separated with space, X and Y are coordinates of each solitaire, and S  is number of people in that solitaire, -1000 ≤ X,Y ≤ 1000, 1 ≤ S ≤ 100.We consider that solitaire is in radius of some restaurant if  distance between them is less or equal to R.  There are no two locations of restaurants on the same place.OutputIn only line of the output file we have to write maximal number from  the text above.SampleInput:2 2\r\n3\r\n1 0\r\n4 0\r\n7 0\r\n4\r\n0 0 1\r\n3 0 7\r\n5 0 9\r\n8 0 1Output:18Input:2 2\r\n3\r\n-2 0\r\n0 1\r\n3 0\r\n8\r\n-3 1 1\r\n-3 0 1\r\n-3 -1 1\r\n-2 -1 1\r\n0 0 3\r\n0 2 1\r\n2 1 3\r\n4 0 2Output:12Input:3 3\r\n5\r\n0 0\r\n1 6\r\n2 3\r\n6 6\r\n7 2\r\n8\r\n0 1 2\r\n0 5 3\r\n0 6 1\r\n1 0 1\r\n3 2 3\r\n3 6 2\r\n6 2 4\r\n8 6 3Output:17",
  "sample_input": "Input:2 2\r\n3\r\n1 0\r\n4 0\r\n7 0\r\n4\r\n0 0 1\r\n3 0 7\r\n5 0 9\r\n8 0 1Output:18",
  "sample_output": "Input:2 2\r\n3\r\n-2 0\r\n0 1\r\n3 0\r\n8\r\n-3 1 1\r\n-3 0 1\r\n-3 -1 1\r\n-2 -1 1\r\n0 0 3\r\n0 2 1\r\n2 1 3\r\n4 0 2Output:12",
  "link": "https://www.spoj.com/problems/PIZZALOC",
  "scraped_at": "2025-08-17 00:33:50",
  "test_cases": [
    {
      "input": "2 2\r\n3\r\n1 0\r\n4 0\r\n7 0\r\n4\r\n0 0 1\r\n3 0 7\r\n5 0 9\r\n8 0 1",
      "expected_output": "18",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 2\r\n3\r\n-2 0\r\n0 1\r\n3 0\r\n8\r\n-3 1 1\r\n-3 0 1\r\n-3 -1 1\r\n-2 -1 1\r\n0 0 3\r\n0 2 1\r\n2 1 3\r\n4 0 2",
      "expected_output": "12",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "5 7\n7\n3 4\n4 10\n8 2\n9\n8 10 6\n1 6 10\n4 5 3\n2 4 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 8\n9\n7 1\n6 7\n4 3\n7\n6 4 2\n1 3 9\n8 10 1\n2 6 5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "5 1\n1\n6 9\n5 8\n6 8\n4\n3 5 8\n10 7 10\n6 6 9\n5 2 6",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "79 78\n57\n87 49\n6 99\n78 87\n44\n6 35 32\n59 39 30\n48 54 78\n45 44 32",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "15 76\n3\n99 78\n7 24\n35 30\n72\n46 53 63\n29 68 23\n34 31 63\n1 76 67",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 7\n65\n2 28\n31 39\n57 30\n49\n77 76 60\n49 92 16\n87 58 60\n69 60 38",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "52 35\n65\n49 5\n55 98\n32 2\n29\n19 4 29\n91 16 19\n55 91 90\n11 91 28",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "98 59\n47\n94 95\n35 27\n28 73\n90\n38 92 94\n21 29 99\n52 4 70\n95 86 39",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "20 13\n8\n11 24\n21 36\n21 37\n49\n36 11 24\n32 14 43\n9 42 29\n15 8 14",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "32 20\n31\n15 37\n36 22\n16 36\n16\n34 34 23\n6 20 36\n10 21 42\n32 11 35",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 36\n20\n29 6\n17 34\n20 16\n27\n6 46 16\n33 6 16\n32 19 26\n20 13 18",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "45 40\n13\n9 16\n43 40\n26 6\n6\n16 49 13\n27 32 10\n26 11 29\n7 46 18",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "15 43\n49\n32 41\n20 25\n46 47\n31\n6 7 7\n36 5 47\n43 24 26\n19 18 33",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "47 9\n20\n34 28\n21 25\n49 28\n23\n49 22 17\n27 47 23\n15 8 14\n29 19 32",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "13 50\n45\n49 14\n38 15\n9 7\n13\n47 39 41\n10 7 8\n38 24 39\n47 41 33",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100\n100 100\n100 100\n100 100\n100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100\n100 100\n100 100\n100 100\n100\n100 100 100\n100 100 100\n100 100 100\n100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n100\n1 99\n2 100\n2 99\n100\n99 99 99\n2 100 2\n1 2 1\n100 2 100",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}