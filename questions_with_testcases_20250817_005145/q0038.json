{
  "problem_code": "problems",
  "title": "DNA Translation",
  "tags": [],
  "text": "Deoxyribonucleic acid (DNA) is composed of a sequence of nucleotide\r\nbases paired together to form a double-stranded helix structure.\r\nThrough a series of complex biochemical processes the nucleotide\r\nsequences in an organism's DNA are translated into the proteins it\r\nrequires for life.  The object of this problem is to write a computer\r\nprogram which accepts a DNA strand and reports the protein generated,\r\nif any, from the DNA strand.The nucleotide bases from which DNA is built are adenine, cytosine,\r\nguanine, and thymine (hereafter referred to as A, C, G, and T,\r\nrespectively).  These bases bond together in a chain to form half of a\r\nDNA strand.  The other half of the DNA strand is a similar chain, but\r\neach nucleotide is replaced by its complementary base.  The bases A\r\nand T are complementary, as are the bases C and G.  These two\r\n\"half-strands\" of DNA are then bonded by the pairing of the\r\ncomplementary bases to form a strand of DNA.Typically a DNA strand is listed by simply writing down the bases\r\nwhich form the primary strand (the complementary strand can always be\r\ncreated by writing the complements of the bases in the primary\r\nstrand).  For example, the sequence TACTCGTAATTCACT represents a DNA\r\nstrand whose complement would be ATGAGCATTAAGTGA.  Note that A is\r\nalways paired with T, and C is always paired with G.From a primary strand of DNA, a strand of ribonucleic acid (RNA) known\r\nas messenger RNA (mRNA for short) is produced in a process known as\r\ntranscription.  The transcribed mRNA is identical to the complementary\r\nDNA strand with the exception that thymine is replaced by a nucleotide\r\nknown as uracil (hereafter referred to as U).  For example, the mRNA\r\nstrand for the DNA in the previous paragraph would be AUGAGCAUUAAGUGA.It is the sequence of bases in the mRNA which determines the protein\r\nthat will be synthesized.  The bases in the mRNA can be viewed as a\r\ncollection of codons, each codon having exactly three bases.  The\r\ncodon AUG marks the start of a protein sequence, and any of the codons\r\nUAA, UAG, or UGA marks the end of the sequence.  The one or more\r\ncodons between the start and termination codons represent the sequence\r\nof amino acids to be synthesized to form a protein.  For example, the\r\nmRNA codon AGC corresponds to the amino acid serine (Ser), AUU\r\ncorresponds to isoleucine (Ile), and AAG corresponds to lysine (Lys).\r\nSo, the protein formed from the example mRNA in the previous paragraph\r\nis, in its abbreviated form, Ser-Ile-Lys.The complete genetic code from which codons are translated into amino\r\nacids is shown in the table below (note that only the amino acid\r\nabbreviations are shown).  It should also be noted that the sequence\r\nAUG, which has already been identified as the start sequence, can also\r\ncorrespond to the amino acid methionine (Met).  So, the first AUG in a\r\nmRNA strand is the start sequence, but subsequent AUG codons are\r\ntranslated normally into the Met amino acid.First base in codonSecond base in codonThird base in codonUCAGUPheSerTyrCysUPheSerTyrCysCLeuSer------ALeuSer---TrpGCLeuProHisArgULeuProHisArgCLeuProGlnArgALeuProGlnArgGAIleThrAsnSerUIleThrAsnSerCIleThrLysArgAMetThrLysArgGGValAlaAspGlyUValAlaAspGlyCValAlaGluGlyAValAlaGluGlyGThe input for this program consists of strands of DNA sequences, one\r\nstrand per line, from which the protein it generates, if any, should\r\nbe determined and output.  The given DNA strand may be either the\r\nprimary or the complementary DNA strand, and it may appear in either\r\nforward or reverse order, and the start and termination sequences do\r\nnot necessarily appear at the ends of the strand.  For example, a\r\ngiven input DNA strand to form the protein Ser-Ile-Lys could be any of\r\nATACTCGTAATTCACTCC, CCTCACTTAATGCTCATA, TATGAGCATTAAGTGAGG, or\r\nGGAGTGAATTACGAGTAT.  The input file will be terminated by a line\r\ncontaining a single asterisk character.You may assume the input to contain only valid, upper-case, DNA\r\nnucleotide base letters (A, C, G, and T).  No input line will exceed\r\n255 characters in length.  There will be no blank lines or spaces in\r\nthe input.  Some sequences, though valid DNA strands, do not produce\r\nvalid protein sequences; the string \"*** No translatable DNA found\r\n***\" should be output when an input DNA strand does not translate\r\ninto a valid protein.Input:ATACTCGTAATTCACTCC\r\nCACCTGTACACAGAGGTAACTTAG\r\nTTAATACGACATAATTAT\r\nGCCTTGATATGGAGAACTCATTAGATA\r\nAAGTGTATGTTGAATTATATAAAACGGGCATGA\r\nATGATGATGGCTTGA\r\n*Output:Ser-Ile-Lys\r\nCys-Leu-His\r\nSer-Tyr\r\n*** No translatable DNA found ***\r\nLeu-Asn-Tyr-Ile-Lys-Arg-Ala\r\nMet-Met-Ala",
  "sample_input": "Input:ATACTCGTAATTCACTCC\r\nCACCTGTACACAGAGGTAACTTAG\r\nTTAATACGACATAATTAT\r\nGCCTTGATATGGAGAACTCATTAGATA\r\nAAGTGTATGTTGAATTATATAAAACGGGCATGA\r\nATGATGATGGCTTGA\r\n*Output:Ser-Ile-Lys\r\nCys-Leu-His\r\nSer-Tyr\r\n*** No translatable DNA found ***\r\nLeu-Asn-Tyr-Ile-Lys-Arg-Ala\r\nMet-Met-Ala",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DNA",
  "scraped_at": "2025-08-17 00:33:20",
  "test_cases": [
    {
      "input": "ATACTCGTAATTCACTCC\r\nCACCTGTACACAGAGGTAACTTAG\r\nTTAATACGACATAATTAT\r\nGCCTTGATATGGAGAACTCATTAGATA\r\nAAGTGTATGTTGAATTATATAAAACGGGCATGA\r\nATGATGATGGCTTGA\r\n*",
      "expected_output": "Ser-Ile-Lys\r\nCys-Leu-His\r\nSer-Tyr\r\n*** No translatable DNA found ***\r\nLeu-Asn-Tyr-Ile-Lys-Arg-Ala\r\nMet-Met-Ala",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "ewbxcu\nwizr\npjfsvetidsvdcic\nyxshcc\nctkasp\nkuwnlaliv\nj",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "qujk\nc\nyjzafytmbxuwhmocnbfv\nnklytofnujfyctkymjy\ndxmeiaexcs\nutzmeond\njt",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "jbkilonpily\nxeztnpzknt\nczqhzwjpfipbbpwwfdt\nmbmziak\npltqowxukguoqmjjpaf\nibabhsjuzaouuzsvu\nly",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "zulnyrblexqwk\nxqneterevwagqpueo\nhylnmm\nyhvphzmshpwqacpef\ng\nmk\ny",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "odpwgtoy\nvqvywtnpzupnpij\nuwmjhzjoxhlcmeglvyto\nanva\ngvraeo\ncnc\ns",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "lbdlt\natak\ntjurszoehxpx\noynjrr\nwym\nidcllltqmvnoeglmpe\nm",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "eeenjifz\nlrjqgofclijy\nmkfxbyca\nkjkz\nf\nyarkaulgkwaveohrejz\nm",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "rhnqiffcuodszqwflb\nvgcvzbr\ndh\nkwmyzosztjcqfkvu\npgbbdzuo\nvdqox\nz",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "smysqqhqtkcx\ntvc\nskrhfikr\nezqcjmquj\nzydwpawftbt\nesrtgigbqwcorbejt\na",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "wgnunl\noyf\nbyhnfi\nq\nxhvegfgihyigeoqruivi\nvodurdlnrfnnn\nr",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "fpohveqcxuqjoh\nzcmreutwxsfkmtupq\nicbvjbzznqtvz\nhotbxst\njcwohfgs\nlllaonlieg\ng",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "ussf\nokv\na\nrerdcpwgcvu\nmlbdkjjazsnichhzpa\najxwlbfulmeek\ns",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "jvnhjbknjrgvpjloccv\nilneqi\ncpfcyg\nnxgkysaydoguxlcjstl\nt\njpasulqw\nkc",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "hgnlgxvtwug\npzdlci\nhqtljy\nbnta\ntk\nyxjxxopmfvdzajtglq\np",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "tstywzljjkvjxqdou\nqosauvhywqofhmdai\nhveonnlqi\nfwea\ngvs\nmwjwq\ng",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "nqgvye\nysjzzuvwgrxz\nxbhapuwrqj\nzppyuhmzudpokpp\nacfrruipc\ntcvaizhbyxhg\na",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "dgjjrisgrnydtezm\njheox\nxmrdwidlb\nuu\nuioez\nm\nkf",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "cciieg\nougbmpjqjejxc\nccdvhysrntoiqmaja\noqgcyhfoessk\nqcgzcybi\nm\nq",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "xxursktwdjgzbdeag\nbe\nvhmqepbwjdxjg\noxihirrmviavooxz\nvgmklovlbolqyko\nrvmujaftmolrihmerw\nzx",
      "expected_output": "0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:21"
}