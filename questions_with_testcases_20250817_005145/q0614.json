{
  "problem_code": "problems",
  "title": "LCM GCD Love",
  "tags": [],
  "text": "Bob fell in love with LCM and GCD. So much that he started seeing LCMs and GCDs everywhere. Betty, his girlfriend was jealous and she gave Bob an array A[ ] of integers, which had nothing to do with LCMs or GCDs.Quickly, naughty Bob evaluated a new array B[ ] containing n integers, such that B[i] is LCM(1, 2, 3 ... A[i]), A[i]>0. When A[i] is 0, B[i] is also 0.Angry Betty decided to give m queries to Bob, each being one of the following type:\"0 i j p\", meaning add 'p' to each element in A[i...j]. -300000 ≤ p ≤ 300000, 0 ≤ i ≤ j < n\"1 i j\", meaning print the LCM of all elements in B[i...j]. 0 ≤ i ≤ j < n\"2 i j\", meaning print the GCD of all elements in B[i...j]. 0 ≤ i ≤ j < nInputFirst line contains n (n ≤ 100000) and m (m ≤ 35000).Second line contains n integers in the original array A[ ].Next m lines contain one of the above said queries.It is guaranteed that A[i] after any number of updates will satisfy 0 ≤ A[i] ≤ 300000.OutputOutput one line for each query of type 1 or 2, modulo 1000000007.ExampleInput:5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4Output:60\r\n1\r\n60\r\n2",
  "sample_input": "Input:5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4Output:60\r\n1\r\n60\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LGLOVE",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "5 5\r\n4 1 3 6 2\r\n1 2 4\r\n2 1 3\r\n0 0 3 2\r\n1 1 2\r\n2 2 4",
      "expected_output": "60\r\n1\r\n60\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 8\n2 3 10 1 5\n2 4 3\n10 2 2\n9 8 10 5\n6 7 7\n10 7 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 9\n5 2 9 9 2\n5 4 7\n10 8 2\n3 4 1 4\n3 6 9\n7 7 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 2\n2 7 4 6 7\n6 10 1\n2 8 4\n1 2 9 9\n10 5 6\n7 7 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "34 3\n18 80 94 1 90\n95 98 26\n23 17 54\n55 11 66 25\n40 94 31\n56 48 26",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "99 79\n3 1 89 60 74\n72 1 6\n45 27 47\n73 38 28 77\n68 49 50\n37 65 6",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 97\n49 86 29 93 58\n7 67 65\n3 22 49\n38 22 5 53\n59 49 81\n97 4 79",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "83 47\n59 48 41 50 26\n69 95 63\n64 53 2\n65 86 81 37\n78 23 53\n48 78 51",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "99 67\n29 90 79 72 68\n88 1 93\n60 18 22\n88 32 69 28\n7 21 83\n90 35 13",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "30884 42056\n30621 47369 38964 37145 12220\n11163 32531 33582\n26979 29822 32482\n14695 38709 35001 43361\n40162 30427 35455\n32056 12243 28788",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "12940 32143\n10430 38932 17496 40946 15037\n15997 37365 30095\n26095 17511 38711\n36577 31639 12820 22659\n27539 36497 6409\n11294 8403 49983",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "9095 33725\n33447 6698 5243 8438 27550\n29177 5033 33507\n32052 10413 24293\n37192 11836 17136 44757\n46687 37238 36392\n34711 19045 24086",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "32315 32667\n48888 26657 8266 8021 7662\n46486 45449 45312\n13354 44219 45778\n42581 23636 49444 9188\n27543 31950 19658\n24624 21277 42028",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "48399 9035\n5396 39710 10130 43446 7366\n27732 46741 36597\n28143 49473 46135\n35703 35418 47145 35447\n23171 10714 15848\n43790 30061 42460",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34887 37285\n17416 40995 22409 32343 45230\n46521 26295 39454\n45234 9937 16123\n43841 11023 16223 10202\n22681 21853 32295\n15650 24667 20505",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "32228 10631\n41925 15756 32416 9466 24368\n22900 45008 40609\n31792 20260 35839\n19047 22106 29434 42227\n5456 38429 38540\n38517 33427 34195",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n100000 100000 100000 100000\n100000 100000 100000\n100000 100000 100000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 99999\n2 100000 100000 1 100000\n99999 1 1\n1 2 2\n1 100000 2 99999\n1 99999 100000\n100000 100000 99999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 1\n1 99999 99999 99999 1\n100000 2 1\n1 99999 2\n99999 2 2 2\n99999 1 1\n1 99999 99999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}