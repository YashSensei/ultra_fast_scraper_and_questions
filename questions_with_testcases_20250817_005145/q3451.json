{
  "problem_code": "problems",
  "title": "Cell Phone",
  "tags": [],
  "text": "Nowadays, everyone has a cellphone, or even two or three. You probably know where their\r\nname comes from. Do you. Cellphones can be moved (they are \"mobile\") and they use wireless\r\nconnection to static stations called BTS (Base Transceiver Station). Each BTS covers an area\r\naround it and that area is called a cell.The Czech Technical University runs an experimental private GSM network with a BTS right on\r\ntop of the building you are in just now. Since the placement of base stations is very important\r\nfor the network coverage, your task is to create a program that will find the optimal position\r\nfor a BTS. The program will be given coordinates of \"points of interest\". The goal is to find\r\na position that will cover the maximal number of these points. It is supposed that a BTS can\r\ncover all points that are no further than some given distance R. Therefore, the cell has a circular\r\nshape.The picture above shows eight points of interest (little circles) and one of the possible optimal\r\nBTS positions (small triangle). For the given distance R, it is not possible to cover more than\r\nfour points. Notice that the BTS does not need to be placed in an existing point of interest.InputThe input consists of several scenarios. Each scenario begins with a line containing two integer\r\nnumbers N and R. N is the number of points of interest,1 ≤ N ≤ 2 000. R is the maximal\r\ndistance the BTS is able to cover, 0 ≤ R < 10 000. Then there are N lines, each containing two\r\ninteger numbers Xi, Yigiving coordinates of the i-th point, |Xi|, |Yi| < 10 000. All points are\r\ndistinct, i.e., no two of them will have the same coordinates.The scenario is followed by one empty line and then the next scenario begins. The last one is\r\nfollowed by a line containing two zeros.A point lying at the circle boundary (exactly in the distance R) is considered covered. To avoid\r\nfloating-point inaccuracies, the input points will be selected in such a way that for any possible\r\nsubset of points S that can be covered by a circle with the radius R +0.001, there will always\r\nexist a circle with the radius R that also covers them.OutputFor each scenario, print one line containing the sentence \"It is possible to cover M points.\",\r\nwhere M is the maximal number of points of interest that may be covered by a single BTS.ExampleInput:8 2\r\n1 2\r\n5 3\r\n5 4\r\n1 4\r\n8 2\r\n4 5\r\n7 5\r\n3 3\r\n\r\n2 100\r\n0 100\r\n0 -100\r\n\r\n0 0Output:It is possible to cover 4 points.\r\nIt is possible to cover 2 points.The first sample input scenario corresponds to the picture, providing that the X axis aims right\r\nand Y axis down.",
  "sample_input": "Input:8 2\r\n1 2\r\n5 3\r\n5 4\r\n1 4\r\n8 2\r\n4 5\r\n7 5\r\n3 3\r\n\r\n2 100\r\n0 100\r\n0 -100\r\n\r\n0 0Output:It is possible to cover 4 points.\r\nIt is possible to cover 2 points.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CERC07C",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "8 2\r\n1 2\r\n5 3\r\n5 4\r\n1 4\r\n8 2\r\n4 5\r\n7 5\r\n3 3\r\n\r\n2 100\r\n0 100\r\n0 -100\r\n\r\n0 0",
      "expected_output": "It is possible to cover 4 points.\r\nIt is possible to cover 2 points.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 5\n6 9\n4 4\n4 7\n7 1\n5 4\n7 6\n6 1\n8 6\n3 4\n6 8\n6 3\n5 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 3\n5 1\n6 10\n1 9\n10 6\n3 8\n2 6\n10 7\n2 1\n9 1\n4 7\n10 6\n3 7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 8\n2 5\n6 1\n3 7\n2 2\n10 9\n6 3\n9 6\n2 10\n4 1\n9 5\n2 4\n3 9",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "15 86\n90 68\n14 55\n33 37\n31 39\n96 69\n50 100\n16 5\n66 70\n70 49\n75 61\n44 76\n72 81",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "63 72\n31 25\n78 44\n8 81\n53 15\n56 56\n68 96\n93 80\n27 40\n92 47\n91 35\n16 4\n56 71",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "21 20\n72 92\n32 36\n61 91\n85 90\n79 93\n8 39\n57 47\n6 88\n36 47\n12 64\n62 69\n39 55",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "39 22\n27 59\n74 22\n21 5\n59 73\n23 73\n30 5\n89 60\n43 82\n30 82\n33 39\n81 83\n24 2",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "54 77\n83 86\n35 50\n30 3\n28 25\n62 63\n34 86\n79 39\n57 42\n49 46\n62 40\n2 32\n72 15",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "937 494\n613 826\n650 477\n148 950\n565 912\n795 245\n255 714\n108 270\n999 978\n319 998\n204 845\n977 478\n817 496",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "315 787\n672 902\n993 537\n318 359\n405 108\n124 614\n678 357\n333 733\n398 626\n453 627\n637 475\n805 265\n120 210",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "539 280\n211 503\n803 675\n680 481\n736 365\n236 948\n222 250\n157 315\n793 826\n441 294\n231 548\n979 162\n495 936",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "485 557\n572 973\n301 728\n607 859\n443 201\n648 269\n926 833\n251 464\n690 629\n462 473\n904 174\n414 727\n241 173",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "340 462\n612 220\n551 102\n878 641\n384 756\n905 394\n137 819\n396 689\n355 653\n282 260\n801 111\n833 129\n526 592",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "502 103\n173 342\n666 564\n469 828\n742 592\n637 467\n900 642\n138 305\n660 683\n958 622\n565 551\n872 694\n415 433",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "224 122\n348 287\n528 361\n401 895\n422 618\n183 196\n200 259\n910 454\n623 580\n249 412\n409 616\n752 728\n591 899",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000\n2000 2000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2000\n1 1999\n2 1999\n2000 2000\n1999 2\n1999 1999\n2 2\n2 1\n1 1\n2 1999\n2000 2\n2000 1\n1999 1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2000 1\n1999 1999\n2000 1999\n1 2000\n1999 1999\n2000 2000\n2000 1999\n1999 1\n1 1999\n2000 1999\n2 2\n1 2000\n2000 1999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:08"
}