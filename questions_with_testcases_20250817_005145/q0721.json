{
  "problem_code": "problems",
  "title": "Exclusive Security",
  "tags": [],
  "text": "Ashton Carl McDonald (known as A.C.M.) works at a company called XOR (XptO Revolution). The company has a simple rule for employee identification: each employee must have an integer id that must be unique (no two employees may have the same id).Recently, the employees were grouped into teams, in the following way: the teams are intervals on the XOR’s employees list. An employee can be part of more than one team.The company wants to hire new employees, and needs to generate id numbers for them. However, due to a security flaw in Human Resources software, the company can’t assign a new number that, if one executes Exclusive-Or operation with all numbers of any team, results in 0.McDonald, as the leader lazy programmer of XOR, needs your help to determine if a given number can or can’t be assigned to a new employee.InputThe input contains multiple test cases.The first line of each test case contains three numbers, N, T and Q, the number of employees in the company, the number of teams and the number of new numbers to be queried, respectively.The second line contains N numbers Xi, 1 ≤ i ≤ N, distinct, the employees id numbers.Each one of the following E lines contains two numbers, A and B, which represent an interval that forms a team. It means that the employees identified by XA… XBform one team.Each one of the following Q lines contains one number Yj, the queried number.Limits: 1 ≤ N, T, Q ≤ 105, 1 ≤ A ≤ B ≤ N. All Xiand Yjwill be non-negative and fit into a signed 32 bit integer, and all queries must be treated as independent from others (just the initial employees and teams must be taken into account).OutputFor each test case, the program must print Q + 1 output lines. For each queried number, the program must print ‘Y’, if the number can be assigned to a new employee, or ‘N’, otherwise. The last line is a simple minus sign ‘-’.ExampleInput:3 2 41 2 41 21 335670 0 0Output:NYYN-",
  "sample_input": "Input:3 2 41 2 41 21 335670 0 0Output:NYYN-",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EXCLSEC",
  "scraped_at": "2025-08-17 00:33:05",
  "test_cases": [
    {
      "input": "3 2 41 2 41 21 335670 0 0",
      "expected_output": "NYYN-",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 7 9 6 1 10 7 10 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 5 1 9 7 9 6 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7 7 7 3 2 1 5 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "86 87 22 88 63 32 41 78 45",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "11 99 14 55 32 77 80 56 73",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "73 56 81 26 37 5 8 73 33",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "79 6 33 51 14 44 32 7 98",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 19 71 35 14 90 62 94 50",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "269 368 318 145 70 112 52 415 216",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "391 365 201 317 469 331 287 214 206",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "410 178 166 73 91 102 384 66 127",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "356 496 355 460 86 425 359 346 107",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "291 88 163 445 132 372 340 59 229",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "459 299 467 165 252 109 328 256 119",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "349 166 410 357 64 70 381 332 485",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 2 1 1000 1 1 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 999 1 2 2 1 999 1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}