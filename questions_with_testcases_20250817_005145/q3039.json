{
  "problem_code": "problems",
  "title": "Ada and Branches",
  "tags": [],
  "text": "Ada the Ladybug lives on a bush. A typical bush consists of some fruits connected with branches. Ada wants to travel between some fruits. Problem is that each edge can stand only someXiweight (so if some         creature  with more weight would like to travel over the edge, it would         break and the creature would fall of the bush).Ada wants to make several travels so she asks you (for each such travel) to how many distinct fruits she can get?InputThe first line of each test-case will contain three integers2 ≤ N ≤     105, the number of  fruits,1 ≤ M ≤     2*105, the number of edges and1 ≤ Q ≤     3*105, the number of queries.The nextMlines will contain three integers0 ≤ a, b <     N (a ≠ b), the fruits which are connected by and edge and1 ≤     Xi≤ 105.The nextQlines will contain two integers0 ≤ a <     N, the fruit Ada starts in and1 ≤ Y ≤     105, her actual weight.NOTEMultiedges are allowed.OutputFor each query, output the number of fruits Ada can get to.Example Input4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5Example Output4\r\n2\r\n1Example Input8 10 8\r\n1 3 3\r\n1 2 2 \r\n3 5 1\r\n3 4 3\r\n2 4 7\r\n5 6 2\r\n4 6 8\r\n4 7 3\r\n7 0 1\r\n6 0 4\r\n1 3\r\n1 4\r\n0 5\r\n6 6\r\n6 1\r\n2 3\r\n0 4\r\n5 2Example Output7\r\n1\r\n1\r\n3\r\n8\r\n7\r\n4\r\n8",
  "sample_input": "4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5",
  "sample_output": "4\r\n2\r\n1",
  "link": "https://www.spoj.com/problems/ADABRANC",
  "scraped_at": "2025-08-17 00:34:35",
  "test_cases": [
    {
      "input": "4 4 3\r\n1 2 4\r\n2 3 3\r\n3 0 4\r\n0 1 3\r\n1 3\r\n1 4\r\n1 5",
      "expected_output": "4\r\n2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1 8\n7 3 9\n8 10 2\n5 8 1\n6 3 2\n2 6\n5 3\n4 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 1\n4 4 2\n3 8 1\n6 2 2\n10 4 8\n2 1\n7 2\n8 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 5 10\n5 7 5\n9 1 3\n1 9 3\n7 8 7\n4 3\n10 9\n2 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "87 78 61\n11 78 12\n91 17 2\n12 71 10\n17 26 86\n34 94\n40 73\n49 18",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "33 21 48\n41 36 6\n94 71 14\n23 86 39\n6 65 12\n31 19\n80 21\n74 81",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "14 75 21\n16 44 39\n47 80 90\n74 67 21\n58 39 47\n25 51\n51 93\n3 86",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "67 65 57\n74 83 91\n43 87 1\n77 64 34\n19 61 91\n57 61\n87 30\n14 3",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "93 63 58\n13 24 62\n90 1 75\n30 99 43\n71 18 38\n62 68\n57 3\n10 94",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "32 33 39\n14 42 42\n37 34 6\n38 36 42\n10 5 23\n7 6\n10 14\n36 36",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "24 43 7\n35 5 15\n26 7 25\n19 10 10\n35 44 7\n5 9\n8 5\n37 39",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "36 30 30\n26 8 23\n37 44 44\n30 45 21\n9 6 35\n16 8\n12 48\n32 36",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "35 24 28\n9 37 13\n38 6 41\n12 49 13\n27 30 23\n23 6\n45 33\n20 7",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "18 45 50\n13 50 44\n49 24 44\n7 51 26\n12 42 32\n18 12\n15 17\n47 32",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "33 51 31\n34 25 51\n45 31 6\n32 11 42\n19 23 38\n27 48\n24 7\n22 8",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "39 22 46\n10 23 27\n35 32 10\n7 38 40\n28 10 24\n47 39\n6 52\n29 48",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105 105\n105 105\n105 105\n105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 2\n2 105 1\n105 1 104\n2 1 105\n104 1 1\n105 2\n105 104\n2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 104\n104 105 2\n105 1 105\n105 2 1\n2 2 1\n2 2\n2 104\n104 105",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}