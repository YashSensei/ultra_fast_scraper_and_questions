{
  "problem_code": "problems",
  "title": "Escape from Jail",
  "tags": [],
  "text": "Harry is currently a prisoner of the International Common Prison for Criminals (ICPC), the\r\nmost secure prison in the world. It was designed by and old gamer and as such, the prison is\r\nnot necessarily closed, but only an incredibly logical and fast mind can get out.The prison is made of N chambers connected by M corridors. Each corridor connects exactly\r\ntwo chambers and can be traversed in any direction. Each chamber is either empty, contains\r\na single unbreakable door, or contains a single key. No chamber contains both a door and a\r\nkey. There are K doors and K keys in the whole prison. Each key opens a different door, and\r\neach door is opened by a different key. If a chamber contains a door, the corresponding key is\r\nneeded to enter the chamber, regardless of which corridor was used to reach it.Harry found the complete map of the prison, including the location of each door and each key,\r\nand wants to know how to get out that hell hole. According to the map, Harry is now in\r\nchamber number 1, and the exit is in chamber N . Given the information on the map, let Harry\r\nknow if it is possible to escape or if he is doomed forever.InputThe input contains several test cases, each one described in several lines. The first line of each\r\ntest case contains three integers N , K, and M separated by single spaces. The value N is the\r\nnumber of chambers in the prison (4 ≤ N ≤ 105); each chamber is identified by an integer\r\nnumber between 1 and N . The value K is the number of doors and keys (1 ≤ K ≤ N/2), while\r\nM is the number of corridors (1 ≤ M ≤ 105). Each of the next K lines describes a door and its\r\ncorresponding key using two integers A and B separated by a single space, with the following\r\nmeaning: chamber A contains the key that opens the door in chamber B (2 ≤ A, B ≤ N − 1).\r\nThe last M lines of the test case describe the corridors. Each of these lines contains two integers\r\nC and D separated by a single space, indicating that there is a corridor connecting chambers\r\nC and D (1 ≤ C < D ≤ N ).You may assume that no two corridors connect the same pair of\r\nchambers. The last line of the input contains the number −1 three times separated by single\r\nspaces and should not be processed as a test case.OutputFor each test case output a single line with an uppercase “Y” if it is possible for Harry to escape\r\nfrom the prison, or an uppercase “N” otherwise.ExampleInput:4 1 4\r\n2 3\r\n3 4\r\n2 3\r\n1 3\r\n2 4\r\n6 2 5\r\n5 4\r\n3 2\r\n2 6\r\n2 5\r\n1 4\r\n1 5\r\n3 4\r\n4 1 1\r\n3 2\r\n2 3\r\n-1 -1 -1Output:N\r\nY\r\nN",
  "sample_input": "Input:4 1 4\r\n2 3\r\n3 4\r\n2 3\r\n1 3\r\n2 4\r\n6 2 5\r\n5 4\r\n3 2\r\n2 6\r\n2 5\r\n1 4\r\n1 5\r\n3 4\r\n4 1 1\r\n3 2\r\n2 3\r\n-1 -1 -1Output:N\r\nY\r\nN",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ESJAIL",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 1 4\r\n2 3\r\n3 4\r\n2 3\r\n1 3\r\n2 4\r\n6 2 5\r\n5 4\r\n3 2\r\n2 6\r\n2 5\r\n1 4\r\n1 5\r\n3 4\r\n4 1 1\r\n3 2\r\n2 3\r\n-1 -1 -1",
      "expected_output": "N\r\nY\r\nN",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10 7\n7 3\n1 2\n4 10\n6 10\n2 10\n8 10 2\n5 10\n3 1\n10 7\n4 4\n8 2\n9 1\n7 2\n5 6 1\n3 8\n2 7\n1 8 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 2\n10 8\n1 9\n5 6\n3 5\n8 6\n1 10 1\n1 4\n1 4\n10 10\n4 6\n9 3\n9 10\n7 5\n5 4 2\n5 1\n5 4\n4 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 3 3\n6 6\n9 6\n4 8\n5 4\n6 6\n4 10 6\n5 7\n1 3\n3 8\n10 4\n9 4\n3 3\n3 5\n3 2 2\n6 7\n10 2\n6 4 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "43 97 25\n80 88\n92 12\n100 35\n31 18\n3 97\n82 61 22\n77 52\n60 68\n66 56\n79 7\n52 48\n82 30\n45 41\n30 3 46\n36 85\n59 58\n60 7 98",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 33 8\n59 33\n30 38\n1 94\n2 90\n50 42\n89 40 4\n58 87\n20 28\n99 64\n29 68\n12 94\n55 89\n7 3\n38 80 68\n74 42\n12 88\n28 67 44",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "55 44 74\n70 92\n39 56\n45 63\n46 74\n60 33\n74 70 67\n18 72\n97 9\n93 54\n28 58\n16 66\n94 32\n8 57\n86 42 76\n91 47\n74 3\n48 46 26",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "14 71 63\n61 48\n68 48\n51 88\n58 89\n31 3\n68 21 70\n82 23\n45 10\n18 78\n81 86\n53 99\n72 21\n77 32\n84 16 55\n99 86\n23 51\n37 79 52",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "94 2 39\n51 90\n34 20\n83 52\n26 32\n16 59\n30 14 28\n47 44\n36 93\n40 66\n30 99\n85 64\n77 18\n29 16\n72 98 67\n5 68\n54 24\n1 60 47",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "46 42 47\n35 28\n23 52\n25 46\n30 35\n15 20\n39 32 52\n17 21\n24 37\n36 12\n20 31\n26 7\n10 47\n16 27\n43 16 22\n15 25\n45 16\n50 27 38",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "38 35 16\n21 7\n47 21\n48 18\n40 12\n34 6\n43 45 11\n27 44\n7 20\n9 46\n19 11\n51 17\n31 34\n10 37\n52 37 18\n33 23\n29 11\n33 32 40",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "32 8 44\n22 51\n51 27\n28 12\n41 23\n10 8\n5 22 47\n8 42\n35 21\n28 44\n46 52\n40 6\n27 23\n17 34\n20 23 28\n30 22\n36 31\n38 38 24",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "14 22 26\n20 36\n35 7\n29 15\n8 30\n25 35\n29 7 44\n10 5\n44 42\n27 8\n24 12\n18 8\n20 42\n10 45\n49 36 35\n22 28\n16 22\n31 51 10",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "19 22 34\n10 25\n31 39\n24 10\n43 35\n40 49\n6 20 22\n42 10\n40 45\n48 25\n21 24\n14 44\n18 43\n47 46\n39 45 7\n20 26\n41 16\n12 17 46",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "44 52 36\n15 10\n14 25\n39 32\n49 34\n31 23\n17 27 22\n36 17\n17 5\n18 50\n30 22\n40 33\n28 22\n14 46\n32 51 13\n39 40\n11 44\n7 43 30",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "22 40 40\n46 18\n14 43\n47 6\n6 41\n27 12\n7 44 11\n6 17\n39 51\n36 22\n14 20\n24 12\n47 48\n7 20\n49 9 22\n29 9\n21 42\n50 41 16",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105\n105 105 105\n105 105\n105 105\n105 105 105",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "105 104 105\n104 2\n2 1\n104 105\n2 104\n104 105\n105 105 1\n2 2\n1 1\n104 105\n104 105\n1 2\n104 105\n105 2\n105 1 105\n105 104\n1 1\n2 104 104",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105 2\n1 1\n105 2\n104 1\n105 104\n1 104\n104 105 2\n105 2\n105 104\n1 2\n104 104\n1 105\n2 2\n104 105\n2 2 104\n2 2\n104 104\n1 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}