{
  "problem_code": "problems",
  "title": "New Year Train",
  "tags": [],
  "text": "On the New Year Eve, a government of one country decided to send a train with gifts to each of its towns. For each\r\nof the N towns exactly one wagon with gifts was sent. The route was organized in such way\r\nthat at each place the last wagon would be detached and train would continue on its way, until all gifts were delivered.\r\nJust before the departure it turned out that the loading workers did not pay attention to numeration of\r\nthe wagons and loaded the gifts in random order. It was impossible to detach a wagon\r\nfrom the middle of the train and there was no time to rearrange gifts.\r\nLuckily, there was a depot with parallel tracks. At the entrance of the depot each wagon could be directed\r\nto any of the tracks and wagons could leave the depot from the other side in the right sequences 1, 2, 3,\r\n4, and so on. Note that we will then be leaving presents in towns in the reversed order (..., 4, 3, 2, 1).For example, let's say we have a train with wagons in the following order: 2, 5, 1, 4, 6, 3. Wagons 2, 5, 6 could be directed to the first track; wagons 1, 4 to the second\r\none and wagon 3 to the third. In this case wagons could leave the depot\r\nin the right order.\r\nFortunately, there were enough tracks in the depot to rearrange the train.InputFirst line of the input contains two integers N and M: the number of wagons in the train and the\r\n\r\nnumber of tracks in the depot respectively (1 ≤ N ≤ 800 000, 1 ≤ M ≤ 100 000, M ≤ N). Second\r\nline contains N integers: sequence of wagons before the entrance to the depot.\r\nIt's guaranteed that solution always exists.OutputFirst line of the output must contain N integers: number of track that should be chosen for each wagon from\r\n\r\ninput sequence (tracts are numbered from 1 to M). On the second line print the number of tracks in order the wagons should leave\r\nthe depot to result in the sequence 1, 2, 3, and so on. If multiple solutions exists, print the one that results in lexicographically smallest sequence in the first line of the output.ExampleInput6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_input": "Input6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IZHONYT",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "Input6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 8\nz 7\n3 9 9 9 9 3 9 5 9 1 9 7\n2 10 4 3 10 gwjwxx 7 5 6 4 7\n10 10 3 8 8 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 6\nvje 7\n4 8 9 4 1 2 9 7 10 4 3 9\n8 9 2 9 3 mcwv 7 9 10 10 8\n6 8 3 10 2 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\nsy 8\n2 9 9 9 4 4 2 3 10 2 1 8\n3 7 4 9 10 s 1 8 6 4 1\n8 1 6 4 3 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "35 20\nxbydlf 92\n85 7 84 58 12 66 89 95 71 6 60 45\n94 63 21 82 8 hsab 57 54 91 5 44\n50 97 80 59 14 36",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "58 15\nqe 98\n39 42 56 81 2 99 94 30 1 36 81 44\n49 51 11 43 69 carnva 95 78 80 100 43\n91 43 62 85 78 38",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "41 32\nxszkcw 76\n53 95 45 40 61 88 18 9 50 83 28 20\n41 22 9 40 40 u 68 25 39 55 17\n97 41 67 24 44 94",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "84 43\niiwoh 99\n74 98 51 10 69 7 49 53 61 4 9 72\n53 89 90 73 65 vlnhnrwq 56 46 96 61 40\n60 51 85 1 88 92",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 60\nckjkh 1\n12 89 88 76 99 8 8 89 99 57 78 29\n96 66 23 18 72 r 97 21 47 51 64\n87 7 38 92 16 28",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "380196 216938\nfmlgm 326327\n355907 373450 357054 213856 265697 72489 64951 335796 224819 266276 303645 225958\n382006 75176 278909 217019 391793 rcqkc 375953 378578 335461 196009 379373\n257825 253413 152987 125669 163487 319730",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "182827 40609\nyrqe 114021\n326427 376371 154042 49663 77954 378963 360154 269594 71711 213735 395178 334524\n370080 87553 66180 111928 350443 blgdzn 134152 393100 293161 101777 194603\n239104 128216 323696 229286 69112 49417",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "340679 269771\nudpo 61676\n116220 166783 273759 279041 198457 338305 371338 59685 140620 311706 247673 92497\n314210 249300 171213 390241 390692 rkpfam 48799 380976 387728 61675 141720\n331908 228817 200756 73023 280640 72149",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "183239 309014\nefu 54530\n244906 85229 126202 357992 235969 351634 318509 122663 279903 341620 309135 117331\n69826 359321 44809 203038 301515 z 60503 245741 230291 332966 98723\n221535 389972 304395 384995 116346 295517",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "109900 331011\njteee 63485\n243742 312269 271241 191797 230912 103231 203158 326478 335710 185378 355159 326536\n349515 269756 49073 233489 372637 fil 94232 362926 232827 159102 354632\n47891 164815 192448 387489 70034 181129",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "389336 346240\nacmmh 230356\n112428 261168 166516 227850 334079 383964 277323 239264 167465 222237 51901 259671\n217494 225537 300678 346849 52604 xtyjcek 294472 356861 346002 168151 162779\n276364 384973 110862 140573 264498 95827",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "83546 123559\ns 290413\n181805 363116 177728 147076 302995 164316 288751 62688 341499 278737 66081 50919\n162336 232445 72280 265176 396639 oy 188844 196490 241420 284238 261788\n79965 88619 96374 269433 261819 134317",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "800000 800000\nhlnok 800000\n800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 a 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 800000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "800000 800000\ncw 800000\n800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 azns 800000 800000 800000 800000 800000\n800000 800000 800000 800000 800000 800000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "800000 2\njaetgz 799999\n799999 1 1 1 1 2 799999 800000 1 800000 1 799999\n800000 800000 800000 2 1 ggumfw 799999 800000 800000 800000 800000\n2 799999 800000 799999 1 799999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\nrioqkw 799999\n2 799999 800000 799999 799999 799999 799999 2 799999 2 1 800000\n800000 800000 799999 2 2 sybq 1 799999 799999 2 800000\n800000 800000 800000 1 799999 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:38:01"
}