{
  "problem_code": "problems",
  "title": "Palindromic DNA",
  "tags": [],
  "text": "A DNA sequence is composed of a series of four possible nucleobases, namely Adenine, Guanine, Thymine and Cytosine; we will refer to each of these bases by their initial. For our purposes, nucleobases have an associated cyclic “order”:Ais followed byG, which in turn is followed byT, which is followed byC, which is followed byAagain. State-of-the-art research in genomics has revealed the startling fact that many diseases are caused by certain subsequences of bases not forming a palindromic sequence! Your mission as a leading researcher at ICPC laboratories is to take a DNA stringSand a series of subsetsP1...Ptof indices to characters (nucleobases) inS, and transformSso that each of the restrictions of the resulting string toP1...Ptare palindromic. (The restriction ofSto a subsetP= {i1,i2...ik} of indices, where 0 ≤i1<i2< ... <ik< |S|, is the stringSi1Si2…Sik). It is possible to inspect any base ofSat will, but only three transformations can be applied to a base:Leave it unaltered.Increase it by 1 in the cyclic order of nucleobases (e.g. turnCintoA).Decrease it by 1 (e.g. turnTintoG).Moreover, owing to limitations of current technology, it is impossible to modify two bases in consecutive positions of the sequence. Is our goal achievable?By way of example, consider DNA sequenceAGTAT. Number positions starting from 0, and suppose we have the three subsetsP1= {1, 4},P2= {0, 1} andP3= {0, 2, 4}. One solution is to increase the first character and decrease the last, yieldingS′ =GGTAG. The restrictions ofS′ toP1,P2andP3areGG,GGandGTG, respectively; all of them are palindromic.One case where no solution is possible is when the string isCATGC, and we require the subsequences determined by positions {0,3} and {3,4} be palindromic. Here, characters 3, 0 and 4 would all need to become aT. But this entails modifying consecutive characters 3 and 4, which is not allowed.InputThe first line of each test case has two integersNandT(1 ≤N≤ 10 000, 1 ≤T≤ 6 000), the sequence length and number of subsets to consider. The next line contains the DNA sequence of lengthN, all of whose characters are inACGT. The subsets are described by the followingTlines. Each line starts by “L:”, whereL(0 ≤L≤N) is the number of positions in the subset, and is followed byTdistinct integers between 0 andN− 1 in increasing order. Subsets may overlap partially or totally.A blank line separates different test cases. The input file is terminated by a line containing0 0.OutputIn a single line per test case, printYESif the task is solvable andNOotherwise.ExampleInput:5 3\r\nAGTAT\r\n2: 1 4\r\n2: 0 1\r\n3: 0 2 4\r\n\r\n5 3\r\nCATGC\r\n0:\r\n2: 0 3\r\n2: 3 4\r\n\r\n0 0Output:YES\r\nNOProblem setter: David García Soriano",
  "sample_input": "Input:5 3\r\nAGTAT\r\n2: 1 4\r\n2: 0 1\r\n3: 0 2 4\r\n\r\n5 3\r\nCATGC\r\n0:\r\n2: 0 3\r\n2: 3 4\r\n\r\n0 0Output:YES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PALINDNA",
  "scraped_at": "2025-08-17 00:33:54",
  "test_cases": [
    {
      "input": "5 3\r\nAGTAT\r\n2: 1 4\r\n2: 0 1\r\n3: 0 2 4\r\n\r\n5 3\r\nCATGC\r\n0:\r\n2: 0 3\r\n2: 3 4\r\n\r\n0 0",
      "expected_output": "YES\r\nNO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 5\nt\n2 7 1\nl 1 1\n6 5 8\ndcs 6 5\n2 7 8 6\nbkvs 3 3 4\n7 3\ncqscll\n9\ngzfj\n7 7 8\nz 7 5\n2 7 9\njq 4 7\n6 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 7\nfinmwybek\n2 9 2\nk 8 8\n5 6 2\nar 7 9\n9 10 6 10\nyxi 9 5 2\n10 2\noicgwhjqp\n5\nh\n10 2 2\nphrct 1 10\n2 10 5\nqcn 3 4\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\njoyc\n4 7 9\niphp 4 5\n2 5 3\ngtcw 4 9\n2 6 7 9\ntmq 8 10 6\n4 4\ngrurxwfwi\n1\nwq\n5 5 7\nbn 8 8\n1 6 6\neq 5 1\n4 4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "1 91\ndgopuel\n85 49 45\nq 97 94\n82 32 51\nehly 4 42\n9 7 45 20\nswmjb 23 64 65\n96 74\nd\n28\nczst\n83 22 38\nyt 75 20\n75 25 69\now 79 98\n10 99",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 2\nubwbcml\n4 88 81\ny 81 24\n29 90 13\nzlan 96 53\n7 2 29 96\nhpv 53 23 100\n93 88\nru\n5\nhs\n97 69 94\nbpsa 67 48\n32 24 52\nh 66 90\n43 51",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "19 68\nnoxhezwe\n5 64 73\nmkl 66 66\n21 64 54\nzf 80 97\n20 32 2 9\namyot 20 66 22\n96 100\nub\n38\nqvij\n100 95 90\ny 5 29\n86 91 31\ncqydk 5 89\n13 2",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 30\nnffbfjhuq\n88 81 36\nxcf 16 18\n15 91 90\ndb 44 76\n2 80 91 99\nsbtdp 66 19 27\n63 62\nwdih\n40\nd\n49 25 27\nznv 67 40\n76 80 18\ntjboc 90 51\n80 76",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "46 47\ntytsa\n94 51 19\neczij 94 86\n94 78 100\nhnegs 93 90\n93 29 54 2\nka 13 85 95\n17 61\nhxakndqqn\n90\nu\n81 71 2\ncar 27 89\n13 52 90\nnemm 64 56\n89 17",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2600 4663\nnzrxbqrwt\n4532 3626 2206\nv 4445 3725\n2623 1311 1936\nhaawu 3235 2949\n3258 2948 3714 4576\nag 4108 4402 1718\n3740 4601\nlac\n3497\njd\n3310 4587 1785\ndicg 1120 3272\n3536 4815 3874\nrmlp 3499 1361\n2854 2301",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "2138 4703\nke\n3928 1700 3753\nrb 1451 1016\n3825 4621 2105\nldyxi 1528 3954\n3235 2599 975 745\nkb 2598 4860 633\n1066 4386\npdy\n3656\nbjqt\n2460 3784 3687\nnwh 2488 729\n4086 3938 2071\nsw 971 2760\n884 3578",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "1996 2325\nnmbei\n1154 4576 4774\na 1234 1840\n4002 2202 3485\nupmcs 828 3235\n4089 2085 4461 3693\nnw 1736 1553 1775\n4620 4568\npt\n3302\nzsf\n1265 2244 2392\nhtm 4260 4300\n951 1940 508\nkgo 4359 3791\n831 4496",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4629 1350\ndremcqmx\n4834 4274 2447\nohm 3756 4464\n3743 635 3401\nqhl 2010 2333\n4433 3393 1282 2108\nyl 3604 3857 4068\n4330 3694\nnpdev\n2642\ncie\n2355 3631 3498\nzespd 3727 3892\n2113 2584 1037\npod 630 4635\n3592 1359",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "605 2527\nalyrd\n1432 2787 2846\nztj 1125 2323\n2748 4564 1476\ng 3762 2623\n1213 3207 1245 822\nt 625 1368 3523\n3222 3559\nhb\n2519\ntn\n2961 1544 1277\nuostk 4287 2272\n4374 2952 4420\nvcxi 2286 3720\n3315 4021",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3545 4908\nijftksh\n577 4357 4947\niw 3001 3963\n957 4166 1724\nl 1356 1951\n2057 4079 2306 3128\nbp 3927 4595 1827\n2762 4794\nyvl\n3606\na\n3599 4704 4505\nnpcm 4853 963\n3614 4636 3434\nx 2212 2664\n2922 2341",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2379 2430\nwfnmao\n2448 2579 4309\nbtb 4917 550\n1821 3604 2667\ny 2248 4306\n3018 4709 583 4621\nyufh 2350 3685 4789\n3870 3442\nopotmxgi\n3997\nf\n3961 4668 1271\ndxy 3948 1473\n718 830 3347\nokg 2794 1427\n3494 1293",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000\nsqx\n10000 10000 10000\nkecqn 10000 10000\n10000 10000 10000\ntojv 10000 10000\n10000 10000 10000 10000\nfapi 10000 10000 10000\n10000 10000\nzjgnrf\n10000\npp\n10000 10000 10000\ncjfxo 10000 10000\n10000 10000 10000\nel 10000 10000\n10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\nx\n10000 10000 10000\nwkuu 10000 10000\n10000 10000 10000\nmx 10000 10000\n10000 10000 10000 10000\nhh 10000 10000 10000\n10000 10000\ntznmuogz\n10000\nau\n10000 10000 10000\nnffd 10000 10000\n10000 10000 10000\njc 10000 10000\n10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000\npbm\n2 1 10000\nrxt 1 9999\n1 1 10000\nhwp 1 10000\n10000 10000 2 10000\nxfrsp 2 1 10000\n1 1\nrnjs\n9999\nu\n2 1 1\ntcu 2 1\n9999 9999 1\nyvzal 10000 10000\n10000 10000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9999 1\nwltim\n2 9999 2\nmx 1 10000\n2 1 2\nzln 9999 10000\n10000 1 9999 9999\nmi 9999 9999 10000\n10000 2\nxzjjrskiip\n9999\nb\n2 1 10000\nd 10000 10000\n9999 1 10000\nmnbn 10000 9999\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}