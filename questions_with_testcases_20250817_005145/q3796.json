{
  "problem_code": "problems",
  "title": "Count The Indexes",
  "tags": [],
  "text": "Let's deal with an array, the most important data structure of computer science. You will be given some operations to do. There will be three types of operations:Type 1: Insert a number at the end of the array.Type 2: Delete the last number of the array, where the last number means the latest number which has been inserted.Type 3: You will get a number and two indices i and j where i ≤ j. Now you will have to answer how many time the number appears in the array starting from i to j.You may assume that initially the array is empty.InputEach file contains one test case. The first line is an integer Q (1 ≤ Q ≤ 200000), the number of operations. Each of the next Q lines contains an operation. The operations will appear as the formats below:1 x, where 1 ≤ x ≤ 200000, which means you have to insert number x at the end of the array.0, For this operation, you have to delete the last number of the array2 x i j, Here, you have to find how many times x appears in the array from i to j. Here x will always be present in the array and 1 ≤ i ≤ j ≤ length the array.OutputFor deletion, if the array is already empty, then output a string \"invalid\" (without quote),otherwise you don't need to print anything for deleting numbers. For the operation type of 2, you have to output an integer, how many times x appears in the array from i to j inclusive.ExampleInput:71 101 202 20 1 202 10 1 100Output:11invalid",
  "sample_input": "Input:71 101 202 20 1 202 10 1 100Output:11invalid",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CNTINDX",
  "scraped_at": "2025-08-17 00:34:30",
  "test_cases": [
    {
      "input": "71 101 202 20 1 202 10 1 100",
      "expected_output": "11invalid",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "6 10 6 6 4 1 7 1 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 6 1 4 2 6 6 7 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 1 1 8 1 4 8 5 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "25 30 67 20 10 29 49 37 58",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 55 2 35 60 90 87 36 27",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "31 39 58 64 100 23 54 26 23",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "26 88 57 85 49 86 50 79 65",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "79 3 23 16 94 4 2 65 97",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "321 262 108 94 432 198 347 358 188",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "86 112 379 427 400 191 242 157 200",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "482 281 374 184 159 93 370 102 394",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "338 403 113 130 124 358 186 425 261",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "136 385 260 247 443 273 423 246 81",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "89 116 360 364 415 55 171 298 326",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "286 325 51 294 180 152 467 220 194",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2 999 2 1 2 1000 1 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 1 1 1 1 1 1 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}