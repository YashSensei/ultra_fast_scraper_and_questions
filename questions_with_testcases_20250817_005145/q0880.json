{
  "problem_code": "problems",
  "title": "Camels",
  "tags": [],
  "text": "Bob likes to draw camels: with a single hump, two humps, three humps, etc. He draws a camel by connecting points on a coordinate plane. Now he's drawing camels withthumps, representing them as polylines in the plane. Each polyline consists ofnvertices with coordinates (x1,y1), (x2,y2), ... (xn,yn). The first vertex has a coordinatex1= 1, the secondx2= 2, etc. Coordinatesyimight be any, but should satisfy the following conditions:there should bethumps precisely, i.e. such indexesj(2 ≤j≤n- 1), so thatyj- 1<yj>yj+ 1,there should be preciselyt- 1 such indexesj(2 ≤j≤n- 1), so thatyj- 1>yj<yj+ 1,no segment of a polyline should be parallel to theOx-axis,allyiare integers between 1 and 4.For a series of his drawings of camels withthumps Bob wants to buy a notebook, but he doesn't know how many pages he will need. Output the amount of different polylines that can be drawn to represent camels withthumps for a given numbern.InputThe first line of input contains the number of test cases, N.Each test case contains a pair of integersnandt(3 ≤n≤ 20, 1 ≤t≤ 10).OutputFor each testcase, output the required number of camels withthumps.ExampleInput:1\r\n6 1Output:6NoteIn the first sample test sequences ofy-coordinates for six camels are: 123421, 123431,\r\n123432, 124321, 134321 and 234321 (each digit corresponds to one value ofyi).",
  "sample_input": "Input:1\r\n6 1Output:6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CT14E",
  "scraped_at": "2025-08-17 00:33:22",
  "test_cases": [
    {
      "input": "1\r\n6 1",
      "expected_output": "6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3\n6\n1\n4",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n2\n8\n2",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "11\n86285011\n81299249\n74800041\n88056115\n63777968\n10548299\n96029743\n57923609\n48975910\n46429649\n78134201",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "12\n69817363\n59015314\n70268127\n43294415\n6818289\n27659160\n82026348\n1556696\n12049290\n16128963\n52277083\n15770006",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "14\n20774972\n19135126\n45641333\n58690993\n46552922\n99032424\n59792249\n51137969\n42141909\n66392427\n42023047\n65189368\n15207891\n49837522",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n66055177\n50488973\n70217484\n44474069\n41735373\n39565770\n87146281\n57885833\n18596965\n83968251",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "18\n75610194\n15221127\n60651264\n51072331\n52098025\n54981020\n92686743\n71075405\n2389368\n10612221\n84503432\n92330350\n81055627\n59109988\n64058641\n88716137\n92024274\n16560950",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n88206\n26678\n65101\n43188\n310\n46485\n6615\n49021\n93950\n68048\n97848\n96636\n66068\n64170\n84128\n60626\n58193\n82871\n95684\n35742",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n97271\n6629\n88476\n60435\n50028\n8348\n53121\n33600\n81481\n44797\n99481\n75421\n81988\n91408\n30963\n52711\n41583\n62260\n75678\n11568",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n64533\n41765\n676\n24147\n26299\n4262\n39499\n69648\n31151\n86037\n4390\n99297\n95597\n24771\n58669\n90440\n65017\n85968\n51014\n17202",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n40923\n87026\n98066\n37734\n52072\n4260\n24052\n74945\n29752\n23020\n13818\n76587\n55464\n79022\n49517\n55651\n69671\n23299\n3403\n22032",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n31340\n47865\n24359\n5586\n58191\n35283\n48159\n41333\n83458\n94559\n74761\n73442\n42499\n67972\n62940\n66921\n87472\n89907\n33118\n25012",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n7745\n83797\n27209\n99167\n83744\n2541\n58805\n18814\n51947\n90985\n9181\n92029\n58628\n177\n45462\n9710\n78373\n30663\n11659\n4303",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n49830\n11473\n54368\n46805\n95647\n21065\n31945\n53966\n41688\n45233\n71362\n37202\n29938\n31070\n27648\n38716\n38669\n87204\n19814\n5000",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n32904343\n69352407\n27561137\n37965250\n13022362\n67932700\n56618608\n47256783\n115665\n51820523\n59617799\n71707587\n27588798\n65854539\n23633766\n24875657\n78244529\n80329479\n89216742\n46484174",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n88652020\n53001021\n46812891\n69976763\n42909021\n39057943\n86785626\n17997108\n26056720\n2295689\n6071633\n84277803\n86378475\n13054860\n86781888\n30726995\n12165142\n84676734\n29074323\n17735248",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "20\n100000000\n48048077\n100000000\n61932895\n100000000\n95717562\n1\n100000000\n55003731\n100000000\n11487599\n86169111\n1\n9730683\n100000000\n72772344\n100000000\n1\n100000000\n1",
      "expected_output": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Edge case array (N = 20)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:47"
}