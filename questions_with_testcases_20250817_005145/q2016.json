{
  "problem_code": "problems",
  "title": "Boxlings",
  "tags": [],
  "text": "Doctor Y, always eager to further his research in the field of boxology, is observing a family of boxen in their natural habitat – a barrel of wine. He has noticed that in addition to the $N$ ($1 \\leq N \\leq 200,000$) rectangular, two-dimensional boxen, there are $M$ ($1 \\leq M \\leq 200,000$) almost imperceptible points floating on the surface of the wine. He reasons that these must be baby boxen – also known as boxlings.Curious as to the customs of box families, Doctor Y wishes to count how many boxlings are floating on top of boxen. From his top-down view of the barrel, he has divided the surface of the wine into a two-dimensional Cartesian plane, and noted the positions of all the boxen and boxlings. Each box occupies a rectangular region parallel to the axes of the plane, with two of its opposite corners at coordinates ($x_1$, $y_1$) and ($x_2$, $y_2$). Doctor Y has observed that boxen sometimes overlap with one another. On the other hand, each boxling is so small that it occupies only a single point on the plane, with x-coordinate $a$ and y-coordinate $b$. All coordinates have absolute values no larger than $10^9$.Having recorded the locations of all of the life forms on the surface of the wine, Doctor Y is interested in counting exactly how many boxlings are floating on top of at least one box. Note that if a boxling is on the very edge or corner of a box, it counts as being on top. Also note that two boxlings can occupy the exact same locations, in which case they should still be counted separately. It's also possible for a box to have zero area, in which case it's treated as a line (or point) and can still have boxlings on top of it.With so many boxen and boxlings living in this wine barrel, Doctor Y doesn’t feel like sitting there and counting them all by hand, crazy though he is. As such, he wants you to write a program to, given the locations of all the boxen and boxlings, count the number of boxlings that are floating on top of at least one box. Don’t worry - your hard work will surely lead to exciting discoveries in the field of boxology.InputLine $1$: 2 integers, $N$ and $M$Next $N$ lines: 4 integers, $x_1$, $y_1$, $x_2$, and $y_2$, the coordinates of each boxNext $M$ lines: 2 integers, $a$ and $b$, the coordinates of each boxlingOutputA single integer – the number of boxlings that are on top of at least one box.ExampleInput:5 10\r\n-1 -1 2 5\r\n4 -3 5 3\r\n1 2 4 4\r\n5 -6 8 -4\r\n1 -2 8 0\r\n1 4\r\n5 4\r\n2 2\r\n3 1\r\n6 -5\r\n5 -1\r\n3 -3\r\n-1 -2\r\n-1 -1\r\n2 -1Output:6Explanation of SampleBelow is a top-down view of the surface of the wine:The coloured-in rectangles are the boxen, the red dots are boxlings that are on top of at least one box, and the blue dots are the other boxlings. Counting the red dots, it can be seen that there are six of them.",
  "sample_input": "Input:5 10\r\n-1 -1 2 5\r\n4 -3 5 3\r\n1 2 4 4\r\n5 -6 8 -4\r\n1 -2 8 0\r\n1 4\r\n5 4\r\n2 2\r\n3 1\r\n6 -5\r\n5 -1\r\n3 -3\r\n-1 -2\r\n-1 -1\r\n2 -1Output:6",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BOXLINGS",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "5 10\r\n-1 -1 2 5\r\n4 -3 5 3\r\n1 2 4 4\r\n5 -6 8 -4\r\n1 -2 8 0\r\n1 4\r\n5 4\r\n2 2\r\n3 1\r\n6 -5\r\n5 -1\r\n3 -3\r\n-1 -2\r\n-1 -1\r\n2 -1",
      "expected_output": "6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 4\n8 1 10 6\n8 7 6 10\n3 2 3 7\n7 2 5 3\n6 7 10 4\n10 3\n10 5\n7 1\n8 9\n3 1\n8 8\n5 8\n2 9\n3 3\n10 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9\n6 2 10 10\n2 8 6 6\n2 1 1 4\n8 7 6 4\n5 6 4 4\n6 10\n8 6\n2 10\n4 3\n3 8\n9 1\n1 2\n10 6\n9 4\n8 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 4\n10 7 5 3\n7 5 5 6\n2 9 6 10\n7 1 10 8\n1 8 5 5\n3 9\n4 5\n2 9\n8 4\n7 3\n3 10\n1 8\n1 6\n7 1\n1 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "51 97\n56 60 61 33\n97 57 100 59\n37 16 6 31\n48 35 16 4\n9 25 50 39\n27 32\n37 42\n17 94\n15 65\n32 99\n31 69\n4 20\n54 91\n18 88\n41 20",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "13 56\n40 33 67 82\n90 77 80 79\n9 63 4 85\n70 17 44 31\n2 13 78 15\n96 20\n68 94\n34 45\n59 84\n33 47\n2 13\n51 96\n87 15\n48 65\n51 11",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "100 67\n59 53 34 67\n61 5 62 87\n35 9 100 62\n100 88 2 32\n48 64 56 68\n88 72\n65 51\n68 94\n57 83\n44 96\n73 85\n49 23\n62 65\n95 35\n91 43",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "78 8\n100 56 65 54\n60 46 28 47\n30 96 15 48\n54 44 35 100\n47 36 22 50\n83 91\n51 8\n94 16\n27 66\n5 19\n83 13\n96 49\n46 15\n96 56\n35 71",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "99 6\n31 79 21 23\n29 59 50 59\n86 8 36 84\n31 35 87 99\n46 51 58 17\n11 34\n99 57\n37 23\n88 53\n86 60\n2 12\n47 92\n78 51\n79 95\n9 92",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "336 498\n181 161 294 446\n492 312 394 462\n133 403 247 363\n323 436 342 488\n279 379 177 278\n462 94\n335 496\n209 109\n177 303\n176 115\n211 307\n332 220\n129 123\n264 104\n311 309",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "330 465\n447 480 414 161\n427 477 269 318\n450 461 387 211\n100 298 435 432\n244 195 413 71\n313 419\n227 452\n314 101\n455 245\n425 292\n458 170\n493 434\n185 343\n139 229\n376 279",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "290 140\n172 268 324 478\n457 251 190 446\n260 312 466 155\n364 257 435 296\n87 158 325 123\n89 319\n259 496\n140 440\n418 390\n109 197\n283 184\n86 201\n176 248\n454 172\n403 376",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "316 101\n281 165 179 51\n90 274 446 306\n450 129 76 269\n484 198 258 359\n240 388 389 175\n326 228\n94 455\n477 336\n384 454\n430 124\n182 243\n267 353\n443 435\n268 209\n112 189",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "56 428\n150 298 381 482\n283 427 80 450\n84 216 337 400\n144 371 493 217\n226 426 411 87\n131 452\n477 415\n326 201\n338 64\n333 279\n223 458\n124 140\n482 391\n130 122\n365 259",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "480 71\n419 265 168 207\n63 72 162 495\n67 184 121 364\n392 222 290 158\n80 429 163 189\n448 91\n105 379\n200 100\n182 50\n86 361\n305 353\n201 143\n168 370\n79 366\n115 108",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "62 414\n415 300 417 233\n295 114 131 86\n362 223 396 153\n113 170 52 102\n203 351 253 134\n428 209\n51 196\n476 466\n329 163\n414 162\n391 121\n441 224\n172 399\n454 256\n274 321",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1\n999 1 999 1\n1000 999 999 1000\n999 1000 2 1\n2 999 1 999\n999 1 2 999\n999 1\n1000 999\n2 999\n1000 999\n999 1\n1 2\n2 999\n999 1\n1 1\n1 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2\n1000 1 1 1000\n2 999 1000 1000\n1 1000 999 999\n1000 1 1000 1000\n1000 999 2 999\n2 1000\n2 1000\n1 999\n2 999\n1 999\n1000 999\n2 999\n2 1\n999 1\n2 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}