{
  "problem_code": "problems",
  "title": "Fractions on Tree ( reloaded !)",
  "tags": [],
  "text": "A fraction tree is an infinite binary tree defined as follows:Every node of tree contains a fraction.Root of tree contains the fraction 1/1.Any node with fraction i/j has two children: left child with fraction i / (i + j) and right child with fraction (i + j) / j.For example, fraction tree up to 3 levels is as shown:We number the nodes according to increasing levels (root is at level 1) and at any same level, nodes are numbered from left to right. So first node holds the fraction 1/1, second one holds 1/2, third one holds 2/1 fourth one holds 1/3 and so on.Your task is simple, as always! Given two numbers a and b, you are to find the product of fractions at all those nodes whose number is between a and b both inclusive.InputEvery line of the input contains two numbers a and b separated by a space. You are to find the product of all fractions which are at node having number between a and b both inclusive. Input file terminates with a 0 0 which is not to be processed.OutputFor each input, print numerator and denominator of the lowest form of the fraction separated by a /. Output of each case to be on separate lines.ExampleInput:1 1\r\n1 2\r\n2 4\r\n0 0Output:1/1\r\n1/2\r\n1/3Constraints1 ≤ T ≤ 300001 ≤ a ≤ b ≤ 1010",
  "sample_input": "Input:1 1\r\n1 2\r\n2 4\r\n0 0Output:1/1\r\n1/2\r\n1/3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/NG1FRCTN",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "1 1\r\n1 2\r\n2 4\r\n0 0",
      "expected_output": "1/1\r\n1/2\r\n1/3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 7\n3 10\n9 5\n5 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n8 3\n3 8\n6 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10\n1 10\n1 3\n9 9",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "12 63\n59 59\n9 13\n84 95",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "46 99\n53 37\n34 72\n32 71",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "53 82\n58 60\n52 52\n94 29",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "74 80\n30 57\n15 78\n79 7",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "5 7\n73 79\n65 7\n75 61",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "484 131\n313 370\n104 211\n114 283",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "148 425\n282 102\n409 255\n227 157",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "485 222\n388 280\n397 216\n128 152",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "173 351\n437 330\n274 146\n200 223",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "362 364\n254 194\n307 94\n308 369",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "88 116\n194 59\n346 220\n249 348",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "127 396\n195 116\n288 473\n275 314",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 1\n1000 1\n1000 1000\n2 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1000\n1 999\n2 1\n2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}