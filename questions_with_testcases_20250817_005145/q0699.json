{
  "problem_code": "problems",
  "title": "Cheese",
  "tags": [],
  "text": "Nlogonian people are very excited about the event that will occur in the next year: the\r\nCheese-rolling World Cup Nlogonia 2013! The event is organized by the Modern Cheese-rolling\r\nAssociation (MCA or ACM, as spelled in Nlogonish) every four years, and this will be\r\nthe ﬁrst time that such an event is held in Nlogonia.The project, however, is still being worked on. ACM didn’t announce the list of host\r\ncities yet, but, instead, it announced how the cities will be chosen. It’s worth mentioning\r\nthat Nlogonia was attacked by some kind of giant cannon in 2009, so the facilities in the cities\r\nare damaged and can’t be fully considered (at least not now). Instead, a city will be chosen\r\naccording to how easy its name is pronounced.Let’s deﬁne the pronunciation power (pp) of a city name S as the sum of the lengths of\r\nall its palindromic contiguous substrings with even positive length. For example, consider the\r\nname abbaxx. Its substrings with even positive length are {ab, bb, ba, ax, xx, abba, bbax, baxx,\r\nabbaxx}. Of these, the palindromic ones are {bb, xx, abba} and thus pp(abbaxx) = |bb| +\r\n|xx| + |abba| = 8. Repeated substrings should be considered as many times as they occur (so\r\npp(aaa) = |aa| + |aa| = 4, since aa occurs twice). Also, letter comparisons are case insensitive\r\n(so pp(aBbAxX) = 8, too), since the pronunciation is independent of the letter case.Nlogonia has N cities. Let K be a number given by ACM. The cities whose names have a\r\npronunciation power equal or greater than the K th unique highest power of all N cities will be\r\nchosen. Notice that it’s possible to choose more than K cities. For example, consider K = 3\r\nand N = 6 cities whose names have the powers 2, 4, 4, 8, 8 and 16. The ﬁrst 3 unique higher\r\npowers are 16, 8 and 4, so all cities except the ﬁrst one will be chosen.The 2009 cannon attack also damaged the roads between the cities. There’are only M\r\none-way roads available to use in Nlogonia (if a road connects city A to B, it can’t be used to\r\ngo from B to A). Also, due the damages made by the cannon, each road has a traﬃc ﬂow limit.\r\nNlogonia’s capital is the only city with an airport, so all the foreign people will come to\r\nNlogonia via the capital and go to the host cities using the road network cited above. Your\r\ntask is to help the Nlogonian people know the list of cities that will be chosen, and, for each\r\none, know what is the maximum traﬃc ﬂow possible from the capital to the city, so they\r\nknow if the roads will handle the traﬃc well during the event. During the World Cup, each\r\nmatch will be played in a diﬀerent date and city, so consider the chosen cities independently\r\n(in other words, calculate the ﬂow between the capital and the ﬁrst chosen city as if it was\r\nthe only chosen one; then do the same with the second chosen one, and so on).InputThe input will consist of one or more test cases. Each test case starts with a line containing\r\nthree integers N (1 ≤ N ≤ 200), M (1 ≤ M ≤ N (N − 1)) and K (1 ≤ K ≤ 10). The cities are\r\nnumbered from 0 to N − 1, and the capital is the city number 0.Each of the N next lines\r\ncontains the names of the cities, in increasing order of their numbers. Each name will contain\r\nonly upper and lower case English letters, and its length will not exceed 30000. Each of the\r\nM next lines will describe the road network of the country. Each line will be in the form A\r\nB C (0 ≤ A, B < N, A = B, 1 ≤ C ≤ 109) and indicates a road connecting city A to city\r\nB with traﬃc ﬂow limit C. There won’t be more than one road connecting a pair of cities\r\nin the same direction, and it will always be possible to go from the capital to any other city.The last test case will be followed by a line containing three zeros.OutputFor each test case, print one line with k - the number of chosen cities. Then, print k\r\nlines in the format n (pp) f , where n is a city name, pp is its pronunciation power and f is\r\nthe maximum ﬂow from the capital to the city. Print the cities in increasing order of their\r\nnumbers. Also, if the capital is a chosen city, use f = 0. You may assume that k ≤ 2K for\r\neach test case.ExampleInput:3 4 2\r\nCuritiba\r\nLalLal\r\nIdappadi\r\n0 1 2\r\n2 1 1\r\n0 2 3\r\n1 2 6\r\n4 5 3\r\nheeymacarena\r\nhaay\r\nabbaxx\r\nddxdd\r\n0 3 20\r\n0 2 10\r\n2 3 5\r\n3 1 10\r\n2 1 20\r\n0 0 0Output:2\r\nLalLal (12) 3\r\nIdappadi (20) 5\r\n4\r\nheeymacarena (2) 0\r\nhaay (2) 20\r\nabbaxx (8) 10\r\nddxdd (4) 25",
  "sample_input": "Input:3 4 2\r\nCuritiba\r\nLalLal\r\nIdappadi\r\n0 1 2\r\n2 1 1\r\n0 2 3\r\n1 2 6\r\n4 5 3\r\nheeymacarena\r\nhaay\r\nabbaxx\r\nddxdd\r\n0 3 20\r\n0 2 10\r\n2 3 5\r\n3 1 10\r\n2 1 20\r\n0 0 0Output:2\r\nLalLal (12) 3\r\nIdappadi (20) 5\r\n4\r\nheeymacarena (2) 0\r\nhaay (2) 20\r\nabbaxx (8) 10\r\nddxdd (4) 25",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CHEESE",
  "scraped_at": "2025-08-17 00:33:23",
  "test_cases": [
    {
      "input": "3 4 2\r\nCuritiba\r\nLalLal\r\nIdappadi\r\n0 1 2\r\n2 1 1\r\n0 2 3\r\n1 2 6\r\n4 5 3\r\nheeymacarena\r\nhaay\r\nabbaxx\r\nddxdd\r\n0 3 20\r\n0 2 10\r\n2 3 5\r\n3 1 10\r\n2 1 20\r\n0 0 0",
      "expected_output": "2\r\nLalLal (12) 3\r\nIdappadi (20) 5\r\n4\r\nheeymacarena (2) 0\r\nhaay (2) 20\r\nabbaxx (8) 10\r\nddxdd (4) 25",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 10 9\nhmy\nvzogsotstqr\nitdgdktsfzn\n7 2 5\n8 4 8\n2 5 1\n6 8 1\n2 10 3\nnjnurk\no\npidoolf\ntq\n4 7 9\n9 9 2\n2 3 4\n5 10 6\n4 2 10\n4 9 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 4 1\nixlvgxesrlraaxwz\nyiamrnu\nllx\n2 5 1\n8 5 7\n9 4 9\n9 9 1\n5 3 1\nyrrxtxvizeatkh\ndekdz\nnmhv\nvgclknzgky\n8 5 3\n5 9 1\n2 5 6\n3 1 2\n2 1 2\n8 10 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "2 8 3\nlemzhhtolgzadvzb\nilvk\nnbcxgvegwwq\n4 1 3\n4 3 2\n5 10 4\n5 10 7\n10 3 9\nlomjkvnsvnj\nxy\nz\nyynwxfuks\n3 5 1\n3 7 1\n8 2 7\n8 3 9\n10 10 10\n3 7 10",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "47 14 54\nyto\ndnbflmikp\ntsezpdjvwbmfi\n21 67 100\n23 80 39\n75 66 99\n73 28 17\n37 49 79\npaokguochn\na\npnshqo\neuaunfyw\n13 27 16\n51 98 87\n78 65 83\n57 94 26\n16 88 21\n22 58 70",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "50 34 26\nyovbpwkxi\nlx\nyfqthvz\n23 9 48\n21 26 58\n60 87 39\n55 57 94\n44 66 87\noi\nn\nbipmeiimkl\nzrszbuejoo\n3 59 66\n47 59 87\n44 90 50\n93 64 33\n75 91 35\n71 93 78",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "11 75 51\nalufpwxicsqjuwwn\nusyg\negguz\n80 67 66\n20 79 40\n5 89 24\n73 13 14\n40 42 75\nbnwczrjimt\noqfphlv\npxumwl\nvfkggp\n41 90 31\n90 59 92\n87 100 2\n39 11 43\n34 8 86\n3 12 97",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "34 75 96\nf\nu\nqca\n1 98 13\n15 18 20\n87 100 17\n3 5 74\n71 42 94\ncmamynjfmsqjercucoux\ndbwy\ndy\nl\n30 96 55\n38 85 45\n28 32 13\n20 42 65\n80 44 9\n27 84 74",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 37 70\nnolaapkbmrloeca\nqnud\namcwlksuvhzw\n28 87 20\n6 48 53\n8 65 27\n59 35 1\n85 76 58\nlf\nq\npredffiod\nyrcxz\n47 14 3\n42 9 81\n38 93 45\n56 99 10\n31 42 98\n89 24 44",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "99 78 63\nvwdnkhvsapt\na\nsfxcmrbqlkjjkcfj\n81 44 74\n100 78 71\n99 23 89\n78 97 46\n26 39 70\nazbpgwsbkjad\nqbao\nai\nbe\n52 25 61\n58 70 71\n17 32 64\n20 99 87\n97 61 57\n44 16 10",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "17 56 17\njhyctfokdpkzc\nqpt\nmssyjgbq\n73 69 65\n16 81 78\n77 42 26\n27 20 51\n55 24 13\nqlvxy\nve\nuwazvdrm\nludx\n19 80 40\n25 67 79\n89 69 56\n60 69 86\n15 25 35\n87 28 31",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "70 16 48\nficqvq\nkzkqh\nyokcazcdssu\n51 70 26\n21 10 70\n67 41 62\n50 45 26\n95 100 18\nvpbcgofnbtvvpjdi\nffvf\nngawwfxwnkr\nlooaaaon\n31 72 73\n37 96 97\n53 85 68\n83 37 26\n61 59 30\n37 84 63",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "73 88 76\nvdchweeq\nqgebruak\nwgjija\n97 13 13\n76 44 59\n30 59 86\n100 98 91\n28 78 31\ncjkxfbs\neytpos\npenjolhbzw\naursyzqje\n28 19 13\n43 38 87\n87 86 44\n65 71 48\n80 95 80\n11 47 13",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "35 19 49\nvjanwnwknvwaoas\noxubueufimz\nyejvrnsqyhm\n23 79 37\n93 14 67\n68 36 87\n62 58 12\n60 87 90\nza\npsjrru\nbgrllb\nnbtwqr\n29 41 100\n67 69 75\n98 67 34\n83 77 19\n58 77 85\n89 37 93",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "11 69 99\nvbibk\ntzutmtku\natokxjtdsaxty\n39 43 19\n54 84 50\n95 29 15\n30 25 36\n25 51 92\naqnnthmxpcgv\ndo\nsbvnnhmxcej\nethh\n41 15 26\n99 60 13\n18 63 79\n55 77 85\n88 27 11\n10 39 61",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10 45 95\npjkqz\nszpsnkqd\nuvv\n16 67 16\n42 66 43\n35 29 47\n65 48 36\n87 76 24\nvoqcolj\nfij\nkmfjpyshbg\nrblolitxwq\n81 96 16\n37 92 35\n87 44 10\n27 89 41\n55 83 87\n25 53 65",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200 200 200\nswt\ndjoyjwgtp\nfzumqbhvteg\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200\nbykuw\nwistg\nzjlswjbmaxq\nclzknwm\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200 200 200\nsjp\ng\nkw\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200\nwaot\noql\nubxytgjm\nxladdcndx\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200\n200 200 200",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 199 199\nuehzgoospr\nzubagfyn\nndxykfwhak\n200 199 200\n2 1 2\n200 1 200\n199 1 1\n1 1 200\nx\ndhkcl\ncog\nf\n1 199 1\n2 199 1\n1 199 1\n2 199 200\n200 199 199\n2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1\niliaqa\nfqbhmcf\nnwncdzdjfknyj\n1 1 199\n2 199 1\n200 199 200\n199 199 200\n1 199 199\npnsvhylalrpeipqmx\nne\nl\nwoadzg\n200 199 2\n2 1 199\n1 1 200\n199 199 1\n199 199 199\n2 1 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}