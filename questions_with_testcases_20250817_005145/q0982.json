{
  "problem_code": "problems",
  "title": "Dolan and Nephews",
  "tags": [],
  "text": "Dolan has a stack of card. Each card is numbered from 1 to n from top to bottom. His nephews want to play with the cards. Each nephew can only do one kind of operation.Nephew number 1 will reverse the order of the card from i-th to j-th position.Nephew number 2 will ask uncle Dolan what is the card number on i-th position.Nephew number 3 will ask uncle Dolan in what position is the card number i.Since Dolan is a good uncle, he will have to answer all questions correctly. Please help Dolan.InputFirst line on input is n and q, the number of cards (n ≤ 100000) and number of operations by the nephews (q ≤ 100000). The next q lines will contain the operation by the nephews.For each operation, the first number will be the nephew number. The second (and possibly third) number is i (and j) from the description above (1 ≤ i ≤ j ≤ n).OutputFor each question asked by the nephews (operation 2 and 3), output a single line containing the answer.ExampleInput:10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4Output:3\r\n9\r\n9Input file is huge, use faster I/O (scanf for C)",
  "sample_input": "Input:10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4Output:3\r\n9\r\n9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CARDFLIP",
  "scraped_at": "2025-08-17 00:33:22",
  "test_cases": [
    {
      "input": "10 5\r\n1 2 6\r\n2 5\r\n1 4 9\r\n3 4\r\n2 4",
      "expected_output": "3\r\n9\r\n9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 5\n10 8 1\n9 6\n5 7 3\n2 8\n6 2",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 1\n8 2 7\n5 10\n9 4 9\n7 1\n10 6",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1\n10 9 4\n6 1\n6 7 10\n7 3\n1 5",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "91 74\n49 39 92\n31 72\n51 58 61\n55 81\n7 24",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 35\n100 90 66\n64 46\n75 47 82\n89 77\n71 86",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "24 43\n45 33 63\n28 58\n10 67 48\n28 1\n32 22",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "38 24\n41 68 47\n70 99\n32 79 4\n84 65\n46 89",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 1\n68 59 71\n44 31\n60 75 11\n23 9\n43 47",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "15757 24533\n49440 6476 29582\n16981 27279\n33266 11382 21379\n22678 46162\n10486 24898",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "37647 22088\n34322 17883 35399\n43219 23875\n37607 10901 41493\n41891 45540\n29688 14092",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "8418 35767\n11807 43396 32203\n11610 21253\n32930 37791 43048\n43757 49766\n35734 8821",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "27380 23728\n6022 45312 16377\n22155 39254\n20960 46483 5125\n46628 28925\n26484 42780",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "36607 11529\n9984 5749 8325\n33360 42185\n38546 45292 30099\n27064 24320\n18742 19806",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "42149 7968\n47776 18584 30887\n43277 14817\n8526 39758 20220\n23149 35751\n22013 5139",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "44349 5013\n25815 21746 14175\n17301 21141\n9143 19760 19394\n38144 45826\n43381 6292",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000\n100000 100000 100000\n100000 100000\n100000 100000 100000\n100000 100000\n100000 100000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1\n1 100000 1\n1 1\n99999 2 2\n1 99999\n1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100000 2\n99999 100000 1\n1 1\n1 2 99999\n1 2\n1 1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:50"
}