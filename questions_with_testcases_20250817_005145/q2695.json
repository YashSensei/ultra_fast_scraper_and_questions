{
  "problem_code": "problems",
  "title": "Evaluate Escape Character",
  "tags": [],
  "text": "Strings represented in computers often include special characters which are not printed, instead they have some other function, such as the newline character '\\n'.For ease of manipulation, these characters are usually represented by a regular character, preceded by a so called 'escape' - in the above example, the character '\\'.Buj recently bought a stringSof lengthnon the local market, for (according to him completely legal and within the law) home manipulation.He forgot to read the online store ratings and customer reviews.Upong arriving at home and taking the string out of the unbelievably eco-unfriendly packaging, he realized with horror that the characters of the string do not follow any known encoding. The only thing he managed to do was number the characters from0ton-1in perceived lexicographical order.Oh well, thought Buj, I'll still manipulate this string to my heart's content... but what if I got scammed, and sold a low-quality string? One which, if it was printed out, would be lexicographically large?But what would be printed out depends on which character in the string is the escape.Buj sent us the string by post for analysis, and we uploaded it to this website hoping someone would do the work for us.InputThe first line contains an integer1 ≤ T ≤ 10- the number of test cases.Tcases follow.For each case, the first line contains the numbern- the length of the string - and the second line contains a space-separated permutation of the numbers0, ... , n-1- the characters of the string.The sum ofnwithin an input file will not exceed106.OutputIn this problem, escape characters work as follows: if it is the last character in the string, it has no effect and is simply printed out as usual. Otherwise, that character and the character immediately following it is not printed (and instead together they have some other, printing-unrelated function). Take a look at the sample for clarification.Letsibe the string which would be printed if we choose character numberias the escape character.Letpibe the 0-based position ofsiif we sort all such strings lexicographically.Output in a single line the numbersp0,p1, ...,pn-1.In other words, output in order the answer to the questions\"How many strings out ofs0, ...,sn-1are lexicographically smaller thans0?\"\"How many are smaller thans1?\"...\"How many are smaller thansn-1?\"ExampleInput:230 1 230 2 1Output:2 0 12 1 0In the first case:If character 0 was the escape, the printed string would be 2.If 1 was the escape, the printed string would be 0.If 2 was the escape, the printed string would be 0 1 2.Ordering these strings, we get [0, 0 1 2, 2].Sos0is at index 2,s1at index 0, ands2at index 1, so the output is 2 0 1.Note that thei-th number in the output is for the string where characternumber iis the escape, not thei-th character in the input.",
  "sample_input": "Input:230 1 230 2 1Output:2 0 12 1 0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ESCAPE1",
  "scraped_at": "2025-08-17 00:34:05",
  "test_cases": [
    {
      "input": "230 1 230 2 1",
      "expected_output": "2 0 12 1 0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 9 10 3 1",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 2 1 1 5",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 3 6 6",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 58 72 53 78",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "12 71 86 59 46",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "79 63 45 99 6",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "23 92 23 63 29",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "76 36 55 82 23",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "278 164 290 388 270",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "197 250 168 301 195",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "209 308 72 197 442",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "331 210 191 129 481",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "474 88 132 345 472",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "85 153 272 492 106",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "492 421 73 204 431",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1 2 999 1000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}