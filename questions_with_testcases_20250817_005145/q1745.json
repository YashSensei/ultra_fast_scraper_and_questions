{
  "problem_code": "problems",
  "title": "Update the array !",
  "tags": [],
  "text": "You have an array containing n elements initially all 0. You need to do a number of update operations on it. In each update you specify l, r and val which are the starting index, ending index and value to be added. After each update, you add the 'val' to all elements from index l to r. After 'u' updates are over, there will be q queries each containing an index for which you have to print the element at that index.InputFirst line consists of t, the number of test cases. (1 ≤ t ≤ 10)Each test case consists of \"n u\", number of elements in the array and the number of update operations, in the first line (1 ≤ n ≤ 10000 and 1 ≤ u ≤ 100000)Then follow u lines each of the format \"l r val\" (0 ≤ l, r < n, 0 ≤ val ≤ 10000)Next line contains q, the number of queries. (1 ≤ q ≤ 10000)Next q lines contain an index (0 ≤ index < n)OutputFor each test case, output the answers to the corresponding queries in separate lines.ExampleInput:15 30 1 72 4 61 3 23034Output:786",
  "sample_input": "Input:15 30 1 72 4 61 3 23034Output:786",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/UPDATEIT",
  "scraped_at": "2025-08-17 00:33:34",
  "test_cases": [
    {
      "input": "15 30 1 72 4 61 3 23034",
      "expected_output": "786",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 10 10 4 3 7 2 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 7 7 3 9 8 3 3",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 1 5 3 8 2 5 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "8 7 4 53 78 32 44 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "90 97 32 78 26 38 9 78",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "35 64 71 56 42 30 34 38",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "47 51 11 42 42 95 17 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "55 12 38 5 70 37 40 78",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2415 1346 539 4716 4291 2818 1246 1326",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "4861 3809 1518 3395 1007 4865 1285 3140",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2157 3389 4105 3163 1463 895 2316 4276",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "925 1731 1059 3260 4635 2288 963 2231",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "4769 2204 4829 4513 3391 798 1876 2681",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "3955 2077 1712 2666 1855 3133 4783 1528",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "1391 1954 2298 3226 1647 4964 3470 3546",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10000 10000 10000 10000 10000 10000 10000 10000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 9999 1 10000 10000 1 9999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9999 1 9999 9999 10000 2 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20
}