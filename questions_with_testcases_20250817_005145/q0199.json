{
  "problem_code": "problems",
  "title": "Twenty Questions",
  "tags": [],
  "text": "Consider a closed world and a set of features that are deﬁned for all the objects in the world. Each feature can be answered with “yes” or “no”. Using those features, we can identify any object from the rest of the objects in the world. In other words, each object can be represented as a ﬁxed-length sequence of booleans. Any object is diﬀerent from other objects by at least one feature.You would like to identify an object from others. For this purpose, you can ask a series of questions to someone who knows what the object is. Every question you can ask is about one of the features. He/she immediately answers each question with “yes” or “no” correctly. You can choose the next question after you get the answer to the previous question.You kindly pay the answerer 100 yen as a tip for each question. Because you don’t have surplus money, it is necessary to minimize the number of questions in the worst case. You don’t know what is the correct answer, but fortunately know all the objects in the world. Therefore, you can plan an optimal strategy before you start questioning.The problem you have to solve is: given a set of boolean-encoded objects, minimize the maximum number of questions by which every object in the set is identiﬁable.InputThe input is a sequence of multiple datasets. Each dataset begins with a line which consists of two integers,mandn: the number of features, and the number of objects, respectively. You can assume 0 <m≤ 11 and 0 <n≤ 128. It is followed by n lines, each of which corresponds to an object. Each line includes a binary string of length m which represent the value (“yes” or “no”) of features. There are no two identical objects.The end of the input is indicated by a line containing two zeros.OutputFor each dataset, minimize the maximum number of questions by which every object is identiﬁable and output the result.ExampleInpututput:024119",
  "sample_input": "Inpututput:024119",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TWENTYQ",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input
      "expected_output": "024119",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "7 10 5 7 4 1 2",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 3 2 9 5 2 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8 2 8 6 4 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "67 56 51 80 9 57 60",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "98 17 35 40 62 46 97",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "81 30 16 99 16 64 61",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "90 5 38 66 48 50 66",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "82 61 2 25 43 31 69",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "47 28 59 30 56 14 48",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "37 13 14 49 7 27 37",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "45 43 55 11 63 26 53",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "24 36 18 10 14 50 55",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "22 25 47 7 63 9 57",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "27 25 15 29 62 35 12",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "6 63 55 35 12 55 60",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "128 128 128 128 128 128 128",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "128 128 128 128 128 128 128",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 127 128 2 2 128 128",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 128 127 1 127 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}