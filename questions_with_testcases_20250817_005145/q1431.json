{
  "problem_code": "problems",
  "title": "GALLUP",
  "tags": [],
  "text": "Often, we see results of gallups, like this:\r\nPrefer red: 3.5%\r\nPrefer green: 4.5%\r\nPrefer yellow: 22.0%\r\nPrefer blue: 70.0%\r\nand you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are interested in the minimum number of people).\r\nYour task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.InputThe input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 <= n <= 20) giving the number of percentages in the set. If n > 0, the percentages follow as n numbers; these numbers may have 0–5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding\r\nerrors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.OutputFor each set of data, print a line starting with “Case i :”, where “i” is the data set’s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1–9999 exists,\r\nprint “error” instead of the number.ExampleInput:3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0Output:Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
  "sample_input": "Input:3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0Output:Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/GALLUP",
  "scraped_at": "2025-08-17 00:33:26",
  "test_cases": [
    {
      "input": "3 20 40 40\r\n3 33.3 33.3 33.3\r\n2 33 67\r\n1 100.0000\r\n4 3.75 4.25 22.00 70.00\r\n2 49 51\r\n2 50 51\r\n2 49 50\r\n0",
      "expected_output": "Case 1: 5\r\nCase 2: 3\r\nCase 3: 3\r\nCase 4: 1\r\nCase 5: 400\r\nCase 6: 35\r\nCase 7: 200\r\nCase 8: error",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 10 1\n9 8 7 1\n5 2 5\n6 3\n8 9 2 6 7\n10 4 10\n4 1 4\n7 5 8\n3",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 7 5 8\n8 1 6 8\n1 5 3\n6 2\n6 10 4 4 6\n6 1 2\n10 7 6\n5 4 5\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "6 6 1 4\n1 6 7 9\n8 10 9\n9 4\n8 7 4 10 9\n7 9 6\n7 5 8\n6 4 1\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "16 40 91 81\n46 73 46 50\n59 60 67\n44 95\n57 57 44 94 50\n89 59 61\n25 32 97\n49 54 77\n52",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "38 95 34 29\n83 4 35 80\n69 4 23\n34 77\n36 34 47 57 58\n20 84 11\n12 60 28\n37 48 95\n57",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 52 42 92\n42 67 18 48\n5 69 69\n71 52\n66 89 85 13 28\n58 50 53\n44 28 41\n94 28 29\n40",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "97 64 98 74\n95 31 3 3\n21 4 60\n69 76\n88 83 67 2 47\n28 30 57\n37 85 10\n47 54 41\n2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "21 93 87 4\n73 89 76 75\n82 65 59\n71 27\n6 77 57 10 87\n64 33 15\n16 81 27\n43 67 45\n17",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "402 430 54 397\n476 214 124 192\n141 423 272\n187 432\n137 500 219 125 353\n450 269 477\n259 68 106\n316 306 321\n67",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "260 398 50 120\n132 361 235 330\n76 99 430\n287 228\n376 243 444 215 454\n268 361 257\n490 150 461\n393 229 72\n294",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "484 107 176 275\n312 479 88 198\n398 199 430\n344 69\n219 158 279 496 462\n89 467 307\n153 123 158\n88 413 278\n144",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "374 113 266 457\n302 376 450 321\n325 255 199\n134 175\n381 227 269 228 492\n324 274 362\n56 310 235\n300 284 321\n288",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "397 222 409 447\n472 387 195 226\n347 96 139\n447 71\n289 173 151 493 67\n217 429 106\n398 256 478\n297 435 66\n161",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "310 51 332 468\n76 495 130 186\n365 325 117\n108 168\n223 145 264 429 129\n450 230 174\n189 459 381\n439 296 489\n120",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "430 119 329 315\n138 434 392 162\n357 218 232\n498 166\n103 222 247 168 318\n403 86 263\n323 454 247\n391 246 178\n403",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000 2 1000\n2 1 999 1000\n2 1 1\n1 2\n2 1 1000 1000 1\n1 1000 1\n999 1 1000\n1 2 999\n999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999 2 2 1000\n2 999 1 2\n1000 1 2\n1000 2\n1 1000 1 2 2\n1 2 1\n2 999 1\n999 1000 1000\n1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}