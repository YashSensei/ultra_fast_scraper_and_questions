{
  "problem_code": "problems",
  "title": "Ada and Unique Vegetable",
  "tags": [],
  "text": "Ada the Ladybug is cultivating vegetables. She has a long furrow full of different kinds of it and she wants to know the number of unique vegetables on a segment of the furrow. As the cultivation is a dynamic process, a kind (on a single position) might become another kind during this process.Given furrow and a few updates, can you answer questions asking about number of unique kinds of vegetable on a segment?InputThe first line contains1 ≤ N, Q ≤ 2×105, length of furrow and number of queries.Next line containsNintegers0 ≤ Ai≤ 2×105, the kind ofithvegetableEach of followingQlines contains one of the following kinds of query:1 I V: The vegetable on index0 ≤ I < N, will be changed to kind0 ≤ A     ≤ 2×1052 L R:0 ≤ L ≤ R < N, the index of left/right bound of segment for which you want to know the number of unique kinds.OutputFor each query of second kind, print the number of unique kinds of vegetable.Example Input8 8\r\n1 2 3 3 1 2 3 3\r\n2 1 3\r\n2 0 3 \r\n2 0 7\r\n1 3 4\r\n1 7 0\r\n2 1 3\r\n2 0 3 \r\n2 0 7Example Output1\r\n2\r\n0\r\n3\r\n4\r\n2",
  "sample_input": "8 8\r\n1 2 3 3 1 2 3 3\r\n2 1 3\r\n2 0 3 \r\n2 0 7\r\n1 3 4\r\n1 7 0\r\n2 1 3\r\n2 0 3 \r\n2 0 7",
  "sample_output": "1\r\n2\r\n0\r\n3\r\n4\r\n2",
  "link": "https://www.spoj.com/problems/ADAUNIQ",
  "scraped_at": "2025-08-17 00:33:21",
  "test_cases": [
    {
      "input": "8 8\r\n1 2 3 3 1 2 3 3\r\n2 1 3\r\n2 0 3 \r\n2 0 7\r\n1 3 4\r\n1 7 0\r\n2 1 3\r\n2 0 3 \r\n2 0 7",
      "expected_output": "1\r\n2\r\n0\r\n3\r\n4\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 8\n1 4 6 7 2 5 8 7\n8 6 10\n7 7 9\n10 6 8\n8 8 3\n6 2 2\n2 1 3\n4 10 6\n10 7 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 3\n7 2 5 3 4 2 1 8\n8 3 2\n7 5 1\n4 3 2\n9 7 3\n4 6 7\n10 4 9\n2 9 6\n9 5 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 8\n1 3 5 9 8 7 10 7\n5 7 9\n8 1 8\n9 10 1\n6 6 10\n7 10 4\n6 1 4\n6 6 2\n10 2 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "41 79\n81 49 20 69 24 40 40 96\n67 89 50\n38 29 23\n40 6 36\n56 77 59\n80 70 54\n96 64 62\n80 60 100\n26 89 53",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "60 24\n43 78 40 81 26 56 69 7\n89 76 70\n25 63 23\n22 27 26\n38 60 79\n36 7 10\n100 23 25\n12 2 58\n74 89 18",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "68 49\n81 46 36 7 27 81 99 42\n58 36 59\n88 16 34\n25 51 35\n23 18 85\n13 86 73\n80 45 72\n64 95 56\n30 77 3",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 42\n22 70 3 59 6 58 81 93\n58 85 6\n17 53 75\n89 50 49\n89 14 84\n39 75 7\n82 22 88\n97 90 70\n89 42 56",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "92 79\n78 51 44 100 73 81 82 49\n16 44 39\n15 77 89\n55 2 85\n36 87 1\n35 83 52\n1 89 55\n19 33 56\n29 29 31",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "163 94\n134 485 120 212 391 288 421 350\n269 109 315\n291 382 138\n450 140 94\n474 98 451\n178 379 81\n482 215 161\n198 219 476\n208 479 266",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "118 52\n177 110 136 183 482 222 473 423\n160 337 78\n276 161 238\n358 486 178\n500 314 67\n347 208 391\n361 231 195\n241 296 335\n225 237 414",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "200 312\n207 408 387 60 387 165 238 127\n490 371 368\n310 306 166\n439 204 188\n379 427 151\n129 465 266\n112 453 409\n204 416 344\n341 134 449",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "98 215\n469 373 435 89 210 184 260 407\n340 121 151\n459 200 68\n126 236 56\n288 417 81\n189 354 130\n427 216 244\n425 242 360\n245 223 221",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "451 365\n324 141 174 388 278 209 115 196\n225 56 101\n457 97 133\n228 410 440\n170 471 70\n149 165 94\n104 437 166\n52 148 473\n234 92 154",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "112 372\n355 402 76 431 352 52 185 467\n66 221 305\n409 134 108\n369 499 104\n402 174 306\n210 288 134\n150 253 493\n218 156 192\n214 198 413",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "377 160\n464 164 378 108 52 450 494 258\n402 306 470\n228 374 264\n356 448 107\n104 273 297\n102 302 333\n277 246 368\n282 214 264\n443 388 179",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 2\n2 999 2 2 1000 999 1000 2\n1000 1 999\n1000 1 1\n1 1 1000\n2 1 1\n1 2 2\n999 1 1\n1000 1 2\n1000 1000 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2\n1 1 1000 999 2 2 2 2\n1000 1 999\n1000 999 1\n1000 999 1\n1 2 1\n999 1 2\n1 1 999\n1 2 1000\n2 1 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:46"
}