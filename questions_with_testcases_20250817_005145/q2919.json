{
  "problem_code": "problems",
  "title": "I LOVE Kd",
  "tags": [],
  "text": "You've been invited to the \"I-Love-Kd-trees\" annual con, but first, you have to show them that you really know about great data structures, so they give you an easy task!You are given a list ofNnumbers andQqueries, each query consist of three integers:k,iandl; letdbe thek-thsmallest element until the indexi(i.e. if the first i+1 elements were sorted in non-descending way,dwould be the element at indexk - 1). Then, the answer to each query is the index of thel-thoccurrence ofdin the array. If there's no such index, the answer is-1. You have to consider that all indexes are counted starting with0.InputInput consists of one test case.The first line contains two integers,N(1 ≤ N ≤ 105) andQ(1 ≤ Q ≤ 105).The next line containsNpossibly distinct integersai(-109≤ ai≤ 109).ThenQlines follow, each of those contains three integersk,iandl. (0 < k ≤ i < N, 1 ≤ l ≤ N).OutputFor each query (in the same order as the input) output a single line with the answer to that query.ExampleInput:10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2Output:6-13599Explanation of the first query:The elements until index 4 are [2, 6, 7, 1, 8] so the 2nd smallest element is 2, and your asked for the index of its 2nd occurrence, so the answer is 6.",
  "sample_input": "Input:10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2Output:6-13599",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ILKQUERY",
  "scraped_at": "2025-08-17 00:34:24",
  "test_cases": [
    {
      "input": "10 62 6 7 1 8 1 2 3 2 62 4 22 6 31 4 11 4 23 4 23 3 2",
      "expected_output": "6-13599",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 5 7 1 10 10 9 1 5 7 2 3 3 7 9 4 1 4 6 4 2 7 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 4 1 7 6 3 6 3 1 5 9 4 3 6 7 2 3 1 8 8 6 8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 6 10 8 6 7 6 5 6 1 8 4 8 10 1 8 3 2 4 7 9 4 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "38 53 7 48 48 60 72 88 43 21 77 83 98 52 72 73 77 59 68 1 15 56 45",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 1 20 65 16 2 72 74 11 2 29 30 65 95 4 54 60 81 72 44 64 15 50",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "94 67 28 34 67 9 1 22 21 100 96 21 39 53 71 85 49 67 8 54 20 54 1",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "73 36 79 20 21 100 65 63 100 68 65 48 99 19 35 92 54 8 92 47 40 60 5",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "47 86 66 98 40 100 42 40 14 33 8 33 50 32 68 1 80 28 79 74 74 31 49",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "11 27 40 16 40 17 7 33 8 25 36 51 28 14 16 43 24 16 7 38 36 9 39",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "21 25 28 31 25 27 34 36 27 42 25 24 22 47 38 46 7 47 12 26 24 35 11",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "17 49 28 28 28 26 11 42 47 35 13 18 13 41 23 46 30 14 17 21 49 30 36",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "25 27 26 36 21 44 27 37 24 26 32 17 46 40 17 46 21 50 30 48 46 38 6",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "15 26 43 15 39 8 32 25 16 6 47 13 52 29 34 34 13 33 32 16 15 45 37",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "33 34 25 12 33 6 26 47 49 27 12 35 35 44 27 28 26 34 47 39 32 46 6",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "14 33 21 40 51 10 44 12 46 49 24 48 25 38 21 37 17 30 50 22 51 17 9",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105 105",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1 105 104 105 104 104 1 1 2 104 1 1 105 1 104 104 104 1 2 104 105 105",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "104 105 1 2 1 105 105 1 2 2 104 1 2 104 2 2 104 2 1 1 1 1 105",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:51"
}