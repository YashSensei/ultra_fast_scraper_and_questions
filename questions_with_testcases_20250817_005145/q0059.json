{
  "problem_code": "problems",
  "title": "Continuous Fractions",
  "tags": [],
  "text": "A simple continuous fraction has the form:where the ai’s are integer numbers.The previous continuous fraction could be noted as [a1, a2 ... an]. It is not difficult to show that any rational number p / q , with integers p > q > 0, can be represented in a unique way by a simple continuous fraction with n terms, such that p / q = [a1, a2 ... an−1, 1], where n and the ai’s are positive natural numbers.Your task is to find and print the simple continuous fraction that corresponds to a given rational number.InputInput will consist of a series of cases, each one in a line. A line describing a case contains p and q, two integer numbers separated by a space, with 1020p > q > 0.The end of the input is indicated by a line containing 0 0.OutputCases must be analyzed in the order that are read from the input. Output for each case will consist of several lines. The first line indicates the case number, starting at 1, using the format:Case i:replacing i by the corresponding case number. The second line displays the input data in the\r\nform p / q.The remaining lines must contain the continuous fraction corresponding to the rational\r\nnumber p / q, specified in the given input line. The continuous fraction must be printed accordingly to the following rules:Horizontal bars are formed by sequences of dashes ‘-’.The width of each horizontal bar is exactly equal to the width of the denominator under it.Blank characters should be printed using periods ‘.’The number on a fraction numerator must be printed center justified. That is, the number of spaces at either side must be same, if possible; in other case, one more space must be added at the right side.ExampleInput:75 34\r\n65 60\r\n0 0Output:Case 1:\r\n75 / 34\r\n..........1......\r\n2.+.-------------\r\n............1....\r\n....4.+.---------\r\n..............1..\r\n........1.+.-----\r\n................1\r\n............5.+.-\r\n................1\r\nCase 2:\r\n65 / 60\r\n......1...\r\n1.+.------\r\n.........1\r\n....11.+.-\r\n.........1",
  "sample_input": "Input:75 34\r\n65 60\r\n0 0Output:Case 1:\r\n75 / 34\r\n..........1......\r\n2.+.-------------\r\n............1....\r\n....4.+.---------\r\n..............1..\r\n........1.+.-----\r\n................1\r\n............5.+.-\r\n................1\r\nCase 2:\r\n65 / 60\r\n......1...\r\n1.+.------\r\n.........1\r\n....11.+.-\r\n.........1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CFRAC",
  "scraped_at": "2025-08-17 00:33:22",
  "test_cases": [
    {
      "input": "75 34\r\n65 60\r\n0 0",
      "expected_output": "Case 1:\r\n75 / 34\r\n..........1......\r\n2.+.-------------\r\n............1....\r\n....4.+.---------\r\n..............1..\r\n........1.+.-----\r\n................1\r\n............5.+.-\r\n................1\r\nCase 2:\r\n65 / 60\r\n......1...\r\n1.+.------\r\n.........1\r\n....11.+.-\r\n.........1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 9\n5 7\n2 5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 8\n5 8\n8 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 10\n8 4\n2 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "51 77\n88 69\n34 9",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "61 34\n74 82\n94 71",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 49\n74 25\n63 32",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "9 53\n69 13\n42 46",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "63 65\n75 45\n79 45",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "348 350\n71 455\n118 395",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "445 368\n71 381\n492 452",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "393 352\n323 343\n139 416",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "222 109\n138 426\n328 480",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "331 149\n284 257\n239 254",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "396 401\n282 445\n409 191",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "95 276\n198 323\n147 77",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n999 1\n1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 2\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20
}