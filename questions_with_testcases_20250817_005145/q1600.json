{
  "problem_code": "problems",
  "title": "Madrids One Way Streets",
  "tags": [],
  "text": "As you know, PolyProg wants to send EPFL's best coders to Madrid. Now an important question that arises is where they should stay. Apart from being a cheap place, it should also be close to the contest location and the main tourist spots.Now the problem is that there are mostly one-way streets in Madrid (actually there aren't, but this problem is so nice that we wanted to include it in this contest nevertheless). We would like to get to the contest and back to the hotel without breaking any traffic rules... can you help finding a hotel that allows to do so?To be precice, we'd like to find a hotel that allows us to go to each place of interest and back again. If that's not possible, we'd like a hotel that allows us to travel to and from as many places of interest as possible. If the same number of places can be accessed from several hotels, you should choose the hotel with the smallest id.InputThe first line of the input contains 1 ≤N≤ 10, the number of test cases. Then follow three numbers 1 ≤H≤ 1000, 1 ≤P≤ 100'000 and 1 ≤S≤ 1'000'000 denoting the number of hotels, places of interest and streets, respectively.In order to simplify things, we just represent hotels and places of interests as numbers: Hotels are numbered from 1 toH, whereas places are numbered from 1001 to 1000 +P.Each of the followingSlines contains two numbersAsandBs, indicating that there is a one-way street from objectAstoBs.A blank line precedes each test case.The sample input corresponds to the following graph:OutputFor each testcase, print the id of the best hotel followed by the number of places of interest accessible from this hotel (and vice versa) on a line.ExampleInput:12 4 101 10012 10012 10022 10032 10041001 10021002 11002 10031004 21004 1001Output:1 2",
  "sample_input": "Input:12 4 101 10012 10012 10022 10032 10041001 10021002 11002 10031004 21004 1001Output:1 2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MOWS",
  "scraped_at": "2025-08-17 00:33:42",
  "test_cases": [
    {
      "input": "12 4 101 10012 10012 10022 10032 10041001 10021002 11002 10031004 21004 1001",
      "expected_output": "1 2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1 2 1 8 8 3 6 7 6 9 4 6",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 9 9 1 4 2 7 6 9 4 6 1 9",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 3 3 4 3 4 8 5 3 5 2 7 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 10 5 1 1 4 6 10 1 4 7 9 3",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "3 8 9 9 10 4 4 1 4 6 8 7 9",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "5 4 1 2 5 9 5 4 1 4 3 1 3",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "6 1 5 7 10 8 1 4 3 6 8 2 6",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "3 10 3 8 6 3 4 10 6 2 2 10 6",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "1 3 5 4 4 3 4 1 5 1 5 2 3",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "5 2 5 1 1 5 2 5 4 1 5 3 2",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5 1 2 3 3 2 1 4 3 5 1 4 2",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "4 3 1 4 4 3 1 4 1 2 4 3 3",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1 5 1 3 4 3 4 1 5 3 1 3 2",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "5 5 4 3 3 4 2 1 3 1 2 5 4",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "2 1 4 4 3 4 3 2 5 4 2 3 4",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "10 10 10 10 10 10 10 10 10 10 10 10 10",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "10 2 9 1 10 9 2 2 10 9 9 1 2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "9 10 1 2 9 2 10 1 10 2 2 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:09"
}