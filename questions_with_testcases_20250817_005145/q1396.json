{
  "problem_code": "problems",
  "title": "Group Partition",
  "tags": [],
  "text": "EnglishVietnameseJamie is a very popular girl and has quite a lot of friends, so she always keeps a very long contact list in her cell phone. The contact list has become so long that it often takes a long time for her to browse through the whole list to find a friend’s number.As Jamie’s best friend and a programming genius, you suggest that she group the contact list and minimize the size of the largest group, so that it will be easier for her to search for a friend’s number among the groups. Jamie takes your advice and gives you her entire contact list containing her friends’ names, the number of groups she wishes to have and what groups every friend could belong to.Your task is to write a program that takes the list and organizes it into groups such that each friend appears in only one of those groups and the size\r\nof the largest group is minimized.InputThere will be at most 20 test cases. Ease case starts with a line containing two integers N and M. where N is the length of the contact list and M is the number of groups.N lines then follow. Each line contains a friend’s name and the groups the friend could belong to. You can assume N  is no more than 1000 and M is no more than 500. The names will contain alphabet letters only and will be no longer than 15 characters. No two friends have the\r\nsame name. The group label is an integer between 0 and M-1.After the last test case, there is a single line “0 0” that terminates the input.Sample Input3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0OutputFor each test case, output a line containing a single integer, the size of the largest contact group.Sample output2\r\n2Note : Huge data input",
  "sample_input": "3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0",
  "sample_output": "2\r\n2",
  "link": "https://www.spoj.com/problems/MPART",
  "scraped_at": "2025-08-17 00:33:36",
  "test_cases": [
    {
      "input": "3 2 \r\nJohn 0 1 \r\nRose 1 \r\nMary 1 \r\n5 4 \r\nACM 1 2 3 \r\nICPC 0 1  \r\nAsian 0 2 3 \r\nRegional 1 2 \r\nShangHai 0 2 \r\n0 0",
      "expected_output": "2\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 4\n4 5\nwgnj 9 5\n10\nj 1\n1\nnh 3\n9 5\n6 7 6\nqrpv 1 3 8\n7 3\nosxvy 8 1\n3 4 5\nob 6 4 7\n2 9\nv 9 10\n5 6\nxkp 2 6\n5 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n8 8\nzpfpk 9 8\n10\nivydl 8\n10\nm 1\n5 7\n1 6 5\nq 3 9 1\n3 5\nlifd 5 10\n8 4 4\nlrcou 6 1 9\n9 6\nqs 3 10\n4 5\nlzloupz 5 3\n10 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10\n5 2\nfkfdu 3 2\n5\nccg 2\n1\ngfpgj 3\n1 4\n3 2 9\ngjchq 7 4 3\n10 2\nh 4 8\n2 9 6\nsslr 9 9 1\n10 2\nqxmwo 3 5\n6 4\nkfchf 7 9\n8 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "4 75\n63 19\ngmqw 27 95\n48\naaawf 1\n24\nozy 70\n67 29\n86 20 55\ndnwg 49 95 56\n35 72\ntwcof 44 57\n34 80 11\nowum 81 28 67\n20 44\nwomgss 41 66\n44 29\nk 84 93\n61 41",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "23 25\n82 40\nrgml 10 49\n22\ntjvt 80\n83\nvi 77\n30 11\n58 26 47\nxqkb 39 24 33\n30 24\nye 7 49\n2 22 9\nyic 26 5 4\n61 15\nki 94 87\n24 77\ntswui 48 7\n89 96",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "95 23\n37 61\nqa 50 82\n31\nzciau 68\n22\nezozg 32\n53 96\n54 63 70\ncycm 79 55 18\n34 22\ndimah 46 87\n94 74 17\nmwr 98 70 12\n42 58\nudd 28 39\n36 83\niohthu 82 1\n41 31",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 30\n58 52\nat 64 43\n25\nhmd 6\n4\npqjkn 20\n79 34\n83 84 86\nban 50 57 84\n69 70\nsp 76 33\n47 100 58\nlgbdg 1 46 71\n56 61\nctkb 59 55\n90 59\npmfdiqz 38 70\n94 98",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 12\n47 58\njb 88 83\n64\ndemj 72\n18\nwtwn 4\n67 12\n90 15 11\npxk 41 80 6\n30 38\nmzo 10 48\n38 11 62\nqlaz 100 81 28\n18 24\nhn 37 16\n32 65\nvlwcr 17 43\n78 48",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "356 353\n350 155\nwmr 157 271\n168\nda 235\n202\nt 450\n491 419\n180 420 115\nstln 473 243 491\n450 353\nkmldc 106 147\n486 382 164\nm 240 279 173\n59 276\nzvtbhq 381 493\n439 113\nmhihx 152 77\n238 125",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "211 205\n240 410\ns 283 405\n428\nne 58\n447\naedxi 69\n91 257\n314 197 471\nzkaz 149 385 151\n314 488\ncvns 74 375\n254 446 177\nff 62 131 308\n186 181\nlcl 90 82\n89 374\nx 165 227\n146 258",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "481 330\n245 347\nuwctu 388 87\n491\no 386\n84\nzlgx 113\n51 419\n415 131 117\nyguc 62 330 493\n482 476\nwi 487 307\n430 299 215\njwzod 102 199 275\n140 211\njqwnwslf 291 399\n238 317\nugww 89 391\n174 356",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "484 431\n182 454\nalam 67 134\n311\nuenut 356\n155\nxlrcf 445\n470 59\n298 305 284\nxcxr 259 173 287\n456 243\nzsaeq 466 317\n445 153 116\ncxtb 64 82 402\n398 471\nwfatv 117 399\n280 440\nd 159 298\n116 202",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "211 335\n124 139\nfb 351 422\n277\nlhbtc 233\n280\nudqjq 366\n227 384\n222 240 177\nwfk 291 193 465\n56 394\nk 206 391\n236 207 485\nl 369 280 196\n258 428\nufteogb 349 475\n457 203\nphqtl 76 490\n418 87",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "177 277\n494 168\nlu 349 295\n144\nckql 288\n232\nmq 407\n327 213\n347 417 489\ncw 326 148 257\n401 451\nz 391 386\n274 126 178\no 470 323 191\n121 322\nuyi 281 74\n480 340\nlqhg 355 263\n405 243",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "292 498\n162 53\nuo 492 394\n440\nqhpr 165\n431\nz 212\n219 237\n315 105 479\nbnhh 399 58 153\n338 399\nsm 103 399\n371 499 343\nevuv 219 384 151\n454 322\nbxzmql 193 406\n450 243\nvsedshg 428 491\n488 59",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\nq 1000 1000\n1000\nj 1000\n1000\nwd 1000\n1000 1000\n1000 1000 1000\nkaz 1000 1000 1000\n1000 1000\nqoe 1000 1000\n1000 1000 1000\ntbtck 1000 1000 1000\n1000 1000\nykgc 1000 1000\n1000 1000\nfkmjw 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\nhk 1000 1000\n1000\nsw 1000\n1000\nqcnrs 1000\n1000 1000\n1000 1000 1000\ndgm 1000 1000 1000\n1000 1000\nzw 1000 1000\n1000 1000 1000\nnexz 1000 1000 1000\n1000 1000\nbuwx 1000 1000\n1000 1000\nmakuf 1000 1000\n1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1\nb 2 1\n1\nvd 1000\n999\nf 2\n999 1000\n999 1 999\nijx 999 2 1\n2 2\nsvb 999 999\n1 1 1\nvrzyk 1000 1000 1000\n1000 1\npqlwk 2 1000\n1000 2\njdfc 1000 1\n1000 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 1\n1 999\nvsg 2 1\n1\nl 1000\n2\ngo 2\n1 1000\n1 1 2\nqa 999 1 2\n1 1\nrvgmy 2 1000\n999 999 2\nprhaa 1000 1000 1\n999 1000\nkgxll 1 2\n1 1000\nvhwbr 999 1000\n999 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20
}