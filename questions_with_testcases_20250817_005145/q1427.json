{
  "problem_code": "problems",
  "title": "Shortest Regular Bracket",
  "tags": [],
  "text": "EnglishVietnameseLets observe sequences made only of round and square brackets, i.e.characters '( ) [ ]'.A sequence of brackets is regular if it satisfies this inductive definition:'( )' and '[ ]' are regular sequences.If A is regular, then (A) and [A] are regular sequences.If A and B are regular, then AB is regular sequence.For example '( ) ( ) [ ]', '( [ ] ) [ ( ) ]' and '[ ( ( ) ) ] [ ]' are regular, while '(', '] [', '[ ( ]' and '( [ ) ]' are not regular. The sequence of brackets is given.In every step, one bracket is inserted at the beginning or at the end of the sequence (round or square, left or right).Write a program that will, after each step, determine the length of the shortest regular subsequence of consecutive characters that contains the bracket added in that step.InputFirst line contains initial sequence of brackets, whose length is at most 100,000 characters.Next line contains integer N, 1 ≤ N ≤ 100,000, a number of steps.In each of next N lines there are integer A and character C, separated by a single space. If A is zero (0), than character C is inserted at the beginning, and if A is one (1) then C is inserted at the end.OutputIn each of N lines, you should write the length of subsequence after that step. If there is no such subsequence, write number 0.SampleInput:[])\n3\n0 )\n0 (\n0 (Output:0\n2\n6Input:(]\n3\n1 )\n0 )\n0 (Output:0\n0\n2",
  "sample_input": "Input:[])\n3\n0 )\n0 (\n0 (Output:0\n2\n6",
  "sample_output": "Input:(]\n3\n1 )\n0 )\n0 (Output:0\n0\n2",
  "link": "https://www.spoj.com/problems/MBRACKET",
  "scraped_at": "2025-08-17 00:33:41",
  "test_cases": [
    {
      "input": "[])\n3\n0 )\n0 (\n0 (",
      "expected_output": "0\n2\n6",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "(]\n3\n1 )\n0 )\n0 (",
      "expected_output": "0\n0\n2",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "znlzpc\n4\n3\n3 e\n9\n4 vo\n4\n7 uchql",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "sbzck\n1\n2\n9 pav\n9\n9 fp\n7\n10 eznyt",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "tpp\n7\n7\n7 ou\n9\n1 v\n7\n8 mz",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "ogeyj\n46\n48\n48 d\n55\n39 woxl\n56\n59 xbti",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "nwojj\n10\n99\n60 mth\n36\n22 av\n67\n43 nsjrm",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "rwkg\n97\n15\n73 uykbh\n82\n61 tzhp\n32\n83 c",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "b\n88\n33\n34 uxkmg\n82\n74 b\n48\n30 hfh",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "crgd\n52\n74\n82 bpfn\n31\n47 l\n13\n91 ovayn",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "a\n35\n19\n33 ru\n46\n29 x\n30\n44 a",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "dew\n21\n24\n6 dgcwg\n33\n37 x\n9\n8 vxx",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "yylwqd\n13\n50\n45 puqzd\n34\n45 zlv\n36\n29 nd",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "yn\n48\n5\n45 uvh\n10\n22 soljj\n39\n19 kjrsc",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "ype\n48\n15\n27 chx\n10\n45 w\n10\n31 nx",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "gcq\n35\n32\n15 bhwzl\n23\n44 sz\n12\n9 j",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "qmtw\n43\n28\n21 zrrp\n18\n28 blevb\n34\n22 zuv",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "w\n100\n100\n100 w\n100\n100 am\n100\n100 f",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "owwo\n100\n100\n100 ei\n100\n100 ng\n100\n100 dm",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "xyp\n2\n100\n1 yoz\n99\n2 ayz\n99\n1 xlxxv",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20
}