{
  "problem_code": "problems",
  "title": "Tie the Rope",
  "tags": [],
  "text": "Sailor Crow'n-beard has many pieces of rope. Every piece has a different value and it is well known that money equals quality. Crow'n-beard wants you to create a program that given pieces of rope, creates a rope with the length as close as possible to his desired length (but never too short) while maximizing the quality.InputInput describes a single test case. The first line contains two integersN(1 ≤N≤ 80) andL(1 ≤L≤ 10000): the number of rope pieces Crow'n-beard and the desired length respectively. ThenNlines will follow, each with two integers: the lengthLi(0 ≤Li< 2^31) followed by the valueVi(0 ≤Vi≤ 26843545) of the piece of rope. It is guaranteed that the sum ofLiis never less thanL.OutputYou should output the maximal total quality you can reach. Remember that the priority is to get the smallest total length that is still at least equal toL. Only then output the best total quality amongst equal length solutions.SampleInput:4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7Output:8",
  "sample_input": "Input:4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7Output:8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TIEROPE",
  "scraped_at": "2025-08-17 00:34:01",
  "test_cases": [
    {
      "input": "4 4\r\n20 2\r\n1 4\r\n3 4\r\n4 7",
      "expected_output": "8",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 1\n9 4\n8 5\n5 5\n2 4",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 10\n5 2\n6 7\n6 7\n3 7",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 7\n3 4\n9 1\n9 8\n7 9",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 34\n79 19\n75 29\n29 42\n30 12",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 40\n23 49\n62 31\n64 24\n5 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "17 21\n5 15\n57 13\n28 57\n34 52",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "25 23\n74 60\n40 65\n65 78\n21 43",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "62 35\n79 65\n46 51\n30 22\n12 38",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "24 18\n21 19\n21 16\n28 39\n18 31",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "35 5\n10 6\n27 25\n40 20\n15 33",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "25 34\n16 36\n29 29\n13 4\n25 10",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "22 32\n17 17\n7 33\n23 5\n20 11",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "10 20\n37 6\n29 26\n19 24\n20 9",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "28 27\n36 34\n8 13\n34 20\n22 22",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "22 23\n21 25\n21 11\n18 5\n7 19",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "80 80\n80 80\n80 80\n80 80\n80 80",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "80 80\n80 80\n80 80\n80 80\n80 80",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 80\n2 1\n80 2\n79 1\n2 2",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n80 80\n1 2\n79 80\n79 1",
      "expected_output": "0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:20"
}