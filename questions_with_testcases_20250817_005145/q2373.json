{
  "problem_code": "problems",
  "title": "MELE3",
  "tags": [],
  "text": "EnglishVietnameseSolitaire has N elevators. Each elevator are connecting exactly two\r\nfloors and it does not stop on the floors between that two floors\r\nThe speed of all the elevators are the same, 5 seconds to pass one floor.On the beginning, each elevator is in its lower position and they\r\nare starting cruising to the upper floor. After some elevator come\r\nto its upper position, it immediately starts to go back to its lower\r\nposition, and so on...Mirko is on the first (the lowest) floor and he wants as quick as\r\npossible come to the top of the solitaire. He can change elevators\r\nonly on the floors that are common to both elevators, and if the other\r\nelevator is in that moment on that floor, that change\r\ndoes not take any time.Write a program that will calculate minimal time in which Mirko can get\r\nto the top of the solitaire.InputIn the first line of the input file there are two integers K\r\nand N, separated with space, number of floors in solitaire and\r\nnumber of elevators, 2 ≤ K ≤ 1000, 1 ≤ N ≤ 50000.In each of the next N lines there are description of one elevator,\r\ntwo integers A and B, separated with space, 1 ≤ A < B ≤ K, means that\r\nelevator is travelling between floors A and B.There are no two different elevators that travels between same floors.Note: input data will guarantee that solution will always exists.OutputIn the only line of output file write minimal time (in seconds) from\r\nthe text above.SampleInput:10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10Output:45Input:10 3\r\n1 5\r\n3 5\r\n3 10Output:105Input:20 5\r\n1 7\r\n7 20\r\n4 7\r\n4 10\r\n10 20Output:150",
  "sample_input": "Input:10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10Output:45",
  "sample_output": "Input:10 3\r\n1 5\r\n3 5\r\n3 10Output:105",
  "link": "https://www.spoj.com/problems/MELE3",
  "scraped_at": "2025-08-17 00:33:53",
  "test_cases": [
    {
      "input": "10 4\r\n1 5\r\n5 10\r\n5 7\r\n7 10",
      "expected_output": "45",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 3\r\n1 5\r\n3 5\r\n3 10",
      "expected_output": "105",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "4 8\n4 9\n8 1\n2 4\n1 10",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 10\n10 1\n6 4\n5 6\n7 6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "6 3\n9 1\n7 9\n6 1\n8 8",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "43 100\n53 55\n44 5\n98 49\n98 67",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "22 18\n3 36\n36 69\n73 48\n41 58",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "88 14\n87 2\n38 16\n40 47\n60 19",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "9 10\n28 85\n54 6\n16 81\n83 100",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "49 72\n67 85\n62 50\n60 54\n72 83",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "3734 5473\n23052 20616\n6902 17446\n21676 12430\n22788 4862",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "16581 4935\n10165 20055\n6386 4111\n3198 13582\n8252 4171",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "20775 5905\n15969 8747\n21048 16759\n12240 10200\n7161 8324",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "6191 22935\n8555 12752\n17841 13848\n2595 24608\n24973 8841",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14704 23002\n16399 7186\n20183 4043\n20879 20196\n20710 18751",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "10917 14058\n22257 21681\n19884 14354\n5160 23083\n3770 24565",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "6685 21628\n10608 15544\n18965 21984\n15126 6627\n3606 22010",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "50000 50000\n50000 50000\n50000 50000\n50000 50000\n50000 50000",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "49999 50000\n1 1\n2 50000\n50000 2\n2 49999",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:33"
}