{
  "problem_code": "problems",
  "title": "King",
  "tags": [],
  "text": "The Nlogonia Kingdom needs a new king. Differently from other monarchy kingdoms, where the king’s choice is hierarchical, at Nlogonia any citizen can apply for the post and the whole population can vote on those who applied. However, with these conditions, a big problem arises: every citizen would probably apply and vote for itself.In order to solve this problem the Nlogonia council decided to split the voting process in two phases. In the first phase, known as constraint phase, every citizen must write two constraints about another two candidates. A constraint can be of one of the following two types: a reliability constraint, which means that the citizen trusts another citizen and wishes that it takes place in the second phase of the voting process; an unreliability constraint, which means that the citizen doesn’t trust another one and wishes that he doesn’t take place in the second phase of the process.The council decided that at least one of the constraints of every citizen must be satisfied in order to choose the group of candidates that can go forward to the second phase. The citizen cannot give itself a reliability constraint. The second phase of the process is a simple voting process where every citizen chooses between one of the candidates that remained from the first phase. Your job is to determine if it is possible to satisfy at least one of the two constraints of every citizen, even if it means that no candidate remains for the second phase, in this case the council decides who must be the king.InputEach test case is described using several lines. The first line contains one integer N representing the number of citizen in the Nlogonia Kingdom (3 ≤ N ≤ 1000). The candidates are identified by different integer from 0 to N-1. Each of the next N lines describes the two constraints of a citizen, and each one starts with an uppercase letter that is either ‘R’ or ‘U’, where ‘R’ indicates a reliability constraint and ‘U’ indicates a unreliability constraint, followed by a integer C (0 ≤ C < 1000) representing the candidate that the citizen gave the constraint. The two constraints will be separated by single space.The last test case is followed by a line containing one zero.OutputFor each test, use the output uppercase ‘Y’ if it is possible to satisfy at least one constraint for each citizen and ‘N’ if it is not.ExampleInput:3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0Output:YN",
  "sample_input": "Input:3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0Output:YN",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KING",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "3R1U0U2R1R2R04R1U0R0U1R0R1U0U1\r\n0",
      "expected_output": "YN",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1 5 3 8 3 2 1 6 1 8 1 3 8 3\nouhdcrsyiqcyjtf\n4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 2 7 1 4 4 10 5 5 2 6 8 9 10 10\nlbenznpeivud\n7",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 10 2 10 3 7 7 6 6 1 5 10 2 7 4\ntwh\n6",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "22 17 39 92 42 4 60 94 62 78 24 63 81 49 42\nweszijmoghzxl\n74",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "72 81 14 22 31 91 92 61 15 1 26 71 100 51 9\nvwpbcrcmryxhl\n96",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 97 89 41 72 77 27 36 68 12 32 17 75 20 47\nvtbtfky\n45",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "99 74 14 2 14 37 57 52 68 64 94 67 13 28 46\nijqqswvf\n70",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "26 32 37 69 42 80 9 47 43 94 68 66 31 58 22\nvdryyjyte\n56",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "108 178 99 271 119 311 85 482 480 252 308 297 318 498 348\nghrkjdpa\n488",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "287 67 61 227 140 427 371 223 104 201 290 422 124 399 266\npufahbkyjlsvcmuhesqg\n289",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "311 143 83 128 249 129 381 456 458 107 246 161 186 255 434\nvuojqusfpdayvwyhavrf\n204",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "102 326 482 123 149 382 279 159 101 256 286 106 273 270 242\nrtcfwpqhzingcfrqeshn\n226",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "183 124 60 284 184 469 117 269 180 58 302 155 408 323 356\nxhyr\n65",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "189 230 386 497 379 428 404 63 245 227 300 276 166 244 257\ntghm\n377",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "296 75 198 458 221 77 152 421 347 232 268 445 254 150 168\njtwjybzajw\n246",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\nhiqykdpormm\n1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\njshmflnxfuuxoxvkb\n1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "999 999 1 999 1000 1000 2 2 2 1 1 1000 999 1000 1000\nml\n2",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 2 1 2 1000 1000 2 999 1000 1 1000 2 1 2 999\nquasglyobkjbjosxpjst\n1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:42"
}