{
  "problem_code": "problems",
  "title": "Trip To London",
  "tags": [],
  "text": "Mary and Saina participated in London Olympics 2012 and won medals for India. After these historic moments, they planned to travel and see various places in London. Since it was their first time in the city, they bought a map to various connecting routes across London. However, the map was not proper as it had a missing entry for one route. They asked the tour planning authorities to get the correct map but all they could get was the shortest distance route map rather than the original map which gives direct distance between any 2 places in London. Mary and Saina prefer taking the direct route rather than the shortest route for travelling. Can you help them calculate the number of possible values of direct distance which is unknown in the original map? Assume that the places are never more than 100km apart (i.e. direct distance).InputFirst line contains N, the number of places in London.Next N lines contains total N2integers, N space separated integers per line (the direct distance map). The jth column in the ith line contains either a non-negative integer (the distance from ith place to jth place), or -1 indicating the missing entry in the map.Next N lines contains total N2integers, N space separated integers per line (the shortest distance map). The jth column in the ith line contains a non-negative integer (the shortest distance from ith place to jth place).Note that direct distance from ith to jth city is not always equal to direct distance between jth to ith city and distance between a city to itself is always 0.OutputOutput the number of possible values the missing entry (marked -1 in the original map) takes assuming that shortest distance map is correct.Output2 ≤ N ≤ 20All distances are between 0 to 100 (including both).ExampleInput:4\r\n0 51 61 63\r\n-1 0 66 24\r\n80 83 0 71\r\n60 64 52 0\r\n0 51 61 63\r\n84 0 66 24\r\n80 83 0 71\r\n60 64 52 0Output:17",
  "sample_input": "Input:4\r\n0 51 61 63\r\n-1 0 66 24\r\n80 83 0 71\r\n60 64 52 0\r\n0 51 61 63\r\n84 0 66 24\r\n80 83 0 71\r\n60 64 52 0Output:17",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCEPC803",
  "scraped_at": "2025-08-17 00:34:28",
  "test_cases": [
    {
      "input": "4\r\n0 51 61 63\r\n-1 0 66 24\r\n80 83 0 71\r\n60 64 52 0\r\n0 51 61 63\r\n84 0 66 24\r\n80 83 0 71\r\n60 64 52 0",
      "expected_output": "17",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n4\n7\n9\n3\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n5\n2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "8\n51234890\n37626514\n3998679\n42342773\n21920980\n93812354\n45787225\n24672710",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n76263249\n37667044\n90432729\n24877687\n21180021\n99835948\n95125846\n31300836\n50039573",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n81539803\n18342628\n66112245\n72565038\n74482745\n20213744\n71784634\n91704254\n2014777",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "7\n41658752\n97826933\n13326412\n85376942\n7365904\n32491980\n61488534",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n16361454\n99916086\n96149193\n41201275\n21895932\n18291784\n982701\n97839846\n10354411",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n97860\n19531\n34012\n88631\n79911\n83674\n10876\n20444\n41284\n44231\n58026\n94503\n83651\n76725\n67213\n20457\n98676\n91852\n77518\n51179",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n29792\n30812\n61930\n61374\n16839\n73016\n46727\n60466\n80157\n7272\n86410\n10549\n82364\n86118\n17081\n63839\n94583\n96638\n69723\n36431",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n24872\n25316\n13587\n79704\n77200\n60923\n46884\n99073\n89501\n21032\n20369\n59914\n35047\n83963\n92407\n3272\n79641\n40119\n19824\n89788",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n24750\n64553\n7763\n81991\n24184\n93004\n33600\n19089\n85361\n33725\n78397\n50153\n61418\n58497\n15302\n35197\n44509\n57253\n15730\n90069",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n7208\n1963\n42645\n69844\n8411\n9943\n36466\n53343\n79781\n73740\n46788\n16399\n98270\n79630\n62070\n45354\n43531\n81949\n99484\n52011",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n13712\n73097\n37798\n43029\n90914\n20977\n44187\n71593\n98539\n90459\n64682\n32918\n25237\n57132\n87882\n5359\n80372\n11680\n39298\n83525",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n15317\n47979\n31395\n50240\n47256\n13065\n48537\n7426\n43153\n34792\n12091\n45529\n81553\n45901\n59639\n293\n332\n54134\n47841\n57217",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "20\n43847915\n18396487\n60104206\n57061890\n21321764\n37816568\n53360317\n24700101\n28841404\n16765343\n61396386\n64587438\n27010428\n53477060\n24614129\n75172961\n37432558\n53421309\n22492664\n71931948",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "20\n15893195\n10859571\n70283749\n16312670\n32173877\n55950653\n8780945\n23771994\n49542876\n76486965\n75682232\n19095300\n47881221\n11147118\n84991397\n83474007\n96971903\n41506440\n44203474\n30241676",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 20)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "20\n100000000\n100000000\n100000000\n2121097\n100000000\n1\n100000000\n1\n66151810\n1\n10131019\n75492580\n94894508\n1\n100000000\n100000000\n76521280\n1\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 20)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}