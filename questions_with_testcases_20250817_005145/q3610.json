{
  "problem_code": "problems",
  "title": "Tree and Palindrome",
  "tags": [],
  "text": "You are given a tree withNnodes. The tree has following propertiesIt is rooted at node 1Node 1 situated in level 0. The children of node 1 is situated in level 1, the children of the level 1 nodes is situated in level 2, the children of the level 2 nodes is situated in level 3 and so on.Every node is marked by a letter. The nodes of the same level are marked by the same letter.Level zero nodes are marked by 'a', level 1 nodes are marked by 'b', level 2 nodes are marked by 'c'. Level 25 nodes are marked by 'z', level 26 nodes are marked again by 'a', level 27 nodes are marked by 'b' and so on. (The levelling is rotational.)If we take all the letters of the nodes serially which are in the path from node a to node b (including a, b) and concatenate them, then we find a string. The name of the string isBokkorstring of pair (a, b).You will be given a pair of distinct nodes. You don't know in advance which pair will be given. The probability of choosing every pair is same. Now your job is to calculate the probability that theBokkorstring of the given pair is a palindrome inp/qformat (where p and q are co-prime).Here the pair (2, 3) forms the Bokkor string \"bab\" which is a palindrome. And the pair (4, 5) forms the Bokkor string \"cbabc\" which is also a palindrome. There are no other palindromic Bokkor pairs.InputThere will be multiple testcases. The first line of each test case starts with a numberN(3 ≤ N ≤ 105)which denotes the number of nodes in the tree. NextN-1lines of the test-case each consist of a pair of integersu, v (1 ≤ u, v ≤ N and u ≠ v)which denotes there is an edge between u and v. It is guaranteed that the input is legal (no multiple edges and it forms a valid tree.)OutputFor each test case output is just a single line\"p/q\"(without the quotes) as described above. It is guaranteed that p>=1.SampleInput5\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n6\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 6Output1/5\r\n4/15N.B. Dataset is huge, use faster IO.Problem Setter: Syed Shahriar Manjur.Special Thanks: Abdullah Al Maruf, Ahmad Faiyaz.",
  "sample_input": "Input5\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n6\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 6Output1/5\r\n4/15",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TREEPAL",
  "scraped_at": "2025-08-17 00:34:32",
  "test_cases": [
    {
      "input": "Input5\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n6\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 6Output1/5\r\n4/15",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n8\n9\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n6\n8\n4\n7\n4",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "5\n95325854\n87763126\n48871417\n50544264\n71496860",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "10\n97897122\n1876541\n5082353\n1414227\n57379891\n64718969\n13368063\n93179735\n35279234\n69996204",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n66124357\n91203558\n96634688\n12420082\n63524559\n61843921\n38228239\n26127931\n82619676\n55352974\n35221829\n73679503\n75865371\n68935898\n72590128\n36496756\n46333711\n67967971\n40001381",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n53157575\n91858662\n66793050\n32336224\n65893058\n8824436\n20471883\n1783928\n38439314\n50429849\n87567118\n87465579\n9455961\n52775939\n93744341\n18275709",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n77188628\n72459434\n78018849\n54117006\n25549110\n98066451\n25212431\n76737155\n57213270\n51941133\n15087715\n43480718\n46297394\n45855796\n25118829\n1501908\n21928482\n7224109\n32963717",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "47\n25802\n80080\n88474\n31212\n60226\n28167\n59742\n52285\n89404\n3268\n38334\n49042\n54596\n12389\n81613\n87416\n44571\n9358\n11449\n7656\n20159\n94332\n47396\n86866\n20880\n44198\n96562\n43743\n47344\n84477\n41145\n14910\n51989\n75542\n72497\n1326\n87600\n71064\n88326\n80059\n76633\n51492\n9488\n35779\n75351\n9856\n8617",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "58\n81221\n98169\n48440\n12665\n58736\n21441\n10400\n96319\n44301\n56481\n30331\n68824\n40639\n93808\n1445\n7094\n62075\n10566\n27722\n60883\n81624\n95797\n65326\n82826\n33011\n95966\n16602\n32549\n38497\n94500\n16453\n89616\n30938\n55165\n4731\n81450\n69378\n85708\n69913\n23675\n22827\n97971\n66834\n47872\n42894\n35116\n53226\n33758\n23515\n32855\n65932\n2237\n23819\n7547\n9263\n35723\n76118\n93738",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "62\n54992\n3840\n44245\n53917\n33458\n87742\n80989\n82104\n83959\n6520\n13892\n35911\n82588\n8761\n43689\n85262\n65956\n16350\n71232\n92733\n45847\n84847\n29723\n90992\n14706\n60242\n71419\n28093\n44820\n44933\n89690\n92958\n63912\n24490\n7844\n29516\n77883\n9147\n4353\n53001\n93375\n92376\n32299\n25798\n42826\n62563\n28165\n96229\n19127\n54637\n50842\n42929\n50263\n55745\n51813\n93336\n47106\n45822\n27970\n65493\n46297\n63378",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n72390\n11656\n34397\n34934\n92529\n31109\n33989\n54514\n34547\n59139\n54646\n72147\n28609\n21874\n42242\n67613\n48025\n65067\n41788\n9279\n14211\n82296\n41262\n39144\n17978\n36139\n26826\n72023\n9333\n82262\n15583\n99739\n5577\n35714\n96520\n63030\n95672\n9323\n50915\n50293\n78592\n14425\n87888\n9101\n72318\n15237\n9838\n93718\n30741\n66358\n54432\n50679\n25293\n73599\n73846\n2857",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "90\n25759\n82849\n57259\n65029\n12518\n12764\n65233\n48789\n26517\n72086\n90321\n35470\n18371\n73391\n96706\n49431\n61387\n89606\n54303\n81165\n88778\n39548\n69659\n48678\n42640\n1946\n24271\n68679\n2103\n3241\n34001\n33080\n4691\n64742\n94020\n41093\n97703\n3551\n85820\n36508\n22739\n80429\n96144\n38564\n37588\n3817\n1502\n88337\n22534\n12667\n99817\n85579\n50654\n86111\n17419\n4521\n50783\n97046\n39382\n22308\n27782\n34501\n36065\n18876\n82307\n62082\n99377\n80585\n94115\n1260\n45920\n17266\n44382\n46458\n27232\n86581\n26690\n91680\n50470\n8701\n85286\n96185\n81548\n76952\n75762\n28813\n32184\n81538\n62805\n76585",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "34\n74642\n38719\n17315\n93866\n32980\n25061\n49498\n18958\n48314\n38971\n57690\n73455\n52753\n70055\n90031\n43857\n8096\n79643\n91749\n62281\n6504\n8675\n65682\n98254\n56384\n3334\n7653\n97427\n43209\n35595\n3545\n11167\n65538\n11056",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "31\n7058\n96737\n79846\n57959\n46344\n81789\n9131\n96617\n85128\n23251\n59425\n16723\n17032\n41585\n7294\n7333\n19161\n39800\n66386\n47288\n25041\n46935\n30420\n82127\n17429\n35474\n36332\n51855\n21406\n24400\n42170",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "105\n56862094\n52418694\n16364304\n87467210\n7896587\n34790747\n12255629\n28966829\n82125062\n25307779\n53164369\n87278817\n4697077\n97383153\n68532830\n81828094\n5563673\n54682810\n56156426\n61092726\n3182515\n28638999\n37453571\n214773\n41682557\n18943723\n12677516\n85930814\n41053653\n5028488\n47715149\n48975562\n9703329\n49397752\n44882595\n44928983\n65663544\n93320278\n5215441\n27198419\n36484054\n20653623\n26535663\n98119170\n14870316\n93478392\n97769769\n39245043\n69904456\n34184807\n59318070\n4743153\n49398441\n57957984\n51232981\n32756822\n52891839\n58091517\n47535809\n79648457\n37446567\n72122314\n53661453\n14110436\n63840477\n90800994\n23057152\n31955537\n67562365\n20264906\n31946754\n97808320\n48233473\n15678840\n56831665\n44522619\n53307067\n16753840\n21164242\n71604556\n7075074\n53787613\n13844141\n93630935\n71089029\n84338750\n54694089\n7714549\n41529588\n328505\n58486454\n11881752\n58936098\n4661371\n79758531\n78326844\n25924874\n14435454\n33521901\n15804192\n15262400\n23390485\n93405819\n42216743\n32293628",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "105\n72540248\n88448455\n52769723\n31136567\n40528706\n29235904\n7668492\n60743371\n90750072\n34285564\n46126771\n39585018\n21626940\n60082429\n4619175\n65078164\n24672558\n10642363\n52005681\n57014640\n53857394\n92830203\n55754564\n772017\n44449750\n98537914\n19624085\n52160373\n96252475\n30597160\n66135842\n4125995\n34701909\n58345351\n46235128\n36324944\n42447803\n47678694\n73249601\n24064045\n6218236\n31562090\n55631566\n78504654\n81900245\n412864\n50775124\n94898177\n16889207\n94415770\n9171879\n10647589\n37733581\n80847085\n53624036\n82933868\n11191906\n65900945\n24245922\n90832494\n65825330\n56686356\n56123013\n95217422\n47623749\n2987810\n38366788\n99709826\n60316578\n4473534\n44934044\n59029107\n598708\n71747792\n36686269\n86800966\n17444535\n70124035\n15538707\n50331572\n56975311\n68055762\n45028740\n92352550\n60471879\n56922925\n64125083\n98228069\n98859815\n69848964\n81419538\n87741787\n80300880\n62865416\n48032993\n18097934\n28290121\n17703330\n24973150\n34810052\n54659302\n19618498\n70554044\n69595129\n54315364",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 105)"
    },
    {
      "input": "2\n26763120\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "105\n100000000\n84894952\n73833645\n1\n100000000\n1\n100000000\n100000000\n100000000\n1\n1\n1\n100000000\n19412358\n100000000\n1\n1\n1\n13497167\n100000000\n1\n1\n58738372\n14259065\n33566003\n1\n100000000\n19024314\n100000000\n1\n1\n66769213\n100000000\n100000000\n47553032\n100000000\n48697183\n28216179\n1\n95246706\n7856570\n1\n84136515\n69224820\n1\n82187014\n100000000\n100000000\n1\n23601353\n100000000\n1\n100000000\n96799025\n100000000\n1\n48918687\n100000000\n1\n29786118\n100000000\n100000000\n17457307\n1\n1\n1\n23323964\n1\n1\n1\n65738591\n100000000\n1\n1\n100000000\n1\n1\n3057046\n29780629\n1\n1\n1\n100000000\n1\n80416150\n100000000\n75150923\n76931895\n1\n1\n32593062\n1523966\n1\n100000000\n1\n2919061\n1\n1\n80995590\n100000000\n100000000\n1\n100000000\n1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 105)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:57",
  "total_test_cases": 20
}