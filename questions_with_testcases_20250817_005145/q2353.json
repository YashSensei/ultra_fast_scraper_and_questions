{
  "problem_code": "problems",
  "title": "Landfill",
  "tags": [],
  "text": "You are given a sequence H[1], H[2] ... H[N] representing the initial heights of N pieces of land and an integer K. It costs C[i] Rupees to elevate each of H[i], H[i+1] ... H[i+K-1] by E[i]; if i+K > N, it will just elevate all the pieces of land from A[i] to A[N] - Let us call this anoperation. The following constraints must be satisfied:For each i, theoperationcan be performed at most once.The sum of the costs of all the operations performed must be ≤ Budget.You have to calculate the maximum height V such that each plot's elevation is at least V before you exhaust the budget.InputThe first line of input contains 3 integers N, Budget and K.The next N lines consists of 3 integers H[i], E[i] and C[i].OutputOutput a single integer V such that all the plots have at least height V.Constraints1 ≤ K ≤ 111 ≤ N ≤ 1000 ≤ Budget, H[i], E[i], C[i] ≤ 1000000ExampleInput:4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13Output:3ExplanationYou can raise the level of the (unit) segments 1, 2 and 3, yielding a sequence of final heights 4, 8, 10 and 3. The minimum height among these is 3.",
  "sample_input": "Input:4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/LANDFILL",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "4 20 1\r\n1 3 5\r\n1 7 3\r\n4 6 9\r\n3 5 13",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 10 7\n4 3 7\n10 7 2\n9 6 4\n1 10 6",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "8 6 6\n6 2 5\n1 4 3\n3 1 10\n9 8 9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 8 9\n3 4 2\n10 2 5\n4 8 8\n8 9 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "47 31 63\n54 1 24\n23 26 59\n6 8 83\n92 58 11",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "26 15 16\n28 44 74\n43 21 85\n30 95 97\n19 1 31",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "2 63 92\n95 95 2\n8 96 51\n98 78 39\n98 7 41",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "54 75 3\n19 11 31\n48 69 6\n51 90 39\n46 6 73",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "17 74 64\n81 24 77\n63 49 76\n38 14 41\n32 26 79",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "64 333 69\n204 218 366\n86 382 282\n322 84 259\n220 73 290",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "352 247 410\n317 500 288\n207 421 383\n254 164 230\n350 492 451",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "353 74 153\n366 122 392\n199 462 166\n286 110 414\n455 80 186",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "306 420 68\n338 462 272\n379 407 477\n106 61 489\n336 337 70",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "433 60 422\n497 91 402\n341 94 192\n106 349 314\n185 474 134",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "137 446 141\n456 233 153\n288 176 221\n51 365 287\n338 96 181",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "261 482 55\n145 55 153\n441 231 209\n106 373 266\n117 210 137",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 2\n2 2 1000\n2 2 1\n2 1000 999\n2 1000 999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 999 1\n1 1000 1\n2 1000 1000\n1000 2 999\n1 999 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}