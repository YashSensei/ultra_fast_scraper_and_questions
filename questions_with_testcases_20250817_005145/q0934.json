{
  "problem_code": "problems",
  "title": "Advanced Edit Distance",
  "tags": [],
  "text": "The edit distance of two strings S and T is the minimum number of edit operations that need to be done to transform S into T . The valid edit operations are:Insert a single character at any position.Modify an existing character.Remove an existing character.For example, the edit distance of “pantera” and “aorta” is 5, because the following chain of edits is valid (and there is no shorter chain):“pantera” → “antera” → “aotera” → “aoera” → “aora” → “aorta”.We define the advanced edit distance in a similar way, but adding the swap of two adjacent characters as an extra valid operation. With this setting, the advanced edit distance of “pantera” and “aorta” is 4:“pantera” → “antera” → “antra” → “aotra” → “aorta”.You need to write a program that calculates the advanced edit distance of two given words.InputThe input contains several test cases. Each test case is described in a single line that contains two non-empty words, each of them of at most 1000 lowercase letters, separated by a single space. The last line of the input contains two asterisks separated by a single space and should not be processed as a test case.OutputFor each test case output a single line with an integer representing the advanced edit distance of the two input words.ExampleInput:pantera aorta\r\nzero zero\r\n* *Output:4\r\n0",
  "sample_input": "Input:pantera aorta\r\nzero zero\r\n* *Output:4\r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ADVEDIST",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "pantera aorta\r\nzero zero\r\n* *",
      "expected_output": "4\r\n0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "ld dan\nincs esxe\ne go",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "zjzyf db\nbyy bwvfp\no vph",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "rmafh macme\nsnuuo yvir\npsxu aptrz",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "aqrltzj gsjyw\nma j\nqz hvhox",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "lebwxz dqlw\nus egbe\nxfxwg iqrjf",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "zkxhp ox\nu fgmr\nfiw acy",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "v njtl\nygg pbpw\nav y",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "h ophvu\nnn afr\nddeau c",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "h ncl\nnseh yjv\njhvo cfdfx",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "g qrrcx\nlemdq yxkvk\nfhlei pgvyx",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "ujhaj waex\ntr aoic\npwlnu hvj",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "hgjtgg ozcik\nus kj\ncil ufgmi",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "se wuaql\nkz pv\nhyf ll",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "u ud\nqjfo fikaf\nh skpkv",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "pvjljn lyyka\nbppo dbxug\ngo ycgt",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "nrhs hdt\nmtmb ha\nsmypr ypuay",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "rqjvm qla\nxldzy pngip\nlb bg",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "hz iaaz\nq f\nhmdv lym",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "nx rhzh\nirohf c\ni l",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20
}