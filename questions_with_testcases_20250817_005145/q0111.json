{
  "problem_code": "problems",
  "title": "COSTLY CHESS",
  "tags": [],
  "text": "In the country of Rome, Chess is a royal game. For every move the players had to give some bucks to the Emperor Jurg. The LGMs or Little Green Men, are very good player of chess. But as chess is an expensive game, that's why it is royal, they asked you to help them find the minimum bucks which they had to pay for moving their knight from one position to another. Any number of steps can be used to reach the destination.ConstraintsThe chess has a dimension of 8×8, and the index of left bottom cell (0, 0).Knight move only in a standard way, i.e. 2 row and 1 column or 1 row and 2 column.If in a step knight move from (a, b) to (c, d), then LGM had to pay a×c + b×d bucks to Emperor Jurg.0 ≤ a, b, c, d ≤ 7InputThere are 100-150 test cases. Each test case is composed of four space separated integers. The first two numbers, a, b, are the starting position of the knight and the next two, c, d, are the destination of the knight. Read up to End Of File.OutputFor each test case, print the minimum amount of bucks they had to pay in separate line. If it's impossible to reach the destination then print -1.ExampleInput:2 5 5 2\r\n4 7 3 2\r\n1 2 3 4Output:42\r\n78\r\n18Explanation for Test Case 1For moving knight from (2, 5) to (5, 2) in minimum cost, one of the path is (2, 5) → (3, 3) → (5, 2)Bucks paid:(2, 5) → (3, 3) = (2 × 3 + 5 × 3) = 21(3, 3) → (5, 2) = (3 × 5 + 3 × 2) = 21Total cost = 42To infinity and beyond...",
  "sample_input": "Input:2 5 5 2\r\n4 7 3 2\r\n1 2 3 4Output:42\r\n78\r\n18",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CCHESS",
  "scraped_at": "2025-08-17 00:33:04",
  "test_cases": [
    {
      "input": "2 5 5 2\r\n4 7 3 2\r\n1 2 3 4",
      "expected_output": "42\r\n78\r\n18",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 1 7 9\n9 7 7 1\n1 10 10 7",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 6 4 5\n3 7 1 3\n6 9 3 8",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 9 8 3\n4 7 6 8\n5 4 2 10",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "24 34 52 60\n30 16 17 51\n40 70 62 75",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "93 89 28 51\n61 64 100 70\n11 43 79 85",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "71 89 76 19\n8 21 59 92\n87 32 20 39",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "73 62 38 54\n67 58 46 19\n41 57 30 63",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "56 5 71 86\n87 78 59 58\n25 89 99 65",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "243 380 258 304\n483 452 327 444\n462 176 69 97",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "240 437 287 144\n237 446 394 385\n144 420 327 465",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "335 260 138 112\n168 309 425 105\n90 317 207 149",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "112 496 55 153\n120 362 344 381\n327 293 167 288",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "72 477 322 346\n65 114 50 308\n231 331 498 381",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "394 242 210 102\n191 177 425 96\n388 131 101 61",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "437 204 309 179\n133 193 252 485\n329 329 71 154",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000 2 999\n2 1 1000 1\n999 1 999 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2 1 999\n999 1000 1000 999\n1000 999 1 1000",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:23"
}