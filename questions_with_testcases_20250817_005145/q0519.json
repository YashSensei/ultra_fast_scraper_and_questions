{
  "problem_code": "problems",
  "title": "Disjoint Paths",
  "tags": [],
  "text": "One of your classes has K students in it who really don't like each other.  In fact, they dislike each other so much that they want to find routes to class that don't cross at any intersection so that they won't ever see each other outside of class.  Can you find such routes?InputThe input file will contain multiple cases. The first line of each\r\ncase is K N, where K is the number of routes you need\r\nto find and N is the number of intersections in MIT's floor plan.\r\nThe intersections are numbered 1 ... N. This is followed\r\nby N lines, one for each intersection, containing the indices of\r\nthe adjacent intersections, separated by spaces.  (This means that\r\nif the line for intersection 2 contains a 3, then the line for\r\nintersection 3 will contain a 2.)  Every intersection is adjacent\r\nto at least one other intersection.\r\n\r\nEach case is followed immediately by the next case. The end of the\r\ninput is indicated by a line containing only \"0 0\".\r\n\r\nYou may assume that 1 ≤ K ≤ 100 and 2 ≤ N ≤ 5000.\r\n\r\nThe students all start at intersection 1 and their class is at intersection 2.OutputFor each case, output the case number, in the format \"Case #:\", followed by a newline.\r\n\r\nIf there are K non-intersecting routes from the start (1) to the end (2),\r\nthen this must be followed K lines, each one giving a list of corners,\r\nin order, on one such route from 1 to 2.  If not, then output one line\r\nwith the word \"Impossible\".\r\n\r\nOutput a blank line after each test case.ExampleInput:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_input": "Input:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DISJPATH",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0",
      "expected_output": "Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 4\n2 6 7\n3 7 4\n5 4\n6 1\n10 10\n2 1\n10 1 9\n3 9 9\n8 10\n4 1\n2 5\n8 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 7\n2 3 6\n4 2 8\n6 2\n2 8\n9 4\n8 4\n3 4 6\n5 10 10\n4 4\n4 8\n5 1\n1 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 8\n10 6 5\n9 6 8\n9 8\n5 8\n10 5\n4 4\n2 5 5\n5 10 4\n2 5\n7 3\n9 6\n9 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "13 19\n77 61 19\n50 88 80\n59 18\n35 93\n31 82\n67 87\n63 72 22\n11 85 75\n26 12\n38 53\n4 34\n72 41",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "59 33\n63 11 26\n88 26 72\n96 77\n66 57\n16 60\n86 34\n35 24 72\n86 80 87\n31 16\n92 34\n32 58\n98 28",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "60 88\n84 51 84\n43 23 51\n16 15\n24 24\n35 5\n69 2\n73 15 13\n21 55 62\n42 99\n64 56\n27 22\n43 48",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "46 28\n100 2 93\n62 20 2\n64 88\n24 40\n30 77\n50 38\n31 40 26\n47 87 3\n36 26\n17 92\n11 28\n48 10",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "18 53\n65 56 40\n70 78 6\n79 80\n10 94\n41 22\n14 33\n92 20 97\n86 34 85\n29 12\n37 63\n100 59\n36 92",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "2182 262\n2249 1589 2227\n1823 690 1507\n1217 334\n1972 842\n1371 624\n1141 286\n947 1783 1162\n2366 2064 1512\n374 1590\n287 792\n1183 2022\n2252 1468",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "918 1867\n1271 973 2232\n2427 2016 910\n889 1746\n462 2401\n373 2371\n2104 2134\n2265 541 421\n261 1191 546\n1485 1116\n868 2298\n1344 277\n819 2311",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "2407 1296\n2060 435 1916\n538 1695 1500\n646 2426\n734 1650\n640 2413\n852 531\n685 2270 1613\n1568 2406 579\n1505 1332\n1101 543\n1777 1627\n1030 1428",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "429 640\n442 1101 1406\n334 750 1140\n1786 1934\n1676 461\n1192 910\n1631 2286\n915 1714 709\n1143 325 1565\n2303 749\n2039 2410\n1921 2422\n1143 1171",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "1113 1412\n2394 712 2262\n1019 2113 1780\n363 1708\n949 2079\n1597 1139\n1474 613\n2021 1338 1661\n400 373 1725\n1550 1050\n2240 1946\n839 1440\n281 1301",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "1606 1286\n1244 1384 2209\n1069 401 276\n1730 649\n1439 830\n1514 676\n897 1947\n1429 2255 2063\n1464 1251 1200\n1549 826\n2125 1859\n1505 2494\n2278 344",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "957 1045\n1191 1360 1942\n1001 2075 272\n917 900\n1334 1655\n1086 859\n2416 2140\n848 2466 1631\n983 944 2390\n956 1114\n1841 2218\n1979 1925\n425 2443",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000 5000\n5000 5000 5000\n5000 5000\n5000 5000\n5000 5000\n5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 2\n4999 2 4999\n4999 4999 4999\n1 1\n2 2\n2 4999\n5000 1\n4999 5000 1\n4999 4999 4999\n1 1\n2 2\n4999 4999\n2 4999",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n2 1 5000\n1 1 1\n4999 5000\n1 2\n1 4999\n2 4999\n1 4999 4999\n2 2 2\n5000 1\n5000 5000\n2 1\n1 4999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}