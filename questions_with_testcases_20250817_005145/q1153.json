{
  "problem_code": "problems",
  "title": "Reliable Nets",
  "tags": [],
  "text": "You’re in charge of designing a campus network between buildings and are very worried about its\r\nreliability and its cost. So, you’ve decided to build some redundancy into your network while keeping it\r\nas inexpensive as possible. Specifically, you want to build the cheapest network so that if any one line\r\nis broken, all buildings can still communicate. We’ll call this aminimal reliable net.InputThere will be multiple test cases for this problem. Each test case will start with a pair of integers n (<=15) and m (<= 20) on a line indicating the number of buildings (numbered 1 through n) and the\r\nnumber of potential inter-building connections, respectively. (Values of n = m = 0 indicate the end of\r\nthe problem.) The following m lines are of the form b1b2c (all positive integers) indicating that it costs\r\nc to connect building b1and b2. All connections are bidirectional.OutputFor each test case you should print one line giving the cost of a minimal reliable net. If there is a\r\nminimal reliable net, the output line should be of the form:The minimal cost for test case p is c.wherepis the number of the test case (starting at 1) andcis the cost. If there is no reliable net possible,\r\noutput a line of the form:There is no reliable net possible for test case p.ExampleInput:4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0Output:The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
  "sample_input": "Input:4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0Output:The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RELINETS",
  "scraped_at": "2025-08-17 00:33:29",
  "test_cases": [
    {
      "input": "4 5\r\n1 2 1\r\n1 3 2\r\n2 4 2\r\n3 4 1\r\n2 3 1\r\n2 1\r\n1 2 5\r\n0 0",
      "expected_output": "The minimal cost for test case 1 is 6.\r\nThere is no reliable net possible for test case 2.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 6\n2 8 4\n10 7 5\n4 6 10\n7 6 9\n5 10 4\n1 10\n9 10 5\n3 1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "3 8\n5 1 8\n2 2 1\n8 10 7\n2 3 3\n6 6 9\n7 6\n2 5 9\n6 4",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 7\n7 2 4\n3 10 2\n3 5 1\n2 2 4\n8 1 6\n3 9\n5 3 4\n9 8",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "7 21\n76 77 18\n100 80 16\n98 11 65\n32 94 42\n34 46 48\n94 22\n94 65 96\n99 32",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "79 76\n25 89 28\n97 14 34\n54 71 45\n8 91 73\n12 74 33\n31 73\n68 5 59\n81 5",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "88 93\n68 7 31\n3 15 73\n37 41 11\n16 15 54\n77 74 96\n70 48\n36 3 17\n52 38",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "22 46\n51 78 52\n71 16 23\n30 8 90\n84 43 83\n77 3 10\n99 36\n44 36 17\n9 86",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "64 75\n12 2 66\n14 20 94\n70 64 5\n11 47 25\n64 95 66\n74 73\n5 78 86\n54 47",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "277 281\n304 132 131\n361 361 370\n453 220 80\n181 488 300\n218 333 181\n366 267\n290 379 434\n247 77",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "181 189\n374 237 408\n415 357 172\n211 472 57\n360 494 225\n364 119 96\n364 318\n401 424 272\n492 119",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "343 187\n111 447 184\n361 247 385\n147 255 447\n494 303 189\n134 214 316\n436 94\n436 451 387\n288 207",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "99 185\n198 286 188\n186 364 373\n84 203 432\n483 167 89\n218 457 380\n152 122\n302 139 342\n477 346",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "449 356\n420 124 241\n86 328 121\n317 52 496\n475 395 461\n162 115 491\n393 251\n242 301 488\n475 391",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "298 334\n496 271 414\n309 232 314\n423 457 423\n199 104 481\n313 103 101\n366 192\n298 180 228\n143 158",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "230 216\n229 392 317\n239 98 299\n175 163 447\n297 442 421\n61 458 403\n401 330\n323 279 150\n290 138",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000\n1000 1000 1000\n1000 1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000 999\n2 1 1000\n1 1000 999\n999 1 1\n1 1000 999\n1 999 2\n2 999\n1000 999 1\n1000 999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1000 2\n2 1 999\n1000 1 2\n1 1 1\n1 1000 1000\n999 999 1000\n1000 999\n1 1000 2\n999 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:49",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:55"
}