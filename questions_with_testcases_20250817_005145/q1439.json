{
  "problem_code": "problems",
  "title": "Pizza Delivery",
  "tags": [],
  "text": "EnglishVietnameseLittle Ivica recently got a job delivering pizzas for the most popular  pizzeria in town.At the start of his work day, he receives a list with the locations to  which he needs to deliver pizzas, in order in which the locations are given.The city is divided into R×C cells. The rows are numbered 1 through R,  columns 1 through C.From every cell, it is possible to move to neighbouring cells to the  left and right. Moving up or down is only allowed in the first and last columns (columns 1 and C).The pizzeria is in the top left corner (1, 1) and this is the location Ivica starts from. Ivica takes with him all the pizzas he will deliver that day  so he does not have to return to the pizzeria between deliveries or after the last delivery.For each location in the city, Ivica knows how much time he will spend every  time he is in it (trying to get through the intersection, for example). Write a program that calculates the smallest amount of time for Ivica to  deliver all the pizzas.InputThe first line contains the integers R and C (1 ≤ R ≤ 2000, 1 ≤ C ≤ 200), the dimensions of the city.Each of the following R lines contains C integers. These are the times  Ivica spends every time he enters a location. The times will be integers  between 0 and 5000, inclusive.The next line contains an integer D (1 ≤ D ≤ 200 000), the number of  pizza deliveries that day. (No, it's not unrealistically large at all.) Each of the following D lines contains two integers A and B (1 ≤ A ≤ R,  1 ≤ B ≤ C), the location to which a pizza must be delivered. The  pizzas are given in the order in which they must be delivered. No location will be given twice in a row.OutputOutput the smallest amount of time for Ivica to deliver all the pizzas.Sampleinput\r\n3 3\r\n1 8 2\r\n2 3 2\r\n1 0 1\r\n3\r\n1 3\r\n3 3\r\n2 2\r\n\r\noutput\r\n17input\r\n2 5\r\n0 0 0 0 0\r\n1 4 2 3 2\r\n4\r\n1 5\r\n2 2\r\n2 5\r\n2 1\r\n\r\noutput\r\n9In the first example, the shortest path goes through the following locations: (1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (2, 3), (3, 3), (2, 3) and (2, 2). The locations in bold show where Mirko made deliveries. The total time  for the deliveries is 1+2+1+0+1+2+2+2+1+2+3=17.",
  "sample_input": "input\r\n3 3\r\n1 8 2\r\n2 3 2\r\n1 0 1\r\n3\r\n1 3\r\n3 3\r\n2 2\r\n\r\noutput\r\n17",
  "sample_output": "input\r\n2 5\r\n0 0 0 0 0\r\n1 4 2 3 2\r\n4\r\n1 5\r\n2 2\r\n2 5\r\n2 1\r\n\r\noutput\r\n9",
  "link": "https://www.spoj.com/problems/MDOSTAVA",
  "scraped_at": "2025-08-17 00:33:47",
  "test_cases": [
    {
      "input": "input\r\n3 3\r\n1 8 2\r\n2 3 2\r\n1 0 1\r\n3\r\n1 3\r\n3 3\r\n2 2\r\n\r\noutput\r\n17",
      "expected_output": "input\r\n2 5\r\n0 0 0 0 0\r\n1 4 2 3 2\r\n4\r\n1 5\r\n2 2\r\n2 5\r\n2 1\r\n\r\noutput\r\n9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "muf\n8 1\n10 2 6\n4 2 4\n4 6 5\n4\n1 8\n6 10\n7 8\nyvuxuc\n1",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "juhhjwmv\n9 8\n2 1 2\n1 10 10\n7 2 4\n3\n5 6\n5 5\n5 8\nlrtn\n5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "kmfwnmg\n4 10\n7 4 8\n1 1 3\n4 4 9\n7\n9 5\n9 3\n9 10\nlia\n1",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "dpedypwf\n12 56\n93 80 33\n46 55 58\n34 78 78\n7\n49 46\n9 77\n37 35\nuiazo\n38",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "vzsyujc\n57 87\n17 76 98\n19 27 19\n96 62 41\n94\n36 5\n82 59\n85 56\nmtazziqe\n33",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "unjwlppte\n5 66\n44 35 2\n17 3 30\n92 44 72\n14\n71 23\n64 63\n59 80\npwptw\n75",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "ohossj\n49 32\n22 6 66\n36 82 20\n17 7 50\n57\n8 78\n76 9\n93 60\ntbvxmqv\n90",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "nodhzxwg\n81 21\n74 12 57\n76 52 86\n41 41 36\n29\n36 53\n37 34\n18 92\nuxvqgq\n74",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "aeud\n199 369\n236 333 255\n443 116 133\n441 360 358\n433\n288 176\n404 498\n327 111\nfvnecwit\n123",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "zimj\n63 59\n341 83 419\n157 185 205\n204 307 232\n219\n436 401\n165 369\n269 445\nixfetkdqc\n120",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "toisak\n113 175\n380 333 128\n263 185 294\n350 304 116\n53\n460 451\n467 192\n92 486\nsiirvmcz\n81",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "lmcqkiugh\n375 272\n486 412 58\n63 498 330\n204 217 206\n161\n128 387\n63 251\n230 226\nvpnaxieusq\n177",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "jtldrjskbd\n77 335\n180 185 240\n483 478 431\n253 258 149\n268\n230 274\n310 343\n236 196\nrwci\n271",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "zuvtuxvrc\n281 270\n350 162 389\n122 229 370\n380 341 380\n82\n379 176\n398 366\n245 334\nasxsidxch\n356",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "prge\n79 293\n312 452 489\n455 345 300\n324 434 275\n409\n251 341\n61 276\n288 296\nukxr\n156",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "rfund\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\nsmyaqs\n1000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "vrv\n1000 1000\n1000 1000 1000\n1000 1000 1000\n1000 1000 1000\n1000\n1000 1000\n1000 1000\n1000 1000\nzsnnpehiizz\n1000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "mp\n1 2\n1000 999 999\n1 1 999\n999 1000 1\n1\n2 1\n1 2\n999 1\nxophquaom\n1",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "xlthwp\n1000 999\n1000 1 1\n1 1 999\n2 1000 1\n1000\n999 1\n1 2\n999 999\nsqntcqbhpgoy\n1",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}