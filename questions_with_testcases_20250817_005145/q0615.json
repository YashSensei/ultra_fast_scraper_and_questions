{
  "problem_code": "problems",
  "title": "Slow Growing Bacteria",
  "tags": [],
  "text": "Given an n×n grid of cells, a bacteria colony can colonize these cells. Their growth after every second is governed by the following rules:One new bacteria is born in cell (i, j) if and only if either one of its four neighboring cells or the cell (i, j) itself has a bacteria population more than or equal to the threshold value, k.Already living bacteria do not die.Given, the initial state of the n×n cell grid, you need to accurately estimate the time by when the total bacteria population reaches m.InputFirst line contains t, number of test cases.Each test case starts with n (side length of grid), k (growth threshold) and m (final population).Next n lines contain an n×n grid of integers, where ith row, jth column has an integer representing the number of bacteria present initially at cell (i, j).1< n ≤ 100, 0 < k ≤ 245, 0 < m ≤ 245.There are no more than n cells with initial population equal to or greater than k.OutputFor each test case print the number of seconds required for the total bacteria population to reach m. If m can never be reached print \"Not possible\" (quotes for clarity).ExampleInput:1\r\n3 5 15\r\n0 0 0\r\n0 3 0\r\n0 0 5Output:3",
  "sample_input": "Input:1\r\n3 5 15\r\n0 0 0\r\n0 3 0\r\n0 0 5Output:3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SBACT",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "1\r\n3 5 15\r\n0 0 0\r\n0 3 0\r\n0 0 5",
      "expected_output": "3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2\n6\n4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n7\n5\n8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "2\n10\n8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "19\n4798192\n14953672\n306090\n18435004\n62394499\n96271488\n33607792\n85497974\n71410938\n96592209\n39210600\n52323040\n41203947\n41292441\n80002591\n85346187\n70383014\n69416843\n46949591",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n42037352\n15275195\n18644019\n79763870\n75762399\n62890512\n76451470\n25275643\n77751226\n6814533\n15277812\n38903733\n3485445\n5443179\n41840996\n71271891\n37557050\n85609607\n58795064\n17819079",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "5\n41633039\n88445000\n87348257\n43863885\n1624361",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "16\n60264951\n41564005\n57802680\n92178272\n37521334\n13191835\n45788364\n45033416\n16614076\n68759063\n47692548\n26374412\n94050843\n22154579\n22254523\n97971032",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "9\n35664878\n1219359\n86212510\n26322814\n99544657\n28476070\n67458267\n25117581\n98900821",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "65\n32938\n85726\n71839\n99638\n15572\n48261\n27689\n8377\n2672\n31906\n3835\n27430\n12778\n43772\n69956\n3905\n10270\n30083\n30336\n84337\n50832\n90670\n17590\n20262\n21277\n37912\n57874\n79621\n64516\n57919\n45552\n51878\n39310\n14470\n71920\n41873\n19110\n17908\n14874\n53998\n30927\n16870\n49927\n99133\n41838\n9657\n95464\n43064\n71930\n39211\n62592\n57089\n344\n84349\n64127\n73102\n51522\n57761\n33254\n54071\n78534\n18607\n36374\n43129\n70712",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "76\n5947\n96300\n50297\n63150\n90374\n88117\n29736\n47701\n93536\n68011\n3126\n68842\n8712\n48188\n31274\n72974\n86008\n19971\n48493\n8972\n98478\n37783\n80397\n73465\n80074\n38341\n27228\n60344\n67748\n43861\n15209\n5810\n58878\n72142\n54311\n88825\n59668\n54765\n30656\n12705\n4455\n39050\n74344\n55594\n18186\n77267\n53591\n86669\n8501\n96541\n98032\n58428\n21459\n17183\n29236\n3322\n98314\n11724\n43525\n15075\n68104\n32864\n85492\n79195\n18086\n46964\n85217\n75004\n89434\n99105\n8757\n4185\n42482\n8881\n48978\n73466",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "73\n95346\n42729\n11771\n95693\n75123\n88136\n41148\n12562\n56749\n87258\n48333\n33167\n8388\n71855\n65112\n10338\n94885\n78903\n70680\n72170\n95576\n58690\n94010\n24922\n25538\n15515\n3207\n50416\n78819\n18664\n93798\n71741\n33486\n56383\n97047\n74846\n58486\n88986\n89262\n88968\n25380\n30897\n80030\n25743\n55238\n21971\n1667\n90405\n5519\n45412\n94106\n21280\n66121\n6465\n61450\n75531\n29833\n66373\n69634\n80641\n7254\n4991\n53501\n90886\n53232\n2730\n48420\n69534\n554\n31298\n45009\n54159\n53431",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "67\n75221\n56511\n768\n26155\n52514\n66568\n80191\n38688\n83642\n6961\n80453\n1763\n41078\n67614\n74425\n21250\n66120\n17537\n95877\n57932\n38153\n56721\n440\n67100\n3560\n96180\n3232\n13904\n10107\n97700\n94332\n79880\n19719\n10548\n27305\n64991\n87597\n88139\n32571\n47124\n41161\n57945\n51901\n94659\n56632\n81741\n80716\n97848\n50638\n44918\n469\n98474\n88577\n2235\n20945\n47708\n7045\n51722\n71658\n53937\n79804\n62988\n41240\n25765\n71694\n23341\n12222",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "85\n91998\n47085\n45652\n38658\n72422\n62924\n13557\n29871\n76687\n20433\n30105\n35174\n11671\n58174\n82911\n8458\n62781\n89022\n48887\n47547\n84892\n94241\n85542\n45700\n9316\n5478\n60505\n3002\n14890\n94117\n34817\n55000\n70750\n81245\n94765\n34145\n84077\n81692\n76577\n27415\n14322\n39568\n39366\n95745\n23387\n54388\n75689\n86870\n14165\n56797\n90288\n35024\n34061\n50946\n43493\n4498\n56512\n4644\n41690\n79684\n21889\n14680\n89054\n72410\n5190\n23940\n95943\n62385\n12582\n10542\n53096\n73841\n67886\n22215\n85330\n18163\n83879\n35205\n97641\n38044\n76688\n41048\n11188\n16109\n98730",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "46\n49512\n24546\n5629\n98914\n19683\n19821\n28420\n25884\n17639\n92889\n18740\n81271\n8039\n76056\n41060\n27593\n56110\n67040\n68518\n38769\n67916\n53827\n61948\n35734\n77361\n66181\n48296\n18852\n24671\n32159\n22854\n92252\n67080\n44299\n95909\n27416\n53244\n7747\n75136\n56821\n6171\n13079\n72866\n38646\n32029\n72936",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "47\n36244\n30643\n25610\n22317\n23565\n65239\n88720\n96119\n47749\n72012\n46282\n32157\n71768\n65138\n53886\n90707\n61625\n57651\n2886\n25268\n4522\n87056\n66156\n85173\n51736\n41074\n60966\n63667\n22621\n54443\n7873\n89814\n49379\n1916\n20331\n46331\n48469\n33593\n25610\n39031\n48653\n12512\n29783\n98181\n32466\n95504\n36352",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "100\n10242917\n35791284\n98911188\n35389224\n22274684\n48331124\n54399218\n40752786\n88781523\n55288228\n6641117\n90203183\n64090438\n90358591\n19664817\n33276940\n4219487\n59014202\n56852116\n99213246\n37902628\n91615004\n84212857\n37022689\n49895524\n59590052\n7362805\n66941315\n21580654\n73154956\n76286322\n1328298\n2458485\n3089594\n90016317\n62594716\n10001248\n13998772\n62377018\n30531029\n6476780\n52412066\n71613432\n16360349\n89276217\n1386733\n36190158\n79684515\n55402155\n52766659\n75578379\n10994983\n88899956\n17079504\n33987283\n66865586\n81196674\n2503628\n85835454\n38983143\n90671580\n39662781\n33468829\n34025618\n5812048\n66271230\n93600829\n43084503\n49407461\n18197665\n75169025\n76913763\n84569548\n20793815\n93872921\n40659261\n44047954\n30677861\n54080543\n79501855\n85809293\n67671162\n85217862\n93812893\n56345377\n54310846\n81067940\n48218734\n72137007\n99001686\n1203065\n83541687\n47773963\n13406900\n18101947\n18727868\n49521965\n61991142\n11505596\n86557189",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "100\n89234741\n24098075\n85046313\n57420439\n2718549\n4313664\n16552073\n1335531\n34728923\n18396164\n59275744\n37668713\n81149044\n74192843\n49222670\n16155990\n27136160\n86383578\n97914243\n32285583\n60512925\n89535818\n69886444\n24788289\n40297246\n71380209\n96369431\n52387630\n59208667\n36272240\n54994567\n49063257\n95962769\n93763976\n35273683\n14210249\n78666765\n14172886\n879691\n93367055\n66263352\n33712744\n43399614\n66928543\n48165212\n61479730\n2072334\n41793608\n27705793\n66764034\n88946046\n16484785\n20904928\n62545857\n41790120\n24775979\n98296191\n62119275\n74319275\n55184191\n28307778\n66098257\n46924515\n50359336\n4944597\n36659523\n71061883\n87578645\n30165219\n57039706\n4145306\n66808955\n5038448\n85444339\n68035483\n73116868\n35863026\n91426202\n92085335\n39264359\n20412564\n76885098\n96661760\n9205936\n93516050\n67159195\n39437371\n98159205\n48940373\n6733491\n30212380\n62903857\n19198782\n540595\n11024816\n36758532\n81264851\n21431257\n27777959\n59301260",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 100)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 1)"
    },
    {
      "input": "1\n100000000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}