{
  "problem_code": "problems",
  "title": "One X LIS",
  "tags": [],
  "text": "For a given sequence a[1], a[2] ... a[n], lets call a subsequence a[k1] ... a[ki] ... a[km] (where 1 <= ki<= n and kii+1) as\"one X increasing subsequence\" if there is exactly one i between 1 and m-1 (inclusive) for which a[ki]>a[ki+1]. Given a sequence find the length of the longest \"one X increasing subsequence\".InputFirst line contains t, which denotes the number of test cases. 2×T lines follow. Each test case is described using 2 lines.First line of a test case contains an integer- n, which denotes the number of elements in the array.Second lines contains n integers, which represent a[i] 1 ≤ i ≤ n.1 ≤ t ≤ 201 ≤ n ≤ 1000001 ≤ a[i] ≤ 109OutputFor each test case, print one integer which represents the number of integers in the One X LIS. The output for each test case should be printed on a new line.ExampleInput:254 3 3 4 155 4 3 2 1Output:42ExplanationIn the first test case, the Longest Increasing Subsequence is 3.3.4 whereas the longest One X Subsequence is 4.3.3.4 whose length is 4.In the second example, any two elements can be chosen to form the longest One X Subsequence, which gives us an answer of 2.",
  "sample_input": "Input:254 3 3 4 155 4 3 2 1Output:42",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ONEXLIS",
  "scraped_at": "2025-08-17 00:33:55",
  "test_cases": [
    {
      "input": "254 3 3 4 155 4 3 2 1",
      "expected_output": "42",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 4 6 1 7 6 8 7 7",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9 4 4 8 1 10 8 4",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 6 2 6 2 7 4 1 2",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "68 1 79 12 95 14 90 90 69",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "56 96 23 19 29 48 56 91 50",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "49 12 16 94 86 2 95 70 66",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "28 58 96 70 97 67 39 21 50",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "24 19 96 47 42 77 66 68 53",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "61293 352893 374248 386341 246594 368091 103864 127152 217679",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "470865 247075 230854 270739 235169 248960 407496 251922 489888",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "268746 73030 193942 155729 307175 161076 272013 99389 313980",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "356925 62665 197629 295403 480086 78835 106659 257278 283711",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "346769 148530 127995 493887 231878 352532 417297 167079 464044",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "337322 91862 309783 270121 128337 222280 336811 406133 414943",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "467550 147673 126246 203561 469922 425060 107494 190989 149721",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 1000000 999999 2 2 1 1 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 999999 1 2 1000000 1 1000000 1000000 999999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:52",
  "total_test_cases": 20
}