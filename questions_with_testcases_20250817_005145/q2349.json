{
  "problem_code": "problems",
  "title": "DCD",
  "tags": [],
  "text": "Once upon a time, there was a secret group of boys. People used to call them 'Dushtu Cheler Dol' (Gang of Naughty boys) or DCD in short. Members of DCD were very good at making fool of people.Suppose, you are a member of DCD and you want to borrow money fromNpeople (you are definitely not going to return the money because that will go against the values of DCD). Some ofÂ  theNpeople will not lend you money as they know about DCD. But at first you don't know how many of them know about it. Then there areMmembers of DCD who want to borrow money from you. As you know none of theMpeople will return your money, you will try to escape from them when they will ask you for money, but you are not sure of being able to escape. Failure of escaping means, you must give them the money they want. So, before starting you wanted to determined how much money you will have after the whole process. As many solutions are possible, you will determine an interval, which contains the maximum number of possible solutions. The difference between the starting point and ending point will be of definite size (given in the input).InputTest cases start with two integersNandM. Next, there will beNintegers in the same or different lines where[0 <= Ni<= 1015]is the amount of money you will borrow from the ithperson. Then there will beMintegers in the same or different lines, where[0 <= Mi<= 1015]is the amount of money ithDCD member will ask for.(N + M) <= 17. Then you will be given an integerD [1 <= D <= 1015], the difference between the starting point and ending point of the desired interval.There will be at most200test cases.OutputFor each test case, you have to print three integersS,TandE.SandTare the endpoints of an interval of differenceD, (S <= T).Eis the  number of solutions betweenSandT(inclusive).If there are several solutions, print the interval whereSitself is a possible solution. If still there are several solutions, print the interval having minimum value ofS.Note:Same money values achieved by different ways are considered different.If you can't escape, you will have to pay money even if you have zero or less money left. Then your amount will be considered negative.If the starting value of the interval isX, the ending value will beX + D - 1.ExampleInput:2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5Output:0 0 1\r\n11 15 9",
  "sample_input": "Input:2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5Output:0 0 1\r\n11 15 9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DCD",
  "scraped_at": "2025-08-17 00:34:06",
  "test_cases": [
    {
      "input": "2 0\r\n1 2\r\n1\r\n4 1\r\n5 6 9 9\r\n2\r\n5",
      "expected_output": "0 0 1\r\n11 15 9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\n6 4\n6\n10 1\n8 2 4 2\n9\n5",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "1 6\n4 9\n2\n4 8\n6 4 2 6\n9\n9",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 9\n6 1\n9\n9 3\n3 7 7 1\n1\n3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 34\n93 58\n81\n36 26\n63 84 87 23\n65\n1",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "4 10\n99 57\n56\n68 28\n93 15 86 31\n92\n8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "30 66\n31 1\n65\n37 2\n37 29 7 26\n87\n83",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "10 8\n96 47\n42\n96 16\n94 94 18 58\n67\n42",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "59 72\n61 29\n76\n72 45\n89 38 84 92\n100\n17",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "493 390\n63 363\n139\n253 467\n329 325 244 315\n211\n118",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "311 397\n289 84\n257\n266 201\n330 245 113 58\n81\n386",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "327 413\n115 500\n181\n164 398\n311 214 216 288\n213\n52",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "210 306\n243 336\n407\n52 200\n233 292 497 204\n78\n94",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "162 388\n219 280\n472\n107 479\n423 456 254 221\n75\n491",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "367 323\n459 422\n178\n330 468\n210 500 376 250\n494\n414",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "153 461\n85 173\n297\n201 372\n61 118 453 443\n56\n102",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000\n1000 1000\n1000 1000 1000 1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000\n1000 1000\n1000\n1000 1000\n1000 1000 1000 1000\n1000\n1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 1000\n1000 999\n1000\n2 2\n2 1 1000 1\n999\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n1 1\n1000\n999 1000\n999 1000 1 2\n1\n2",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:53",
  "total_test_cases": 20
}