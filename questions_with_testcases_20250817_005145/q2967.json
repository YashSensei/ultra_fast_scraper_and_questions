{
  "problem_code": "problems",
  "title": "k Alternating Sum",
  "tags": [],
  "text": "Sameen has:An array having N integers,Q friends.His friends are curious about the array. So, each of his friends asks Sameen a question about the array. Every question is described by 3 integers: i, j and k. In reply to a question, Sameen has to say the “k alternating sum” of the subarray starting at position i and ending at position j [1 based indexing].“k alternating sum” of a subarray starting at position i and ending at position j can be calculated in the following way:Add the first k numbers [starting from position i]Subtract the second k numbers [starting from position i+k]Add the third k numbers [starting from position i+2*k]Subtract the fourth k numbers [starting from position i+3*k]And so on till adding/subtracting the j-th number…(j-i+1) will be divisible by k.[See sample Input/output and explanation section for more details]Can you help Sameen in answering the questions?InputThe first line of input contains two integers N and Q. The next line contains N integers, the numbers in the array. Then each of the following Q lines contains 3 integers i, j and k.OutputFor each query output an integer in a separate line, the answer for that query. Queries should be answered in the order given in the input.Constraints:1 ≤ k ≤ 1000001 ≤ N ≤ 1000001 ≤ Q ≤ 100000-1000000000 ≤ Value of a number in the array ≤ 1000000000(j-i+1) will be divisible by k.ExampleInput:6 6\r\n4 1 -2 -3 4 5\r\n2 5 2\r\n1 6 1\r\n1 6 3\r\n1 6 6\r\n3 3 1\r\n3 4 1Output:-2\r\n3\r\n-3\r\n9\r\n-2\r\n1ExplanationIn the first query, the subarray is [ 1, -2, -3, 4].So “2 alternating sum” is equal to: [1-2]-[-3+4] = -2For the second query, we get [4]-[1]+[-2]-[-3]+[4]-[5] = 3N.B: Dataset is huge. Use faster I/O method.",
  "sample_input": "Input:6 6\r\n4 1 -2 -3 4 5\r\n2 5 2\r\n1 6 1\r\n1 6 3\r\n1 6 6\r\n3 3 1\r\n3 4 1Output:-2\r\n3\r\n-3\r\n9\r\n-2\r\n1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/KALTSUM",
  "scraped_at": "2025-08-17 00:34:16",
  "test_cases": [
    {
      "input": "6 6\r\n4 1 -2 -3 4 5\r\n2 5 2\r\n1 6 1\r\n1 6 3\r\n1 6 6\r\n3 3 1\r\n3 4 1",
      "expected_output": "-2\r\n3\r\n-3\r\n9\r\n-2\r\n1",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 2\n1 10 3 5 10 8\n2 2 1\n7 10 2\n7 3 5\n10 3 8\n2 6 5\n5 5 4",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "9 10\n2 2 2 7 3 7\n2 4 5\n7 5 5\n5 6 5\n1 9 7\n5 4 10\n9 2 10",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "3 4\n8 8 1 4 7 8\n2 4 10\n6 9 7\n5 5 1\n1 9 8\n4 9 10\n3 7 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "82 91\n27 68 43 55 80 13\n88 57 42\n73 77 95\n23 66 47\n4 87 35\n7 99 54\n66 87 6",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "76 26\n72 16 13 87 46 82\n4 59 60\n84 56 36\n18 71 93\n96 68 59\n44 70 41\n44 51 8",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "86 90\n12 40 76 91 39 81\n78 46 26\n16 64 26\n8 58 6\n43 36 68\n56 30 15\n11 21 48",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "85 66\n9 58 97 60 5 2\n52 19 70\n99 13 17\n70 94 59\n74 65 42\n24 5 69\n10 30 48",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "27 19\n93 90 9 57 90 26\n20 93 4\n8 14 25\n31 7 25\n42 52 96\n89 27 62\n96 85 24",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "347819 67361\n164827 148518 459263 446670 498895 489725\n306395 330076 481637\n453236 104793 186179\n334992 495950 105107\n278367 270260 398101\n311728 496554 487094\n122831 105793 496141",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "429162 184891\n262968 488272 309915 461365 181546 292118\n51160 355770 308435\n265522 474501 265763\n396618 153268 276613\n328591 63920 212742\n437868 67043 98221\n231941 476126 167413",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "155984 389868\n247212 265149 202620 392314 323767 249404\n381878 128124 442913\n282096 456256 284969\n81624 131990 493797\n400141 72837 144961\n418280 92875 373157\n310864 291912 469884",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "215879 448127\n240441 402939 306140 300272 145117 167783\n85992 212858 462961\n401793 256011 202000\n196434 139257 401494\n435466 153135 97196\n195263 345773 421966\n54465 194404 415515",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "347050 191955\n405726 307867 152535 200656 369687 317025\n463855 63939 418020\n249186 492033 371429\n231140 338861 381600\n369344 276141 431839\n97739 144155 183085\n178255 227126 357096",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "413339 375437\n254630 147919 140314 250231 407039 364330\n304385 55358 397827\n291595 258739 449919\n442043 311162 187743\n167934 333074 285403\n251636 429931 479781\n435807 418259 138319",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "131347 100285\n80155 213850 434105 331871 335694 204168\n313434 74443 394961\n222815 448863 289220\n160236 274268 372441\n124932 127340 276193\n356432 107318 293475\n390454 108492 229738",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000 1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 999999\n1000000 1000000 1 1000000 1000000 2\n2 999999 999999\n999999 1 999999\n1 999999 1000000\n1000000 1000000 1000000\n2 2 2\n1 999999 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 999999\n1 1 1000000 2 1 1\n1 1 2\n2 2 1000000\n1 1000000 999999\n1000000 2 1000000\n2 1000000 2\n1000000 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}