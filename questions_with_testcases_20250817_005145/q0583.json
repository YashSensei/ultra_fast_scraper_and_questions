{
  "problem_code": "problems",
  "title": "Multiples of 3",
  "tags": [],
  "text": "There are N numbers a[0], a[1] ... a[N - 1]. Initially all are 0. You have to perform two types of operations :Increase the numbers between indices A and B (inclusive) by 1. This is represented by the command \"0 A B\"Answer how many numbers between indices A and B (inclusive) are divisible by 3. This is represented by the command \"1 A B\".InputThe first line contains two integers, N and Q.\r\nEach of the next Q lines are either of the form \"0 A B\" or \"1 A B\" as mentioned above.OutputOutput 1 line for each of the queries of the form \"1 A B\" containing the required answer for the corresponding query.SampleInput:4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3Output:4\r\n1\r\n0\r\n2Constraints1 ≤ N ≤ 1000001 ≤ Q ≤ 1000000 ≤ A ≤ B ≤ N - 1",
  "sample_input": "Input:4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3Output:4\r\n1\r\n0\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MULTQ3",
  "scraped_at": "2025-08-17 00:33:08",
  "test_cases": [
    {
      "input": "4 7\r\n1 0 3\r\n0 1 2\r\n0 1 3\r\n1 0 0\r\n0 0 3\r\n1 3 3\r\n1 0 3",
      "expected_output": "4\r\n1\r\n0\r\n2",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "5 10\n9 7 7\n9 5 6\n5 1 1\n7 1 7\n7 5 9\n1 7 10\n4 7 4",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 5\n3 3 3\n4 10 3\n3 3 3\n1 7 4\n3 3 4\n4 7 1\n3 7 5",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 9\n1 1 2\n5 2 5\n1 9 8\n8 3 2\n10 7 5\n5 5 8\n4 10 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 100\n13 80 44\n89 20 77\n28 37 83\n76 43 27\n6 15 60\n11 11 57\n28 32 94",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "24 10\n58 51 81\n9 90 10\n67 76 99\n57 59 27\n66 95 22\n80 87 77\n70 41 15",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "1 32\n76 92 33\n21 59 85\n20 16 34\n97 36 71\n3 55 45\n70 80 33\n85 26 38",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "96 96\n90 37 97\n59 16 14\n30 58 21\n58 78 83\n48 66 98\n36 49 6\n84 12 24",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "11 64\n37 81 45\n82 12 53\n94 18 21\n31 46 15\n7 71 1\n97 1 98\n79 50 43",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "288953 326764\n312129 259152 275753\n487254 125866 453112\n219415 241686 343859\n117102 191080 309078\n397036 113222 316561\n453722 74316 176070\n386439 109514 336983",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "373806 181841\n137741 114987 348943\n437101 294441 373672\n156839 243722 177236\n182220 298488 315667\n110188 78119 85407\n197775 57304 332617\n397935 237570 236368",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "177903 213309\n66996 70307 211438\n462759 380847 313848\n204659 226615 464813\n308102 243180 247331\n289433 441871 351941\n98626 404166 221801\n356910 493042 407467",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "441956 322724\n483739 425229 348283\n71532 219504 100688\n276010 168858 154383\n107883 121887 173703\n416393 66717 469653\n314454 139047 236162\n131652 443817 420090",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "143899 254039\n348914 344096 229042\n287128 321001 418244\n91475 476891 90357\n444359 223446 265126\n238238 213226 218760\n370923 365693 208950\n368377 419481 354277",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "252767 283842\n179895 498126 324034\n289373 124158 355203\n135407 417348 157560\n474241 208441 225403\n98387 365015 281192\n458769 368813 306445\n317903 152817 152010",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "323230 336969\n255187 206449 342573\n275023 52698 318201\n89883 339074 440825\n246295 229616 328518\n287156 267397 399912\n186211 451246 458820\n253234 369541 191426",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000\n1000000 1000000 1000000",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1000000 1000000\n2 2 1\n1000000 999999 1\n1000000 1000000 999999\n1000000 2 999999\n999999 1 2\n999999 1000000 1000000\n1000000 999999 999999",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "999999 2\n1 1000000 999999\n1 1 999999\n999999 2 1000000\n1000000 2 1\n999999 999999 1000000\n999999 999999 999999\n999999 1 2",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:38"
}