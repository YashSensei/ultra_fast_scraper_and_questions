{
  "problem_code": "problems",
  "title": "Locomotive",
  "tags": [],
  "text": "Mirko and Slavko have finally gotten jobs as locomotive drivers on\r\nthe Croatian Railroad. As early as the first day of work, they got an\r\nassignment. Each of them was to take their locomotive from a certain\r\ntown and visit as many towns as possible.Mirko is an experienced driver, so he is afraid of nothing.\r\nThis was, however, Slavko’s first train ride and he can do absolutely\r\nnothing by himself. Luckily, all the locomotives have radios, so Slavko\r\ncan drive the locomotive normally as long as he is within the range\r\nof Mirko’s radio to give him instructions.N towns have been given in a coordinate plane. Some of the towns are\r\nconnected by railroad. Mirko and Slavku start their tour in different\r\ntowns, and so that they are at most D kilometers away from each other.The locomotives can use all railroads, at any speed and in any\r\ndirection. Locomotives can switch railroad tracks in towns only.\r\nMirko and Slavko may be at most D kilometers away from each other at\r\nany moment in time.Write a program that will determine all possible towns that Slavko\r\ncan visit, as was described above.InputThe first line of the input file contains the numbers N and P, and\r\na real number D, 2 ≤ N ≤ 100, 1 ≤ P ≤ 3000, 1 ≤ D ≤ 10,000.\r\nThe number N is the number of towns, the number P is the number of\r\nrailroads, and D is the range of the radio in kilometers (a decimal\r\nnumber two digits precise). The towns are numbered 1 to N. Each of\r\nthe following N lines contains data describing one town, i.e. two\r\nintegers, X and Y, -5000 ≤ X, Y ≤ 5000, representing the town’s coordinates.Each of the following P lines contains data describing one railroad\r\ntrack, i.e. two integers G1 and G2, saying there is a railroad\r\ntrack connecting G1 i G2.The next line contains the starting positions of Mirko and Slavku,\r\nthe integers U and V. Mirko starts from town U, Slavko from town V.\r\nU and V will represent two towns separated at most D kilometers\r\nin distance.OutputThe output file should contain the numbers of all the towns Slavko\r\ncan reach. These numbers should be sorted in increasing order, each of\r\nthem written on a separate line.SampleInput:5 4 1.5\r\n0 1\r\n0 0\r\n4 1\r\n4 0\r\n2 2\r\n1 3\r\n1 5\r\n3 5\r\n2 4\r\n2 1Output:1\r\n3Input:8 6 4\r\n0 0\r\n4 3\r\n8 0\r\n16 0\r\n0 -1\r\n8 -1\r\n12 -4\r\n16 -1\r\n1 2\r\n2 3\r\n3 4\r\n5 6\r\n6 7\r\n7 8\r\n1 5Output:5\r\n6\r\n7\r\n8Input:8 6 2\r\n0 0\r\n1 0\r\n2 0\r\n1 1\r\n0 1\r\n1 3\r\n2 1\r\n1 -10\r\n1 2\r\n2 4\r\n2 3\r\n5 6\r\n6 7\r\n2 8\r\n5 1Output:1\r\n2\r\n3\r\n4",
  "sample_input": "Input:5 4 1.5\r\n0 1\r\n0 0\r\n4 1\r\n4 0\r\n2 2\r\n1 3\r\n1 5\r\n3 5\r\n2 4\r\n2 1Output:1\r\n3",
  "sample_output": "Input:8 6 4\r\n0 0\r\n4 3\r\n8 0\r\n16 0\r\n0 -1\r\n8 -1\r\n12 -4\r\n16 -1\r\n1 2\r\n2 3\r\n3 4\r\n5 6\r\n6 7\r\n7 8\r\n1 5Output:5\r\n6\r\n7\r\n8",
  "link": "https://www.spoj.com/problems/MTRAIN",
  "scraped_at": "2025-08-17 00:33:45",
  "test_cases": [
    {
      "input": "5 4 1.5\r\n0 1\r\n0 0\r\n4 1\r\n4 0\r\n2 2\r\n1 3\r\n1 5\r\n3 5\r\n2 4\r\n2 1",
      "expected_output": "1\r\n3",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 6 4\r\n0 0\r\n4 3\r\n8 0\r\n16 0\r\n0 -1\r\n8 -1\r\n12 -4\r\n16 -1\r\n1 2\r\n2 3\r\n3 4\r\n5 6\r\n6 7\r\n7 8\r\n1 5",
      "expected_output": "5\r\n6\r\n7\r\n8",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 3 5\n5 5\n4 8\n3 5\n8 8\n3 3\n2 1\n8 8\n2 4\n5 2\n10 1",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 3 3\n1 7\n5 4\n5 10\n10 8\n6 8\n6 4\n7 5\n1 4\n5 8\n10 7",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "9 10 3\n1 5\n6 2\n9 4\n5 1\n9 6\n8 9\n1 9\n6 4\n4 1\n10 10",
      "expected_output": "0",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "1 19 13\n93 86\n72 88\n86 5\n86 48\n30 44\n99 91\n14 5\n24 60\n5 28\n19 62",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "16 1 83\n81 62\n84 18\n73 36\n82 12\n23 18\n3 75\n42 40\n65 63\n58 29\n80 15",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "52 7 42\n80 95\n39 18\n44 9\n42 25\n1 55\n18 17\n29 61\n79 56\n70 2\n82 99",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 33 74\n74 98\n27 21\n23 82\n80 35\n84 55\n63 100\n1 26\n93 15\n83 22\n3 30",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "25 63 22\n10 59\n85 74\n97 44\n41 44\n73 60\n3 23\n93 18\n73 5\n82 72\n31 8",
      "expected_output": "0",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "15 7 33\n44 18\n23 41\n29 36\n49 14\n50 45\n30 10\n22 10\n25 14\n35 15\n45 39",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "27 17 38\n46 10\n19 47\n43 21\n23 26\n39 13\n27 32\n6 10\n12 27\n13 48\n9 16",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "39 47 16\n33 50\n6 40\n47 19\n8 17\n29 11\n9 40\n30 20\n20 18\n43 33\n35 38",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "12 42 20\n18 30\n14 37\n49 22\n22 32\n21 34\n28 12\n17 17\n36 42\n28 27\n21 44",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "14 33 30\n39 14\n24 29\n5 7\n13 30\n28 44\n37 45\n25 15\n8 24\n15 49\n28 24",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "48 43 45\n21 28\n37 35\n30 39\n10 47\n39 38\n21 42\n36 21\n19 19\n14 43\n38 37",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "47 19 28\n18 14\n31 35\n9 22\n9 11\n9 18\n38 24\n40 17\n24 8\n26 5\n32 29",
      "expected_output": "0",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100 100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100\n100 100",
      "expected_output": "0",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "99 100 1\n99 2\n2 99\n1 2\n99 100\n2 1\n100 2\n100 99\n100 2\n100 100\n99 99",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:04"
}