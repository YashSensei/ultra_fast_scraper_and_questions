{
  "problem_code": "problems",
  "title": "Ada and Mold",
  "tags": [],
  "text": "As you might already know, Ada the Ladybug is a farmer. She has a long furrow in which she grows vegetable (while each vegetable is identified by a bloom-value). The more vegetable is in the furrow the bigger risk of mold there is. More specifically the mold-value can be obtained as sum ofxorof all pairs of vegetable's bloom-values.Ada has bought a few wooden separators which could possibly reduce the mold-value. It works in following manner: she can put the separators between some plants, dividing the furrow into multiple segments. The mold-value will then becomes the sum of mold-values of all the segments (independently). Can you find the minimal possible mold-value?InputThe first line of input contains two integersN, K:1 ≤ K < N ≤     5000, the length of furrows and the number of separators.The next lines will containNnumbers0 ≤ Ai≤     109, the bloom-values of vegetable.OutputOutput the minimal possible mold-value.Example Input6 1\r\n1 2 3 4 5 6Example Output12Example Input 14 3\r\n5 3 5 3Example Output 10Example Input 27 2\r\n5 3 5 3 5 3 4Example Output2124Example Input 39 4\r\n1 2 3 4 5 6 7 666 1024Example Output 38Example Input 430 8\r\n629470789 417274987 617986533 841737683 297969800 432044389 708142005 156958893 499363651 434034331 176735187 525172817 747109631 949700868 259681519 357968078 818249370 456939952 450487335 529013233 327250536 90354657 643708145 141755216 656041628 661580907 204072850 469709611 834069223 681347499Example Output 416154467281",
  "sample_input": "6 1\r\n1 2 3 4 5 6",
  "sample_output": "12",
  "link": "https://www.spoj.com/problems/ADAMOLD",
  "scraped_at": "2025-08-17 00:34:19",
  "test_cases": [
    {
      "input": "6 1\r\n1 2 3 4 5 6",
      "expected_output": "12",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 4\n10 2 6 7 5 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "2 8\n7 10 8 1 3 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 5\n10 9 10 9 10 7",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "72 93\n46 18 50 12 95 86",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "45 9\n12 74 13 53 31 61",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 25\n36 8 30 23 67 93",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "82 60\n80 81 42 2 91 2",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 93\n99 26 45 30 99 82",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "331 1102\n1054 1396 402 914 345 717",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "634 2500\n1988 2475 667 1420 1096 1428",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "864 1378\n548 1990 1284 2359 1691 1967",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "2028 258\n1981 1006 958 1187 1053 2261",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "911 534\n1528 751 1647 297 931 2470",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "2315 1139\n2282 2308 1963 924 1366 2287",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "575 646\n1226 2375 765 2462 867 2073",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000 5000 5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "5000 5000\n5000 5000 5000 5000 5000 5000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 4999\n2 4999 4999 2 4999 2",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "4999 1\n2 2 1 5000 2 5000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20
}