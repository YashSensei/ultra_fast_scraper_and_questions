{
  "problem_code": "problems",
  "title": "Walking Robot",
  "tags": [],
  "text": "Leonard is a student of robotics, and his teacher, Dr. Cooper, asked his class to build a robot to interact with the environment and change its behavior upon certain events. The environment, behavior changes and the events are up to the student, so Leonard decided to make a robot that walks in a grid with a set of movements. There are downloading spots in the grid in which the robot can learn new movements. The task of the robot is to go from one point of the grid to another in as fewest steps as possible.The grid is composed of M rows and N columns of squares. The bottom-left square is position (0,0) and the top-right square is position (N-1,M-1). A movement is defined as a tuple (X,Y). Where X denotes the movement on the x axis and Y on the y axis. A movement is considered as 1 step. The robot can not make a movement that will end outside the boundaries of the grid.There are K possible movements for the robot to learn. The robot stars with T movements on its memory. If the robot is in a downloading spot, he can choose to learn the movement available at that spot, this takes 1 step. The robot can not learn new movements while he is moving. The robot starts at position (0,0) and should move to position (N-1,M-1).InputThe first line has four integers M, N (2 <= M,N <= 15), K (1 <= K <= 12) and T (0 <= T <= K). After this line there will be K lines. The Kth line contains two integers (X,Y) (-10 <= X,Y <= 10) which describe the Kth movement. Movements are indexed from 1 to K inclusive. Afterwards there will be a line with T numbers separated by spaces, which describe the movements that are initially known by the robot. Then there is the description of the grid: there will be M lines with N integers each. 0 indicates a free square, a positive number means there is a downloading spot for the movement with that number index. The numbers of the grid will always be between 0 and K inclusive. The last case is followed by a line containing four zeros. This case should not be processed.OutputFor each test case print a single line with \"Case #X: S\" where X is the number of the test case (starting from 1) and S is the lowest number of steps to achieve the destination. If it is not possible for the robot to achieve the destination, print -1 instead of the number of steps.ExampleInput:4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0Output:Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
  "sample_input": "Input:4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0Output:Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/WALKROBO",
  "scraped_at": "2025-08-17 00:33:10",
  "test_cases": [
    {
      "input": "4 3 2 11 00 110 0 00 0 00 0 00 0 25 5 4 12 1-1 1-1 0-1 -210 4 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 05 5 4 12 1-1 1-1 0-1 -214 0 3 0 00 0 0 0 00 0 0 0 20 0 0 0 00 0 0 0 07 7 3 01 12 24 40 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 0 00 0 3 0 0 0 00 2 0 0 0 0 01 0 0 0 0 0 00 0 0 0",
      "expected_output": "Case #1: 6Case #2: 11Case #3: -1Case #4: 5",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1 7 1 10 1 2 10 10 7 3 6 6 1 6 5 9 1 2 10 4 4 5 8 10 7 5 1 10 6 2 5 1 4 3 8 2 4 4 9 5 1 10 4 8 1 5 10 2 4 10 3 7 4 4 9 2 3 4 9 6 7 7 3 2 4 4 3 6 6 2 4 2 6 7 9 2 5 9 8 5 7 3 3 8 8 5 7 6 5 3 8 3 7 2 6 3 5 7 10 1 8 5 7 4 2 6 4 10 8 7 5 1 5 1 10 3 6 5 3 4 8 10 4 3 10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 9 5 10 4 6 3 2 10 10 6 6 1 2 10 5 2 9 10 4 4 1 7 7 4 5 4 1 10 6 9 8 5 1 3 10 9 6 1 5 7 10 3 3 10 1 3 5 6 7 10 10 9 7 1 2 3 8 1 4 10 3 6 4 5 10 8 8 5 3 1 7 7 4 10 9 8 1 8 3 3 9 5 9 1 5 4 8 9 7 10 6 5 8 6 9 7 2 1 2 7 3 4 8 2 2 4 2 7 10 6 4 10 6 4 9 10 7 4 9 5 4 9 4 7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "1 6 10 6 2 1 5 8 9 3 2 4 8 10 4 4 4 4 2 8 1 1 4 9 3 5 6 9 6 2 7 4 10 2 2 3 5 8 9 8 3 8 2 9 6 8 10 6 7 2 1 5 10 9 2 2 9 4 3 4 8 6 7 4 3 3 1 6 7 7 5 4 3 8 10 4 3 7 4 6 1 9 8 4 7 8 8 5 6 5 8 1 3 2 8 4 10 4 9 9 9 9 4 3 2 4 6 4 6 1 1 9 7 5 9 3 9 4 9 6 7 1 4 9 8",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "86 45 43 80 75 15 74 47 25 75 14 76 3 93 57 62 17 95 11 59 60 20 36 78 48 5 22 76 65 53 22 36 66 11 72 39 81 46 71 27 73 43 41 94 37 92 34 29 91 27 66 10 54 44 98 32 43 55 59 81 48 24 39 71 81 54 14 45 96 99 76 47 74 63 5 43 39 31 75 51 16 13 79 50 65 68 19 38 56 44 52 69 94 87 20 19 48 94 79 25 80 41 19 8 52 94 38 6 11 91 64 98 28 8 2 27 47 57 95 62 62 19 68 71 12",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "81 100 21 90 86 12 30 66 70 44 35 46 19 62 71 97 69 3 82 65 99 76 40 47 17 62 56 31 83 71 19 100 69 10 64 96 9 63 42 16 23 9 48 84 10 69 9 49 2 100 86 52 94 42 75 8 37 79 14 30 74 10 63 97 47 27 49 34 29 53 36 55 59 5 27 40 96 44 27 61 75 100 30 78 29 82 22 92 19 91 46 18 35 26 45 39 17 54 49 85 14 51 89 81 46 56 80 95 73 92 89 24 33 59 39 66 61 17 44 6 31 49 11 100 60",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "89 12 22 4 66 82 39 6 47 8 28 93 23 73 62 48 17 17 20 21 66 6 44 24 68 94 25 65 81 21 51 60 36 36 27 42 2 97 98 44 8 84 37 67 23 39 93 61 47 59 83 71 100 89 14 95 54 39 67 61 17 33 76 70 16 62 78 41 50 66 16 25 97 80 21 72 38 77 31 81 72 40 87 33 86 16 9 62 61 62 28 97 16 19 92 70 38 41 57 49 49 19 82 87 52 19 16 81 63 51 83 89 9 22 94 36 67 73 36 10 48 33 93 68 56",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "1 14 70 81 4 10 100 46 86 44 4 97 3 91 16 34 44 30 22 9 95 28 23 68 47 79 15 80 36 97 33 37 36 61 53 42 4 73 22 96 56 45 21 58 93 80 55 20 70 40 48 91 44 22 43 47 63 66 69 71 96 13 16 89 27 74 53 78 42 37 46 35 14 77 38 27 65 74 49 28 44 90 4 11 41 40 53 3 61 75 63 85 93 60 89 28 79 31 41 74 76 76 93 54 89 93 99 87 84 99 16 71 37 49 25 74 48 46 12 53 41 98 55 62 61",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "25 65 54 18 90 12 20 12 30 69 41 25 71 47 100 61 71 20 7 75 8 57 90 1 25 12 24 95 97 84 74 64 17 91 76 25 86 68 47 41 86 18 49 84 93 21 72 13 66 82 81 22 9 26 77 70 32 54 4 14 20 16 86 12 14 46 48 55 45 45 76 60 25 84 63 87 70 91 30 24 79 13 24 18 9 34 63 50 2 45 64 86 61 31 52 77 55 6 97 81 37 53 80 29 90 24 48 64 17 83 77 35 82 79 85 53 18 8 72 36 53 62 61 69 4",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "257 90 139 259 383 256 248 205 270 305 147 485 209 352 410 68 84 144 187 62 319 84 433 347 345 305 144 97 180 374 463 284 318 292 417 324 475 88 478 461 473 250 179 495 310 417 400 246 445 137 465 466 384 62 472 311 207 143 416 328 451 224 51 390 149 247 316 397 400 357 111 499 194 338 294 479 317 250 257 192 72 115 152 253 458 59 267 154 384 90 144 87 247 458 230 301 154 245 70 455 326 170 167 407 203 307 475 379 261 343 375 121 164 289 432 100 157 322 281 89 188 184 192 374 272",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "160 287 280 158 71 403 279 134 126 195 392 171 64 191 256 463 362 430 137 90 364 262 467 425 64 54 206 157 457 155 186 55 114 396 187 369 256 416 400 104 373 87 320 207 285 428 212 77 197 285 266 195 286 170 185 330 382 480 422 492 174 232 135 276 371 359 359 264 281 469 325 98 56 248 415 386 436 213 55 352 111 267 369 252 332 51 223 408 226 339 339 185 262 181 421 456 305 51 57 192 199 145 293 55 374 210 418 406 190 412 451 97 85 303 458 483 130 343 339 457 174 440 494 231 403",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "318 188 470 498 448 183 198 312 394 185 282 440 50 489 203 252 176 383 206 319 203 124 168 322 433 456 481 419 386 459 495 445 444 370 488 108 192 358 111 474 260 389 101 383 360 491 471 339 176 410 285 199 137 498 83 479 474 458 97 273 95 88 436 369 80 100 366 377 242 394 479 98 332 176 113 484 153 224 230 164 403 428 267 72 331 198 302 174 253 232 264 127 214 300 429 116 234 448 147 59 409 113 90 188 233 323 175 151 121 101 435 412 468 96 113 184 252 332 352 306 108 104 432 286 94",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "316 184 138 374 207 103 296 359 468 176 481 480 382 232 96 128 112 267 132 63 248 498 172 159 299 84 237 188 438 249 423 284 309 347 187 149 182 416 87 214 321 338 285 372 359 258 157 383 134 102 279 317 336 71 80 123 85 287 446 416 460 99 62 91 500 128 148 436 152 192 381 149 232 170 195 299 189 157 311 473 347 120 291 430 267 313 57 374 462 236 155 60 292 421 369 165 168 223 259 366 243 222 273 386 309 160 461 209 177 244 329 166 181 383 465 60 90 363 177 437 436 282 465 313 227",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "201 161 167 86 175 331 166 396 390 245 285 129 353 133 488 456 331 183 71 153 189 425 53 131 68 286 474 290 372 121 193 380 118 492 165 64 476 230 205 301 108 499 139 327 329 319 212 152 264 191 487 465 297 279 144 89 73 343 214 188 344 90 428 441 322 357 110 397 343 388 197 329 476 362 150 217 305 498 223 217 261 136 281 199 477 413 463 489 215 166 212 405 322 264 178 425 417 205 167 491 169 108 357 458 437 154 173 220 60 378 203 265 183 362 366 144 205 447 251 60 84 498 55 440 398",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "373 259 331 383 373 348 179 197 310 352 348 297 171 438 80 172 165 209 55 448 483 378 443 366 76 232 66 276 67 66 196 317 227 221 257 50 259 129 58 233 141 489 409 188 299 337 392 229 141 397 326 373 201 70 399 56 456 341 495 351 262 354 281 247 163 463 94 306 215 95 123 212 214 260 270 325 99 108 380 472 325 398 459 112 107 500 174 345 68 383 309 99 60 203 371 261 390 413 383 148 342 291 393 420 346 101 403 265 191 355 63 76 250 314 110 482 480 161 468 202 411 206 254 198 116",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "213 360 152 219 135 86 271 93 162 357 347 324 248 406 234 89 196 246 99 211 436 434 384 440 419 269 217 92 164 106 324 248 173 264 345 292 278 138 471 230 346 399 365 255 71 430 202 360 391 401 390 434 381 119 303 348 88 211 111 226 387 303 82 269 61 458 405 171 495 89 435 192 289 477 435 133 490 119 57 392 249 160 270 340 500 209 61 373 395 70 65 389 463 376 296 238 472 336 494 268 489 484 377 287 281 206 245 88 251 126 388 248 150 327 239 288 485 232 215 471 231 198 378 249 349",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "2 999 2 1000 1000 999 2 1 1000 2 2 1 2 1 1 999 2 2 1 2 999 1000 1 2 1000 999 999 2 1000 1 1000 1 1 1000 1000 999 1 1 999 999 999 999 1000 999 1 999 2 1000 1 2 1 1 1 1 1 999 1000 1000 2 1 1000 2 999 2 2 1 1000 999 2 1000 2 1000 1 999 1000 1000 1 1000 1000 1 1 2 999 2 1000 1000 1 1 2 2 2 999 1000 1 2 1000 1000 1 2 2 1 1 1 1 1000 1 1 1000 1000 2 2 2 2 2 1 999 999 1 2 1 2 2 1000 2 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1 2 1 1000 2 1000 2 1 999 1000 999 2 1000 1000 1 1 999 2 2 1 1 999 1 1 999 1000 1000 1 999 1 1000 999 2 999 1000 999 1 1000 1 1000 1000 999 1000 1 1000 1 1000 999 1 999 1 2 2 1000 2 1 999 999 999 2 999 2 1000 999 999 999 1000 2 999 1 2 999 999 999 1 1 999 1 999 1 1000 1000 2 1 1 1000 2 2 2 1000 1000 2 2 999 1 2 2 2 1000 1000 1 999 2 1 2 1 1 2 2 1000 1 999 1 999 1000 999 1000 999 2 1 999 999 1000 1000",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:47",
  "total_test_cases": 20
}