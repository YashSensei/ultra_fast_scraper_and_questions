{
  "problem_code": "problems",
  "title": "Bucket Selection",
  "tags": [],
  "text": "After a long period working in his magical garden, Bratan Mahammad could grow flowers ofNdistinct kinds there. Since Tukezban's (Mahammad's love) birthday is coming, as a perfect gift, Mahammad wants to give her K bunches of flowers. Interestingly, each flower has a beautifulness xiand the number of flowers of every kind isM. When preparing flower buckets, he has to be very careful: every bucket must consist ofNflowers and surely, all flowers have to be distinct kind in each bucket. The overall beauty value ofKbuckets depends on the absolute difference between the beautifulness of the most beautiful flower of K buckets (max(xi)) and the least beautiful one (min(xi)). Help Mahammad minimize this difference.InputThe first line of the input contains 3 positive integers,N,MandK, denoting the number of flower types, the number of flowers in each type, and the number of buckets needed, respectively. Then, the following N lines have 4 integers each,xi,1,ai,bi,ci.Herexi,1indicates the beautifulness of the first flower in i-th type. And for remaining M - 1 flowers, beautifulness value is calculated asxi, j= (ai* xi, j-1+ bi) % ci.You can safely assume thatN, M, K ≤ 2500andK≤ M.All numbers in input section fit 32-bit signed non-negative integers.OutputPrint theminimum possible difference in K-buckets.ExampleInput:2 3 2\r\n2 2 3 9\r\n2 1 2 10Output:4Note:The generated beauty values will be:For i = 1: (2, 7, 8)For i = 2: (2, 4, 6)One optimal way is to choose buckets as (7, 4) and (8, 6) together, so the difference is |8 - 4| = 4By the way, we should not choose (2, 4) and (7, 2), since |7 - 2| = 5, which is greater than 4.",
  "sample_input": "Input:2 3 2\r\n2 2 3 9\r\n2 1 2 10Output:4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SELECTION",
  "scraped_at": "2025-08-17 00:33:27",
  "test_cases": [
    {
      "input": "2 3 2\r\n2 2 3 9\r\n2 1 2 10",
      "expected_output": "4",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "8 3 6\n5 10 8 8\n9 6 7 7",
      "expected_output": "0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 5 4\n10 4 9 5\n7 3 1 4",
      "expected_output": "0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "7 2 6\n5 6 3 4\n5 1 8 6",
      "expected_output": "0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "3 26 79\n87 71 30 57\n82 79 56 69",
      "expected_output": "0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "99 10 78\n49 31 9 93\n79 83 80 28",
      "expected_output": "0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "21 38 63\n43 69 15 86\n22 92 18 37",
      "expected_output": "0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "77 37 2\n9 80 70 20\n80 7 74 3",
      "expected_output": "0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "70 94 68\n50 92 80 55\n46 60 6 9",
      "expected_output": "0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "109 468 492\n69 110 74 198\n383 157 224 461",
      "expected_output": "0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "384 76 211\n415 379 476 163\n457 149 69 458",
      "expected_output": "0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "336 191 190\n313 467 155 497\n111 107 385 329",
      "expected_output": "0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "103 305 262\n179 79 91 139\n114 404 80 297",
      "expected_output": "0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "91 176 159\n464 496 277 423\n178 119 104 150",
      "expected_output": "0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "377 282 232\n403 451 410 63\n82 264 112 171",
      "expected_output": "0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "390 421 452\n104 143 393 411\n236 167 131 360",
      "expected_output": "0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 1000\n1000 1000 1000 1000",
      "expected_output": "0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 999 1\n999 999 2 1\n1 1 999 999",
      "expected_output": "0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 1 1000\n2 2 1000 1\n2 1000 1 2",
      "expected_output": "0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:50",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:05"
}