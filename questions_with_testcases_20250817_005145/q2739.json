{
  "problem_code": "problems",
  "title": "Koala Fan",
  "tags": [],
  "text": "Andy is a really cute person and he wants to buy a koala. There arenavailable koalas, for each koala its beauty and cost are known. There are two accepted types of money in the world: donuts and polygons, so each koala cost can be either in donuts or polygons. Due the bad relations between The Linear States and Exponenzula no money changes between the types are allowed.Help Andy to find twodifferentkoalas with the maximum total beauty so that he can buy both at the same time.InputThe first line contains three integersn,dandpthe number of koalas, the number of donuts and polygons Andy has.The nextnlines describe koalas. Each of these lines contain two integers biand pithe beauty and the cost of the i-th koala, and then a letter \"D\" or \"P\", describing in which type of money is the cost of koala i: in donuts or in polygons, respectively.OutputPrint the maximum total beauty of exactly two koalas Andy can buy. If he can't buy two koalas, print \"sad:(\".ExampleInput:3 7 610 8 D4 3 D5 6 POutput:9Input:3 10 105 5 D5 5 D10 11 POutput:10Constraints• 2 ≤ n ≤ 100000• 0 ≤ d, p ≤ 100000• 1 ≤ b i , p i ≤ 100000",
  "sample_input": "Input:3 7 610 8 D4 3 D5 6 POutput:9",
  "sample_output": "Input:3 10 105 5 D5 5 D10 11 POutput:10",
  "link": "https://www.spoj.com/problems/VZLA2019K",
  "scraped_at": "2025-08-17 00:34:11",
  "test_cases": [
    {
      "input": "3 7 610 8 D4 3 D5 6 P",
      "expected_output": "9",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "3 10 105 5 D5 5 D10 11 P",
      "expected_output": "10",
      "type": "sample_2",
      "description": "Original sample 2 from problem statement"
    },
    {
      "input": "3 1 10 10 2 4 6 2\n1 5 8 1 n 10 gtj 9 x",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "9 4 5 6 8 5 2 3\n6 9 5 10 daz 10 t 9 wyncr",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "10 10 3 10 3 10 9 8\n7 10 8 8 vsfta 1 fmzy 6 wthtx",
      "expected_output": "To be computed",
      "type": "small_case_5",
      "description": "Generated small test case"
    },
    {
      "input": "83 78 87 85 77 90 44 100\n39 51 12 17 zigs 55 sp 34 pww",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "65 70 26 45 63 71 68 35\n65 49 67 4 woz 98 dudb 74 gelp",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "95 64 3 7 61 64 76 54\n81 79 80 89 skn 25 mqkp 79 w",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "41 92 51 75 93 3 41 68\n56 30 38 29 tmejn 32 pn 18 ko",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "22 40 52 66 59 10 52 31\n24 35 5 91 xn 60 xp 60 sau",
      "expected_output": "To be computed",
      "type": "medium_case_10",
      "description": "Generated medium test case"
    },
    {
      "input": "13647 18382 24766 22812 11066 48905 26240 21274\n35124 24014 11667 25219 jpxf 20439 c 37096 v",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "5448 25763 33413 48439 32270 20340 47009 19085\n13389 39308 49209 5074 uqpcc 15888 kbqek 7838 w",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "37304 40918 28638 37589 14990 43479 30550 39004\n17705 28901 39843 36061 vxdt 27250 n 12946 e",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "22683 47377 48632 46372 39448 21907 38548 39085\n9274 5968 8670 42373 h 47930 g 26324 tomn",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "44885 35436 24400 11417 44115 20122 42108 34935\n12737 38399 17338 28785 owk 24239 lucp 47908 es",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "21467 24556 43164 34683 26672 27720 23721 36208\n49909 26655 39670 40740 ys 49003 onj 11826 of",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "8967 43621 46447 13015 38793 33279 21911 42526\n13609 21180 14105 44809 pe 5264 bw 37082 whba",
      "expected_output": "To be computed",
      "type": "large_case_17",
      "description": "Generated large test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 sa 100000 n 100000 alju",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "100000 100000 100000 100000 100000 100000 100000 100000\n100000 100000 100000 100000 mlqu 100000 prtji 100000 anb",
      "expected_output": "To be computed",
      "type": "max_case_19",
      "description": "Generated max test case"
    },
    {
      "input": "99999 2 1 99999 2 2 99999 99999\n2 99999 2 2 asp 2 zml 99999 d",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:54",
  "total_test_cases": 20
}