{
  "problem_code": "problems",
  "title": "Manipulate Dwarfs",
  "tags": [],
  "text": "In a small village beyond seven hills and seven seas, Snow White lives together with N dwarves who spend all their time eating and playing League of Legends. Snow White wants to put an end to this, so she has organized gym classes for them.At the beginning of each class, the dwarves must stand in line, ordered by their height. For the purposes of this task, assume that the dwarves have heights 1, 2, ... N (each exactly once) and initially all are standing in sorted order with height from 1 to N. Now Snow White play on them by issuing commands of the form:1 X Y -- dwarves with height X and Y in the line must switch places. She also checks their ordering by issuing queries of the form:2 A B -- do dwarves with heights A, A+1, ... B (not necessarily in that order) occupy a contiguous subsequence of the current line? Help the doofus dwarves follow Snow White's instructions and respond to her queries.InputThe first line of input contains the two positive integers N and M, the number of dwarves and the number of Snow White's requests, respectively (2 ≤ N ≤ 200 000, 2 ≤ M ≤ 200 000). Each of the following M lines contains a single Snow White's request, of the form \"1 X Y\" (1 ≤ X, Y ≤ N, X ≠ Y) or “2 A B” (1 ≤ A ≤ B ≤ N), as described in the problem statement.OutputThe output must contain one line for each request of type 2, containing the reply to the query, either “YES” or “NO”.ExampleInput:4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3Output:YES\r\nYES\r\nNO",
  "sample_input": "Input:4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3Output:YES\r\nYES\r\nNO",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DWARFLOG",
  "scraped_at": "2025-08-17 00:33:52",
  "test_cases": [
    {
      "input": "4 5\r\n2 2 3\r\n2 2 4\r\n1 1 3\r\n2 3 4\r\n1 4 3",
      "expected_output": "YES\r\nYES\r\nNO",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "4 6\n3 1 4\n5 8 1\n9 4 8\n9 3 7\n5 10 8",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "6 9\n8 4 1\n7 10 8\n9 1 3\n10 2 5\n3 6 5",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "5 6\n5 2 2\n4 9 4\n2 8 8\n9 1 2\n5 1 2",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "56 7\n30 5 1\n88 3 90\n3 66 21\n10 98 71\n25 33 62",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "31 98\n62 81 48\n14 70 47\n36 68 80\n7 2 70\n73 74 85",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "25 15\n32 72 93\n82 57 72\n78 14 84\n97 21 37\n48 92 55",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "43 36\n7 16 55\n90 63 64\n37 43 56\n36 23 56\n1 30 91",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "57 76\n35 83 10\n65 2 60\n79 13 44\n34 48 21\n50 32 94",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "78588 60075\n12485 65858 95641\n33049 68464 44043\n33866 76583 61071\n30284 30893 60661\n38119 26165 28970",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "99018 35358\n50599 20864 78622\n24043 10321 86197\n40468 40673 51918\n21284 72337 45614\n21536 99646 46424",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "13405 68580\n67334 26806 88874\n92658 23913 80179\n36036 43724 71989\n71857 62724 64435\n13814 27392 85928",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "88765 44405\n61154 53933 44787\n25574 79277 74178\n54008 71333 39521\n70498 47873 55278\n17284 39597 38978",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "55815 92113\n40870 64272 91380\n56908 17278 93741\n69096 80271 45879\n24539 53799 21234\n77869 81961 98769",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "23440 46402\n71893 39978 34645\n13930 66789 25991\n92569 19213 91483\n23786 67836 88601\n50983 44336 30117",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "69381 31157\n55196 12704 48544\n64083 34770 13263\n93988 94407 78631\n90288 26639 54021\n82969 36156 69872",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000\n200000 200000 200000",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "200000 199999\n200000 1 1\n199999 200000 200000\n2 199999 2\n2 200000 1\n1 2 2",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1\n200000 199999 2\n199999 1 200000\n200000 200000 1\n199999 2 2\n1 2 2",
      "expected_output": "0\n0\n0\n0\n0\n0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:48",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:36:51"
}