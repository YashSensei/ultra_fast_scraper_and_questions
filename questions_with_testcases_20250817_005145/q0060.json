{
  "problem_code": "problems",
  "title": "Generalized Matrioshkas",
  "tags": [],
  "text": "Vladimir worked for years making matrioshkas, those nesting dolls that certainly represent truly Russian craft. A matrioshka is a doll that may be opened in two halves, so that one finds another doll inside. Then this doll may be opened to find another one inside it. This can be repeated several times, until a final doll — that cannot be opened — is reached.Recently, Vladimir realized that the idea of nesting dolls might be generalized to nesting toys. Indeed, he has designed toys that contain toys but in a more general sense. One of these toys may be opened in two halves and it may have more than one toy inside it. That is the new feature that Vladimir wants to introduce in his new line of toys.Vladimir has developed a notation to describe how nesting toys should be constructed. A toy is represented with a positive integer, according to its size. More precisely: if when opening the toy represented by m we find the toys represented by n1, n2 ... nr, it must be true that n1 + n2 + ... + nr < m. And if this is the case, we say that toy m contains directly the toys n1, n2 ... nr. It should be clear that toys that may be contained in any of the toys n1, n2, ... nr are not considered as directly contained in the toy m.A generalized matrioshka is denoted with a non-empty sequence of non zero integers of the form:\r\na1 a2 ... aN such that toy k is represented in the sequence with two integers −k and k, with the negative\r\none occurring in the sequence first before the positive one.For example, the sequence:−9 −7 −2 2 −3 −2 −1 1 2 3 7 9represents a generalized matrioshka conformed by six toys, namely, 1, 2 (twice), 3, 7 and 9. Note that toy 7 contains directly toys 2 and 3. Note that the first copy of toy 2 occurs left from the second one and that the second copy contains directly a toy 1. It would be wrong to understand that the first −2 and the last 2 should be paired.On the other hand, the following sequences do not describe generalized matrioshkas:−9 −7 −2 2 −3 −1 −2 2 1 3 7 9because toy 2 is bigger than toy 1 and cannot be allocated inside it.−9 −7 −2 2 −3 −2 −1 1 2 3 7 −2 2 9because 7 and 2 may not be allocated together inside 9.InputThe input file contains several test cases, each one of them in a separate line. Each test case is a sequence of non zero integers, each one with an absolute value less than 107.OutputOutput texts for each input case are presented in the same order that input is read. For each test case the answer must be a line of the form:-) Matrioshka!if the design describes a generalized matrioshka. In other case, the answer should be of the form:-( Try again.ExampleInput:-9 -7 -2 2 -3 -2 -1 1 2 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 2 1 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 3 2 1 7 9\r\n-100 -50 -6 6 50 100\r\n-100 -50 -6 6 45 100\r\n-10 -5 -2 2 5 -4 -3 3 4 10\r\n-9 -5 -2 2 5 -4 -3 3 4 9Output::-) Matrioshka!\r\n:-( Try again.\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.",
  "sample_input": "Input:-9 -7 -2 2 -3 -2 -1 1 2 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 2 1 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 3 2 1 7 9\r\n-100 -50 -6 6 50 100\r\n-100 -50 -6 6 45 100\r\n-10 -5 -2 2 5 -4 -3 3 4 10\r\n-9 -5 -2 2 5 -4 -3 3 4 9Output::-) Matrioshka!\r\n:-( Try again.\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MATRIOSH",
  "scraped_at": "2025-08-17 00:33:24",
  "test_cases": [
    {
      "input": "-9 -7 -2 2 -3 -2 -1 1 2 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 2 1 3 7 9\r\n-9 -7 -2 2 -3 -1 -2 3 2 1 7 9\r\n-100 -50 -6 6 50 100\r\n-100 -50 -6 6 45 100\r\n-10 -5 -2 2 5 -4 -3 3 4 10\r\n-9 -5 -2 2 5 -4 -3 3 4 9",
      "expected_output": ":-) Matrioshka!\r\n:-( Try again.\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.\r\n:-) Matrioshka!\r\n:-( Try again.",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "10 6 5 4 1 2 5 6 4 5 10 3\n4 3 1 7 3 8 6 2 10 6 2 7\n10 8 7 2 5 1 1 5 2 7 5 2\n9 6 3 4 4 1\n8 8 4 4 9 10\n4 5 2 4 1 10 9 2 3 2\n10 9 6 3 8 8 9 3 2 9",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "10 5 8 2 9 10 5 2 6 10 7 6\n1 8 1 4 4 1 9 8 6 4 6 1\n6 5 6 1 3 8 9 6 8 9 1 7\n5 9 8 3 2 5\n8 7 4 5 6 3\n9 1 8 9 4 8 2 5 8 8\n7 9 1 10 9 2 8 1 1 1",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "4 7 8 1 8 9 9 2 2 5 1 2\n5 3 7 10 9 1 1 5 1 8 2 1\n6 5 8 4 8 4 9 7 5 2 10 3\n4 4 10 10 6 9\n8 8 5 4 3 8\n6 8 4 10 6 3 8 5 8 4\n8 3 6 5 8 9 2 7 8 3",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "84 78 93 84 95 56 51 7 76 45 62 49\n34 46 37 27 4 41 48 11 78 39 60 80\n5 16 89 58 69 77 98 38 54 10 25 99\n82 55 30 36 81 96\n68 25 73 77 87 66\n16 94 53 87 58 53 46 8 22 61\n83 59 12 51 73 79 19 6 83 15",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "42 35 5 98 58 15 64 73 25 61 62 26\n39 25 35 60 58 19 69 20 64 35 23 6\n56 22 55 67 15 81 19 2 7 52 29 8\n35 45 10 88 96 84\n22 96 53 54 83 4\n39 48 64 71 75 70 74 72 13 66\n65 35 47 42 27 19 37 33 19 26",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "58 63 67 3 32 81 55 7 9 77 57 54\n49 21 14 38 42 73 82 61 39 25 33 32\n30 100 51 2 86 50 58 19 51 96 38 94\n29 35 6 90 89 17\n11 23 83 71 95 46\n95 63 97 38 58 59 29 10 48 57\n10 72 28 18 12 59 96 81 86 7",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "19 30 44 71 30 97 42 100 79 58 26 94\n58 27 87 86 99 75 17 84 62 42 32 2\n1 11 48 100 88 35 16 63 96 73 24 48\n36 61 67 15 60 94\n88 88 15 31 49 56\n30 73 32 91 1 94 14 77 88 93\n60 85 98 42 94 30 82 34 83 1",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "99 21 31 33 95 26 95 49 89 87 74 86\n18 85 99 44 79 70 76 48 73 17 76 16\n95 21 27 92 77 71 63 64 24 21 7 42\n94 38 38 96 9 71\n97 80 41 79 85 31\n68 57 63 33 22 2 75 2 15 89\n5 48 80 31 16 54 79 22 46 12",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "240 466 195 279 212 201 465 424 186 412 369 453\n449 423 390 461 142 450 314 96 356 139 65 472\n208 305 451 145 264 358 134 492 77 349 356 349\n75 478 91 198 366 429\n261 197 171 396 420 465\n336 328 369 365 473 223 221 299 60 471\n252 423 469 265 222 409 182 243 361 287",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "430 108 127 384 258 141 56 153 208 389 147 164\n443 321 151 327 112 202 241 140 66 225 330 95\n376 362 185 255 375 227 182 340 105 486 428 382\n452 432 110 302 121 225\n486 456 407 346 283 320\n211 50 484 492 188 51 229 358 138 294\n195 106 465 479 439 421 417 316 188 426",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "400 381 438 487 255 266 209 193 407 429 146 62\n74 207 381 422 371 119 92 263 135 336 490 300\n82 196 219 180 136 421 52 424 324 315 286 412\n160 299 158 289 489 391\n127 446 431 73 65 429\n177 392 430 170 246 290 187 333 263 266\n375 277 140 270 441 247 300 487 317 75",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "436 257 223 192 465 218 490 218 368 186 362 312\n65 440 435 317 138 304 254 376 292 265 219 383\n104 94 175 367 215 201 134 313 349 331 382 237\n59 130 138 160 373 376\n363 80 148 479 374 271\n239 492 152 235 322 499 106 274 443 246\n149 368 167 53 495 113 156 254 261 322",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "302 222 172 378 244 380 239 392 294 223 333 434\n341 203 223 442 157 320 435 339 474 336 83 490\n173 317 120 217 425 232 208 462 468 174 301 213\n191 415 451 297 178 446\n414 280 378 80 335 402\n254 189 145 230 240 284 330 282 339 487\n251 389 269 476 378 68 393 440 118 301",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "90 225 95 265 123 372 356 449 212 331 105 380\n326 206 465 149 382 213 490 267 307 232 180 80\n77 53 67 69 407 391 322 421 153 406 463 460\n485 371 422 187 313 481\n432 404 447 210 262 156\n67 261 137 461 162 480 192 132 150 51\n497 385 320 144 382 193 427 117 52 146",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "327 124 378 93 400 175 410 389 299 391 394 318\n493 191 109 324 380 318 101 368 162 393 445 444\n68 299 312 477 247 92 321 360 344 392 417 439\n385 355 198 375 410 290\n213 120 366 427 491 66\n172 353 405 214 69 350 365 500 305 105\n268 225 420 437 432 482 440 218 114 134",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 999 999 2 1000 999 1 2 999 1 999\n999 1000 2 1000 1000 1000 2 2 1 2 999 999\n1 2 999 1000 1 1 999 999 2 2 1 1\n2 1 999 2 999 1000\n999 1 1000 1000 2 1\n999 1000 1 1 999 1000 999 1000 1 2\n1000 2 2 2 1000 1000 1 999 1000 1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "1 2 1000 1 1 2 1000 1000 999 999 999 1\n2 1 2 1000 1 1000 999 999 1000 999 1000 2\n1 2 999 999 2 1 1 999 1000 1000 1 999\n1 1000 1 999 999 2\n2 1 2 1000 2 1\n2 1000 1000 1000 1 1 999 1000 1000 2\n1000 1000 1 999 2 1 1 1000 2 999",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:45",
  "total_test_cases": 20
}