{
  "problem_code": "problems",
  "title": "Charlie and the Chocolate Factory",
  "tags": [],
  "text": "Charlie works in a magical chocolate factory. Packets of its marzipan are made on conveyor belts. To make marzipan perfect, M conveyor belts are used, and the process is as follows.Each of the M belts has N cells. Charlie first makes a few initial packets and puts them on the cells of the first belt (there may be zero or more packets in a particular cell).Then the first belt generates a second belt such that each cell of the second belt, at the same time, counts the packets in some five cells of the first belt and creates that number of packets in itself.Fox example, the first cell of the second belt sums the packets in the cells 1, 2, 3, 5, 9 of the first belt, the second cell of the second belt sums the packets in the cells 2, 3, 4, 5, 6 of the first belt and so on.Then, from the second belt, a third belt is generated in the same manner, then the fourth from the third and so on until the Mth. Since the number of packets on the belts usually increases, the number of packets in each cell is observed only modulo 10007.You, as the winner of the golden ticket to the factory, are able to see how the Mthbelt looks like - that is, how many packets of marzipan there is in each cell. Charlie has also explained to you the production process and now you are wondering how first belt looked like.InputThe first line of input contains positive integers N (N â‰¤ 100) and M (M < 231).The next N lines describe the process of generating each new belt. In the Athof these lines there are five distinct integers from the interval [1, N], denoting the cells of a previous belt from which the packets are added to the Athcell of a new belt.The next line contains N integers describing the state of the Mthbelt (modulo 10007).OutputPrint N integers describing the state of the first belt (modulo 10007). Auniquesolution will exist in all of the test data.ExampleInput:6 3\r\n1 2 3 4 5\r\n1 2 3 4 6\r\n1 2 3 5 6\r\n1 2 4 5 6\r\n1 3 4 5 6\r\n2 3 4 5 6\r\n13 12 12 12 14 12Output:1 0 0 0 2 0Explanation of the sample case:The process goes like this: (1 0 0 0 2 0) - (3 1 3 3 3 2) - (13 12 12 12 14 12)",
  "sample_input": "Input:6 3\r\n1 2 3 4 5\r\n1 2 3 4 6\r\n1 2 3 5 6\r\n1 2 4 5 6\r\n1 3 4 5 6\r\n2 3 4 5 6\r\n13 12 12 12 14 12Output:1 0 0 0 2 0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CHARLIE",
  "scraped_at": "2025-08-17 00:33:17",
  "test_cases": [
    {
      "input": "6 3\r\n1 2 3 4 5\r\n1 2 3 4 6\r\n1 2 3 5 6\r\n1 2 4 5 6\r\n1 3 4 5 6\r\n2 3 4 5 6\r\n13 12 12 12 14 12",
      "expected_output": "1 0 0 0 2 0",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "2 1\n4 7 5 5 8\n4 10 7 1 9\n6 5 2 3 10\n4 7 10 10 7\n5 4 8 1 4\n8 10 6 10 7\n2 5 4 5 4 8",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "4 2\n8 6 4 6 1\n6 8 3 2 4\n3 3 1 7 8\n10 8 3 4 8\n10 9 3 3 9\n8 6 10 6 6\n5 8 3 2 6 8",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 1\n6 5 4 7 5\n10 5 6 1 7\n9 3 3 3 6\n5 1 8 5 8\n7 6 5 3 9\n9 9 4 7 9\n6 2 6 10 7 1",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "25 52\n91 87 64 16 72\n93 11 80 80 16\n29 27 31 7 12\n20 85 81 21 26\n89 76 50 68 60\n11 90 57 15 75\n34 20 39 72 43 91",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "75 7\n3 25 98 5 37\n25 7 65 21 69\n100 41 71 39 58\n19 51 69 16 38\n63 36 9 76 54\n26 4 38 67 28\n59 58 93 32 5 13",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "59 14\n83 77 86 13 12\n63 44 52 19 34\n5 69 60 23 36\n63 54 6 17 86\n2 11 69 85 63\n99 57 65 67 24\n45 92 40 32 86 98",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "12 93\n28 48 48 40 48\n57 63 62 75 90\n84 54 99 4 92\n48 81 35 13 4\n79 80 75 56 25\n53 48 53 34 27\n66 49 27 78 14 59",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "6 95\n21 11 17 68 29\n20 86 74 64 81\n56 96 77 100 78\n6 71 55 50 62\n67 50 64 80 11\n38 58 3 10 3\n58 50 33 23 20 88",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "20 33\n13 8 40 34 20\n19 34 45 36 46\n37 40 16 27 6\n9 25 29 6 36\n13 25 31 28 30\n8 46 49 15 38\n28 30 18 27 19 26",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "32 5\n5 25 46 38 48\n20 35 31 38 18\n13 50 18 49 9\n26 46 6 22 50\n17 20 8 12 30\n13 33 5 38 16\n24 19 22 43 16 36",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "40 30\n30 23 13 30 8\n19 44 39 9 19\n9 35 29 18 40\n50 8 38 18 43\n38 49 36 30 27\n36 33 29 22 22\n5 43 25 41 38 21",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "5 41\n33 33 13 32 21\n47 20 41 12 44\n38 14 24 40 50\n5 43 21 39 9\n42 14 17 35 46\n42 23 26 15 18\n9 41 33 19 37 24",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "25 39\n6 42 32 20 43\n47 7 30 25 6\n40 34 48 27 23\n11 34 47 11 37\n47 6 11 33 12\n7 47 49 45 23\n10 6 41 28 16 43",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "34 5\n23 36 19 9 10\n49 33 31 33 33\n18 38 18 11 31\n36 48 50 8 19\n20 35 26 19 25\n11 10 24 27 46\n17 36 50 21 8 7",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "8 17\n45 33 19 25 8\n36 32 27 27 29\n26 44 7 19 28\n20 11 21 17 50\n10 20 41 32 20\n17 15 42 30 24\n24 34 7 23 20 25",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100\n100 100 100 100 100 100",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "99 2\n1 2 99 100 99\n99 2 2 99 1\n1 2 99 99 99\n100 2 99 2 1\n99 100 1 2 100\n99 1 2 1 99\n2 99 2 99 2 99",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "100 1\n99 1 2 2 99\n2 2 99 2 1\n2 99 2 100 99\n1 1 100 2 1\n2 2 99 1 1\n100 100 99 1 100\n1 99 99 99 99 99",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:46",
  "total_test_cases": 20
}