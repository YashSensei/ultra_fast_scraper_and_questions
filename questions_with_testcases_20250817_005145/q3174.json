{
  "problem_code": "problems",
  "title": "Cantor",
  "tags": [],
  "text": "The mathematician Georg Cantor was a lover of both sets and infinity, but he didn't get along too well with his colleagues. One morning he woke up with the idea of defining a set so strange that, when made public, would make the rest of the mathematicians lose their sleep for several days. And he was successful.The set he defined is called the Cantor set, and it is formed by all the real numbers in the interval[0, 1]whose decimal expression in base3uses exclusively the digits0and2. This set has amazing properties, which we will not mention here so that you can sleep tonight. Moreover, and luckily for everyone involved, in this problem we will not be working with the Cantor set, but with a generalization of this set to the integer numbers.We will say that an integer number is of Cantor type, or acantigerfor short, if its expression in a given baseBuses solely the digits in a given setCcontained in{0, 1, ... B-1}. Thus, the fact that a given number is a cantiger depends on how we chooseBandC.Your task is to count cantiger numbers, in order to prevent the mathematicians of the entire world from loosing their sleep. More precisely, given two integersDandH, along withBandC, you have to count the number of cantigers with respect toBandCfromDtoHinclusive.InputEach test case is described using a single line. This line contains three integers,D,HandB, and a stringL. The values ofDandHindicate the endpoints of the closed interval[D, H]we are interested in (1 ≤ D≤H≤1016). The value ofBis the base mentioned in the problem statement (2≤B≤10). The stringL = L0L1... LB-1has exactlyBcharacters, and describes the setCalso mentioned in the problem statement. The characterLiis the uppercase letter 'S' ifiis inC, and the uppercase letter 'N' otherwise (i = 0, 1, ... B-1). The setCis non-empty, so that there is at least one 'S' character inL. The end of the input is signalled by a line containing three times the number-1and a single '*' character.OutputFor each test case, you should print a single line containing an integer number, representing the number of cantigers (with respect toBandC) that are greater or equal toDand lower or equal toH.ExampleInput:1 10 3 SNS\r\n99 999 5 NSSNS\r\n1110 1111 10 NSNNNNNNNN\r\n1 10000000000000000 10 NNNNNSNNNN\r\n1 10000000000000000 7 SSSSSSS\r\n-1 -1 -1 *Output:3\r\n144\r\n1\r\n16\r\n10000000000000000",
  "sample_input": "Input:1 10 3 SNS\r\n99 999 5 NSSNS\r\n1110 1111 10 NSNNNNNNNN\r\n1 10000000000000000 10 NNNNNSNNNN\r\n1 10000000000000000 7 SSSSSSS\r\n-1 -1 -1 *Output:3\r\n144\r\n1\r\n16\r\n10000000000000000",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2012C",
  "scraped_at": "2025-08-17 00:34:13",
  "test_cases": [
    {
      "input": "1 10 3 SNS\r\n99 999 5 NSSNS\r\n1110 1111 10 NSNNNNNNNN\r\n1 10000000000000000 10 NNNNNSNNNN\r\n1 10000000000000000 7 SSSSSSS\r\n-1 -1 -1 *",
      "expected_output": "3\r\n144\r\n1\r\n16\r\n10000000000000000",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "9 1 10\n1 2 6 vf\n9 6 7\n8 7 9 ve\n3 4 2\n2 8 9 xozs\n6 9 9\n7 1 5 qfj\n8 1 3\n8 2 2 hvllhss\n4 8 5\nrg zyn dycpd dyqo",
      "expected_output": "0",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "5 8 3\n1 10 4 qo\n1 4 3\n2 3 9 ad\n8 5 2\n2 1 6 p\n8 1 5\n7 1 1 eyhx\n7 4 9\n10 9 3 gckpdje\n10 9 10\ndsyb jhebf gyo ls",
      "expected_output": "0",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "10 9 9\n2 4 7 nyrvh\n2 2 4\n8 10 8 c\n3 2 9\n1 3 5 kffbc\n2 6 9\n1 6 3 qe\n9 2 2\n10 9 7 uptq\n4 6 10\ntj pguks ymgei vnrw",
      "expected_output": "0",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "59 80 28\n63 41 48 kj\n54 56 11\n49 93 92 ewub\n83 51 20\n39 26 94 piumt\n69 52 84\n21 87 88 wjchtpko\n26 78 50\n77 63 43 kurz\n79 42 61\nnq d r nuv",
      "expected_output": "0",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "91 47 88\n82 80 31 stlwp\n15 74 89\n70 76 55 pvhbq\n73 21 88\n91 81 35 epvl\n100 81 36\n16 92 52 vzc\n21 84 20\n47 11 25 hhug\n17 48 77\naej e cxsnw et",
      "expected_output": "0",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "77 97 36\n70 90 61 crr\n94 92 74\n21 45 52 soqx\n98 79 98\n3 90 96 hbatjwzhp\n3 85 91\n56 49 97 vdjogldu\n77 57 62\n82 15 48 hwv\n32 87 20\nfpop o dktdf iu",
      "expected_output": "0",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "53 31 62\n100 11 24 g\n45 44 99\n58 91 93 ebz\n87 53 45\n87 47 24 uewdczzwz\n82 77 93\n89 87 82 e\n71 63 83\n7 17 46 okgzsl\n26 89 67\nwtixk rbh mix vlgr",
      "expected_output": "0",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "14 56 57\n36 59 34 qm\n93 23 29\n20 53 21 k\n40 18 10\n25 76 89 vgtuxbwwa\n63 67 24\n33 44 78 baknfuvsy\n25 71 11\n100 53 87 zyadum\n85 60 33\nuht o pem zdx",
      "expected_output": "0",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "330 260 406\n206 494 305 akgn\n314 381 127\n444 219 191 i\n383 470 146\n332 314 223 k\n233 248 270\n425 469 265 oinpnpfkr\n161 417 450\n484 163 270 eff\n252 66 496\nhycpi bspm uvn vif",
      "expected_output": "0",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "448 97 495\n308 51 196 n\n500 179 366\n61 318 404 ik\n288 300 246\n336 124 195 zgi\n383 198 162\n182 403 315 npidjkwney\n478 411 485\n401 66 396 j\n327 209 78\ngrdsp x etr slq",
      "expected_output": "0",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "418 147 272\n419 264 344 clega\n350 338 135\n460 381 414 hlhhf\n201 204 203\n269 289 385 rvawrgm\n381 448 242\n441 317 490 mxzgr\n371 300 325\n475 192 254 qg\n212 69 355\nzdxg mvzsj kez xeojv",
      "expected_output": "0",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "179 80 408\n141 365 151 i\n67 196 477\n433 326 320 xc\n69 155 199\n493 489 168 pk\n70 115 347\n160 387 341 av\n321 285 123\n274 84 282 cgmkl\n388 297 412\ndxh ls xtkco glqxn",
      "expected_output": "0",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "379 191 113\n423 412 487 ralw\n291 118 388\n397 493 430 doak\n457 483 438\n372 128 404 ltlve\n168 341 228\n424 447 400 ryioht\n391 319 368\n389 420 388 wmexvy\n196 474 280\nnneu mc d zvu",
      "expected_output": "0",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "358 263 458\n201 314 350 jg\n157 359 445\n205 92 421 qcbc\n471 143 315\n325 199 426 tzhw\n159 342 304\n498 51 336 estthlxs\n203 316 63\n93 99 397 zdmz\n385 246 327\nhsglg yogr k ioso",
      "expected_output": "0",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "355 223 283\n500 181 478 uutk\n73 168 351\n487 259 314 tbs\n383 230 466\n64 294 134 p\n347 206 110\n321 72 275 xucnrck\n307 462 101\n399 324 409 zxwub\n230 490 433\nn rplcj iutqc hhgqa",
      "expected_output": "0",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 hhskm\n1000 1000 1000\n1000 1000 1000 wb\n1000 1000 1000\n1000 1000 1000 ls\n1000 1000 1000\n1000 1000 1000 fqvqr\n1000 1000 1000\n1000 1000 1000 upmfii\n1000 1000 1000\nqmyj cmnnf vmy wnd",
      "expected_output": "0",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "1000 1000 1000\n1000 1000 1000 bfn\n1000 1000 1000\n1000 1000 1000 hj\n1000 1000 1000\n1000 1000 1000 blessuxov\n1000 1000 1000\n1000 1000 1000 paur\n1000 1000 1000\n1000 1000 1000 jmoi\n1000 1000 1000\nxke umyv ibt tqj",
      "expected_output": "0",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "1 2 1\n999 999 1000 h\n1000 1000 1\n999 1 2 htzz\n1000 1 2\n999 2 999 mftabwkdy\n1 999 999\n1 2 999 uc\n2 2 1000\n2 2 1 luihfr\n1000 1000 1000\nhwxy i qmkb ihc",
      "expected_output": "0",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "2 1000 1\n1 999 1 ilkf\n2 999 1\n1000 999 1 zrupf\n1 999 1\n999 2 2 qcgwmkq\n999 1000 1000\n1000 999 1 yl\n1000 1000 1000\n1 2 2 hehrf\n1000 1 999\nt icxyd ihd eui",
      "expected_output": "0",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:55",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:59"
}