{
  "problem_code": "problems",
  "title": "Dab of Backpack",
  "tags": [],
  "text": "One day Blue Mary goes to a nearby supermarket to buy some some goods. She has a backpack, whose capacity isV-Max. She finds that there are many goods in the market, each has a volumeVi(it will always be a multiple of 10 and less than 10000) and an importanceCi(1 ≤Ci≤ 5). Since she has almost unlimited money, the only problem she is to solve is how to choose goods such that the total volume won't exceed the capacity of the backpack and the sum of the product of the volume and the importance of each good is maximum. To be an excellent mathematician, she comes up with the answer quickly, and now she wants you to do a harder task. There are two kinds of goods: main goods and attachments. If you want to buy an attachment you must buy its main good before.InputMultiple test cases, the number of them is given in the very first line.For each test case:The first line contains two space-separated integersV-Max(1 ≤V-Max≤ 32000) and the number of the goodsN(1 ≤N≤ 60). N lines follow, each contains three space-separated integersVi,Ciand a integeru. Ifuis not 0, this good is an attachment of goodu(as the order in the input file).To make the problem not too difficult, Blue Mary tells you that:An attachment won't have any attachments which belong to it.A main good will always have fewer than 3 attachments.OutputFor each test case:The first and the only line contains a single integer denoted the answer.ExampleInput:1\r\n1000 5\r\n800 2 0\r\n400 5 1\r\n300 5 1\r\n400 3 0\r\n500 2 0Output:2200",
  "sample_input": "Input:1\r\n1000 5\r\n800 2 0\r\n400 5 1\r\n300 5 1\r\n400 3 0\r\n500 2 0Output:2200",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/BACKPACK",
  "scraped_at": "2025-08-17 00:34:15",
  "test_cases": [
    {
      "input": "1\r\n1000 5\r\n800 2 0\r\n400 5 1\r\n300 5 1\r\n400 3 0\r\n500 2 0",
      "expected_output": "2200",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "1\n10",
      "expected_output": "To be computed",
      "type": "small_case_2",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "3\n1\n7\n7",
      "expected_output": "To be computed",
      "type": "small_case_3",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "1\n5",
      "expected_output": "To be computed",
      "type": "small_case_4",
      "description": "Small array (N ≤ 5)"
    },
    {
      "input": "14\n76979296\n88474372\n30067044\n19485189\n46579244\n14551721\n66535391\n51648293\n86997297\n22994866\n89805881\n16179328\n27188745\n61962471",
      "expected_output": "To be computed",
      "type": "medium_case_5",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "19\n55761910\n68053054\n95605394\n61910140\n45021247\n43035815\n86770047\n9010866\n98450583\n9408629\n16974367\n73772218\n95033337\n46780415\n38535235\n89817731\n17079602\n52107788\n47857077",
      "expected_output": "To be computed",
      "type": "medium_case_6",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "6\n1830368\n91496713\n75176145\n54315930\n2084367\n71550016",
      "expected_output": "To be computed",
      "type": "medium_case_7",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "11\n11243148\n40408112\n62619680\n80326871\n9847489\n90431989\n66109453\n69134569\n93040722\n20091077\n94753781",
      "expected_output": "To be computed",
      "type": "medium_case_8",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "15\n32989335\n58276179\n51004924\n4928552\n15334841\n18398004\n18961313\n39036040\n20717738\n16753680\n5249463\n59963727\n16797894\n96981729\n77269277",
      "expected_output": "To be computed",
      "type": "medium_case_9",
      "description": "Medium array (5 < N ≤ 20)"
    },
    {
      "input": "20\n29899\n88776\n80549\n37470\n34351\n55627\n24614\n13990\n71930\n6323\n46516\n49623\n25403\n11362\n48018\n99625\n7125\n80454\n21488\n44130",
      "expected_output": "To be computed",
      "type": "large_case_10",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "56\n83883\n55247\n89504\n56590\n51783\n56102\n47749\n32652\n51347\n83988\n66523\n95058\n89205\n36801\n10033\n33530\n65389\n69682\n10103\n93719\n51667\n80736\n63838\n16745\n4783\n33222\n54400\n56683\n56331\n72386\n58770\n30171\n49257\n62813\n24489\n5756\n81405\n62630\n85920\n33881\n66586\n87552\n54813\n93474\n43260\n17708\n63171\n39354\n83962\n14078\n3605\n27642\n14610\n88256\n37456\n41059",
      "expected_output": "To be computed",
      "type": "large_case_11",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "24\n69522\n28980\n69385\n39075\n1895\n25786\n74077\n48143\n10752\n80402\n24133\n76765\n55630\n44086\n47056\n19278\n92288\n25813\n6996\n23682\n21905\n36715\n22529\n98593",
      "expected_output": "To be computed",
      "type": "large_case_12",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "28\n61633\n96040\n78707\n32865\n38551\n74429\n23649\n79989\n19451\n45888\n58152\n70430\n23487\n50732\n76584\n1737\n41687\n30029\n55489\n47128\n41651\n4689\n37304\n81998\n85546\n4047\n91945\n59068",
      "expected_output": "To be computed",
      "type": "large_case_13",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "42\n94242\n31127\n18246\n24542\n38848\n59424\n73440\n47346\n75908\n99593\n66013\n34612\n52745\n43608\n51778\n71320\n78708\n81914\n83149\n97338\n68524\n13913\n33449\n38869\n35349\n27780\n75395\n2760\n82027\n18506\n90808\n56153\n88151\n26579\n20718\n48299\n80135\n29921\n66229\n28691\n55332\n19004",
      "expected_output": "To be computed",
      "type": "large_case_14",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "47\n91391\n3678\n5436\n44495\n10950\n94142\n10774\n80490\n27823\n42456\n48865\n73287\n48612\n1286\n90088\n21021\n17703\n78860\n63116\n5005\n42866\n29581\n43696\n9577\n66917\n39404\n94022\n52487\n60603\n48414\n46352\n65935\n85118\n90564\n13763\n89314\n47764\n94896\n3734\n20466\n85036\n97690\n99800\n96129\n21200\n81771\n51618",
      "expected_output": "To be computed",
      "type": "large_case_15",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "25\n46445\n82432\n70556\n90590\n4168\n57987\n87034\n74497\n25838\n59573\n24309\n69317\n77939\n64344\n96644\n41225\n26707\n8133\n93737\n61721\n1389\n91546\n56112\n54025\n92938",
      "expected_output": "To be computed",
      "type": "large_case_16",
      "description": "Large array (20 < N ≤ 500)"
    },
    {
      "input": "60\n43329196\n70079594\n91385902\n54710878\n54176919\n69365837\n41021606\n77120169\n79043711\n12084059\n34391344\n4392333\n96770830\n78986847\n48238147\n53132604\n42914735\n19384168\n11816391\n43658854\n48872646\n4090800\n73343930\n14210260\n61674675\n71553949\n72833899\n21606160\n97228103\n2450280\n2284930\n78340623\n64750434\n22000012\n33752508\n97171292\n72395026\n47757690\n28607726\n96065733\n21968399\n45194954\n24549427\n34531\n20618803\n22232428\n80553302\n60207619\n42108416\n70234039\n30398454\n77218470\n97115658\n8398997\n14742176\n9244731\n74413034\n38211039\n50527255\n94479073",
      "expected_output": "To be computed",
      "type": "max_case_17",
      "description": "Maximum size array (N = 60)"
    },
    {
      "input": "60\n37847349\n86988020\n16757350\n35101868\n35641838\n56935832\n62261889\n64400640\n39161247\n33497340\n71814275\n10820079\n5964456\n50306175\n4724085\n77227829\n91489267\n5922246\n89772870\n80957027\n58320652\n15267430\n61962671\n99716491\n72595117\n30326821\n35855848\n71629083\n78775087\n9239465\n23787500\n21653447\n10270992\n43288655\n36763493\n69185654\n93866575\n3653900\n3655136\n34354295\n96680417\n92752376\n68475\n39050052\n81475118\n2165254\n20925324\n87547390\n77946650\n4845592\n95276229\n54890608\n51678699\n92884791\n46894334\n61548141\n62487240\n75843940\n2258698\n67959557",
      "expected_output": "To be computed",
      "type": "max_case_18",
      "description": "Maximum size array (N = 60)"
    },
    {
      "input": "2\n1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_19",
      "description": "Edge case array (N = 2)"
    },
    {
      "input": "1\n1",
      "expected_output": "To be computed",
      "type": "edge_case_20",
      "description": "Edge case array (N = 1)"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:56",
  "total_test_cases": 20
}