{
  "problem_code": "problems",
  "title": "Relations",
  "tags": [],
  "text": "You are given a directed graph, whose edges are labeled with relational symbols \r\n\t'<', '>' and '='. For a nonnegative integer k, a k-correct \r\n\tG-labeling is a mapping from vertices of G into integers from interval \r\n\t[0,k] such that numbers at the ends of each edge satisfy the relation described \r\n\tby the label of the edge. We assume that an element on the left side of the \r\n\trelational symbol is a number assigned to the initial vertex. Compute the \r\n\tsmallest k for which k-correct G-labeling exists or verify that such \r\n\tlabeling doesn't exist for any k.IllustrationFor the graph in the figure the smallest k = 2.TaskWrite a program that for each data set from a sequence of several data sets:reads a description of a graph G from the input file,verifies whether there exist an integer k for which it is possible to label G \r\n\t\tk-correctly and, if the answer is positive, computes the smallest such k,writes the result to the output file.InputThe first line of the input file contains one positive integer d not larger \r\n\tthan 10. This is the number of data sets. The data sets follow. Each data set \r\n\tis described in two consecutive lines of the input file. In the first line \r\n\tthere are two integers n and m separated by a single space. The number n is the \r\n\tnumber of vertices of G and m is the number of edges of G. Numbers n and m \r\n\tsatisfy the inequalities: 1 <= n <= 1000, 0 <= m <= 10000. The \r\n\tvertices are numbered with integers from 1 to n and are identified by these \r\n\tnumbers. There are no parallel edges and self-loops in the graph. (Two \r\n\tdifferent edges u1-> v1and u2-> v2are parallel iff u1= u2and v1= v2.) \r\n\tThere are 3m integers separated by single spaces in the second line. The \r\n\tnumbers at positions 3i-2 and 3i-1, 1 <= i <= m, are the ends of the i-th \r\n\tedge, the beginning and the end, respectively, whereas the number at position \r\n\t3i is a number from the set {-1,0,1} and it is the label of the i-th edge: -1 \r\n\trepresents '<', 0 represents '=' and 1 represents '>'.OutputFor the i-th data set, 1 <= i <= d, your program should write one \r\n\tword NO in the i-th line of the output file if a k-correct labeling doesn't \r\n\texist for any k, or the smallest integer k for which such a labeling exists.ExampleSample input:\r\n4 \r\n4 4 \r\n1 2 -1 2 3 0 2 4 -1 3 4 -1 \r\n2 2 \r\n1 2 -1 2 1 -1 \r\n2 2 \r\n1 2 -1 2 1 1 \r\n3 3 \r\n1 2 0 3 2 0 3 1 0 \r\n\r\nSample output:\r\n2 \r\nNO \r\n1 \r\n0",
  "sample_input": "Sample input:\r\n4 \r\n4 4 \r\n1 2 -1 2 3 0 2 4 -1 3 4 -1 \r\n2 2 \r\n1 2 -1 2 1 -1 \r\n2 2 \r\n1 2 -1 2 1 1 \r\n3 3 \r\n1 2 0 3 2 0 3 1 0 \r\n\r\nSample output:\r\n2 \r\nNO \r\n1 \r\n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/RELATS1",
  "scraped_at": "2025-08-17 00:33:44",
  "test_cases": [
    {
      "input": "Sample input:\r\n4 \r\n4 4 \r\n1 2 -1 2 3 0 2 4 -1 3 4 -1 \r\n2 2 \r\n1 2 -1 2 1 -1 \r\n2 2 \r\n1 2 -1 2 1 1 \r\n3 3 \r\n1 2 0 3 2 0 3 1 0 \r\n\r\nSample output:\r\n2 \r\nNO \r\n1 \r\n0",
      "expected_output": "Unknown",
      "type": "sample_1",
      "description": "Original sample 1 from problem statement"
    },
    {
      "input": "ihsud mzrv\n6\n7 5\n1 2 6 8 7 10 1 8 5 6 9 5\n8 5\n3 10 3 5 4 6\n1 2\n4 4 6 8 5 3\n8 1\n10 3 8 7 7 4 2 9 2\nkwdi s\n2\nwu\n8\n7",
      "expected_output": "0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n8\n7",
      "type": "small_case_2",
      "description": "Generated small test case"
    },
    {
      "input": "jmgcjp wywwla\n6\n4 5\n7 3 10 1 9 9 5 8 3 1 4 2\n5 3\n6 5 6 2 1 10\n6 4\n8 9 2 6 6 4\n8 6\n4 1 1 10 2 1 2 4 4\nhhiero tn\n5\nb\n8\n6",
      "expected_output": "0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n8\n6",
      "type": "small_case_3",
      "description": "Generated small test case"
    },
    {
      "input": "hzfs fes\n9\n1 1\n5 5 1 1 1 3 8 9 10 7 4 5\n1 1\n6 4 8 6 9 6\n5 3\n3 1 5 4 7 2\n9 1\n6 2 3 3 2 7 6 6 6\nwih hlnuhz\n4\nne\n9\n8",
      "expected_output": "0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n9\n8",
      "type": "small_case_4",
      "description": "Generated small test case"
    },
    {
      "input": "yha uev\n85\n9 63\n15 46 17 73 11 25 19 46 94 52 48 92\n44 100\n72 42 33 48 73 27\n100 72\n89 27 90 5 39 35\n33 16\n60 44 95 15 66 86 34 86 15\ny yghtugo\n82\ne\n52\n89",
      "expected_output": "0\n85\n0\n0\n0\n0\n0\n0\n0\n0\n0\n82\n0\n52\n89",
      "type": "medium_case_5",
      "description": "Generated medium test case"
    },
    {
      "input": "at a\n75\n35 92\n9 68 9 78 71 53 97 96 3 55 27 10\n88 51\n83 18 53 26 49 15\n6 12\n13 12 53 76 21 3\n38 32\n24 18 45 13 16 93 77 95 68\nz onpsafq\n27\nfd\n7\n100",
      "expected_output": "0\n75\n0\n0\n0\n0\n0\n0\n0\n0\n0\n27\n0\n7\n100",
      "type": "medium_case_6",
      "description": "Generated medium test case"
    },
    {
      "input": "o fl\n60\n15 63\n75 12 61 97 83 33 96 27 5 12 96 3\n26 22\n41 78 29 88 38 23\n72 94\n29 92 5 33 42 33\n36 69\n88 13 39 9 34 3 53 74 8\nd hgm\n66\ngbhv\n95\n12",
      "expected_output": "0\n60\n0\n0\n0\n0\n0\n0\n0\n0\n0\n66\n0\n95\n12",
      "type": "medium_case_7",
      "description": "Generated medium test case"
    },
    {
      "input": "vrb x\n27\n14 78\n46 62 86 88 83 57 19 46 82 85 38 35\n82 75\n57 54 79 90 74 84\n84 60\n38 33 68 1 40 70\n17 9\n52 85 96 52 65 17 59 42 27\nkujai ptncdu\n89\nwz\n28\n17",
      "expected_output": "0\n27\n0\n0\n0\n0\n0\n0\n0\n0\n0\n89\n0\n28\n17",
      "type": "medium_case_8",
      "description": "Generated medium test case"
    },
    {
      "input": "beig e\n44\n26 20\n25 94 14 17 59 3 22 27 58 25 18 30\n94 37\n82 65 6 64 48 49\n65 36\n69 86 39 48 78 63\n87 15\n71 39 23 13 77 37 34 6 33\nifveq xwsx\n58\nxim\n51\n62",
      "expected_output": "0\n44\n0\n0\n0\n0\n0\n0\n0\n0\n0\n58\n0\n51\n62",
      "type": "medium_case_9",
      "description": "Generated medium test case"
    },
    {
      "input": "mga b\n225\n313 489\n370 464 307 66 220 487 242 122 308 65 92 299\n276 206\n258 271 358 79 283 208\n335 262\n243 182 485 338 341 81\n142 281\n140 426 420 363 259 325 138 424 137\ngl wh\n220\nsyl\n316\n104",
      "expected_output": "0\n225\n0\n0\n0\n0\n0\n0\n0\n0\n0\n220\n0\n316\n104",
      "type": "large_case_10",
      "description": "Generated large test case"
    },
    {
      "input": "naujnt ccxy\n78\n170 233\n69 328 446 54 190 254 432 162 223 372 227 436\n342 94\n224 476 207 196 360 344\n93 67\n422 151 327 355 181 466\n266 477\n195 417 246 143 172 377 126 342 273\njtmv kvzmpa\n360\nbxed\n340\n208",
      "expected_output": "0\n78\n0\n0\n0\n0\n0\n0\n0\n0\n0\n360\n0\n340\n208",
      "type": "large_case_11",
      "description": "Generated large test case"
    },
    {
      "input": "nbsatk lnh\n56\n129 433\n262 226 402 464 242 275 222 438 454 330 445 317\n408 457\n224 201 462 294 102 363\n266 259\n79 206 461 321 298 288\n271 102\n109 83 443 283 342 90 197 342 56\nxmc qicjhp\n219\nnjti\n191\n220",
      "expected_output": "0\n56\n0\n0\n0\n0\n0\n0\n0\n0\n0\n219\n0\n191\n220",
      "type": "large_case_12",
      "description": "Generated large test case"
    },
    {
      "input": "ntpfbz i\n77\n481 149\n244 186 337 419 376 345 54 128 65 413 199 321\n110 340\n108 305 491 155 436 238\n482 372\n306 376 478 289 188 217\n394 112\n182 351 100 122 315 217 344 389 362\nxazjo ve\n151\nrj\n370\n290",
      "expected_output": "0\n77\n0\n0\n0\n0\n0\n0\n0\n0\n0\n151\n0\n370\n290",
      "type": "large_case_13",
      "description": "Generated large test case"
    },
    {
      "input": "jszji zu\n106\n260 380\n187 393 76 61 182 388 319 131 79 430 305 62\n90 272\n288 181 227 212 125 221\n470 312\n390 465 122 87 496 277\n213 156\n478 181 71 437 194 281 93 68 271\ng osupmlx\n391\ni\n214\n409",
      "expected_output": "0\n106\n0\n0\n0\n0\n0\n0\n0\n0\n0\n391\n0\n214\n409",
      "type": "large_case_14",
      "description": "Generated large test case"
    },
    {
      "input": "lleu b\n185\n311 140\n52 440 98 436 158 77 52 422 341 332 341 55\n432 92\n308 471 78 183 492 118\n342 359\n471 177 219 270 395 375\n378 160\n413 457 169 360 336 491 309 263 174\ni mlgfu\n267\nrka\n419\n336",
      "expected_output": "0\n185\n0\n0\n0\n0\n0\n0\n0\n0\n0\n267\n0\n419\n336",
      "type": "large_case_15",
      "description": "Generated large test case"
    },
    {
      "input": "tdndw rheq\n130\n65 335\n299 63 350 306 99 370 261 236 413 245 245 81\n99 304\n193 399 168 234 386 287\n434 455\n358 361 53 160 414 405\n54 458\n485 341 489 210 426 179 305 477 475\nu rab\n429\noph\n107\n56",
      "expected_output": "0\n130\n0\n0\n0\n0\n0\n0\n0\n0\n0\n429\n0\n107\n56",
      "type": "large_case_16",
      "description": "Generated large test case"
    },
    {
      "input": "mqfpst vghf\n1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\nwghd pygxu\n1000\nveiu\n1000\n1000",
      "expected_output": "0\n1000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n1000\n1000",
      "type": "max_case_17",
      "description": "Generated max test case"
    },
    {
      "input": "utlyhy rdwd\n1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000\n1000 1000\n1000 1000 1000 1000 1000 1000 1000 1000 1000\nz zr\n1000\nsp\n1000\n1000",
      "expected_output": "0\n1000\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n1000\n1000",
      "type": "max_case_18",
      "description": "Generated max test case"
    },
    {
      "input": "q l\n2\n2 999\n2 1000 2 2 1000 2 999 2 999 1000 999 999\n1 999\n2 999 2 1 1000 999\n1 999\n1000 2 999 1 2 999\n2 1000\n1 999 2 999 1000 1 1000 1000 999\nkfazw v\n1000\nu\n1000\n1",
      "expected_output": "0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1000\n0\n1000\n1",
      "type": "edge_case_19",
      "description": "Generated edge test case"
    },
    {
      "input": "viil evywbb\n1\n2 1\n1000 1 2 1000 1000 1000 2 1 1000 1000 1 1\n2 1000\n999 1 2 2 2 1000\n1 1000\n1000 1 1 2 1 1000\n1000 999\n999 999 1000 1000 2 1000 999 2 1000\nbaw tn\n999\nfa\n999\n1000",
      "expected_output": "0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n999\n0\n999\n1000",
      "type": "edge_case_20",
      "description": "Generated edge test case"
    }
  ],
  "test_cases_generated_at": "2025-08-17 00:51:51",
  "total_test_cases": 20,
  "outputs_generated_at": "2025-08-19 20:37:17"
}