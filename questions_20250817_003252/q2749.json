{
  "problem_code": "problems",
  "title": "Bipartite Permutation (Hard)",
  "tags": [],
  "text": "Given a positive integerN, consider any permutation of all the numbers from1toN. It is required to create two partitions,P1andP2, from these numbers such that|sum(P1) – sum(P2)|is minimum, wheresum(X)denotes the summation of all the numbers in partitionX. A partition is defined to be a non-empty subset of the permutation. In other words, find the minimum absolute difference between the summation of all the numbers in each partition. Note that you cannot leave out any number, every number from1toNmust be part of exactly one partition.To add a little bit more of spice, also find the lexicographically smallest partitionP1such that|sum(P1) – sum(P2)|is minimum. To make your life easier, you don’t need to output the entire sequence, only the hash of the sequence as computed by the function below would suffice.def sequence_hash(sequence, B, M):\r\n   result = 0\r\n   for number in sequence:\r\n       result = (result * B + number) % M\r\n\r\n   return resultInputThe first line contains an integerT, denoting the number of test cases. Each of the next subsequentTlines contain three positive integers,N,BandM.Constraints1 ≤ T ≤ 10002 ≤ N ≤ 109N < B ≤ 1091 ≤ M ≤ 109OutputFor each test case, first print the case number followed by the minimum absolute difference and the hash of the lexicographically smallest partitionP1.ExampleInput:12\r\n2 10 1000000000\r\n3 10 1000000000\r\n4 10 1000000000\r\n5 10 1000000000\r\n6 10 1000000000\r\n7 10 1000000000\r\n8 10 1000000000\r\n9 10 1000000000\r\n1000 1000000000 1000000\r\n1000000 1003001 998244353\r\n123456789 987654321 666666667\r\n444444444 666666666 888888888Output:Case 1: 1 1\r\nCase 2: 0 12\r\nCase 3: 0 14\r\nCase 4: 1 124\r\nCase 5: 1 1234\r\nCase 6: 0 1247\r\nCase 7: 0 12348\r\nCase 8: 1 123457\r\nCase 9: 0 1000\r\nCase 10: 0 553178755\r\nCase 11: 1 214459309\r\nCase 12: 0 557434257ChallengeDon't like challenges? Try the easier version here:Bipartite Permutation",
  "sample_input": "def sequence_hash(sequence, B, M):\r\n   result = 0\r\n   for number in sequence:\r\n       result = (result * B + number) % M\r\n\r\n   return result",
  "sample_output": "Input:12\r\n2 10 1000000000\r\n3 10 1000000000\r\n4 10 1000000000\r\n5 10 1000000000\r\n6 10 1000000000\r\n7 10 1000000000\r\n8 10 1000000000\r\n9 10 1000000000\r\n1000 1000000000 1000000\r\n1000000 1003001 998244353\r\n123456789 987654321 666666667\r\n444444444 666666666 888888888Output:Case 1: 1 1\r\nCase 2: 0 12\r\nCase 3: 0 14\r\nCase 4: 1 124\r\nCase 5: 1 1234\r\nCase 6: 0 1247\r\nCase 7: 0 12348\r\nCase 8: 1 123457\r\nCase 9: 0 1000\r\nCase 10: 0 553178755\r\nCase 11: 1 214459309\r\nCase 12: 0 557434257",
  "link": "https://www.spoj.com/problems/BPM2",
  "scraped_at": "2025-08-17 00:34:12"
}