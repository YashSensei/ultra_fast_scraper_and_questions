{
  "problem_code": "problems",
  "title": "Pixel Shuffle",
  "tags": [],
  "text": "Shuffling the pixels in a bitmap image sometimes yields random looking images. However, by repeating the shuffling enough times, one finally recovers the original images. This should be no surprise, since \"shuffling\" means applying a one-to-one mapping (or permutation) over the cells of the image, which come in finite number.Your program should read a number n , and a series of elementary transformations that define a \"shuffling\"of n * n images. Then, your program should compute the minimal number m (m > 0) , such that m applications ofalways yield the original n * n image.For instance ifis counter-clockwise 90orotation then m = 4.InputTest cases are given one after another, and a single 0 denotes the end of the input. For each test case:Input is made of two lines, the first line is number n (2 <= n <= 210, n even). The number n is the size of images, one image is represented internally by a n * n pixel matrix (aji) , where i is the row number and j is the column number. The pixel at the upper left corner is at row 0 and column 0.The second line is a non-empty list of at most 32 words, separated by spaces. Valid words are the keywordsid,rot,sym,bhsym,bvsym,divandmix, or a keyword followed by-. Each keywordkeydesignates an elementary transform (as defined by Figure 1), andkey-designates the inverse of transformkey. For instance,rot-is the inverse of counter-clockwise 90orotation, that is clockwise 90orotation. Finally, the list k1, k2, ..., kpdesignates the compound transform= k1ok2o ... okp. For instance, \"bvsym rot-\" is the transform that first performs clockwise 90o rotation and then vertical symmetry on the lower half of the image.Figure 1: Transformations of image (aji) into image (bji)OutputFor each test case:Your program should output a single line whose contents is the minimal number m (m > 0) such thatis the identity. You may assume that, for all test input, you have m < 231.ExampleInput:256\r\nrot- div rot div\r\n256\r\nbvsym div mix\r\n0Output:8\r\n63457",
  "sample_input": "Input:256\r\nrot- div rot div\r\n256\r\nbvsym div mix\r\n0Output:8\r\n63457",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JPIX",
  "scraped_at": "2025-08-17 00:33:18"
}