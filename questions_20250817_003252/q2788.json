{
  "problem_code": "problems",
  "title": "Periodic function, trip 5",
  "tags": [],
  "text": "Solar cycle predictions are used by various agencies and many industry groups.\r\n The solar cycle is important for determining the lifetime of satellites in low-Earth orbit,\r\n as the drag on the satellites correlates with the solar cycle [...].(NOAA)(Solar Cycle)Sunspot Number Progression : Observed data through May 2008 ; Dec 2012 ; Nov 2014 ; Jun 2016The goal of the problem is to propose a perfect prediction center, with not so weak constraints.Let us consider periodic functions fromZtoR.deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...For example,fis a 3-periodic function, withf(0) =f(3) =f(6) =f(9) = 4. \r\nWith a simplified notation we will denote f as [4, -6, 7].\r\n\r\n\r\n\r\nFor two periodic functions (with integral period), the quotient of periods will be rational, in that case it can be shown that the sum of the functions is also a periodic function. Thus, the set of all such functions is a vector space overR.For that problem, we consider a function that is the sum of several periodic functions all with as period an integerNat maximum. You will be given some starting values, you'll have to find new ones.InputOn the first line, you will be given an integerN.\r\nOn the second line, you will be given integersy: the first (0-indexed)N×Nvalues of a periodic functionfthat is sum of periodic functions all with as period an integerNat maximum.\r\nOn the third line, you will be givenN×Nintegersx.OutputPrintf(x)for all requiredx. See sample for details.ExampleInput:3\r\n15 3 17 2 16 4 15 3 17\r\n10 100 1000 10000 100000 1000000 10000000 100000000 1000000000Output:16 16 16 16 16 16 16 16 16ExplanationFor examplefcan be seen as the sum of three periodic functions : [10] + [5, -8] + [0, 1, 2] (with simplified notations ; periods are 1,2 and 3)\r\nIn that casef(10) = [10][10%1] + [5, -8][10%2] + [0, 1, 2][10%3] = 10 + 5 + 1 = 16, and so on.ConstraintsN < 258\r\nabs(y) < 10^9\r\n0 <= x < 10^9For PERIOD4 you can have AC withO(N⁶) method,  for PERIOD3 the awaited solution is about π⁶/27 faster.For PERIOD5 a new complexity is awaited.InformationsYou can safely assume output fit in a signed 32bit container.\r\nThere's 6 input files, with increasing value ofN.\r\nMy modest C code ended in 1.27s ; no optimization.\r\nSome details (#i,N, TL, t) :\r\n(#0, around 50, 1s, 0s),\r\n(#1, around 50, 1s, 0s),\r\n(#2, around 100, 1s, 0.04s),\r\n(#3, around 150, 3s, 0.14s),\r\n(#4, around 200, 7s, 0.36s),\r\n(#5, around 250, 15s, 0.74s).You may first try the medium editionPERIOD3.Have fun ;-)(Edit 2017-02-11 ; compiler update ; here ×2 speedup) Some updated details (#i,N, TL, t) :\r\n(#0, around 50, 1s, 0s),\r\n(#1, around 50, 1s, 0s),\r\n(#2, around 100, 1s, 0.02s),\r\n(#3, around 150, 3s, 0.07s),\r\n(#4, around 200, 7s, 0.18s),\r\n(#5, around 250, 15s, 0.36s).",
  "sample_input": "deff(x):return[4,-6,7][x%3]# (with Python notations)# 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, 4, -6, 7, ...",
  "sample_output": "Input:3\r\n15 3 17 2 16 4 15 3 17\r\n10 100 1000 10000 100000 1000000 10000000 100000000 1000000000Output:16 16 16 16 16 16 16 16 16",
  "link": "https://www.spoj.com/problems/PERIOD5",
  "scraped_at": "2025-08-17 00:34:11"
}