{
  "problem_code": "problems",
  "title": "String Shuffle",
  "tags": [],
  "text": "Given three strings consisting of just lowercase letters, count the number of ways that the third\r\nstring can be constructed by combining two subsequences from the first two strings.One derives a subsequence of the string by deleting zero or more characters from a string. For\r\nexample, “”, “a”, “b”, “c”, “ab”, “ac”, “bc”, and “abc” are all the subsequence strings of “abc”.\r\n(Note that the empty string, “”, is a subsequence of any string.)The two subsequences are combined to make a third string by shuffling them together. That is,\r\nthe relative order of the letters from the subsequence cannot be changed in the target string; but\r\nthe two subsequences can be interleaved arbitrarily. For example, consider the two subsequences\r\n“abc” and “de”. By combining them, one can get the following strings: “abcde”, “abdce”, “abdec”,\r\n“adbce”, “adbec”, “adebc”, “dabce”, “dabec”, “daebc”, and “deabc”.InputThe first line of the input contains a single integer t that indicates the number of test cases. Each\r\ntest case contains 3 strings, each containing only lowercase characters. The length of each string is\r\nbetween 1 and 60, inclusive.OutputFor each test case, output a line with a single integer that denotes the number of ways that one\r\ncan construct the third string from the first two strings as described above.ExampleInput:3\r\nabc abc abc\r\naa aa aa\r\nabbcd bccde abcdeOutput:8\r\n10\r\n18",
  "sample_input": "Input:3\r\nabc abc abc\r\naa aa aa\r\nabbcd bccde abcdeOutput:8\r\n10\r\n18",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SSHUFFLE",
  "scraped_at": "2025-08-17 00:34:22"
}