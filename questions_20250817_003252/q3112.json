{
  "problem_code": "problems",
  "title": "Ambiguous Permutations",
  "tags": [],
  "text": "Some programming contest problems are really tricky: not only do they\r\nrequire a different output format from what you might have expected, but\r\nalso the sample output does not show the difference. For an example,\r\nlet us look at permutations.Apermutationof the integers1tonis an\r\nordering of these integers. So the natural way to represent a permutation is\r\nto list the integers in this order. Withn = 5, a\r\npermutation might look like 2, 3, 4, 5, 1.However, there is another possibility of representing a permutation:\r\nYou create a list of numbers where thei-th number is the\r\nposition of the integeriin the permutation. \r\nLet us call this second possibility aninverse permutation. The inverse permutation\r\nfor the sequence above is 5, 1, 2, 3, 4.Anambiguous permutationis a permutation which cannot be\r\ndistinguished from its inverse permutation. The permutation 1, 4, 3, 2\r\nfor example is ambiguous, because its inverse permutation is the same.\r\nTo get rid of such annoying sample test cases, you have to write a\r\nprogram which detects if a given permutation is ambiguous or not.Input SpecificationThe input contains several test cases.The first line of each test case contains an integern(1 ≤ n ≤ 100000).\r\nThen a permutation of the integers1tonfollows\r\nin the next line. There is exactly one space character\r\nbetween consecutive integers.You can assume that every integer between1andnappears exactly once in the permutation.The last test case is followed by a zero.Output SpecificationFor each test case output whether the permutation is ambiguous or not.\r\nAdhere to the format shown in the sample output.Sample Input4\r\n1 4 3 2\r\n5\r\n2 3 4 5 1\r\n1\r\n1\r\n0Sample Outputambiguous\r\nnot ambiguous\r\nambiguous",
  "sample_input": "4\r\n1 4 3 2\r\n5\r\n2 3 4 5 1\r\n1\r\n1\r\n0",
  "sample_output": "ambiguous\r\nnot ambiguous\r\nambiguous",
  "link": "https://www.spoj.com/problems/PERMUT2",
  "scraped_at": "2025-08-17 00:34:10"
}