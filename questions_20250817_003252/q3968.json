{
  "problem_code": "problems",
  "title": "ISOMORPH",
  "tags": [],
  "text": "IntroductionDefinition: Anisomorphismfrom a simple graph G to a simple graph H is a bijection f:V(G) → V(H) such that uv belongs to E(G) if and only if f(u)f(v) belongs to E(H) . We say “G isisomorphic toH”, if there is an isomorphism from G to H.Example :The following two graphs are isomorphic.G1G2Our objective in this problem is to find isomorphic graphs.InputInput is read from STDIN. Each test case consists of graphs all with same number of vertices. Your task in this assignment will be to divide the given set of graphs into classes within which graphs are pairwise isomorphic.k v [k is the number of graphs (≤  20) in the test case and v is the number of vertices (≤ 20) in each of these graphs]e1[number of edges in first graph, call this graph ‘1’]u1w1u2w2...ue1we1e2[number of edges in second graph, call this graph ‘2’]u1w1u2w2...ue2we2e3.........ek[number of edges in the last graph, call this graph ‘k’]u1w1u2w2...uekwek[Note: all n graphs themselves are named ‘1’, ‘2’...’n’ in the order in which they appear in the input. Hence the graph withe1edges is called ‘1’ and so on][Note: all graphs are simple & undirected; vertices are labelled with numbers, not alphabets.]OutputAn isomorphic class is simply a list of graphs which belong to it. And Output is written to STDOUT.The output should follow the below format:1. Output is a listing of all isomorphic classes, one on each line, sorted in ascending order by the firstgraph of the class.2. Within an isomorphic class, the members are printed in ascending order.(Thus, the class containing graph ‘1’ is always on line 1.)",
  "sample_input": "Not found",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EE4371",
  "scraped_at": "2025-08-17 00:34:34"
}