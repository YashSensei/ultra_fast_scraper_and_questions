{
  "problem_code": "problems",
  "title": "Servers",
  "tags": [],
  "text": "The Kingdom of Byteland decided to develop a large computer network of servers \r\n\toffering various services.The network is built of n servers connected by bidirectional wires. Two servers \r\n\tcan be directly connected by at most one wire. Each server can be directly \r\n\tconnected to at most 10 other servers and every two servers are connected with \r\n\tsome path in the network. Each wire has a fixed positive data transmission time \r\n\tmeasured in milliseconds. The distance (in milliseconds) D(V, W) between two \r\n\tservers V and W is defined as the length of the shortest (transmission \r\n\ttime-wise) path connecting V and W in the network. For convenience we let D(V, \r\n\tV) = 0 for all V.Some servers offer more services than others. Therefore each server V is marked \r\n\twith a natural number r(V), called a rank. The bigger the rank the more \r\n\tpowerful a server is.At each server, data about nearby servers should be stored. However, not all \r\n\tservers are interesting. The data about distant servers with low ranks do not \r\n\thave to be stored. More specifically, a server W is interesting for a server V \r\n\tif for every server U such that D(V, U) ≤ D(V, W) we have r(U) ≤ r(W).For example, all servers of the maximal rank are interesting to all servers. If \r\n\ta server V has the maximal rank, then exactly the servers of the maximal rank \r\n\tare interesting for V . Let B(V) denote the set of servers interesting for a \r\n\tserver V.We want to compute the total amount of data about servers that need to be \r\n\tstored in the network being the total sum of sizes of all sets B(V). The \r\n\tKingdom of Byteland wanted the data to be quite small so it built the network \r\n\tin such a way that this sum does not exceed 30*n.TaskWrite a program that:reads the description of a server network from the standard input,computes the total amount of data about servers that need to be stored in the \r\n\t\tnetwork,writes the result to the standard output.InputThe input begins with the integer z, the number of test cases. Then z test \r\n\tcases follow.For each test case, in the first line there are two natural numbers n, m, where \r\n\tn is the number of servers in the network (1 ≤ n ≤ 30000) and m is the \r\n\tnumber of wires (1 ≤ m ≤ 5n). The numbers are separated by single \r\n\tspace.In the next n lines the ranks of the servers are given. Line i contains one \r\n\tinteger ri(1 ≤ ri≤ 10) - the rank of i-th server.In the following m lines the wires are described. Each wire is described by \r\n\tthree numbers a, b, t (1 ≤ t ≤ 1000, 1 ≤ a, b ≤ n, \r\n\ta ≠ b), where a and b are numbers of the servers connected by the \r\n\twire and t is the transmission time of the wire in milliseconds.OutputFor each test case the output consists of a single integer equal to the total \r\n\tamount of data about servers that need to be stored in the network.ExampleInput:1\r\n4 3\r\n2\r\n3\r\n1\r\n1\r\n1 4 30\r\n2 3 20\r\n3 4 20Output:9(because B(1) = {1, 2}, B(2) = {2}, B(3) = {2, 3}, B(4) = {1, 2, 3, 4})Warning: large Input/Output data, be careful with certain languages",
  "sample_input": "Input:1\r\n4 3\r\n2\r\n3\r\n1\r\n1\r\n1 4 30\r\n2 3 20\r\n3 4 20Output:9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SERVERS",
  "scraped_at": "2025-08-17 00:33:09"
}