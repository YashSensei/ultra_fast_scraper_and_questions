{
  "problem_code": "problems",
  "title": "Jill Rides Again",
  "tags": [],
  "text": "Jill likes to ride her bicycle, but since the pretty city of Greenhills\r\nwhere she lives has grown, Jill often uses the\r\nexcellent public bus system for part of her journey. She has a folding\r\nbicycle\r\nwhich she carries with her when she\r\nuses the bus for the first part of her trip. When the bus reaches some\r\npleasant part of the city, Jill gets off and rides\r\nher bicycle. She follows the bus route until she reaches her\r\ndestination or\r\nshe comes to a part of the city she does\r\nnot like. In the latter event she will board the bus to finish her\r\ntrip.Through years of experience, Jill has rated each road on an integer\r\nscale\r\nof niceness. Positive niceness values\r\nindicate roads Jill likes; negative values are used for roads she does\r\nnot\r\nlike. There are not zero values. Jill plans where to leave the bus and\r\nstart bicycling, as well as where to stop bicycling and re-join the\r\nbus,\r\nso that the sum of niceness values of the roads\r\nshe bicycles on is maximized. This means that she will sometimes cycle\r\nalong\r\na road she does not like, provided\r\nthat it joins up two other parts of her journey involving roads she\r\nlikes\r\nenough to compensate. It may be that no\r\npart of the route is suitable for cycling so that Jill takes the bus\r\nfor its\r\nentire route. Conversely, it may be that the\r\nwhole route is so nice Jill will not use the bus at all.Since there are many different bus routes, each with several stops at\r\nwhich\r\nJill could leave or enter the bus, she feels\r\nthat a computer program could help her identify the best part to cycle\r\nfor\r\neach bus route.InputThe input file contains information on several bus routes. The first\r\nline of\r\nthe file is a single integerbrepresenting\r\nthe number of route descriptions in the file. The identifier for each\r\nroute (r) is the sequence number within the data\r\nfile, 1 ≤ r ≤ b.\r\nEach route description begins with the number of stops on\r\nthe route: an integers, 2 ≤ s ≤ 100000 on\r\na line by itself. The number of stops is followed bys- 1\r\nlines, each\r\nlinei(1 ≤ i < s)\r\nis an integerniwith absolute value ≤ 1000\r\nrepresenting\r\nJill's assessment of the niceness of the road between the two stopsiandi+1.OutputFor each route in the input file, your program should\r\nidentify the beginning\r\nbus stopiand the ending bus stopjthat identify the segment of the route which yields the maximal sum of\r\nniceness, m= ni+ni+1+...+nj-1.\r\nIf more\r\nthan one segment is maximally nice, choose the one with the longest\r\ncycle\r\nride (largestj-i). To break ties in longest\r\nmaximal segments, choose the segment that begins with the earliest stop\r\n(lowesti). For each routerin the input\r\nfile, print a line in the form:The nicest part of routeris between stopsiandjHowever, if the maximal sum is not positive, your program should print:Routerhas no nice partsExampleInput:3\r\n3\r\n-1\r\n6\r\n10\r\n4\r\n-5\r\n4\r\n-3\r\n4\r\n4\r\n-4\r\n4\r\n-5\r\n4\r\n-2\r\n-3\r\n-4Output:The nicest part of route 1 is between stops 2 and 3\r\nThe nicest part of route 2 is between stops 3 and 9\r\nRoute 3 has no nice parts",
  "sample_input": "Input:3\r\n3\r\n-1\r\n6\r\n10\r\n4\r\n-5\r\n4\r\n-3\r\n4\r\n4\r\n-4\r\n4\r\n-5\r\n4\r\n-2\r\n-3\r\n-4Output:The nicest part of route 1 is between stops 2 and 3\r\nThe nicest part of route 2 is between stops 3 and 9\r\nRoute 3 has no nice parts",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/JRIDE",
  "scraped_at": "2025-08-17 00:34:08"
}