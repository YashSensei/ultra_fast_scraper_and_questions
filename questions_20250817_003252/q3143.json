{
  "problem_code": "problems",
  "title": "Variable Radix Huffman Encoding",
  "tags": [],
  "text": "Huffman encoding is a method of developing an optimal encoding of the symbols\r\nin asource alphabetusing symbols from atarget alphabetwhen the frequencies\r\nof each of the symbols in the source alphabet are known. Optimal means the\r\naverage length of an encoded message will be minimized. In this problem you\r\nare to determine an encoding of the firstNuppercase letters (the source\r\nalphabet,S1throughSN, with frequenciesf1throughfN) into the\r\nfirstRdecimal digits (the target alphabet,T1throughTR).Consider determining the encoding whenR= 2. Encoding proceeds in several\r\npasses. In each pass the two source symbols with the lowest frequencies, sayS1andS2, are grouped to form a new \"combination letter\" whose frequency is\r\nthe sum off1andf2. If there is a tie for the lowest or second lowest\r\nfrequency, the letter occurring earlier in the alphabet is selected. After\r\nsome number of passes only two letters remain to be combined. The letters\r\ncombined in each pass are assigned one of the symbols from the target\r\nalphabet.The letter with the lower frequency is assigned the code 0, and the\r\nother letter is assigned the code 1. (If each letter in a combined group has\r\nthe same frequency, then 0 is assigned to the one earliest in the alphabet.\r\nFor the purpose of comparisons, the value of a \"combination letter\" is the\r\nvalue of the earliest letter in the combination.) The final code sequence for\r\na source symbol is formed by concatenating the target alphabet symbols\r\nassigned as each combination letter using the source symbol is formed.The target symbols are concatenated in the reverse order that they are assigned so\r\nthat the first symbol in the final code sequence is the last target symbol\r\nassigned to a combination letter.The two illustrations below demonstrate the process forR= 2.SymbolFrequencyA5B7C8D15Pass 1: A and B groupedPass 2: {A, B} and C groupedPass 3: {A, B, C} and D groupedResulting codes: A=110, B=111, C=10, D=0Average length = (3*5 + 3*7 + 2*8 + 1*15) / 35 = 1.91SymbolFrequencyA7B7C7D7Pass 1: A and B groupedPass 2: C and D groupedPass 3: {A, B} and {C, D} groupedResulting codes: A=00, B=01, C=10, D=11Average length = (2*7 + 2*7 + 2*7 + 2*7) / 28 = 2.00WhenRis larger than 2,Rsymbols are grouped in each pass. Since each pass\r\neffectively replacesRletters or combination letters by 1 combination letter,\r\nand the last pass must combineRletters or combination letters, the source\r\nalphabet must containk*(R-1)+Rletters, for some integerk.SinceNmay not be this large, an appropriate number of fictitious letters with zero\r\nfrequencies must be included. These fictitious letters are not to be included\r\nin the output. In making comparisons, the fictitious letters are later than\r\nany of the letters in the alphabet.Now the basic process of determining the Huffman encoding is the same as for\r\ntheR= 2 case. In each pass, theRletters with the lowest frequencies are\r\ngrouped, forming a new combination letter with a frequency equal to the sum of\r\nthe letters included in the group. The letters that were grouped are assigned\r\nthe target alphabet symbols 0 throughR-1. 0 is assigned to the letter in the\r\ncombination with the lowest frequency, 1 to the next lowest frequency, and so\r\nforth. If several of the letters in the group have the same frequency, the one\r\nearliest in the alphabet is assigned the smaller target symbol, and so forth.The illustration below demonstrates the process forR= 3.SymbolFrequencyA5B7C8D15Pass 1: ? (ficticious symbol), A and B are groupedPass 2: {?, A, B}, C and D are groupedResulting codes: A=11, B=12, C=0, D=2Average length = (2*5 + 2*7 + 1*8 + 1*15) / 35 = 1.34InputThe input will contain one or more data sets, one per line. Each data set\r\nconsists of an integer value forR(between 2 and 10), an integer value forN(between 2 and 26), and the integer frequenciesf1throughfN, each of which\r\nis between 1 and 999.The end of data for the entire input is the number 0 forR; it is not considered to be a separate data set.OutputFor each data set, display its number (numbering is sequential starting with\r\n1) and the average target symbol length (rounded to two decimal places) on one\r\nline. Then display theNletters of the source alphabet and the corresponding\r\nHuffman codes, one letter and code per line.Print a blank line after each test case.The examples below illustrate the required output format.ExampleInput:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_input": "Input:2 5 5 10 20 25 40\r\n2 5 4 2 2 1 1\r\n3 7 20 5 8 5 12 6 9\r\n4 6 10 23 18 25 9 12\r\n0Output:Set 1; average length 2.10\r\n    A: 1100\r\n    B: 1101\r\n    C: 111\r\n    D: 10\r\n    E: 0\r\n\r\nSet 2; average length 2.20\r\n    A: 11\r\n    B: 00\r\n    C: 01\r\n    D: 100\r\n    E: 101\r\n\r\nSet 3; average length 1.69\r\n    A: 1\r\n    B: 00\r\n    C: 20\r\n    D: 01\r\n    E: 22\r\n    F: 02\r\n    G: 21\r\n\r\nSet 4; average length 1.32\r\n    A: 32\r\n    B: 1\r\n    C: 0\r\n    D: 2\r\n    E: 31\r\n    F: 33",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/VHUFFM",
  "scraped_at": "2025-08-17 00:34:11"
}