{
  "problem_code": "problems",
  "title": "Faketorial Hashing",
  "tags": [],
  "text": "Are you familiar with polynomial hashing? If you are not, all the better! You don’t need to know what polynomial hashing is, the world is better off without it. I hate polynomial hashing so much that I found a new way to hash strings. It is called theFaketorial Hashing.First, let’s define a function,ord(ch)= the position ofchin the alphabet + 1, wherechcan be any lowercase letter. So,ord(a) = 2,  ord(b) = 3,  ord(c) = 4, …  ord(z) = 27.Letfact(x)bex!or the factorial of x. A few examples,fact(1) = 1, fact(2) = 2, fact(3) = 6, fact(4) = 24, fact(5) = 120, etc.\r\nGiven a stringSof lengthN, consisting of lowercase letters only, theFaketorial Hashingof S, is defined as below:fake_hash(S) = fact(ord(S[0])) × fact(ord(S[1])) × fact(ord(S[2])) × …… × fact(ord(S[N - 1]))In other words, it is the product of the factorial of theord()value of all the characters inS(That’s right, no modulus! Unlike the lame polynomial hashing).\r\nNot only that we have a new hashing mechanism in place, but we would also like to crack this now. Given a stringS1consisting of lowercase letters only, your task is to find a different stringS2consisting of lowercase letters, such that,fake_hash(S1) = fake_hash(S2)andS1≠ S2.If there are multiple possible choices forS2, you need to find thelexicographically smallestone, or output the word“Impossible”without quotes, if it is not possible to find such a string.InputThe first line contains an integerT, denoting the number of test cases.  Each test case contains the stringS1consisting of lowercase letters (a-z) only.Constraints1 ≤ T ≤ 30001 ≤|S1|≤ 30Except for the sample, the following constraints will hold:1 ≤ |S1| ≤ 5, for 90% of the test cases1 ≤ |S1| ≤ 15, for 99% of the test casesOutputFor each test case, output the case number followed by the required output. Please refer to the sample input/output section for the precise format.ExampleInput:10\r\ntourist\r\npetr\r\nmnbvmar\r\nbmerry\r\nxellos\r\nsevenkplus\r\ndragoon\r\nzzz\r\nsnapdragon\r\nzosovoghisktwnopqrstuvwxyzoosOutput:Case 1: aaaaabbdnstttu\r\nCase 2: aqst\r\nCase 3: abmmnrv\r\nCase 4: aaabbnrry\r\nCase 5: aaaaaaadddlnuz\r\nCase 6: aaaaaaabbddddnquuuz\r\nCase 7: aaaaaaaaaaaaabdnnnt\r\nCase 8: Impossible\r\nCase 9: aaaaaaaaaabdnnnpst\r\nCase 10: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaffffjnnnnqqttttuuuuxxzzzzzz",
  "sample_input": "Input:10\r\ntourist\r\npetr\r\nmnbvmar\r\nbmerry\r\nxellos\r\nsevenkplus\r\ndragoon\r\nzzz\r\nsnapdragon\r\nzosovoghisktwnopqrstuvwxyzoosOutput:Case 1: aaaaabbdnstttu\r\nCase 2: aqst\r\nCase 3: abmmnrv\r\nCase 4: aaabbnrry\r\nCase 5: aaaaaaadddlnuz\r\nCase 6: aaaaaaabbddddnquuuz\r\nCase 7: aaaaaaaaaaaaabdnnnt\r\nCase 8: Impossible\r\nCase 9: aaaaaaaaaabdnnnpst\r\nCase 10: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaffffjnnnnqqttttuuuuxxzzzzzz",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FAKEHASH",
  "scraped_at": "2025-08-17 00:34:07"
}