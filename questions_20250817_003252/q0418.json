{
  "problem_code": "problems",
  "title": "A Summatory (Extreme)",
  "tags": [],
  "text": "f(n) is defined as: f(n) = 1k+2k+3k+...+nk, so it is the sum of the k-th power of all natural numbers up to n.In this problem you are about to compute,f(1) + f(2) + f(3) + ... + f(n)Note: This is a harder version of the problemASUMHARD, with larger constraints. Please read the constraints section carefully.InputThe first line is an integerT, denoting the number of test cases. Then,Ttest cases follow.For each test case, there are two integersnandkwritten in one line, separated by space.OutputFor each test case, output the result of the summatory function described above.Since this number could be very large, output the answer modulo1,234,567,891.ExampleInput:5\r\n2 3\r\n10 3\r\n3 3\r\n100 0\r\n100 1Output:10\r\n7942\r\n46\r\n5050\r\n171700ExplanationIn case 1,n= 2,k= 3. f(1) = 13, f(2) = 13+23.ans= f(1) + f(2) = 10.ConstraintsOverall constraints5 ≤T≤ 5000001 ≤n≤ 10180 ≤k≤ 10000000More precise information (there are 6 test files):Test #0:T= 500000, 0 ≤k≤ 100Test #1:T= 50000, 0 ≤k≤ 1000Test #2:T= 5000, 0 ≤k≤ 10000Test #3:T= 500, 0 ≤k≤ 100000Test #4:T= 50, 0 ≤k≤ 1000000Test #5:T= 5, 0 ≤k≤ 10000000It should be clear from the constraints that anO(k2)solutionwillnot pass. Inputs are generated uniformly randomly in the given ranges (with some manual worst case inputs). Time limit is set to 2x of my unoptimized C++ code.",
  "sample_input": "Input:5\r\n2 3\r\n10 3\r\n3 3\r\n100 0\r\n100 1Output:10\r\n7942\r\n46\r\n5050\r\n171700",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/ASUMEXTR",
  "scraped_at": "2025-08-17 00:33:20"
}