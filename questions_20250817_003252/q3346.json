{
  "problem_code": "problems",
  "title": "Roman Patrollers",
  "tags": [],
  "text": "In ancient times, patrollers were used to ensure that all the cities of the Roman Empire were\r\nunder control. A patroller’s job consisted in continuously visiting the cities of the empire, trying\r\nto minimise the interval between two visits to each city. The Military Society (MS) wants to\r\nsimulate the behavior of one such patroller to see how effective they were.Each cycle of the simulation corresponds to one time unit. The instantaneous city idleness\r\n(ICI) for a city X after T cycles of the simulation is the number of cycles elapsed since the\r\nlast visit of the patroller to the city X (i.e. the number of time units the city X remained\r\nunvisited). All of the cities have initial instantaneous city idleness equal to zero at the start of\r\nthe simulation. The instantaneous empire idleness (IEI) after each given cycle is the sum of\r\nthe instantaneous city idleness of all cities after that given cycle. Finally, the empire idleness\r\n(EI) for an N-cycle simulation is the sum of the instantaneous empire idleness after each of\r\nthe N cycles of simulation.After visiting a city X, the patroller always chooses to visit the neighbour city Y with the\r\nhighest instantaneous city idleness (if more than one city has the highest idleness, the one with\r\nthe lowest identifier is chosen). Cities X and Y are neighbour if there is a road linking the two\r\ncities directly, without going through any intermediate city. In the beginning of the simulation,\r\nthe patroller is located in one of the cities, and is given a map of the Roman Empire containing\r\na description of all the roads in the empire, indicating the length (in kilometers) and which two\r\ncities each road connects. A road between cities X and Y can be used both to go from X to Y\r\nand from Y to X.Assuming that a patroller travels one kilometer in one time unit (one simulation cycle) and\r\nthat the time to visit a city is negligible (equal to zero), MS asks you to determine the empire\r\nidleness after an N-cycle simulation.For clarity, consider the example of an empire which contains 3 cities (1, 2 and 3) and two roads\r\nof length 1 km. The first road connects cities 1 and 2, while the second road connects cities 2\r\nand 3. Below you find a trace of a 3-cycle simulation for such a scenario, considering that the\r\npatroller starts at city 1.Start of the simulationPatroller at: 1ICI1 = 0, ICI2 = 0, ICI3 = 0IEI = 0EI = 0After cycle 1Patroller at: 2ICI1 = 1, ICI2 = 0, ICI3 = 1IEI = 2EI = 2After cycle 2Patroller at: 1ICI1 = 0, ICI2 = 1, ICI3 = 2IEI = 3EI = 5After cycle 3\r\nPatroller at: 2ICI1 = 1, ICI2 = 0, ICI3 = 3IEI = 4EI = 9Therefore, for such a scenario, after 3 simulation cycles the empire idleness is 9.InputThe input consists of several test cases. The first line of a test case contains four integers\r\nC,R,N, and S, indicating respectively the quantity of cities in the empire (2 · C · 1000), the\r\nnumber of roads (1 · R · C(C − 1)/2), the number of cycles to be simulated (1 · N · 1000)\r\nand the identifier of the starting city of the patroller (1 · S · C). Each city is identified\r\nby a distinct integer from 1 to C. Each of the following R lines contains three integers X, Y\r\nand D describing a road; X and Y represent cities (1 · X 6= Y · C) and D represents the\r\ndistance (1 · D · 1000), in kilometers, of the road that connects X and Y directly, without\r\npassing through any other city. Each pair of cities X and Y will appear at most once in a road\r\ndescription. You can assume that it is always possible to travel from any city to any other city\r\nin the empire using the roads available. The end of input is indicated by C = R = N = S = 0.OutputFor each test case in the input, your program must produce one line containing the empire\r\nidleness after the N-cycle simulation.ExampleInput:2 1 1 1\r\n1 2 2\r\n2 1 2 1\r\n1 2 2\r\n2 1 3 1\r\n1 2 2\r\n2 1 4 1\r\n1 2 2\r\n3 2 3 1\r\n1 2 1\r\n2 3 1\r\n0 0 0 0Output:2\r\n4\r\n8\r\n10\r\n9",
  "sample_input": "Input:2 1 1 1\r\n1 2 2\r\n2 1 2 1\r\n1 2 2\r\n2 1 3 1\r\n1 2 2\r\n2 1 4 1\r\n1 2 2\r\n3 2 3 1\r\n1 2 1\r\n2 3 1\r\n0 0 0 0Output:2\r\n4\r\n8\r\n10\r\n9",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SA04C",
  "scraped_at": "2025-08-17 00:34:23"
}