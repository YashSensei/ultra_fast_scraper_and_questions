{
  "problem_code": "problems",
  "title": "New Year Train",
  "tags": [],
  "text": "On the New Year Eve, a government of one country decided to send a train with gifts to each of its towns. For each\r\nof the N towns exactly one wagon with gifts was sent. The route was organized in such way\r\nthat at each place the last wagon would be detached and train would continue on its way, until all gifts were delivered.\r\nJust before the departure it turned out that the loading workers did not pay attention to numeration of\r\nthe wagons and loaded the gifts in random order. It was impossible to detach a wagon\r\nfrom the middle of the train and there was no time to rearrange gifts.\r\nLuckily, there was a depot with parallel tracks. At the entrance of the depot each wagon could be directed\r\nto any of the tracks and wagons could leave the depot from the other side in the right sequences 1, 2, 3,\r\n4, and so on. Note that we will then be leaving presents in towns in the reversed order (..., 4, 3, 2, 1).For example, let's say we have a train with wagons in the following order: 2, 5, 1, 4, 6, 3. Wagons 2, 5, 6 could be directed to the first track; wagons 1, 4 to the second\r\none and wagon 3 to the third. In this case wagons could leave the depot\r\nin the right order.\r\nFortunately, there were enough tracks in the depot to rearrange the train.InputFirst line of the input contains two integers N and M: the number of wagons in the train and the\r\n\r\nnumber of tracks in the depot respectively (1 ≤ N ≤ 800 000, 1 ≤ M ≤ 100 000, M ≤ N). Second\r\nline contains N integers: sequence of wagons before the entrance to the depot.\r\nIt's guaranteed that solution always exists.OutputFirst line of the output must contain N integers: number of track that should be chosen for each wagon from\r\n\r\ninput sequence (tracts are numbered from 1 to M). On the second line print the number of tracks in order the wagons should leave\r\nthe depot to result in the sequence 1, 2, 3, and so on. If multiple solutions exists, print the one that results in lexicographically smallest sequence in the first line of the output.ExampleInput6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_input": "Input6 3\r\n2 5 1 4 6 3Output1 1 2 2 1 3\r\n2 1 3 2 1 1",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IZHONYT",
  "scraped_at": "2025-08-17 00:34:16"
}