{
  "problem_code": "problems",
  "title": "Anti Hash II",
  "tags": [],
  "text": "Given a baseBand a moduloM, the polynomial hash of a stringSconsisting of only lowercase letters is defined as below.LetS = S0S1…SN-1be a string of lengthNcontaining only the lowercase letters (a-z).Hash(S) = ∑ BN-i-1× D(Si) % MD(S)= Lexicographical position of characterSamong the lettersa-z, indexed from0.D(a) = 0, D(b) = 1 ... D(z) = 25.In other words, first the letters of the string are replaced by numbers (equivalent to their position). This is then considered to be a number in baseB, and the value of this number inbase 10moduloMis called the polynomial hash of the string.Calculating the hash of a string using the above method seems easy enough. What about the opposite? You are given a baseB, a moduloM, a positive integer N, and a hash valueH. Calculate how many strings are there such that their hash is equal toH, consisting of only lowercase letters and their length not exceedingN. Since the answer can be rather huge, output it modulo109+ 7 (1000000007).InputThe first line contains an integerT, denoting the number of test cases. Each test case starts with four integersB, M, N,  Q. The numbersB, M, Ndenotes the base, modulus and the maximum length of any string as stated above. The numberQindicates the number of queries. Each of the nextQlines contain a single integer, denotingH, the required hash value.Constraints1 ≤ T ≤ 15026 ≤ B ≤ 300001 ≤ M, N ≤ 300001 ≤ Q ≤ 3000 ≤ H < MFor 95% of the test cases, B, M, N ≤ 300OutputFor each case, first output a line of the formatCase X:, whereXis the case number, starting from1. And then, for each query, output the number of different strings with the given hash value modulo109+ 7 (1000000007)in a single line.Print a blank line after every test case.ExampleInput:3\r\n26 97 2 3\r\n0\r\n1\r\n96\r\n147 147 147 3\r\n0\r\n10\r\n100\r\n100 110 120 1\r\n35Output:Case 1:\r\n8\r\n8\r\n6\r\n\r\nCase 2:\r\n944164777\r\n944164777\r\n0\r\n\r\nCase 3:\r\n110169522ChallengeYou might also enjoy:Anti HashorThe Revenge Of Anti Hash.",
  "sample_input": "Input:3\r\n26 97 2 3\r\n0\r\n1\r\n96\r\n147 147 147 3\r\n0\r\n10\r\n100\r\n100 110 120 1\r\n35Output:Case 1:\r\n8\r\n8\r\n6\r\n\r\nCase 2:\r\n944164777\r\n944164777\r\n0\r\n\r\nCase 3:\r\n110169522",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/AHASH2",
  "scraped_at": "2025-08-17 00:33:10"
}