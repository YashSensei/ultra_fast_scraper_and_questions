{
  "problem_code": "problems",
  "title": "Bullshit Bingo",
  "tags": [],
  "text": "Bullshit Bingo is a game to make lectures, seminars or meetings less\r\nboring.\r\nEvery player has a card with 5 rows and 5 columns. Each of the 25 cells\r\ncontains\r\na word (the cell in the middle has always the word \"BINGO\"\r\nwritten in it).\r\nWhenever a player hears a word which is written on his card, he can\r\nmark it. The cell in the middle is already marked when the game starts. If a player\r\nhas marked all the words in a row, a column or a diagonal,\r\nhe stands up and shouts \"BULLSHIT\". After this, the game starts over\r\nagain.Sitting in a lecture, you observe that some students in the audience\r\nare\r\nplaying Bullshit Bingo.\r\nYou wonder what the average number of different words is until\r\n\"BULLSHIT\" is exclaimed. For the purpose of this problem, a word\r\nconsists of letters of the English alphabet ('a' to 'z' or 'A' to 'Z').\r\nWords are separated by characters other than letters (for example\r\nspaces,\r\ndigits or punctuation).\r\nDo the comparison of words case-insensitively, i.e. \"Bingo\" is the\r\nsame word\r\nas \"bingo\". When counting the number of different words, ignore the word\r\nBULLSHIT (indicating the end of the game), and consider only\r\nthe words of the current game, i.e., if a word has already occurred in a previous\r\ngame, you may still count it in the current game.\r\nIf the last game is unfinished, ignore the words of that game.Input SpecificationThe input file consists of the text of the lecture, with \"BULLSHIT\"\r\noccurring occasionally. The first game starts with the first word in the input.\r\nEach occurrence of \"BULLSHIT\" indicates the end of one game.You may assume, thatthe word \"BULLSHIT\" occurs only in uppercase lettersevery word has at most 25 characters, and each line has at most 100\r\ncharactersthere are at most 500 different words before a game endsthe players follow the rules, so there is no need to check if a game is valid or notat least one game is completedOutput SpecificationThe output consists of one number: the average number of different\r\nwords needed to win a game.\r\nWrite the number as a reduced fraction in the format shown below. Reduced fraction means that\r\nthere should be no integer greater than 1 which\r\ndivides both the numerator and denominator.\r\nFor example if there were 10 games,\r\nand the number of different words in each game summed up to 55,\r\nprint \"11 / 2\".Sample InputProgramming languages can be classified BULLSHIT into following types:\r\n- imperative and BULLSHIT procedural languages\r\n- functional languages\r\n- logical BULLSHIT programming languages\r\n- object-oriented BULLSHIT languagesSample Output9 / 2In the sample input, there are 4 completed games.\r\nThe number of different words is 5, 5, 4 and 4, respectively.",
  "sample_input": "Programming languages can be classified BULLSHIT into following types:\r\n- imperative and BULLSHIT procedural languages\r\n- functional languages\r\n- logical BULLSHIT programming languages\r\n- object-oriented BULLSHIT languages",
  "sample_output": "9 / 2",
  "link": "https://www.spoj.com/problems/BINGO",
  "scraped_at": "2025-08-17 00:34:11"
}