{
  "problem_code": "problems",
  "title": "Double Queue",
  "tags": [],
  "text": "EnglishVietnameseThe new founded Balkan Investment Group Bank (BIG-Bank) opened a new \noffice in Bucharest, equipped with a modern computing environment \nprovided by IBM Romania, and using modern information technologies.As usual, each client of the bank is identified by a positive \ninteger K and, upon arriving to the bank for some services, \nhe or she receives a positive integer priority  P. One of the inventions \nof the young managers of the bank shocked the software \nengineer of \nthe serving system. They proposed to break the tradition by sometimes \ncalling the serving desk with the lowest priority instead of that with\n the highest priority. Thus, the system will receive the following types \nof request:0  The system needs to stop serving1  K P Add client K to the waiting list with priority P2  Serve the client with the highest priority and drop him or her \nfrom the waiting list3  Serve the client with the lowest priority and drop him or her from \nthe waiting list.Your task is to help the software engineer of the bank by writing a \nprogram to implement the requested serving policy.InputEach line of the input contains one of the possible requests; only \nthe last line contains the stop-request (code 0). You may assume that \nwhen there is a request to include a new client in \nthe list \n(code 1), there is no other request in the list of the same client \nor with the same priority.An identifier K is always less than 10^6, and a priority P is less \nthan 10^7.The client may arrive for being served multiple times, and each \ntime may obtain a different priority.OutputFor each request with code 2 or 3, the program has to print, in a \nseparate line of the standard output, the identifier of the served \nclient. If the request arrives when the waiting list is empty, then the \nprogram prints zero (0) to the output.SampleInput:\n2 \n1 20 14 \n1 30 3 \n2 \n1 10 99 \n3 \n2 \n2 \n0 \n\nOutput: \n0 \n20 \n30 \n10 \n0",
  "sample_input": "Input:\n2 \n1 20 14 \n1 30 3 \n2 \n1 10 99 \n3 \n2 \n2 \n0 \n\nOutput: \n0 \n20 \n30 \n10 \n0",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MSE07B",
  "scraped_at": "2025-08-17 00:34:02"
}