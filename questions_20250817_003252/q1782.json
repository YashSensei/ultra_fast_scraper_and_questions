{
  "problem_code": "problems",
  "title": "Factorial",
  "tags": [],
  "text": "The most important part of a GSM network is so calledBase Transceiver Station(BTS). These transceivers form the\r\nareas calledcells(this term gave the name to the cellular phone)\r\nand every phone connects to the BTS with the strongest signal (in\r\na little simplified view). Of course, BTSes need some attention and\r\ntechnicians need to check their function periodically.ACM technicians faced a very interesting problem recently. Given a set of\r\nBTSes to visit, they needed to find the shortest path to visit all of the\r\ngiven points and return back to the central company building. Programmers\r\nhave spent several months studying this problem but with no results. They\r\nwere unable to find the solution fast enough. After a long time, one of the\r\nprogrammers found this problem in a conference article. Unfortunately, he\r\nfound that the problem is so called \"Travelling Salesman Problem\" and it is\r\nvery hard to solve. If we haveNBTSes to be visited, we can visit them in\r\nany order, giving usN! possibilities to examine. The function expressing\r\nthat number is called factorial and can be computed as a product\r\n\r\n1·2·3·4 ...N. The number is very high even for a relatively smallN.The programmers understood they had no chance to solve the problem. But\r\nbecause they have already received the research grant from the government,\r\nthey needed to continue with their studies and produce at leastsomeresults. So they started to study behaviour of the factorial function.For example, they defined the functionZ. For any positive integerN,Z(N) is the number of zeros at the end of the decimal form of numberN!. They noticed that this function never decreases. If we have two numbersN1<N2, thenZ(N1) ≤Z(N2). It is because we can never \"lose\" any\r\ntrailing zero by multiplying by any positive number. We can only get new\r\nand new zeros. The functionZis very interesting, so we need a computer\r\nprogram that can determine its value efficiently.InputThere is a single positive integerTon the first line of input (equal to about 100000). It stands\r\nfor the number of numbers to follow. Then there areTlines, each containing\r\nexactly one positive integer numberN, \r\n1 ≤N≤ 1000000000.OutputFor every numberN, output a single line containing the single non-negative\r\nintegerZ(N).ExampleInput:6\r\n3\r\n60\r\n100\r\n1024\r\n23456\r\n8735373Output:0\r\n14\r\n24\r\n253\r\n5861\r\n2183837",
  "sample_input": "Input:6\r\n3\r\n60\r\n100\r\n1024\r\n23456\r\n8735373Output:0\r\n14\r\n24\r\n253\r\n5861\r\n2183837",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/FCTRL",
  "scraped_at": "2025-08-17 00:33:30"
}