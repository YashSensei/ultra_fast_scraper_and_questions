{
  "problem_code": "problems",
  "title": "Hotline",
  "tags": [],
  "text": "Every customer sometimes needs help with new and unusual products. Therefore,\r\nhotline service is very important for every company. We need a single phone\r\nnumber where the customer can always find a friendly voice ready to help with\r\nanything. On the other hand, many people are needed to serve as hotline\r\noperators, and human resources are always very expensive. Moreover, it is not\r\neasy to pretend \"friendly voice\" at 4am and explain to a drunken man that you\r\nare really unable to give him the number to House of Parliament. It was\r\nalso found that some of the questions repeat very often and it is very\r\nannoying to answer them again and again.ACM is a modern company, wanting to solve its hotline problem. They want\r\nto decrease the number of human operators by creating a complex software\r\nsystem that would be able to answer most common questions. The customer's\r\nvoice is analysed by a special Voice Recognition Module (VRM) and converted\r\nto a plain text. The text is then taken by an Artificial Automatic Adaptive\r\nAnswering Algorithm (AAAAA). The most common questions are recognised and\r\nanswered automatically. The replies are then converted to a sound by\r\nText-to-Speech Module (TTS).You are to write the AAAAA module. Because your algorithm should be adaptive,\r\nit has no explicit knowledge base. But it must be able to listen to sentences\r\nin English and remember the mentioned facts. Whenever the question is asked\r\nabout such a fact, the system has to answer it properly. The VRM and TTS\r\nmodules are already implemented, so the input and output of AAAAA will be in\r\nthe text form.InputThere is a single positive integerTon the first line of input. It stands\r\nfor the number of dialogues to follow. Each dialogue consists of zero or more\r\nlines, each of them containing one sentence: either statement or question. The\r\nstatement ends with a dot character (.), the question ends with\r\na question mark (?). No statement will appear more than once, however\r\nthe questions can be repeated. There is one extra line after each dialogue.\r\nThat line ends with an exclamation mark (!).Sentences can contain words, spaces and punctuation characters (such as\r\ncommas, colons, semicolons etc.). All words contain only letters of English\r\nalphabet and are case-sensitive. That means the same word is always written\r\nthe same way, usually in lowercase. Acronyms, names and some other words can\r\nbegin with capital letters. For simplicity, all sentences begin with\r\na lowercase letter. Only if the first word should be written with a capital,\r\nthe sentence begins with a capital letter. There are no unneeded spaces\r\nbetween words. No line will have more than 100 characters. There will be at\r\nmost 100 statements per each test case.StatementsEach statement has one of the following two forms ( _ denotes a space):subject_predicate[s] [ _object].subject_don't|doesn't_predicate[ _object].The square brackets mark an optional part, the vertical line two possible\r\nvariants. Subject is a single word, noun or pronoun in singular. Predicate is\r\na verb (single word) denoting some activity. Object can be any text. Object\r\ndoes not contain any dots. Any pair \"verb + object\" determines unique\r\nactivity. The same verb with different objects makes different independent\r\nactivities, i.e. the different and independent meaning of the sentence.\r\nSentence without any object can be considered as sentence with an empty\r\nobject. The verb without an object has different and independent meaning than\r\nthe same verb with any non-empty object.The first variant of sentence denotes a positive statement. The word\r\n\"predicate[s]\" means verb that matches the subject of the sentence.\r\nIf the subject is \"I\" or \"you\", the verb has the same form as the\r\ninfinitive. With any other subject, the letter \"s\" is appended on the\r\nend of the verb. Assume there are no irregular verbs.The second variant is a negative statement. Verb \"don't\" or\r\n\"doesn't\" must also match the subject. The form \"don't\" is used\r\nwith either \"I\" or \"you\", \"doesn't\" is used in any other\r\ncase.A special generic subject \"everybody\" can be used. It means the activity\r\nholds for any subject. Other special subject is \"nobody\". Such sentence\r\nalso holds for any subject, but its meaning is negative. Both of these generic\r\nsubjects can be used with the first variant only (without \"doesn't\").\r\nThe sentence \"nobody likes something\" is exactly equal to\r\n\"everybody doesn't like something\", except the latter form will never\r\noccur in the input.QuestionsEach question has one of the following three forms:do|does_subject_predicate[ _object]?who_predicates[ _object]?what_do|does_subjectdo?The word \"do|does\" always matches the subject (\"do I?\",\r\n\"do you?\", \"doesany other subject?\"). In the second\r\ntype of question, predicate always matches the word \"who\", i.e. the\r\n\"s\" is always appended. Generic subjects cannot be used in questions.OutputFor each dialogue, your program must output the lineDialogue #D:,\r\nwhereDis the sequence number of dialogue, starting with 1. Then print\r\nexactly three lines for every question: the first line repeats the question,\r\nthe second line contains the answer, and the third line is empty. Print\r\nnothing for statements. After each dialogue, print the same line with\r\nan exclamation mark that was in the input. Then print one extra empty line.\r\nEmpty line contains a new-line character only.The answer must be properly formated to be accepted by a TTS module. Only the\r\nstatements appearing in the input before the answer are used for the\r\ncorresponding reply. If there is any contradiction among statements, the\r\nreply is alwaysI am abroad.. If the question and statements consider\r\nthe special subject \"you\", it must be replaced with \"I\" in the\r\nanswer. If the question considers special subject \"I\", it must be\r\nreplaced with \"you\" in the answer. The verb must always match the\r\nsubject of the sentence. The exact form of the correct answer depends on the\r\ntype of question.1. does subject predicate [object] ?If there is any positive statement about the mentioned subject (or\r\ngeneric subject \"everybody\"), predicate and object, the answer is:yes,_subject_predicate[s] [ _object].If there is any negative statement about the mentioned subject (or\r\ngeneric subject \"nobody\"), predicate and object, the answer is:no,_subject_don't|doesn't_predicate[ _object].Otherwise, the answer is:maybe.Subject in the answer is always the same subject as the subject of the\r\nquestion.2. who predicates [object] ?If there is a positive statement considering any subject, the specified\r\npredicate and object, the answer is:subject_predicate[s] [ _object].If two or more subjects match the activity, replace the subject in the answer\r\nwith enumeration of all such subjects, in the same order as the corresponding\r\nstatements have appeared in the input. Subjects are separated with comma and\r\nspace, last two subjects are separated with the word \"and\".\r\nIf \"everybody\" belongs to the group of enumerated subjects, do not\r\nenumerate subjects, and print \"everybody\" only. If the enumeration\r\ncontains at least two subjects, the predicate matches the plural subject\r\n(i.e. verb is without trailing \"s\"), otherwise it matches the only\r\nsubject.subject1,_subject2_and_subject3predicate[ _object].If there is a negative statement considering the generic subject \"nobody\",\r\nthe specified predicate and object, the answer is:nobody_predicates[ _object].Otherwise, the answer is:I don't know.3. what does subject do ?If there are one or more sentences (both positive and negative) considering\r\nthe specified subject (or a generic subject \"everybody\" or \"nobody\"), all\r\nverbs and objects from such sentences must be included in a reply in the same\r\norder as the corresponding sentences have appeared in the input. No\r\nverb-object pair can be included more than once (the eventual second\r\nappearance must be skipped). The verb-object pairs are separated by a comma\r\nfollowed by a space, the last verb is separated by a comma and the word\r\n\"and\". Please note the comma is printed here although there was no comma\r\nwhen separating the subjects in the previous type of answer (see above). The\r\nnegative answers have the same form as the statements, that means the verb\r\n\"don't\" or \"doesn't\" is used:subject[ _don't|doesn't] _predicate1[s] [ _object1],[ _don't|doesn't] _predicate2[s] [ _object2],_and[ _don't|doesn't] _predicate3[s] [ _object3].subject[ _don't|doesn't] _predicate1[s] [ _object1],_and[ _don't|doesn't] _predicate2[s] [ _object2].subject[ _don't|doesn't] _predicate[s] [ _object].Otherwise, the answer is:I don't know.ExampleSample Input:1\r\nI like hotdogs.\r\nnobody likes to work.\r\neverybody smiles.\r\nwhat do I do?\r\nwho smiles?\r\nwhat do you do?\r\ndoes Joe smile?\r\ndo I like to work?\r\neverybody hurts sometimes.\r\nwho walks there?\r\nMichal walks there.\r\nwho walks there?\r\nwhat does Michal do?\r\ndo you understand?\r\nnobody walks there.\r\ndo you understand now?\r\nbye!Sample Output:Dialogue #1:\r\nwhat do I do?\r\nyou like hotdogs, don't like to work, and smile.\r\n\r\nwho smiles?\r\neverybody smiles.\r\n\r\nwhat do you do?\r\nI don't like to work, and smile.\r\n\r\ndoes Joe smile?\r\nyes, Joe smiles.\r\n\r\ndo I like to work?\r\nno, you don't like to work.\r\n\r\nwho walks there?\r\nI don't know.\r\n\r\nwho walks there?\r\nMichal walks there.\r\n\r\nwhat does Michal do?\r\nMichal doesn't like to work, smiles, hurts sometimes, and walks there.\r\n\r\ndo you understand?\r\nmaybe.\r\n\r\ndo you understand now?\r\nI am abroad.\r\n\r\nbye!",
  "sample_input": "1\r\nI like hotdogs.\r\nnobody likes to work.\r\neverybody smiles.\r\nwhat do I do?\r\nwho smiles?\r\nwhat do you do?\r\ndoes Joe smile?\r\ndo I like to work?\r\neverybody hurts sometimes.\r\nwho walks there?\r\nMichal walks there.\r\nwho walks there?\r\nwhat does Michal do?\r\ndo you understand?\r\nnobody walks there.\r\ndo you understand now?\r\nbye!",
  "sample_output": "Dialogue #1:\r\nwhat do I do?\r\nyou like hotdogs, don't like to work, and smile.\r\n\r\nwho smiles?\r\neverybody smiles.\r\n\r\nwhat do you do?\r\nI don't like to work, and smile.\r\n\r\ndoes Joe smile?\r\nyes, Joe smiles.\r\n\r\ndo I like to work?\r\nno, you don't like to work.\r\n\r\nwho walks there?\r\nI don't know.\r\n\r\nwho walks there?\r\nMichal walks there.\r\n\r\nwhat does Michal do?\r\nMichal doesn't like to work, smiles, hurts sometimes, and walks there.\r\n\r\ndo you understand?\r\nmaybe.\r\n\r\ndo you understand now?\r\nI am abroad.\r\n\r\nbye!",
  "link": "https://www.spoj.com/problems/HOTLINE",
  "scraped_at": "2025-08-17 00:33:35"
}