{
  "problem_code": "problems",
  "title": "Dead Pixels",
  "tags": [],
  "text": "John's friend Peter purchases a new high resolution monitor with dimensionW*HwhereWis the number of pixels in each row (i.e. width) andHis the number of pixels in each column (i.e. height).However, there areNdead pixels on the monitor. Thei-th dead pixel is located at (x[i],y[i]). (0, 0) is the top-left pixel and (W- 1,H- 1) is the bottom-right pixel. The locations of the dead pixels could be generated by 6 given integersX,Y,a,b,canddby the following rules. If 2 pixels are at the same location, they are considered the same. It is possible that there are less thanNdistinctdead pixels.x[0] = X\r\n    y[0] = Y\r\n    x[i] = (x[i - 1] * a + y[i - 1] * b + 1) % W (for 0 < i < N)\r\n    y[i] = (x[i - 1] * c + y[i - 1] * d + 1) % H (for 0 < i < N)Peter connects his monitor to his computer and opens an image with dimensionP(width) *Q(height). How many unique positions can the image be placed so that it can be displayed perfectly (i.e. all pixels of the picture are shown on the monitor)? The image cannot be rotated.InputThe first line contains an integerT, which is the number of test cases. ThenTtest cases follow. Each test case contains 11 integersW,H,P,Q,N,X,Y,a,b,c,d.OutputFor each of the test cases numbered in order from 1 toT, output \"Case #\", followed by the case number (with 1 being the first test case), followed by \": \", followed by an integer which is the number of different possible positions for the image.ExampleInput:5\r\n4 4 2 2 1 0 2 1 2 3 4\r\n4 4 1 1 3 1 1 2 2 2 2\r\n6 10 3 2 2 0 0 5 4 3 2\r\n16 18 5 1 5 10 8 21 27 29 87\r\n14 15 12 4 4 3 5 84 74 53 68Output:Case #1: 7\r\nCase #2: 15\r\nCase #3: 32\r\nCase #4: 197\r\nCase #5: 16Constraints1 ≤ T ≤ 201 ≤ W, H ≤ 40 0001 ≤ P ≤ W1 ≤ Q ≤ H1 ≤ N ≤ min(1 000 000, W * H)1 ≤ a, b, c, d ≤ 1000 ≤ X < W0 ≤ Y < H",
  "sample_input": "x[0] = X\r\n    y[0] = Y\r\n    x[i] = (x[i - 1] * a + y[i - 1] * b + 1) % W (for 0 < i < N)\r\n    y[i] = (x[i - 1] * c + y[i - 1] * d + 1) % H (for 0 < i < N)",
  "sample_output": "Input:5\r\n4 4 2 2 1 0 2 1 2 3 4\r\n4 4 1 1 3 1 1 2 2 2 2\r\n6 10 3 2 2 0 0 5 4 3 2\r\n16 18 5 1 5 10 8 21 27 29 87\r\n14 15 12 4 4 3 5 84 74 53 68Output:Case #1: 7\r\nCase #2: 15\r\nCase #3: 32\r\nCase #4: 197\r\nCase #5: 16",
  "link": "https://www.spoj.com/problems/HC12III",
  "scraped_at": "2025-08-17 00:34:03"
}