{
  "problem_code": "problems",
  "title": "Brute",
  "tags": [],
  "text": "Professor Brute is not good at algorithm design. Once he was asked to solve a path finding problem. He worked on it for several days and finally came up with the following algorithm:Function Find(integer n, function func)\r\n\tIf n=1\r\n\t\tFor i = 1 to a do func()\r\n\tElseif n=2\r\n\t\tFor i = 1 to b do func()\r\n\tElse Find(n-1,Find(n-2,func))\r\n\r\nFunction Main\r\n\tFind(n, funny)Any fool but Brute knows that the function “funny” will be called too many times. Brute wants to investigate the number of times the function will be called, but he is too lazy to do it.Now your task is to calculate how many times the function “funny” will be called, for the given a, b and n. Because the answer may be too large, you should output the answer module by P.InputThere are multiple test cases. The first line of the input contains an integer T, meaning the number of the test cases.For each test cases, there are four integers a, b, P and n in a single line. You can assume that 1≤n≤1000000000, 1≤P≤1000000, 0≤a, b<1000000.OutputFor each test case, output the answer with case number in a single line.ExampleInput:3\r\n3 4 10 3\r\n4 5 13 5\r\n3 2 19 100Output:Case #1: 2\r\nCase #2: 11\r\nCase #3: 12",
  "sample_input": "Function Find(integer n, function func)\r\n\tIf n=1\r\n\t\tFor i = 1 to a do func()\r\n\tElseif n=2\r\n\t\tFor i = 1 to b do func()\r\n\tElse Find(n-1,Find(n-2,func))\r\n\r\nFunction Main\r\n\tFind(n, funny)",
  "sample_output": "Input:3\r\n3 4 10 3\r\n4 5 13 5\r\n3 2 19 100Output:Case #1: 2\r\nCase #2: 11\r\nCase #3: 12",
  "link": "https://www.spoj.com/problems/BFALG",
  "scraped_at": "2025-08-17 00:33:53"
}