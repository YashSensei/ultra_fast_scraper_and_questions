{
  "problem_code": "problems",
  "title": "Police Query",
  "tags": [],
  "text": "To  help  capture  criminals  on  the  run,  the  police are  introducing a  new  computer  system.  The  area covered  by  the  police  containsNcities  andEbidirectional  roads  connecting  them.  The  cities  are labelled 1 toN. The police often want to catch criminals trying to get from one city to another. Inspectors, looking at a map,  try  to determine where to  set up barricades  and  roadblocks.The new  computer  system  should answer the following two types of queries:Consider  two  citiesAandB,  and  a  road  connecting  citiesG1andG2. Can  the  criminals get from cityAto cityBif that one road is blocked and the criminals can't use it?Consider three citiesA,BandC. Can the criminals get from cityAto cityBif the entire cityCis cut off and the criminals can't enter that city?Write a program that implements the described system.InputThe  first  line  contains  two  integersNandE(2  ≤  N  ≤  105, 1  ≤  E  ≤  5×105),  the  number  of  cities  and  roads. Each  of  the  followingElines  contains  two distinct  integers between  1  andN–  the  labels  of  two  cities connected  by  a  road. There  will  be  at  most  one  road  between  any  pair  of  cities.The  following  line  contains  the  integerQ(1 ≤ Q ≤ 105),  the  number  of  queries  the  system  is  being tested  on. Each  of  the  followingQlines  contains  either  four  or  five integers.  The  first  of  these  integers  is  the  type  of  the query  –1or2.If  the  query  is  oftype  1,  then  the  same  line  contains  four more  integersA,B,G1andG2as  described earlier.AandBwill  be  different.G1andG2will  represent  an existing  road.If  the  query  is  oftype  2,  then  the  same  line contains  three more  integersA,BandC.A,BandCwill  be distinct  integers.The  test  data  will  be  such  that  it  is  initially  possible  to  get from  each  city  to  every  other  city.OutputOutput the answers to allQqueries, one per line. The answer to a query can beda(yes) orne(no).ExampleInput:13 151 22 33 52 44 62 61 41 77 87 97 108 118 129 1212 1351 5 13 1 21 6 2 1 41 13 6 7 82 13 6 72 13 6 8Output:dadadaneda",
  "sample_input": "Input:13 151 22 33 52 44 62 61 41 77 87 97 108 118 129 1212 1351 5 13 1 21 6 2 1 41 13 6 7 82 13 6 72 13 6 8Output:dadadaneda",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/POLQUERY",
  "scraped_at": "2025-08-17 00:33:32"
}