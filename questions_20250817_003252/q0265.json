{
  "problem_code": "problems",
  "title": "Phone Lines",
  "tags": [],
  "text": "There are several cities and towers on a straight line. Towers can be set to connection-accepting by paying a cost. We are given the location (on the X-axis), of the towers and the cities. Our job is to set up certain towers as connection-accepting. Now every city, pays you an amount equal toD - distance_travelled_by_data, for every unit of data (for every tower) it can send. (distance_travelled_by_data = cityX - towerX); Our job here is to set up connections on different towers to get maximal profit.Each city when it wants to route some data to a tower works with the following algorithm:Find the nearest tower to the left of the city.If it is within the range 'D', it sends the data to that tower. If this tower exceeds the range D, or if the tower doesn't accept connections, the city cant send the data and stops immediately. (Doesn't check the next available tower);If the data is sent successfully: Then the city:Skips three towers. (Doesn't care if these three towers are connection-accepting or not);Tries to send data to the next tower (the fourth one after the skipping), by using step (2);InputInput consists of multiple testcases.The first line of each test case contains three integers: D C T; the range, the number of cities and the number of towers, respectively.The second line of each test case contains exactly C integers saying the location of the cities (on the X-axis).The next T lines contain exactly two integers: location[i] connection-cost[i]; which is the position of\r\ntower i, and the cost to set up tower i as connection-accepting;The input ends with a line: \"-1 -1 -1\"OutputFor each test case, output a single line saying the maximum amount of profit you can make.ConstraintsNo two points (towers or cities), will have the same X-coordinate. T, C â‰¤ 100.SampleInput:4 9 6\r\n23\r\n43\r\n18\r\n15\r\n29\r\n50\r\n41\r\n31\r\n40\r\n32 2\r\n26 0\r\n46 7\r\n48 0\r\n50 3\r\n38 1\r\n-1 -1 -1Output:5",
  "sample_input": "Input:4 9 6\r\n23\r\n43\r\n18\r\n15\r\n29\r\n50\r\n41\r\n31\r\n40\r\n32 2\r\n26 0\r\n46 7\r\n48 0\r\n50 3\r\n38 1\r\n-1 -1 -1Output:5",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/PHONELIN",
  "scraped_at": "2025-08-17 00:33:09"
}