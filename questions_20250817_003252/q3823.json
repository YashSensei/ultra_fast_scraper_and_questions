{
  "problem_code": "problems",
  "title": "Dirty Plates",
  "tags": [],
  "text": "Lazy Louie loves to eat but he adamantly hates cleaning. That is why he has chosen to delay\r\ncleaning for as long as possible. Being an avid inventor, Louie created an invention to help\r\nincrease his laziness. That invention is the two sided plate! Two sided plates can be stacked like\r\ncoins for easy storage. They also have the interesting feature that you may eat from either side\r\nof the plate.Lazy Louie lacks cabinet space. That is why he stores his two sided plates directly on his dining\r\ntable. When enjoying a meal he simply eats off the topmost plate, although he will only eat off\r\nthe topmost surface if it is clean. When the plates are stacked, if a dirty side of the plate touches\r\nthe clean side of another plate then the grime of that plate transfers to the clean plate making that\r\nside of the plate dirty. The side that was originally dirty stays dirty.Since Louie is stacking plates on his table, if a dirty side of a plate touches the table then the\r\ngrime will transfer to the table making the table dirty. If the table is dirty already and it touches\r\na clean side of a plate then that plate’s side becomes dirty. Note that the table remains dirty.\r\nAlso, both sides remain dirty when two dirty sides, either the table or plates, touch.The ProblemLouie would like to know the maximum number of meals that can be eaten before any cleaning\r\nis done. Louie is given the number of plates he already has of three kinds: plates that are clean\r\non both sides, plates that are clean on one side while dirty on the other, and plates that are dirty\r\non both sides. Before eating his first meal he can stack these plates in any way he likes on the\r\ntable. After eating each meal the topmost plate becomes dirty. Between meals Louie can\r\nrearrange the plates in any way he likes. Louie is allowed to change the order of the plates on\r\nthe stack and change which side is facing up but they must remain a stack of plates after being\r\nrearranged.InputThe first input line contains a positive integer, n, indicating the number of eating scenarios to\r\nanalyze. The next n lines contain the description of the plates. Each line contains three integers,\r\nc, s, and d, (0 ≤ c ≤ 100; 0 ≤ s ≤ 100; 0 ≤ d ≤ 100) representing (respectively) the number of\r\nplates with both sides clean, the number of plates with one side clean and the number of\r\ncompletely dirty plates.OutputFor each scenario, first output the heading “Scenario #d: ”, where d is the scenario number,\r\nstarting with 1. Then, print the maximum number of times a meal can be eaten before Louie has\r\nto clean. Follow the format illustrated in the example output.ExampleInput:4\r\n1 0 0\r\n2 0 0\r\n1 1 3\r\n2 2 2Output:Scenario #1: 2\r\nScenario #2: 3\r\nScenario #3: 2\r\nScenario #4: 4",
  "sample_input": "Input:4\r\n1 0 0\r\n2 0 0\r\n1 1 3\r\n2 2 2Output:Scenario #1: 2\r\nScenario #2: 3\r\nScenario #3: 2\r\nScenario #4: 4",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CTPDIRTY",
  "scraped_at": "2025-08-17 00:34:27"
}