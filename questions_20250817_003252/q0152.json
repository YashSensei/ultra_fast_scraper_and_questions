{
  "problem_code": "problems",
  "title": "Euclids algorithm revisited",
  "tags": [],
  "text": "Consider the famous Euclid algorithm to calculate the GCD of two integers (a, b):int gcd(int a, int b) {\r\n    while (b != 0) {\r\n        int temp = a;\r\n        a = b;\r\n        b = temp % b;\r\n    }\r\n    return a;\r\n}for input (7, 3) the 'while' loop will run 2 times as follows: (7, 3)  → (3, 1) → (1, 0)Now given an integer N you have to find the smallest possible sum of two non-negative integers a, b (a ≥ b) such that the while loop in the above mentioned function for (a, b) will run exactly N times.InputFirst line of input contains T (1 ≤ T ≤ 50) the number of test cases. Each of the following T lines contains an integer N (0 ≤ N ≤ 1018).OutputFor each test case print the required answer modulo 1000000007 in a separate line.ExampleInput:1\r\n1Output:2Explanation: (1, 1) is the required pair.",
  "sample_input": "int gcd(int a, int b) {\r\n    while (b != 0) {\r\n        int temp = a;\r\n        a = b;\r\n        b = temp % b;\r\n    }\r\n    return a;\r\n}",
  "sample_output": "Input:1\r\n1Output:2",
  "link": "https://www.spoj.com/problems/MAIN74",
  "scraped_at": "2025-08-17 00:33:04"
}