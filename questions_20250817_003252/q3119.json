{
  "problem_code": "problems",
  "title": "Help the problem setter",
  "tags": [],
  "text": "Preparing a problem for a programming contest takes a lot of time.\r\nNot only do you have to write the problem description and write a\r\nsolution, but you also have to create difficult input files.\r\nIn this problem, you get the chance to help the problem setter\r\nto create some input for a certain problem.For this purpose, let us select the problem which was not solved\r\nduring last year's local contest. The problem was about\r\nfinding the optimal binary search tree, given the probabilities that\r\ncertain nodes are accessed. Your job will be: given the desired optimal\r\nbinary search tree, find some access probabilities for which this binary\r\nsearch tree is the unique optimal binary search tree. Don't worry if\r\nyou have not read last year's problem, all required definitions are provided\r\nin the following.Let us define abinary search treeinductively as follows:The empty tree which has no node at all is a binary search treeEach non-empty binary search tree has a root, which is a node\r\nlabelled with an integer, and two binary search trees as left and right\r\nsubtree of the rootA left subtree contains no node with a label ≥ than the label of\r\nthe rootA right subtree contains no node with a label ≤ than the label of\r\nthe rootGiven such a binary search tree, the followingsearch procedurecan be used to locate a node in the tree:Start with the root node. Compare the label of the current node with\r\nthe desired label. If it is the same, you have found the right node.\r\nOtherwise, if the desired label is smaller, search in the left subtree,\r\notherwise search in the right subtree.Theaccess costto locate a node is the number of nodes you\r\nhave to visit until you find the right node.\r\nAnoptimal binary search treeis a binary search tree\r\nwith the minimum expected access cost.InputThe input file contains several test cases.Each test case starts with an integern(1 ≤ n ≤\r\n50), the number of nodes in the optimal binary search tree.\r\nFor simplicity, the labels of the nodes will be integers from1ton. The followingnlines describe the structure of\r\nthe tree. Thei-th line contains the labels of the roots\r\nof the left and right subtree of the node with labeli(or -1 for an empty subtree). You can assume that the\r\ninput always defines a valid binary search tree.The last test case is followed by a zero.OutputFor each test case, write one line containing the access frequency\r\nfor each node in increasing order of the labels of the nodes.\r\nTo avoid problems with floating point precision, the frequencies should\r\nbe written as integers, meaning the access probability for a node will be the\r\nfrequency divided by the sum of all frequencies. Make sure that you\r\ndo not write any integer bigger than 263- 1 (the maximum value\r\nfitting in the C/C++ data typelong longor the Java data typelong).\r\nOtherwise, you may produce any solution ensuring that there is exactly\r\none optimal binary search tree: the binary search tree given in the\r\ninput.ExampleInput:3\r\n-1 -1\r\n1 3\r\n-1 -1\r\n10\r\n-1 2\r\n-1 3\r\n-1 4\r\n-1 5\r\n-1 6\r\n-1 7\r\n-1 8\r\n-1 9\r\n-1 10\r\n-1 -1\r\n0Output:1 1 1\r\n512 256 128 64 32 16 8 4 2 1Note that the first test case in the sample input describes a\r\ntree looking like:2\r\n / \\\r\n1   3",
  "sample_input": "Input:3\r\n-1 -1\r\n1 3\r\n-1 -1\r\n10\r\n-1 2\r\n-1 3\r\n-1 4\r\n-1 5\r\n-1 6\r\n-1 7\r\n-1 8\r\n-1 9\r\n-1 10\r\n-1 -1\r\n0Output:1 1 1\r\n512 256 128 64 32 16 8 4 2 1",
  "sample_output": "2\r\n / \\\r\n1   3",
  "link": "https://www.spoj.com/problems/HELP",
  "scraped_at": "2025-08-17 00:34:23"
}