{
  "problem_code": "problems",
  "title": "Grumpy uncle",
  "tags": [],
  "text": "Winters in Nlogonia are very hard, so uncle Ernie decided to buy a heater to keep himself warm this year. Although it was terribly difficult, he managed to follow his friends' advice and buy an intelligent heater, which can be controlled from his smartphone. However, uncle Ernie doesn't fully understand his smartphone, so he has trouble finding the app which is used to set the heater's temperature.Uncle Ernie has installed on his smartphoneNapps numbered from1toN, corresponding number1to the app controlling the heater. His smartphone hasMbuttons numbered from1toM, which are used to switch from one app to another. More specifically, if the smartphone has currently app numberiopened and uncle Ernie presses button numberj, then appiis closed and appTi,jis then opened. The problem is uncle Ernie cannot distinguish one app from the other, so he never knows if he has opened the correct app.Uncle Ernie is very grumpy, so you have decided to help him in order to avoid having to listen to his complaints every time the heater's temperature is not quite right for him. Your task is to provide him with a list of buttons which he can use as instructions, such that if he presses the buttons in the list in the order in which they appear there, his phone will have opened the app controlling the heater. Because you don't want to provide him with more than one list, you should create one that works as explained above independently of which app is opened at the time when uncle Ernie begins executing its instructions.Take for example the case where the phone hasN = 3apps andM = 2buttons, beingT1,1= T2,1= 3,T3,1= T1,2= 2andT2,2= T3,2= 1. In this case, a sequence of buttons that could be provided to uncle Ernie would be{1,2}, because one of the following situations would take place:If uncle Ernie starts with app1being open, pressing button1will leave him with app3being open; then pressing button2would result in a final state where app1is again opened.On the other hand, if uncle Ernie starts with app2being open, pressing button1will leave him with app3being open; then pressing button2would result in a final state where app1is open.Finally, if he starts with app3being open, pressing button1will leave him with app2being open; then pressing button2would reslut in a final state where app1is open.Therefore, independently of which app was open at the beginning of the sequence of button presses, uncle Ernie will always reach app1by the end of the sequence.Now again, there are times when it is impossible to find a sequence of buttons that can be pressed by uncle Ernie such that the app being open when he finishes to do so is always app number1. For example, in the case withN = 3andM = 2if we haveT1,1= T1,2= 2,T2,1= T2,2= 3andT3,1= T3,2= 1the application opened at the end of any sequence of button presses always depends on which application was open at the time the sequence was started. Therefore, in this case it is impossible to find a sequence that will always leave uncle Ernie's phone with app number1opened.In order not to waste time looking for sequences of button presses that do not exist, you would like to first find out if it is possible to satisfy uncle Ernie by finding a sequence as described above. If so, uncle Ernie will be happy knowing that he can turn the heater on at level 2, his favorite,  whenever he wants... and will thus be eternally grateful.InputThere are multiple test cases in the input file. The first line contains two integer numbersNandM, representing the number of applications and the number of buttons in uncle Ernie's smartphone, respectively (1≤N,M ≤ 1000with1≤N × M≤104). Each of the followingNlines containsMinteger numbers, being thej-th number in thei-th lineTi,j, representing the app which is opened when buttonjis pressed while app numberiwas open (1≤Ti,j≤Nfori = 1, 2, ..., Nandj = 1, 2, ..., M).OutputFor each test case, print a single line containing a character, representing if it is possible to find a sequence of buttons as described in the problem statement. The character should be an'S'if the sequence can be found, and an'N'otherwise.ExampleInput:3 2\r\n3 2\r\n3 1\r\n2 1\r\n3 2\r\n2 2\r\n3 3\r\n1 1Output:S\r\nN",
  "sample_input": "Input:3 2\r\n3 2\r\n3 1\r\n2 1\r\n3 2\r\n2 2\r\n3 3\r\n1 1Output:S\r\nN",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TAP2016E",
  "scraped_at": "2025-08-17 00:34:21"
}