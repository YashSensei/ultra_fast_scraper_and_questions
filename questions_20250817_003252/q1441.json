{
  "problem_code": "problems",
  "title": "Cuckoo Hashing",
  "tags": [],
  "text": "One of the most fundamental data structure problems is\r\nthe dictionary problem: given a setDof words you want to\r\nbe able to quickly determine if any given query stringqis\r\npresent in the dictionaryDor not. Hashing is a well-known\r\nsolution for the problem. The idea is to create a functionh: Σ∗→ [0..n− 1] from all strings to the integer range\r\n0,1,..,n− 1, i.e. you describe a fast deterministic program\r\nwhich takes a string as input and outputs an integer between\r\n0 andn−1. Next you allocate an empty hash tableTof sizenand for each wordwinD, you setT[h(w)] =w. Thus, given a query stringq, you only\r\nneed to calculateh(q) and see ifT[h(q)] equalsq, to determine ifqis in the dictionary.\r\nSeems simple enough, but aren’t we forgetting something? Of course, what if two words\r\ninDmap to the same location in the table? This phenomenon, called collision, happens\r\nfairly often (remember the Birthday paradox: in a class of 24 pupils there is more than\r\n50% chance that two of them share birthday). On average you will only be able to put\r\nroughly\r\n√n-sized dictionaries into the table without getting collisions, quite poor space\r\nusage!A stronger variant is Cuckoo Hashing. The idea is to use two hash functionsh1andh2. Thus each string maps to two positions in the table. A query stringqis now handled\r\nas follows: you compute bothh1(q) andh2(q), and ifT[h1(q)] =q, orT[h2(q)] =q, you\r\nconclude thatqis inD. The name “Cuckoo Hashing” stems from the process of creating\r\nthe table. Initially you have an empty table. You iterate over the wordsdinD, and\r\ninsert them one by one. IfT[h1(d)] is free, you setT[h1(d)] =d. Otherwise ifT[h2(d)] is\r\nfree, you setT[h2(d)] =d. If both are occupied however, just like the cuckoo with other\r\nbirds’ eggs, you evict the wordrinT[h1(d)] and setT[h1(d)] =d. Next you putrback\r\ninto the table in its alternative place (and if that entry was already occupied you evict\r\nthat word and move it to its alternative place, and so on). Of course, we may end up\r\nin an infinite loop here, in which case we need to rebuild the table with other choices of\r\nhash functions. The good news is that this will not happen with great probability even ifDcontains up ton/2 words.InputOn the first line of input is a single positive integer 1 ≤t≤ 50 specifying the number of\r\ntest cases to follow. Each test case begins with two positive integers 1 ≤m≤n≤ 10000\r\non a line of itself,mtelling the number of words in the dictionary andnthe size of the\r\nhash table in the test case. Next followmlines of which thei:th describes thei:th worddiin the dictionaryDby two non-negative integersh1(di) andh2(di) less thanngiving the two hash function values of the worddi. The two values may be identical.OutputFor each test case there should be exactly one line of output either containing the string\r\n“successful hashing” if it is possible to insert all words in the given order into the\r\ntable, or the string “rehash necessary” if it is impossible.ExampleInput:2\r\n3 3\r\n0 1\r\n1 2\r\n2 0\r\n5 6\r\n2 3\r\n3 1\r\n1 2\r\n5 1\r\n2 5Output:successful hashing\r\nrehash necessary",
  "sample_input": "Input:2\r\n3 3\r\n0 1\r\n1 2\r\n2 0\r\n5 6\r\n2 3\r\n3 1\r\n1 2\r\n5 1\r\n2 5Output:successful hashing\r\nrehash necessary",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/CUCKOO",
  "scraped_at": "2025-08-17 00:33:25"
}