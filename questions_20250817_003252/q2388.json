{
  "problem_code": "problems",
  "title": "Showstopper",
  "tags": [],
  "text": "Data-mining huge data sets can be a painful and long lasting process\r\nif we are not aware of tiny patterns existing within those data sets.\r\nOne reputable company has recently discovered a tiny bug in their\r\nhardware video processing solution and they are trying to create software\r\nworkaround. To achieve maximum performance they use their chips in pairs\r\nand all data objects in memory should have even number of references.\r\nUnder certain circumstances this rule became violated and exactly one\r\ndata object is referred by odd number of references. They are ready to\r\nlaunch product and this is the only showstopper they have. They need YOU\r\nto help them resolve this critical issue in most\r\nefficient way.\r\nCan you help them?InputInput file consists from multiple data sets separated by one or more\r\nempty lines. Each data set represents a sequence of 32-bit (positive)\r\nintegers (references) which are stored in compressed way.Each line of input set consists from three single space separated 32-bit\r\n(positive) integers X Y Z and they represent following sequence of\r\nreferences: X, X+Z, X+2*Z, X+3*Z, …, X+K*Z, …(while (X+K*Z)<=Y).OutputYour task is to data-mine input data and for each set determine whether\r\ndata were corrupted, which reference is occurring odd number of times,\r\nand count that reference.For each input data set you should print to standard output new line\r\nof text with either “no corruption” (low case) or two integers\r\nseparated by single space (first one is reference that occurs odd\r\nnumber of times and second one is count of that reference).SampleInput:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_input": "Input:1 10 1\r\n2 10 1\r\n\r\n1 10 1\r\n1 10 1\r\n\r\n1 10 1\r\n4 4 1\r\n1 5 1\r\n6 10 1Output:1 1\r\nno corruption\r\n4 3",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MSE07E",
  "scraped_at": "2025-08-17 00:34:04"
}