{
  "problem_code": "problems",
  "title": "Typesettin",
  "tags": [],
  "text": "Modern fonts are generally of two varieties: outline fonts, whose glyphs\r\n(the individual character shapes) are specified mathematically as a set of\r\ncurves, and bitmap fonts, whose glyphs are specified as patterns of pixels.\r\nFonts may also include embedded information such as kerning pairs (adjusting\r\nthe spacing between certain pairs of glyphs, such as \"AW\", so that they\r\nappear spaced correctly), tracking hints (for managing inter-glyph spacing),\r\nantialiasing hints (smoothing of pixellated edges), and much more. To be\r\nsure, modern fonts are more than a simple collection of shapes, and\r\ndisplaying them properly is a common programming challenge.For this problem we will concern ourselves with bitmapped fonts and a\r\nsimple form of typesetting called glyph packing. Essentially, the idea is to\r\npack the glyphs as tightly as possible while maintaining at least one\r\nhorizontal pixel of separation between glyphs. For example, consider the\r\nglyphs shown to the left below for the Roman characters \"P\" and \"J\". The\r\nfigure to the right shows them after glyph packing. Note that they are as\r\nclose as possible without touching horizontally.Here's another example. In this case, notice that the final glyph cannot be packed at all.After packing, pixels from distinct glyphs may be\r\nadjacent diagonally or vertically, but not horizontally. The following\r\nexample shows that pixels may be adjacent diagonally. The \"Love\" test case\r\nin the example input section shows that they may be adjacent vertically.Glyph packing has the nice property that it's\r\neasy to build \"fancy\" glyphs into the font so that glyph packing creates\r\nspecial effects with no extra work. Look at the \"Toy\" example below. The\r\nsame simple packing process has been applied to these glyphs as to the ones\r\nabove, but the result is more dramatic:Glyph packing has a few caveats, however, one of\r\nwhich we must concern ourselves with for this problem. Consider the example\r\non the left below where a glyph for a hyphen is followed by a glyph for an\r\nunderscore. Based on our one horizontal pixel of separation rule, how would\r\nthis pack? Clearly something more is needed, and that something more is\r\nhinting within the glyphs themselves. Recall that in actual practice, fonts\r\ncontain kerning pairs, tracking hints, etc. For our purposes, our hinting\r\nwill be limited to \"invisible\" pixels that count as a pixel for the purpose\r\nof packing, but not for display. The center image below represents invisible\r\npixels as open dots instead of closed dots. Now the two glyphs can be\r\nproperly packed, resulting in the output shown on the right.Now for the formal definition of a proper packing: (1) Glyphs are packed\r\nas close as possible without allowing any pixels from different glyphs to be\r\nimmediately horizontally adjacent; (2) Given two glyphs, they may not be\r\npacked in such a way that any pixel of the leftmost glyph at a given height\r\nends up positioned to the right of any pixel at the same height in the\r\nrightmost glyph.Condition (2) above is easily understood by visualizing two glyphs\r\nsitting side by side, separated by a small space. If you \"squeeze\" them\r\ntogether, condition (2) says that their pixels are not allowed to \"pass\r\nthrough\" one another. Consider the example to the left below. The center\r\nimage is not the proper packing, because it violates condition (2) of the\r\nformal definition. The image on the right is the proper packing of these\r\nglyphs.InputThe input for this problem is sets of glyphs to be packed.\r\nIn a given test case, all glyphs are the same height, and an integer, N, on\r\nthe first line of the test case specifies this height. The next N lines\r\ncontain the glyphs to be packed. Empty pixels in a glyph are represented by\r\na dot '.' character. Non-empty pixels are represented by a hash mark '#' for\r\nvisible pixels, and a zero '0' for invisible pixels. Glyphs are separated by\r\na single column of space characters. The input will always consist of more\r\nthan one glyph, at least one of which will always contain at least one\r\nvisible pixel. A glyph will always have at least one non-empty pixel in its\r\nleftmost and rightmost column, and every glyph will have at least one\r\nnon-empty pixel at the same height as at least one other glyph in the input.\r\nThe minimum dimension of a glyph is 1 x 1, the maximum dimension is 20 x 20,\r\nand the maximum number of glyphs that will appear in any test case is 20.\r\nTest cases continue until a value of zero is specified for N.OutputFor each test case, first output the number of that test\r\ncase (starting with 1) on a line by itself. Then output the proper packing\r\nof the input glyphs, using the dot '.' character for empty pixels and for\r\ninvisible pixels, and the hash mark '#' character for visible pixels. Omit\r\nleading and trailing empty columns (columns with no visible pixels) so that\r\nboth the leftmost and rightmost output columns contain at least one visible\r\npixel.ExampleInput:8\r\n###. ...#\r\n#..# ...#\r\n#..# ...#\r\n###. ...#\r\n#... ...#\r\n#... ...#\r\n#... #..#\r\n#... ####\r\n8\r\n############# .... .............\r\n..#.......... .... .............\r\n..#.......... .##. .........#..#\r\n..#.......... #..# .........#..#\r\n..#.......... #..# .........#..#\r\n..#.......... .##. ..........###\r\n............. .... ............#\r\n............. .... ############.\r\n8\r\n############# .............\r\n..#.......... .............\r\n..#.......... .........#..#\r\n..#.......... .........#..#\r\n..#.......... .........#..#\r\n..#.......... ..........###\r\n............. ............#\r\n............. ############.\r\n5\r\n0..0 0..0\r\n0..0 0..0\r\n#### 0..0\r\n0..0 0..0\r\n0..0 ####\r\n5\r\n#.... .###.\r\n#.... #...#\r\n#...# #...#\r\n#...# ....#\r\n.###. ....#\r\n3\r\n### 0.0 ###\r\n#.# 0.0 #.#\r\n### 0.0 ###\r\n3\r\n0.0 ### 0.0\r\n0.0 #.# 0.0\r\n0.0 ### 0.0\r\n8\r\n#.... .... ..... ....\r\n#.... .... ..... ....\r\n#.... .##. #...# .##.\r\n#.... #..# .#.#. #..#\r\n#.... #..# .#.#. #..#\r\n#.... #..# .#.#. ###.\r\n#.... .##. ..#.. #...\r\n##### .... ..#.. .###\r\n0Output:1\r\n###..#\r\n#..#.#\r\n#..#.#\r\n###..#\r\n#....#\r\n#....#\r\n#.#..#\r\n#.####\r\n2\r\n#############\r\n..#..........\r\n..#..##..#..#\r\n..#.#..#.#..#\r\n..#.#..#.#..#\r\n..#..##...###\r\n............#\r\n############.\r\n3\r\n.....#############\r\n.......#..........\r\n.......#.#..#.....\r\n.......#.#..#.....\r\n.......#.#..#.....\r\n.......#..###.....\r\n............#.....\r\n############......\r\n4\r\n.........\r\n.........\r\n####.....\r\n.........\r\n.....####\r\n5\r\n#......###.\r\n#.....#...#\r\n#...#.#...#\r\n#...#.....#\r\n.###......#\r\n6\r\n###.....###\r\n#.#.....#.#\r\n###.....###\r\n7\r\n###\r\n#.#\r\n###\r\n8\r\n#..............\r\n#..............\r\n#..##.#...#.##.\r\n#.#..#.#.#.#..#\r\n#.#..#.#.#.#..#\r\n#.#..#.#.#.###.\r\n#..##...#..#...\r\n#####...#...###",
  "sample_input": "Input:8\r\n###. ...#\r\n#..# ...#\r\n#..# ...#\r\n###. ...#\r\n#... ...#\r\n#... ...#\r\n#... #..#\r\n#... ####\r\n8\r\n############# .... .............\r\n..#.......... .... .............\r\n..#.......... .##. .........#..#\r\n..#.......... #..# .........#..#\r\n..#.......... #..# .........#..#\r\n..#.......... .##. ..........###\r\n............. .... ............#\r\n............. .... ############.\r\n8\r\n############# .............\r\n..#.......... .............\r\n..#.......... .........#..#\r\n..#.......... .........#..#\r\n..#.......... .........#..#\r\n..#.......... ..........###\r\n............. ............#\r\n............. ############.\r\n5\r\n0..0 0..0\r\n0..0 0..0\r\n#### 0..0\r\n0..0 0..0\r\n0..0 ####\r\n5\r\n#.... .###.\r\n#.... #...#\r\n#...# #...#\r\n#...# ....#\r\n.###. ....#\r\n3\r\n### 0.0 ###\r\n#.# 0.0 #.#\r\n### 0.0 ###\r\n3\r\n0.0 ### 0.0\r\n0.0 #.# 0.0\r\n0.0 ### 0.0\r\n8\r\n#.... .... ..... ....\r\n#.... .... ..... ....\r\n#.... .##. #...# .##.\r\n#.... #..# .#.#. #..#\r\n#.... #..# .#.#. #..#\r\n#.... #..# .#.#. ###.\r\n#.... .##. ..#.. #...\r\n##### .... ..#.. .###\r\n0Output:1\r\n###..#\r\n#..#.#\r\n#..#.#\r\n###..#\r\n#....#\r\n#....#\r\n#.#..#\r\n#.####\r\n2\r\n#############\r\n..#..........\r\n..#..##..#..#\r\n..#.#..#.#..#\r\n..#.#..#.#..#\r\n..#..##...###\r\n............#\r\n############.\r\n3\r\n.....#############\r\n.......#..........\r\n.......#.#..#.....\r\n.......#.#..#.....\r\n.......#.#..#.....\r\n.......#..###.....\r\n............#.....\r\n############......\r\n4\r\n.........\r\n.........\r\n####.....\r\n.........\r\n.....####\r\n5\r\n#......###.\r\n#.....#...#\r\n#...#.#...#\r\n#...#.....#\r\n.###......#\r\n6\r\n###.....###\r\n#.#.....#.#\r\n###.....###\r\n7\r\n###\r\n#.#\r\n###\r\n8\r\n#..............\r\n#..............\r\n#..##.#...#.##.\r\n#.#..#.#.#.#..#\r\n#.#..#.#.#.#..#\r\n#.#..#.#.#.###.\r\n#..##...#..#...\r\n#####...#...###",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TYPESET",
  "scraped_at": "2025-08-17 00:34:24"
}