{
  "problem_code": "problems",
  "title": "I",
  "tags": [],
  "text": "Most of you have probably tried to type an SMS message on the keypad of\r\na cellular phone. It is sometimes very annoying to write longer messages,\r\nbecause one key must be usually pressed several times to produce a single\r\nletter. It is due to a low number of keys on the keypad. Typical phone has\r\ntwelve keys only (and maybe some other control keys that are not used for\r\ntyping). Moreover, only eight keys are used for typing 26 letters of\r\nan English alphabet. The standard assignment of letters on the keypad is\r\nshown in the left picture:12abc3def4ghi5jkl6mno7pqrs8tuv9wxyz*0space#12abcd3efg4hijk5lm6nopq7rs8tuv9wxyz*0space#There are 3 or 4 letters assigned to each key. If you want the first letter\r\nof any group, you press that key once. If you want the second letter, you\r\nhave to press the key twice. For other letters, the key must be pressed three\r\nor four times. The authors of the keyboard did not try to optimise the layout\r\nfor minimal number of keystrokes. Instead, they preferred the even\r\ndistribution of letters among the keys. Unfortunately, some letters are more\r\nfrequent than others. Some of these frequent letters are placed on the third\r\nor even fourth place on the standard keyboard. For\r\nexample,Sis a very common letter in an English alphabet, and we need\r\nfour keystrokes to type it. If the assignment of characters was like in the\r\nright picture, the keyboard would be much more comfortable for typing average\r\nEnglish texts.ACM have decided to put an optimised version of the keyboard on its new\r\ncellular phone. Now they need a computer program that will find an optimal\r\nlayout for the given letter frequency. We need to preserve alphabetical\r\norder of letters, because the user would be confused if the letters were\r\nmixed. But we can assign any number of letters to a single key.InputThere is a single positive integerTon the first line of input (equal to about 2000). It stands\r\nfor the number of test cases to follow. Each test case begins with a line\r\ncontaining two integersK,L(1  ≤K≤L≤ 90) separated by\r\na single space.Kis the number of keys,Lis the number of letters to be\r\nmapped onto those keys. Then there are two lines. The first\r\none contains exactlyKcharacters each representing a name of one\r\nkey. The second line contains exactlyLcharacters representing names\r\nof letters of an alphabet. Keys and letters are represented by digits,\r\nletters (which are case-sensitive), or any punctuation characters (ASCII code\r\nbetween 33 and 126 inclusively). No two keys have the same character, no two\r\nletters are the same. However, the name of a letter can be used also as\r\na name for a key.After those two lines, there are exactlyLlines each containing exactly\r\none positive integerF1,F2...FL. These numbers determine the\r\nfrequency of every letter, starting with the first one and continuing with\r\nthe others sequentially. The higher number means the more common letter. No\r\nfrequency will be higher than 100000.OutputFind an optimal keyboard for each test case. Optimal keyboard is such that\r\nhas the lowest \"price\" for typing average text. Thepriceis determined\r\nas the sum of the prices of each letter. The price of a letter is a product\r\nof the letter frequency (Fi) and its position on the key. The order of\r\nletters cannot be changed, they must be grouped in the given order.If there are more solutions with the same price, we will try to maximise the\r\nnumber of letters assigned to the last key, then to the one before the last\r\none etc.More formally, you are to find a sequenceP1,P2, ...PLrepresenting the position of every letter on a particular key. The sequence\r\nmust meet following conditions:P1= 1for eachi>1, eitherPi=Pi-1+1 orPi= 1there are at mostKnumbersPisuch thatPi= 1the sum of productsSP= \r\nSum[i=1..l]Fi.Piis minimalfor any other sequenceQmeeting these criteria and with the same\r\n  sumSQ=SP, there exists suchM, \r\n1 ≤M≤Lthat for anyJ,M<J≤L,PJ=QJ, andPM>QM.The output for every test case must start with a single line sayingKeypad #I:, whereIis a sequential order of the test case,\r\nstarting with 1. Then there must be exactlyKlines, each representing one\r\nletter, in the same order that was used in input. Each line must contain the\r\ncharacter representing the key, a colon, one space and a list of letters\r\nassigned to that particular key. Letters are not separated from each other.Print one blank line after each test case, including the last one.ExampleInput:1\r\n8 26\r\n23456789\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n3371\r\n589\r\n1575\r\n1614\r\n6212\r\n971\r\n773\r\n1904\r\n2989\r\n123\r\n209\r\n1588\r\n1513\r\n2996\r\n3269\r\n1080\r\n121\r\n2726\r\n3083\r\n4368\r\n1334\r\n518\r\n752\r\n427\r\n733\r\n871Output:Keypad #1:\r\n2: ABCD\r\n3: EFG\r\n4: HIJK\r\n5: LM\r\n6: NOPQ\r\n7: RS\r\n8: TUV\r\n9: WXYZWarning: large Input/Output data, be careful with certain languages",
  "sample_input": "Input:1\r\n8 26\r\n23456789\r\nABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n3371\r\n589\r\n1575\r\n1614\r\n6212\r\n971\r\n773\r\n1904\r\n2989\r\n123\r\n209\r\n1588\r\n1513\r\n2996\r\n3269\r\n1080\r\n121\r\n2726\r\n3083\r\n4368\r\n1334\r\n518\r\n752\r\n427\r\n733\r\n871Output:Keypad #1:\r\n2: ABCD\r\n3: EFG\r\n4: HIJK\r\n5: LM\r\n6: NOPQ\r\n7: RS\r\n8: TUV\r\n9: WXYZ",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/IKEYB",
  "scraped_at": "2025-08-17 00:33:39"
}