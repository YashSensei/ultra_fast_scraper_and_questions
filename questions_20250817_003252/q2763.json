{
  "problem_code": "problems",
  "title": "AND Queries",
  "tags": [],
  "text": "Given an arrayAofNintegers, you are required to solveQqueries. Each query consists of a positive integerVand a non-negative integerK. For each query, find out how many numbers in the arrayAhave exactlyKcommon one bits with the numberV.In other words, for each query, you need to calculate how many numbers are there in the array such thatAi&Vhave exactlyKbits set in its binary representation, where&denotes thebitwise ANDoperation.Note that since the input can be huge, they will be generated randomly using a pseudorandom generator, whose parameters will be given as input. Also for similar reasons, it is not required to output the result for every query, rather compute the sum of this value for all queries and output this sum. More specifically, for thei-thquery, letCibe the count of integers inAhaving exactlyKcommon one bits withVi. Then it is required to output the sum of allCionly.InputThe first line contains an integerT, denoting the number of test cases. Each test case contains six space separated integers in the order:seed, N, Q, mod_A, mod_V, mod_K. Afterwards, the input for each test case will be generated as described by the python code below.def random():\r\n   global seed\r\n   seed = (seed * 997 + 29) % 2117566807\r\n   return seed\r\n\r\nA = [0 for _ in range(N)]\r\n\r\nfor i in range(N):\r\n   A[i] = random() % mod_A\r\n\r\nV = [0 for _ in range(Q)]\r\nK = [0 for _ in range(Q)]\r\n\r\nfor i in range(Q):\r\n   V[i] = random() % mod_V\r\n   K[i] = random() % mod_KNote that theseedis a global variable which gets updated after each random call, with the initial value being given as input.Constraints1 ≤ T ≤ 251 ≤ N, Q ≤ 2500000 ≤ seed < 21175668071 ≤ mod_A, mod_V ≤ 2500001 ≤ mod_K ≤ 19OutputFor each test case, output the case number followed by the required output. Please refer to the sample input/output section for more clarity of the format.Sample Input2\r\n1 10 10 4 4 3\r\n0 100 1000 10000 100000 10Sample OutputCase 1: 26\r\nCase 2: 10260ExplanationFor the first case:A = [2, 3, 0, 1, 1, 2, 2, 3, 1, 0]V = [2, 0, 3, 1, 0, 0, 2, 0, 0, 1]K = [0, 2, 1, 1, 1, 2, 2, 0, 2, 2]C = [5, 0, 6, 5, 0, 0, 0, 10, 0, 0]",
  "sample_input": "def random():\r\n   global seed\r\n   seed = (seed * 997 + 29) % 2117566807\r\n   return seed\r\n\r\nA = [0 for _ in range(N)]\r\n\r\nfor i in range(N):\r\n   A[i] = random() % mod_A\r\n\r\nV = [0 for _ in range(Q)]\r\nK = [0 for _ in range(Q)]\r\n\r\nfor i in range(Q):\r\n   V[i] = random() % mod_V\r\n   K[i] = random() % mod_K",
  "sample_output": "2\r\n1 10 10 4 4 3\r\n0 100 1000 10000 100000 10",
  "link": "https://www.spoj.com/problems/ANDQQ",
  "scraped_at": "2025-08-17 00:34:00"
}