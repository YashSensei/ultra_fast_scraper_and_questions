{
  "problem_code": "problems",
  "title": "Tree Similarity",
  "tags": [],
  "text": "You are given two labeled and ordered rooted trees T and T' and\r\nwould like to calculate thedistancefrom T to T', which is\r\nthe minimum number of operations you can perform on T to make itequivalentto T'. For each operation you can choose to do one of three things:change\r\nthe label of one node in Tdelete a non-root node in Tinsert a new node in T at a position somewhere below its rootRecall the trees T and T' are ordered, which means that if a\r\nnon-leaf node has c children, its children are ordered from 1 to\r\nc. That is, there is a 1st child, a 2nd child, etc., all the\r\nway up to a cth child. When we say a tree X is equivalent\r\nto a tree Y, we mean the root of X should have the same label\r\nas the root of Y, their roots should have the same number of\r\nchildren (call it c), and the subtree rooted at the ith child of the\r\nroot of X should be equivalent to the subtree rooted at the ith\r\nchild of the root of Y for i=1, 2 ... c.We now describe what we mean by deletion and insertion of non-root\r\nnodes in T. When deleting a non-root node w with d children,\r\nlet u be its\r\nparent and suppose w is u's ith child. Then the first child of\r\nw becomes u's ith child, the second child of w becomes u's\r\n(i+1)st child, etc. For j < i, the jth child of u remains the\r\nsame, but for all j > i, the child which was formerly the jth\r\nchild of u now becomes its (j+d-1)st child (they get \"shifted\r\nover\" due to the insertion of w's children into u's child list).\r\nTo insert a non-root node w into the tree, we can choose any node\r\nu to be its parent, and we can choose any contiguous subsequence\r\n(possibly empty) of u's children to become w's children, putting\r\nw in their place. When inserting a node, we can give it any label\r\nwe want at the time of insertion.The root of T can never be deleted, and you can never\r\ninsert a new node above the root to become the old root's parent. You\r\ncan, however, change the label of the root.InputThe first line contains n and m separated by a space, the sizes of\r\nthe trees T and T', respectively (1 ≤ n, m ≤ 60). The next\r\nn lines describe\r\nT. On the ith line is a description of the ith node in the\r\ntree: its label, the number of children it has, then a list of its\r\nchildren in order from first to last, all space-separated. The next\r\nm lines similarly describe T'. Labels are nonnegative\r\nintegers fitting in a 32-bit signed integer. The root of each tree is the node which is not the child of any other node in the tree.OutputOn a single line output the minimum number of operations that can be\r\nperformed on T to make it equivalent to T', followed by a newline.ExampleInput:3 2\r\n6 0\r\n1 2 0 2\r\n4 0\r\n2 1 1\r\n4 0Output:2",
  "sample_input": "Input:3 2\r\n6 0\r\n1 2 0 2\r\n4 0\r\n2 1 1\r\n4 0Output:2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TREESIM",
  "scraped_at": "2025-08-17 00:33:19"
}