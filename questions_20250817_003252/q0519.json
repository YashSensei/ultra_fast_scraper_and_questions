{
  "problem_code": "problems",
  "title": "Disjoint Paths",
  "tags": [],
  "text": "One of your classes has K students in it who really don't like each other.  In fact, they dislike each other so much that they want to find routes to class that don't cross at any intersection so that they won't ever see each other outside of class.  Can you find such routes?InputThe input file will contain multiple cases. The first line of each\r\ncase is K N, where K is the number of routes you need\r\nto find and N is the number of intersections in MIT's floor plan.\r\nThe intersections are numbered 1 ... N. This is followed\r\nby N lines, one for each intersection, containing the indices of\r\nthe adjacent intersections, separated by spaces.  (This means that\r\nif the line for intersection 2 contains a 3, then the line for\r\nintersection 3 will contain a 2.)  Every intersection is adjacent\r\nto at least one other intersection.\r\n\r\nEach case is followed immediately by the next case. The end of the\r\ninput is indicated by a line containing only \"0 0\".\r\n\r\nYou may assume that 1 ≤ K ≤ 100 and 2 ≤ N ≤ 5000.\r\n\r\nThe students all start at intersection 1 and their class is at intersection 2.OutputFor each case, output the case number, in the format \"Case #:\", followed by a newline.\r\n\r\nIf there are K non-intersecting routes from the start (1) to the end (2),\r\nthen this must be followed K lines, each one giving a list of corners,\r\nin order, on one such route from 1 to 2.  If not, then output one line\r\nwith the word \"Impossible\".\r\n\r\nOutput a blank line after each test case.ExampleInput:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_input": "Input:3 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n3 4 5\r\n3 4 5\r\n1 2\r\n1 2\r\n1 2\r\n0 0Output:Case 1:\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n\r\nCase 2:\r\nImpossible",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/DISJPATH",
  "scraped_at": "2025-08-17 00:33:17"
}