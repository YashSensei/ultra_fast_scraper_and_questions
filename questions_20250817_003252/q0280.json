{
  "problem_code": "problems",
  "title": "Example",
  "tags": [],
  "text": "As you may have probably noticed a problem statement in a programming contest consists of several\r\nsections. The most important section is, of course, the \"Example\" section. Some seasoned contestants even\r\nstart reading the problem statement from the examples. And, unfortunately, the least read section is the\r\nproblem description section. It is quite disappointing for the problem authors because they feel that their\r\nwriting skills are largely wasted.So the authors decided to describe examples in the same language, as the rest of the problem statement using\r\nthe following rules.Natural integer numbers shall be written in plain English. The numbers shall be less than one hundred. The\r\ndesignator number shall be written before numbers, except when the corresponding number is used as arepetition factor. For example,number zero,number sixteen, ornumber sixty one.Sequences of characters (strings) shall be written either in quotes, or in apostrophes, for example\"John's pen\",\r\nor'5\" tall'. Note, that ' may be used in strings enclosed in \" and vice versa. The designator string\r\nshall be written before strings, for examplestring 'Hello'.The designatorspacedenotes one space character.A number, string or space may be prefixed with arepetition factor. The repetition factor is a number greater\r\nthan one. The designator after the repetition factor is written in plural form. For example,four numbers five, orsix strings 'A'. If the repetition factor is used for numbers, the numbers are separated with one space character. So, the former example means5 5 5 5, but the latter exampleAAAAAA.Let the numbers, strings and spaces with possible repetition factors be calledfragments. Fragments may be\r\norganized intosequencesusing thefollowed bycopulative. For example,number five followed by number six. One implicit space character is assumed between numbers, a number and a string, and a string\r\nand a number so the example above means5 6.An example is described line by line. The first line is always described asThe first line.... The following\r\nlines are described either asThe next line...or asThe next # lines..., where#is a number greater\r\nthan one. Empty lines are described asis emptyorare empty. Other lines are described ascontainsorcontainfollowed by sequences. The first letter of a sentence is capitalized. The sentence is terminated by\r\na full stop (.). The full stop is not separated by space from the preceding word, but is separated by at least one\r\nspace from the next word.InputThe input contains a free-flow text describing an example. Words are separated by an arbitrary number of\r\nspaces and newlines. There are no whitespace characters after the last full stop. The total size of the input\r\nwill be no greater than 1 MB.OutputThe output should contain the decoded example. The total size of the output shall be no greater than 1 MB.ExampleInput:The first line contains four\r\nnumbers twenty eight. The next\r\nline is empty. The next two\r\nlines contain six strings '-'.\r\nThe next line contains number\r\nfour followed by number seventy\r\nseven followed by string 'meat'\r\nfollowed by three strings \"!\".Output:28 28 28 28\r\n\r\n------\r\n------\r\n4 77 meat!!!",
  "sample_input": "Input:The first line contains four\r\nnumbers twenty eight. The next\r\nline is empty. The next two\r\nlines contain six strings '-'.\r\nThe next line contains number\r\nfour followed by number seventy\r\nseven followed by string 'meat'\r\nfollowed by three strings \"!\".Output:28 28 28 28\r\n\r\n------\r\n------\r\n4 77 meat!!!",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/EXAMPLE",
  "scraped_at": "2025-08-17 00:33:21"
}