{
  "problem_code": "problems",
  "title": "Making Mountains Out Of Molehills",
  "tags": [],
  "text": "A macro processor is a symbol processing program. It takes a stream of characters as its input, and\r\nproduces a stream of characters as its output. A “macro” is similar to ordinary function in that it has a\r\ndefinition, and when invoked, that definition is applied to the argument(s) to yield the result. In this\r\nproblem, you will develop a simple macro processor.A “macro call” consists of a name and a list of arguments, separated by commas. The name is preceded by\r\n'[' (a left bracket) and the last argument is followed by ']' (a right bracket). For example, “[doit,to,it]”\r\ncalls the macro named “doit” with two arguments, “to” and “it”. “[random]” calls the macro named “random”\r\nwith no arguments.Before a macro can be called, it must be defined by associating its name with a symbol string. This\r\ndefinition string may contain the special constructions “$1” through “$9” to reference the first through\r\nthe ninth macro parameters. “$0” references the macro’s name itself. When the macro is called, these\r\nconstructions are literally replaced by the values of the parameters. For example, suppose the definition\r\nstring for the macro named “321” was “$3-$2-$1”. The macro call “[321,This,is,fun]” would yield the output\r\n“fun-is-This”. A macro call can appear anywhere. For example, the macro call “[321,[321,A,B,C],D,E]” would\r\nyield the output “E-D-C-B-A”.Input enclosed in '<' and '>' prevents the evaluation of the text enclosed, allowing special characters like\r\n'[', ']', ',' and '$' to be used in other than their usual contexts. Thus the macro call “[321,<$>,<[>,<,>]” would\r\nyield “,-[-$”.Macros are defined using the predefined macro named “def”, which has two arguments. The first argument\r\nis the name of the macro being defined, and the second argument is the defining symbol string for the\r\nmacro. The “321” macro definition is “[def,321,<$3-$2-$1>]”. Note that the definition is enclosed in '<' and\r\n'>' to prevent “$1”, “$2”, and “$3” from being interpreted as parameter references to def. The def macro\r\nproduces no output. Naturally, the def macro isn’t defined using def, but is treated specially by the\r\nimplementation.ProcessingThe input stream is processed character by character and copied to the output until a macro call is\r\nencountered, or the input is exhausted (which terminates processing). A macro call is evaluated as\r\ndescribed below, with the result (if any) copied to the output.The macro name and the parameters are evaluated in sequence from left to right. This may require\r\nevaluating additional macro calls, which must be processed recursively.When the argument list is complete (that is, when the closing ']' is encountered) the definition of\r\nthe macro being called is scanned in the same manner as the original input stream except that\r\noccurrences of “$0”, “$1”, and so forth are replaced literally by the corresponding arguments. The\r\nresult of the macro call is the symbol stream produced by this scan.When the macro call is completed, the macro name and the arguments are discarded, and processing\r\nresumes at the point where it was interrupted by the macro call.Limits and CaveatsMacro names and arguments will contain no more than 32 characters each. The defining string for a macro\r\nwill contain no more than 100 characters. Macros will never be defined more than once (that is, the same\r\nmacro name will not be used more than once as the first argument to “def”). Macro calls will always provide\r\nthe correct number of arguments. Character case is significant in comparisons. All input characters,\r\nincluding end of line characters, are to be processed through the macro processor. No output line will\r\ncontain more than 80 characters, including the end of line character. The input is guaranteed to be correct.InputThere will be multiple cases to consider. The input for each case begins with a line containing a single\r\ninteger between 1 and 10, that specifies the number of lines of text immediately following that will be used\r\nas input to the macro processor. None of these lines will contain more than 80 characters, so the input to\r\nthe macro processor will contain at most 810 characters. The last case will be followed by a line containing\r\nthe integer 0.OutputFor each input case, display the case number (1, 2, …), a line containing 79 hyphens, the output from the\r\nmacro processor, another line containing 79 hyphens, and a blank line.In the sample input shown below, assume that the last visible character on each line is immediately followed\r\nby the end of line character. Blank lines in the expected output are shown here as **BLANK** for clarity,\r\nbut these should actually be totally blank in your output.ExampleInput:1\r\nThis is just copied (including end of line).\r\n1\r\n[def,321,<$3-$2-$1>][321,This,is,fun]\r\n1\r\n[def,321,<$3-$2-$1>][321,[321,A,B,C],D,E]\r\n1\r\n[def,321,<$3-$2-$1>][321,This,is,fun][321,[321,A,B,C],D,E]\r\n3\r\n[def,321,<$3-$2-$1>]\r\n[321,This,is,fun]\r\n[321,[321,A,B,C],D,E]\r\n3\r\n[def,A,<$1[B]$2>]\r\n[def,B,*B*]\r\n[A,1,2]\r\n2\r\n[def,#,<[-]$1[-]$2[-]$3[-]>][def,-,<$0>][def,DEF,def][[DEF],X,THIS IS X]\r\n[X][#,DEF,#,X]\r\n0Output:Case 1\r\n-------------------------------------------------------------------------------\r\nThis is just copied (including end of line).\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 2\r\n-------------------------------------------------------------------------------\r\nfun-is-This\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 3\r\n-------------------------------------------------------------------------------\r\nE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 4\r\n-------------------------------------------------------------------------------\r\nfun-is-ThisE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 5\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nfun-is-This\r\nE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 6\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\n**BLANK**\r\n1*B*2\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 7\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nTHIS IS X-DEF-#-X-\r\n-------------------------------------------------------------------------------\r\n**BLANK**",
  "sample_input": "Input:1\r\nThis is just copied (including end of line).\r\n1\r\n[def,321,<$3-$2-$1>][321,This,is,fun]\r\n1\r\n[def,321,<$3-$2-$1>][321,[321,A,B,C],D,E]\r\n1\r\n[def,321,<$3-$2-$1>][321,This,is,fun][321,[321,A,B,C],D,E]\r\n3\r\n[def,321,<$3-$2-$1>]\r\n[321,This,is,fun]\r\n[321,[321,A,B,C],D,E]\r\n3\r\n[def,A,<$1[B]$2>]\r\n[def,B,*B*]\r\n[A,1,2]\r\n2\r\n[def,#,<[-]$1[-]$2[-]$3[-]>][def,-,<$0>][def,DEF,def][[DEF],X,THIS IS X]\r\n[X][#,DEF,#,X]\r\n0Output:Case 1\r\n-------------------------------------------------------------------------------\r\nThis is just copied (including end of line).\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 2\r\n-------------------------------------------------------------------------------\r\nfun-is-This\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 3\r\n-------------------------------------------------------------------------------\r\nE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 4\r\n-------------------------------------------------------------------------------\r\nfun-is-ThisE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 5\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nfun-is-This\r\nE-D-C-B-A\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 6\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\n**BLANK**\r\n1*B*2\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nCase 7\r\n-------------------------------------------------------------------------------\r\n**BLANK**\r\nTHIS IS X-DEF-#-X-\r\n-------------------------------------------------------------------------------\r\n**BLANK**",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/MKMOOM",
  "scraped_at": "2025-08-17 00:34:23"
}