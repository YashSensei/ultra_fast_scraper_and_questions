{
  "problem_code": "problems",
  "title": "Square dance",
  "tags": [],
  "text": "You are hired by French NSA to break the RSA code used on the Pink Card. The easiest way to do that is to factor the public modulus and\r\nyou have found the fastest algorithm to do that, except that you have to solve a subproblem that can be modeled in the following way.Let P = {p1, p2... pn} be a set of prime numbers. If S = {s1, s2... su} and\r\nT = {t1... tv} are formed with elements of P, then S*T will denote the quantity s1* s2* ... *\r\nsu* t1* t1* ... tv.We call relation a set of two primes p, q, where p and q are distinct elements of P. You dispose of a collection of R\r\nrelations Si= {pi, qi} and you are interested in finding\r\nsequences of these Si1, Si2... Siksuch that\r\nSi1* Si2* ... * Sikis a perfect square.The way you look for these squares is the following. The ultimate goal is to count squares that appear in the process. Relations arrive one at\r\na time. You maintain a collection of C relations that do not contain any square subproduct. This is easy: at first, C is empty. Then a relation arrives and C\r\nbegins to grow. Suppose a new relation {p, q} arrives. If no square appears when adding {p, q} to C, then {p, q} is added to the collection.\r\nOtherwise, a square is about to appear, we increase the number of squares, but we do not store this relation, hence C keeps the desired property.Let us consider an example. First arrives S1= {2, 3} and we put it in C. Then arrives S2= {5, 11}, S3= {3, 7}\r\nand they are stored in C. Now enters the relation S4= {2, 7}. This relation could be used to form the square:\r\nS1* S3* S4= (2 * 3) * (3 * 7) * (2 * 7) = (2 * 3 * 7)2.So we count 1 and do not store S4in C. Now we consider S5= {5, 11} that could make a square with S2,\r\nso we count 1 square more. Then S6= {2, 13} is put into C. Now C could make\r\nthe square S1* S3* S6* S7. Eventually, we get 3 squares.InputThe first line of the input contains a number T ≤ 30 that indicates the number of test cases to follow. Each test case begins with a line containing two integers P and R: P ≤ 105is the number of primes occurring in the test case; R (≤ 105) is the number of sets of primes\r\nthat arrive. The subsequent R lines each contain two integers i and j making a set {pi,qi} (1 ≤ i, j ≤ P).\r\nNote that we actually do not deal with the primes, they are irrelevant to the solution.OutputFor each test case, output the number of squares that can be formed using the preceding rules.ExampleInput:2\r\n6 7\r\n1 2\r\n3 5\r\n2 4\r\n1 4\r\n3 5\r\n1 6\r\n4 6\r\n2 3\r\n1 2\r\n1 2\r\n1 2Output:3\r\n2Warning: large Input/Output data, be careful with certain languages",
  "sample_input": "Input:2\r\n6 7\r\n1 2\r\n3 5\r\n2 4\r\n1 4\r\n3 5\r\n1 6\r\n4 6\r\n2 3\r\n1 2\r\n1 2\r\n1 2Output:3\r\n2",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/SQDANCE",
  "scraped_at": "2025-08-17 00:33:22"
}