{
  "problem_code": "problems",
  "title": "Modular Tetration",
  "tags": [],
  "text": "The ordinary arithmetical operations of addition, multiplication and exponentiation are naturally extended into a sequence ofhyperoperationsas follows.3×7  = 3 + 3 + 3 + 3 + 3 + 3 + 3 ; there are 7 copies of \"3\"\r\n3^7  = 3 × 3 × 3 × 3 × 3 × 3 × 3 ; there are 7 copies of \"3\"\r\n3^^7 = (3^(3^(3^(3^(3^(3^3)))))) ; there are 7 copies of \"3\"To extend the sequence of operations beyond exponentiation, Knuth defined a “double arrow” operator to denote iterated exponentiation(tetration)^^ in ASCII notation.\r\n\r\nThis gives us some very big numbers, your task will be to compute modular tetration.X^0=1for allX, as an empty product.X^^0=1for allX, for similar reason.InputThe first line of input contains an integerT, the number of test cases.\r\nOn each of the nextTlines, your are given\r\nthree integersX,N, andM.OutputFor each test case, you have to printX^^N modulo M.ExampleInput:3\r\n3 2 20\r\n3 3 345\r\n993306745 75707320 1000000000Output:7\r\n312\r\n884765625Constraints0 < T <= 10^4\r\nX, N, M unsigned 32bit integers\r\n1 < MExplanations3^^2 = 3^3 = 27 = 7 [mod 20]\r\n3^^3 = 3^(3^3) = 3^27 = 7625597484987 = 312 [mod 345]Problem designed to be solvable using some 'slow' languages like Python, under half the time limit. (2017-02-11 : TL updated ; compiler changes)\r\nIt is recommended to solve firstPower Tower City.\r\n;-) Have fun.",
  "sample_input": "3×7  = 3 + 3 + 3 + 3 + 3 + 3 + 3 ; there are 7 copies of \"3\"\r\n3^7  = 3 × 3 × 3 × 3 × 3 × 3 × 3 ; there are 7 copies of \"3\"\r\n3^^7 = (3^(3^(3^(3^(3^(3^3)))))) ; there are 7 copies of \"3\"",
  "sample_output": "Input:3\r\n3 2 20\r\n3 3 345\r\n993306745 75707320 1000000000Output:7\r\n312\r\n884765625",
  "link": "https://www.spoj.com/problems/MTETRA",
  "scraped_at": "2025-08-17 00:33:30"
}