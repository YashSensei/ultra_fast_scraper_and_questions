{
  "problem_code": "problems",
  "title": "Routing",
  "tags": [],
  "text": "You work as an engineer for theInane Collaboration for Performance Computing, where you are in charge of designing an intercommunication network for their computers. The network is arranged as a rectangular array of 2n−1 rows, each having 2n− 1switches. A switch is a device with two input wires,XandY, and two output wires,X′ andY′. If the switch is off, data from inputXwill be relayed to outputX′, and data fromYtoY′. If it is on,Xwill be connected toY′ andYtoX′. Additionally, there are 2ncomputers in the topmost and bottommost rows, and messages need to be sent between pairs of them. Notice that data from two different sources cannot share a wire but, of course, both pieces of data can be routed through the same switch on different inputs.You have come to the conclusion that the network that best suits your purposes has the Beneš topology. A 1-Beneš network is just a switch. Forn> 1, an-Beneš network can be constructed recursively as follows:In the first (top) row there are 2n− 1switches such that switchj(0 ≤j< 2n−1) has data inputs from computers 2jand 2j+ 1 (we label the computers in the topmost and bottommost rows with integers between 0 and 2n− 1, inclusive, from left to right).Then aperfect shufflepermutation is applied to the output wires between the first and the second rows of switches, meaning that output numberjin a row is connected to input numberj′ in the next row, wherej′ is obtained by rotating the n-bit pattern representingjin binary one bit to the right (again, inputs and outputs are numbered from left to right).Ifn> 2, the next rows of switches, up to (and including) the last-but-one, form two (n−1)-Beneš subnetworks, one on the left side and the other on the right side.Finally, theinverseshuffle permutation is applied to the outputs and a last row of switches is added.3-Benes networkFor example, the figure on the left shows the Beneš network forn=3 ( squares represent switches; computers in the top and bottom rows are not drawn, but assigned with integers from 0 to 7). The figure on the right shows a possible state of the switches; squares where two of the lines cross are switches that have been turned on. You may verify that this state allows us to simultaneously establish communication paths from computers 0, 1, 2, 3, 4, 5, 6, 7 at the bottom to 3, 7, 4, 0, 2, 6, 1, 5 at the top, respectively.You are given a set of pairs (a,b) of computers to connect simultaneously (whereais a computer in the bottom row andba computer in the top row) by means of wire-disjoint paths, and you are to find how to select the state of all switches so that this can be accomplished.InputThe first line of each test case is an integern(1 ≤n≤ 13), meaning that you have 2npairs of computers to connect, as described above. A line withn= 0 marks the end of the input and should not be processed.Each line withn> 0 will be followed by another line containing 2nintegers. Thei-th integer (0 ≤i< 2n) will be the computer in the topmost row that thei-th computer in the bottommost row needs to communicate with.OutputThe output for each case should have 2n−1 lines, each containing a binary string of length 2n−1indicating, for each switch, whether it must be turned on (1) or off (0).The input given will always have at least one solution. In case of several solutions, return the lexicographically smallest one. That is, the string in the top row must be lexicographically smallest; in case of a tie, the string in the second row must be lexicographically smallest, and so on.Outputs for different test cases should be separated by a blank line.Sample Input2\r\n3 2 1 0\r\n3\r\n3 7 4 0 2 6 1 5\r\n0Sample Output00\r\n11\r\n11\r\n\r\n0011\r\n0000\r\n0110\r\n1111\r\n1101Problemsetter: David García Soriano",
  "sample_input": "2\r\n3 2 1 0\r\n3\r\n3 7 4 0 2 6 1 5\r\n0",
  "sample_output": "00\r\n11\r\n11\r\n\r\n0011\r\n0000\r\n0110\r\n1111\r\n1101",
  "link": "https://www.spoj.com/problems/ROUTING",
  "scraped_at": "2025-08-17 00:34:02"
}