{
  "problem_code": "problems",
  "title": "Tourist",
  "tags": [],
  "text": "A lazy tourist wants to visit as many interesting locations in a city as possible without going one\r\nstep further than necessary. Starting from his hotel, located in the north-west corner of city, he\r\nintends to take a walk to the south-east corner of the city and then walk back. When walking to\r\nthe south-east corner, he will only walk east or south, and when walking back to the north-west\r\ncorner, he will only walk north or west. After studying the city map he realizes that the task is not\r\nso simple because some areas are blocked. Therefore he has kindly asked you to write a program\r\nto solve his problem.Given the city map (a 2D grid) where the interesting locations and blocked areas are marked,\r\ndetermine the maximum number of interesting locations he can visit. Locations visited twice are\r\nonly counted once.InputThe first line in the input contains the number of test cases (at most 20). Then follow the cases.\r\nEach case starts with a line containing two integers, W and H (2 ≤ W, H ≤ 100), the width and\r\nthe height of the city map. Then follow H lines, each containing a string with W characters with\r\nthe following meaning:. Walkable area* Interesting location (also walkable area)# Blocked areaYou may assume that the upper-left corner (start and end point) and lower-right corner (turning\r\npoint) are walkable, and that a walkable path of length H + W − 2 exists between them.OutputFor each test case, output a line containing a single integer: the maximum number of interesting\r\nlocations the lazy tourist can visit.ExampleInput:2\r\n9 7\r\n*........\r\n.....**#.\r\n..**...#*\r\n..####*#.\r\n.*.#*.*#.\r\n...#**...\r\n*........\r\n5 5\r\n.*.*.\r\n*###.\r\n*.*.*\r\n.###*\r\n.*.*.Output:7\r\n8",
  "sample_input": "Input:2\r\n9 7\r\n*........\r\n.....**#.\r\n..**...#*\r\n..####*#.\r\n.*.#*.*#.\r\n...#**...\r\n*........\r\n5 5\r\n.*.*.\r\n*###.\r\n*.*.*\r\n.###*\r\n.*.*.Output:7\r\n8",
  "sample_output": "Not found",
  "link": "https://www.spoj.com/problems/TOURIST",
  "scraped_at": "2025-08-17 00:34:24"
}